
tommy_fork_lift_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004770  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004948  08004948  00005948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004988  08004988  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004988  08004988  00005988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004990  08004990  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004990  08004990  00005990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004994  08004994  00005994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004998  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  2000000c  080049a4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  080049a4  0000628c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011da8  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c1  00000000  00000000  00017de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  0001a2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9a  00000000  00000000  0001b2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000022a7  00000000  00000000  0001bf62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013456  00000000  00000000  0001e209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d93e3  00000000  00000000  0003165f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010aa42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043ec  00000000  00000000  0010aa88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0010ee74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004930 	.word	0x08004930

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004930 	.word	0x08004930

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 031c 	add.w	r3, r7, #28
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800051e:	4b66      	ldr	r3, [pc, #408]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a65      	ldr	r2, [pc, #404]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000524:	f043 0310 	orr.w	r3, r3, #16
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b63      	ldr	r3, [pc, #396]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0310 	and.w	r3, r3, #16
 8000532:	61bb      	str	r3, [r7, #24]
 8000534:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	4b60      	ldr	r3, [pc, #384]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a5f      	ldr	r2, [pc, #380]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 800053c:	f043 0304 	orr.w	r3, r3, #4
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b5d      	ldr	r3, [pc, #372]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054e:	4b5a      	ldr	r3, [pc, #360]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000552:	4a59      	ldr	r2, [pc, #356]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000554:	f043 0320 	orr.w	r3, r3, #32
 8000558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055a:	4b57      	ldr	r3, [pc, #348]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	f003 0320 	and.w	r3, r3, #32
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b54      	ldr	r3, [pc, #336]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	4a53      	ldr	r2, [pc, #332]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000572:	4b51      	ldr	r3, [pc, #324]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b4e      	ldr	r3, [pc, #312]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000582:	4a4d      	ldr	r2, [pc, #308]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000584:	f043 0302 	orr.w	r3, r3, #2
 8000588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058a:	4b4b      	ldr	r3, [pc, #300]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000596:	4b48      	ldr	r3, [pc, #288]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059a:	4a47      	ldr	r2, [pc, #284]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a2:	4b45      	ldr	r3, [pc, #276]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a6:	f003 0308 	and.w	r3, r3, #8
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, C_IN1_Pin|C_IN2_Pin|D_IN1_Pin|LED4_Pin
 80005ae:	2200      	movs	r2, #0
 80005b0:	f246 71d8 	movw	r1, #26584	@ 0x67d8
 80005b4:	4841      	ldr	r0, [pc, #260]	@ (80006bc <MX_GPIO_Init+0x1b4>)
 80005b6:	f001 f9db 	bl	8001970 <HAL_GPIO_WritePin>
                          |LED3_Pin|LED2_Pin|LED1_Pin|D_IN2_Pin
                          |LINEAR_ACT_2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LINEAR_ACT_2_1_Pin|LINEAR_ACT_1_2_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80005c0:	483f      	ldr	r0, [pc, #252]	@ (80006c0 <MX_GPIO_Init+0x1b8>)
 80005c2:	f001 f9d5 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005cc:	483d      	ldr	r0, [pc, #244]	@ (80006c4 <MX_GPIO_Init+0x1bc>)
 80005ce:	f001 f9cf 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d8:	483b      	ldr	r0, [pc, #236]	@ (80006c8 <MX_GPIO_Init+0x1c0>)
 80005da:	f001 f9c9 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_IN2_Pin|A_IN1_Pin|B_IN1_Pin|B_IN2_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 80005e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e8:	f001 f9c2 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LINEAR_ACT_1_1_GPIO_Port, LINEAR_ACT_1_1_Pin, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005f2:	4836      	ldr	r0, [pc, #216]	@ (80006cc <MX_GPIO_Init+0x1c4>)
 80005f4:	f001 f9bc 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C_IN1_Pin C_IN2_Pin D_IN1_Pin LED4_Pin
                           LED3_Pin LED2_Pin LED1_Pin D_IN2_Pin
                           LINEAR_ACT_2_2_Pin */
  GPIO_InitStruct.Pin = C_IN1_Pin|C_IN2_Pin|D_IN1_Pin|LED4_Pin
 80005f8:	f246 73d8 	movw	r3, #26584	@ 0x67d8
 80005fc:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin|LED2_Pin|LED1_Pin|D_IN2_Pin
                          |LINEAR_ACT_2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	4619      	mov	r1, r3
 8000610:	482a      	ldr	r0, [pc, #168]	@ (80006bc <MX_GPIO_Init+0x1b4>)
 8000612:	f001 f82b 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : LINEAR_ACT_2_1_Pin LINEAR_ACT_1_2_Pin */
  GPIO_InitStruct.Pin = LINEAR_ACT_2_1_Pin|LINEAR_ACT_1_2_Pin;
 8000616:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800061a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2300      	movs	r3, #0
 8000626:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4619      	mov	r1, r3
 800062e:	4824      	ldr	r0, [pc, #144]	@ (80006c0 <MX_GPIO_Init+0x1b8>)
 8000630:	f001 f81c 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000634:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	4619      	mov	r1, r3
 800064c:	481d      	ldr	r0, [pc, #116]	@ (80006c4 <MX_GPIO_Init+0x1bc>)
 800064e:	f001 f80d 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000652:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4619      	mov	r1, r3
 800066a:	4817      	ldr	r0, [pc, #92]	@ (80006c8 <MX_GPIO_Init+0x1c0>)
 800066c:	f000 fffe 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : A_IN2_Pin A_IN1_Pin B_IN1_Pin B_IN2_Pin */
  GPIO_InitStruct.Pin = A_IN2_Pin|A_IN1_Pin|B_IN1_Pin|B_IN2_Pin;
 8000670:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4619      	mov	r1, r3
 8000688:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068c:	f000 ffee 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pin : LINEAR_ACT_1_1_Pin */
  GPIO_InitStruct.Pin = LINEAR_ACT_1_1_Pin;
 8000690:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LINEAR_ACT_1_1_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4619      	mov	r1, r3
 80006a8:	4808      	ldr	r0, [pc, #32]	@ (80006cc <MX_GPIO_Init+0x1c4>)
 80006aa:	f000 ffdf 	bl	800166c <HAL_GPIO_Init>

}
 80006ae:	bf00      	nop
 80006b0:	3730      	adds	r7, #48	@ 0x30
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000
 80006bc:	48001000 	.word	0x48001000
 80006c0:	48001400 	.word	0x48001400
 80006c4:	48000400 	.word	0x48000400
 80006c8:	48000c00 	.word	0x48000c00
 80006cc:	48000800 	.word	0x48000800

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 fe53 	bl	800137e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f92c 	bl	8000934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f7ff ff14 	bl	8000508 <MX_GPIO_Init>
  MX_TIM3_Init();
 80006e0:	f000 fa92 	bl	8000c08 <MX_TIM3_Init>
  MX_TIM1_Init();
 80006e4:	f000 f9d2 	bl	8000a8c <MX_TIM1_Init>
  MX_TIM2_Init();
 80006e8:	f000 fa2a 	bl	8000b40 <MX_TIM2_Init>
  MX_TIM4_Init();
 80006ec:	f000 faf2 	bl	8000cd4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80006f0:	f000 fb46 	bl	8000d80 <MX_TIM5_Init>
  MX_TIM8_Init();
 80006f4:	f000 fb9a 	bl	8000e2c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80006f8:	f000 fd74 	bl	80011e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80006fc:	2108      	movs	r1, #8
 80006fe:	4881      	ldr	r0, [pc, #516]	@ (8000904 <main+0x234>)
 8000700:	f002 fa68 	bl	8002bd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000704:	210c      	movs	r1, #12
 8000706:	487f      	ldr	r0, [pc, #508]	@ (8000904 <main+0x234>)
 8000708:	f002 fa64 	bl	8002bd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800070c:	2100      	movs	r1, #0
 800070e:	487e      	ldr	r0, [pc, #504]	@ (8000908 <main+0x238>)
 8000710:	f002 fa60 	bl	8002bd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000714:	210c      	movs	r1, #12
 8000716:	487c      	ldr	r0, [pc, #496]	@ (8000908 <main+0x238>)
 8000718:	f002 fa5c 	bl	8002bd4 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim1);
 800071c:	487b      	ldr	r0, [pc, #492]	@ (800090c <main+0x23c>)
 800071e:	f002 f989 	bl	8002a34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000722:	213c      	movs	r1, #60	@ 0x3c
 8000724:	4879      	ldr	r0, [pc, #484]	@ (800090c <main+0x23c>)
 8000726:	f002 fc0d 	bl	8002f44 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800072a:	4879      	ldr	r0, [pc, #484]	@ (8000910 <main+0x240>)
 800072c:	f002 f982 	bl	8002a34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000730:	213c      	movs	r1, #60	@ 0x3c
 8000732:	4877      	ldr	r0, [pc, #476]	@ (8000910 <main+0x240>)
 8000734:	f002 fc06 	bl	8002f44 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8000738:	4876      	ldr	r0, [pc, #472]	@ (8000914 <main+0x244>)
 800073a:	f002 f97b 	bl	8002a34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 800073e:	213c      	movs	r1, #60	@ 0x3c
 8000740:	4874      	ldr	r0, [pc, #464]	@ (8000914 <main+0x244>)
 8000742:	f002 fbff 	bl	8002f44 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8000746:	4874      	ldr	r0, [pc, #464]	@ (8000918 <main+0x248>)
 8000748:	f002 f974 	bl	8002a34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 800074c:	213c      	movs	r1, #60	@ 0x3c
 800074e:	4872      	ldr	r0, [pc, #456]	@ (8000918 <main+0x248>)
 8000750:	f002 fbf8 	bl	8002f44 <HAL_TIM_Encoder_Start_IT>

  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800075a:	4870      	ldr	r0, [pc, #448]	@ (800091c <main+0x24c>)
 800075c:	f001 f908 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000766:	486d      	ldr	r0, [pc, #436]	@ (800091c <main+0x24c>)
 8000768:	f001 f902 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000772:	486a      	ldr	r0, [pc, #424]	@ (800091c <main+0x24c>)
 8000774:	f001 f8fc 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2180      	movs	r1, #128	@ 0x80
 800077c:	4867      	ldr	r0, [pc, #412]	@ (800091c <main+0x24c>)
 800077e:	f001 f8f7 	bl	8001970 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	2108      	movs	r1, #8
 8000786:	4865      	ldr	r0, [pc, #404]	@ (800091c <main+0x24c>)
 8000788:	f001 f8f2 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2110      	movs	r1, #16
 8000790:	4862      	ldr	r0, [pc, #392]	@ (800091c <main+0x24c>)
 8000792:	f001 f8ed 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(B_IN1_GPIO_Port, B_IN1_Pin, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800079c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a0:	f001 f8e6 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(B_IN2_GPIO_Port, B_IN2_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ae:	f001 f8df 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D_IN1_GPIO_Port, D_IN1_Pin, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2140      	movs	r1, #64	@ 0x40
 80007b6:	4859      	ldr	r0, [pc, #356]	@ (800091c <main+0x24c>)
 80007b8:	f001 f8da 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D_IN2_GPIO_Port, D_IN2_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007c2:	4856      	ldr	r0, [pc, #344]	@ (800091c <main+0x24c>)
 80007c4:	f001 f8d4 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(A_IN1_GPIO_Port, A_IN1_Pin, GPIO_PIN_SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d2:	f001 f8cd 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(A_IN2_GPIO_Port, A_IN2_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e0:	f001 f8c6 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LINEAR_ACT_1_1_GPIO_Port, LINEAR_ACT_1_1_Pin, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007ea:	484d      	ldr	r0, [pc, #308]	@ (8000920 <main+0x250>)
 80007ec:	f001 f8c0 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LINEAR_ACT_1_2_GPIO_Port, LINEAR_ACT_1_2_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2104      	movs	r1, #4
 80007f4:	484b      	ldr	r0, [pc, #300]	@ (8000924 <main+0x254>)
 80007f6:	f001 f8bb 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LINEAR_ACT_2_1_GPIO_Port, LINEAR_ACT_2_1_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000800:	4848      	ldr	r0, [pc, #288]	@ (8000924 <main+0x254>)
 8000802:	f001 f8b5 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LINEAR_ACT_2_2_GPIO_Port, LINEAR_ACT_2_2_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800080c:	4843      	ldr	r0, [pc, #268]	@ (800091c <main+0x24c>)
 800080e:	f001 f8af 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000818:	4843      	ldr	r0, [pc, #268]	@ (8000928 <main+0x258>)
 800081a:	f001 f8a9 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET); 
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000824:	4841      	ldr	r0, [pc, #260]	@ (800092c <main+0x25c>)
 8000826:	f001 f8a3 	bl	8001970 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 800082a:	2001      	movs	r0, #1
 800082c:	f000 fe18 	bl	8001460 <HAL_Delay>
    if (HAL_GetTick() - time_stamp > 3000) {
 8000830:	f000 fe0a 	bl	8001448 <HAL_GetTick>
 8000834:	4603      	mov	r3, r0
 8000836:	4a3e      	ldr	r2, [pc, #248]	@ (8000930 <main+0x260>)
 8000838:	6812      	ldr	r2, [r2, #0]
 800083a:	1a9b      	subs	r3, r3, r2
 800083c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000840:	4293      	cmp	r3, r2
 8000842:	d9f2      	bls.n	800082a <main+0x15a>
      time_stamp = HAL_GetTick();
 8000844:	f000 fe00 	bl	8001448 <HAL_GetTick>
 8000848:	4603      	mov	r3, r0
 800084a:	461a      	mov	r2, r3
 800084c:	4b38      	ldr	r3, [pc, #224]	@ (8000930 <main+0x260>)
 800084e:	601a      	str	r2, [r3, #0]
      HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); // work
 8000850:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000854:	4831      	ldr	r0, [pc, #196]	@ (800091c <main+0x24c>)
 8000856:	f001 f8a3 	bl	80019a0 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); // work
 800085a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800085e:	482f      	ldr	r0, [pc, #188]	@ (800091c <main+0x24c>)
 8000860:	f001 f89e 	bl	80019a0 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); // work
 8000864:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000868:	482c      	ldr	r0, [pc, #176]	@ (800091c <main+0x24c>)
 800086a:	f001 f899 	bl	80019a0 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin); // work
 800086e:	2180      	movs	r1, #128	@ 0x80
 8000870:	482a      	ldr	r0, [pc, #168]	@ (800091c <main+0x24c>)
 8000872:	f001 f895 	bl	80019a0 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LINEAR_ACT_1_1_GPIO_Port, LINEAR_ACT_1_1_Pin); // work
 8000876:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800087a:	4829      	ldr	r0, [pc, #164]	@ (8000920 <main+0x250>)
 800087c:	f001 f890 	bl	80019a0 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LINEAR_ACT_1_2_GPIO_Port, LINEAR_ACT_1_2_Pin); // work
 8000880:	2104      	movs	r1, #4
 8000882:	4828      	ldr	r0, [pc, #160]	@ (8000924 <main+0x254>)
 8000884:	f001 f88c 	bl	80019a0 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LINEAR_ACT_2_1_GPIO_Port, LINEAR_ACT_2_1_Pin); // work
 8000888:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800088c:	4825      	ldr	r0, [pc, #148]	@ (8000924 <main+0x254>)
 800088e:	f001 f887 	bl	80019a0 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LINEAR_ACT_2_2_GPIO_Port, LINEAR_ACT_2_2_Pin); // work
 8000892:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000896:	4821      	ldr	r0, [pc, #132]	@ (800091c <main+0x24c>)
 8000898:	f001 f882 	bl	80019a0 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(C_IN1_GPIO_Port, C_IN1_Pin); // work
 800089c:	2108      	movs	r1, #8
 800089e:	481f      	ldr	r0, [pc, #124]	@ (800091c <main+0x24c>)
 80008a0:	f001 f87e 	bl	80019a0 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(C_IN2_GPIO_Port, C_IN2_Pin); // not work
 80008a4:	2110      	movs	r1, #16
 80008a6:	481d      	ldr	r0, [pc, #116]	@ (800091c <main+0x24c>)
 80008a8:	f001 f87a 	bl	80019a0 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(B_IN1_GPIO_Port, B_IN1_Pin); // work
 80008ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b4:	f001 f874 	bl	80019a0 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(B_IN2_GPIO_Port, B_IN2_Pin); // work
 80008b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c0:	f001 f86e 	bl	80019a0 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(D_IN1_GPIO_Port, D_IN1_Pin); // work
 80008c4:	2140      	movs	r1, #64	@ 0x40
 80008c6:	4815      	ldr	r0, [pc, #84]	@ (800091c <main+0x24c>)
 80008c8:	f001 f86a 	bl	80019a0 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(D_IN2_GPIO_Port, D_IN2_Pin); // not work
 80008cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008d0:	4812      	ldr	r0, [pc, #72]	@ (800091c <main+0x24c>)
 80008d2:	f001 f865 	bl	80019a0 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(A_IN1_GPIO_Port, A_IN1_Pin); // work
 80008d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008de:	f001 f85f 	bl	80019a0 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(A_IN2_GPIO_Port, A_IN2_Pin); // work
 80008e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ea:	f001 f859 	bl	80019a0 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 80008ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008f2:	480d      	ldr	r0, [pc, #52]	@ (8000928 <main+0x258>)
 80008f4:	f001 f854 	bl	80019a0 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_8);
 80008f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008fc:	480b      	ldr	r0, [pc, #44]	@ (800092c <main+0x25c>)
 80008fe:	f001 f84f 	bl	80019a0 <HAL_GPIO_TogglePin>
    HAL_Delay(1);
 8000902:	e792      	b.n	800082a <main+0x15a>
 8000904:	20000078 	.word	0x20000078
 8000908:	200000c4 	.word	0x200000c4
 800090c:	2000002c 	.word	0x2000002c
 8000910:	20000110 	.word	0x20000110
 8000914:	2000015c 	.word	0x2000015c
 8000918:	200001a8 	.word	0x200001a8
 800091c:	48001000 	.word	0x48001000
 8000920:	48000800 	.word	0x48000800
 8000924:	48001400 	.word	0x48001400
 8000928:	48000400 	.word	0x48000400
 800092c:	48000c00 	.word	0x48000c00
 8000930:	20000028 	.word	0x20000028

08000934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b094      	sub	sp, #80	@ 0x50
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 0318 	add.w	r3, r7, #24
 800093e:	2238      	movs	r2, #56	@ 0x38
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f003 ffc8 	bl	80048d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000956:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800095a:	f001 f83b 	bl	80019d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800095e:	2302      	movs	r3, #2
 8000960:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000962:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000968:	2340      	movs	r3, #64	@ 0x40
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800096c:	2300      	movs	r3, #0
 800096e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	4618      	mov	r0, r3
 8000976:	f001 f8e1 	bl	8001b3c <HAL_RCC_OscConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000980:	f000 f818 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000984:	230f      	movs	r3, #15
 8000986:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000988:	2301      	movs	r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f001 fbdf 	bl	8002160 <HAL_RCC_ClockConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x78>
  {
    Error_Handler();
 80009a8:	f000 f804 	bl	80009b4 <Error_Handler>
  }
}
 80009ac:	bf00      	nop
 80009ae:	3750      	adds	r7, #80	@ 0x50
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <Error_Handler+0x8>

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <HAL_MspInit+0x44>)
 80009c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000a04 <HAL_MspInit+0x44>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <HAL_MspInit+0x44>)
 80009d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <HAL_MspInit+0x44>)
 80009e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e2:	4a08      	ldr	r2, [pc, #32]	@ (8000a04 <HAL_MspInit+0x44>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80009ea:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <HAL_MspInit+0x44>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009f6:	f001 f891 	bl	8001b1c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <NMI_Handler+0x4>

08000a10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <MemManage_Handler+0x4>

08000a20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5e:	f000 fce1 	bl	8001424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <SystemInit+0x20>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a05      	ldr	r2, [pc, #20]	@ (8000a88 <SystemInit+0x20>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	@ 0x30
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	2224      	movs	r2, #36	@ 0x24
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f003 ff1c 	bl	80048d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aaa:	4b23      	ldr	r3, [pc, #140]	@ (8000b38 <MX_TIM1_Init+0xac>)
 8000aac:	4a23      	ldr	r2, [pc, #140]	@ (8000b3c <MX_TIM1_Init+0xb0>)
 8000aae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ab0:	4b21      	ldr	r3, [pc, #132]	@ (8000b38 <MX_TIM1_Init+0xac>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab6:	4b20      	ldr	r3, [pc, #128]	@ (8000b38 <MX_TIM1_Init+0xac>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <MX_TIM1_Init+0xac>)
 8000abe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ac2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <MX_TIM1_Init+0xac>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	@ (8000b38 <MX_TIM1_Init+0xac>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad0:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <MX_TIM1_Init+0xac>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000aee:	2301      	movs	r3, #1
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	4619      	mov	r1, r3
 8000b00:	480d      	ldr	r0, [pc, #52]	@ (8000b38 <MX_TIM1_Init+0xac>)
 8000b02:	f002 f979 	bl	8002df8 <HAL_TIM_Encoder_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000b0c:	f7ff ff52 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b10:	2300      	movs	r3, #0
 8000b12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <MX_TIM1_Init+0xac>)
 8000b22:	f002 ffd5 	bl	8003ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b2c:	f7ff ff42 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	3730      	adds	r7, #48	@ 0x30
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	2000002c 	.word	0x2000002c
 8000b3c:	40012c00 	.word	0x40012c00

08000b40 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	@ 0x28
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b52:	463b      	mov	r3, r7
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	615a      	str	r2, [r3, #20]
 8000b62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b64:	4b27      	ldr	r3, [pc, #156]	@ (8000c04 <MX_TIM2_Init+0xc4>)
 8000b66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b6c:	4b25      	ldr	r3, [pc, #148]	@ (8000c04 <MX_TIM2_Init+0xc4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b72:	4b24      	ldr	r3, [pc, #144]	@ (8000c04 <MX_TIM2_Init+0xc4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000b78:	4b22      	ldr	r3, [pc, #136]	@ (8000c04 <MX_TIM2_Init+0xc4>)
 8000b7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b20      	ldr	r3, [pc, #128]	@ (8000c04 <MX_TIM2_Init+0xc4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b86:	4b1f      	ldr	r3, [pc, #124]	@ (8000c04 <MX_TIM2_Init+0xc4>)
 8000b88:	2280      	movs	r2, #128	@ 0x80
 8000b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b8c:	481d      	ldr	r0, [pc, #116]	@ (8000c04 <MX_TIM2_Init+0xc4>)
 8000b8e:	f001 ffc9 	bl	8002b24 <HAL_TIM_PWM_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000b98:	f7ff ff0c 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4816      	ldr	r0, [pc, #88]	@ (8000c04 <MX_TIM2_Init+0xc4>)
 8000bac:	f002 ff90 	bl	8003ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000bb6:	f7ff fefd 	bl	80009b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bba:	2360      	movs	r3, #96	@ 0x60
 8000bbc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2208      	movs	r2, #8
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <MX_TIM2_Init+0xc4>)
 8000bd2:	f002 fa65 	bl	80030a0 <HAL_TIM_PWM_ConfigChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000bdc:	f7ff feea 	bl	80009b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	220c      	movs	r2, #12
 8000be4:	4619      	mov	r1, r3
 8000be6:	4807      	ldr	r0, [pc, #28]	@ (8000c04 <MX_TIM2_Init+0xc4>)
 8000be8:	f002 fa5a 	bl	80030a0 <HAL_TIM_PWM_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000bf2:	f7ff fedf 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bf6:	4803      	ldr	r0, [pc, #12]	@ (8000c04 <MX_TIM2_Init+0xc4>)
 8000bf8:	f000 fa7c 	bl	80010f4 <HAL_TIM_MspPostInit>

}
 8000bfc:	bf00      	nop
 8000bfe:	3728      	adds	r7, #40	@ 0x28
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000078 	.word	0x20000078

08000c08 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	@ 0x28
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
 8000c28:	615a      	str	r2, [r3, #20]
 8000c2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c2c:	4b27      	ldr	r3, [pc, #156]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000c2e:	4a28      	ldr	r2, [pc, #160]	@ (8000cd0 <MX_TIM3_Init+0xc8>)
 8000c30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c32:	4b26      	ldr	r3, [pc, #152]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c38:	4b24      	ldr	r3, [pc, #144]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c3e:	4b23      	ldr	r3, [pc, #140]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000c40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c46:	4b21      	ldr	r3, [pc, #132]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000c4e:	2280      	movs	r2, #128	@ 0x80
 8000c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c52:	481e      	ldr	r0, [pc, #120]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000c54:	f001 ff66 	bl	8002b24 <HAL_TIM_PWM_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000c5e:	f7ff fea9 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4816      	ldr	r0, [pc, #88]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000c72:	f002 ff2d 	bl	8003ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000c7c:	f7ff fe9a 	bl	80009b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c80:	2360      	movs	r3, #96	@ 0x60
 8000c82:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	2200      	movs	r2, #0
 8000c94:	4619      	mov	r1, r3
 8000c96:	480d      	ldr	r0, [pc, #52]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000c98:	f002 fa02 	bl	80030a0 <HAL_TIM_PWM_ConfigChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000ca2:	f7ff fe87 	bl	80009b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	220c      	movs	r2, #12
 8000caa:	4619      	mov	r1, r3
 8000cac:	4807      	ldr	r0, [pc, #28]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000cae:	f002 f9f7 	bl	80030a0 <HAL_TIM_PWM_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000cb8:	f7ff fe7c 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cbc:	4803      	ldr	r0, [pc, #12]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000cbe:	f000 fa19 	bl	80010f4 <HAL_TIM_MspPostInit>

}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	@ 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200000c4 	.word	0x200000c4
 8000cd0:	40000400 	.word	0x40000400

08000cd4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08c      	sub	sp, #48	@ 0x30
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	2224      	movs	r2, #36	@ 0x24
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f003 fdf8 	bl	80048d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce8:	463b      	mov	r3, r7
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cf2:	4b21      	ldr	r3, [pc, #132]	@ (8000d78 <MX_TIM4_Init+0xa4>)
 8000cf4:	4a21      	ldr	r2, [pc, #132]	@ (8000d7c <MX_TIM4_Init+0xa8>)
 8000cf6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <MX_TIM4_Init+0xa4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000d78 <MX_TIM4_Init+0xa4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d04:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <MX_TIM4_Init+0xa4>)
 8000d06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d0a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <MX_TIM4_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d12:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <MX_TIM4_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d20:	2301      	movs	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d30:	2301      	movs	r3, #1
 8000d32:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	4619      	mov	r1, r3
 8000d42:	480d      	ldr	r0, [pc, #52]	@ (8000d78 <MX_TIM4_Init+0xa4>)
 8000d44:	f002 f858 	bl	8002df8 <HAL_TIM_Encoder_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d4e:	f7ff fe31 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d52:	2300      	movs	r3, #0
 8000d54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4806      	ldr	r0, [pc, #24]	@ (8000d78 <MX_TIM4_Init+0xa4>)
 8000d60:	f002 feb6 	bl	8003ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d6a:	f7ff fe23 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	3730      	adds	r7, #48	@ 0x30
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000110 	.word	0x20000110
 8000d7c:	40000800 	.word	0x40000800

08000d80 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08c      	sub	sp, #48	@ 0x30
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	2224      	movs	r2, #36	@ 0x24
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f003 fda2 	bl	80048d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d94:	463b      	mov	r3, r7
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d9e:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <MX_TIM5_Init+0xa4>)
 8000da0:	4a21      	ldr	r2, [pc, #132]	@ (8000e28 <MX_TIM5_Init+0xa8>)
 8000da2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000da4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <MX_TIM5_Init+0xa4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000daa:	4b1e      	ldr	r3, [pc, #120]	@ (8000e24 <MX_TIM5_Init+0xa4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000db0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <MX_TIM5_Init+0xa4>)
 8000db2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000db6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <MX_TIM5_Init+0xa4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <MX_TIM5_Init+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	4619      	mov	r1, r3
 8000dee:	480d      	ldr	r0, [pc, #52]	@ (8000e24 <MX_TIM5_Init+0xa4>)
 8000df0:	f002 f802 	bl	8002df8 <HAL_TIM_Encoder_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000dfa:	f7ff fddb 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e06:	463b      	mov	r3, r7
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4806      	ldr	r0, [pc, #24]	@ (8000e24 <MX_TIM5_Init+0xa4>)
 8000e0c:	f002 fe60 	bl	8003ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000e16:	f7ff fdcd 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	3730      	adds	r7, #48	@ 0x30
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	2000015c 	.word	0x2000015c
 8000e28:	40000c00 	.word	0x40000c00

08000e2c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08c      	sub	sp, #48	@ 0x30
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	2224      	movs	r2, #36	@ 0x24
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 fd4c 	bl	80048d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e40:	463b      	mov	r3, r7
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e4a:	4b23      	ldr	r3, [pc, #140]	@ (8000ed8 <MX_TIM8_Init+0xac>)
 8000e4c:	4a23      	ldr	r2, [pc, #140]	@ (8000edc <MX_TIM8_Init+0xb0>)
 8000e4e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e50:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <MX_TIM8_Init+0xac>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e56:	4b20      	ldr	r3, [pc, #128]	@ (8000ed8 <MX_TIM8_Init+0xac>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed8 <MX_TIM8_Init+0xac>)
 8000e5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e62:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <MX_TIM8_Init+0xac>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed8 <MX_TIM8_Init+0xac>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e70:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <MX_TIM8_Init+0xac>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480d      	ldr	r0, [pc, #52]	@ (8000ed8 <MX_TIM8_Init+0xac>)
 8000ea2:	f001 ffa9 	bl	8002df8 <HAL_TIM_Encoder_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000eac:	f7ff fd82 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4805      	ldr	r0, [pc, #20]	@ (8000ed8 <MX_TIM8_Init+0xac>)
 8000ec2:	f002 fe05 	bl	8003ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000ecc:	f7ff fd72 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	3730      	adds	r7, #48	@ 0x30
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200001a8 	.word	0x200001a8
 8000edc:	40013400 	.word	0x40013400

08000ee0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b090      	sub	sp, #64	@ 0x40
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a5d      	ldr	r2, [pc, #372]	@ (8001074 <HAL_TIM_Encoder_MspInit+0x194>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d128      	bne.n	8000f54 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f02:	4b5d      	ldr	r3, [pc, #372]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8000f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f06:	4a5c      	ldr	r2, [pc, #368]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8000f08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f0e:	4b5a      	ldr	r3, [pc, #360]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	4b57      	ldr	r3, [pc, #348]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	4a56      	ldr	r2, [pc, #344]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f26:	4b54      	ldr	r3, [pc, #336]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f32:	2303      	movs	r3, #3
 8000f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000f42:	2302      	movs	r3, #2
 8000f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	484b      	ldr	r0, [pc, #300]	@ (800107c <HAL_TIM_Encoder_MspInit+0x19c>)
 8000f4e:	f000 fb8d 	bl	800166c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000f52:	e08a      	b.n	800106a <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a49      	ldr	r2, [pc, #292]	@ (8001080 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d129      	bne.n	8000fb2 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f5e:	4b46      	ldr	r3, [pc, #280]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f62:	4a45      	ldr	r2, [pc, #276]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f6a:	4b43      	ldr	r3, [pc, #268]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	623b      	str	r3, [r7, #32]
 8000f74:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	4b40      	ldr	r3, [pc, #256]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7a:	4a3f      	ldr	r2, [pc, #252]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f82:	4b3d      	ldr	r3, [pc, #244]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	61fb      	str	r3, [r7, #28]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f8e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4836      	ldr	r0, [pc, #216]	@ (8001084 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8000fac:	f000 fb5e 	bl	800166c <HAL_GPIO_Init>
}
 8000fb0:	e05b      	b.n	800106a <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a34      	ldr	r2, [pc, #208]	@ (8001088 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d129      	bne.n	8001010 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8000fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8000fc2:	f043 0308 	orr.w	r3, r3, #8
 8000fc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8000fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fcc:	f003 0308 	and.w	r3, r3, #8
 8000fd0:	61bb      	str	r3, [r7, #24]
 8000fd2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	4b28      	ldr	r3, [pc, #160]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd8:	4a27      	ldr	r2, [pc, #156]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe0:	4b25      	ldr	r3, [pc, #148]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fec:	2303      	movs	r3, #3
 8000fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001004:	4619      	mov	r1, r3
 8001006:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100a:	f000 fb2f 	bl	800166c <HAL_GPIO_Init>
}
 800100e:	e02c      	b.n	800106a <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1d      	ldr	r2, [pc, #116]	@ (800108c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d127      	bne.n	800106a <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800101a:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800101e:	4a16      	ldr	r2, [pc, #88]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8001020:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001024:	6613      	str	r3, [r2, #96]	@ 0x60
 8001026:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001036:	4a10      	ldr	r2, [pc, #64]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <HAL_TIM_Encoder_MspInit+0x198>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800104a:	23c0      	movs	r3, #192	@ 0xc0
 800104c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800105a:	2304      	movs	r3, #4
 800105c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	@ (800107c <HAL_TIM_Encoder_MspInit+0x19c>)
 8001066:	f000 fb01 	bl	800166c <HAL_GPIO_Init>
}
 800106a:	bf00      	nop
 800106c:	3740      	adds	r7, #64	@ 0x40
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40012c00 	.word	0x40012c00
 8001078:	40021000 	.word	0x40021000
 800107c:	48000800 	.word	0x48000800
 8001080:	40000800 	.word	0x40000800
 8001084:	48000c00 	.word	0x48000c00
 8001088:	40000c00 	.word	0x40000c00
 800108c:	40013400 	.word	0x40013400

08001090 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010a0:	d10c      	bne.n	80010bc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010a2:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <HAL_TIM_PWM_MspInit+0x5c>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a6:	4a11      	ldr	r2, [pc, #68]	@ (80010ec <HAL_TIM_PWM_MspInit+0x5c>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ae:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <HAL_TIM_PWM_MspInit+0x5c>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80010ba:	e010      	b.n	80010de <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0b      	ldr	r2, [pc, #44]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x60>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d10b      	bne.n	80010de <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010c6:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <HAL_TIM_PWM_MspInit+0x5c>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ca:	4a08      	ldr	r2, [pc, #32]	@ (80010ec <HAL_TIM_PWM_MspInit+0x5c>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <HAL_TIM_PWM_MspInit+0x5c>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40000400 	.word	0x40000400

080010f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	@ 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001114:	d139      	bne.n	800118a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b2f      	ldr	r3, [pc, #188]	@ (80011d4 <HAL_TIM_MspPostInit+0xe0>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	4a2e      	ldr	r2, [pc, #184]	@ (80011d4 <HAL_TIM_MspPostInit+0xe0>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001122:	4b2c      	ldr	r3, [pc, #176]	@ (80011d4 <HAL_TIM_MspPostInit+0xe0>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800112e:	4b29      	ldr	r3, [pc, #164]	@ (80011d4 <HAL_TIM_MspPostInit+0xe0>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	4a28      	ldr	r2, [pc, #160]	@ (80011d4 <HAL_TIM_MspPostInit+0xe0>)
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113a:	4b26      	ldr	r3, [pc, #152]	@ (80011d4 <HAL_TIM_MspPostInit+0xe0>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = RL_PWM_Pin;
 8001146:	2308      	movs	r3, #8
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001156:	2301      	movs	r3, #1
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RL_PWM_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001164:	f000 fa82 	bl	800166c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RR_PWM_Pin;
 8001168:	2380      	movs	r3, #128	@ 0x80
 800116a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001178:	2302      	movs	r3, #2
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RR_PWM_GPIO_Port, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	4815      	ldr	r0, [pc, #84]	@ (80011d8 <HAL_TIM_MspPostInit+0xe4>)
 8001184:	f000 fa72 	bl	800166c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001188:	e020      	b.n	80011cc <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM3)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a13      	ldr	r2, [pc, #76]	@ (80011dc <HAL_TIM_MspPostInit+0xe8>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d11b      	bne.n	80011cc <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <HAL_TIM_MspPostInit+0xe0>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001198:	4a0e      	ldr	r2, [pc, #56]	@ (80011d4 <HAL_TIM_MspPostInit+0xe0>)
 800119a:	f043 0310 	orr.w	r3, r3, #16
 800119e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a0:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <HAL_TIM_MspPostInit+0xe0>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a4:	f003 0310 	and.w	r3, r3, #16
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FR_PWM_Pin|FL_PWM_Pin;
 80011ac:	2324      	movs	r3, #36	@ 0x24
 80011ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011bc:	2302      	movs	r3, #2
 80011be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	4806      	ldr	r0, [pc, #24]	@ (80011e0 <HAL_TIM_MspPostInit+0xec>)
 80011c8:	f000 fa50 	bl	800166c <HAL_GPIO_Init>
}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	@ 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000
 80011d8:	48000c00 	.word	0x48000c00
 80011dc:	40000400 	.word	0x40000400
 80011e0:	48001000 	.word	0x48001000

080011e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011e8:	4b22      	ldr	r3, [pc, #136]	@ (8001274 <MX_USART1_UART_Init+0x90>)
 80011ea:	4a23      	ldr	r2, [pc, #140]	@ (8001278 <MX_USART1_UART_Init+0x94>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011ee:	4b21      	ldr	r3, [pc, #132]	@ (8001274 <MX_USART1_UART_Init+0x90>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001274 <MX_USART1_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001274 <MX_USART1_UART_Init+0x90>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001202:	4b1c      	ldr	r3, [pc, #112]	@ (8001274 <MX_USART1_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <MX_USART1_UART_Init+0x90>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <MX_USART1_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b17      	ldr	r3, [pc, #92]	@ (8001274 <MX_USART1_UART_Init+0x90>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121a:	4b16      	ldr	r3, [pc, #88]	@ (8001274 <MX_USART1_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001220:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <MX_USART1_UART_Init+0x90>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001226:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <MX_USART1_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800122c:	4811      	ldr	r0, [pc, #68]	@ (8001274 <MX_USART1_UART_Init+0x90>)
 800122e:	f002 fce5 	bl	8003bfc <HAL_UART_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001238:	f7ff fbbc 	bl	80009b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800123c:	2100      	movs	r1, #0
 800123e:	480d      	ldr	r0, [pc, #52]	@ (8001274 <MX_USART1_UART_Init+0x90>)
 8001240:	f003 fa80 	bl	8004744 <HAL_UARTEx_SetTxFifoThreshold>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800124a:	f7ff fbb3 	bl	80009b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800124e:	2100      	movs	r1, #0
 8001250:	4808      	ldr	r0, [pc, #32]	@ (8001274 <MX_USART1_UART_Init+0x90>)
 8001252:	f003 fab5 	bl	80047c0 <HAL_UARTEx_SetRxFifoThreshold>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800125c:	f7ff fbaa 	bl	80009b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	@ (8001274 <MX_USART1_UART_Init+0x90>)
 8001262:	f003 fa36 	bl	80046d2 <HAL_UARTEx_DisableFifoMode>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800126c:	f7ff fba2 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200001f4 	.word	0x200001f4
 8001278:	40013800 	.word	0x40013800

0800127c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b09e      	sub	sp, #120	@ 0x78
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	2254      	movs	r2, #84	@ 0x54
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f003 fb1b 	bl	80048d8 <memset>
  if(uartHandle->Instance==USART1)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001320 <HAL_UART_MspInit+0xa4>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d135      	bne.n	8001318 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4618      	mov	r0, r3
 80012ba:	f001 f96d 	bl	8002598 <HAL_RCCEx_PeriphCLKConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012c4:	f7ff fb76 	bl	80009b4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012c8:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <HAL_UART_MspInit+0xa8>)
 80012ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012cc:	4a15      	ldr	r2, [pc, #84]	@ (8001324 <HAL_UART_MspInit+0xa8>)
 80012ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80012d4:	4b13      	ldr	r3, [pc, #76]	@ (8001324 <HAL_UART_MspInit+0xa8>)
 80012d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e0:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <HAL_UART_MspInit+0xa8>)
 80012e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001324 <HAL_UART_MspInit+0xa8>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001324 <HAL_UART_MspInit+0xa8>)
 80012ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012f8:	2330      	movs	r3, #48	@ 0x30
 80012fa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001308:	2307      	movs	r3, #7
 800130a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001310:	4619      	mov	r1, r3
 8001312:	4805      	ldr	r0, [pc, #20]	@ (8001328 <HAL_UART_MspInit+0xac>)
 8001314:	f000 f9aa 	bl	800166c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001318:	bf00      	nop
 800131a:	3778      	adds	r7, #120	@ 0x78
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40013800 	.word	0x40013800
 8001324:	40021000 	.word	0x40021000
 8001328:	48000800 	.word	0x48000800

0800132c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800132c:	480d      	ldr	r0, [pc, #52]	@ (8001364 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800132e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001330:	f7ff fb9a 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001334:	480c      	ldr	r0, [pc, #48]	@ (8001368 <LoopForever+0x6>)
  ldr r1, =_edata
 8001336:	490d      	ldr	r1, [pc, #52]	@ (800136c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001338:	4a0d      	ldr	r2, [pc, #52]	@ (8001370 <LoopForever+0xe>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a0a      	ldr	r2, [pc, #40]	@ (8001374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800134c:	4c0a      	ldr	r4, [pc, #40]	@ (8001378 <LoopForever+0x16>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135a:	f003 fac5 	bl	80048e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800135e:	f7ff f9b7 	bl	80006d0 <main>

08001362 <LoopForever>:

LoopForever:
    b LoopForever
 8001362:	e7fe      	b.n	8001362 <LoopForever>
  ldr   r0, =_estack
 8001364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800136c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001370:	08004998 	.word	0x08004998
  ldr r2, =_sbss
 8001374:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001378:	2000028c 	.word	0x2000028c

0800137c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800137c:	e7fe      	b.n	800137c <ADC1_2_IRQHandler>

0800137e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001388:	2003      	movs	r0, #3
 800138a:	f000 f93d 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800138e:	200f      	movs	r0, #15
 8001390:	f000 f80e 	bl	80013b0 <HAL_InitTick>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	71fb      	strb	r3, [r7, #7]
 800139e:	e001      	b.n	80013a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013a0:	f7ff fb0e 	bl	80009c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013a4:	79fb      	ldrb	r3, [r7, #7]

}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013bc:	4b16      	ldr	r3, [pc, #88]	@ (8001418 <HAL_InitTick+0x68>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d022      	beq.n	800140a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013c4:	4b15      	ldr	r3, [pc, #84]	@ (800141c <HAL_InitTick+0x6c>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <HAL_InitTick+0x68>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80013d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 f93a 	bl	8001652 <HAL_SYSTICK_Config>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d10f      	bne.n	8001404 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b0f      	cmp	r3, #15
 80013e8:	d809      	bhi.n	80013fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ea:	2200      	movs	r2, #0
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013f2:	f000 f914 	bl	800161e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001420 <HAL_InitTick+0x70>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	e007      	b.n	800140e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	e004      	b.n	800140e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e001      	b.n	800140e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800140e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000008 	.word	0x20000008
 800141c:	20000000 	.word	0x20000000
 8001420:	20000004 	.word	0x20000004

08001424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001428:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <HAL_IncTick+0x1c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <HAL_IncTick+0x20>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4413      	add	r3, r2
 8001432:	4a03      	ldr	r2, [pc, #12]	@ (8001440 <HAL_IncTick+0x1c>)
 8001434:	6013      	str	r3, [r2, #0]
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	20000288 	.word	0x20000288
 8001444:	20000008 	.word	0x20000008

08001448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b03      	ldr	r3, [pc, #12]	@ (800145c <HAL_GetTick+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000288 	.word	0x20000288

08001460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff ffee 	bl	8001448 <HAL_GetTick>
 800146c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001478:	d004      	beq.n	8001484 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800147a:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <HAL_Delay+0x40>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001484:	bf00      	nop
 8001486:	f7ff ffdf 	bl	8001448 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	429a      	cmp	r2, r3
 8001494:	d8f7      	bhi.n	8001486 <HAL_Delay+0x26>
  {
  }
}
 8001496:	bf00      	nop
 8001498:	bf00      	nop
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000008 	.word	0x20000008

080014a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d6:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60d3      	str	r3, [r2, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b04      	ldr	r3, [pc, #16]	@ (8001504 <__NVIC_GetPriorityGrouping+0x18>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	f003 0307 	and.w	r3, r3, #7
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0a      	blt.n	8001532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	490c      	ldr	r1, [pc, #48]	@ (8001554 <__NVIC_SetPriority+0x4c>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	440b      	add	r3, r1
 800152c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001530:	e00a      	b.n	8001548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	@ (8001558 <__NVIC_SetPriority+0x50>)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3b04      	subs	r3, #4
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	440b      	add	r3, r1
 8001546:	761a      	strb	r2, [r3, #24]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	@ 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f1c3 0307 	rsb	r3, r3, #7
 8001576:	2b04      	cmp	r3, #4
 8001578:	bf28      	it	cs
 800157a:	2304      	movcs	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3304      	adds	r3, #4
 8001582:	2b06      	cmp	r3, #6
 8001584:	d902      	bls.n	800158c <NVIC_EncodePriority+0x30>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3b03      	subs	r3, #3
 800158a:	e000      	b.n	800158e <NVIC_EncodePriority+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	4313      	orrs	r3, r2
         );
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	@ 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015d4:	d301      	bcc.n	80015da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00f      	b.n	80015fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015da:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <SysTick_Config+0x40>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e2:	210f      	movs	r1, #15
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015e8:	f7ff ff8e 	bl	8001508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ec:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <SysTick_Config+0x40>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f2:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <SysTick_Config+0x40>)
 80015f4:	2207      	movs	r2, #7
 80015f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	e000e010 	.word	0xe000e010

08001608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ff47 	bl	80014a4 <__NVIC_SetPriorityGrouping>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800162c:	f7ff ff5e 	bl	80014ec <__NVIC_GetPriorityGrouping>
 8001630:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	6978      	ldr	r0, [r7, #20]
 8001638:	f7ff ff90 	bl	800155c <NVIC_EncodePriority>
 800163c:	4602      	mov	r2, r0
 800163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff5f 	bl	8001508 <__NVIC_SetPriority>
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffb2 	bl	80015c4 <SysTick_Config>
 8001660:	4603      	mov	r3, r0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800167a:	e15a      	b.n	8001932 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2101      	movs	r1, #1
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 814c 	beq.w	800192c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d005      	beq.n	80016ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d130      	bne.n	800170e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016e2:	2201      	movs	r2, #1
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	091b      	lsrs	r3, r3, #4
 80016f8:	f003 0201 	and.w	r2, r3, #1
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	2b03      	cmp	r3, #3
 8001718:	d017      	beq.n	800174a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	2203      	movs	r2, #3
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4013      	ands	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d123      	bne.n	800179e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	08da      	lsrs	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3208      	adds	r2, #8
 800175e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	220f      	movs	r2, #15
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	691a      	ldr	r2, [r3, #16]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	08da      	lsrs	r2, r3, #3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3208      	adds	r2, #8
 8001798:	6939      	ldr	r1, [r7, #16]
 800179a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	2203      	movs	r2, #3
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 0203 	and.w	r2, r3, #3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 80a6 	beq.w	800192c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e0:	4b5b      	ldr	r3, [pc, #364]	@ (8001950 <HAL_GPIO_Init+0x2e4>)
 80017e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e4:	4a5a      	ldr	r2, [pc, #360]	@ (8001950 <HAL_GPIO_Init+0x2e4>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ec:	4b58      	ldr	r3, [pc, #352]	@ (8001950 <HAL_GPIO_Init+0x2e4>)
 80017ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017f8:	4a56      	ldr	r2, [pc, #344]	@ (8001954 <HAL_GPIO_Init+0x2e8>)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	3302      	adds	r3, #2
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	220f      	movs	r2, #15
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001822:	d01f      	beq.n	8001864 <HAL_GPIO_Init+0x1f8>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a4c      	ldr	r2, [pc, #304]	@ (8001958 <HAL_GPIO_Init+0x2ec>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d019      	beq.n	8001860 <HAL_GPIO_Init+0x1f4>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a4b      	ldr	r2, [pc, #300]	@ (800195c <HAL_GPIO_Init+0x2f0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d013      	beq.n	800185c <HAL_GPIO_Init+0x1f0>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a4a      	ldr	r2, [pc, #296]	@ (8001960 <HAL_GPIO_Init+0x2f4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d00d      	beq.n	8001858 <HAL_GPIO_Init+0x1ec>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a49      	ldr	r2, [pc, #292]	@ (8001964 <HAL_GPIO_Init+0x2f8>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d007      	beq.n	8001854 <HAL_GPIO_Init+0x1e8>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a48      	ldr	r2, [pc, #288]	@ (8001968 <HAL_GPIO_Init+0x2fc>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d101      	bne.n	8001850 <HAL_GPIO_Init+0x1e4>
 800184c:	2305      	movs	r3, #5
 800184e:	e00a      	b.n	8001866 <HAL_GPIO_Init+0x1fa>
 8001850:	2306      	movs	r3, #6
 8001852:	e008      	b.n	8001866 <HAL_GPIO_Init+0x1fa>
 8001854:	2304      	movs	r3, #4
 8001856:	e006      	b.n	8001866 <HAL_GPIO_Init+0x1fa>
 8001858:	2303      	movs	r3, #3
 800185a:	e004      	b.n	8001866 <HAL_GPIO_Init+0x1fa>
 800185c:	2302      	movs	r3, #2
 800185e:	e002      	b.n	8001866 <HAL_GPIO_Init+0x1fa>
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <HAL_GPIO_Init+0x1fa>
 8001864:	2300      	movs	r3, #0
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	f002 0203 	and.w	r2, r2, #3
 800186c:	0092      	lsls	r2, r2, #2
 800186e:	4093      	lsls	r3, r2
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001876:	4937      	ldr	r1, [pc, #220]	@ (8001954 <HAL_GPIO_Init+0x2e8>)
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	3302      	adds	r3, #2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001884:	4b39      	ldr	r3, [pc, #228]	@ (800196c <HAL_GPIO_Init+0x300>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	43db      	mvns	r3, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018a8:	4a30      	ldr	r2, [pc, #192]	@ (800196c <HAL_GPIO_Init+0x300>)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018ae:	4b2f      	ldr	r3, [pc, #188]	@ (800196c <HAL_GPIO_Init+0x300>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018d2:	4a26      	ldr	r2, [pc, #152]	@ (800196c <HAL_GPIO_Init+0x300>)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018d8:	4b24      	ldr	r3, [pc, #144]	@ (800196c <HAL_GPIO_Init+0x300>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018fc:	4a1b      	ldr	r2, [pc, #108]	@ (800196c <HAL_GPIO_Init+0x300>)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001902:	4b1a      	ldr	r3, [pc, #104]	@ (800196c <HAL_GPIO_Init+0x300>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	43db      	mvns	r3, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001926:	4a11      	ldr	r2, [pc, #68]	@ (800196c <HAL_GPIO_Init+0x300>)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	3301      	adds	r3, #1
 8001930:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	fa22 f303 	lsr.w	r3, r2, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	f47f ae9d 	bne.w	800167c <HAL_GPIO_Init+0x10>
  }
}
 8001942:	bf00      	nop
 8001944:	bf00      	nop
 8001946:	371c      	adds	r7, #28
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	40021000 	.word	0x40021000
 8001954:	40010000 	.word	0x40010000
 8001958:	48000400 	.word	0x48000400
 800195c:	48000800 	.word	0x48000800
 8001960:	48000c00 	.word	0x48000c00
 8001964:	48001000 	.word	0x48001000
 8001968:	48001400 	.word	0x48001400
 800196c:	40010400 	.word	0x40010400

08001970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
 800197c:	4613      	mov	r3, r2
 800197e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001980:	787b      	ldrb	r3, [r7, #1]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001986:	887a      	ldrh	r2, [r7, #2]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800198c:	e002      	b.n	8001994 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800198e:	887a      	ldrh	r2, [r7, #2]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4013      	ands	r3, r2
 80019b8:	041a      	lsls	r2, r3, #16
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	43d9      	mvns	r1, r3
 80019be:	887b      	ldrh	r3, [r7, #2]
 80019c0:	400b      	ands	r3, r1
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	619a      	str	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d141      	bne.n	8001a66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019ee:	d131      	bne.n	8001a54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019f0:	4b47      	ldr	r3, [pc, #284]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019f6:	4a46      	ldr	r2, [pc, #280]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a00:	4b43      	ldr	r3, [pc, #268]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a08:	4a41      	ldr	r2, [pc, #260]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a10:	4b40      	ldr	r3, [pc, #256]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2232      	movs	r2, #50	@ 0x32
 8001a16:	fb02 f303 	mul.w	r3, r2, r3
 8001a1a:	4a3f      	ldr	r2, [pc, #252]	@ (8001b18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a20:	0c9b      	lsrs	r3, r3, #18
 8001a22:	3301      	adds	r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a26:	e002      	b.n	8001a2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a2e:	4b38      	ldr	r3, [pc, #224]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a3a:	d102      	bne.n	8001a42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f2      	bne.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a42:	4b33      	ldr	r3, [pc, #204]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a4e:	d158      	bne.n	8001b02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e057      	b.n	8001b04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a54:	4b2e      	ldr	r3, [pc, #184]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a64:	e04d      	b.n	8001b02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a6c:	d141      	bne.n	8001af2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a6e:	4b28      	ldr	r3, [pc, #160]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a7a:	d131      	bne.n	8001ae0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a7c:	4b24      	ldr	r3, [pc, #144]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a82:	4a23      	ldr	r2, [pc, #140]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a8c:	4b20      	ldr	r3, [pc, #128]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a94:	4a1e      	ldr	r2, [pc, #120]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2232      	movs	r2, #50	@ 0x32
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aac:	0c9b      	lsrs	r3, r3, #18
 8001aae:	3301      	adds	r3, #1
 8001ab0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ab2:	e002      	b.n	8001aba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ac6:	d102      	bne.n	8001ace <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f2      	bne.n	8001ab4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ada:	d112      	bne.n	8001b02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e011      	b.n	8001b04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001af0:	e007      	b.n	8001b02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001af2:	4b07      	ldr	r3, [pc, #28]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001afa:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b00:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	40007000 	.word	0x40007000
 8001b14:	20000000 	.word	0x20000000
 8001b18:	431bde83 	.word	0x431bde83

08001b1c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b20:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b2a:	6093      	str	r3, [r2, #8]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40007000 	.word	0x40007000

08001b3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e2fe      	b.n	800214c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d075      	beq.n	8001c46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5a:	4b97      	ldr	r3, [pc, #604]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b64:	4b94      	ldr	r3, [pc, #592]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	2b0c      	cmp	r3, #12
 8001b72:	d102      	bne.n	8001b7a <HAL_RCC_OscConfig+0x3e>
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d002      	beq.n	8001b80 <HAL_RCC_OscConfig+0x44>
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d10b      	bne.n	8001b98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b80:	4b8d      	ldr	r3, [pc, #564]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d05b      	beq.n	8001c44 <HAL_RCC_OscConfig+0x108>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d157      	bne.n	8001c44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e2d9      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba0:	d106      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x74>
 8001ba2:	4b85      	ldr	r3, [pc, #532]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a84      	ldr	r2, [pc, #528]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e01d      	b.n	8001bec <HAL_RCC_OscConfig+0xb0>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x98>
 8001bba:	4b7f      	ldr	r3, [pc, #508]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a7e      	ldr	r2, [pc, #504]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001bc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b7c      	ldr	r3, [pc, #496]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a7b      	ldr	r2, [pc, #492]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e00b      	b.n	8001bec <HAL_RCC_OscConfig+0xb0>
 8001bd4:	4b78      	ldr	r3, [pc, #480]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a77      	ldr	r2, [pc, #476]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b75      	ldr	r3, [pc, #468]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a74      	ldr	r2, [pc, #464]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001be6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d013      	beq.n	8001c1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fc28 	bl	8001448 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff fc24 	bl	8001448 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	@ 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e29e      	b.n	800214c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c0e:	4b6a      	ldr	r3, [pc, #424]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0xc0>
 8001c1a:	e014      	b.n	8001c46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fc14 	bl	8001448 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7ff fc10 	bl	8001448 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	@ 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e28a      	b.n	800214c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c36:	4b60      	ldr	r3, [pc, #384]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0xe8>
 8001c42:	e000      	b.n	8001c46 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d075      	beq.n	8001d3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c52:	4b59      	ldr	r3, [pc, #356]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c5c:	4b56      	ldr	r3, [pc, #344]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	2b0c      	cmp	r3, #12
 8001c6a:	d102      	bne.n	8001c72 <HAL_RCC_OscConfig+0x136>
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d002      	beq.n	8001c78 <HAL_RCC_OscConfig+0x13c>
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d11f      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c78:	4b4f      	ldr	r3, [pc, #316]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_OscConfig+0x154>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e25d      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c90:	4b49      	ldr	r3, [pc, #292]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	061b      	lsls	r3, r3, #24
 8001c9e:	4946      	ldr	r1, [pc, #280]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ca4:	4b45      	ldr	r3, [pc, #276]	@ (8001dbc <HAL_RCC_OscConfig+0x280>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fb81 	bl	80013b0 <HAL_InitTick>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d043      	beq.n	8001d3c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e249      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d023      	beq.n	8001d08 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc0:	4b3d      	ldr	r3, [pc, #244]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a3c      	ldr	r2, [pc, #240]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001cc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fbbc 	bl	8001448 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd4:	f7ff fbb8 	bl	8001448 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e232      	b.n	800214c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce6:	4b34      	ldr	r3, [pc, #208]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf2:	4b31      	ldr	r3, [pc, #196]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	061b      	lsls	r3, r3, #24
 8001d00:	492d      	ldr	r1, [pc, #180]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	604b      	str	r3, [r1, #4]
 8001d06:	e01a      	b.n	8001d3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d08:	4b2b      	ldr	r3, [pc, #172]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001d0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff fb98 	bl	8001448 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1c:	f7ff fb94 	bl	8001448 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e20e      	b.n	800214c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d2e:	4b22      	ldr	r3, [pc, #136]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x1e0>
 8001d3a:	e000      	b.n	8001d3e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d041      	beq.n	8001dce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01c      	beq.n	8001d8c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d52:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d58:	4a17      	ldr	r2, [pc, #92]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d62:	f7ff fb71 	bl	8001448 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6a:	f7ff fb6d 	bl	8001448 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e1e7      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0ef      	beq.n	8001d6a <HAL_RCC_OscConfig+0x22e>
 8001d8a:	e020      	b.n	8001dce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d92:	4a09      	ldr	r2, [pc, #36]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9c:	f7ff fb54 	bl	8001448 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da2:	e00d      	b.n	8001dc0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da4:	f7ff fb50 	bl	8001448 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d906      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e1ca      	b.n	800214c <HAL_RCC_OscConfig+0x610>
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dc0:	4b8c      	ldr	r3, [pc, #560]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1ea      	bne.n	8001da4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 80a6 	beq.w	8001f28 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001de0:	4b84      	ldr	r3, [pc, #528]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_OscConfig+0x2b4>
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x2b6>
 8001df0:	2300      	movs	r3, #0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00d      	beq.n	8001e12 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfa:	4a7e      	ldr	r2, [pc, #504]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e02:	4b7c      	ldr	r3, [pc, #496]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e12:	4b79      	ldr	r3, [pc, #484]	@ (8001ff8 <HAL_RCC_OscConfig+0x4bc>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d118      	bne.n	8001e50 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e1e:	4b76      	ldr	r3, [pc, #472]	@ (8001ff8 <HAL_RCC_OscConfig+0x4bc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a75      	ldr	r2, [pc, #468]	@ (8001ff8 <HAL_RCC_OscConfig+0x4bc>)
 8001e24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e2a:	f7ff fb0d 	bl	8001448 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e32:	f7ff fb09 	bl	8001448 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e183      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e44:	4b6c      	ldr	r3, [pc, #432]	@ (8001ff8 <HAL_RCC_OscConfig+0x4bc>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d108      	bne.n	8001e6a <HAL_RCC_OscConfig+0x32e>
 8001e58:	4b66      	ldr	r3, [pc, #408]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e5e:	4a65      	ldr	r2, [pc, #404]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e68:	e024      	b.n	8001eb4 <HAL_RCC_OscConfig+0x378>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b05      	cmp	r3, #5
 8001e70:	d110      	bne.n	8001e94 <HAL_RCC_OscConfig+0x358>
 8001e72:	4b60      	ldr	r3, [pc, #384]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e78:	4a5e      	ldr	r2, [pc, #376]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001e7a:	f043 0304 	orr.w	r3, r3, #4
 8001e7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e82:	4b5c      	ldr	r3, [pc, #368]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e88:	4a5a      	ldr	r2, [pc, #360]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e92:	e00f      	b.n	8001eb4 <HAL_RCC_OscConfig+0x378>
 8001e94:	4b57      	ldr	r3, [pc, #348]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e9a:	4a56      	ldr	r2, [pc, #344]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ea4:	4b53      	ldr	r3, [pc, #332]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eaa:	4a52      	ldr	r2, [pc, #328]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001eac:	f023 0304 	bic.w	r3, r3, #4
 8001eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d016      	beq.n	8001eea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebc:	f7ff fac4 	bl	8001448 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec4:	f7ff fac0 	bl	8001448 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e138      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eda:	4b46      	ldr	r3, [pc, #280]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0ed      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x388>
 8001ee8:	e015      	b.n	8001f16 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eea:	f7ff faad 	bl	8001448 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ef0:	e00a      	b.n	8001f08 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef2:	f7ff faa9 	bl	8001448 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e121      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f08:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1ed      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f16:	7ffb      	ldrb	r3, [r7, #31]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d105      	bne.n	8001f28 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f1c:	4b35      	ldr	r3, [pc, #212]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f20:	4a34      	ldr	r2, [pc, #208]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001f22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f26:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d03c      	beq.n	8001fae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d01c      	beq.n	8001f76 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001f3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f42:	4a2c      	ldr	r2, [pc, #176]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4c:	f7ff fa7c 	bl	8001448 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f54:	f7ff fa78 	bl	8001448 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e0f2      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f66:	4b23      	ldr	r3, [pc, #140]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001f68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0ef      	beq.n	8001f54 <HAL_RCC_OscConfig+0x418>
 8001f74:	e01b      	b.n	8001fae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f76:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001f78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001f7e:	f023 0301 	bic.w	r3, r3, #1
 8001f82:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f86:	f7ff fa5f 	bl	8001448 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f8e:	f7ff fa5b 	bl	8001448 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e0d5      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fa0:	4b14      	ldr	r3, [pc, #80]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001fa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1ef      	bne.n	8001f8e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 80c9 	beq.w	800214a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 030c 	and.w	r3, r3, #12
 8001fc0:	2b0c      	cmp	r3, #12
 8001fc2:	f000 8083 	beq.w	80020cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d15e      	bne.n	800208c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a08      	ldr	r2, [pc, #32]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001fd4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7ff fa35 	bl	8001448 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe0:	e00c      	b.n	8001ffc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe2:	f7ff fa31 	bl	8001448 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d905      	bls.n	8001ffc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e0ab      	b.n	800214c <HAL_RCC_OscConfig+0x610>
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ffc:	4b55      	ldr	r3, [pc, #340]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1ec      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002008:	4b52      	ldr	r3, [pc, #328]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	4b52      	ldr	r3, [pc, #328]	@ (8002158 <HAL_RCC_OscConfig+0x61c>)
 800200e:	4013      	ands	r3, r2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6a11      	ldr	r1, [r2, #32]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002018:	3a01      	subs	r2, #1
 800201a:	0112      	lsls	r2, r2, #4
 800201c:	4311      	orrs	r1, r2
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002022:	0212      	lsls	r2, r2, #8
 8002024:	4311      	orrs	r1, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800202a:	0852      	lsrs	r2, r2, #1
 800202c:	3a01      	subs	r2, #1
 800202e:	0552      	lsls	r2, r2, #21
 8002030:	4311      	orrs	r1, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002036:	0852      	lsrs	r2, r2, #1
 8002038:	3a01      	subs	r2, #1
 800203a:	0652      	lsls	r2, r2, #25
 800203c:	4311      	orrs	r1, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002042:	06d2      	lsls	r2, r2, #27
 8002044:	430a      	orrs	r2, r1
 8002046:	4943      	ldr	r1, [pc, #268]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 8002048:	4313      	orrs	r3, r2
 800204a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800204c:	4b41      	ldr	r3, [pc, #260]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a40      	ldr	r2, [pc, #256]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 8002052:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002056:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002058:	4b3e      	ldr	r3, [pc, #248]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4a3d      	ldr	r2, [pc, #244]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 800205e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002062:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7ff f9f0 	bl	8001448 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206c:	f7ff f9ec 	bl	8001448 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e066      	b.n	800214c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800207e:	4b35      	ldr	r3, [pc, #212]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x530>
 800208a:	e05e      	b.n	800214a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208c:	4b31      	ldr	r3, [pc, #196]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a30      	ldr	r2, [pc, #192]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 8002092:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7ff f9d6 	bl	8001448 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7ff f9d2 	bl	8001448 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e04c      	b.n	800214c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b2:	4b28      	ldr	r3, [pc, #160]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80020be:	4b25      	ldr	r3, [pc, #148]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	4924      	ldr	r1, [pc, #144]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 80020c4:	4b25      	ldr	r3, [pc, #148]	@ (800215c <HAL_RCC_OscConfig+0x620>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	60cb      	str	r3, [r1, #12]
 80020ca:	e03e      	b.n	800214a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e039      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80020d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f003 0203 	and.w	r2, r3, #3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d12c      	bne.n	8002146 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	3b01      	subs	r3, #1
 80020f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d123      	bne.n	8002146 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002108:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d11b      	bne.n	8002146 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002118:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800211a:	429a      	cmp	r2, r3
 800211c:	d113      	bne.n	8002146 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002128:	085b      	lsrs	r3, r3, #1
 800212a:	3b01      	subs	r3, #1
 800212c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d109      	bne.n	8002146 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	3b01      	subs	r3, #1
 8002140:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002142:	429a      	cmp	r2, r3
 8002144:	d001      	beq.n	800214a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021000 	.word	0x40021000
 8002158:	019f800c 	.word	0x019f800c
 800215c:	feeefffc 	.word	0xfeeefffc

08002160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e11e      	b.n	80023b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002178:	4b91      	ldr	r3, [pc, #580]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d910      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b8e      	ldr	r3, [pc, #568]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 020f 	bic.w	r2, r3, #15
 800218e:	498c      	ldr	r1, [pc, #560]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b8a      	ldr	r3, [pc, #552]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e106      	b.n	80023b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d073      	beq.n	800229c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d129      	bne.n	8002210 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021bc:	4b81      	ldr	r3, [pc, #516]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0f4      	b.n	80023b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80021cc:	f000 f99e 	bl	800250c <RCC_GetSysClockFreqFromPLLSource>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4a7c      	ldr	r2, [pc, #496]	@ (80023c8 <HAL_RCC_ClockConfig+0x268>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d93f      	bls.n	800225a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021da:	4b7a      	ldr	r3, [pc, #488]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d033      	beq.n	800225a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d12f      	bne.n	800225a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021fa:	4b72      	ldr	r3, [pc, #456]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002202:	4a70      	ldr	r2, [pc, #448]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 8002204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002208:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800220a:	2380      	movs	r3, #128	@ 0x80
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	e024      	b.n	800225a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d107      	bne.n	8002228 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002218:	4b6a      	ldr	r3, [pc, #424]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d109      	bne.n	8002238 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0c6      	b.n	80023b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002228:	4b66      	ldr	r3, [pc, #408]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0be      	b.n	80023b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002238:	f000 f8ce 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 800223c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4a61      	ldr	r2, [pc, #388]	@ (80023c8 <HAL_RCC_ClockConfig+0x268>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d909      	bls.n	800225a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002246:	4b5f      	ldr	r3, [pc, #380]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800224e:	4a5d      	ldr	r2, [pc, #372]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 8002250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002254:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002256:	2380      	movs	r3, #128	@ 0x80
 8002258:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800225a:	4b5a      	ldr	r3, [pc, #360]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f023 0203 	bic.w	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4957      	ldr	r1, [pc, #348]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 8002268:	4313      	orrs	r3, r2
 800226a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800226c:	f7ff f8ec 	bl	8001448 <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002272:	e00a      	b.n	800228a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002274:	f7ff f8e8 	bl	8001448 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e095      	b.n	80023b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	4b4e      	ldr	r3, [pc, #312]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 020c 	and.w	r2, r3, #12
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	429a      	cmp	r2, r3
 800229a:	d1eb      	bne.n	8002274 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d023      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b4:	4b43      	ldr	r3, [pc, #268]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a42      	ldr	r2, [pc, #264]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80022ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d007      	beq.n	80022dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80022cc:	4b3d      	ldr	r3, [pc, #244]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80022d4:	4a3b      	ldr	r2, [pc, #236]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80022d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022dc:	4b39      	ldr	r3, [pc, #228]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4936      	ldr	r1, [pc, #216]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	608b      	str	r3, [r1, #8]
 80022ee:	e008      	b.n	8002302 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2b80      	cmp	r3, #128	@ 0x80
 80022f4:	d105      	bne.n	8002302 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022f6:	4b33      	ldr	r3, [pc, #204]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	4a32      	ldr	r2, [pc, #200]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80022fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002300:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002302:	4b2f      	ldr	r3, [pc, #188]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d21d      	bcs.n	800234c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002310:	4b2b      	ldr	r3, [pc, #172]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f023 020f 	bic.w	r2, r3, #15
 8002318:	4929      	ldr	r1, [pc, #164]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	4313      	orrs	r3, r2
 800231e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002320:	f7ff f892 	bl	8001448 <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	e00a      	b.n	800233e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002328:	f7ff f88e 	bl	8001448 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e03b      	b.n	80023b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233e:	4b20      	ldr	r3, [pc, #128]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d1ed      	bne.n	8002328 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002358:	4b1a      	ldr	r3, [pc, #104]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4917      	ldr	r1, [pc, #92]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002376:	4b13      	ldr	r3, [pc, #76]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	490f      	ldr	r1, [pc, #60]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800238a:	f000 f825 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 800238e:	4602      	mov	r2, r0
 8002390:	4b0c      	ldr	r3, [pc, #48]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	490c      	ldr	r1, [pc, #48]	@ (80023cc <HAL_RCC_ClockConfig+0x26c>)
 800239c:	5ccb      	ldrb	r3, [r1, r3]
 800239e:	f003 031f 	and.w	r3, r3, #31
 80023a2:	fa22 f303 	lsr.w	r3, r2, r3
 80023a6:	4a0a      	ldr	r2, [pc, #40]	@ (80023d0 <HAL_RCC_ClockConfig+0x270>)
 80023a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023aa:	4b0a      	ldr	r3, [pc, #40]	@ (80023d4 <HAL_RCC_ClockConfig+0x274>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fffe 	bl	80013b0 <HAL_InitTick>
 80023b4:	4603      	mov	r3, r0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40022000 	.word	0x40022000
 80023c4:	40021000 	.word	0x40021000
 80023c8:	04c4b400 	.word	0x04c4b400
 80023cc:	08004948 	.word	0x08004948
 80023d0:	20000000 	.word	0x20000000
 80023d4:	20000004 	.word	0x20000004

080023d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	b087      	sub	sp, #28
 80023dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023de:	4b2c      	ldr	r3, [pc, #176]	@ (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d102      	bne.n	80023f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002494 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	e047      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023f0:	4b27      	ldr	r3, [pc, #156]	@ (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d102      	bne.n	8002402 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023fc:	4b26      	ldr	r3, [pc, #152]	@ (8002498 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	e03e      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002402:	4b23      	ldr	r3, [pc, #140]	@ (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b0c      	cmp	r3, #12
 800240c:	d136      	bne.n	800247c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800240e:	4b20      	ldr	r3, [pc, #128]	@ (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002418:	4b1d      	ldr	r3, [pc, #116]	@ (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	3301      	adds	r3, #1
 8002424:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b03      	cmp	r3, #3
 800242a:	d10c      	bne.n	8002446 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800242c:	4a1a      	ldr	r2, [pc, #104]	@ (8002498 <HAL_RCC_GetSysClockFreq+0xc0>)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	fbb2 f3f3 	udiv	r3, r2, r3
 8002434:	4a16      	ldr	r2, [pc, #88]	@ (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002436:	68d2      	ldr	r2, [r2, #12]
 8002438:	0a12      	lsrs	r2, r2, #8
 800243a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	617b      	str	r3, [r7, #20]
      break;
 8002444:	e00c      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002446:	4a13      	ldr	r2, [pc, #76]	@ (8002494 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	fbb2 f3f3 	udiv	r3, r2, r3
 800244e:	4a10      	ldr	r2, [pc, #64]	@ (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002450:	68d2      	ldr	r2, [r2, #12]
 8002452:	0a12      	lsrs	r2, r2, #8
 8002454:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002458:	fb02 f303 	mul.w	r3, r2, r3
 800245c:	617b      	str	r3, [r7, #20]
      break;
 800245e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002460:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	0e5b      	lsrs	r3, r3, #25
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	3301      	adds	r3, #1
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	fbb2 f3f3 	udiv	r3, r2, r3
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	e001      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002480:	693b      	ldr	r3, [r7, #16]
}
 8002482:	4618      	mov	r0, r3
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
 8002494:	00f42400 	.word	0x00f42400
 8002498:	007a1200 	.word	0x007a1200

0800249c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a0:	4b03      	ldr	r3, [pc, #12]	@ (80024b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000000 	.word	0x20000000

080024b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024b8:	f7ff fff0 	bl	800249c <HAL_RCC_GetHCLKFreq>
 80024bc:	4602      	mov	r2, r0
 80024be:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	0a1b      	lsrs	r3, r3, #8
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	4904      	ldr	r1, [pc, #16]	@ (80024dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80024ca:	5ccb      	ldrb	r3, [r1, r3]
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	08004958 	.word	0x08004958

080024e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024e4:	f7ff ffda 	bl	800249c <HAL_RCC_GetHCLKFreq>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	0adb      	lsrs	r3, r3, #11
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	4904      	ldr	r1, [pc, #16]	@ (8002508 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024f6:	5ccb      	ldrb	r3, [r1, r3]
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40021000 	.word	0x40021000
 8002508:	08004958 	.word	0x08004958

0800250c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002512:	4b1e      	ldr	r3, [pc, #120]	@ (800258c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800251c:	4b1b      	ldr	r3, [pc, #108]	@ (800258c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	3301      	adds	r3, #1
 8002528:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d10c      	bne.n	800254a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002530:	4a17      	ldr	r2, [pc, #92]	@ (8002590 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	fbb2 f3f3 	udiv	r3, r2, r3
 8002538:	4a14      	ldr	r2, [pc, #80]	@ (800258c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800253a:	68d2      	ldr	r2, [r2, #12]
 800253c:	0a12      	lsrs	r2, r2, #8
 800253e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002542:	fb02 f303 	mul.w	r3, r2, r3
 8002546:	617b      	str	r3, [r7, #20]
    break;
 8002548:	e00c      	b.n	8002564 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800254a:	4a12      	ldr	r2, [pc, #72]	@ (8002594 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	4a0e      	ldr	r2, [pc, #56]	@ (800258c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002554:	68d2      	ldr	r2, [r2, #12]
 8002556:	0a12      	lsrs	r2, r2, #8
 8002558:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800255c:	fb02 f303 	mul.w	r3, r2, r3
 8002560:	617b      	str	r3, [r7, #20]
    break;
 8002562:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002564:	4b09      	ldr	r3, [pc, #36]	@ (800258c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	0e5b      	lsrs	r3, r3, #25
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	3301      	adds	r3, #1
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800257e:	687b      	ldr	r3, [r7, #4]
}
 8002580:	4618      	mov	r0, r3
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	40021000 	.word	0x40021000
 8002590:	007a1200 	.word	0x007a1200
 8002594:	00f42400 	.word	0x00f42400

08002598 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025a0:	2300      	movs	r3, #0
 80025a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025a4:	2300      	movs	r3, #0
 80025a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 8098 	beq.w	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b6:	2300      	movs	r3, #0
 80025b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ba:	4b43      	ldr	r3, [pc, #268]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10d      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c6:	4b40      	ldr	r3, [pc, #256]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ca:	4a3f      	ldr	r2, [pc, #252]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80025d2:	4b3d      	ldr	r3, [pc, #244]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025de:	2301      	movs	r3, #1
 80025e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025e2:	4b3a      	ldr	r3, [pc, #232]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a39      	ldr	r2, [pc, #228]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025ee:	f7fe ff2b 	bl	8001448 <HAL_GetTick>
 80025f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025f4:	e009      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f6:	f7fe ff27 	bl	8001448 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d902      	bls.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	74fb      	strb	r3, [r7, #19]
        break;
 8002608:	e005      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800260a:	4b30      	ldr	r3, [pc, #192]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0ef      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002616:	7cfb      	ldrb	r3, [r7, #19]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d159      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800261c:	4b2a      	ldr	r3, [pc, #168]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002626:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d01e      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	429a      	cmp	r2, r3
 8002636:	d019      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002638:	4b23      	ldr	r3, [pc, #140]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002642:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002644:	4b20      	ldr	r3, [pc, #128]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264a:	4a1f      	ldr	r2, [pc, #124]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800264c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002650:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002654:	4b1c      	ldr	r3, [pc, #112]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800265a:	4a1b      	ldr	r2, [pc, #108]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800265c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002660:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002664:	4a18      	ldr	r2, [pc, #96]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d016      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002676:	f7fe fee7 	bl	8001448 <HAL_GetTick>
 800267a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800267c:	e00b      	b.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267e:	f7fe fee3 	bl	8001448 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f241 3288 	movw	r2, #5000	@ 0x1388
 800268c:	4293      	cmp	r3, r2
 800268e:	d902      	bls.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	74fb      	strb	r3, [r7, #19]
            break;
 8002694:	e006      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002696:	4b0c      	ldr	r3, [pc, #48]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0ec      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80026a4:	7cfb      	ldrb	r3, [r7, #19]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10b      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026aa:	4b07      	ldr	r3, [pc, #28]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026b8:	4903      	ldr	r1, [pc, #12]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80026c0:	e008      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	74bb      	strb	r3, [r7, #18]
 80026c6:	e005      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d0:	7cfb      	ldrb	r3, [r7, #19]
 80026d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026d4:	7c7b      	ldrb	r3, [r7, #17]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d105      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026da:	4ba7      	ldr	r3, [pc, #668]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026de:	4aa6      	ldr	r2, [pc, #664]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026f2:	4ba1      	ldr	r3, [pc, #644]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f8:	f023 0203 	bic.w	r2, r3, #3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	499d      	ldr	r1, [pc, #628]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002714:	4b98      	ldr	r3, [pc, #608]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271a:	f023 020c 	bic.w	r2, r3, #12
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	4995      	ldr	r1, [pc, #596]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002736:	4b90      	ldr	r3, [pc, #576]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	498c      	ldr	r1, [pc, #560]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002758:	4b87      	ldr	r3, [pc, #540]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	4984      	ldr	r1, [pc, #528]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800277a:	4b7f      	ldr	r3, [pc, #508]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800277c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002780:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	497b      	ldr	r1, [pc, #492]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00a      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800279c:	4b76      	ldr	r3, [pc, #472]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	4973      	ldr	r1, [pc, #460]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027be:	4b6e      	ldr	r3, [pc, #440]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	496a      	ldr	r1, [pc, #424]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00a      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027e0:	4b65      	ldr	r3, [pc, #404]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	4962      	ldr	r1, [pc, #392]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002802:	4b5d      	ldr	r3, [pc, #372]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002808:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002810:	4959      	ldr	r1, [pc, #356]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002824:	4b54      	ldr	r3, [pc, #336]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002826:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800282a:	f023 0203 	bic.w	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002832:	4951      	ldr	r1, [pc, #324]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002846:	4b4c      	ldr	r3, [pc, #304]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002854:	4948      	ldr	r1, [pc, #288]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002864:	2b00      	cmp	r3, #0
 8002866:	d015      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002868:	4b43      	ldr	r3, [pc, #268]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	4940      	ldr	r1, [pc, #256]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002886:	d105      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002888:	4b3b      	ldr	r3, [pc, #236]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4a3a      	ldr	r2, [pc, #232]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002892:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800289c:	2b00      	cmp	r3, #0
 800289e:	d015      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028a0:	4b35      	ldr	r3, [pc, #212]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ae:	4932      	ldr	r1, [pc, #200]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028be:	d105      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028ca:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d015      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028d8:	4b27      	ldr	r3, [pc, #156]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e6:	4924      	ldr	r1, [pc, #144]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028f6:	d105      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002902:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d015      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002910:	4b19      	ldr	r3, [pc, #100]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002916:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800291e:	4916      	ldr	r1, [pc, #88]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800292e:	d105      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002930:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4a10      	ldr	r2, [pc, #64]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002936:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800293a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d019      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002948:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	4908      	ldr	r1, [pc, #32]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002966:	d109      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002968:	4b03      	ldr	r3, [pc, #12]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a02      	ldr	r2, [pc, #8]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002972:	60d3      	str	r3, [r2, #12]
 8002974:	e002      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d015      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002988:	4b29      	ldr	r3, [pc, #164]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	4926      	ldr	r1, [pc, #152]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029a6:	d105      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029a8:	4b21      	ldr	r3, [pc, #132]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4a20      	ldr	r2, [pc, #128]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d015      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80029c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ce:	4918      	ldr	r1, [pc, #96]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029de:	d105      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029e0:	4b13      	ldr	r3, [pc, #76]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4a12      	ldr	r2, [pc, #72]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d015      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80029f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a06:	490a      	ldr	r1, [pc, #40]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a16:	d105      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a18:	4b05      	ldr	r3, [pc, #20]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4a04      	ldr	r2, [pc, #16]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a24:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000

08002a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d001      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e054      	b.n	8002af6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a26      	ldr	r2, [pc, #152]	@ (8002b04 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d022      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x80>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a76:	d01d      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x80>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a22      	ldr	r2, [pc, #136]	@ (8002b08 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d018      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x80>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a21      	ldr	r2, [pc, #132]	@ (8002b0c <HAL_TIM_Base_Start_IT+0xd8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d013      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x80>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1f      	ldr	r2, [pc, #124]	@ (8002b10 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00e      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x80>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002b14 <HAL_TIM_Base_Start_IT+0xe0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d009      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x80>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8002b18 <HAL_TIM_Base_Start_IT+0xe4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d004      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x80>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1b      	ldr	r2, [pc, #108]	@ (8002b1c <HAL_TIM_Base_Start_IT+0xe8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d115      	bne.n	8002ae0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	4b19      	ldr	r3, [pc, #100]	@ (8002b20 <HAL_TIM_Base_Start_IT+0xec>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b06      	cmp	r3, #6
 8002ac4:	d015      	beq.n	8002af2 <HAL_TIM_Base_Start_IT+0xbe>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002acc:	d011      	beq.n	8002af2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0201 	orr.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ade:	e008      	b.n	8002af2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	e000      	b.n	8002af4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40012c00 	.word	0x40012c00
 8002b08:	40000400 	.word	0x40000400
 8002b0c:	40000800 	.word	0x40000800
 8002b10:	40000c00 	.word	0x40000c00
 8002b14:	40013400 	.word	0x40013400
 8002b18:	40014000 	.word	0x40014000
 8002b1c:	40015000 	.word	0x40015000
 8002b20:	00010007 	.word	0x00010007

08002b24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e049      	b.n	8002bca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fe faa0 	bl	8001090 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3304      	adds	r3, #4
 8002b60:	4619      	mov	r1, r3
 8002b62:	4610      	mov	r0, r2
 8002b64:	f000 fbb0 	bl	80032c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d109      	bne.n	8002bf8 <HAL_TIM_PWM_Start+0x24>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	bf14      	ite	ne
 8002bf0:	2301      	movne	r3, #1
 8002bf2:	2300      	moveq	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	e03c      	b.n	8002c72 <HAL_TIM_PWM_Start+0x9e>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d109      	bne.n	8002c12 <HAL_TIM_PWM_Start+0x3e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	bf14      	ite	ne
 8002c0a:	2301      	movne	r3, #1
 8002c0c:	2300      	moveq	r3, #0
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	e02f      	b.n	8002c72 <HAL_TIM_PWM_Start+0x9e>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d109      	bne.n	8002c2c <HAL_TIM_PWM_Start+0x58>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	e022      	b.n	8002c72 <HAL_TIM_PWM_Start+0x9e>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	2b0c      	cmp	r3, #12
 8002c30:	d109      	bne.n	8002c46 <HAL_TIM_PWM_Start+0x72>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	bf14      	ite	ne
 8002c3e:	2301      	movne	r3, #1
 8002c40:	2300      	moveq	r3, #0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	e015      	b.n	8002c72 <HAL_TIM_PWM_Start+0x9e>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b10      	cmp	r3, #16
 8002c4a:	d109      	bne.n	8002c60 <HAL_TIM_PWM_Start+0x8c>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	bf14      	ite	ne
 8002c58:	2301      	movne	r3, #1
 8002c5a:	2300      	moveq	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	e008      	b.n	8002c72 <HAL_TIM_PWM_Start+0x9e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	bf14      	ite	ne
 8002c6c:	2301      	movne	r3, #1
 8002c6e:	2300      	moveq	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e0a6      	b.n	8002dc8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d104      	bne.n	8002c8a <HAL_TIM_PWM_Start+0xb6>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c88:	e023      	b.n	8002cd2 <HAL_TIM_PWM_Start+0xfe>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d104      	bne.n	8002c9a <HAL_TIM_PWM_Start+0xc6>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c98:	e01b      	b.n	8002cd2 <HAL_TIM_PWM_Start+0xfe>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d104      	bne.n	8002caa <HAL_TIM_PWM_Start+0xd6>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ca8:	e013      	b.n	8002cd2 <HAL_TIM_PWM_Start+0xfe>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b0c      	cmp	r3, #12
 8002cae:	d104      	bne.n	8002cba <HAL_TIM_PWM_Start+0xe6>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002cb8:	e00b      	b.n	8002cd2 <HAL_TIM_PWM_Start+0xfe>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b10      	cmp	r3, #16
 8002cbe:	d104      	bne.n	8002cca <HAL_TIM_PWM_Start+0xf6>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cc8:	e003      	b.n	8002cd2 <HAL_TIM_PWM_Start+0xfe>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	6839      	ldr	r1, [r7, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fed2 	bl	8003a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a3a      	ldr	r2, [pc, #232]	@ (8002dd0 <HAL_TIM_PWM_Start+0x1fc>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d018      	beq.n	8002d1c <HAL_TIM_PWM_Start+0x148>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a39      	ldr	r2, [pc, #228]	@ (8002dd4 <HAL_TIM_PWM_Start+0x200>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d013      	beq.n	8002d1c <HAL_TIM_PWM_Start+0x148>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a37      	ldr	r2, [pc, #220]	@ (8002dd8 <HAL_TIM_PWM_Start+0x204>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00e      	beq.n	8002d1c <HAL_TIM_PWM_Start+0x148>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a36      	ldr	r2, [pc, #216]	@ (8002ddc <HAL_TIM_PWM_Start+0x208>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d009      	beq.n	8002d1c <HAL_TIM_PWM_Start+0x148>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a34      	ldr	r2, [pc, #208]	@ (8002de0 <HAL_TIM_PWM_Start+0x20c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d004      	beq.n	8002d1c <HAL_TIM_PWM_Start+0x148>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a33      	ldr	r2, [pc, #204]	@ (8002de4 <HAL_TIM_PWM_Start+0x210>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d101      	bne.n	8002d20 <HAL_TIM_PWM_Start+0x14c>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <HAL_TIM_PWM_Start+0x14e>
 8002d20:	2300      	movs	r3, #0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d007      	beq.n	8002d36 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a25      	ldr	r2, [pc, #148]	@ (8002dd0 <HAL_TIM_PWM_Start+0x1fc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d022      	beq.n	8002d86 <HAL_TIM_PWM_Start+0x1b2>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d48:	d01d      	beq.n	8002d86 <HAL_TIM_PWM_Start+0x1b2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a26      	ldr	r2, [pc, #152]	@ (8002de8 <HAL_TIM_PWM_Start+0x214>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d018      	beq.n	8002d86 <HAL_TIM_PWM_Start+0x1b2>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a24      	ldr	r2, [pc, #144]	@ (8002dec <HAL_TIM_PWM_Start+0x218>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d013      	beq.n	8002d86 <HAL_TIM_PWM_Start+0x1b2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a23      	ldr	r2, [pc, #140]	@ (8002df0 <HAL_TIM_PWM_Start+0x21c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00e      	beq.n	8002d86 <HAL_TIM_PWM_Start+0x1b2>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a19      	ldr	r2, [pc, #100]	@ (8002dd4 <HAL_TIM_PWM_Start+0x200>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d009      	beq.n	8002d86 <HAL_TIM_PWM_Start+0x1b2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a18      	ldr	r2, [pc, #96]	@ (8002dd8 <HAL_TIM_PWM_Start+0x204>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d004      	beq.n	8002d86 <HAL_TIM_PWM_Start+0x1b2>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a18      	ldr	r2, [pc, #96]	@ (8002de4 <HAL_TIM_PWM_Start+0x210>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d115      	bne.n	8002db2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	4b19      	ldr	r3, [pc, #100]	@ (8002df4 <HAL_TIM_PWM_Start+0x220>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b06      	cmp	r3, #6
 8002d96:	d015      	beq.n	8002dc4 <HAL_TIM_PWM_Start+0x1f0>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d9e:	d011      	beq.n	8002dc4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db0:	e008      	b.n	8002dc4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 0201 	orr.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	e000      	b.n	8002dc6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40012c00 	.word	0x40012c00
 8002dd4:	40013400 	.word	0x40013400
 8002dd8:	40014000 	.word	0x40014000
 8002ddc:	40014400 	.word	0x40014400
 8002de0:	40014800 	.word	0x40014800
 8002de4:	40015000 	.word	0x40015000
 8002de8:	40000400 	.word	0x40000400
 8002dec:	40000800 	.word	0x40000800
 8002df0:	40000c00 	.word	0x40000c00
 8002df4:	00010007 	.word	0x00010007

08002df8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e097      	b.n	8002f3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d106      	bne.n	8002e26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7fe f85d 	bl	8000ee0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8002e3c:	f023 0307 	bic.w	r3, r3, #7
 8002e40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	f000 fa3b 	bl	80032c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e7a:	f023 0303 	bic.w	r3, r3, #3
 8002e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002e98:	f023 030c 	bic.w	r3, r3, #12
 8002e9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ea4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ea8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	011a      	lsls	r2, r3, #4
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	031b      	lsls	r3, r3, #12
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002ed6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002ede:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	4313      	orrs	r3, r2
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d110      	bne.n	8002f96 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d102      	bne.n	8002f80 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f7a:	7b7b      	ldrb	r3, [r7, #13]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d001      	beq.n	8002f84 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e089      	b.n	8003098 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f94:	e031      	b.n	8002ffa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d110      	bne.n	8002fbe <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f9c:	7bbb      	ldrb	r3, [r7, #14]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d102      	bne.n	8002fa8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fa2:	7b3b      	ldrb	r3, [r7, #12]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d001      	beq.n	8002fac <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e075      	b.n	8003098 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fbc:	e01d      	b.n	8002ffa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d108      	bne.n	8002fd6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fc4:	7bbb      	ldrb	r3, [r7, #14]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d105      	bne.n	8002fd6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fca:	7b7b      	ldrb	r3, [r7, #13]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d102      	bne.n	8002fd6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fd0:	7b3b      	ldrb	r3, [r7, #12]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d001      	beq.n	8002fda <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e05e      	b.n	8003098 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2202      	movs	r2, #2
 8002fee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b04      	cmp	r3, #4
 8003004:	d010      	beq.n	8003028 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003006:	e01f      	b.n	8003048 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2201      	movs	r2, #1
 800300e:	2100      	movs	r1, #0
 8003010:	4618      	mov	r0, r3
 8003012:	f000 fd37 	bl	8003a84 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0202 	orr.w	r2, r2, #2
 8003024:	60da      	str	r2, [r3, #12]
      break;
 8003026:	e02e      	b.n	8003086 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2201      	movs	r2, #1
 800302e:	2104      	movs	r1, #4
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fd27 	bl	8003a84 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0204 	orr.w	r2, r2, #4
 8003044:	60da      	str	r2, [r3, #12]
      break;
 8003046:	e01e      	b.n	8003086 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2201      	movs	r2, #1
 800304e:	2100      	movs	r1, #0
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fd17 	bl	8003a84 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2201      	movs	r2, #1
 800305c:	2104      	movs	r1, #4
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fd10 	bl	8003a84 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0202 	orr.w	r2, r2, #2
 8003072:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0204 	orr.w	r2, r2, #4
 8003082:	60da      	str	r2, [r3, #12]
      break;
 8003084:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0201 	orr.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e0ff      	b.n	80032be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b14      	cmp	r3, #20
 80030ca:	f200 80f0 	bhi.w	80032ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80030ce:	a201      	add	r2, pc, #4	@ (adr r2, 80030d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d4:	08003129 	.word	0x08003129
 80030d8:	080032af 	.word	0x080032af
 80030dc:	080032af 	.word	0x080032af
 80030e0:	080032af 	.word	0x080032af
 80030e4:	08003169 	.word	0x08003169
 80030e8:	080032af 	.word	0x080032af
 80030ec:	080032af 	.word	0x080032af
 80030f0:	080032af 	.word	0x080032af
 80030f4:	080031ab 	.word	0x080031ab
 80030f8:	080032af 	.word	0x080032af
 80030fc:	080032af 	.word	0x080032af
 8003100:	080032af 	.word	0x080032af
 8003104:	080031eb 	.word	0x080031eb
 8003108:	080032af 	.word	0x080032af
 800310c:	080032af 	.word	0x080032af
 8003110:	080032af 	.word	0x080032af
 8003114:	0800322d 	.word	0x0800322d
 8003118:	080032af 	.word	0x080032af
 800311c:	080032af 	.word	0x080032af
 8003120:	080032af 	.word	0x080032af
 8003124:	0800326d 	.word	0x0800326d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	4618      	mov	r0, r3
 8003130:	f000 f97e 	bl	8003430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0208 	orr.w	r2, r2, #8
 8003142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0204 	bic.w	r2, r2, #4
 8003152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6999      	ldr	r1, [r3, #24]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	619a      	str	r2, [r3, #24]
      break;
 8003166:	e0a5      	b.n	80032b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	4618      	mov	r0, r3
 8003170:	f000 f9f8 	bl	8003564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699a      	ldr	r2, [r3, #24]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003182:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699a      	ldr	r2, [r3, #24]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003192:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6999      	ldr	r1, [r3, #24]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	021a      	lsls	r2, r3, #8
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	619a      	str	r2, [r3, #24]
      break;
 80031a8:	e084      	b.n	80032b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68b9      	ldr	r1, [r7, #8]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fa6b 	bl	800368c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	69da      	ldr	r2, [r3, #28]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0208 	orr.w	r2, r2, #8
 80031c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0204 	bic.w	r2, r2, #4
 80031d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69d9      	ldr	r1, [r3, #28]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	61da      	str	r2, [r3, #28]
      break;
 80031e8:	e064      	b.n	80032b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fadd 	bl	80037b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69da      	ldr	r2, [r3, #28]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003204:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69da      	ldr	r2, [r3, #28]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003214:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69d9      	ldr	r1, [r3, #28]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	021a      	lsls	r2, r3, #8
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	61da      	str	r2, [r3, #28]
      break;
 800322a:	e043      	b.n	80032b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68b9      	ldr	r1, [r7, #8]
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fb50 	bl	80038d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0208 	orr.w	r2, r2, #8
 8003246:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0204 	bic.w	r2, r2, #4
 8003256:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800326a:	e023      	b.n	80032b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fb9a 	bl	80039ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003286:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003296:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	021a      	lsls	r2, r3, #8
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80032ac:	e002      	b.n	80032b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	75fb      	strb	r3, [r7, #23]
      break;
 80032b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop

080032c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a4c      	ldr	r2, [pc, #304]	@ (800340c <TIM_Base_SetConfig+0x144>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d017      	beq.n	8003310 <TIM_Base_SetConfig+0x48>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e6:	d013      	beq.n	8003310 <TIM_Base_SetConfig+0x48>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a49      	ldr	r2, [pc, #292]	@ (8003410 <TIM_Base_SetConfig+0x148>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00f      	beq.n	8003310 <TIM_Base_SetConfig+0x48>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a48      	ldr	r2, [pc, #288]	@ (8003414 <TIM_Base_SetConfig+0x14c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d00b      	beq.n	8003310 <TIM_Base_SetConfig+0x48>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a47      	ldr	r2, [pc, #284]	@ (8003418 <TIM_Base_SetConfig+0x150>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d007      	beq.n	8003310 <TIM_Base_SetConfig+0x48>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a46      	ldr	r2, [pc, #280]	@ (800341c <TIM_Base_SetConfig+0x154>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d003      	beq.n	8003310 <TIM_Base_SetConfig+0x48>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a45      	ldr	r2, [pc, #276]	@ (8003420 <TIM_Base_SetConfig+0x158>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d108      	bne.n	8003322 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a39      	ldr	r2, [pc, #228]	@ (800340c <TIM_Base_SetConfig+0x144>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d023      	beq.n	8003372 <TIM_Base_SetConfig+0xaa>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003330:	d01f      	beq.n	8003372 <TIM_Base_SetConfig+0xaa>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a36      	ldr	r2, [pc, #216]	@ (8003410 <TIM_Base_SetConfig+0x148>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d01b      	beq.n	8003372 <TIM_Base_SetConfig+0xaa>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a35      	ldr	r2, [pc, #212]	@ (8003414 <TIM_Base_SetConfig+0x14c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d017      	beq.n	8003372 <TIM_Base_SetConfig+0xaa>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a34      	ldr	r2, [pc, #208]	@ (8003418 <TIM_Base_SetConfig+0x150>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d013      	beq.n	8003372 <TIM_Base_SetConfig+0xaa>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a33      	ldr	r2, [pc, #204]	@ (800341c <TIM_Base_SetConfig+0x154>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00f      	beq.n	8003372 <TIM_Base_SetConfig+0xaa>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a33      	ldr	r2, [pc, #204]	@ (8003424 <TIM_Base_SetConfig+0x15c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00b      	beq.n	8003372 <TIM_Base_SetConfig+0xaa>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a32      	ldr	r2, [pc, #200]	@ (8003428 <TIM_Base_SetConfig+0x160>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <TIM_Base_SetConfig+0xaa>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a31      	ldr	r2, [pc, #196]	@ (800342c <TIM_Base_SetConfig+0x164>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d003      	beq.n	8003372 <TIM_Base_SetConfig+0xaa>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a2c      	ldr	r2, [pc, #176]	@ (8003420 <TIM_Base_SetConfig+0x158>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d108      	bne.n	8003384 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a18      	ldr	r2, [pc, #96]	@ (800340c <TIM_Base_SetConfig+0x144>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d013      	beq.n	80033d8 <TIM_Base_SetConfig+0x110>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a1a      	ldr	r2, [pc, #104]	@ (800341c <TIM_Base_SetConfig+0x154>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00f      	beq.n	80033d8 <TIM_Base_SetConfig+0x110>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003424 <TIM_Base_SetConfig+0x15c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00b      	beq.n	80033d8 <TIM_Base_SetConfig+0x110>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a19      	ldr	r2, [pc, #100]	@ (8003428 <TIM_Base_SetConfig+0x160>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d007      	beq.n	80033d8 <TIM_Base_SetConfig+0x110>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a18      	ldr	r2, [pc, #96]	@ (800342c <TIM_Base_SetConfig+0x164>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d003      	beq.n	80033d8 <TIM_Base_SetConfig+0x110>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a13      	ldr	r2, [pc, #76]	@ (8003420 <TIM_Base_SetConfig+0x158>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d103      	bne.n	80033e0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d105      	bne.n	80033fe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f023 0201 	bic.w	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	611a      	str	r2, [r3, #16]
  }
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40012c00 	.word	0x40012c00
 8003410:	40000400 	.word	0x40000400
 8003414:	40000800 	.word	0x40000800
 8003418:	40000c00 	.word	0x40000c00
 800341c:	40013400 	.word	0x40013400
 8003420:	40015000 	.word	0x40015000
 8003424:	40014000 	.word	0x40014000
 8003428:	40014400 	.word	0x40014400
 800342c:	40014800 	.word	0x40014800

08003430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	f023 0201 	bic.w	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800345e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0303 	bic.w	r3, r3, #3
 800346a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f023 0302 	bic.w	r3, r3, #2
 800347c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4313      	orrs	r3, r2
 8003486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a30      	ldr	r2, [pc, #192]	@ (800354c <TIM_OC1_SetConfig+0x11c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d013      	beq.n	80034b8 <TIM_OC1_SetConfig+0x88>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a2f      	ldr	r2, [pc, #188]	@ (8003550 <TIM_OC1_SetConfig+0x120>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00f      	beq.n	80034b8 <TIM_OC1_SetConfig+0x88>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a2e      	ldr	r2, [pc, #184]	@ (8003554 <TIM_OC1_SetConfig+0x124>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d00b      	beq.n	80034b8 <TIM_OC1_SetConfig+0x88>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a2d      	ldr	r2, [pc, #180]	@ (8003558 <TIM_OC1_SetConfig+0x128>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d007      	beq.n	80034b8 <TIM_OC1_SetConfig+0x88>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a2c      	ldr	r2, [pc, #176]	@ (800355c <TIM_OC1_SetConfig+0x12c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d003      	beq.n	80034b8 <TIM_OC1_SetConfig+0x88>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a2b      	ldr	r2, [pc, #172]	@ (8003560 <TIM_OC1_SetConfig+0x130>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d10c      	bne.n	80034d2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f023 0308 	bic.w	r3, r3, #8
 80034be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f023 0304 	bic.w	r3, r3, #4
 80034d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a1d      	ldr	r2, [pc, #116]	@ (800354c <TIM_OC1_SetConfig+0x11c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <TIM_OC1_SetConfig+0xd2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003550 <TIM_OC1_SetConfig+0x120>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00f      	beq.n	8003502 <TIM_OC1_SetConfig+0xd2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003554 <TIM_OC1_SetConfig+0x124>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d00b      	beq.n	8003502 <TIM_OC1_SetConfig+0xd2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003558 <TIM_OC1_SetConfig+0x128>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d007      	beq.n	8003502 <TIM_OC1_SetConfig+0xd2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a19      	ldr	r2, [pc, #100]	@ (800355c <TIM_OC1_SetConfig+0x12c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d003      	beq.n	8003502 <TIM_OC1_SetConfig+0xd2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a18      	ldr	r2, [pc, #96]	@ (8003560 <TIM_OC1_SetConfig+0x130>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d111      	bne.n	8003526 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	621a      	str	r2, [r3, #32]
}
 8003540:	bf00      	nop
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	40012c00 	.word	0x40012c00
 8003550:	40013400 	.word	0x40013400
 8003554:	40014000 	.word	0x40014000
 8003558:	40014400 	.word	0x40014400
 800355c:	40014800 	.word	0x40014800
 8003560:	40015000 	.word	0x40015000

08003564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	f023 0210 	bic.w	r2, r3, #16
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003592:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800359e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f023 0320 	bic.w	r3, r3, #32
 80035b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003674 <TIM_OC2_SetConfig+0x110>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d007      	beq.n	80035d8 <TIM_OC2_SetConfig+0x74>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003678 <TIM_OC2_SetConfig+0x114>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d003      	beq.n	80035d8 <TIM_OC2_SetConfig+0x74>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a2a      	ldr	r2, [pc, #168]	@ (800367c <TIM_OC2_SetConfig+0x118>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d10d      	bne.n	80035f4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003674 <TIM_OC2_SetConfig+0x110>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d013      	beq.n	8003624 <TIM_OC2_SetConfig+0xc0>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003678 <TIM_OC2_SetConfig+0x114>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00f      	beq.n	8003624 <TIM_OC2_SetConfig+0xc0>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a1e      	ldr	r2, [pc, #120]	@ (8003680 <TIM_OC2_SetConfig+0x11c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00b      	beq.n	8003624 <TIM_OC2_SetConfig+0xc0>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a1d      	ldr	r2, [pc, #116]	@ (8003684 <TIM_OC2_SetConfig+0x120>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d007      	beq.n	8003624 <TIM_OC2_SetConfig+0xc0>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a1c      	ldr	r2, [pc, #112]	@ (8003688 <TIM_OC2_SetConfig+0x124>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d003      	beq.n	8003624 <TIM_OC2_SetConfig+0xc0>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a17      	ldr	r2, [pc, #92]	@ (800367c <TIM_OC2_SetConfig+0x118>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d113      	bne.n	800364c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800362a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003632:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	621a      	str	r2, [r3, #32]
}
 8003666:	bf00      	nop
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40012c00 	.word	0x40012c00
 8003678:	40013400 	.word	0x40013400
 800367c:	40015000 	.word	0x40015000
 8003680:	40014000 	.word	0x40014000
 8003684:	40014400 	.word	0x40014400
 8003688:	40014800 	.word	0x40014800

0800368c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f023 0303 	bic.w	r3, r3, #3
 80036c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	021b      	lsls	r3, r3, #8
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003798 <TIM_OC3_SetConfig+0x10c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d007      	beq.n	80036fe <TIM_OC3_SetConfig+0x72>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a2a      	ldr	r2, [pc, #168]	@ (800379c <TIM_OC3_SetConfig+0x110>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d003      	beq.n	80036fe <TIM_OC3_SetConfig+0x72>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a29      	ldr	r2, [pc, #164]	@ (80037a0 <TIM_OC3_SetConfig+0x114>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d10d      	bne.n	800371a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a1e      	ldr	r2, [pc, #120]	@ (8003798 <TIM_OC3_SetConfig+0x10c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d013      	beq.n	800374a <TIM_OC3_SetConfig+0xbe>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a1d      	ldr	r2, [pc, #116]	@ (800379c <TIM_OC3_SetConfig+0x110>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00f      	beq.n	800374a <TIM_OC3_SetConfig+0xbe>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a1d      	ldr	r2, [pc, #116]	@ (80037a4 <TIM_OC3_SetConfig+0x118>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00b      	beq.n	800374a <TIM_OC3_SetConfig+0xbe>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a1c      	ldr	r2, [pc, #112]	@ (80037a8 <TIM_OC3_SetConfig+0x11c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d007      	beq.n	800374a <TIM_OC3_SetConfig+0xbe>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a1b      	ldr	r2, [pc, #108]	@ (80037ac <TIM_OC3_SetConfig+0x120>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d003      	beq.n	800374a <TIM_OC3_SetConfig+0xbe>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a16      	ldr	r2, [pc, #88]	@ (80037a0 <TIM_OC3_SetConfig+0x114>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d113      	bne.n	8003772 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	621a      	str	r2, [r3, #32]
}
 800378c:	bf00      	nop
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	40012c00 	.word	0x40012c00
 800379c:	40013400 	.word	0x40013400
 80037a0:	40015000 	.word	0x40015000
 80037a4:	40014000 	.word	0x40014000
 80037a8:	40014400 	.word	0x40014400
 80037ac:	40014800 	.word	0x40014800

080037b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	031b      	lsls	r3, r3, #12
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a2c      	ldr	r2, [pc, #176]	@ (80038c0 <TIM_OC4_SetConfig+0x110>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d007      	beq.n	8003824 <TIM_OC4_SetConfig+0x74>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a2b      	ldr	r2, [pc, #172]	@ (80038c4 <TIM_OC4_SetConfig+0x114>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d003      	beq.n	8003824 <TIM_OC4_SetConfig+0x74>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a2a      	ldr	r2, [pc, #168]	@ (80038c8 <TIM_OC4_SetConfig+0x118>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d10d      	bne.n	8003840 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800382a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	031b      	lsls	r3, r3, #12
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4313      	orrs	r3, r2
 8003836:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800383e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a1f      	ldr	r2, [pc, #124]	@ (80038c0 <TIM_OC4_SetConfig+0x110>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d013      	beq.n	8003870 <TIM_OC4_SetConfig+0xc0>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a1e      	ldr	r2, [pc, #120]	@ (80038c4 <TIM_OC4_SetConfig+0x114>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00f      	beq.n	8003870 <TIM_OC4_SetConfig+0xc0>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a1e      	ldr	r2, [pc, #120]	@ (80038cc <TIM_OC4_SetConfig+0x11c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00b      	beq.n	8003870 <TIM_OC4_SetConfig+0xc0>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a1d      	ldr	r2, [pc, #116]	@ (80038d0 <TIM_OC4_SetConfig+0x120>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d007      	beq.n	8003870 <TIM_OC4_SetConfig+0xc0>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a1c      	ldr	r2, [pc, #112]	@ (80038d4 <TIM_OC4_SetConfig+0x124>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d003      	beq.n	8003870 <TIM_OC4_SetConfig+0xc0>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a17      	ldr	r2, [pc, #92]	@ (80038c8 <TIM_OC4_SetConfig+0x118>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d113      	bne.n	8003898 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003876:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800387e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	019b      	lsls	r3, r3, #6
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4313      	orrs	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	019b      	lsls	r3, r3, #6
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	621a      	str	r2, [r3, #32]
}
 80038b2:	bf00      	nop
 80038b4:	371c      	adds	r7, #28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40012c00 	.word	0x40012c00
 80038c4:	40013400 	.word	0x40013400
 80038c8:	40015000 	.word	0x40015000
 80038cc:	40014000 	.word	0x40014000
 80038d0:	40014400 	.word	0x40014400
 80038d4:	40014800 	.word	0x40014800

080038d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800390a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800391c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	041b      	lsls	r3, r3, #16
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a19      	ldr	r2, [pc, #100]	@ (8003994 <TIM_OC5_SetConfig+0xbc>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d013      	beq.n	800395a <TIM_OC5_SetConfig+0x82>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a18      	ldr	r2, [pc, #96]	@ (8003998 <TIM_OC5_SetConfig+0xc0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00f      	beq.n	800395a <TIM_OC5_SetConfig+0x82>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a17      	ldr	r2, [pc, #92]	@ (800399c <TIM_OC5_SetConfig+0xc4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00b      	beq.n	800395a <TIM_OC5_SetConfig+0x82>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a16      	ldr	r2, [pc, #88]	@ (80039a0 <TIM_OC5_SetConfig+0xc8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d007      	beq.n	800395a <TIM_OC5_SetConfig+0x82>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a15      	ldr	r2, [pc, #84]	@ (80039a4 <TIM_OC5_SetConfig+0xcc>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d003      	beq.n	800395a <TIM_OC5_SetConfig+0x82>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a14      	ldr	r2, [pc, #80]	@ (80039a8 <TIM_OC5_SetConfig+0xd0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d109      	bne.n	800396e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003960:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	621a      	str	r2, [r3, #32]
}
 8003988:	bf00      	nop
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	40012c00 	.word	0x40012c00
 8003998:	40013400 	.word	0x40013400
 800399c:	40014000 	.word	0x40014000
 80039a0:	40014400 	.word	0x40014400
 80039a4:	40014800 	.word	0x40014800
 80039a8:	40015000 	.word	0x40015000

080039ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	021b      	lsls	r3, r3, #8
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80039f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	051b      	lsls	r3, r3, #20
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a1a      	ldr	r2, [pc, #104]	@ (8003a6c <TIM_OC6_SetConfig+0xc0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d013      	beq.n	8003a30 <TIM_OC6_SetConfig+0x84>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a19      	ldr	r2, [pc, #100]	@ (8003a70 <TIM_OC6_SetConfig+0xc4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00f      	beq.n	8003a30 <TIM_OC6_SetConfig+0x84>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a18      	ldr	r2, [pc, #96]	@ (8003a74 <TIM_OC6_SetConfig+0xc8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00b      	beq.n	8003a30 <TIM_OC6_SetConfig+0x84>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a17      	ldr	r2, [pc, #92]	@ (8003a78 <TIM_OC6_SetConfig+0xcc>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d007      	beq.n	8003a30 <TIM_OC6_SetConfig+0x84>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a16      	ldr	r2, [pc, #88]	@ (8003a7c <TIM_OC6_SetConfig+0xd0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d003      	beq.n	8003a30 <TIM_OC6_SetConfig+0x84>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a15      	ldr	r2, [pc, #84]	@ (8003a80 <TIM_OC6_SetConfig+0xd4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d109      	bne.n	8003a44 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	029b      	lsls	r3, r3, #10
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	621a      	str	r2, [r3, #32]
}
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40012c00 	.word	0x40012c00
 8003a70:	40013400 	.word	0x40013400
 8003a74:	40014000 	.word	0x40014000
 8003a78:	40014400 	.word	0x40014400
 8003a7c:	40014800 	.word	0x40014800
 8003a80:	40015000 	.word	0x40015000

08003a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f003 031f 	and.w	r3, r3, #31
 8003a96:	2201      	movs	r2, #1
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a1a      	ldr	r2, [r3, #32]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a1a      	ldr	r2, [r3, #32]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f003 031f 	and.w	r3, r3, #31
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8003abc:	431a      	orrs	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	621a      	str	r2, [r3, #32]
}
 8003ac2:	bf00      	nop
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e074      	b.n	8003bd2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a34      	ldr	r2, [pc, #208]	@ (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d009      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a33      	ldr	r2, [pc, #204]	@ (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d004      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a31      	ldr	r2, [pc, #196]	@ (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d108      	bne.n	8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003b2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a21      	ldr	r2, [pc, #132]	@ (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d022      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b68:	d01d      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8003bec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d018      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1d      	ldr	r2, [pc, #116]	@ (8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d013      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a1c      	ldr	r2, [pc, #112]	@ (8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00e      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a15      	ldr	r2, [pc, #84]	@ (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d009      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a18      	ldr	r2, [pc, #96]	@ (8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d004      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a11      	ldr	r2, [pc, #68]	@ (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40012c00 	.word	0x40012c00
 8003be4:	40013400 	.word	0x40013400
 8003be8:	40015000 	.word	0x40015000
 8003bec:	40000400 	.word	0x40000400
 8003bf0:	40000800 	.word	0x40000800
 8003bf4:	40000c00 	.word	0x40000c00
 8003bf8:	40014000 	.word	0x40014000

08003bfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e042      	b.n	8003c94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d106      	bne.n	8003c26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7fd fb2b 	bl	800127c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2224      	movs	r2, #36	@ 0x24
 8003c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0201 	bic.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fb24 	bl	8004294 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f825 	bl	8003c9c <UART_SetConfig>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e01b      	b.n	8003c94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0201 	orr.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fba3 	bl	80043d8 <UART_CheckIdleState>
 8003c92:	4603      	mov	r3, r0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca0:	b08c      	sub	sp, #48	@ 0x30
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4baa      	ldr	r3, [pc, #680]	@ (8003f74 <UART_SetConfig+0x2d8>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	6812      	ldr	r2, [r2, #0]
 8003cd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a9f      	ldr	r2, [pc, #636]	@ (8003f78 <UART_SetConfig+0x2dc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d004      	beq.n	8003d08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d04:	4313      	orrs	r3, r2
 8003d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003d12:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d26:	f023 010f 	bic.w	r1, r3, #15
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a90      	ldr	r2, [pc, #576]	@ (8003f7c <UART_SetConfig+0x2e0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d125      	bne.n	8003d8c <UART_SetConfig+0xf0>
 8003d40:	4b8f      	ldr	r3, [pc, #572]	@ (8003f80 <UART_SetConfig+0x2e4>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	d81a      	bhi.n	8003d84 <UART_SetConfig+0xe8>
 8003d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d54 <UART_SetConfig+0xb8>)
 8003d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d54:	08003d65 	.word	0x08003d65
 8003d58:	08003d75 	.word	0x08003d75
 8003d5c:	08003d6d 	.word	0x08003d6d
 8003d60:	08003d7d 	.word	0x08003d7d
 8003d64:	2301      	movs	r3, #1
 8003d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d6a:	e116      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d72:	e112      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003d74:	2304      	movs	r3, #4
 8003d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d7a:	e10e      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003d7c:	2308      	movs	r3, #8
 8003d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d82:	e10a      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003d84:	2310      	movs	r3, #16
 8003d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d8a:	e106      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a7c      	ldr	r2, [pc, #496]	@ (8003f84 <UART_SetConfig+0x2e8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d138      	bne.n	8003e08 <UART_SetConfig+0x16c>
 8003d96:	4b7a      	ldr	r3, [pc, #488]	@ (8003f80 <UART_SetConfig+0x2e4>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9c:	f003 030c 	and.w	r3, r3, #12
 8003da0:	2b0c      	cmp	r3, #12
 8003da2:	d82d      	bhi.n	8003e00 <UART_SetConfig+0x164>
 8003da4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dac <UART_SetConfig+0x110>)
 8003da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003daa:	bf00      	nop
 8003dac:	08003de1 	.word	0x08003de1
 8003db0:	08003e01 	.word	0x08003e01
 8003db4:	08003e01 	.word	0x08003e01
 8003db8:	08003e01 	.word	0x08003e01
 8003dbc:	08003df1 	.word	0x08003df1
 8003dc0:	08003e01 	.word	0x08003e01
 8003dc4:	08003e01 	.word	0x08003e01
 8003dc8:	08003e01 	.word	0x08003e01
 8003dcc:	08003de9 	.word	0x08003de9
 8003dd0:	08003e01 	.word	0x08003e01
 8003dd4:	08003e01 	.word	0x08003e01
 8003dd8:	08003e01 	.word	0x08003e01
 8003ddc:	08003df9 	.word	0x08003df9
 8003de0:	2300      	movs	r3, #0
 8003de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003de6:	e0d8      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003de8:	2302      	movs	r3, #2
 8003dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dee:	e0d4      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003df0:	2304      	movs	r3, #4
 8003df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003df6:	e0d0      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003df8:	2308      	movs	r3, #8
 8003dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dfe:	e0cc      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003e00:	2310      	movs	r3, #16
 8003e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e06:	e0c8      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a5e      	ldr	r2, [pc, #376]	@ (8003f88 <UART_SetConfig+0x2ec>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d125      	bne.n	8003e5e <UART_SetConfig+0x1c2>
 8003e12:	4b5b      	ldr	r3, [pc, #364]	@ (8003f80 <UART_SetConfig+0x2e4>)
 8003e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e18:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e1c:	2b30      	cmp	r3, #48	@ 0x30
 8003e1e:	d016      	beq.n	8003e4e <UART_SetConfig+0x1b2>
 8003e20:	2b30      	cmp	r3, #48	@ 0x30
 8003e22:	d818      	bhi.n	8003e56 <UART_SetConfig+0x1ba>
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d00a      	beq.n	8003e3e <UART_SetConfig+0x1a2>
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	d814      	bhi.n	8003e56 <UART_SetConfig+0x1ba>
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <UART_SetConfig+0x19a>
 8003e30:	2b10      	cmp	r3, #16
 8003e32:	d008      	beq.n	8003e46 <UART_SetConfig+0x1aa>
 8003e34:	e00f      	b.n	8003e56 <UART_SetConfig+0x1ba>
 8003e36:	2300      	movs	r3, #0
 8003e38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e3c:	e0ad      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e44:	e0a9      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003e46:	2304      	movs	r3, #4
 8003e48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e4c:	e0a5      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003e4e:	2308      	movs	r3, #8
 8003e50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e54:	e0a1      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003e56:	2310      	movs	r3, #16
 8003e58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e5c:	e09d      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a4a      	ldr	r2, [pc, #296]	@ (8003f8c <UART_SetConfig+0x2f0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d125      	bne.n	8003eb4 <UART_SetConfig+0x218>
 8003e68:	4b45      	ldr	r3, [pc, #276]	@ (8003f80 <UART_SetConfig+0x2e4>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003e72:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e74:	d016      	beq.n	8003ea4 <UART_SetConfig+0x208>
 8003e76:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e78:	d818      	bhi.n	8003eac <UART_SetConfig+0x210>
 8003e7a:	2b80      	cmp	r3, #128	@ 0x80
 8003e7c:	d00a      	beq.n	8003e94 <UART_SetConfig+0x1f8>
 8003e7e:	2b80      	cmp	r3, #128	@ 0x80
 8003e80:	d814      	bhi.n	8003eac <UART_SetConfig+0x210>
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <UART_SetConfig+0x1f0>
 8003e86:	2b40      	cmp	r3, #64	@ 0x40
 8003e88:	d008      	beq.n	8003e9c <UART_SetConfig+0x200>
 8003e8a:	e00f      	b.n	8003eac <UART_SetConfig+0x210>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e92:	e082      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003e94:	2302      	movs	r3, #2
 8003e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e9a:	e07e      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003e9c:	2304      	movs	r3, #4
 8003e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ea2:	e07a      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003ea4:	2308      	movs	r3, #8
 8003ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eaa:	e076      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003eac:	2310      	movs	r3, #16
 8003eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eb2:	e072      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a35      	ldr	r2, [pc, #212]	@ (8003f90 <UART_SetConfig+0x2f4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d12a      	bne.n	8003f14 <UART_SetConfig+0x278>
 8003ebe:	4b30      	ldr	r3, [pc, #192]	@ (8003f80 <UART_SetConfig+0x2e4>)
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ec8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ecc:	d01a      	beq.n	8003f04 <UART_SetConfig+0x268>
 8003ece:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ed2:	d81b      	bhi.n	8003f0c <UART_SetConfig+0x270>
 8003ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ed8:	d00c      	beq.n	8003ef4 <UART_SetConfig+0x258>
 8003eda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ede:	d815      	bhi.n	8003f0c <UART_SetConfig+0x270>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <UART_SetConfig+0x250>
 8003ee4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ee8:	d008      	beq.n	8003efc <UART_SetConfig+0x260>
 8003eea:	e00f      	b.n	8003f0c <UART_SetConfig+0x270>
 8003eec:	2300      	movs	r3, #0
 8003eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ef2:	e052      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003efa:	e04e      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003efc:	2304      	movs	r3, #4
 8003efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f02:	e04a      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003f04:	2308      	movs	r3, #8
 8003f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f0a:	e046      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f12:	e042      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a17      	ldr	r2, [pc, #92]	@ (8003f78 <UART_SetConfig+0x2dc>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d13a      	bne.n	8003f94 <UART_SetConfig+0x2f8>
 8003f1e:	4b18      	ldr	r3, [pc, #96]	@ (8003f80 <UART_SetConfig+0x2e4>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f2c:	d01a      	beq.n	8003f64 <UART_SetConfig+0x2c8>
 8003f2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f32:	d81b      	bhi.n	8003f6c <UART_SetConfig+0x2d0>
 8003f34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f38:	d00c      	beq.n	8003f54 <UART_SetConfig+0x2b8>
 8003f3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f3e:	d815      	bhi.n	8003f6c <UART_SetConfig+0x2d0>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <UART_SetConfig+0x2b0>
 8003f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f48:	d008      	beq.n	8003f5c <UART_SetConfig+0x2c0>
 8003f4a:	e00f      	b.n	8003f6c <UART_SetConfig+0x2d0>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f52:	e022      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003f54:	2302      	movs	r3, #2
 8003f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f5a:	e01e      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f62:	e01a      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003f64:	2308      	movs	r3, #8
 8003f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f6a:	e016      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003f6c:	2310      	movs	r3, #16
 8003f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f72:	e012      	b.n	8003f9a <UART_SetConfig+0x2fe>
 8003f74:	cfff69f3 	.word	0xcfff69f3
 8003f78:	40008000 	.word	0x40008000
 8003f7c:	40013800 	.word	0x40013800
 8003f80:	40021000 	.word	0x40021000
 8003f84:	40004400 	.word	0x40004400
 8003f88:	40004800 	.word	0x40004800
 8003f8c:	40004c00 	.word	0x40004c00
 8003f90:	40005000 	.word	0x40005000
 8003f94:	2310      	movs	r3, #16
 8003f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4aae      	ldr	r2, [pc, #696]	@ (8004258 <UART_SetConfig+0x5bc>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	f040 8097 	bne.w	80040d4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fa6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d823      	bhi.n	8003ff6 <UART_SetConfig+0x35a>
 8003fae:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb4 <UART_SetConfig+0x318>)
 8003fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb4:	08003fd9 	.word	0x08003fd9
 8003fb8:	08003ff7 	.word	0x08003ff7
 8003fbc:	08003fe1 	.word	0x08003fe1
 8003fc0:	08003ff7 	.word	0x08003ff7
 8003fc4:	08003fe7 	.word	0x08003fe7
 8003fc8:	08003ff7 	.word	0x08003ff7
 8003fcc:	08003ff7 	.word	0x08003ff7
 8003fd0:	08003ff7 	.word	0x08003ff7
 8003fd4:	08003fef 	.word	0x08003fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd8:	f7fe fa6c 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 8003fdc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fde:	e010      	b.n	8004002 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe0:	4b9e      	ldr	r3, [pc, #632]	@ (800425c <UART_SetConfig+0x5c0>)
 8003fe2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003fe4:	e00d      	b.n	8004002 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fe6:	f7fe f9f7 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 8003fea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fec:	e009      	b.n	8004002 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ff2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ff4:	e005      	b.n	8004002 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004000:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 8130 	beq.w	800426a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400e:	4a94      	ldr	r2, [pc, #592]	@ (8004260 <UART_SetConfig+0x5c4>)
 8004010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004014:	461a      	mov	r2, r3
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	fbb3 f3f2 	udiv	r3, r3, r2
 800401c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	4613      	mov	r3, r2
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	4413      	add	r3, r2
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	429a      	cmp	r2, r3
 800402c:	d305      	bcc.n	800403a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	429a      	cmp	r2, r3
 8004038:	d903      	bls.n	8004042 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004040:	e113      	b.n	800426a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004044:	2200      	movs	r2, #0
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	60fa      	str	r2, [r7, #12]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	4a84      	ldr	r2, [pc, #528]	@ (8004260 <UART_SetConfig+0x5c4>)
 8004050:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004054:	b29b      	uxth	r3, r3
 8004056:	2200      	movs	r2, #0
 8004058:	603b      	str	r3, [r7, #0]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004060:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004064:	f7fc f8d8 	bl	8000218 <__aeabi_uldivmod>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4610      	mov	r0, r2
 800406e:	4619      	mov	r1, r3
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	020b      	lsls	r3, r1, #8
 800407a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800407e:	0202      	lsls	r2, r0, #8
 8004080:	6979      	ldr	r1, [r7, #20]
 8004082:	6849      	ldr	r1, [r1, #4]
 8004084:	0849      	lsrs	r1, r1, #1
 8004086:	2000      	movs	r0, #0
 8004088:	460c      	mov	r4, r1
 800408a:	4605      	mov	r5, r0
 800408c:	eb12 0804 	adds.w	r8, r2, r4
 8004090:	eb43 0905 	adc.w	r9, r3, r5
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	469a      	mov	sl, r3
 800409c:	4693      	mov	fp, r2
 800409e:	4652      	mov	r2, sl
 80040a0:	465b      	mov	r3, fp
 80040a2:	4640      	mov	r0, r8
 80040a4:	4649      	mov	r1, r9
 80040a6:	f7fc f8b7 	bl	8000218 <__aeabi_uldivmod>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	4613      	mov	r3, r2
 80040b0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040b8:	d308      	bcc.n	80040cc <UART_SetConfig+0x430>
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040c0:	d204      	bcs.n	80040cc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6a3a      	ldr	r2, [r7, #32]
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	e0ce      	b.n	800426a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80040d2:	e0ca      	b.n	800426a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040dc:	d166      	bne.n	80041ac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80040de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d827      	bhi.n	8004136 <UART_SetConfig+0x49a>
 80040e6:	a201      	add	r2, pc, #4	@ (adr r2, 80040ec <UART_SetConfig+0x450>)
 80040e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ec:	08004111 	.word	0x08004111
 80040f0:	08004119 	.word	0x08004119
 80040f4:	08004121 	.word	0x08004121
 80040f8:	08004137 	.word	0x08004137
 80040fc:	08004127 	.word	0x08004127
 8004100:	08004137 	.word	0x08004137
 8004104:	08004137 	.word	0x08004137
 8004108:	08004137 	.word	0x08004137
 800410c:	0800412f 	.word	0x0800412f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004110:	f7fe f9d0 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 8004114:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004116:	e014      	b.n	8004142 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004118:	f7fe f9e2 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 800411c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800411e:	e010      	b.n	8004142 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004120:	4b4e      	ldr	r3, [pc, #312]	@ (800425c <UART_SetConfig+0x5c0>)
 8004122:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004124:	e00d      	b.n	8004142 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004126:	f7fe f957 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 800412a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800412c:	e009      	b.n	8004142 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800412e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004132:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004134:	e005      	b.n	8004142 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004140:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8090 	beq.w	800426a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414e:	4a44      	ldr	r2, [pc, #272]	@ (8004260 <UART_SetConfig+0x5c4>)
 8004150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004154:	461a      	mov	r2, r3
 8004156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004158:	fbb3 f3f2 	udiv	r3, r3, r2
 800415c:	005a      	lsls	r2, r3, #1
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	085b      	lsrs	r3, r3, #1
 8004164:	441a      	add	r2, r3
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	fbb2 f3f3 	udiv	r3, r2, r3
 800416e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	2b0f      	cmp	r3, #15
 8004174:	d916      	bls.n	80041a4 <UART_SetConfig+0x508>
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800417c:	d212      	bcs.n	80041a4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	b29b      	uxth	r3, r3
 8004182:	f023 030f 	bic.w	r3, r3, #15
 8004186:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	085b      	lsrs	r3, r3, #1
 800418c:	b29b      	uxth	r3, r3
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	b29a      	uxth	r2, r3
 8004194:	8bfb      	ldrh	r3, [r7, #30]
 8004196:	4313      	orrs	r3, r2
 8004198:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	8bfa      	ldrh	r2, [r7, #30]
 80041a0:	60da      	str	r2, [r3, #12]
 80041a2:	e062      	b.n	800426a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80041aa:	e05e      	b.n	800426a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d828      	bhi.n	8004206 <UART_SetConfig+0x56a>
 80041b4:	a201      	add	r2, pc, #4	@ (adr r2, 80041bc <UART_SetConfig+0x520>)
 80041b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ba:	bf00      	nop
 80041bc:	080041e1 	.word	0x080041e1
 80041c0:	080041e9 	.word	0x080041e9
 80041c4:	080041f1 	.word	0x080041f1
 80041c8:	08004207 	.word	0x08004207
 80041cc:	080041f7 	.word	0x080041f7
 80041d0:	08004207 	.word	0x08004207
 80041d4:	08004207 	.word	0x08004207
 80041d8:	08004207 	.word	0x08004207
 80041dc:	080041ff 	.word	0x080041ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041e0:	f7fe f968 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 80041e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041e6:	e014      	b.n	8004212 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041e8:	f7fe f97a 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 80041ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041ee:	e010      	b.n	8004212 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041f0:	4b1a      	ldr	r3, [pc, #104]	@ (800425c <UART_SetConfig+0x5c0>)
 80041f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041f4:	e00d      	b.n	8004212 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041f6:	f7fe f8ef 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 80041fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041fc:	e009      	b.n	8004212 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004202:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004204:	e005      	b.n	8004212 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004206:	2300      	movs	r3, #0
 8004208:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004210:	bf00      	nop
    }

    if (pclk != 0U)
 8004212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004214:	2b00      	cmp	r3, #0
 8004216:	d028      	beq.n	800426a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	4a10      	ldr	r2, [pc, #64]	@ (8004260 <UART_SetConfig+0x5c4>)
 800421e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004222:	461a      	mov	r2, r3
 8004224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004226:	fbb3 f2f2 	udiv	r2, r3, r2
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	085b      	lsrs	r3, r3, #1
 8004230:	441a      	add	r2, r3
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	fbb2 f3f3 	udiv	r3, r2, r3
 800423a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	2b0f      	cmp	r3, #15
 8004240:	d910      	bls.n	8004264 <UART_SetConfig+0x5c8>
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004248:	d20c      	bcs.n	8004264 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	b29a      	uxth	r2, r3
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60da      	str	r2, [r3, #12]
 8004254:	e009      	b.n	800426a <UART_SetConfig+0x5ce>
 8004256:	bf00      	nop
 8004258:	40008000 	.word	0x40008000
 800425c:	00f42400 	.word	0x00f42400
 8004260:	08004960 	.word	0x08004960
      }
      else
      {
        ret = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2201      	movs	r2, #1
 800426e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2201      	movs	r2, #1
 8004276:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2200      	movs	r2, #0
 800427e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2200      	movs	r2, #0
 8004284:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004286:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800428a:	4618      	mov	r0, r3
 800428c:	3730      	adds	r7, #48	@ 0x30
 800428e:	46bd      	mov	sp, r7
 8004290:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00a      	beq.n	80042be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00a      	beq.n	8004302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00a      	beq.n	8004346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00a      	beq.n	8004368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01a      	beq.n	80043aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004392:	d10a      	bne.n	80043aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	605a      	str	r2, [r3, #4]
  }
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b098      	sub	sp, #96	@ 0x60
 80043dc:	af02      	add	r7, sp, #8
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043e8:	f7fd f82e 	bl	8001448 <HAL_GetTick>
 80043ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d12f      	bne.n	800445c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004404:	2200      	movs	r2, #0
 8004406:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f88e 	bl	800452c <UART_WaitOnFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d022      	beq.n	800445c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800441e:	e853 3f00 	ldrex	r3, [r3]
 8004422:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004426:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800442a:	653b      	str	r3, [r7, #80]	@ 0x50
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004434:	647b      	str	r3, [r7, #68]	@ 0x44
 8004436:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004438:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800443a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800443c:	e841 2300 	strex	r3, r2, [r1]
 8004440:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1e6      	bne.n	8004416 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e063      	b.n	8004524 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b04      	cmp	r3, #4
 8004468:	d149      	bne.n	80044fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800446a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004472:	2200      	movs	r2, #0
 8004474:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f857 	bl	800452c <UART_WaitOnFlagUntilTimeout>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d03c      	beq.n	80044fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	623b      	str	r3, [r7, #32]
   return(result);
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004498:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80044a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1e6      	bne.n	8004484 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3308      	adds	r3, #8
 80044bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f023 0301 	bic.w	r3, r3, #1
 80044cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3308      	adds	r3, #8
 80044d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044d6:	61fa      	str	r2, [r7, #28]
 80044d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	69b9      	ldr	r1, [r7, #24]
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	617b      	str	r3, [r7, #20]
   return(result);
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e5      	bne.n	80044b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e012      	b.n	8004524 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3758      	adds	r7, #88	@ 0x58
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	4613      	mov	r3, r2
 800453a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800453c:	e04f      	b.n	80045de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004544:	d04b      	beq.n	80045de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004546:	f7fc ff7f 	bl	8001448 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	429a      	cmp	r2, r3
 8004554:	d302      	bcc.n	800455c <UART_WaitOnFlagUntilTimeout+0x30>
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e04e      	b.n	80045fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	d037      	beq.n	80045de <UART_WaitOnFlagUntilTimeout+0xb2>
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b80      	cmp	r3, #128	@ 0x80
 8004572:	d034      	beq.n	80045de <UART_WaitOnFlagUntilTimeout+0xb2>
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b40      	cmp	r3, #64	@ 0x40
 8004578:	d031      	beq.n	80045de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b08      	cmp	r3, #8
 8004586:	d110      	bne.n	80045aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2208      	movs	r2, #8
 800458e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 f838 	bl	8004606 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2208      	movs	r2, #8
 800459a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e029      	b.n	80045fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045b8:	d111      	bne.n	80045de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 f81e 	bl	8004606 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e00f      	b.n	80045fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69da      	ldr	r2, [r3, #28]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4013      	ands	r3, r2
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	bf0c      	ite	eq
 80045ee:	2301      	moveq	r3, #1
 80045f0:	2300      	movne	r3, #0
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	461a      	mov	r2, r3
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d0a0      	beq.n	800453e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004606:	b480      	push	{r7}
 8004608:	b095      	sub	sp, #84	@ 0x54
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800461c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004622:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800462c:	643b      	str	r3, [r7, #64]	@ 0x40
 800462e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004630:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004632:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004634:	e841 2300 	strex	r3, r2, [r1]
 8004638:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800463a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e6      	bne.n	800460e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3308      	adds	r3, #8
 8004646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	e853 3f00 	ldrex	r3, [r3]
 800464e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004656:	f023 0301 	bic.w	r3, r3, #1
 800465a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3308      	adds	r3, #8
 8004662:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004664:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004666:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004668:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800466a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800466c:	e841 2300 	strex	r3, r2, [r1]
 8004670:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1e3      	bne.n	8004640 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800467c:	2b01      	cmp	r3, #1
 800467e:	d118      	bne.n	80046b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	60bb      	str	r3, [r7, #8]
   return(result);
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f023 0310 	bic.w	r3, r3, #16
 8004694:	647b      	str	r3, [r7, #68]	@ 0x44
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	6979      	ldr	r1, [r7, #20]
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	613b      	str	r3, [r7, #16]
   return(result);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e6      	bne.n	8004680 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80046c6:	bf00      	nop
 80046c8:	3754      	adds	r7, #84	@ 0x54
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b085      	sub	sp, #20
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e027      	b.n	8004738 <HAL_UARTEx_DisableFifoMode+0x66>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2224      	movs	r2, #36	@ 0x24
 80046f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0201 	bic.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004716:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004758:	2302      	movs	r3, #2
 800475a:	e02d      	b.n	80047b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2224      	movs	r2, #36	@ 0x24
 8004768:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0201 	bic.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f84f 	bl	800483c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e02d      	b.n	8004834 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2224      	movs	r2, #36	@ 0x24
 80047e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0201 	bic.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f811 	bl	800483c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2220      	movs	r2, #32
 8004826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004848:	2b00      	cmp	r3, #0
 800484a:	d108      	bne.n	800485e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800485c:	e031      	b.n	80048c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800485e:	2308      	movs	r3, #8
 8004860:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004862:	2308      	movs	r3, #8
 8004864:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	0e5b      	lsrs	r3, r3, #25
 800486e:	b2db      	uxtb	r3, r3
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	0f5b      	lsrs	r3, r3, #29
 800487e:	b2db      	uxtb	r3, r3
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004886:	7bbb      	ldrb	r3, [r7, #14]
 8004888:	7b3a      	ldrb	r2, [r7, #12]
 800488a:	4911      	ldr	r1, [pc, #68]	@ (80048d0 <UARTEx_SetNbDataToProcess+0x94>)
 800488c:	5c8a      	ldrb	r2, [r1, r2]
 800488e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004892:	7b3a      	ldrb	r2, [r7, #12]
 8004894:	490f      	ldr	r1, [pc, #60]	@ (80048d4 <UARTEx_SetNbDataToProcess+0x98>)
 8004896:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004898:	fb93 f3f2 	sdiv	r3, r3, r2
 800489c:	b29a      	uxth	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	7b7a      	ldrb	r2, [r7, #13]
 80048a8:	4909      	ldr	r1, [pc, #36]	@ (80048d0 <UARTEx_SetNbDataToProcess+0x94>)
 80048aa:	5c8a      	ldrb	r2, [r1, r2]
 80048ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80048b0:	7b7a      	ldrb	r2, [r7, #13]
 80048b2:	4908      	ldr	r1, [pc, #32]	@ (80048d4 <UARTEx_SetNbDataToProcess+0x98>)
 80048b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80048c2:	bf00      	nop
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	08004978 	.word	0x08004978
 80048d4:	08004980 	.word	0x08004980

080048d8 <memset>:
 80048d8:	4402      	add	r2, r0
 80048da:	4603      	mov	r3, r0
 80048dc:	4293      	cmp	r3, r2
 80048de:	d100      	bne.n	80048e2 <memset+0xa>
 80048e0:	4770      	bx	lr
 80048e2:	f803 1b01 	strb.w	r1, [r3], #1
 80048e6:	e7f9      	b.n	80048dc <memset+0x4>

080048e8 <__libc_init_array>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004920 <__libc_init_array+0x38>)
 80048ec:	4c0d      	ldr	r4, [pc, #52]	@ (8004924 <__libc_init_array+0x3c>)
 80048ee:	1b64      	subs	r4, r4, r5
 80048f0:	10a4      	asrs	r4, r4, #2
 80048f2:	2600      	movs	r6, #0
 80048f4:	42a6      	cmp	r6, r4
 80048f6:	d109      	bne.n	800490c <__libc_init_array+0x24>
 80048f8:	4d0b      	ldr	r5, [pc, #44]	@ (8004928 <__libc_init_array+0x40>)
 80048fa:	4c0c      	ldr	r4, [pc, #48]	@ (800492c <__libc_init_array+0x44>)
 80048fc:	f000 f818 	bl	8004930 <_init>
 8004900:	1b64      	subs	r4, r4, r5
 8004902:	10a4      	asrs	r4, r4, #2
 8004904:	2600      	movs	r6, #0
 8004906:	42a6      	cmp	r6, r4
 8004908:	d105      	bne.n	8004916 <__libc_init_array+0x2e>
 800490a:	bd70      	pop	{r4, r5, r6, pc}
 800490c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004910:	4798      	blx	r3
 8004912:	3601      	adds	r6, #1
 8004914:	e7ee      	b.n	80048f4 <__libc_init_array+0xc>
 8004916:	f855 3b04 	ldr.w	r3, [r5], #4
 800491a:	4798      	blx	r3
 800491c:	3601      	adds	r6, #1
 800491e:	e7f2      	b.n	8004906 <__libc_init_array+0x1e>
 8004920:	08004990 	.word	0x08004990
 8004924:	08004990 	.word	0x08004990
 8004928:	08004990 	.word	0x08004990
 800492c:	08004994 	.word	0x08004994

08004930 <_init>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	bf00      	nop
 8004934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004936:	bc08      	pop	{r3}
 8004938:	469e      	mov	lr, r3
 800493a:	4770      	bx	lr

0800493c <_fini>:
 800493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493e:	bf00      	nop
 8004940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004942:	bc08      	pop	{r3}
 8004944:	469e      	mov	lr, r3
 8004946:	4770      	bx	lr
