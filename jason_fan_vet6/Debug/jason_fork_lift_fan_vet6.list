
jason_fork_lift_fan_vet6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043ac  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004534  08004534  00005534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800454c  0800454c  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  0800454c  0800454c  0000554c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004554  08004554  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004554  08004554  00005554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004558  08004558  00005558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800455c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000606c  2**0
                  CONTENTS
 10 .bss          000002a8  2000006c  2000006c  0000606c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000314  20000314  0000606c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d1b2  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e47  00000000  00000000  0001324e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c40  00000000  00000000  00015098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000994  00000000  00000000  00015cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002016a  00000000  00000000  0001666c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ed18  00000000  00000000  000367d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc3f0  00000000  00000000  000454ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001118de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033e4  00000000  00000000  00111924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00114d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800451c 	.word	0x0800451c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	0800451c 	.word	0x0800451c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a18:	f000 b96a 	b.w	8000cf0 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14e      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a40:	4694      	mov	ip, r2
 8000a42:	458c      	cmp	ip, r1
 8000a44:	4686      	mov	lr, r0
 8000a46:	fab2 f282 	clz	r2, r2
 8000a4a:	d962      	bls.n	8000b12 <__udivmoddi4+0xde>
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0320 	rsb	r3, r2, #32
 8000a52:	4091      	lsls	r1, r2
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a66:	fa1f f68c 	uxth.w	r6, ip
 8000a6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a72:	fb07 1114 	mls	r1, r7, r4, r1
 8000a76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7a:	fb04 f106 	mul.w	r1, r4, r6
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a8a:	f080 8112 	bcs.w	8000cb2 <__udivmoddi4+0x27e>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 810f 	bls.w	8000cb2 <__udivmoddi4+0x27e>
 8000a94:	3c02      	subs	r4, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a59      	subs	r1, r3, r1
 8000a9a:	fa1f f38e 	uxth.w	r3, lr
 8000a9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa2:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f606 	mul.w	r6, r0, r6
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000aba:	f080 80fc 	bcs.w	8000cb6 <__udivmoddi4+0x282>
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	f240 80f9 	bls.w	8000cb6 <__udivmoddi4+0x282>
 8000ac4:	4463      	add	r3, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1b9b      	subs	r3, r3, r6
 8000aca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e9c5 3200 	strd	r3, r2, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d905      	bls.n	8000aee <__udivmoddi4+0xba>
 8000ae2:	b10d      	cbz	r5, 8000ae8 <__udivmoddi4+0xb4>
 8000ae4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4608      	mov	r0, r1
 8000aec:	e7f5      	b.n	8000ada <__udivmoddi4+0xa6>
 8000aee:	fab3 f183 	clz	r1, r3
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d146      	bne.n	8000b84 <__udivmoddi4+0x150>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xcc>
 8000afa:	4290      	cmp	r0, r2
 8000afc:	f0c0 80f0 	bcc.w	8000ce0 <__udivmoddi4+0x2ac>
 8000b00:	1a86      	subs	r6, r0, r2
 8000b02:	eb64 0303 	sbc.w	r3, r4, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0e6      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b10:	e7e3      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 8090 	bne.w	8000c38 <__udivmoddi4+0x204>
 8000b18:	eba1 040c 	sub.w	r4, r1, ip
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	fa1f f78c 	uxth.w	r7, ip
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb07 f006 	mul.w	r0, r7, r6
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x11c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x11a>
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f200 80cd 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b4e:	4626      	mov	r6, r4
 8000b50:	1a1c      	subs	r4, r3, r0
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b62:	fb00 f707 	mul.w	r7, r0, r7
 8000b66:	429f      	cmp	r7, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x148>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x146>
 8000b74:	429f      	cmp	r7, r3
 8000b76:	f200 80b0 	bhi.w	8000cda <__udivmoddi4+0x2a6>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	1bdb      	subs	r3, r3, r7
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	e7a5      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b84:	f1c1 0620 	rsb	r6, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b94:	fa04 f301 	lsl.w	r3, r4, r1
 8000b98:	ea43 030c 	orr.w	r3, r3, ip
 8000b9c:	40f4      	lsrs	r4, r6
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	0c38      	lsrs	r0, r7, #16
 8000ba4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x1a6>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bca:	f080 8084 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bce:	45a1      	cmp	r9, r4
 8000bd0:	f240 8081 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	eba4 0409 	sub.w	r4, r4, r9
 8000bde:	fa1f f983 	uxth.w	r9, r3
 8000be2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x1d2>
 8000bf6:	193c      	adds	r4, r7, r4
 8000bf8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000bfc:	d267      	bcs.n	8000cce <__udivmoddi4+0x29a>
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0x29a>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	429c      	cmp	r4, r3
 8000c14:	46ce      	mov	lr, r9
 8000c16:	469c      	mov	ip, r3
 8000c18:	d351      	bcc.n	8000cbe <__udivmoddi4+0x28a>
 8000c1a:	d04e      	beq.n	8000cba <__udivmoddi4+0x286>
 8000c1c:	b155      	cbz	r5, 8000c34 <__udivmoddi4+0x200>
 8000c1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c22:	eb64 040c 	sbc.w	r4, r4, ip
 8000c26:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2a:	40cb      	lsrs	r3, r1
 8000c2c:	431e      	orrs	r6, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c5 6400 	strd	r6, r4, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e750      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	fa24 f303 	lsr.w	r3, r4, r3
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	430c      	orrs	r4, r1
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c54:	fa1f f78c 	uxth.w	r7, ip
 8000c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f107 	mul.w	r1, r0, r7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x24c>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c76:	d22c      	bcs.n	8000cd2 <__udivmoddi4+0x29e>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d92a      	bls.n	8000cd2 <__udivmoddi4+0x29e>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c88:	fb08 3311 	mls	r3, r8, r1, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb01 f307 	mul.w	r3, r1, r7
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x276>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ca0:	d213      	bcs.n	8000cca <__udivmoddi4+0x296>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d911      	bls.n	8000cca <__udivmoddi4+0x296>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb0:	e739      	b.n	8000b26 <__udivmoddi4+0xf2>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	e6f0      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e706      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cba:	45c8      	cmp	r8, r9
 8000cbc:	d2ae      	bcs.n	8000c1c <__udivmoddi4+0x1e8>
 8000cbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc6:	3801      	subs	r0, #1
 8000cc8:	e7a8      	b.n	8000c1c <__udivmoddi4+0x1e8>
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e7ed      	b.n	8000caa <__udivmoddi4+0x276>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e799      	b.n	8000c06 <__udivmoddi4+0x1d2>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e7d4      	b.n	8000c80 <__udivmoddi4+0x24c>
 8000cd6:	46d6      	mov	lr, sl
 8000cd8:	e77f      	b.n	8000bda <__udivmoddi4+0x1a6>
 8000cda:	4463      	add	r3, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e74d      	b.n	8000b7c <__udivmoddi4+0x148>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e70f      	b.n	8000b08 <__udivmoddi4+0xd4>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	e730      	b.n	8000b50 <__udivmoddi4+0x11c>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	0000      	movs	r0, r0
	...

08000cf8 <update_encoder>:
  encoder->displacement = 0;
  encoder->velocity = 0;
  encoder->last_counter_value = 0;
}

void update_encoder(EncoderData* encoder) {
 8000cf8:	b5b0      	push	{r4, r5, r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  int current_counter = __HAL_TIM_GET_COUNTER(encoder->htim);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	691b      	ldr	r3, [r3, #16]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d08:	613b      	str	r3, [r7, #16]
  uint32_t duration = HAL_GetTick() - encoder->last_tick;
 8000d0a:	f001 f9a1 	bl	8002050 <HAL_GetTick>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	60fb      	str	r3, [r7, #12]
  int num_pulse = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  if (duration <= 1)  // delay for encode to update, in ms
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	f240 8095 	bls.w	8000e4e <update_encoder+0x156>
    return;

  if (current_counter == encoder->last_counter_value) {
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d102      	bne.n	8000d34 <update_encoder+0x3c>
    num_pulse = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e035      	b.n	8000da0 <update_encoder+0xa8>
  } else if (current_counter > encoder->last_counter_value) {
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	dd18      	ble.n	8000d70 <update_encoder+0x78>
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move backward, count down, overflow
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0310 	and.w	r3, r3, #16
 8000d4a:	2b10      	cmp	r3, #16
 8000d4c:	d10a      	bne.n	8000d64 <update_encoder+0x6c>
      num_pulse = (__HAL_TIM_GET_AUTORELOAD(encoder->htim) - current_counter + encoder->last_counter_value) * -1;
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	6892      	ldr	r2, [r2, #8]
 8000d5e:	1a9b      	subs	r3, r3, r2
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	e01d      	b.n	8000da0 <update_encoder+0xa8>
    } else {  // move forward, count up, no overflow
      num_pulse = current_counter - encoder->last_counter_value;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	e017      	b.n	8000da0 <update_encoder+0xa8>
    }
  } else {
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move up, count up, overflow
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	691b      	ldr	r3, [r3, #16]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0310 	and.w	r3, r3, #16
 8000d7c:	2b10      	cmp	r3, #16
 8000d7e:	d105      	bne.n	8000d8c <update_encoder+0x94>
      num_pulse = (encoder->last_counter_value - current_counter) * -1;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	e009      	b.n	8000da0 <update_encoder+0xa8>
    } else {  // move backward, count down, no overflow
      num_pulse = __HAL_TIM_GET_AUTORELOAD(encoder->htim) - encoder->last_counter_value + current_counter;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	691b      	ldr	r3, [r3, #16]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	6892      	ldr	r2, [r2, #8]
 8000d98:	1a9a      	subs	r2, r3, r2
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	617b      	str	r3, [r7, #20]
    }
  }

  float temp_displacement = (float)num_pulse / encoder->_ppr * 2.0 * M_PI;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	ee07 3a90 	vmov	s15, r3
 8000da6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	8a9b      	ldrh	r3, [r3, #20]
 8000dae:	ee07 3a90 	vmov	s15, r3
 8000db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000db6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000dba:	ee16 0a90 	vmov	r0, s13
 8000dbe:	f7ff fb67 	bl	8000490 <__aeabi_f2d>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	f7ff fa05 	bl	80001d4 <__adddf3>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	4610      	mov	r0, r2
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	a322      	add	r3, pc, #136	@ (adr r3, 8000e5c <update_encoder+0x164>)
 8000dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd8:	f7ff fbb2 	bl	8000540 <__aeabi_dmul>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4610      	mov	r0, r2
 8000de2:	4619      	mov	r1, r3
 8000de4:	f7ff fdbe 	bl	8000964 <__aeabi_d2f>
 8000de8:	4603      	mov	r3, r0
 8000dea:	60bb      	str	r3, [r7, #8]
  encoder->last_counter_value = current_counter;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	609a      	str	r2, [r3, #8]
  encoder->displacement += temp_displacement;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	ed93 7a00 	vldr	s14, [r3]
 8000df8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	edc3 7a00 	vstr	s15, [r3]
  encoder->velocity = temp_displacement * 1000.0 / duration;
 8000e06:	68b8      	ldr	r0, [r7, #8]
 8000e08:	f7ff fb42 	bl	8000490 <__aeabi_f2d>
 8000e0c:	f04f 0200 	mov.w	r2, #0
 8000e10:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <update_encoder+0x160>)
 8000e12:	f7ff fb95 	bl	8000540 <__aeabi_dmul>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	4614      	mov	r4, r2
 8000e1c:	461d      	mov	r5, r3
 8000e1e:	68f8      	ldr	r0, [r7, #12]
 8000e20:	f7ff fb14 	bl	800044c <__aeabi_ui2d>
 8000e24:	4602      	mov	r2, r0
 8000e26:	460b      	mov	r3, r1
 8000e28:	4620      	mov	r0, r4
 8000e2a:	4629      	mov	r1, r5
 8000e2c:	f7ff fcb2 	bl	8000794 <__aeabi_ddiv>
 8000e30:	4602      	mov	r2, r0
 8000e32:	460b      	mov	r3, r1
 8000e34:	4610      	mov	r0, r2
 8000e36:	4619      	mov	r1, r3
 8000e38:	f7ff fd94 	bl	8000964 <__aeabi_d2f>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	605a      	str	r2, [r3, #4]
  encoder->last_tick = HAL_GetTick();
 8000e42:	f001 f905 	bl	8002050 <HAL_GetTick>
 8000e46:	4602      	mov	r2, r0
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	e000      	b.n	8000e50 <update_encoder+0x158>
    return;
 8000e4e:	bf00      	nop
}
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bdb0      	pop	{r4, r5, r7, pc}
 8000e56:	bf00      	nop
 8000e58:	408f4000 	.word	0x408f4000
 8000e5c:	54442d18 	.word	0x54442d18
 8000e60:	400921fb 	.word	0x400921fb

08000e64 <read_current_velocity>:

WheelVelocity read_current_velocity(EncoderData* encoders) {
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b095      	sub	sp, #84	@ 0x54
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6178      	str	r0, [r7, #20]
  if (encoders == NULL)
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d107      	bne.n	8000e82 <read_current_velocity+0x1e>
    return (WheelVelocity){0, 0, 0, 0};
 8000e72:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	e030      	b.n	8000ee4 <read_current_velocity+0x80>

  WheelVelocity velocities = {.front_left = 0, .front_right = 0, .rear_left = 0, .rear_right = 0};
 8000e82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 8000e90:	2300      	movs	r3, #0
 8000e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000e94:	e00d      	b.n	8000eb2 <read_current_velocity+0x4e>
    update_encoder(&(encoders[i]));
 8000e96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff26 	bl	8000cf8 <update_encoder>
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 8000eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000eae:	3301      	adds	r3, #1
 8000eb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000eb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000eb4:	2b03      	cmp	r3, #3
 8000eb6:	ddee      	ble.n	8000e96 <read_current_velocity+0x32>

  velocities.front_left = encoders[FRONT_LEFT].velocity;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  velocities.front_right = encoders[FRONT_RIGHT].velocity;
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3318      	adds	r3, #24
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	633b      	str	r3, [r7, #48]	@ 0x30
  velocities.rear_left = encoders[REAR_LEFT].velocity;
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3330      	adds	r3, #48	@ 0x30
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	637b      	str	r3, [r7, #52]	@ 0x34
  velocities.rear_right = encoders[REAR_RIGHT].velocity;
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3348      	adds	r3, #72	@ 0x48
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	63bb      	str	r3, [r7, #56]	@ 0x38

  return velocities;
 8000ed6:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000eda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ee4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000ee6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000ee8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000eea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000eec:	ee06 0a10 	vmov	s12, r0
 8000ef0:	ee06 1a90 	vmov	s13, r1
 8000ef4:	ee07 2a10 	vmov	s14, r2
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eeb0 0a46 	vmov.f32	s0, s12
 8000f00:	eef0 0a66 	vmov.f32	s1, s13
 8000f04:	eeb0 1a47 	vmov.f32	s2, s14
 8000f08:	eef0 1a67 	vmov.f32	s3, s15
 8000f0c:	3754      	adds	r7, #84	@ 0x54
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd90      	pop	{r4, r7, pc}
	...

08000f14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	@ 0x30
 8000f18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
 8000f2e:	4b53      	ldr	r3, [pc, #332]	@ (800107c <MX_GPIO_Init+0x168>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a52      	ldr	r2, [pc, #328]	@ (800107c <MX_GPIO_Init+0x168>)
 8000f34:	f043 0310 	orr.w	r3, r3, #16
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b50      	ldr	r3, [pc, #320]	@ (800107c <MX_GPIO_Init+0x168>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0310 	and.w	r3, r3, #16
 8000f42:	61bb      	str	r3, [r7, #24]
 8000f44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	4b4c      	ldr	r3, [pc, #304]	@ (800107c <MX_GPIO_Init+0x168>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4a4b      	ldr	r2, [pc, #300]	@ (800107c <MX_GPIO_Init+0x168>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4b49      	ldr	r3, [pc, #292]	@ (800107c <MX_GPIO_Init+0x168>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b45      	ldr	r3, [pc, #276]	@ (800107c <MX_GPIO_Init+0x168>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4a44      	ldr	r2, [pc, #272]	@ (800107c <MX_GPIO_Init+0x168>)
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f72:	4b42      	ldr	r3, [pc, #264]	@ (800107c <MX_GPIO_Init+0x168>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b3e      	ldr	r3, [pc, #248]	@ (800107c <MX_GPIO_Init+0x168>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a3d      	ldr	r2, [pc, #244]	@ (800107c <MX_GPIO_Init+0x168>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800107c <MX_GPIO_Init+0x168>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	4b37      	ldr	r3, [pc, #220]	@ (800107c <MX_GPIO_Init+0x168>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a36      	ldr	r2, [pc, #216]	@ (800107c <MX_GPIO_Init+0x168>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b34      	ldr	r3, [pc, #208]	@ (800107c <MX_GPIO_Init+0x168>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	4b30      	ldr	r3, [pc, #192]	@ (800107c <MX_GPIO_Init+0x168>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800107c <MX_GPIO_Init+0x168>)
 8000fc0:	f043 0308 	orr.w	r3, r3, #8
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	@ (800107c <MX_GPIO_Init+0x168>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0308 	and.w	r3, r3, #8
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2180      	movs	r1, #128	@ 0x80
 8000fd6:	482a      	ldr	r0, [pc, #168]	@ (8001080 <MX_GPIO_Init+0x16c>)
 8000fd8:	f001 faec 	bl	80025b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, C_IN2_Pin|D_IN1_Pin, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2130      	movs	r1, #48	@ 0x30
 8000fe0:	4828      	ldr	r0, [pc, #160]	@ (8001084 <MX_GPIO_Init+0x170>)
 8000fe2:	f001 fae7 	bl	80025b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_IN2_Pin|A_IN1_Pin|LED_4_Pin|LED_3_Pin
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f24f 0103 	movw	r1, #61443	@ 0xf003
 8000fec:	4826      	ldr	r0, [pc, #152]	@ (8001088 <MX_GPIO_Init+0x174>)
 8000fee:	f001 fae1 	bl	80025b4 <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, B_IN1_Pin|B_IN2_Pin|A_IN2_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 518c 	mov.w	r1, #4480	@ 0x1180
 8000ff8:	4824      	ldr	r0, [pc, #144]	@ (800108c <MX_GPIO_Init+0x178>)
 8000ffa:	f001 fadb 	bl	80025b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : C_IN1_Pin */
  GPIO_InitStruct.Pin = C_IN1_Pin;
 8000ffe:	2380      	movs	r3, #128	@ 0x80
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(C_IN1_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	481a      	ldr	r0, [pc, #104]	@ (8001080 <MX_GPIO_Init+0x16c>)
 8001016:	f001 f931 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pins : C_IN2_Pin D_IN1_Pin */
  GPIO_InitStruct.Pin = C_IN2_Pin|D_IN1_Pin;
 800101a:	2330      	movs	r3, #48	@ 0x30
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	4814      	ldr	r0, [pc, #80]	@ (8001084 <MX_GPIO_Init+0x170>)
 8001032:	f001 f923 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pins : D_IN2_Pin A_IN1_Pin LED_4_Pin LED_3_Pin
                           LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = D_IN2_Pin|A_IN1_Pin|LED_4_Pin|LED_3_Pin
 8001036:	f24f 0303 	movw	r3, #61443	@ 0xf003
 800103a:	61fb      	str	r3, [r7, #28]
                          |LED_2_Pin|LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	480e      	ldr	r0, [pc, #56]	@ (8001088 <MX_GPIO_Init+0x174>)
 8001050:	f001 f914 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pins : B_IN1_Pin B_IN2_Pin A_IN2_Pin */
  GPIO_InitStruct.Pin = B_IN1_Pin|B_IN2_Pin|A_IN2_Pin;
 8001054:	f44f 538c 	mov.w	r3, #4480	@ 0x1180
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	4807      	ldr	r0, [pc, #28]	@ (800108c <MX_GPIO_Init+0x178>)
 800106e:	f001 f905 	bl	800227c <HAL_GPIO_Init>

}
 8001072:	bf00      	nop
 8001074:	3730      	adds	r7, #48	@ 0x30
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40020000 	.word	0x40020000
 8001084:	40020800 	.word	0x40020800
 8001088:	40020400 	.word	0x40020400
 800108c:	40021000 	.word	0x40021000

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001094:	f000 ff76 	bl	8001f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001098:	f000 f89a 	bl	80011d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109c:	f7ff ff3a 	bl	8000f14 <MX_GPIO_Init>
  MX_TIM1_Init();
 80010a0:	f000 f96e 	bl	8001380 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010a4:	f000 f9c4 	bl	8001430 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010a8:	f000 fa58 	bl	800155c <MX_TIM3_Init>
  MX_TIM4_Init();
 80010ac:	f000 faee 	bl	800168c <MX_TIM4_Init>
  MX_TIM5_Init();
 80010b0:	f000 fb40 	bl	8001734 <MX_TIM5_Init>
  MX_TIM8_Init();
 80010b4:	f000 fb92 	bl	80017dc <MX_TIM8_Init>
  MX_UART4_Init();
 80010b8:	f000 fe66 	bl	8001d88 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80010bc:	f000 fe8e 	bl	8001ddc <MX_USART1_UART_Init>
  MX_TIM9_Init();
 80010c0:	f000 fbe4 	bl	800188c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010c4:	2100      	movs	r1, #0
 80010c6:	4837      	ldr	r0, [pc, #220]	@ (80011a4 <main+0x114>)
 80010c8:	f002 f800 	bl	80030cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80010cc:	2104      	movs	r1, #4
 80010ce:	4835      	ldr	r0, [pc, #212]	@ (80011a4 <main+0x114>)
 80010d0:	f001 fffc 	bl	80030cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80010d4:	2108      	movs	r1, #8
 80010d6:	4833      	ldr	r0, [pc, #204]	@ (80011a4 <main+0x114>)
 80010d8:	f001 fff8 	bl	80030cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80010dc:	210c      	movs	r1, #12
 80010de:	4831      	ldr	r0, [pc, #196]	@ (80011a4 <main+0x114>)
 80010e0:	f001 fff4 	bl	80030cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010e4:	2100      	movs	r1, #0
 80010e6:	4830      	ldr	r0, [pc, #192]	@ (80011a8 <main+0x118>)
 80010e8:	f001 fff0 	bl	80030cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80010ec:	2104      	movs	r1, #4
 80010ee:	482e      	ldr	r0, [pc, #184]	@ (80011a8 <main+0x118>)
 80010f0:	f001 ffec 	bl	80030cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80010f4:	2108      	movs	r1, #8
 80010f6:	482c      	ldr	r0, [pc, #176]	@ (80011a8 <main+0x118>)
 80010f8:	f001 ffe8 	bl	80030cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80010fc:	210c      	movs	r1, #12
 80010fe:	482a      	ldr	r0, [pc, #168]	@ (80011a8 <main+0x118>)
 8001100:	f001 ffe4 	bl	80030cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8001104:	2100      	movs	r1, #0
 8001106:	4829      	ldr	r0, [pc, #164]	@ (80011ac <main+0x11c>)
 8001108:	f001 ffe0 	bl	80030cc <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim1);
 800110c:	4828      	ldr	r0, [pc, #160]	@ (80011b0 <main+0x120>)
 800110e:	f001 ff13 	bl	8002f38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001112:	213c      	movs	r1, #60	@ 0x3c
 8001114:	4826      	ldr	r0, [pc, #152]	@ (80011b0 <main+0x120>)
 8001116:	f002 f947 	bl	80033a8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800111a:	4826      	ldr	r0, [pc, #152]	@ (80011b4 <main+0x124>)
 800111c:	f001 ff0c 	bl	8002f38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001120:	213c      	movs	r1, #60	@ 0x3c
 8001122:	4824      	ldr	r0, [pc, #144]	@ (80011b4 <main+0x124>)
 8001124:	f002 f940 	bl	80033a8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001128:	4823      	ldr	r0, [pc, #140]	@ (80011b8 <main+0x128>)
 800112a:	f001 ff05 	bl	8002f38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 800112e:	213c      	movs	r1, #60	@ 0x3c
 8001130:	4821      	ldr	r0, [pc, #132]	@ (80011b8 <main+0x128>)
 8001132:	f002 f939 	bl	80033a8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8001136:	4821      	ldr	r0, [pc, #132]	@ (80011bc <main+0x12c>)
 8001138:	f001 fefe 	bl	8002f38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 800113c:	213c      	movs	r1, #60	@ 0x3c
 800113e:	481f      	ldr	r0, [pc, #124]	@ (80011bc <main+0x12c>)
 8001140:	f002 f932 	bl	80033a8 <HAL_TIM_Encoder_Start_IT>

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800114a:	481d      	ldr	r0, [pc, #116]	@ (80011c0 <main+0x130>)
 800114c:	f001 fa32 	bl	80025b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001156:	481a      	ldr	r0, [pc, #104]	@ (80011c0 <main+0x130>)
 8001158:	f001 fa2c 	bl	80025b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001162:	4817      	ldr	r0, [pc, #92]	@ (80011c0 <main+0x130>)
 8001164:	f001 fa26 	bl	80025b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800116e:	4814      	ldr	r0, [pc, #80]	@ (80011c0 <main+0x130>)
 8001170:	f001 fa20 	bl	80025b4 <HAL_GPIO_WritePin>

  TIM3->CCR2 = 400; // FL
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <main+0x134>)
 8001176:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800117a:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3->CCR3 = 400; // RL
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <main+0x134>)
 800117e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001182:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM3->CCR4 = 400 + 220; // FR
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <main+0x134>)
 8001186:	f44f 721b 	mov.w	r2, #620	@ 0x26c
 800118a:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM9->CCR1 = 400 + 220; // RR
 800118c:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <main+0x138>)
 800118e:	f44f 721b 	mov.w	r2, #620	@ 0x26c
 8001192:	635a      	str	r2, [r3, #52]	@ 0x34
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 8001194:	2001      	movs	r0, #1
 8001196:	f000 ff67 	bl	8002068 <HAL_Delay>
    read_current_velocity(encoders);
 800119a:	480c      	ldr	r0, [pc, #48]	@ (80011cc <main+0x13c>)
 800119c:	f7ff fe62 	bl	8000e64 <read_current_velocity>
    HAL_Delay(1);
 80011a0:	bf00      	nop
 80011a2:	e7f7      	b.n	8001194 <main+0x104>
 80011a4:	20000118 	.word	0x20000118
 80011a8:	200000d0 	.word	0x200000d0
 80011ac:	20000238 	.word	0x20000238
 80011b0:	20000088 	.word	0x20000088
 80011b4:	20000160 	.word	0x20000160
 80011b8:	200001a8 	.word	0x200001a8
 80011bc:	200001f0 	.word	0x200001f0
 80011c0:	40020400 	.word	0x40020400
 80011c4:	40000400 	.word	0x40000400
 80011c8:	40014000 	.word	0x40014000
 80011cc:	20000000 	.word	0x20000000

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b094      	sub	sp, #80	@ 0x50
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	2230      	movs	r2, #48	@ 0x30
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f003 f970 	bl	80044c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	4b27      	ldr	r3, [pc, #156]	@ (8001298 <SystemClock_Config+0xc8>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fc:	4a26      	ldr	r2, [pc, #152]	@ (8001298 <SystemClock_Config+0xc8>)
 80011fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001202:	6413      	str	r3, [r2, #64]	@ 0x40
 8001204:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <SystemClock_Config+0xc8>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	4b21      	ldr	r3, [pc, #132]	@ (800129c <SystemClock_Config+0xcc>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a20      	ldr	r2, [pc, #128]	@ (800129c <SystemClock_Config+0xcc>)
 800121a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <SystemClock_Config+0xcc>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800122c:	2301      	movs	r3, #1
 800122e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001230:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001234:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001236:	2302      	movs	r3, #2
 8001238:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800123a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800123e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001240:	2319      	movs	r3, #25
 8001242:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001244:	23a8      	movs	r3, #168	@ 0xa8
 8001246:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001248:	2304      	movs	r3, #4
 800124a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800124c:	2304      	movs	r3, #4
 800124e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001250:	f107 0320 	add.w	r3, r7, #32
 8001254:	4618      	mov	r0, r3
 8001256:	f001 f9c7 	bl	80025e8 <HAL_RCC_OscConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001260:	f000 f81e 	bl	80012a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001264:	230f      	movs	r3, #15
 8001266:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001268:	2302      	movs	r3, #2
 800126a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	2101      	movs	r1, #1
 800127e:	4618      	mov	r0, r3
 8001280:	f001 fc2a 	bl	8002ad8 <HAL_RCC_ClockConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800128a:	f000 f809 	bl	80012a0 <Error_Handler>
  }
}
 800128e:	bf00      	nop
 8001290:	3750      	adds	r7, #80	@ 0x50
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	40007000 	.word	0x40007000

080012a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a4:	b672      	cpsid	i
}
 80012a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <Error_Handler+0x8>

080012ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <HAL_MspInit+0x4c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	4a0f      	ldr	r2, [pc, #60]	@ (80012f8 <HAL_MspInit+0x4c>)
 80012bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012c2:	4b0d      	ldr	r3, [pc, #52]	@ (80012f8 <HAL_MspInit+0x4c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <HAL_MspInit+0x4c>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	4a08      	ldr	r2, [pc, #32]	@ (80012f8 <HAL_MspInit+0x4c>)
 80012d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012de:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <HAL_MspInit+0x4c>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800

080012fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <NMI_Handler+0x4>

08001304 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <HardFault_Handler+0x4>

0800130c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <MemManage_Handler+0x4>

08001314 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <BusFault_Handler+0x4>

0800131c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <UsageFault_Handler+0x4>

08001324 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001352:	f000 fe69 	bl	8002028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001360:	4b06      	ldr	r3, [pc, #24]	@ (800137c <SystemInit+0x20>)
 8001362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001366:	4a05      	ldr	r2, [pc, #20]	@ (800137c <SystemInit+0x20>)
 8001368:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800136c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	@ 0x30
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2224      	movs	r2, #36	@ 0x24
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f003 f898 	bl	80044c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800139c:	4b22      	ldr	r3, [pc, #136]	@ (8001428 <MX_TIM1_Init+0xa8>)
 800139e:	4a23      	ldr	r2, [pc, #140]	@ (800142c <MX_TIM1_Init+0xac>)
 80013a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013a2:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <MX_TIM1_Init+0xa8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <MX_TIM1_Init+0xa8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001428 <MX_TIM1_Init+0xa8>)
 80013b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <MX_TIM1_Init+0xa8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <MX_TIM1_Init+0xa8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c2:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <MX_TIM1_Init+0xa8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013c8:	2303      	movs	r3, #3
 80013ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013d0:	2301      	movs	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80013d8:	2305      	movs	r3, #5
 80013da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013e0:	2301      	movs	r3, #1
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 80013e8:	2305      	movs	r3, #5
 80013ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	4619      	mov	r1, r3
 80013f2:	480d      	ldr	r0, [pc, #52]	@ (8001428 <MX_TIM1_Init+0xa8>)
 80013f4:	f001 ff32 	bl	800325c <HAL_TIM_Encoder_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80013fe:	f7ff ff4f 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	@ (8001428 <MX_TIM1_Init+0xa8>)
 8001410:	f002 fd18 	bl	8003e44 <HAL_TIMEx_MasterConfigSynchronization>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800141a:	f7ff ff41 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	3730      	adds	r7, #48	@ 0x30
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000088 	.word	0x20000088
 800142c:	40010000 	.word	0x40010000

08001430 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08e      	sub	sp, #56	@ 0x38
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001436:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001444:	f107 0320 	add.w	r3, r7, #32
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
 800145c:	615a      	str	r2, [r3, #20]
 800145e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001460:	4b3d      	ldr	r3, [pc, #244]	@ (8001558 <MX_TIM2_Init+0x128>)
 8001462:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001466:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 8001468:	4b3b      	ldr	r3, [pc, #236]	@ (8001558 <MX_TIM2_Init+0x128>)
 800146a:	2229      	movs	r2, #41	@ 0x29
 800146c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146e:	4b3a      	ldr	r3, [pc, #232]	@ (8001558 <MX_TIM2_Init+0x128>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001474:	4b38      	ldr	r3, [pc, #224]	@ (8001558 <MX_TIM2_Init+0x128>)
 8001476:	f242 720f 	movw	r2, #9999	@ 0x270f
 800147a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147c:	4b36      	ldr	r3, [pc, #216]	@ (8001558 <MX_TIM2_Init+0x128>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001482:	4b35      	ldr	r3, [pc, #212]	@ (8001558 <MX_TIM2_Init+0x128>)
 8001484:	2280      	movs	r2, #128	@ 0x80
 8001486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001488:	4833      	ldr	r0, [pc, #204]	@ (8001558 <MX_TIM2_Init+0x128>)
 800148a:	f001 fd05 	bl	8002e98 <HAL_TIM_Base_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001494:	f7ff ff04 	bl	80012a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001498:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800149c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800149e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014a2:	4619      	mov	r1, r3
 80014a4:	482c      	ldr	r0, [pc, #176]	@ (8001558 <MX_TIM2_Init+0x128>)
 80014a6:	f002 f8ef 	bl	8003688 <HAL_TIM_ConfigClockSource>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014b0:	f7ff fef6 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014b4:	4828      	ldr	r0, [pc, #160]	@ (8001558 <MX_TIM2_Init+0x128>)
 80014b6:	f001 fdaf 	bl	8003018 <HAL_TIM_PWM_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014c0:	f7ff feee 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014cc:	f107 0320 	add.w	r3, r7, #32
 80014d0:	4619      	mov	r1, r3
 80014d2:	4821      	ldr	r0, [pc, #132]	@ (8001558 <MX_TIM2_Init+0x128>)
 80014d4:	f002 fcb6 	bl	8003e44 <HAL_TIMEx_MasterConfigSynchronization>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80014de:	f7ff fedf 	bl	80012a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e2:	2360      	movs	r3, #96	@ 0x60
 80014e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2200      	movs	r2, #0
 80014f6:	4619      	mov	r1, r3
 80014f8:	4817      	ldr	r0, [pc, #92]	@ (8001558 <MX_TIM2_Init+0x128>)
 80014fa:	f002 f803 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001504:	f7ff fecc 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2204      	movs	r2, #4
 800150c:	4619      	mov	r1, r3
 800150e:	4812      	ldr	r0, [pc, #72]	@ (8001558 <MX_TIM2_Init+0x128>)
 8001510:	f001 fff8 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800151a:	f7ff fec1 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2208      	movs	r2, #8
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	@ (8001558 <MX_TIM2_Init+0x128>)
 8001526:	f001 ffed 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001530:	f7ff feb6 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	220c      	movs	r2, #12
 8001538:	4619      	mov	r1, r3
 800153a:	4807      	ldr	r0, [pc, #28]	@ (8001558 <MX_TIM2_Init+0x128>)
 800153c:	f001 ffe2 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001546:	f7ff feab 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800154a:	4803      	ldr	r0, [pc, #12]	@ (8001558 <MX_TIM2_Init+0x128>)
 800154c:	f000 fb38 	bl	8001bc0 <HAL_TIM_MspPostInit>

}
 8001550:	bf00      	nop
 8001552:	3738      	adds	r7, #56	@ 0x38
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200000d0 	.word	0x200000d0

0800155c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08e      	sub	sp, #56	@ 0x38
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001562:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001570:	f107 0320 	add.w	r3, r7, #32
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
 8001588:	615a      	str	r2, [r3, #20]
 800158a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800158c:	4b3d      	ldr	r3, [pc, #244]	@ (8001684 <MX_TIM3_Init+0x128>)
 800158e:	4a3e      	ldr	r2, [pc, #248]	@ (8001688 <MX_TIM3_Init+0x12c>)
 8001590:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 8001592:	4b3c      	ldr	r3, [pc, #240]	@ (8001684 <MX_TIM3_Init+0x128>)
 8001594:	2229      	movs	r2, #41	@ 0x29
 8001596:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001598:	4b3a      	ldr	r3, [pc, #232]	@ (8001684 <MX_TIM3_Init+0x128>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800159e:	4b39      	ldr	r3, [pc, #228]	@ (8001684 <MX_TIM3_Init+0x128>)
 80015a0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80015a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a6:	4b37      	ldr	r3, [pc, #220]	@ (8001684 <MX_TIM3_Init+0x128>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015ac:	4b35      	ldr	r3, [pc, #212]	@ (8001684 <MX_TIM3_Init+0x128>)
 80015ae:	2280      	movs	r2, #128	@ 0x80
 80015b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015b2:	4834      	ldr	r0, [pc, #208]	@ (8001684 <MX_TIM3_Init+0x128>)
 80015b4:	f001 fc70 	bl	8002e98 <HAL_TIM_Base_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80015be:	f7ff fe6f 	bl	80012a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015cc:	4619      	mov	r1, r3
 80015ce:	482d      	ldr	r0, [pc, #180]	@ (8001684 <MX_TIM3_Init+0x128>)
 80015d0:	f002 f85a 	bl	8003688 <HAL_TIM_ConfigClockSource>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80015da:	f7ff fe61 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015de:	4829      	ldr	r0, [pc, #164]	@ (8001684 <MX_TIM3_Init+0x128>)
 80015e0:	f001 fd1a 	bl	8003018 <HAL_TIM_PWM_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80015ea:	f7ff fe59 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015f6:	f107 0320 	add.w	r3, r7, #32
 80015fa:	4619      	mov	r1, r3
 80015fc:	4821      	ldr	r0, [pc, #132]	@ (8001684 <MX_TIM3_Init+0x128>)
 80015fe:	f002 fc21 	bl	8003e44 <HAL_TIMEx_MasterConfigSynchronization>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001608:	f7ff fe4a 	bl	80012a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800160c:	2360      	movs	r3, #96	@ 0x60
 800160e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2200      	movs	r2, #0
 8001620:	4619      	mov	r1, r3
 8001622:	4818      	ldr	r0, [pc, #96]	@ (8001684 <MX_TIM3_Init+0x128>)
 8001624:	f001 ff6e 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800162e:	f7ff fe37 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2204      	movs	r2, #4
 8001636:	4619      	mov	r1, r3
 8001638:	4812      	ldr	r0, [pc, #72]	@ (8001684 <MX_TIM3_Init+0x128>)
 800163a:	f001 ff63 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001644:	f7ff fe2c 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2208      	movs	r2, #8
 800164c:	4619      	mov	r1, r3
 800164e:	480d      	ldr	r0, [pc, #52]	@ (8001684 <MX_TIM3_Init+0x128>)
 8001650:	f001 ff58 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800165a:	f7ff fe21 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	220c      	movs	r2, #12
 8001662:	4619      	mov	r1, r3
 8001664:	4807      	ldr	r0, [pc, #28]	@ (8001684 <MX_TIM3_Init+0x128>)
 8001666:	f001 ff4d 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001670:	f7ff fe16 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001674:	4803      	ldr	r0, [pc, #12]	@ (8001684 <MX_TIM3_Init+0x128>)
 8001676:	f000 faa3 	bl	8001bc0 <HAL_TIM_MspPostInit>

}
 800167a:	bf00      	nop
 800167c:	3738      	adds	r7, #56	@ 0x38
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000118 	.word	0x20000118
 8001688:	40000400 	.word	0x40000400

0800168c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08c      	sub	sp, #48	@ 0x30
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	2224      	movs	r2, #36	@ 0x24
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f002 ff12 	bl	80044c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016a8:	4b20      	ldr	r3, [pc, #128]	@ (800172c <MX_TIM4_Init+0xa0>)
 80016aa:	4a21      	ldr	r2, [pc, #132]	@ (8001730 <MX_TIM4_Init+0xa4>)
 80016ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016ae:	4b1f      	ldr	r3, [pc, #124]	@ (800172c <MX_TIM4_Init+0xa0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b4:	4b1d      	ldr	r3, [pc, #116]	@ (800172c <MX_TIM4_Init+0xa0>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80016ba:	4b1c      	ldr	r3, [pc, #112]	@ (800172c <MX_TIM4_Init+0xa0>)
 80016bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c2:	4b1a      	ldr	r3, [pc, #104]	@ (800172c <MX_TIM4_Init+0xa0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c8:	4b18      	ldr	r3, [pc, #96]	@ (800172c <MX_TIM4_Init+0xa0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016ce:	2303      	movs	r3, #3
 80016d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016d6:	2301      	movs	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80016de:	2305      	movs	r3, #5
 80016e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016e6:	2301      	movs	r3, #1
 80016e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 80016ee:	2305      	movs	r3, #5
 80016f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	4619      	mov	r1, r3
 80016f8:	480c      	ldr	r0, [pc, #48]	@ (800172c <MX_TIM4_Init+0xa0>)
 80016fa:	f001 fdaf 	bl	800325c <HAL_TIM_Encoder_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001704:	f7ff fdcc 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	4619      	mov	r1, r3
 8001714:	4805      	ldr	r0, [pc, #20]	@ (800172c <MX_TIM4_Init+0xa0>)
 8001716:	f002 fb95 	bl	8003e44 <HAL_TIMEx_MasterConfigSynchronization>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001720:	f7ff fdbe 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001724:	bf00      	nop
 8001726:	3730      	adds	r7, #48	@ 0x30
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000160 	.word	0x20000160
 8001730:	40000800 	.word	0x40000800

08001734 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08c      	sub	sp, #48	@ 0x30
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	2224      	movs	r2, #36	@ 0x24
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f002 febe 	bl	80044c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001750:	4b20      	ldr	r3, [pc, #128]	@ (80017d4 <MX_TIM5_Init+0xa0>)
 8001752:	4a21      	ldr	r2, [pc, #132]	@ (80017d8 <MX_TIM5_Init+0xa4>)
 8001754:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001756:	4b1f      	ldr	r3, [pc, #124]	@ (80017d4 <MX_TIM5_Init+0xa0>)
 8001758:	2200      	movs	r2, #0
 800175a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175c:	4b1d      	ldr	r3, [pc, #116]	@ (80017d4 <MX_TIM5_Init+0xa0>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001762:	4b1c      	ldr	r3, [pc, #112]	@ (80017d4 <MX_TIM5_Init+0xa0>)
 8001764:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001768:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176a:	4b1a      	ldr	r3, [pc, #104]	@ (80017d4 <MX_TIM5_Init+0xa0>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001770:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <MX_TIM5_Init+0xa0>)
 8001772:	2200      	movs	r2, #0
 8001774:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001776:	2303      	movs	r3, #3
 8001778:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800177e:	2301      	movs	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8001786:	2305      	movs	r3, #5
 8001788:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800178e:	2301      	movs	r3, #1
 8001790:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001792:	2300      	movs	r3, #0
 8001794:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8001796:	2305      	movs	r3, #5
 8001798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	4619      	mov	r1, r3
 80017a0:	480c      	ldr	r0, [pc, #48]	@ (80017d4 <MX_TIM5_Init+0xa0>)
 80017a2:	f001 fd5b 	bl	800325c <HAL_TIM_Encoder_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80017ac:	f7ff fd78 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	4619      	mov	r1, r3
 80017bc:	4805      	ldr	r0, [pc, #20]	@ (80017d4 <MX_TIM5_Init+0xa0>)
 80017be:	f002 fb41 	bl	8003e44 <HAL_TIMEx_MasterConfigSynchronization>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80017c8:	f7ff fd6a 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	3730      	adds	r7, #48	@ 0x30
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	200001a8 	.word	0x200001a8
 80017d8:	40000c00 	.word	0x40000c00

080017dc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08c      	sub	sp, #48	@ 0x30
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	2224      	movs	r2, #36	@ 0x24
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 fe6a 	bl	80044c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017f8:	4b22      	ldr	r3, [pc, #136]	@ (8001884 <MX_TIM8_Init+0xa8>)
 80017fa:	4a23      	ldr	r2, [pc, #140]	@ (8001888 <MX_TIM8_Init+0xac>)
 80017fc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80017fe:	4b21      	ldr	r3, [pc, #132]	@ (8001884 <MX_TIM8_Init+0xa8>)
 8001800:	2200      	movs	r2, #0
 8001802:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001804:	4b1f      	ldr	r3, [pc, #124]	@ (8001884 <MX_TIM8_Init+0xa8>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800180a:	4b1e      	ldr	r3, [pc, #120]	@ (8001884 <MX_TIM8_Init+0xa8>)
 800180c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001810:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001812:	4b1c      	ldr	r3, [pc, #112]	@ (8001884 <MX_TIM8_Init+0xa8>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001818:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <MX_TIM8_Init+0xa8>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181e:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <MX_TIM8_Init+0xa8>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001824:	2303      	movs	r3, #3
 8001826:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800182c:	2301      	movs	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001830:	2300      	movs	r3, #0
 8001832:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800183c:	2301      	movs	r3, #1
 800183e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	4619      	mov	r1, r3
 800184e:	480d      	ldr	r0, [pc, #52]	@ (8001884 <MX_TIM8_Init+0xa8>)
 8001850:	f001 fd04 	bl	800325c <HAL_TIM_Encoder_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800185a:	f7ff fd21 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	4619      	mov	r1, r3
 800186a:	4806      	ldr	r0, [pc, #24]	@ (8001884 <MX_TIM8_Init+0xa8>)
 800186c:	f002 faea 	bl	8003e44 <HAL_TIMEx_MasterConfigSynchronization>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001876:	f7ff fd13 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	3730      	adds	r7, #48	@ 0x30
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200001f0 	.word	0x200001f0
 8001888:	40010400 	.word	0x40010400

0800188c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08c      	sub	sp, #48	@ 0x30
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001892:	f107 0320 	add.w	r3, r7, #32
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	611a      	str	r2, [r3, #16]
 80018ae:	615a      	str	r2, [r3, #20]
 80018b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80018b2:	4b25      	ldr	r3, [pc, #148]	@ (8001948 <MX_TIM9_Init+0xbc>)
 80018b4:	4a25      	ldr	r2, [pc, #148]	@ (800194c <MX_TIM9_Init+0xc0>)
 80018b6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 42-1;
 80018b8:	4b23      	ldr	r3, [pc, #140]	@ (8001948 <MX_TIM9_Init+0xbc>)
 80018ba:	2229      	movs	r2, #41	@ 0x29
 80018bc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018be:	4b22      	ldr	r3, [pc, #136]	@ (8001948 <MX_TIM9_Init+0xbc>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000-1;
 80018c4:	4b20      	ldr	r3, [pc, #128]	@ (8001948 <MX_TIM9_Init+0xbc>)
 80018c6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80018ca:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001948 <MX_TIM9_Init+0xbc>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <MX_TIM9_Init+0xbc>)
 80018d4:	2280      	movs	r2, #128	@ 0x80
 80018d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80018d8:	481b      	ldr	r0, [pc, #108]	@ (8001948 <MX_TIM9_Init+0xbc>)
 80018da:	f001 fadd 	bl	8002e98 <HAL_TIM_Base_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80018e4:	f7ff fcdc 	bl	80012a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80018ee:	f107 0320 	add.w	r3, r7, #32
 80018f2:	4619      	mov	r1, r3
 80018f4:	4814      	ldr	r0, [pc, #80]	@ (8001948 <MX_TIM9_Init+0xbc>)
 80018f6:	f001 fec7 	bl	8003688 <HAL_TIM_ConfigClockSource>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001900:	f7ff fcce 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001904:	4810      	ldr	r0, [pc, #64]	@ (8001948 <MX_TIM9_Init+0xbc>)
 8001906:	f001 fb87 	bl	8003018 <HAL_TIM_PWM_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001910:	f7ff fcc6 	bl	80012a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001914:	2360      	movs	r3, #96	@ 0x60
 8001916:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	2200      	movs	r2, #0
 8001928:	4619      	mov	r1, r3
 800192a:	4807      	ldr	r0, [pc, #28]	@ (8001948 <MX_TIM9_Init+0xbc>)
 800192c:	f001 fdea 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001936:	f7ff fcb3 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800193a:	4803      	ldr	r0, [pc, #12]	@ (8001948 <MX_TIM9_Init+0xbc>)
 800193c:	f000 f940 	bl	8001bc0 <HAL_TIM_MspPostInit>

}
 8001940:	bf00      	nop
 8001942:	3730      	adds	r7, #48	@ 0x30
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000238 	.word	0x20000238
 800194c:	40014000 	.word	0x40014000

08001950 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b090      	sub	sp, #64	@ 0x40
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a65      	ldr	r2, [pc, #404]	@ (8001b04 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d12d      	bne.n	80019ce <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001976:	4b64      	ldr	r3, [pc, #400]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	4a63      	ldr	r2, [pc, #396]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6453      	str	r3, [r2, #68]	@ 0x44
 8001982:	4b61      	ldr	r3, [pc, #388]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800198c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
 8001992:	4b5d      	ldr	r3, [pc, #372]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	4a5c      	ldr	r2, [pc, #368]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001998:	f043 0310 	orr.w	r3, r3, #16
 800199c:	6313      	str	r3, [r2, #48]	@ 0x30
 800199e:	4b5a      	ldr	r3, [pc, #360]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f003 0310 	and.w	r3, r3, #16
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80019a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80019aa:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80019ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019bc:	2301      	movs	r3, #1
 80019be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019c4:	4619      	mov	r1, r3
 80019c6:	4851      	ldr	r0, [pc, #324]	@ (8001b0c <HAL_TIM_Encoder_MspInit+0x1bc>)
 80019c8:	f000 fc58 	bl	800227c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80019cc:	e095      	b.n	8001afa <HAL_TIM_Encoder_MspInit+0x1aa>
  else if(tim_encoderHandle->Instance==TIM4)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a4f      	ldr	r2, [pc, #316]	@ (8001b10 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d12d      	bne.n	8001a34 <HAL_TIM_Encoder_MspInit+0xe4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
 80019dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	4a49      	ldr	r2, [pc, #292]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80019e2:	f043 0304 	orr.w	r3, r3, #4
 80019e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e8:	4b47      	ldr	r3, [pc, #284]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80019ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	623b      	str	r3, [r7, #32]
 80019f2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
 80019f8:	4b43      	ldr	r3, [pc, #268]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fc:	4a42      	ldr	r2, [pc, #264]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80019fe:	f043 0308 	orr.w	r3, r3, #8
 8001a02:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a04:	4b40      	ldr	r3, [pc, #256]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	61fb      	str	r3, [r7, #28]
 8001a0e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a10:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a22:	2302      	movs	r3, #2
 8001a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4839      	ldr	r0, [pc, #228]	@ (8001b14 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8001a2e:	f000 fc25 	bl	800227c <HAL_GPIO_Init>
}
 8001a32:	e062      	b.n	8001afa <HAL_TIM_Encoder_MspInit+0x1aa>
  else if(tim_encoderHandle->Instance==TIM5)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a37      	ldr	r2, [pc, #220]	@ (8001b18 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d12c      	bne.n	8001a98 <HAL_TIM_Encoder_MspInit+0x148>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	4b31      	ldr	r3, [pc, #196]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	4a30      	ldr	r2, [pc, #192]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001a48:	f043 0308 	orr.w	r3, r3, #8
 8001a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	61bb      	str	r3, [r7, #24]
 8001a58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	4a29      	ldr	r2, [pc, #164]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6a:	4b27      	ldr	r3, [pc, #156]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a76:	2303      	movs	r3, #3
 8001a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	2300      	movs	r3, #0
 8001a84:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a86:	2302      	movs	r3, #2
 8001a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4822      	ldr	r0, [pc, #136]	@ (8001b1c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001a92:	f000 fbf3 	bl	800227c <HAL_GPIO_Init>
}
 8001a96:	e030      	b.n	8001afa <HAL_TIM_Encoder_MspInit+0x1aa>
  else if(tim_encoderHandle->Instance==TIM8)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a20      	ldr	r2, [pc, #128]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d12b      	bne.n	8001afa <HAL_TIM_Encoder_MspInit+0x1aa>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b18      	ldr	r3, [pc, #96]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aaa:	4a17      	ldr	r2, [pc, #92]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab2:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	4a10      	ldr	r2, [pc, #64]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001ac8:	f043 0304 	orr.w	r3, r3, #4
 8001acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ace:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ada:	23c0      	movs	r3, #192	@ 0xc0
 8001adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001aea:	2303      	movs	r3, #3
 8001aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001af2:	4619      	mov	r1, r3
 8001af4:	480b      	ldr	r0, [pc, #44]	@ (8001b24 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001af6:	f000 fbc1 	bl	800227c <HAL_GPIO_Init>
}
 8001afa:	bf00      	nop
 8001afc:	3740      	adds	r7, #64	@ 0x40
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40010000 	.word	0x40010000
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40000800 	.word	0x40000800
 8001b14:	40020c00 	.word	0x40020c00
 8001b18:	40000c00 	.word	0x40000c00
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	40010400 	.word	0x40010400
 8001b24:	40020800 	.word	0x40020800

08001b28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b38:	d10e      	bne.n	8001b58 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001b56:	e026      	b.n	8001ba6 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a16      	ldr	r2, [pc, #88]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x90>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d10e      	bne.n	8001b80 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	4a12      	ldr	r2, [pc, #72]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b72:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
}
 8001b7e:	e012      	b.n	8001ba6 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM9)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0d      	ldr	r2, [pc, #52]	@ (8001bbc <HAL_TIM_Base_MspInit+0x94>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d10d      	bne.n	8001ba6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b92:	4a08      	ldr	r2, [pc, #32]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b9a:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
}
 8001ba6:	bf00      	nop
 8001ba8:	371c      	adds	r7, #28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40000400 	.word	0x40000400
 8001bbc:	40014000 	.word	0x40014000

08001bc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08e      	sub	sp, #56	@ 0x38
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001be0:	d13c      	bne.n	8001c5c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
 8001be6:	4b61      	ldr	r3, [pc, #388]	@ (8001d6c <HAL_TIM_MspPostInit+0x1ac>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	4a60      	ldr	r2, [pc, #384]	@ (8001d6c <HAL_TIM_MspPostInit+0x1ac>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf2:	4b5e      	ldr	r3, [pc, #376]	@ (8001d6c <HAL_TIM_MspPostInit+0x1ac>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	623b      	str	r3, [r7, #32]
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
 8001c02:	4b5a      	ldr	r3, [pc, #360]	@ (8001d6c <HAL_TIM_MspPostInit+0x1ac>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	4a59      	ldr	r2, [pc, #356]	@ (8001d6c <HAL_TIM_MspPostInit+0x1ac>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0e:	4b57      	ldr	r3, [pc, #348]	@ (8001d6c <HAL_TIM_MspPostInit+0x1ac>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	69fb      	ldr	r3, [r7, #28]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8001c1a:	232c      	movs	r3, #44	@ 0x2c
 8001c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c32:	4619      	mov	r1, r3
 8001c34:	484e      	ldr	r0, [pc, #312]	@ (8001d70 <HAL_TIM_MspPostInit+0x1b0>)
 8001c36:	f000 fb21 	bl	800227c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c3a:	2308      	movs	r3, #8
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c52:	4619      	mov	r1, r3
 8001c54:	4847      	ldr	r0, [pc, #284]	@ (8001d74 <HAL_TIM_MspPostInit+0x1b4>)
 8001c56:	f000 fb11 	bl	800227c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001c5a:	e083      	b.n	8001d64 <HAL_TIM_MspPostInit+0x1a4>
  else if(timHandle->Instance==TIM3)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a45      	ldr	r2, [pc, #276]	@ (8001d78 <HAL_TIM_MspPostInit+0x1b8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d15b      	bne.n	8001d1e <HAL_TIM_MspPostInit+0x15e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	4b40      	ldr	r3, [pc, #256]	@ (8001d6c <HAL_TIM_MspPostInit+0x1ac>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d6c <HAL_TIM_MspPostInit+0x1ac>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c76:	4b3d      	ldr	r3, [pc, #244]	@ (8001d6c <HAL_TIM_MspPostInit+0x1ac>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	61bb      	str	r3, [r7, #24]
 8001c80:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	4b39      	ldr	r3, [pc, #228]	@ (8001d6c <HAL_TIM_MspPostInit+0x1ac>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	4a38      	ldr	r2, [pc, #224]	@ (8001d6c <HAL_TIM_MspPostInit+0x1ac>)
 8001c8c:	f043 0304 	orr.w	r3, r3, #4
 8001c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c92:	4b36      	ldr	r3, [pc, #216]	@ (8001d6c <HAL_TIM_MspPostInit+0x1ac>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	4b32      	ldr	r3, [pc, #200]	@ (8001d6c <HAL_TIM_MspPostInit+0x1ac>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	4a31      	ldr	r2, [pc, #196]	@ (8001d6c <HAL_TIM_MspPostInit+0x1ac>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cae:	4b2f      	ldr	r3, [pc, #188]	@ (8001d6c <HAL_TIM_MspPostInit+0x1ac>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cba:	2340      	movs	r3, #64	@ 0x40
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4826      	ldr	r0, [pc, #152]	@ (8001d70 <HAL_TIM_MspPostInit+0x1b0>)
 8001cd6:	f000 fad1 	bl	800227c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cda:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cec:	2302      	movs	r3, #2
 8001cee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4821      	ldr	r0, [pc, #132]	@ (8001d7c <HAL_TIM_MspPostInit+0x1bc>)
 8001cf8:	f000 fac0 	bl	800227c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d14:	4619      	mov	r1, r3
 8001d16:	4817      	ldr	r0, [pc, #92]	@ (8001d74 <HAL_TIM_MspPostInit+0x1b4>)
 8001d18:	f000 fab0 	bl	800227c <HAL_GPIO_Init>
}
 8001d1c:	e022      	b.n	8001d64 <HAL_TIM_MspPostInit+0x1a4>
  else if(timHandle->Instance==TIM9)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a17      	ldr	r2, [pc, #92]	@ (8001d80 <HAL_TIM_MspPostInit+0x1c0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d11d      	bne.n	8001d64 <HAL_TIM_MspPostInit+0x1a4>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d6c <HAL_TIM_MspPostInit+0x1ac>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d30:	4a0e      	ldr	r2, [pc, #56]	@ (8001d6c <HAL_TIM_MspPostInit+0x1ac>)
 8001d32:	f043 0310 	orr.w	r3, r3, #16
 8001d36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <HAL_TIM_MspPostInit+0x1ac>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d44:	2320      	movs	r3, #32
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001d54:	2303      	movs	r3, #3
 8001d56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4809      	ldr	r0, [pc, #36]	@ (8001d84 <HAL_TIM_MspPostInit+0x1c4>)
 8001d60:	f000 fa8c 	bl	800227c <HAL_GPIO_Init>
}
 8001d64:	bf00      	nop
 8001d66:	3738      	adds	r7, #56	@ 0x38
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020000 	.word	0x40020000
 8001d74:	40020400 	.word	0x40020400
 8001d78:	40000400 	.word	0x40000400
 8001d7c:	40020800 	.word	0x40020800
 8001d80:	40014000 	.word	0x40014000
 8001d84:	40021000 	.word	0x40021000

08001d88 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <MX_UART4_Init+0x4c>)
 8001d8e:	4a12      	ldr	r2, [pc, #72]	@ (8001dd8 <MX_UART4_Init+0x50>)
 8001d90:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001d92:	4b10      	ldr	r3, [pc, #64]	@ (8001dd4 <MX_UART4_Init+0x4c>)
 8001d94:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d98:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <MX_UART4_Init+0x4c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <MX_UART4_Init+0x4c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001da6:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd4 <MX_UART4_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001dac:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <MX_UART4_Init+0x4c>)
 8001dae:	220c      	movs	r2, #12
 8001db0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db2:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <MX_UART4_Init+0x4c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db8:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <MX_UART4_Init+0x4c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001dbe:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <MX_UART4_Init+0x4c>)
 8001dc0:	f002 f8bc 	bl	8003f3c <HAL_UART_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001dca:	f7ff fa69 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000280 	.word	0x20000280
 8001dd8:	40004c00 	.word	0x40004c00

08001ddc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001de0:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <MX_USART1_UART_Init+0x4c>)
 8001de2:	4a12      	ldr	r2, [pc, #72]	@ (8001e2c <MX_USART1_UART_Init+0x50>)
 8001de4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001de6:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <MX_USART1_UART_Init+0x4c>)
 8001de8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dee:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <MX_USART1_UART_Init+0x4c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001df4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <MX_USART1_UART_Init+0x4c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001e28 <MX_USART1_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e00:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <MX_USART1_UART_Init+0x4c>)
 8001e02:	220c      	movs	r2, #12
 8001e04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e06:	4b08      	ldr	r3, [pc, #32]	@ (8001e28 <MX_USART1_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <MX_USART1_UART_Init+0x4c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e12:	4805      	ldr	r0, [pc, #20]	@ (8001e28 <MX_USART1_UART_Init+0x4c>)
 8001e14:	f002 f892 	bl	8003f3c <HAL_UART_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e1e:	f7ff fa3f 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200002c8 	.word	0x200002c8
 8001e2c:	40011000 	.word	0x40011000

08001e30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08c      	sub	sp, #48	@ 0x30
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 031c 	add.w	r3, r7, #28
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a33      	ldr	r2, [pc, #204]	@ (8001f1c <HAL_UART_MspInit+0xec>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d12d      	bne.n	8001eae <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	4b32      	ldr	r3, [pc, #200]	@ (8001f20 <HAL_UART_MspInit+0xf0>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	4a31      	ldr	r2, [pc, #196]	@ (8001f20 <HAL_UART_MspInit+0xf0>)
 8001e5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e62:	4b2f      	ldr	r3, [pc, #188]	@ (8001f20 <HAL_UART_MspInit+0xf0>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	4b2b      	ldr	r3, [pc, #172]	@ (8001f20 <HAL_UART_MspInit+0xf0>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	4a2a      	ldr	r2, [pc, #168]	@ (8001f20 <HAL_UART_MspInit+0xf0>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7e:	4b28      	ldr	r3, [pc, #160]	@ (8001f20 <HAL_UART_MspInit+0xf0>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e8a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e9c:	2308      	movs	r3, #8
 8001e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea0:	f107 031c 	add.w	r3, r7, #28
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	481f      	ldr	r0, [pc, #124]	@ (8001f24 <HAL_UART_MspInit+0xf4>)
 8001ea8:	f000 f9e8 	bl	800227c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001eac:	e031      	b.n	8001f12 <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f28 <HAL_UART_MspInit+0xf8>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d12c      	bne.n	8001f12 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <HAL_UART_MspInit+0xf0>)
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec0:	4a17      	ldr	r2, [pc, #92]	@ (8001f20 <HAL_UART_MspInit+0xf0>)
 8001ec2:	f043 0310 	orr.w	r3, r3, #16
 8001ec6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ec8:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_UART_MspInit+0xf0>)
 8001eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <HAL_UART_MspInit+0xf0>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001edc:	4a10      	ldr	r2, [pc, #64]	@ (8001f20 <HAL_UART_MspInit+0xf0>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <HAL_UART_MspInit+0xf0>)
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ef0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efe:	2303      	movs	r3, #3
 8001f00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f02:	2307      	movs	r3, #7
 8001f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f06:	f107 031c 	add.w	r3, r7, #28
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4807      	ldr	r0, [pc, #28]	@ (8001f2c <HAL_UART_MspInit+0xfc>)
 8001f0e:	f000 f9b5 	bl	800227c <HAL_GPIO_Init>
}
 8001f12:	bf00      	nop
 8001f14:	3730      	adds	r7, #48	@ 0x30
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40004c00 	.word	0x40004c00
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40011000 	.word	0x40011000
 8001f2c:	40020000 	.word	0x40020000

08001f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f34:	f7ff fa12 	bl	800135c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f38:	480c      	ldr	r0, [pc, #48]	@ (8001f6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f3a:	490d      	ldr	r1, [pc, #52]	@ (8001f70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f40:	e002      	b.n	8001f48 <LoopCopyDataInit>

08001f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f46:	3304      	adds	r3, #4

08001f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f4c:	d3f9      	bcc.n	8001f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f50:	4c0a      	ldr	r4, [pc, #40]	@ (8001f7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f54:	e001      	b.n	8001f5a <LoopFillZerobss>

08001f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f58:	3204      	adds	r2, #4

08001f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f5c:	d3fb      	bcc.n	8001f56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f5e:	f002 fab9 	bl	80044d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f62:	f7ff f895 	bl	8001090 <main>
  bx  lr    
 8001f66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f70:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001f74:	0800455c 	.word	0x0800455c
  ldr r2, =_sbss
 8001f78:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001f7c:	20000314 	.word	0x20000314

08001f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f80:	e7fe      	b.n	8001f80 <ADC_IRQHandler>
	...

08001f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f88:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <HAL_Init+0x40>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc4 <HAL_Init+0x40>)
 8001f8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f94:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <HAL_Init+0x40>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc4 <HAL_Init+0x40>)
 8001f9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa0:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <HAL_Init+0x40>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a07      	ldr	r2, [pc, #28]	@ (8001fc4 <HAL_Init+0x40>)
 8001fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fac:	2003      	movs	r0, #3
 8001fae:	f000 f931 	bl	8002214 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fb2:	200f      	movs	r0, #15
 8001fb4:	f000 f808 	bl	8001fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb8:	f7ff f978 	bl	80012ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023c00 	.word	0x40023c00

08001fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fd0:	4b12      	ldr	r3, [pc, #72]	@ (800201c <HAL_InitTick+0x54>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b12      	ldr	r3, [pc, #72]	@ (8002020 <HAL_InitTick+0x58>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f93b 	bl	8002262 <HAL_SYSTICK_Config>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e00e      	b.n	8002014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b0f      	cmp	r3, #15
 8001ffa:	d80a      	bhi.n	8002012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002004:	f000 f911 	bl	800222a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002008:	4a06      	ldr	r2, [pc, #24]	@ (8002024 <HAL_InitTick+0x5c>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	e000      	b.n	8002014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000060 	.word	0x20000060
 8002020:	20000068 	.word	0x20000068
 8002024:	20000064 	.word	0x20000064

08002028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800202c:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <HAL_IncTick+0x20>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	4b06      	ldr	r3, [pc, #24]	@ (800204c <HAL_IncTick+0x24>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4413      	add	r3, r2
 8002038:	4a04      	ldr	r2, [pc, #16]	@ (800204c <HAL_IncTick+0x24>)
 800203a:	6013      	str	r3, [r2, #0]
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000068 	.word	0x20000068
 800204c:	20000310 	.word	0x20000310

08002050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return uwTick;
 8002054:	4b03      	ldr	r3, [pc, #12]	@ (8002064 <HAL_GetTick+0x14>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20000310 	.word	0x20000310

08002068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002070:	f7ff ffee 	bl	8002050 <HAL_GetTick>
 8002074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002080:	d005      	beq.n	800208e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002082:	4b0a      	ldr	r3, [pc, #40]	@ (80020ac <HAL_Delay+0x44>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4413      	add	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800208e:	bf00      	nop
 8002090:	f7ff ffde 	bl	8002050 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	429a      	cmp	r2, r3
 800209e:	d8f7      	bhi.n	8002090 <HAL_Delay+0x28>
  {
  }
}
 80020a0:	bf00      	nop
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000068 	.word	0x20000068

080020b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c0:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020cc:	4013      	ands	r3, r2
 80020ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e2:	4a04      	ldr	r2, [pc, #16]	@ (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	60d3      	str	r3, [r2, #12]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020fc:	4b04      	ldr	r3, [pc, #16]	@ (8002110 <__NVIC_GetPriorityGrouping+0x18>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	f003 0307 	and.w	r3, r3, #7
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	6039      	str	r1, [r7, #0]
 800211e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002124:	2b00      	cmp	r3, #0
 8002126:	db0a      	blt.n	800213e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	490c      	ldr	r1, [pc, #48]	@ (8002160 <__NVIC_SetPriority+0x4c>)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	0112      	lsls	r2, r2, #4
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	440b      	add	r3, r1
 8002138:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800213c:	e00a      	b.n	8002154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	b2da      	uxtb	r2, r3
 8002142:	4908      	ldr	r1, [pc, #32]	@ (8002164 <__NVIC_SetPriority+0x50>)
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	3b04      	subs	r3, #4
 800214c:	0112      	lsls	r2, r2, #4
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	440b      	add	r3, r1
 8002152:	761a      	strb	r2, [r3, #24]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000e100 	.word	0xe000e100
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002168:	b480      	push	{r7}
 800216a:	b089      	sub	sp, #36	@ 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f1c3 0307 	rsb	r3, r3, #7
 8002182:	2b04      	cmp	r3, #4
 8002184:	bf28      	it	cs
 8002186:	2304      	movcs	r3, #4
 8002188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3304      	adds	r3, #4
 800218e:	2b06      	cmp	r3, #6
 8002190:	d902      	bls.n	8002198 <NVIC_EncodePriority+0x30>
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3b03      	subs	r3, #3
 8002196:	e000      	b.n	800219a <NVIC_EncodePriority+0x32>
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800219c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43da      	mvns	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	401a      	ands	r2, r3
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ba:	43d9      	mvns	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	4313      	orrs	r3, r2
         );
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3724      	adds	r7, #36	@ 0x24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021e0:	d301      	bcc.n	80021e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00f      	b.n	8002206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002210 <SysTick_Config+0x40>)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ee:	210f      	movs	r1, #15
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021f4:	f7ff ff8e 	bl	8002114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f8:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <SysTick_Config+0x40>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021fe:	4b04      	ldr	r3, [pc, #16]	@ (8002210 <SysTick_Config+0x40>)
 8002200:	2207      	movs	r2, #7
 8002202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	e000e010 	.word	0xe000e010

08002214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff ff47 	bl	80020b0 <__NVIC_SetPriorityGrouping>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800222a:	b580      	push	{r7, lr}
 800222c:	b086      	sub	sp, #24
 800222e:	af00      	add	r7, sp, #0
 8002230:	4603      	mov	r3, r0
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800223c:	f7ff ff5c 	bl	80020f8 <__NVIC_GetPriorityGrouping>
 8002240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	6978      	ldr	r0, [r7, #20]
 8002248:	f7ff ff8e 	bl	8002168 <NVIC_EncodePriority>
 800224c:	4602      	mov	r2, r0
 800224e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002252:	4611      	mov	r1, r2
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff5d 	bl	8002114 <__NVIC_SetPriority>
}
 800225a:	bf00      	nop
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff ffb0 	bl	80021d0 <SysTick_Config>
 8002270:	4603      	mov	r3, r0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	@ 0x24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	e16b      	b.n	8002570 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002298:	2201      	movs	r2, #1
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	f040 815a 	bne.w	800256a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d005      	beq.n	80022ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d130      	bne.n	8002330 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	2203      	movs	r2, #3
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002304:	2201      	movs	r2, #1
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	091b      	lsrs	r3, r3, #4
 800231a:	f003 0201 	and.w	r2, r3, #1
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	2b03      	cmp	r3, #3
 800233a:	d017      	beq.n	800236c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2203      	movs	r2, #3
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d123      	bne.n	80023c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	08da      	lsrs	r2, r3, #3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3208      	adds	r2, #8
 8002380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	220f      	movs	r2, #15
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	08da      	lsrs	r2, r3, #3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3208      	adds	r2, #8
 80023ba:	69b9      	ldr	r1, [r7, #24]
 80023bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	2203      	movs	r2, #3
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0203 	and.w	r2, r3, #3
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 80b4 	beq.w	800256a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	4b60      	ldr	r3, [pc, #384]	@ (8002588 <HAL_GPIO_Init+0x30c>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240a:	4a5f      	ldr	r2, [pc, #380]	@ (8002588 <HAL_GPIO_Init+0x30c>)
 800240c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002410:	6453      	str	r3, [r2, #68]	@ 0x44
 8002412:	4b5d      	ldr	r3, [pc, #372]	@ (8002588 <HAL_GPIO_Init+0x30c>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800241e:	4a5b      	ldr	r2, [pc, #364]	@ (800258c <HAL_GPIO_Init+0x310>)
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	3302      	adds	r3, #2
 8002426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	220f      	movs	r2, #15
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a52      	ldr	r2, [pc, #328]	@ (8002590 <HAL_GPIO_Init+0x314>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d02b      	beq.n	80024a2 <HAL_GPIO_Init+0x226>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a51      	ldr	r2, [pc, #324]	@ (8002594 <HAL_GPIO_Init+0x318>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d025      	beq.n	800249e <HAL_GPIO_Init+0x222>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a50      	ldr	r2, [pc, #320]	@ (8002598 <HAL_GPIO_Init+0x31c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d01f      	beq.n	800249a <HAL_GPIO_Init+0x21e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a4f      	ldr	r2, [pc, #316]	@ (800259c <HAL_GPIO_Init+0x320>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d019      	beq.n	8002496 <HAL_GPIO_Init+0x21a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a4e      	ldr	r2, [pc, #312]	@ (80025a0 <HAL_GPIO_Init+0x324>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <HAL_GPIO_Init+0x216>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4d      	ldr	r2, [pc, #308]	@ (80025a4 <HAL_GPIO_Init+0x328>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00d      	beq.n	800248e <HAL_GPIO_Init+0x212>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4c      	ldr	r2, [pc, #304]	@ (80025a8 <HAL_GPIO_Init+0x32c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d007      	beq.n	800248a <HAL_GPIO_Init+0x20e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4b      	ldr	r2, [pc, #300]	@ (80025ac <HAL_GPIO_Init+0x330>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d101      	bne.n	8002486 <HAL_GPIO_Init+0x20a>
 8002482:	2307      	movs	r3, #7
 8002484:	e00e      	b.n	80024a4 <HAL_GPIO_Init+0x228>
 8002486:	2308      	movs	r3, #8
 8002488:	e00c      	b.n	80024a4 <HAL_GPIO_Init+0x228>
 800248a:	2306      	movs	r3, #6
 800248c:	e00a      	b.n	80024a4 <HAL_GPIO_Init+0x228>
 800248e:	2305      	movs	r3, #5
 8002490:	e008      	b.n	80024a4 <HAL_GPIO_Init+0x228>
 8002492:	2304      	movs	r3, #4
 8002494:	e006      	b.n	80024a4 <HAL_GPIO_Init+0x228>
 8002496:	2303      	movs	r3, #3
 8002498:	e004      	b.n	80024a4 <HAL_GPIO_Init+0x228>
 800249a:	2302      	movs	r3, #2
 800249c:	e002      	b.n	80024a4 <HAL_GPIO_Init+0x228>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_GPIO_Init+0x228>
 80024a2:	2300      	movs	r3, #0
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	f002 0203 	and.w	r2, r2, #3
 80024aa:	0092      	lsls	r2, r2, #2
 80024ac:	4093      	lsls	r3, r2
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b4:	4935      	ldr	r1, [pc, #212]	@ (800258c <HAL_GPIO_Init+0x310>)
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	089b      	lsrs	r3, r3, #2
 80024ba:	3302      	adds	r3, #2
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c2:	4b3b      	ldr	r3, [pc, #236]	@ (80025b0 <HAL_GPIO_Init+0x334>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024e6:	4a32      	ldr	r2, [pc, #200]	@ (80025b0 <HAL_GPIO_Init+0x334>)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024ec:	4b30      	ldr	r3, [pc, #192]	@ (80025b0 <HAL_GPIO_Init+0x334>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002510:	4a27      	ldr	r2, [pc, #156]	@ (80025b0 <HAL_GPIO_Init+0x334>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002516:	4b26      	ldr	r3, [pc, #152]	@ (80025b0 <HAL_GPIO_Init+0x334>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800253a:	4a1d      	ldr	r2, [pc, #116]	@ (80025b0 <HAL_GPIO_Init+0x334>)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002540:	4b1b      	ldr	r3, [pc, #108]	@ (80025b0 <HAL_GPIO_Init+0x334>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002564:	4a12      	ldr	r2, [pc, #72]	@ (80025b0 <HAL_GPIO_Init+0x334>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3301      	adds	r3, #1
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b0f      	cmp	r3, #15
 8002574:	f67f ae90 	bls.w	8002298 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	3724      	adds	r7, #36	@ 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800
 800258c:	40013800 	.word	0x40013800
 8002590:	40020000 	.word	0x40020000
 8002594:	40020400 	.word	0x40020400
 8002598:	40020800 	.word	0x40020800
 800259c:	40020c00 	.word	0x40020c00
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40021400 	.word	0x40021400
 80025a8:	40021800 	.word	0x40021800
 80025ac:	40021c00 	.word	0x40021c00
 80025b0:	40013c00 	.word	0x40013c00

080025b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	807b      	strh	r3, [r7, #2]
 80025c0:	4613      	mov	r3, r2
 80025c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025c4:	787b      	ldrb	r3, [r7, #1]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ca:	887a      	ldrh	r2, [r7, #2]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025d0:	e003      	b.n	80025da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025d2:	887b      	ldrh	r3, [r7, #2]
 80025d4:	041a      	lsls	r2, r3, #16
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	619a      	str	r2, [r3, #24]
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e267      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d075      	beq.n	80026f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002606:	4b88      	ldr	r3, [pc, #544]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b04      	cmp	r3, #4
 8002610:	d00c      	beq.n	800262c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002612:	4b85      	ldr	r3, [pc, #532]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800261a:	2b08      	cmp	r3, #8
 800261c:	d112      	bne.n	8002644 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800261e:	4b82      	ldr	r3, [pc, #520]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002626:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800262a:	d10b      	bne.n	8002644 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262c:	4b7e      	ldr	r3, [pc, #504]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d05b      	beq.n	80026f0 <HAL_RCC_OscConfig+0x108>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d157      	bne.n	80026f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e242      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800264c:	d106      	bne.n	800265c <HAL_RCC_OscConfig+0x74>
 800264e:	4b76      	ldr	r3, [pc, #472]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a75      	ldr	r2, [pc, #468]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e01d      	b.n	8002698 <HAL_RCC_OscConfig+0xb0>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0x98>
 8002666:	4b70      	ldr	r3, [pc, #448]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a6f      	ldr	r2, [pc, #444]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 800266c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	4b6d      	ldr	r3, [pc, #436]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a6c      	ldr	r2, [pc, #432]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 8002678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e00b      	b.n	8002698 <HAL_RCC_OscConfig+0xb0>
 8002680:	4b69      	ldr	r3, [pc, #420]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a68      	ldr	r2, [pc, #416]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 8002686:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b66      	ldr	r3, [pc, #408]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a65      	ldr	r2, [pc, #404]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 8002692:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d013      	beq.n	80026c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7ff fcd6 	bl	8002050 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a8:	f7ff fcd2 	bl	8002050 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	@ 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e207      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0xc0>
 80026c6:	e014      	b.n	80026f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7ff fcc2 	bl	8002050 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d0:	f7ff fcbe 	bl	8002050 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	@ 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e1f3      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e2:	4b51      	ldr	r3, [pc, #324]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0xe8>
 80026ee:	e000      	b.n	80026f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d063      	beq.n	80027c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00b      	beq.n	8002722 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270a:	4b47      	ldr	r3, [pc, #284]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002712:	2b08      	cmp	r3, #8
 8002714:	d11c      	bne.n	8002750 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002716:	4b44      	ldr	r3, [pc, #272]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d116      	bne.n	8002750 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002722:	4b41      	ldr	r3, [pc, #260]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d005      	beq.n	800273a <HAL_RCC_OscConfig+0x152>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d001      	beq.n	800273a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e1c7      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273a:	4b3b      	ldr	r3, [pc, #236]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4937      	ldr	r1, [pc, #220]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274e:	e03a      	b.n	80027c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002758:	4b34      	ldr	r3, [pc, #208]	@ (800282c <HAL_RCC_OscConfig+0x244>)
 800275a:	2201      	movs	r2, #1
 800275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275e:	f7ff fc77 	bl	8002050 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002766:	f7ff fc73 	bl	8002050 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e1a8      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002778:	4b2b      	ldr	r3, [pc, #172]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002784:	4b28      	ldr	r3, [pc, #160]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4925      	ldr	r1, [pc, #148]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 8002794:	4313      	orrs	r3, r2
 8002796:	600b      	str	r3, [r1, #0]
 8002798:	e015      	b.n	80027c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279a:	4b24      	ldr	r3, [pc, #144]	@ (800282c <HAL_RCC_OscConfig+0x244>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7ff fc56 	bl	8002050 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a8:	f7ff fc52 	bl	8002050 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e187      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d036      	beq.n	8002840 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d016      	beq.n	8002808 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027da:	4b15      	ldr	r3, [pc, #84]	@ (8002830 <HAL_RCC_OscConfig+0x248>)
 80027dc:	2201      	movs	r2, #1
 80027de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e0:	f7ff fc36 	bl	8002050 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e8:	f7ff fc32 	bl	8002050 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e167      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002828 <HAL_RCC_OscConfig+0x240>)
 80027fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x200>
 8002806:	e01b      	b.n	8002840 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002808:	4b09      	ldr	r3, [pc, #36]	@ (8002830 <HAL_RCC_OscConfig+0x248>)
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280e:	f7ff fc1f 	bl	8002050 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002814:	e00e      	b.n	8002834 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002816:	f7ff fc1b 	bl	8002050 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d907      	bls.n	8002834 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e150      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
 8002828:	40023800 	.word	0x40023800
 800282c:	42470000 	.word	0x42470000
 8002830:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002834:	4b88      	ldr	r3, [pc, #544]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1ea      	bne.n	8002816 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 8097 	beq.w	800297c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002852:	4b81      	ldr	r3, [pc, #516]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10f      	bne.n	800287e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	4b7d      	ldr	r3, [pc, #500]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	4a7c      	ldr	r2, [pc, #496]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800286c:	6413      	str	r3, [r2, #64]	@ 0x40
 800286e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287a:	2301      	movs	r3, #1
 800287c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287e:	4b77      	ldr	r3, [pc, #476]	@ (8002a5c <HAL_RCC_OscConfig+0x474>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d118      	bne.n	80028bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288a:	4b74      	ldr	r3, [pc, #464]	@ (8002a5c <HAL_RCC_OscConfig+0x474>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a73      	ldr	r2, [pc, #460]	@ (8002a5c <HAL_RCC_OscConfig+0x474>)
 8002890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002896:	f7ff fbdb 	bl	8002050 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289e:	f7ff fbd7 	bl	8002050 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e10c      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a5c <HAL_RCC_OscConfig+0x474>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d106      	bne.n	80028d2 <HAL_RCC_OscConfig+0x2ea>
 80028c4:	4b64      	ldr	r3, [pc, #400]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c8:	4a63      	ldr	r2, [pc, #396]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d0:	e01c      	b.n	800290c <HAL_RCC_OscConfig+0x324>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b05      	cmp	r3, #5
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x30c>
 80028da:	4b5f      	ldr	r3, [pc, #380]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028de:	4a5e      	ldr	r2, [pc, #376]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f2:	e00b      	b.n	800290c <HAL_RCC_OscConfig+0x324>
 80028f4:	4b58      	ldr	r3, [pc, #352]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f8:	4a57      	ldr	r2, [pc, #348]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028fa:	f023 0301 	bic.w	r3, r3, #1
 80028fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002900:	4b55      	ldr	r3, [pc, #340]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002904:	4a54      	ldr	r2, [pc, #336]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002906:	f023 0304 	bic.w	r3, r3, #4
 800290a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d015      	beq.n	8002940 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7ff fb9c 	bl	8002050 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291a:	e00a      	b.n	8002932 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291c:	f7ff fb98 	bl	8002050 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e0cb      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002932:	4b49      	ldr	r3, [pc, #292]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0ee      	beq.n	800291c <HAL_RCC_OscConfig+0x334>
 800293e:	e014      	b.n	800296a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002940:	f7ff fb86 	bl	8002050 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002946:	e00a      	b.n	800295e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002948:	f7ff fb82 	bl	8002050 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e0b5      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ee      	bne.n	8002948 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800296a:	7dfb      	ldrb	r3, [r7, #23]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d105      	bne.n	800297c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002970:	4b39      	ldr	r3, [pc, #228]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	4a38      	ldr	r2, [pc, #224]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002976:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800297a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80a1 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002986:	4b34      	ldr	r3, [pc, #208]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b08      	cmp	r3, #8
 8002990:	d05c      	beq.n	8002a4c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d141      	bne.n	8002a1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299a:	4b31      	ldr	r3, [pc, #196]	@ (8002a60 <HAL_RCC_OscConfig+0x478>)
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7ff fb56 	bl	8002050 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a8:	f7ff fb52 	bl	8002050 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e087      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ba:	4b27      	ldr	r3, [pc, #156]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69da      	ldr	r2, [r3, #28]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	019b      	lsls	r3, r3, #6
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029dc:	085b      	lsrs	r3, r3, #1
 80029de:	3b01      	subs	r3, #1
 80029e0:	041b      	lsls	r3, r3, #16
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e8:	061b      	lsls	r3, r3, #24
 80029ea:	491b      	ldr	r1, [pc, #108]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a60 <HAL_RCC_OscConfig+0x478>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7ff fb2b 	bl	8002050 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fe:	f7ff fb27 	bl	8002050 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e05c      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a10:	4b11      	ldr	r3, [pc, #68]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x416>
 8002a1c:	e054      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1e:	4b10      	ldr	r3, [pc, #64]	@ (8002a60 <HAL_RCC_OscConfig+0x478>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7ff fb14 	bl	8002050 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7ff fb10 	bl	8002050 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e045      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3e:	4b06      	ldr	r3, [pc, #24]	@ (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x444>
 8002a4a:	e03d      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d107      	bne.n	8002a64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e038      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40007000 	.word	0x40007000
 8002a60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a64:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad4 <HAL_RCC_OscConfig+0x4ec>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d028      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d121      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d11a      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a94:	4013      	ands	r3, r2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d111      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aaa:	085b      	lsrs	r3, r3, #1
 8002aac:	3b01      	subs	r3, #1
 8002aae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800

08002ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0cc      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aec:	4b68      	ldr	r3, [pc, #416]	@ (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d90c      	bls.n	8002b14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b65      	ldr	r3, [pc, #404]	@ (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b63      	ldr	r3, [pc, #396]	@ (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0b8      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d020      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b2c:	4b59      	ldr	r3, [pc, #356]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4a58      	ldr	r2, [pc, #352]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b44:	4b53      	ldr	r3, [pc, #332]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	4a52      	ldr	r2, [pc, #328]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b50:	4b50      	ldr	r3, [pc, #320]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	494d      	ldr	r1, [pc, #308]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d044      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d107      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b76:	4b47      	ldr	r3, [pc, #284]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d119      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e07f      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d003      	beq.n	8002b96 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b96:	4b3f      	ldr	r3, [pc, #252]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e06f      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba6:	4b3b      	ldr	r3, [pc, #236]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e067      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb6:	4b37      	ldr	r3, [pc, #220]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f023 0203 	bic.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4934      	ldr	r1, [pc, #208]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc8:	f7ff fa42 	bl	8002050 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	e00a      	b.n	8002be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd0:	f7ff fa3e 	bl	8002050 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e04f      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	4b2b      	ldr	r3, [pc, #172]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 020c 	and.w	r2, r3, #12
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d1eb      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b25      	ldr	r3, [pc, #148]	@ (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d20c      	bcs.n	8002c20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b22      	ldr	r3, [pc, #136]	@ (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	4b20      	ldr	r3, [pc, #128]	@ (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e032      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c2c:	4b19      	ldr	r3, [pc, #100]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4916      	ldr	r1, [pc, #88]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c4a:	4b12      	ldr	r3, [pc, #72]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	490e      	ldr	r1, [pc, #56]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c5e:	f000 f821 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002c62:	4602      	mov	r2, r0
 8002c64:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	490a      	ldr	r1, [pc, #40]	@ (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c70:	5ccb      	ldrb	r3, [r1, r3]
 8002c72:	fa22 f303 	lsr.w	r3, r2, r3
 8002c76:	4a09      	ldr	r2, [pc, #36]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff f9a2 	bl	8001fc8 <HAL_InitTick>

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023c00 	.word	0x40023c00
 8002c94:	40023800 	.word	0x40023800
 8002c98:	08004534 	.word	0x08004534
 8002c9c:	20000060 	.word	0x20000060
 8002ca0:	20000064 	.word	0x20000064

08002ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ca8:	b090      	sub	sp, #64	@ 0x40
 8002caa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cbc:	4b59      	ldr	r3, [pc, #356]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 030c 	and.w	r3, r3, #12
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d00d      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	f200 80a1 	bhi.w	8002e10 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d003      	beq.n	8002cde <HAL_RCC_GetSysClockFreq+0x3a>
 8002cd6:	e09b      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cd8:	4b53      	ldr	r3, [pc, #332]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cda:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cdc:	e09b      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cde:	4b53      	ldr	r3, [pc, #332]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ce2:	e098      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ce4:	4b4f      	ldr	r3, [pc, #316]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cee:	4b4d      	ldr	r3, [pc, #308]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d028      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	099b      	lsrs	r3, r3, #6
 8002d00:	2200      	movs	r2, #0
 8002d02:	623b      	str	r3, [r7, #32]
 8002d04:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4b47      	ldr	r3, [pc, #284]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d10:	fb03 f201 	mul.w	r2, r3, r1
 8002d14:	2300      	movs	r3, #0
 8002d16:	fb00 f303 	mul.w	r3, r0, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	4a43      	ldr	r2, [pc, #268]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d1e:	fba0 1202 	umull	r1, r2, r0, r2
 8002d22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d24:	460a      	mov	r2, r1
 8002d26:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002d28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d2a:	4413      	add	r3, r2
 8002d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d30:	2200      	movs	r2, #0
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	61fa      	str	r2, [r7, #28]
 8002d36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d3e:	f7fd fe61 	bl	8000a04 <__aeabi_uldivmod>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4613      	mov	r3, r2
 8002d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d4a:	e053      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d4c:	4b35      	ldr	r3, [pc, #212]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	099b      	lsrs	r3, r3, #6
 8002d52:	2200      	movs	r2, #0
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	617a      	str	r2, [r7, #20]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d5e:	f04f 0b00 	mov.w	fp, #0
 8002d62:	4652      	mov	r2, sl
 8002d64:	465b      	mov	r3, fp
 8002d66:	f04f 0000 	mov.w	r0, #0
 8002d6a:	f04f 0100 	mov.w	r1, #0
 8002d6e:	0159      	lsls	r1, r3, #5
 8002d70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d74:	0150      	lsls	r0, r2, #5
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	ebb2 080a 	subs.w	r8, r2, sl
 8002d7e:	eb63 090b 	sbc.w	r9, r3, fp
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d96:	ebb2 0408 	subs.w	r4, r2, r8
 8002d9a:	eb63 0509 	sbc.w	r5, r3, r9
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	00eb      	lsls	r3, r5, #3
 8002da8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dac:	00e2      	lsls	r2, r4, #3
 8002dae:	4614      	mov	r4, r2
 8002db0:	461d      	mov	r5, r3
 8002db2:	eb14 030a 	adds.w	r3, r4, sl
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	eb45 030b 	adc.w	r3, r5, fp
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dca:	4629      	mov	r1, r5
 8002dcc:	028b      	lsls	r3, r1, #10
 8002dce:	4621      	mov	r1, r4
 8002dd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	028a      	lsls	r2, r1, #10
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dde:	2200      	movs	r2, #0
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	60fa      	str	r2, [r7, #12]
 8002de4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002de8:	f7fd fe0c 	bl	8000a04 <__aeabi_uldivmod>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4613      	mov	r3, r2
 8002df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002df4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	0c1b      	lsrs	r3, r3, #16
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002e04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e0e:	e002      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e10:	4b05      	ldr	r3, [pc, #20]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3740      	adds	r7, #64	@ 0x40
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800
 8002e28:	00f42400 	.word	0x00f42400
 8002e2c:	017d7840 	.word	0x017d7840

08002e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e34:	4b03      	ldr	r3, [pc, #12]	@ (8002e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	20000060 	.word	0x20000060

08002e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e4c:	f7ff fff0 	bl	8002e30 <HAL_RCC_GetHCLKFreq>
 8002e50:	4602      	mov	r2, r0
 8002e52:	4b05      	ldr	r3, [pc, #20]	@ (8002e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	0a9b      	lsrs	r3, r3, #10
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	4903      	ldr	r1, [pc, #12]	@ (8002e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e5e:	5ccb      	ldrb	r3, [r1, r3]
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	08004544 	.word	0x08004544

08002e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e74:	f7ff ffdc 	bl	8002e30 <HAL_RCC_GetHCLKFreq>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	0b5b      	lsrs	r3, r3, #13
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	4903      	ldr	r1, [pc, #12]	@ (8002e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e86:	5ccb      	ldrb	r3, [r1, r3]
 8002e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40023800 	.word	0x40023800
 8002e94:	08004544 	.word	0x08004544

08002e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e041      	b.n	8002f2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fe fe32 	bl	8001b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	f000 fc9e 	bl	8003818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d001      	beq.n	8002f50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e04e      	b.n	8002fee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a23      	ldr	r2, [pc, #140]	@ (8002ffc <HAL_TIM_Base_Start_IT+0xc4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d022      	beq.n	8002fb8 <HAL_TIM_Base_Start_IT+0x80>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f7a:	d01d      	beq.n	8002fb8 <HAL_TIM_Base_Start_IT+0x80>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a1f      	ldr	r2, [pc, #124]	@ (8003000 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d018      	beq.n	8002fb8 <HAL_TIM_Base_Start_IT+0x80>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003004 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d013      	beq.n	8002fb8 <HAL_TIM_Base_Start_IT+0x80>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1c      	ldr	r2, [pc, #112]	@ (8003008 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00e      	beq.n	8002fb8 <HAL_TIM_Base_Start_IT+0x80>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800300c <HAL_TIM_Base_Start_IT+0xd4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d009      	beq.n	8002fb8 <HAL_TIM_Base_Start_IT+0x80>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a19      	ldr	r2, [pc, #100]	@ (8003010 <HAL_TIM_Base_Start_IT+0xd8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d004      	beq.n	8002fb8 <HAL_TIM_Base_Start_IT+0x80>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a18      	ldr	r2, [pc, #96]	@ (8003014 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d111      	bne.n	8002fdc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b06      	cmp	r3, #6
 8002fc8:	d010      	beq.n	8002fec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0201 	orr.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fda:	e007      	b.n	8002fec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40010000 	.word	0x40010000
 8003000:	40000400 	.word	0x40000400
 8003004:	40000800 	.word	0x40000800
 8003008:	40000c00 	.word	0x40000c00
 800300c:	40010400 	.word	0x40010400
 8003010:	40014000 	.word	0x40014000
 8003014:	40001800 	.word	0x40001800

08003018 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e041      	b.n	80030ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f839 	bl	80030b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3304      	adds	r3, #4
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f000 fbde 	bl	8003818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <HAL_TIM_PWM_Start+0x24>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	bf14      	ite	ne
 80030e8:	2301      	movne	r3, #1
 80030ea:	2300      	moveq	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	e022      	b.n	8003136 <HAL_TIM_PWM_Start+0x6a>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d109      	bne.n	800310a <HAL_TIM_PWM_Start+0x3e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	bf14      	ite	ne
 8003102:	2301      	movne	r3, #1
 8003104:	2300      	moveq	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	e015      	b.n	8003136 <HAL_TIM_PWM_Start+0x6a>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d109      	bne.n	8003124 <HAL_TIM_PWM_Start+0x58>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	bf14      	ite	ne
 800311c:	2301      	movne	r3, #1
 800311e:	2300      	moveq	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	e008      	b.n	8003136 <HAL_TIM_PWM_Start+0x6a>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	bf14      	ite	ne
 8003130:	2301      	movne	r3, #1
 8003132:	2300      	moveq	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e07c      	b.n	8003238 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d104      	bne.n	800314e <HAL_TIM_PWM_Start+0x82>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800314c:	e013      	b.n	8003176 <HAL_TIM_PWM_Start+0xaa>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d104      	bne.n	800315e <HAL_TIM_PWM_Start+0x92>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800315c:	e00b      	b.n	8003176 <HAL_TIM_PWM_Start+0xaa>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b08      	cmp	r3, #8
 8003162:	d104      	bne.n	800316e <HAL_TIM_PWM_Start+0xa2>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800316c:	e003      	b.n	8003176 <HAL_TIM_PWM_Start+0xaa>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2202      	movs	r2, #2
 8003172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2201      	movs	r2, #1
 800317c:	6839      	ldr	r1, [r7, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fe3a 	bl	8003df8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2d      	ldr	r2, [pc, #180]	@ (8003240 <HAL_TIM_PWM_Start+0x174>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d004      	beq.n	8003198 <HAL_TIM_PWM_Start+0xcc>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a2c      	ldr	r2, [pc, #176]	@ (8003244 <HAL_TIM_PWM_Start+0x178>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d101      	bne.n	800319c <HAL_TIM_PWM_Start+0xd0>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_TIM_PWM_Start+0xd2>
 800319c:	2300      	movs	r3, #0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d007      	beq.n	80031b2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a22      	ldr	r2, [pc, #136]	@ (8003240 <HAL_TIM_PWM_Start+0x174>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d022      	beq.n	8003202 <HAL_TIM_PWM_Start+0x136>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031c4:	d01d      	beq.n	8003202 <HAL_TIM_PWM_Start+0x136>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003248 <HAL_TIM_PWM_Start+0x17c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d018      	beq.n	8003202 <HAL_TIM_PWM_Start+0x136>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1d      	ldr	r2, [pc, #116]	@ (800324c <HAL_TIM_PWM_Start+0x180>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d013      	beq.n	8003202 <HAL_TIM_PWM_Start+0x136>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a1c      	ldr	r2, [pc, #112]	@ (8003250 <HAL_TIM_PWM_Start+0x184>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00e      	beq.n	8003202 <HAL_TIM_PWM_Start+0x136>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a16      	ldr	r2, [pc, #88]	@ (8003244 <HAL_TIM_PWM_Start+0x178>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d009      	beq.n	8003202 <HAL_TIM_PWM_Start+0x136>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a18      	ldr	r2, [pc, #96]	@ (8003254 <HAL_TIM_PWM_Start+0x188>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d004      	beq.n	8003202 <HAL_TIM_PWM_Start+0x136>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a16      	ldr	r2, [pc, #88]	@ (8003258 <HAL_TIM_PWM_Start+0x18c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d111      	bne.n	8003226 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b06      	cmp	r3, #6
 8003212:	d010      	beq.n	8003236 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003224:	e007      	b.n	8003236 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0201 	orr.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40010000 	.word	0x40010000
 8003244:	40010400 	.word	0x40010400
 8003248:	40000400 	.word	0x40000400
 800324c:	40000800 	.word	0x40000800
 8003250:	40000c00 	.word	0x40000c00
 8003254:	40014000 	.word	0x40014000
 8003258:	40001800 	.word	0x40001800

0800325c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e097      	b.n	80033a0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d106      	bne.n	800328a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7fe fb63 	bl	8001950 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2202      	movs	r2, #2
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032a0:	f023 0307 	bic.w	r3, r3, #7
 80032a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3304      	adds	r3, #4
 80032ae:	4619      	mov	r1, r3
 80032b0:	4610      	mov	r0, r2
 80032b2:	f000 fab1 	bl	8003818 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032de:	f023 0303 	bic.w	r3, r3, #3
 80032e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	4313      	orrs	r3, r2
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80032fc:	f023 030c 	bic.w	r3, r3, #12
 8003300:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003308:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800330c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	4313      	orrs	r3, r2
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	011a      	lsls	r2, r3, #4
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	031b      	lsls	r3, r3, #12
 800332c:	4313      	orrs	r3, r2
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800333a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003342:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	4313      	orrs	r3, r2
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80033c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80033d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d110      	bne.n	80033fa <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d102      	bne.n	80033e4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80033de:	7b7b      	ldrb	r3, [r7, #13]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d001      	beq.n	80033e8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e089      	b.n	80034fc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033f8:	e031      	b.n	800345e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d110      	bne.n	8003422 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003400:	7bbb      	ldrb	r3, [r7, #14]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d102      	bne.n	800340c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003406:	7b3b      	ldrb	r3, [r7, #12]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d001      	beq.n	8003410 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e075      	b.n	80034fc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003420:	e01d      	b.n	800345e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d108      	bne.n	800343a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003428:	7bbb      	ldrb	r3, [r7, #14]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d105      	bne.n	800343a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800342e:	7b7b      	ldrb	r3, [r7, #13]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d102      	bne.n	800343a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003434:	7b3b      	ldrb	r3, [r7, #12]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d001      	beq.n	800343e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e05e      	b.n	80034fc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2202      	movs	r2, #2
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2202      	movs	r2, #2
 800344a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2202      	movs	r2, #2
 8003452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_TIM_Encoder_Start_IT+0xc4>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2b04      	cmp	r3, #4
 8003468:	d010      	beq.n	800348c <HAL_TIM_Encoder_Start_IT+0xe4>
 800346a:	e01f      	b.n	80034ac <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2201      	movs	r2, #1
 8003472:	2100      	movs	r1, #0
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fcbf 	bl	8003df8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0202 	orr.w	r2, r2, #2
 8003488:	60da      	str	r2, [r3, #12]
      break;
 800348a:	e02e      	b.n	80034ea <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2201      	movs	r2, #1
 8003492:	2104      	movs	r1, #4
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fcaf 	bl	8003df8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0204 	orr.w	r2, r2, #4
 80034a8:	60da      	str	r2, [r3, #12]
      break;
 80034aa:	e01e      	b.n	80034ea <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2201      	movs	r2, #1
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fc9f 	bl	8003df8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2201      	movs	r2, #1
 80034c0:	2104      	movs	r1, #4
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fc98 	bl	8003df8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0202 	orr.w	r2, r2, #2
 80034d6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0204 	orr.w	r2, r2, #4
 80034e6:	60da      	str	r2, [r3, #12]
      break;
 80034e8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0201 	orr.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800351e:	2302      	movs	r3, #2
 8003520:	e0ae      	b.n	8003680 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b0c      	cmp	r3, #12
 800352e:	f200 809f 	bhi.w	8003670 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003532:	a201      	add	r2, pc, #4	@ (adr r2, 8003538 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003538:	0800356d 	.word	0x0800356d
 800353c:	08003671 	.word	0x08003671
 8003540:	08003671 	.word	0x08003671
 8003544:	08003671 	.word	0x08003671
 8003548:	080035ad 	.word	0x080035ad
 800354c:	08003671 	.word	0x08003671
 8003550:	08003671 	.word	0x08003671
 8003554:	08003671 	.word	0x08003671
 8003558:	080035ef 	.word	0x080035ef
 800355c:	08003671 	.word	0x08003671
 8003560:	08003671 	.word	0x08003671
 8003564:	08003671 	.word	0x08003671
 8003568:	0800362f 	.word	0x0800362f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	4618      	mov	r0, r3
 8003574:	f000 f9f6 	bl	8003964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0208 	orr.w	r2, r2, #8
 8003586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0204 	bic.w	r2, r2, #4
 8003596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6999      	ldr	r1, [r3, #24]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	619a      	str	r2, [r3, #24]
      break;
 80035aa:	e064      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fa46 	bl	8003a44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6999      	ldr	r1, [r3, #24]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	021a      	lsls	r2, r3, #8
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	619a      	str	r2, [r3, #24]
      break;
 80035ec:	e043      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fa9b 	bl	8003b30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f042 0208 	orr.w	r2, r2, #8
 8003608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0204 	bic.w	r2, r2, #4
 8003618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69d9      	ldr	r1, [r3, #28]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	61da      	str	r2, [r3, #28]
      break;
 800362c:	e023      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 faef 	bl	8003c18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69d9      	ldr	r1, [r3, #28]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	021a      	lsls	r2, r3, #8
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	61da      	str	r2, [r3, #28]
      break;
 800366e:	e002      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	75fb      	strb	r3, [r7, #23]
      break;
 8003674:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800367e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_ConfigClockSource+0x1c>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e0b4      	b.n	800380e <HAL_TIM_ConfigClockSource+0x186>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036dc:	d03e      	beq.n	800375c <HAL_TIM_ConfigClockSource+0xd4>
 80036de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036e2:	f200 8087 	bhi.w	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 80036e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ea:	f000 8086 	beq.w	80037fa <HAL_TIM_ConfigClockSource+0x172>
 80036ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036f2:	d87f      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 80036f4:	2b70      	cmp	r3, #112	@ 0x70
 80036f6:	d01a      	beq.n	800372e <HAL_TIM_ConfigClockSource+0xa6>
 80036f8:	2b70      	cmp	r3, #112	@ 0x70
 80036fa:	d87b      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 80036fc:	2b60      	cmp	r3, #96	@ 0x60
 80036fe:	d050      	beq.n	80037a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003700:	2b60      	cmp	r3, #96	@ 0x60
 8003702:	d877      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003704:	2b50      	cmp	r3, #80	@ 0x50
 8003706:	d03c      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0xfa>
 8003708:	2b50      	cmp	r3, #80	@ 0x50
 800370a:	d873      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 800370c:	2b40      	cmp	r3, #64	@ 0x40
 800370e:	d058      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003710:	2b40      	cmp	r3, #64	@ 0x40
 8003712:	d86f      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003714:	2b30      	cmp	r3, #48	@ 0x30
 8003716:	d064      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003718:	2b30      	cmp	r3, #48	@ 0x30
 800371a:	d86b      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 800371c:	2b20      	cmp	r3, #32
 800371e:	d060      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003720:	2b20      	cmp	r3, #32
 8003722:	d867      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003724:	2b00      	cmp	r3, #0
 8003726:	d05c      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003728:	2b10      	cmp	r3, #16
 800372a:	d05a      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x15a>
 800372c:	e062      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800373e:	f000 fb3b 	bl	8003db8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003750:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	609a      	str	r2, [r3, #8]
      break;
 800375a:	e04f      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800376c:	f000 fb24 	bl	8003db8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800377e:	609a      	str	r2, [r3, #8]
      break;
 8003780:	e03c      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800378e:	461a      	mov	r2, r3
 8003790:	f000 fa98 	bl	8003cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2150      	movs	r1, #80	@ 0x50
 800379a:	4618      	mov	r0, r3
 800379c:	f000 faf1 	bl	8003d82 <TIM_ITRx_SetConfig>
      break;
 80037a0:	e02c      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ae:	461a      	mov	r2, r3
 80037b0:	f000 fab7 	bl	8003d22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2160      	movs	r1, #96	@ 0x60
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fae1 	bl	8003d82 <TIM_ITRx_SetConfig>
      break;
 80037c0:	e01c      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ce:	461a      	mov	r2, r3
 80037d0:	f000 fa78 	bl	8003cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2140      	movs	r1, #64	@ 0x40
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 fad1 	bl	8003d82 <TIM_ITRx_SetConfig>
      break;
 80037e0:	e00c      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4619      	mov	r1, r3
 80037ec:	4610      	mov	r0, r2
 80037ee:	f000 fac8 	bl	8003d82 <TIM_ITRx_SetConfig>
      break;
 80037f2:	e003      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
      break;
 80037f8:	e000      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800380c:	7bfb      	ldrb	r3, [r7, #15]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a43      	ldr	r2, [pc, #268]	@ (8003938 <TIM_Base_SetConfig+0x120>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d013      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003836:	d00f      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a40      	ldr	r2, [pc, #256]	@ (800393c <TIM_Base_SetConfig+0x124>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00b      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a3f      	ldr	r2, [pc, #252]	@ (8003940 <TIM_Base_SetConfig+0x128>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d007      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a3e      	ldr	r2, [pc, #248]	@ (8003944 <TIM_Base_SetConfig+0x12c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d003      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a3d      	ldr	r2, [pc, #244]	@ (8003948 <TIM_Base_SetConfig+0x130>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d108      	bne.n	800386a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800385e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a32      	ldr	r2, [pc, #200]	@ (8003938 <TIM_Base_SetConfig+0x120>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d02b      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003878:	d027      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a2f      	ldr	r2, [pc, #188]	@ (800393c <TIM_Base_SetConfig+0x124>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d023      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a2e      	ldr	r2, [pc, #184]	@ (8003940 <TIM_Base_SetConfig+0x128>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d01f      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a2d      	ldr	r2, [pc, #180]	@ (8003944 <TIM_Base_SetConfig+0x12c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d01b      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a2c      	ldr	r2, [pc, #176]	@ (8003948 <TIM_Base_SetConfig+0x130>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d017      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a2b      	ldr	r2, [pc, #172]	@ (800394c <TIM_Base_SetConfig+0x134>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d013      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003950 <TIM_Base_SetConfig+0x138>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00f      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a29      	ldr	r2, [pc, #164]	@ (8003954 <TIM_Base_SetConfig+0x13c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00b      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a28      	ldr	r2, [pc, #160]	@ (8003958 <TIM_Base_SetConfig+0x140>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d007      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a27      	ldr	r2, [pc, #156]	@ (800395c <TIM_Base_SetConfig+0x144>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d003      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a26      	ldr	r2, [pc, #152]	@ (8003960 <TIM_Base_SetConfig+0x148>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d108      	bne.n	80038dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a0e      	ldr	r2, [pc, #56]	@ (8003938 <TIM_Base_SetConfig+0x120>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d003      	beq.n	800390a <TIM_Base_SetConfig+0xf2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a10      	ldr	r2, [pc, #64]	@ (8003948 <TIM_Base_SetConfig+0x130>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d103      	bne.n	8003912 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f043 0204 	orr.w	r2, r3, #4
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	601a      	str	r2, [r3, #0]
}
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40010000 	.word	0x40010000
 800393c:	40000400 	.word	0x40000400
 8003940:	40000800 	.word	0x40000800
 8003944:	40000c00 	.word	0x40000c00
 8003948:	40010400 	.word	0x40010400
 800394c:	40014000 	.word	0x40014000
 8003950:	40014400 	.word	0x40014400
 8003954:	40014800 	.word	0x40014800
 8003958:	40001800 	.word	0x40001800
 800395c:	40001c00 	.word	0x40001c00
 8003960:	40002000 	.word	0x40002000

08003964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	f023 0201 	bic.w	r2, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0303 	bic.w	r3, r3, #3
 800399a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f023 0302 	bic.w	r3, r3, #2
 80039ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a20      	ldr	r2, [pc, #128]	@ (8003a3c <TIM_OC1_SetConfig+0xd8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d003      	beq.n	80039c8 <TIM_OC1_SetConfig+0x64>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003a40 <TIM_OC1_SetConfig+0xdc>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d10c      	bne.n	80039e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f023 0308 	bic.w	r3, r3, #8
 80039ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f023 0304 	bic.w	r3, r3, #4
 80039e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a15      	ldr	r2, [pc, #84]	@ (8003a3c <TIM_OC1_SetConfig+0xd8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d003      	beq.n	80039f2 <TIM_OC1_SetConfig+0x8e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a14      	ldr	r2, [pc, #80]	@ (8003a40 <TIM_OC1_SetConfig+0xdc>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d111      	bne.n	8003a16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	621a      	str	r2, [r3, #32]
}
 8003a30:	bf00      	nop
 8003a32:	371c      	adds	r7, #28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	40010000 	.word	0x40010000
 8003a40:	40010400 	.word	0x40010400

08003a44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f023 0210 	bic.w	r2, r3, #16
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f023 0320 	bic.w	r3, r3, #32
 8003a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a22      	ldr	r2, [pc, #136]	@ (8003b28 <TIM_OC2_SetConfig+0xe4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d003      	beq.n	8003aac <TIM_OC2_SetConfig+0x68>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a21      	ldr	r2, [pc, #132]	@ (8003b2c <TIM_OC2_SetConfig+0xe8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d10d      	bne.n	8003ac8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ac6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a17      	ldr	r2, [pc, #92]	@ (8003b28 <TIM_OC2_SetConfig+0xe4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d003      	beq.n	8003ad8 <TIM_OC2_SetConfig+0x94>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a16      	ldr	r2, [pc, #88]	@ (8003b2c <TIM_OC2_SetConfig+0xe8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d113      	bne.n	8003b00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ade:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	621a      	str	r2, [r3, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40010000 	.word	0x40010000
 8003b2c:	40010400 	.word	0x40010400

08003b30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0303 	bic.w	r3, r3, #3
 8003b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	021b      	lsls	r3, r3, #8
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a21      	ldr	r2, [pc, #132]	@ (8003c10 <TIM_OC3_SetConfig+0xe0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d003      	beq.n	8003b96 <TIM_OC3_SetConfig+0x66>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a20      	ldr	r2, [pc, #128]	@ (8003c14 <TIM_OC3_SetConfig+0xe4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d10d      	bne.n	8003bb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	021b      	lsls	r3, r3, #8
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a16      	ldr	r2, [pc, #88]	@ (8003c10 <TIM_OC3_SetConfig+0xe0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d003      	beq.n	8003bc2 <TIM_OC3_SetConfig+0x92>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a15      	ldr	r2, [pc, #84]	@ (8003c14 <TIM_OC3_SetConfig+0xe4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d113      	bne.n	8003bea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	621a      	str	r2, [r3, #32]
}
 8003c04:	bf00      	nop
 8003c06:	371c      	adds	r7, #28
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	40010000 	.word	0x40010000
 8003c14:	40010400 	.word	0x40010400

08003c18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	031b      	lsls	r3, r3, #12
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a12      	ldr	r2, [pc, #72]	@ (8003cbc <TIM_OC4_SetConfig+0xa4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d003      	beq.n	8003c80 <TIM_OC4_SetConfig+0x68>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a11      	ldr	r2, [pc, #68]	@ (8003cc0 <TIM_OC4_SetConfig+0xa8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d109      	bne.n	8003c94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	019b      	lsls	r3, r3, #6
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	621a      	str	r2, [r3, #32]
}
 8003cae:	bf00      	nop
 8003cb0:	371c      	adds	r7, #28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	40010400 	.word	0x40010400

08003cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	f023 0201 	bic.w	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f023 030a 	bic.w	r3, r3, #10
 8003d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	621a      	str	r2, [r3, #32]
}
 8003d16:	bf00      	nop
 8003d18:	371c      	adds	r7, #28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b087      	sub	sp, #28
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	f023 0210 	bic.w	r2, r3, #16
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	031b      	lsls	r3, r3, #12
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	621a      	str	r2, [r3, #32]
}
 8003d76:	bf00      	nop
 8003d78:	371c      	adds	r7, #28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b085      	sub	sp, #20
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f043 0307 	orr.w	r3, r3, #7
 8003da4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	609a      	str	r2, [r3, #8]
}
 8003dac:	bf00      	nop
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	021a      	lsls	r2, r3, #8
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	609a      	str	r2, [r3, #8]
}
 8003dec:	bf00      	nop
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f003 031f 	and.w	r3, r3, #31
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a1a      	ldr	r2, [r3, #32]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a1a      	ldr	r2, [r3, #32]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f003 031f 	and.w	r3, r3, #31
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e30:	431a      	orrs	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	621a      	str	r2, [r3, #32]
}
 8003e36:	bf00      	nop
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
	...

08003e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e05a      	b.n	8003f12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a21      	ldr	r2, [pc, #132]	@ (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d022      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea8:	d01d      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1d      	ldr	r2, [pc, #116]	@ (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d018      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1a      	ldr	r2, [pc, #104]	@ (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00e      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a18      	ldr	r2, [pc, #96]	@ (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d009      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a17      	ldr	r2, [pc, #92]	@ (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d004      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a15      	ldr	r2, [pc, #84]	@ (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d10c      	bne.n	8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	40000c00 	.word	0x40000c00
 8003f30:	40010400 	.word	0x40010400
 8003f34:	40014000 	.word	0x40014000
 8003f38:	40001800 	.word	0x40001800

08003f3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e042      	b.n	8003fd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fd ff64 	bl	8001e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2224      	movs	r2, #36	@ 0x24
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f82b 	bl	8003fdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fe0:	b0c0      	sub	sp, #256	@ 0x100
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff8:	68d9      	ldr	r1, [r3, #12]
 8003ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	ea40 0301 	orr.w	r3, r0, r1
 8004004:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	431a      	orrs	r2, r3
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	431a      	orrs	r2, r3
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004034:	f021 010c 	bic.w	r1, r1, #12
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004042:	430b      	orrs	r3, r1
 8004044:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004056:	6999      	ldr	r1, [r3, #24]
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	ea40 0301 	orr.w	r3, r0, r1
 8004062:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	4b8f      	ldr	r3, [pc, #572]	@ (80042a8 <UART_SetConfig+0x2cc>)
 800406c:	429a      	cmp	r2, r3
 800406e:	d005      	beq.n	800407c <UART_SetConfig+0xa0>
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	4b8d      	ldr	r3, [pc, #564]	@ (80042ac <UART_SetConfig+0x2d0>)
 8004078:	429a      	cmp	r2, r3
 800407a:	d104      	bne.n	8004086 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800407c:	f7fe fef8 	bl	8002e70 <HAL_RCC_GetPCLK2Freq>
 8004080:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004084:	e003      	b.n	800408e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004086:	f7fe fedf 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
 800408a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800408e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004098:	f040 810c 	bne.w	80042b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800409c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040a0:	2200      	movs	r2, #0
 80040a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040ae:	4622      	mov	r2, r4
 80040b0:	462b      	mov	r3, r5
 80040b2:	1891      	adds	r1, r2, r2
 80040b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040b6:	415b      	adcs	r3, r3
 80040b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040be:	4621      	mov	r1, r4
 80040c0:	eb12 0801 	adds.w	r8, r2, r1
 80040c4:	4629      	mov	r1, r5
 80040c6:	eb43 0901 	adc.w	r9, r3, r1
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040de:	4690      	mov	r8, r2
 80040e0:	4699      	mov	r9, r3
 80040e2:	4623      	mov	r3, r4
 80040e4:	eb18 0303 	adds.w	r3, r8, r3
 80040e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040ec:	462b      	mov	r3, r5
 80040ee:	eb49 0303 	adc.w	r3, r9, r3
 80040f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004102:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004106:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800410a:	460b      	mov	r3, r1
 800410c:	18db      	adds	r3, r3, r3
 800410e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004110:	4613      	mov	r3, r2
 8004112:	eb42 0303 	adc.w	r3, r2, r3
 8004116:	657b      	str	r3, [r7, #84]	@ 0x54
 8004118:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800411c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004120:	f7fc fc70 	bl	8000a04 <__aeabi_uldivmod>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4b61      	ldr	r3, [pc, #388]	@ (80042b0 <UART_SetConfig+0x2d4>)
 800412a:	fba3 2302 	umull	r2, r3, r3, r2
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	011c      	lsls	r4, r3, #4
 8004132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004136:	2200      	movs	r2, #0
 8004138:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800413c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004140:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004144:	4642      	mov	r2, r8
 8004146:	464b      	mov	r3, r9
 8004148:	1891      	adds	r1, r2, r2
 800414a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800414c:	415b      	adcs	r3, r3
 800414e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004150:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004154:	4641      	mov	r1, r8
 8004156:	eb12 0a01 	adds.w	sl, r2, r1
 800415a:	4649      	mov	r1, r9
 800415c:	eb43 0b01 	adc.w	fp, r3, r1
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800416c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004170:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004174:	4692      	mov	sl, r2
 8004176:	469b      	mov	fp, r3
 8004178:	4643      	mov	r3, r8
 800417a:	eb1a 0303 	adds.w	r3, sl, r3
 800417e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004182:	464b      	mov	r3, r9
 8004184:	eb4b 0303 	adc.w	r3, fp, r3
 8004188:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004198:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800419c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041a0:	460b      	mov	r3, r1
 80041a2:	18db      	adds	r3, r3, r3
 80041a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80041a6:	4613      	mov	r3, r2
 80041a8:	eb42 0303 	adc.w	r3, r2, r3
 80041ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80041ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80041b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041b6:	f7fc fc25 	bl	8000a04 <__aeabi_uldivmod>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4611      	mov	r1, r2
 80041c0:	4b3b      	ldr	r3, [pc, #236]	@ (80042b0 <UART_SetConfig+0x2d4>)
 80041c2:	fba3 2301 	umull	r2, r3, r3, r1
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	2264      	movs	r2, #100	@ 0x64
 80041ca:	fb02 f303 	mul.w	r3, r2, r3
 80041ce:	1acb      	subs	r3, r1, r3
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80041d6:	4b36      	ldr	r3, [pc, #216]	@ (80042b0 <UART_SetConfig+0x2d4>)
 80041d8:	fba3 2302 	umull	r2, r3, r3, r2
 80041dc:	095b      	lsrs	r3, r3, #5
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80041e4:	441c      	add	r4, r3
 80041e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041ea:	2200      	movs	r2, #0
 80041ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80041f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80041f8:	4642      	mov	r2, r8
 80041fa:	464b      	mov	r3, r9
 80041fc:	1891      	adds	r1, r2, r2
 80041fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004200:	415b      	adcs	r3, r3
 8004202:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004204:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004208:	4641      	mov	r1, r8
 800420a:	1851      	adds	r1, r2, r1
 800420c:	6339      	str	r1, [r7, #48]	@ 0x30
 800420e:	4649      	mov	r1, r9
 8004210:	414b      	adcs	r3, r1
 8004212:	637b      	str	r3, [r7, #52]	@ 0x34
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004220:	4659      	mov	r1, fp
 8004222:	00cb      	lsls	r3, r1, #3
 8004224:	4651      	mov	r1, sl
 8004226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800422a:	4651      	mov	r1, sl
 800422c:	00ca      	lsls	r2, r1, #3
 800422e:	4610      	mov	r0, r2
 8004230:	4619      	mov	r1, r3
 8004232:	4603      	mov	r3, r0
 8004234:	4642      	mov	r2, r8
 8004236:	189b      	adds	r3, r3, r2
 8004238:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800423c:	464b      	mov	r3, r9
 800423e:	460a      	mov	r2, r1
 8004240:	eb42 0303 	adc.w	r3, r2, r3
 8004244:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004254:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004258:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800425c:	460b      	mov	r3, r1
 800425e:	18db      	adds	r3, r3, r3
 8004260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004262:	4613      	mov	r3, r2
 8004264:	eb42 0303 	adc.w	r3, r2, r3
 8004268:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800426a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800426e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004272:	f7fc fbc7 	bl	8000a04 <__aeabi_uldivmod>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4b0d      	ldr	r3, [pc, #52]	@ (80042b0 <UART_SetConfig+0x2d4>)
 800427c:	fba3 1302 	umull	r1, r3, r3, r2
 8004280:	095b      	lsrs	r3, r3, #5
 8004282:	2164      	movs	r1, #100	@ 0x64
 8004284:	fb01 f303 	mul.w	r3, r1, r3
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	3332      	adds	r3, #50	@ 0x32
 800428e:	4a08      	ldr	r2, [pc, #32]	@ (80042b0 <UART_SetConfig+0x2d4>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	f003 0207 	and.w	r2, r3, #7
 800429a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4422      	add	r2, r4
 80042a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042a4:	e106      	b.n	80044b4 <UART_SetConfig+0x4d8>
 80042a6:	bf00      	nop
 80042a8:	40011000 	.word	0x40011000
 80042ac:	40011400 	.word	0x40011400
 80042b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042b8:	2200      	movs	r2, #0
 80042ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80042c6:	4642      	mov	r2, r8
 80042c8:	464b      	mov	r3, r9
 80042ca:	1891      	adds	r1, r2, r2
 80042cc:	6239      	str	r1, [r7, #32]
 80042ce:	415b      	adcs	r3, r3
 80042d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042d6:	4641      	mov	r1, r8
 80042d8:	1854      	adds	r4, r2, r1
 80042da:	4649      	mov	r1, r9
 80042dc:	eb43 0501 	adc.w	r5, r3, r1
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	00eb      	lsls	r3, r5, #3
 80042ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ee:	00e2      	lsls	r2, r4, #3
 80042f0:	4614      	mov	r4, r2
 80042f2:	461d      	mov	r5, r3
 80042f4:	4643      	mov	r3, r8
 80042f6:	18e3      	adds	r3, r4, r3
 80042f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042fc:	464b      	mov	r3, r9
 80042fe:	eb45 0303 	adc.w	r3, r5, r3
 8004302:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004312:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004322:	4629      	mov	r1, r5
 8004324:	008b      	lsls	r3, r1, #2
 8004326:	4621      	mov	r1, r4
 8004328:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800432c:	4621      	mov	r1, r4
 800432e:	008a      	lsls	r2, r1, #2
 8004330:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004334:	f7fc fb66 	bl	8000a04 <__aeabi_uldivmod>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4b60      	ldr	r3, [pc, #384]	@ (80044c0 <UART_SetConfig+0x4e4>)
 800433e:	fba3 2302 	umull	r2, r3, r3, r2
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	011c      	lsls	r4, r3, #4
 8004346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800434a:	2200      	movs	r2, #0
 800434c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004350:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004354:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004358:	4642      	mov	r2, r8
 800435a:	464b      	mov	r3, r9
 800435c:	1891      	adds	r1, r2, r2
 800435e:	61b9      	str	r1, [r7, #24]
 8004360:	415b      	adcs	r3, r3
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004368:	4641      	mov	r1, r8
 800436a:	1851      	adds	r1, r2, r1
 800436c:	6139      	str	r1, [r7, #16]
 800436e:	4649      	mov	r1, r9
 8004370:	414b      	adcs	r3, r1
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	f04f 0300 	mov.w	r3, #0
 800437c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004380:	4659      	mov	r1, fp
 8004382:	00cb      	lsls	r3, r1, #3
 8004384:	4651      	mov	r1, sl
 8004386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800438a:	4651      	mov	r1, sl
 800438c:	00ca      	lsls	r2, r1, #3
 800438e:	4610      	mov	r0, r2
 8004390:	4619      	mov	r1, r3
 8004392:	4603      	mov	r3, r0
 8004394:	4642      	mov	r2, r8
 8004396:	189b      	adds	r3, r3, r2
 8004398:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800439c:	464b      	mov	r3, r9
 800439e:	460a      	mov	r2, r1
 80043a0:	eb42 0303 	adc.w	r3, r2, r3
 80043a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043c0:	4649      	mov	r1, r9
 80043c2:	008b      	lsls	r3, r1, #2
 80043c4:	4641      	mov	r1, r8
 80043c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ca:	4641      	mov	r1, r8
 80043cc:	008a      	lsls	r2, r1, #2
 80043ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80043d2:	f7fc fb17 	bl	8000a04 <__aeabi_uldivmod>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4611      	mov	r1, r2
 80043dc:	4b38      	ldr	r3, [pc, #224]	@ (80044c0 <UART_SetConfig+0x4e4>)
 80043de:	fba3 2301 	umull	r2, r3, r3, r1
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	2264      	movs	r2, #100	@ 0x64
 80043e6:	fb02 f303 	mul.w	r3, r2, r3
 80043ea:	1acb      	subs	r3, r1, r3
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	3332      	adds	r3, #50	@ 0x32
 80043f0:	4a33      	ldr	r2, [pc, #204]	@ (80044c0 <UART_SetConfig+0x4e4>)
 80043f2:	fba2 2303 	umull	r2, r3, r2, r3
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043fc:	441c      	add	r4, r3
 80043fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004402:	2200      	movs	r2, #0
 8004404:	673b      	str	r3, [r7, #112]	@ 0x70
 8004406:	677a      	str	r2, [r7, #116]	@ 0x74
 8004408:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800440c:	4642      	mov	r2, r8
 800440e:	464b      	mov	r3, r9
 8004410:	1891      	adds	r1, r2, r2
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	415b      	adcs	r3, r3
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800441c:	4641      	mov	r1, r8
 800441e:	1851      	adds	r1, r2, r1
 8004420:	6039      	str	r1, [r7, #0]
 8004422:	4649      	mov	r1, r9
 8004424:	414b      	adcs	r3, r1
 8004426:	607b      	str	r3, [r7, #4]
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004434:	4659      	mov	r1, fp
 8004436:	00cb      	lsls	r3, r1, #3
 8004438:	4651      	mov	r1, sl
 800443a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800443e:	4651      	mov	r1, sl
 8004440:	00ca      	lsls	r2, r1, #3
 8004442:	4610      	mov	r0, r2
 8004444:	4619      	mov	r1, r3
 8004446:	4603      	mov	r3, r0
 8004448:	4642      	mov	r2, r8
 800444a:	189b      	adds	r3, r3, r2
 800444c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800444e:	464b      	mov	r3, r9
 8004450:	460a      	mov	r2, r1
 8004452:	eb42 0303 	adc.w	r3, r2, r3
 8004456:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	663b      	str	r3, [r7, #96]	@ 0x60
 8004462:	667a      	str	r2, [r7, #100]	@ 0x64
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004470:	4649      	mov	r1, r9
 8004472:	008b      	lsls	r3, r1, #2
 8004474:	4641      	mov	r1, r8
 8004476:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800447a:	4641      	mov	r1, r8
 800447c:	008a      	lsls	r2, r1, #2
 800447e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004482:	f7fc fabf 	bl	8000a04 <__aeabi_uldivmod>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	4b0d      	ldr	r3, [pc, #52]	@ (80044c0 <UART_SetConfig+0x4e4>)
 800448c:	fba3 1302 	umull	r1, r3, r3, r2
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	2164      	movs	r1, #100	@ 0x64
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	3332      	adds	r3, #50	@ 0x32
 800449e:	4a08      	ldr	r2, [pc, #32]	@ (80044c0 <UART_SetConfig+0x4e4>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	f003 020f 	and.w	r2, r3, #15
 80044aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4422      	add	r2, r4
 80044b2:	609a      	str	r2, [r3, #8]
}
 80044b4:	bf00      	nop
 80044b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044ba:	46bd      	mov	sp, r7
 80044bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044c0:	51eb851f 	.word	0x51eb851f

080044c4 <memset>:
 80044c4:	4402      	add	r2, r0
 80044c6:	4603      	mov	r3, r0
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d100      	bne.n	80044ce <memset+0xa>
 80044cc:	4770      	bx	lr
 80044ce:	f803 1b01 	strb.w	r1, [r3], #1
 80044d2:	e7f9      	b.n	80044c8 <memset+0x4>

080044d4 <__libc_init_array>:
 80044d4:	b570      	push	{r4, r5, r6, lr}
 80044d6:	4d0d      	ldr	r5, [pc, #52]	@ (800450c <__libc_init_array+0x38>)
 80044d8:	4c0d      	ldr	r4, [pc, #52]	@ (8004510 <__libc_init_array+0x3c>)
 80044da:	1b64      	subs	r4, r4, r5
 80044dc:	10a4      	asrs	r4, r4, #2
 80044de:	2600      	movs	r6, #0
 80044e0:	42a6      	cmp	r6, r4
 80044e2:	d109      	bne.n	80044f8 <__libc_init_array+0x24>
 80044e4:	4d0b      	ldr	r5, [pc, #44]	@ (8004514 <__libc_init_array+0x40>)
 80044e6:	4c0c      	ldr	r4, [pc, #48]	@ (8004518 <__libc_init_array+0x44>)
 80044e8:	f000 f818 	bl	800451c <_init>
 80044ec:	1b64      	subs	r4, r4, r5
 80044ee:	10a4      	asrs	r4, r4, #2
 80044f0:	2600      	movs	r6, #0
 80044f2:	42a6      	cmp	r6, r4
 80044f4:	d105      	bne.n	8004502 <__libc_init_array+0x2e>
 80044f6:	bd70      	pop	{r4, r5, r6, pc}
 80044f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044fc:	4798      	blx	r3
 80044fe:	3601      	adds	r6, #1
 8004500:	e7ee      	b.n	80044e0 <__libc_init_array+0xc>
 8004502:	f855 3b04 	ldr.w	r3, [r5], #4
 8004506:	4798      	blx	r3
 8004508:	3601      	adds	r6, #1
 800450a:	e7f2      	b.n	80044f2 <__libc_init_array+0x1e>
 800450c:	08004554 	.word	0x08004554
 8004510:	08004554 	.word	0x08004554
 8004514:	08004554 	.word	0x08004554
 8004518:	08004558 	.word	0x08004558

0800451c <_init>:
 800451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451e:	bf00      	nop
 8004520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004522:	bc08      	pop	{r3}
 8004524:	469e      	mov	lr, r3
 8004526:	4770      	bx	lr

08004528 <_fini>:
 8004528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452a:	bf00      	nop
 800452c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452e:	bc08      	pop	{r3}
 8004530:	469e      	mov	lr, r3
 8004532:	4770      	bx	lr
