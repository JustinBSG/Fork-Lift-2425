
jason_fork_lift_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d54  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002f2c  08002f2c  00003f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f6c  08002f6c  00004024  2**0
                  CONTENTS
  4 .ARM          00000008  08002f6c  08002f6c  00003f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f74  08002f74  00004024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f74  08002f74  00003f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f78  08002f78  00003f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08002f7c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000024  08002fa0  00004024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002fa0  000040d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c460  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e41  00000000  00000000  000104b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  000122f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000779  00000000  00000000  00012cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ea64  00000000  00000000  00013441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb45  00000000  00000000  00031ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2bc1  00000000  00000000  0003e9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001015ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002684  00000000  00000000  001015f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00103c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000024 	.word	0x20000024
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002f14 	.word	0x08002f14

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000028 	.word	0x20000028
 8000214:	08002f14 	.word	0x08002f14

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	@ 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <MX_GPIO_Init+0xc0>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a29      	ldr	r2, [pc, #164]	@ (80005c8 <MX_GPIO_Init+0xc0>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <MX_GPIO_Init+0xc0>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000536:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <MX_GPIO_Init+0xc0>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a23      	ldr	r2, [pc, #140]	@ (80005c8 <MX_GPIO_Init+0xc0>)
 800053c:	f043 0320 	orr.w	r3, r3, #32
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <MX_GPIO_Init+0xc0>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0320 	and.w	r3, r3, #32
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800054e:	4b1e      	ldr	r3, [pc, #120]	@ (80005c8 <MX_GPIO_Init+0xc0>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000552:	4a1d      	ldr	r2, [pc, #116]	@ (80005c8 <MX_GPIO_Init+0xc0>)
 8000554:	f043 0310 	orr.w	r3, r3, #16
 8000558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055a:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <MX_GPIO_Init+0xc0>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	f003 0310 	and.w	r3, r3, #16
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <MX_GPIO_Init+0xc0>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	4a17      	ldr	r2, [pc, #92]	@ (80005c8 <MX_GPIO_Init+0xc0>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000572:	4b15      	ldr	r3, [pc, #84]	@ (80005c8 <MX_GPIO_Init+0xc0>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <MX_GPIO_Init+0xc0>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000582:	4a11      	ldr	r2, [pc, #68]	@ (80005c8 <MX_GPIO_Init+0xc0>)
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058a:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <MX_GPIO_Init+0xc0>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 800059c:	480b      	ldr	r0, [pc, #44]	@ (80005cc <MX_GPIO_Init+0xc4>)
 800059e:	f000 fd49 	bl	8001034 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin;
 80005a2:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b0:	2303      	movs	r3, #3
 80005b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4619      	mov	r1, r3
 80005ba:	4804      	ldr	r0, [pc, #16]	@ (80005cc <MX_GPIO_Init+0xc4>)
 80005bc:	f000 fbb8 	bl	8000d30 <HAL_GPIO_Init>

}
 80005c0:	bf00      	nop
 80005c2:	3728      	adds	r7, #40	@ 0x28
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40021000 	.word	0x40021000
 80005cc:	48001000 	.word	0x48001000

080005d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fa34 	bl	8000a42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f83d 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f7ff ff93 	bl	8000508 <MX_GPIO_Init>
  MX_UART5_Init();
 80005e2:	f000 f941 	bl	8000868 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005ec:	4818      	ldr	r0, [pc, #96]	@ (8000650 <main+0x80>)
 80005ee:	f000 fd21 	bl	8001034 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005f8:	4815      	ldr	r0, [pc, #84]	@ (8000650 <main+0x80>)
 80005fa:	f000 fd1b 	bl	8001034 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000604:	4812      	ldr	r0, [pc, #72]	@ (8000650 <main+0x80>)
 8000606:	f000 fd15 	bl	8001034 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2180      	movs	r1, #128	@ 0x80
 800060e:	4810      	ldr	r0, [pc, #64]	@ (8000650 <main+0x80>)
 8000610:	f000 fd10 	bl	8001034 <HAL_GPIO_WritePin>

  servo_reset_all();
 8000614:	f000 f8a4 	bl	8000760 <servo_reset_all>
  HAL_Delay(2000);
 8000618:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800061c:	f000 fa82 	bl	8000b24 <HAL_Delay>
  int degree = 370;
 8000620:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 8000624:	607b      	str	r3, [r7, #4]
  // servo_move(&(servos[1]), SERVO_ID2_MAX_POS, SHORTEST_TIME_ROTATE(90));
  servo_move(&(servos[2]), 500-degree, SHORTEST_TIME_ROTATE(90));
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	b29b      	uxth	r3, r3
 800062a:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 800062e:	b29b      	uxth	r3, r3
 8000630:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8000634:	4619      	mov	r1, r3
 8000636:	4807      	ldr	r0, [pc, #28]	@ (8000654 <main+0x84>)
 8000638:	f000 f85e 	bl	80006f8 <servo_move>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2180      	movs	r1, #128	@ 0x80
 8000640:	4803      	ldr	r0, [pc, #12]	@ (8000650 <main+0x80>)
 8000642:	f000 fcf7 	bl	8001034 <HAL_GPIO_WritePin>
    /* USER CODE BEGIN 3 */
    // test_servo_pos[0] = servo_get_current_pos(&(servos[0]));
    // test_servo_pos[1] = servo_get_current_pos(&(servos[1]));
    // test_servo_pos[2] = servo_get_current_pos(&(servos[2]));
    // test_servo_pos[3] = servo_get_current_pos(&(servos[3]));
    HAL_Delay(1);
 8000646:	2001      	movs	r0, #1
 8000648:	f000 fa6c 	bl	8000b24 <HAL_Delay>
 800064c:	e7fb      	b.n	8000646 <main+0x76>
 800064e:	bf00      	nop
 8000650:	48001000 	.word	0x48001000
 8000654:	20000008 	.word	0x20000008

08000658 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	@ 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0318 	add.w	r3, r7, #24
 8000662:	2238      	movs	r2, #56	@ 0x38
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fc28 	bl	8002ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800067a:	2000      	movs	r0, #0
 800067c:	f000 fcf2 	bl	8001064 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000684:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000688:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	2303      	movs	r3, #3
 8000690:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000696:	2355      	movs	r3, #85	@ 0x55
 8000698:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006a6:	f107 0318 	add.w	r3, r7, #24
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fd8e 	bl	80011cc <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x62>
    Error_Handler();
 80006b6:	f000 f818 	bl	80006ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80006ba:	230f      	movs	r3, #15
 80006bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2303      	movs	r3, #3
 80006c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2104      	movs	r1, #4
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f88c 	bl	80017f0 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x8a>
    Error_Handler();
 80006de:	f000 f804 	bl	80006ea <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	@ 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ee:	b672      	cpsid	i
}
 80006f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80006f2:	bf00      	nop
 80006f4:	e7fd      	b.n	80006f2 <Error_Handler+0x8>
	...

080006f8 <servo_move>:
  HAL_UART_Receive(&huart5, receive_buffer, sizeof(receive_buffer), 0xFFFF);
  target_servo->current_pos = (receive_buffer[8] << 8) + receive_buffer[7];
}

// TODO: need to test
void servo_move(HTD45H_Servo* target_servo, uint16_t target_pos, uint16_t time) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	807b      	strh	r3, [r7, #2]
 8000704:	4613      	mov	r3, r2
 8000706:	803b      	strh	r3, [r7, #0]
  uint8_t send_buffer[10];
  send_buffer[0] = send_buffer[1] = FRAME_HEADER;
 8000708:	2355      	movs	r3, #85	@ 0x55
 800070a:	737b      	strb	r3, [r7, #13]
 800070c:	7b7b      	ldrb	r3, [r7, #13]
 800070e:	733b      	strb	r3, [r7, #12]
  send_buffer[2] = 0x01 * 3 + 5;
 8000710:	2308      	movs	r3, #8
 8000712:	73bb      	strb	r3, [r7, #14]
  send_buffer[3] = CMD_SERVO_MOVE;
 8000714:	2303      	movs	r3, #3
 8000716:	73fb      	strb	r3, [r7, #15]
  send_buffer[4] = 0x01;
 8000718:	2301      	movs	r3, #1
 800071a:	743b      	strb	r3, [r7, #16]
  send_buffer[5] = GET_LOW_BYTE(time);
 800071c:	883b      	ldrh	r3, [r7, #0]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	747b      	strb	r3, [r7, #17]
  send_buffer[6] = GET_HIGH_BYTE(time);
 8000722:	883b      	ldrh	r3, [r7, #0]
 8000724:	0a1b      	lsrs	r3, r3, #8
 8000726:	b29b      	uxth	r3, r3
 8000728:	b2db      	uxtb	r3, r3
 800072a:	74bb      	strb	r3, [r7, #18]
  send_buffer[7] = target_servo->servo_id;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	74fb      	strb	r3, [r7, #19]
  send_buffer[8] = GET_LOW_BYTE(target_pos);
 8000732:	887b      	ldrh	r3, [r7, #2]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	753b      	strb	r3, [r7, #20]
  send_buffer[9] = GET_HIGH_BYTE(target_pos);
 8000738:	887b      	ldrh	r3, [r7, #2]
 800073a:	0a1b      	lsrs	r3, r3, #8
 800073c:	b29b      	uxth	r3, r3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	757b      	strb	r3, [r7, #21]
  HAL_UART_Transmit(&huart5, send_buffer, sizeof(send_buffer), 0xFFFF);
 8000742:	f107 010c 	add.w	r1, r7, #12
 8000746:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800074a:	220a      	movs	r2, #10
 800074c:	4803      	ldr	r0, [pc, #12]	@ (800075c <servo_move+0x64>)
 800074e:	f001 fd09 	bl	8002164 <HAL_UART_Transmit>
}
 8000752:	bf00      	nop
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000040 	.word	0x20000040

08000760 <servo_reset_all>:
  servo_update_current_pos(target_servo);
  return target_servo->current_pos;
}

// TODO: need to test
void servo_reset_all(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
for (int i = 0; i < 6; i++)
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	e00d      	b.n	8000788 <servo_reset_all+0x28>
  servo_move(&(servos[i]), INITIAL_POS, 1000);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4a09      	ldr	r2, [pc, #36]	@ (8000798 <servo_reset_all+0x38>)
 8000772:	4413      	add	r3, r2
 8000774:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000778:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ffbb 	bl	80006f8 <servo_move>
for (int i = 0; i < 6; i++)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	3301      	adds	r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b05      	cmp	r3, #5
 800078c:	ddee      	ble.n	800076c <servo_reset_all+0xc>
}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000000 	.word	0x20000000

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <HAL_MspInit+0x44>)
 80007a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007a6:	4a0e      	ldr	r2, [pc, #56]	@ (80007e0 <HAL_MspInit+0x44>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80007ae:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <HAL_MspInit+0x44>)
 80007b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <HAL_MspInit+0x44>)
 80007bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007be:	4a08      	ldr	r2, [pc, #32]	@ (80007e0 <HAL_MspInit+0x44>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <HAL_MspInit+0x44>)
 80007c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007d2:	f000 fceb 	bl	80011ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <NMI_Handler+0x4>

080007ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <MemManage_Handler+0x4>

080007fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <BusFault_Handler+0x4>

08000804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <UsageFault_Handler+0x4>

0800080c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083a:	f000 f955 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <SystemInit+0x20>)
 800084a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800084e:	4a05      	ldr	r2, [pc, #20]	@ (8000864 <SystemInit+0x20>)
 8000850:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000854:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800086c:	4b22      	ldr	r3, [pc, #136]	@ (80008f8 <MX_UART5_Init+0x90>)
 800086e:	4a23      	ldr	r2, [pc, #140]	@ (80008fc <MX_UART5_Init+0x94>)
 8000870:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000872:	4b21      	ldr	r3, [pc, #132]	@ (80008f8 <MX_UART5_Init+0x90>)
 8000874:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000878:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b1f      	ldr	r3, [pc, #124]	@ (80008f8 <MX_UART5_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b1d      	ldr	r3, [pc, #116]	@ (80008f8 <MX_UART5_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000886:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <MX_UART5_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b1a      	ldr	r3, [pc, #104]	@ (80008f8 <MX_UART5_Init+0x90>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <MX_UART5_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <MX_UART5_Init+0x90>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089e:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <MX_UART5_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a4:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <MX_UART5_Init+0x90>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008aa:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <MX_UART5_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80008b0:	4811      	ldr	r0, [pc, #68]	@ (80008f8 <MX_UART5_Init+0x90>)
 80008b2:	f001 fc07 	bl	80020c4 <HAL_UART_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80008bc:	f7ff ff15 	bl	80006ea <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c0:	2100      	movs	r1, #0
 80008c2:	480d      	ldr	r0, [pc, #52]	@ (80008f8 <MX_UART5_Init+0x90>)
 80008c4:	f002 fa30 	bl	8002d28 <HAL_UARTEx_SetTxFifoThreshold>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80008ce:	f7ff ff0c 	bl	80006ea <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4808      	ldr	r0, [pc, #32]	@ (80008f8 <MX_UART5_Init+0x90>)
 80008d6:	f002 fa65 	bl	8002da4 <HAL_UARTEx_SetRxFifoThreshold>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80008e0:	f7ff ff03 	bl	80006ea <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	@ (80008f8 <MX_UART5_Init+0x90>)
 80008e6:	f002 f9e6 	bl	8002cb6 <HAL_UARTEx_DisableFifoMode>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80008f0:	f7ff fefb 	bl	80006ea <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000040 	.word	0x20000040
 80008fc:	40005000 	.word	0x40005000

08000900 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b0a0      	sub	sp, #128	@ 0x80
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	2254      	movs	r2, #84	@ 0x54
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f002 facb 	bl	8002ebc <memset>
  if(uartHandle->Instance==UART5)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a2d      	ldr	r2, [pc, #180]	@ (80009e0 <HAL_UART_MspInit+0xe0>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d152      	bne.n	80009d6 <HAL_UART_MspInit+0xd6>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000930:	2310      	movs	r3, #16
 8000932:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000938:	f107 0318 	add.w	r3, r7, #24
 800093c:	4618      	mov	r0, r3
 800093e:	f001 f973 	bl	8001c28 <HAL_RCCEx_PeriphCLKConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000948:	f7ff fecf 	bl	80006ea <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800094c:	4b25      	ldr	r3, [pc, #148]	@ (80009e4 <HAL_UART_MspInit+0xe4>)
 800094e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000950:	4a24      	ldr	r2, [pc, #144]	@ (80009e4 <HAL_UART_MspInit+0xe4>)
 8000952:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000956:	6593      	str	r3, [r2, #88]	@ 0x58
 8000958:	4b22      	ldr	r3, [pc, #136]	@ (80009e4 <HAL_UART_MspInit+0xe4>)
 800095a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800095c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000964:	4b1f      	ldr	r3, [pc, #124]	@ (80009e4 <HAL_UART_MspInit+0xe4>)
 8000966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000968:	4a1e      	ldr	r2, [pc, #120]	@ (80009e4 <HAL_UART_MspInit+0xe4>)
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000970:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <HAL_UART_MspInit+0xe4>)
 8000972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800097c:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <HAL_UART_MspInit+0xe4>)
 800097e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000980:	4a18      	ldr	r2, [pc, #96]	@ (80009e4 <HAL_UART_MspInit+0xe4>)
 8000982:	f043 0308 	orr.w	r3, r3, #8
 8000986:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000988:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <HAL_UART_MspInit+0xe4>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098c:	f003 0308 	and.w	r3, r3, #8
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000994:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000998:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80009a6:	2305      	movs	r3, #5
 80009a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009aa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80009ae:	4619      	mov	r1, r3
 80009b0:	480d      	ldr	r0, [pc, #52]	@ (80009e8 <HAL_UART_MspInit+0xe8>)
 80009b2:	f000 f9bd 	bl	8000d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b6:	2304      	movs	r3, #4
 80009b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80009c6:	2305      	movs	r3, #5
 80009c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ca:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80009ce:	4619      	mov	r1, r3
 80009d0:	4806      	ldr	r0, [pc, #24]	@ (80009ec <HAL_UART_MspInit+0xec>)
 80009d2:	f000 f9ad 	bl	8000d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80009d6:	bf00      	nop
 80009d8:	3780      	adds	r7, #128	@ 0x80
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40005000 	.word	0x40005000
 80009e4:	40021000 	.word	0x40021000
 80009e8:	48000800 	.word	0x48000800
 80009ec:	48000c00 	.word	0x48000c00

080009f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f0:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009f2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009f4:	f7ff ff26 	bl	8000844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <LoopForever+0x6>)
  ldr r1, =_edata
 80009fa:	490d      	ldr	r1, [pc, #52]	@ (8000a30 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a34 <LoopForever+0xe>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a10:	4c0a      	ldr	r4, [pc, #40]	@ (8000a3c <LoopForever+0x16>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f002 fa55 	bl	8002ecc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a22:	f7ff fdd5 	bl	80005d0 <main>

08000a26 <LoopForever>:

LoopForever:
    b LoopForever
 8000a26:	e7fe      	b.n	8000a26 <LoopForever>
  ldr   r0, =_estack
 8000a28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000a34:	08002f7c 	.word	0x08002f7c
  ldr r2, =_sbss
 8000a38:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000a3c:	200000d8 	.word	0x200000d8

08000a40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC1_2_IRQHandler>

08000a42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 f93d 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a52:	200f      	movs	r0, #15
 8000a54:	f000 f80e 	bl	8000a74 <HAL_InitTick>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d002      	beq.n	8000a64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	71fb      	strb	r3, [r7, #7]
 8000a62:	e001      	b.n	8000a68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a64:	f7ff fe9a 	bl	800079c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a68:	79fb      	ldrb	r3, [r7, #7]

}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a80:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <HAL_InitTick+0x68>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d022      	beq.n	8000ace <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a88:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <HAL_InitTick+0x6c>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <HAL_InitTick+0x68>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f93a 	bl	8000d16 <HAL_SYSTICK_Config>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d10f      	bne.n	8000ac8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b0f      	cmp	r3, #15
 8000aac:	d809      	bhi.n	8000ac2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	6879      	ldr	r1, [r7, #4]
 8000ab2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ab6:	f000 f914 	bl	8000ce2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <HAL_InitTick+0x70>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	e007      	b.n	8000ad2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	73fb      	strb	r3, [r7, #15]
 8000ac6:	e004      	b.n	8000ad2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	73fb      	strb	r3, [r7, #15]
 8000acc:	e001      	b.n	8000ad2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000020 	.word	0x20000020
 8000ae0:	20000018 	.word	0x20000018
 8000ae4:	2000001c 	.word	0x2000001c

08000ae8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <HAL_IncTick+0x1c>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <HAL_IncTick+0x20>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a03      	ldr	r2, [pc, #12]	@ (8000b04 <HAL_IncTick+0x1c>)
 8000af8:	6013      	str	r3, [r2, #0]
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	200000d4 	.word	0x200000d4
 8000b08:	20000020 	.word	0x20000020

08000b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b10:	4b03      	ldr	r3, [pc, #12]	@ (8000b20 <HAL_GetTick+0x14>)
 8000b12:	681b      	ldr	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	200000d4 	.word	0x200000d4

08000b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b2c:	f7ff ffee 	bl	8000b0c <HAL_GetTick>
 8000b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b3c:	d004      	beq.n	8000b48 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b3e:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <HAL_Delay+0x40>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	4413      	add	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b48:	bf00      	nop
 8000b4a:	f7ff ffdf 	bl	8000b0c <HAL_GetTick>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d8f7      	bhi.n	8000b4a <HAL_Delay+0x26>
  {
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000020 	.word	0x20000020

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	@ (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	490c      	ldr	r1, [pc, #48]	@ (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4908      	ldr	r1, [pc, #32]	@ (8000c1c <__NVIC_SetPriority+0x50>)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	3b04      	subs	r3, #4
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	@ 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43d9      	mvns	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	4313      	orrs	r3, r2
         );
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3724      	adds	r7, #36	@ 0x24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c98:	d301      	bcc.n	8000c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00f      	b.n	8000cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <SysTick_Config+0x40>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f7ff ff8e 	bl	8000bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb0:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <SysTick_Config+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <SysTick_Config+0x40>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff47 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf0:	f7ff ff5e 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000cf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	68b9      	ldr	r1, [r7, #8]
 8000cfa:	6978      	ldr	r0, [r7, #20]
 8000cfc:	f7ff ff90 	bl	8000c20 <NVIC_EncodePriority>
 8000d00:	4602      	mov	r2, r0
 8000d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d06:	4611      	mov	r1, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff5f 	bl	8000bcc <__NVIC_SetPriority>
}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ffb2 	bl	8000c88 <SysTick_Config>
 8000d24:	4603      	mov	r3, r0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b087      	sub	sp, #28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d3e:	e15a      	b.n	8000ff6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	2101      	movs	r1, #1
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f000 814c 	beq.w	8000ff0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d005      	beq.n	8000d70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d130      	bne.n	8000dd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000da6:	2201      	movs	r2, #1
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	091b      	lsrs	r3, r3, #4
 8000dbc:	f003 0201 	and.w	r2, r3, #1
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d017      	beq.n	8000e0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	2203      	movs	r2, #3
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d123      	bne.n	8000e62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	08da      	lsrs	r2, r3, #3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3208      	adds	r2, #8
 8000e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	220f      	movs	r2, #15
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	691a      	ldr	r2, [r3, #16]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	f003 0307 	and.w	r3, r3, #7
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	08da      	lsrs	r2, r3, #3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3208      	adds	r2, #8
 8000e5c:	6939      	ldr	r1, [r7, #16]
 8000e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0203 	and.w	r2, r3, #3
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 80a6 	beq.w	8000ff0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea4:	4b5b      	ldr	r3, [pc, #364]	@ (8001014 <HAL_GPIO_Init+0x2e4>)
 8000ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea8:	4a5a      	ldr	r2, [pc, #360]	@ (8001014 <HAL_GPIO_Init+0x2e4>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eb0:	4b58      	ldr	r3, [pc, #352]	@ (8001014 <HAL_GPIO_Init+0x2e4>)
 8000eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ebc:	4a56      	ldr	r2, [pc, #344]	@ (8001018 <HAL_GPIO_Init+0x2e8>)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	220f      	movs	r2, #15
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ee6:	d01f      	beq.n	8000f28 <HAL_GPIO_Init+0x1f8>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a4c      	ldr	r2, [pc, #304]	@ (800101c <HAL_GPIO_Init+0x2ec>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d019      	beq.n	8000f24 <HAL_GPIO_Init+0x1f4>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a4b      	ldr	r2, [pc, #300]	@ (8001020 <HAL_GPIO_Init+0x2f0>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d013      	beq.n	8000f20 <HAL_GPIO_Init+0x1f0>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a4a      	ldr	r2, [pc, #296]	@ (8001024 <HAL_GPIO_Init+0x2f4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d00d      	beq.n	8000f1c <HAL_GPIO_Init+0x1ec>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a49      	ldr	r2, [pc, #292]	@ (8001028 <HAL_GPIO_Init+0x2f8>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d007      	beq.n	8000f18 <HAL_GPIO_Init+0x1e8>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a48      	ldr	r2, [pc, #288]	@ (800102c <HAL_GPIO_Init+0x2fc>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d101      	bne.n	8000f14 <HAL_GPIO_Init+0x1e4>
 8000f10:	2305      	movs	r3, #5
 8000f12:	e00a      	b.n	8000f2a <HAL_GPIO_Init+0x1fa>
 8000f14:	2306      	movs	r3, #6
 8000f16:	e008      	b.n	8000f2a <HAL_GPIO_Init+0x1fa>
 8000f18:	2304      	movs	r3, #4
 8000f1a:	e006      	b.n	8000f2a <HAL_GPIO_Init+0x1fa>
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e004      	b.n	8000f2a <HAL_GPIO_Init+0x1fa>
 8000f20:	2302      	movs	r3, #2
 8000f22:	e002      	b.n	8000f2a <HAL_GPIO_Init+0x1fa>
 8000f24:	2301      	movs	r3, #1
 8000f26:	e000      	b.n	8000f2a <HAL_GPIO_Init+0x1fa>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	f002 0203 	and.w	r2, r2, #3
 8000f30:	0092      	lsls	r2, r2, #2
 8000f32:	4093      	lsls	r3, r2
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f3a:	4937      	ldr	r1, [pc, #220]	@ (8001018 <HAL_GPIO_Init+0x2e8>)
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	3302      	adds	r3, #2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f48:	4b39      	ldr	r3, [pc, #228]	@ (8001030 <HAL_GPIO_Init+0x300>)
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f6c:	4a30      	ldr	r2, [pc, #192]	@ (8001030 <HAL_GPIO_Init+0x300>)
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f72:	4b2f      	ldr	r3, [pc, #188]	@ (8001030 <HAL_GPIO_Init+0x300>)
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f96:	4a26      	ldr	r2, [pc, #152]	@ (8001030 <HAL_GPIO_Init+0x300>)
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f9c:	4b24      	ldr	r3, [pc, #144]	@ (8001030 <HAL_GPIO_Init+0x300>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8001030 <HAL_GPIO_Init+0x300>)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001030 <HAL_GPIO_Init+0x300>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fea:	4a11      	ldr	r2, [pc, #68]	@ (8001030 <HAL_GPIO_Init+0x300>)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	f47f ae9d 	bne.w	8000d40 <HAL_GPIO_Init+0x10>
  }
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	371c      	adds	r7, #28
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	40021000 	.word	0x40021000
 8001018:	40010000 	.word	0x40010000
 800101c:	48000400 	.word	0x48000400
 8001020:	48000800 	.word	0x48000800
 8001024:	48000c00 	.word	0x48000c00
 8001028:	48001000 	.word	0x48001000
 800102c:	48001400 	.word	0x48001400
 8001030:	40010400 	.word	0x40010400

08001034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
 8001040:	4613      	mov	r3, r2
 8001042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001044:	787b      	ldrb	r3, [r7, #1]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001050:	e002      	b.n	8001058 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d141      	bne.n	80010f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001072:	4b4b      	ldr	r3, [pc, #300]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800107a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800107e:	d131      	bne.n	80010e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001080:	4b47      	ldr	r3, [pc, #284]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001086:	4a46      	ldr	r2, [pc, #280]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800108c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001090:	4b43      	ldr	r3, [pc, #268]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001098:	4a41      	ldr	r2, [pc, #260]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800109a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800109e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010a0:	4b40      	ldr	r3, [pc, #256]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2232      	movs	r2, #50	@ 0x32
 80010a6:	fb02 f303 	mul.w	r3, r2, r3
 80010aa:	4a3f      	ldr	r2, [pc, #252]	@ (80011a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010ac:	fba2 2303 	umull	r2, r3, r2, r3
 80010b0:	0c9b      	lsrs	r3, r3, #18
 80010b2:	3301      	adds	r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010b6:	e002      	b.n	80010be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010be:	4b38      	ldr	r3, [pc, #224]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010ca:	d102      	bne.n	80010d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f2      	bne.n	80010b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010d2:	4b33      	ldr	r3, [pc, #204]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010de:	d158      	bne.n	8001192 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e057      	b.n	8001194 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010e4:	4b2e      	ldr	r3, [pc, #184]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010ea:	4a2d      	ldr	r2, [pc, #180]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80010f4:	e04d      	b.n	8001192 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010fc:	d141      	bne.n	8001182 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010fe:	4b28      	ldr	r3, [pc, #160]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800110a:	d131      	bne.n	8001170 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800110c:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800110e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001112:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001118:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800111c:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001124:	4a1e      	ldr	r2, [pc, #120]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001126:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800112a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800112c:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2232      	movs	r2, #50	@ 0x32
 8001132:	fb02 f303 	mul.w	r3, r2, r3
 8001136:	4a1c      	ldr	r2, [pc, #112]	@ (80011a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001138:	fba2 2303 	umull	r2, r3, r2, r3
 800113c:	0c9b      	lsrs	r3, r3, #18
 800113e:	3301      	adds	r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001142:	e002      	b.n	800114a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3b01      	subs	r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001156:	d102      	bne.n	800115e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f2      	bne.n	8001144 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800116a:	d112      	bne.n	8001192 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e011      	b.n	8001194 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001170:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001176:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800117c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001180:	e007      	b.n	8001192 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001182:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800118a:	4a05      	ldr	r2, [pc, #20]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800118c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001190:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	40007000 	.word	0x40007000
 80011a4:	20000018 	.word	0x20000018
 80011a8:	431bde83 	.word	0x431bde83

080011ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80011b0:	4b05      	ldr	r3, [pc, #20]	@ (80011c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ba:	6093      	str	r3, [r2, #8]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40007000 	.word	0x40007000

080011cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e2fe      	b.n	80017dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d075      	beq.n	80012d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ea:	4b97      	ldr	r3, [pc, #604]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011f4:	4b94      	ldr	r3, [pc, #592]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	2b0c      	cmp	r3, #12
 8001202:	d102      	bne.n	800120a <HAL_RCC_OscConfig+0x3e>
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d002      	beq.n	8001210 <HAL_RCC_OscConfig+0x44>
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	2b08      	cmp	r3, #8
 800120e:	d10b      	bne.n	8001228 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001210:	4b8d      	ldr	r3, [pc, #564]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d05b      	beq.n	80012d4 <HAL_RCC_OscConfig+0x108>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d157      	bne.n	80012d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e2d9      	b.n	80017dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001230:	d106      	bne.n	8001240 <HAL_RCC_OscConfig+0x74>
 8001232:	4b85      	ldr	r3, [pc, #532]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a84      	ldr	r2, [pc, #528]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 8001238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e01d      	b.n	800127c <HAL_RCC_OscConfig+0xb0>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_OscConfig+0x98>
 800124a:	4b7f      	ldr	r3, [pc, #508]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a7e      	ldr	r2, [pc, #504]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 8001250:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	4b7c      	ldr	r3, [pc, #496]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a7b      	ldr	r2, [pc, #492]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 800125c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e00b      	b.n	800127c <HAL_RCC_OscConfig+0xb0>
 8001264:	4b78      	ldr	r3, [pc, #480]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a77      	ldr	r2, [pc, #476]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 800126a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b75      	ldr	r3, [pc, #468]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a74      	ldr	r2, [pc, #464]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 8001276:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800127a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d013      	beq.n	80012ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001284:	f7ff fc42 	bl	8000b0c <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fc3e 	bl	8000b0c <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	@ 0x64
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e29e      	b.n	80017dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800129e:	4b6a      	ldr	r3, [pc, #424]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f0      	beq.n	800128c <HAL_RCC_OscConfig+0xc0>
 80012aa:	e014      	b.n	80012d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fc2e 	bl	8000b0c <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b4:	f7ff fc2a 	bl	8000b0c <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b64      	cmp	r3, #100	@ 0x64
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e28a      	b.n	80017dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012c6:	4b60      	ldr	r3, [pc, #384]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0xe8>
 80012d2:	e000      	b.n	80012d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d075      	beq.n	80013ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012e2:	4b59      	ldr	r3, [pc, #356]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ec:	4b56      	ldr	r3, [pc, #344]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	2b0c      	cmp	r3, #12
 80012fa:	d102      	bne.n	8001302 <HAL_RCC_OscConfig+0x136>
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d002      	beq.n	8001308 <HAL_RCC_OscConfig+0x13c>
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	2b04      	cmp	r3, #4
 8001306:	d11f      	bne.n	8001348 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001308:	4b4f      	ldr	r3, [pc, #316]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <HAL_RCC_OscConfig+0x154>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e25d      	b.n	80017dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001320:	4b49      	ldr	r3, [pc, #292]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	061b      	lsls	r3, r3, #24
 800132e:	4946      	ldr	r1, [pc, #280]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 8001330:	4313      	orrs	r3, r2
 8001332:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001334:	4b45      	ldr	r3, [pc, #276]	@ (800144c <HAL_RCC_OscConfig+0x280>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fb9b 	bl	8000a74 <HAL_InitTick>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d043      	beq.n	80013cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e249      	b.n	80017dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d023      	beq.n	8001398 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001350:	4b3d      	ldr	r3, [pc, #244]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a3c      	ldr	r2, [pc, #240]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 8001356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800135a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135c:	f7ff fbd6 	bl	8000b0c <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001364:	f7ff fbd2 	bl	8000b0c <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e232      	b.n	80017dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001376:	4b34      	ldr	r3, [pc, #208]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001382:	4b31      	ldr	r3, [pc, #196]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	061b      	lsls	r3, r3, #24
 8001390:	492d      	ldr	r1, [pc, #180]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 8001392:	4313      	orrs	r3, r2
 8001394:	604b      	str	r3, [r1, #4]
 8001396:	e01a      	b.n	80013ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001398:	4b2b      	ldr	r3, [pc, #172]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a2a      	ldr	r2, [pc, #168]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 800139e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a4:	f7ff fbb2 	bl	8000b0c <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ac:	f7ff fbae 	bl	8000b0c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e20e      	b.n	80017dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013be:	4b22      	ldr	r3, [pc, #136]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x1e0>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d041      	beq.n	800145e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d01c      	beq.n	800141c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e2:	4b19      	ldr	r3, [pc, #100]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 80013e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013e8:	4a17      	ldr	r2, [pc, #92]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f2:	f7ff fb8b 	bl	8000b0c <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013fa:	f7ff fb87 	bl	8000b0c <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e1e7      	b.n	80017dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800140c:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 800140e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0ef      	beq.n	80013fa <HAL_RCC_OscConfig+0x22e>
 800141a:	e020      	b.n	800145e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800141c:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 800141e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001422:	4a09      	ldr	r2, [pc, #36]	@ (8001448 <HAL_RCC_OscConfig+0x27c>)
 8001424:	f023 0301 	bic.w	r3, r3, #1
 8001428:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142c:	f7ff fb6e 	bl	8000b0c <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001432:	e00d      	b.n	8001450 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff fb6a 	bl	8000b0c <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d906      	bls.n	8001450 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e1ca      	b.n	80017dc <HAL_RCC_OscConfig+0x610>
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000
 800144c:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001450:	4b8c      	ldr	r3, [pc, #560]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 8001452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1ea      	bne.n	8001434 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 80a6 	beq.w	80015b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001470:	4b84      	ldr	r3, [pc, #528]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 8001472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_RCC_OscConfig+0x2b4>
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <HAL_RCC_OscConfig+0x2b6>
 8001480:	2300      	movs	r3, #0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00d      	beq.n	80014a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	4b7f      	ldr	r3, [pc, #508]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 8001488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148a:	4a7e      	ldr	r2, [pc, #504]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001490:	6593      	str	r3, [r2, #88]	@ 0x58
 8001492:	4b7c      	ldr	r3, [pc, #496]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800149e:	2301      	movs	r3, #1
 80014a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a2:	4b79      	ldr	r3, [pc, #484]	@ (8001688 <HAL_RCC_OscConfig+0x4bc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d118      	bne.n	80014e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014ae:	4b76      	ldr	r3, [pc, #472]	@ (8001688 <HAL_RCC_OscConfig+0x4bc>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a75      	ldr	r2, [pc, #468]	@ (8001688 <HAL_RCC_OscConfig+0x4bc>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fb27 	bl	8000b0c <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c2:	f7ff fb23 	bl	8000b0c <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e183      	b.n	80017dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001688 <HAL_RCC_OscConfig+0x4bc>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d108      	bne.n	80014fa <HAL_RCC_OscConfig+0x32e>
 80014e8:	4b66      	ldr	r3, [pc, #408]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 80014ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014ee:	4a65      	ldr	r2, [pc, #404]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014f8:	e024      	b.n	8001544 <HAL_RCC_OscConfig+0x378>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b05      	cmp	r3, #5
 8001500:	d110      	bne.n	8001524 <HAL_RCC_OscConfig+0x358>
 8001502:	4b60      	ldr	r3, [pc, #384]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 8001504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001508:	4a5e      	ldr	r2, [pc, #376]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 800150a:	f043 0304 	orr.w	r3, r3, #4
 800150e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001512:	4b5c      	ldr	r3, [pc, #368]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 8001514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001518:	4a5a      	ldr	r2, [pc, #360]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001522:	e00f      	b.n	8001544 <HAL_RCC_OscConfig+0x378>
 8001524:	4b57      	ldr	r3, [pc, #348]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 8001526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800152a:	4a56      	ldr	r2, [pc, #344]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001534:	4b53      	ldr	r3, [pc, #332]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 8001536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800153a:	4a52      	ldr	r2, [pc, #328]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 800153c:	f023 0304 	bic.w	r3, r3, #4
 8001540:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d016      	beq.n	800157a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154c:	f7ff fade 	bl	8000b0c <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001552:	e00a      	b.n	800156a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001554:	f7ff fada 	bl	8000b0c <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001562:	4293      	cmp	r3, r2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e138      	b.n	80017dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800156a:	4b46      	ldr	r3, [pc, #280]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 800156c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0ed      	beq.n	8001554 <HAL_RCC_OscConfig+0x388>
 8001578:	e015      	b.n	80015a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157a:	f7ff fac7 	bl	8000b0c <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001580:	e00a      	b.n	8001598 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001582:	f7ff fac3 	bl	8000b0c <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001590:	4293      	cmp	r3, r2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e121      	b.n	80017dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001598:	4b3a      	ldr	r3, [pc, #232]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 800159a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1ed      	bne.n	8001582 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015a6:	7ffb      	ldrb	r3, [r7, #31]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d105      	bne.n	80015b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ac:	4b35      	ldr	r3, [pc, #212]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 80015ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b0:	4a34      	ldr	r2, [pc, #208]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 80015b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0320 	and.w	r3, r3, #32
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d03c      	beq.n	800163e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d01c      	beq.n	8001606 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 80015ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015dc:	f7ff fa96 	bl	8000b0c <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015e4:	f7ff fa92 	bl	8000b0c <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e0f2      	b.n	80017dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015f6:	4b23      	ldr	r3, [pc, #140]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 80015f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0ef      	beq.n	80015e4 <HAL_RCC_OscConfig+0x418>
 8001604:	e01b      	b.n	800163e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001606:	4b1f      	ldr	r3, [pc, #124]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 8001608:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800160c:	4a1d      	ldr	r2, [pc, #116]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001616:	f7ff fa79 	bl	8000b0c <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800161e:	f7ff fa75 	bl	8000b0c <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e0d5      	b.n	80017dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001630:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 8001632:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1ef      	bne.n	800161e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 80c9 	beq.w	80017da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001648:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 030c 	and.w	r3, r3, #12
 8001650:	2b0c      	cmp	r3, #12
 8001652:	f000 8083 	beq.w	800175c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d15e      	bne.n	800171c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165e:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a08      	ldr	r2, [pc, #32]	@ (8001684 <HAL_RCC_OscConfig+0x4b8>)
 8001664:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166a:	f7ff fa4f 	bl	8000b0c <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001670:	e00c      	b.n	800168c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001672:	f7ff fa4b 	bl	8000b0c <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d905      	bls.n	800168c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e0ab      	b.n	80017dc <HAL_RCC_OscConfig+0x610>
 8001684:	40021000 	.word	0x40021000
 8001688:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800168c:	4b55      	ldr	r3, [pc, #340]	@ (80017e4 <HAL_RCC_OscConfig+0x618>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1ec      	bne.n	8001672 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001698:	4b52      	ldr	r3, [pc, #328]	@ (80017e4 <HAL_RCC_OscConfig+0x618>)
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	4b52      	ldr	r3, [pc, #328]	@ (80017e8 <HAL_RCC_OscConfig+0x61c>)
 800169e:	4013      	ands	r3, r2
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6a11      	ldr	r1, [r2, #32]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016a8:	3a01      	subs	r2, #1
 80016aa:	0112      	lsls	r2, r2, #4
 80016ac:	4311      	orrs	r1, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80016b2:	0212      	lsls	r2, r2, #8
 80016b4:	4311      	orrs	r1, r2
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80016ba:	0852      	lsrs	r2, r2, #1
 80016bc:	3a01      	subs	r2, #1
 80016be:	0552      	lsls	r2, r2, #21
 80016c0:	4311      	orrs	r1, r2
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80016c6:	0852      	lsrs	r2, r2, #1
 80016c8:	3a01      	subs	r2, #1
 80016ca:	0652      	lsls	r2, r2, #25
 80016cc:	4311      	orrs	r1, r2
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80016d2:	06d2      	lsls	r2, r2, #27
 80016d4:	430a      	orrs	r2, r1
 80016d6:	4943      	ldr	r1, [pc, #268]	@ (80017e4 <HAL_RCC_OscConfig+0x618>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016dc:	4b41      	ldr	r3, [pc, #260]	@ (80017e4 <HAL_RCC_OscConfig+0x618>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a40      	ldr	r2, [pc, #256]	@ (80017e4 <HAL_RCC_OscConfig+0x618>)
 80016e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016e8:	4b3e      	ldr	r3, [pc, #248]	@ (80017e4 <HAL_RCC_OscConfig+0x618>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	4a3d      	ldr	r2, [pc, #244]	@ (80017e4 <HAL_RCC_OscConfig+0x618>)
 80016ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff fa0a 	bl	8000b0c <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff fa06 	bl	8000b0c <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e066      	b.n	80017dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800170e:	4b35      	ldr	r3, [pc, #212]	@ (80017e4 <HAL_RCC_OscConfig+0x618>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0x530>
 800171a:	e05e      	b.n	80017da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171c:	4b31      	ldr	r3, [pc, #196]	@ (80017e4 <HAL_RCC_OscConfig+0x618>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a30      	ldr	r2, [pc, #192]	@ (80017e4 <HAL_RCC_OscConfig+0x618>)
 8001722:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff f9f0 	bl	8000b0c <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001730:	f7ff f9ec 	bl	8000b0c <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e04c      	b.n	80017dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001742:	4b28      	ldr	r3, [pc, #160]	@ (80017e4 <HAL_RCC_OscConfig+0x618>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800174e:	4b25      	ldr	r3, [pc, #148]	@ (80017e4 <HAL_RCC_OscConfig+0x618>)
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	4924      	ldr	r1, [pc, #144]	@ (80017e4 <HAL_RCC_OscConfig+0x618>)
 8001754:	4b25      	ldr	r3, [pc, #148]	@ (80017ec <HAL_RCC_OscConfig+0x620>)
 8001756:	4013      	ands	r3, r2
 8001758:	60cb      	str	r3, [r1, #12]
 800175a:	e03e      	b.n	80017da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e039      	b.n	80017dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001768:	4b1e      	ldr	r3, [pc, #120]	@ (80017e4 <HAL_RCC_OscConfig+0x618>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f003 0203 	and.w	r2, r3, #3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	429a      	cmp	r2, r3
 800177a:	d12c      	bne.n	80017d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001786:	3b01      	subs	r3, #1
 8001788:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178a:	429a      	cmp	r2, r3
 800178c:	d123      	bne.n	80017d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001798:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800179a:	429a      	cmp	r2, r3
 800179c:	d11b      	bne.n	80017d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d113      	bne.n	80017d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b8:	085b      	lsrs	r3, r3, #1
 80017ba:	3b01      	subs	r3, #1
 80017bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d109      	bne.n	80017d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017cc:	085b      	lsrs	r3, r3, #1
 80017ce:	3b01      	subs	r3, #1
 80017d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d001      	beq.n	80017da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40021000 	.word	0x40021000
 80017e8:	019f800c 	.word	0x019f800c
 80017ec:	feeefffc 	.word	0xfeeefffc

080017f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e11e      	b.n	8001a46 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001808:	4b91      	ldr	r3, [pc, #580]	@ (8001a50 <HAL_RCC_ClockConfig+0x260>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 030f 	and.w	r3, r3, #15
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d910      	bls.n	8001838 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001816:	4b8e      	ldr	r3, [pc, #568]	@ (8001a50 <HAL_RCC_ClockConfig+0x260>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 020f 	bic.w	r2, r3, #15
 800181e:	498c      	ldr	r1, [pc, #560]	@ (8001a50 <HAL_RCC_ClockConfig+0x260>)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	4313      	orrs	r3, r2
 8001824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001826:	4b8a      	ldr	r3, [pc, #552]	@ (8001a50 <HAL_RCC_ClockConfig+0x260>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e106      	b.n	8001a46 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	d073      	beq.n	800192c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d129      	bne.n	80018a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184c:	4b81      	ldr	r3, [pc, #516]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0f4      	b.n	8001a46 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800185c:	f000 f99e 	bl	8001b9c <RCC_GetSysClockFreqFromPLLSource>
 8001860:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4a7c      	ldr	r2, [pc, #496]	@ (8001a58 <HAL_RCC_ClockConfig+0x268>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d93f      	bls.n	80018ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800186a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d009      	beq.n	800188a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800187e:	2b00      	cmp	r3, #0
 8001880:	d033      	beq.n	80018ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001886:	2b00      	cmp	r3, #0
 8001888:	d12f      	bne.n	80018ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800188a:	4b72      	ldr	r3, [pc, #456]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001892:	4a70      	ldr	r2, [pc, #448]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 8001894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001898:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800189a:	2380      	movs	r3, #128	@ 0x80
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	e024      	b.n	80018ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d107      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018a8:	4b6a      	ldr	r3, [pc, #424]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d109      	bne.n	80018c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0c6      	b.n	8001a46 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b8:	4b66      	ldr	r3, [pc, #408]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0be      	b.n	8001a46 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80018c8:	f000 f8ce 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4a61      	ldr	r2, [pc, #388]	@ (8001a58 <HAL_RCC_ClockConfig+0x268>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d909      	bls.n	80018ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80018de:	4a5d      	ldr	r2, [pc, #372]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 80018e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80018e6:	2380      	movs	r3, #128	@ 0x80
 80018e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018ea:	4b5a      	ldr	r3, [pc, #360]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f023 0203 	bic.w	r2, r3, #3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4957      	ldr	r1, [pc, #348]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018fc:	f7ff f906 	bl	8000b0c <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001902:	e00a      	b.n	800191a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001904:	f7ff f902 	bl	8000b0c <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e095      	b.n	8001a46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	4b4e      	ldr	r3, [pc, #312]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 020c 	and.w	r2, r3, #12
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	429a      	cmp	r2, r3
 800192a:	d1eb      	bne.n	8001904 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d023      	beq.n	8001980 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001944:	4b43      	ldr	r3, [pc, #268]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	4a42      	ldr	r2, [pc, #264]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 800194a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800194e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	2b00      	cmp	r3, #0
 800195a:	d007      	beq.n	800196c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800195c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001964:	4a3b      	ldr	r2, [pc, #236]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 8001966:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800196a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196c:	4b39      	ldr	r3, [pc, #228]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4936      	ldr	r1, [pc, #216]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
 800197e:	e008      	b.n	8001992 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2b80      	cmp	r3, #128	@ 0x80
 8001984:	d105      	bne.n	8001992 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001986:	4b33      	ldr	r3, [pc, #204]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	4a32      	ldr	r2, [pc, #200]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 800198c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001990:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001992:	4b2f      	ldr	r3, [pc, #188]	@ (8001a50 <HAL_RCC_ClockConfig+0x260>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d21d      	bcs.n	80019dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a50 <HAL_RCC_ClockConfig+0x260>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f023 020f 	bic.w	r2, r3, #15
 80019a8:	4929      	ldr	r1, [pc, #164]	@ (8001a50 <HAL_RCC_ClockConfig+0x260>)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019b0:	f7ff f8ac 	bl	8000b0c <HAL_GetTick>
 80019b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b8:	f7ff f8a8 	bl	8000b0c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e03b      	b.n	8001a46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b20      	ldr	r3, [pc, #128]	@ (8001a50 <HAL_RCC_ClockConfig+0x260>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d1ed      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	4917      	ldr	r1, [pc, #92]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a06:	4b13      	ldr	r3, [pc, #76]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	490f      	ldr	r1, [pc, #60]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a1a:	f000 f825 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <HAL_RCC_ClockConfig+0x264>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	490c      	ldr	r1, [pc, #48]	@ (8001a5c <HAL_RCC_ClockConfig+0x26c>)
 8001a2c:	5ccb      	ldrb	r3, [r1, r3]
 8001a2e:	f003 031f 	and.w	r3, r3, #31
 8001a32:	fa22 f303 	lsr.w	r3, r2, r3
 8001a36:	4a0a      	ldr	r2, [pc, #40]	@ (8001a60 <HAL_RCC_ClockConfig+0x270>)
 8001a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a64 <HAL_RCC_ClockConfig+0x274>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff f818 	bl	8000a74 <HAL_InitTick>
 8001a44:	4603      	mov	r3, r0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40022000 	.word	0x40022000
 8001a54:	40021000 	.word	0x40021000
 8001a58:	04c4b400 	.word	0x04c4b400
 8001a5c:	08002f2c 	.word	0x08002f2c
 8001a60:	20000018 	.word	0x20000018
 8001a64:	2000001c 	.word	0x2000001c

08001a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d102      	bne.n	8001a80 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	e047      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a80:	4b27      	ldr	r3, [pc, #156]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d102      	bne.n	8001a92 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a8c:	4b26      	ldr	r3, [pc, #152]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	e03e      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a92:	4b23      	ldr	r3, [pc, #140]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	2b0c      	cmp	r3, #12
 8001a9c:	d136      	bne.n	8001b0c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a9e:	4b20      	ldr	r3, [pc, #128]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d10c      	bne.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001abc:	4a1a      	ldr	r2, [pc, #104]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac4:	4a16      	ldr	r2, [pc, #88]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ac6:	68d2      	ldr	r2, [r2, #12]
 8001ac8:	0a12      	lsrs	r2, r2, #8
 8001aca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ace:	fb02 f303 	mul.w	r3, r2, r3
 8001ad2:	617b      	str	r3, [r7, #20]
      break;
 8001ad4:	e00c      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ad6:	4a13      	ldr	r2, [pc, #76]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ade:	4a10      	ldr	r2, [pc, #64]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ae0:	68d2      	ldr	r2, [r2, #12]
 8001ae2:	0a12      	lsrs	r2, r2, #8
 8001ae4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ae8:	fb02 f303 	mul.w	r3, r2, r3
 8001aec:	617b      	str	r3, [r7, #20]
      break;
 8001aee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001af0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	0e5b      	lsrs	r3, r3, #25
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	3301      	adds	r3, #1
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	e001      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b10:	693b      	ldr	r3, [r7, #16]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	371c      	adds	r7, #28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	00f42400 	.word	0x00f42400
 8001b28:	007a1200 	.word	0x007a1200

08001b2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b30:	4b03      	ldr	r3, [pc, #12]	@ (8001b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000018 	.word	0x20000018

08001b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b48:	f7ff fff0 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	0a1b      	lsrs	r3, r3, #8
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4904      	ldr	r1, [pc, #16]	@ (8001b6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	08002f3c 	.word	0x08002f3c

08001b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b74:	f7ff ffda 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	0adb      	lsrs	r3, r3, #11
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	4904      	ldr	r1, [pc, #16]	@ (8001b98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021000 	.word	0x40021000
 8001b98:	08002f3c 	.word	0x08002f3c

08001b9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bac:	4b1b      	ldr	r3, [pc, #108]	@ (8001c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d10c      	bne.n	8001bda <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bc0:	4a17      	ldr	r2, [pc, #92]	@ (8001c20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc8:	4a14      	ldr	r2, [pc, #80]	@ (8001c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bca:	68d2      	ldr	r2, [r2, #12]
 8001bcc:	0a12      	lsrs	r2, r2, #8
 8001bce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001bd2:	fb02 f303 	mul.w	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
    break;
 8001bd8:	e00c      	b.n	8001bf4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bda:	4a12      	ldr	r2, [pc, #72]	@ (8001c24 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be2:	4a0e      	ldr	r2, [pc, #56]	@ (8001c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001be4:	68d2      	ldr	r2, [r2, #12]
 8001be6:	0a12      	lsrs	r2, r2, #8
 8001be8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001bec:	fb02 f303 	mul.w	r3, r2, r3
 8001bf0:	617b      	str	r3, [r7, #20]
    break;
 8001bf2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	0e5b      	lsrs	r3, r3, #25
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001c0e:	687b      	ldr	r3, [r7, #4]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	371c      	adds	r7, #28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	007a1200 	.word	0x007a1200
 8001c24:	00f42400 	.word	0x00f42400

08001c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c30:	2300      	movs	r3, #0
 8001c32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c34:	2300      	movs	r3, #0
 8001c36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 8098 	beq.w	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c4a:	4b43      	ldr	r3, [pc, #268]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10d      	bne.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	4b40      	ldr	r3, [pc, #256]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5a:	4a3f      	ldr	r2, [pc, #252]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c62:	4b3d      	ldr	r3, [pc, #244]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c72:	4b3a      	ldr	r3, [pc, #232]	@ (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a39      	ldr	r2, [pc, #228]	@ (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c7e:	f7fe ff45 	bl	8000b0c <HAL_GetTick>
 8001c82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c84:	e009      	b.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c86:	f7fe ff41 	bl	8000b0c <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d902      	bls.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	74fb      	strb	r3, [r7, #19]
        break;
 8001c98:	e005      	b.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c9a:	4b30      	ldr	r3, [pc, #192]	@ (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0ef      	beq.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001ca6:	7cfb      	ldrb	r3, [r7, #19]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d159      	bne.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001cac:	4b2a      	ldr	r3, [pc, #168]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cb6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d01e      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d019      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001cc8:	4b23      	ldr	r3, [pc, #140]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cd4:	4b20      	ldr	r3, [pc, #128]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cda:	4a1f      	ldr	r2, [pc, #124]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cea:	4a1b      	ldr	r2, [pc, #108]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001cf4:	4a18      	ldr	r2, [pc, #96]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d016      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d06:	f7fe ff01 	bl	8000b0c <HAL_GetTick>
 8001d0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d0c:	e00b      	b.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0e:	f7fe fefd 	bl	8000b0c <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d902      	bls.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	74fb      	strb	r3, [r7, #19]
            break;
 8001d24:	e006      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d26:	4b0c      	ldr	r3, [pc, #48]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0ec      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001d34:	7cfb      	ldrb	r3, [r7, #19]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10b      	bne.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d3a:	4b07      	ldr	r3, [pc, #28]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d48:	4903      	ldr	r1, [pc, #12]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001d50:	e008      	b.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d52:	7cfb      	ldrb	r3, [r7, #19]
 8001d54:	74bb      	strb	r3, [r7, #18]
 8001d56:	e005      	b.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d60:	7cfb      	ldrb	r3, [r7, #19]
 8001d62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d64:	7c7b      	ldrb	r3, [r7, #17]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d105      	bne.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6a:	4ba7      	ldr	r3, [pc, #668]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6e:	4aa6      	ldr	r2, [pc, #664]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d74:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00a      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d82:	4ba1      	ldr	r3, [pc, #644]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d88:	f023 0203 	bic.w	r2, r3, #3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	499d      	ldr	r1, [pc, #628]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00a      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001da4:	4b98      	ldr	r3, [pc, #608]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001daa:	f023 020c 	bic.w	r2, r3, #12
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	4995      	ldr	r1, [pc, #596]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00a      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001dc6:	4b90      	ldr	r3, [pc, #576]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dcc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	498c      	ldr	r1, [pc, #560]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00a      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001de8:	4b87      	ldr	r3, [pc, #540]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	4984      	ldr	r1, [pc, #528]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00a      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	497b      	ldr	r1, [pc, #492]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0320 	and.w	r3, r3, #32
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00a      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e2c:	4b76      	ldr	r3, [pc, #472]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	4973      	ldr	r1, [pc, #460]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e4e:	4b6e      	ldr	r3, [pc, #440]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e54:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	496a      	ldr	r1, [pc, #424]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00a      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e70:	4b65      	ldr	r3, [pc, #404]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e76:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	4962      	ldr	r1, [pc, #392]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00a      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e92:	4b5d      	ldr	r3, [pc, #372]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea0:	4959      	ldr	r1, [pc, #356]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00a      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001eb4:	4b54      	ldr	r3, [pc, #336]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001eba:	f023 0203 	bic.w	r2, r3, #3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec2:	4951      	ldr	r1, [pc, #324]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ed6:	4b4c      	ldr	r3, [pc, #304]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001edc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee4:	4948      	ldr	r1, [pc, #288]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d015      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ef8:	4b43      	ldr	r3, [pc, #268]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001efe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	4940      	ldr	r1, [pc, #256]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f16:	d105      	bne.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f18:	4b3b      	ldr	r3, [pc, #236]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4a3a      	ldr	r2, [pc, #232]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f22:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d015      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f30:	4b35      	ldr	r3, [pc, #212]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f3e:	4932      	ldr	r1, [pc, #200]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f4e:	d105      	bne.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f50:	4b2d      	ldr	r3, [pc, #180]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4a2c      	ldr	r2, [pc, #176]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f5a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d015      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f68:	4b27      	ldr	r3, [pc, #156]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f76:	4924      	ldr	r1, [pc, #144]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f86:	d105      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f88:	4b1f      	ldr	r3, [pc, #124]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f92:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d015      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fa0:	4b19      	ldr	r3, [pc, #100]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fae:	4916      	ldr	r1, [pc, #88]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001fbe:	d105      	bne.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fc0:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4a10      	ldr	r2, [pc, #64]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d019      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fde:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	4908      	ldr	r1, [pc, #32]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001ff6:	d109      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ff8:	4b03      	ldr	r3, [pc, #12]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4a02      	ldr	r2, [pc, #8]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002002:	60d3      	str	r3, [r2, #12]
 8002004:	e002      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d015      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002018:	4b29      	ldr	r3, [pc, #164]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800201e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002026:	4926      	ldr	r1, [pc, #152]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002032:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002036:	d105      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002038:	4b21      	ldr	r3, [pc, #132]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4a20      	ldr	r2, [pc, #128]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800203e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002042:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d015      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002050:	4b1b      	ldr	r3, [pc, #108]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002056:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800205e:	4918      	ldr	r1, [pc, #96]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800206a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800206e:	d105      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002070:	4b13      	ldr	r3, [pc, #76]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4a12      	ldr	r2, [pc, #72]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002076:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800207a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d015      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002088:	4b0d      	ldr	r3, [pc, #52]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800208a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800208e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002096:	490a      	ldr	r1, [pc, #40]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80020a6:	d105      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020a8:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4a04      	ldr	r2, [pc, #16]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80020b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000

080020c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e042      	b.n	800215c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d106      	bne.n	80020ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7fe fc09 	bl	8000900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2224      	movs	r2, #36	@ 0x24
 80020f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0201 	bic.w	r2, r2, #1
 8002104:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fbb2 	bl	8002878 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f8b3 	bl	8002280 <UART_SetConfig>
 800211a:	4603      	mov	r3, r0
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e01b      	b.n	800215c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002132:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002142:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fc31 	bl	80029bc <UART_CheckIdleState>
 800215a:	4603      	mov	r3, r0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	@ 0x28
 8002168:	af02      	add	r7, sp, #8
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	4613      	mov	r3, r2
 8002172:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217a:	2b20      	cmp	r3, #32
 800217c:	d17b      	bne.n	8002276 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <HAL_UART_Transmit+0x26>
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e074      	b.n	8002278 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2221      	movs	r2, #33	@ 0x21
 800219a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800219e:	f7fe fcb5 	bl	8000b0c <HAL_GetTick>
 80021a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	88fa      	ldrh	r2, [r7, #6]
 80021a8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	88fa      	ldrh	r2, [r7, #6]
 80021b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021bc:	d108      	bne.n	80021d0 <HAL_UART_Transmit+0x6c>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d104      	bne.n	80021d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	e003      	b.n	80021d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021d8:	e030      	b.n	800223c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2200      	movs	r2, #0
 80021e2:	2180      	movs	r1, #128	@ 0x80
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 fc93 	bl	8002b10 <UART_WaitOnFlagUntilTimeout>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e03d      	b.n	8002278 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10b      	bne.n	800221a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002210:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	3302      	adds	r3, #2
 8002216:	61bb      	str	r3, [r7, #24]
 8002218:	e007      	b.n	800222a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	781a      	ldrb	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	3301      	adds	r3, #1
 8002228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002230:	b29b      	uxth	r3, r3
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002242:	b29b      	uxth	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1c8      	bne.n	80021da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2200      	movs	r2, #0
 8002250:	2140      	movs	r1, #64	@ 0x40
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 fc5c 	bl	8002b10 <UART_WaitOnFlagUntilTimeout>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2220      	movs	r2, #32
 8002262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e006      	b.n	8002278 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2220      	movs	r2, #32
 800226e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	e000      	b.n	8002278 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002276:	2302      	movs	r3, #2
  }
}
 8002278:	4618      	mov	r0, r3
 800227a:	3720      	adds	r7, #32
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002284:	b08c      	sub	sp, #48	@ 0x30
 8002286:	af00      	add	r7, sp, #0
 8002288:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	431a      	orrs	r2, r3
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	431a      	orrs	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	4baa      	ldr	r3, [pc, #680]	@ (8002558 <UART_SetConfig+0x2d8>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80022b8:	430b      	orrs	r3, r1
 80022ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a9f      	ldr	r2, [pc, #636]	@ (800255c <UART_SetConfig+0x2dc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d004      	beq.n	80022ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022e8:	4313      	orrs	r3, r2
 80022ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80022f6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	6812      	ldr	r2, [r2, #0]
 80022fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002300:	430b      	orrs	r3, r1
 8002302:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230a:	f023 010f 	bic.w	r1, r3, #15
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a90      	ldr	r2, [pc, #576]	@ (8002560 <UART_SetConfig+0x2e0>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d125      	bne.n	8002370 <UART_SetConfig+0xf0>
 8002324:	4b8f      	ldr	r3, [pc, #572]	@ (8002564 <UART_SetConfig+0x2e4>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	2b03      	cmp	r3, #3
 8002330:	d81a      	bhi.n	8002368 <UART_SetConfig+0xe8>
 8002332:	a201      	add	r2, pc, #4	@ (adr r2, 8002338 <UART_SetConfig+0xb8>)
 8002334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002338:	08002349 	.word	0x08002349
 800233c:	08002359 	.word	0x08002359
 8002340:	08002351 	.word	0x08002351
 8002344:	08002361 	.word	0x08002361
 8002348:	2301      	movs	r3, #1
 800234a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800234e:	e116      	b.n	800257e <UART_SetConfig+0x2fe>
 8002350:	2302      	movs	r3, #2
 8002352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002356:	e112      	b.n	800257e <UART_SetConfig+0x2fe>
 8002358:	2304      	movs	r3, #4
 800235a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800235e:	e10e      	b.n	800257e <UART_SetConfig+0x2fe>
 8002360:	2308      	movs	r3, #8
 8002362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002366:	e10a      	b.n	800257e <UART_SetConfig+0x2fe>
 8002368:	2310      	movs	r3, #16
 800236a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800236e:	e106      	b.n	800257e <UART_SetConfig+0x2fe>
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a7c      	ldr	r2, [pc, #496]	@ (8002568 <UART_SetConfig+0x2e8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d138      	bne.n	80023ec <UART_SetConfig+0x16c>
 800237a:	4b7a      	ldr	r3, [pc, #488]	@ (8002564 <UART_SetConfig+0x2e4>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b0c      	cmp	r3, #12
 8002386:	d82d      	bhi.n	80023e4 <UART_SetConfig+0x164>
 8002388:	a201      	add	r2, pc, #4	@ (adr r2, 8002390 <UART_SetConfig+0x110>)
 800238a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238e:	bf00      	nop
 8002390:	080023c5 	.word	0x080023c5
 8002394:	080023e5 	.word	0x080023e5
 8002398:	080023e5 	.word	0x080023e5
 800239c:	080023e5 	.word	0x080023e5
 80023a0:	080023d5 	.word	0x080023d5
 80023a4:	080023e5 	.word	0x080023e5
 80023a8:	080023e5 	.word	0x080023e5
 80023ac:	080023e5 	.word	0x080023e5
 80023b0:	080023cd 	.word	0x080023cd
 80023b4:	080023e5 	.word	0x080023e5
 80023b8:	080023e5 	.word	0x080023e5
 80023bc:	080023e5 	.word	0x080023e5
 80023c0:	080023dd 	.word	0x080023dd
 80023c4:	2300      	movs	r3, #0
 80023c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023ca:	e0d8      	b.n	800257e <UART_SetConfig+0x2fe>
 80023cc:	2302      	movs	r3, #2
 80023ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023d2:	e0d4      	b.n	800257e <UART_SetConfig+0x2fe>
 80023d4:	2304      	movs	r3, #4
 80023d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023da:	e0d0      	b.n	800257e <UART_SetConfig+0x2fe>
 80023dc:	2308      	movs	r3, #8
 80023de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023e2:	e0cc      	b.n	800257e <UART_SetConfig+0x2fe>
 80023e4:	2310      	movs	r3, #16
 80023e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023ea:	e0c8      	b.n	800257e <UART_SetConfig+0x2fe>
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a5e      	ldr	r2, [pc, #376]	@ (800256c <UART_SetConfig+0x2ec>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d125      	bne.n	8002442 <UART_SetConfig+0x1c2>
 80023f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002564 <UART_SetConfig+0x2e4>)
 80023f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002400:	2b30      	cmp	r3, #48	@ 0x30
 8002402:	d016      	beq.n	8002432 <UART_SetConfig+0x1b2>
 8002404:	2b30      	cmp	r3, #48	@ 0x30
 8002406:	d818      	bhi.n	800243a <UART_SetConfig+0x1ba>
 8002408:	2b20      	cmp	r3, #32
 800240a:	d00a      	beq.n	8002422 <UART_SetConfig+0x1a2>
 800240c:	2b20      	cmp	r3, #32
 800240e:	d814      	bhi.n	800243a <UART_SetConfig+0x1ba>
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <UART_SetConfig+0x19a>
 8002414:	2b10      	cmp	r3, #16
 8002416:	d008      	beq.n	800242a <UART_SetConfig+0x1aa>
 8002418:	e00f      	b.n	800243a <UART_SetConfig+0x1ba>
 800241a:	2300      	movs	r3, #0
 800241c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002420:	e0ad      	b.n	800257e <UART_SetConfig+0x2fe>
 8002422:	2302      	movs	r3, #2
 8002424:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002428:	e0a9      	b.n	800257e <UART_SetConfig+0x2fe>
 800242a:	2304      	movs	r3, #4
 800242c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002430:	e0a5      	b.n	800257e <UART_SetConfig+0x2fe>
 8002432:	2308      	movs	r3, #8
 8002434:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002438:	e0a1      	b.n	800257e <UART_SetConfig+0x2fe>
 800243a:	2310      	movs	r3, #16
 800243c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002440:	e09d      	b.n	800257e <UART_SetConfig+0x2fe>
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a4a      	ldr	r2, [pc, #296]	@ (8002570 <UART_SetConfig+0x2f0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d125      	bne.n	8002498 <UART_SetConfig+0x218>
 800244c:	4b45      	ldr	r3, [pc, #276]	@ (8002564 <UART_SetConfig+0x2e4>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002452:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002456:	2bc0      	cmp	r3, #192	@ 0xc0
 8002458:	d016      	beq.n	8002488 <UART_SetConfig+0x208>
 800245a:	2bc0      	cmp	r3, #192	@ 0xc0
 800245c:	d818      	bhi.n	8002490 <UART_SetConfig+0x210>
 800245e:	2b80      	cmp	r3, #128	@ 0x80
 8002460:	d00a      	beq.n	8002478 <UART_SetConfig+0x1f8>
 8002462:	2b80      	cmp	r3, #128	@ 0x80
 8002464:	d814      	bhi.n	8002490 <UART_SetConfig+0x210>
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <UART_SetConfig+0x1f0>
 800246a:	2b40      	cmp	r3, #64	@ 0x40
 800246c:	d008      	beq.n	8002480 <UART_SetConfig+0x200>
 800246e:	e00f      	b.n	8002490 <UART_SetConfig+0x210>
 8002470:	2300      	movs	r3, #0
 8002472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002476:	e082      	b.n	800257e <UART_SetConfig+0x2fe>
 8002478:	2302      	movs	r3, #2
 800247a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800247e:	e07e      	b.n	800257e <UART_SetConfig+0x2fe>
 8002480:	2304      	movs	r3, #4
 8002482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002486:	e07a      	b.n	800257e <UART_SetConfig+0x2fe>
 8002488:	2308      	movs	r3, #8
 800248a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800248e:	e076      	b.n	800257e <UART_SetConfig+0x2fe>
 8002490:	2310      	movs	r3, #16
 8002492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002496:	e072      	b.n	800257e <UART_SetConfig+0x2fe>
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a35      	ldr	r2, [pc, #212]	@ (8002574 <UART_SetConfig+0x2f4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d12a      	bne.n	80024f8 <UART_SetConfig+0x278>
 80024a2:	4b30      	ldr	r3, [pc, #192]	@ (8002564 <UART_SetConfig+0x2e4>)
 80024a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80024b0:	d01a      	beq.n	80024e8 <UART_SetConfig+0x268>
 80024b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80024b6:	d81b      	bhi.n	80024f0 <UART_SetConfig+0x270>
 80024b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024bc:	d00c      	beq.n	80024d8 <UART_SetConfig+0x258>
 80024be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024c2:	d815      	bhi.n	80024f0 <UART_SetConfig+0x270>
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <UART_SetConfig+0x250>
 80024c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024cc:	d008      	beq.n	80024e0 <UART_SetConfig+0x260>
 80024ce:	e00f      	b.n	80024f0 <UART_SetConfig+0x270>
 80024d0:	2300      	movs	r3, #0
 80024d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024d6:	e052      	b.n	800257e <UART_SetConfig+0x2fe>
 80024d8:	2302      	movs	r3, #2
 80024da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024de:	e04e      	b.n	800257e <UART_SetConfig+0x2fe>
 80024e0:	2304      	movs	r3, #4
 80024e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024e6:	e04a      	b.n	800257e <UART_SetConfig+0x2fe>
 80024e8:	2308      	movs	r3, #8
 80024ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024ee:	e046      	b.n	800257e <UART_SetConfig+0x2fe>
 80024f0:	2310      	movs	r3, #16
 80024f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024f6:	e042      	b.n	800257e <UART_SetConfig+0x2fe>
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a17      	ldr	r2, [pc, #92]	@ (800255c <UART_SetConfig+0x2dc>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d13a      	bne.n	8002578 <UART_SetConfig+0x2f8>
 8002502:	4b18      	ldr	r3, [pc, #96]	@ (8002564 <UART_SetConfig+0x2e4>)
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002508:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800250c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002510:	d01a      	beq.n	8002548 <UART_SetConfig+0x2c8>
 8002512:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002516:	d81b      	bhi.n	8002550 <UART_SetConfig+0x2d0>
 8002518:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800251c:	d00c      	beq.n	8002538 <UART_SetConfig+0x2b8>
 800251e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002522:	d815      	bhi.n	8002550 <UART_SetConfig+0x2d0>
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <UART_SetConfig+0x2b0>
 8002528:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800252c:	d008      	beq.n	8002540 <UART_SetConfig+0x2c0>
 800252e:	e00f      	b.n	8002550 <UART_SetConfig+0x2d0>
 8002530:	2300      	movs	r3, #0
 8002532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002536:	e022      	b.n	800257e <UART_SetConfig+0x2fe>
 8002538:	2302      	movs	r3, #2
 800253a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800253e:	e01e      	b.n	800257e <UART_SetConfig+0x2fe>
 8002540:	2304      	movs	r3, #4
 8002542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002546:	e01a      	b.n	800257e <UART_SetConfig+0x2fe>
 8002548:	2308      	movs	r3, #8
 800254a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800254e:	e016      	b.n	800257e <UART_SetConfig+0x2fe>
 8002550:	2310      	movs	r3, #16
 8002552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002556:	e012      	b.n	800257e <UART_SetConfig+0x2fe>
 8002558:	cfff69f3 	.word	0xcfff69f3
 800255c:	40008000 	.word	0x40008000
 8002560:	40013800 	.word	0x40013800
 8002564:	40021000 	.word	0x40021000
 8002568:	40004400 	.word	0x40004400
 800256c:	40004800 	.word	0x40004800
 8002570:	40004c00 	.word	0x40004c00
 8002574:	40005000 	.word	0x40005000
 8002578:	2310      	movs	r3, #16
 800257a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4aae      	ldr	r2, [pc, #696]	@ (800283c <UART_SetConfig+0x5bc>)
 8002584:	4293      	cmp	r3, r2
 8002586:	f040 8097 	bne.w	80026b8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800258a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800258e:	2b08      	cmp	r3, #8
 8002590:	d823      	bhi.n	80025da <UART_SetConfig+0x35a>
 8002592:	a201      	add	r2, pc, #4	@ (adr r2, 8002598 <UART_SetConfig+0x318>)
 8002594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002598:	080025bd 	.word	0x080025bd
 800259c:	080025db 	.word	0x080025db
 80025a0:	080025c5 	.word	0x080025c5
 80025a4:	080025db 	.word	0x080025db
 80025a8:	080025cb 	.word	0x080025cb
 80025ac:	080025db 	.word	0x080025db
 80025b0:	080025db 	.word	0x080025db
 80025b4:	080025db 	.word	0x080025db
 80025b8:	080025d3 	.word	0x080025d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025bc:	f7ff fac2 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 80025c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80025c2:	e010      	b.n	80025e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025c4:	4b9e      	ldr	r3, [pc, #632]	@ (8002840 <UART_SetConfig+0x5c0>)
 80025c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80025c8:	e00d      	b.n	80025e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025ca:	f7ff fa4d 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 80025ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80025d0:	e009      	b.n	80025e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80025d8:	e005      	b.n	80025e6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80025e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 8130 	beq.w	800284e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	4a94      	ldr	r2, [pc, #592]	@ (8002844 <UART_SetConfig+0x5c4>)
 80025f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025f8:	461a      	mov	r2, r3
 80025fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002600:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4413      	add	r3, r2
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	429a      	cmp	r2, r3
 8002610:	d305      	bcc.n	800261e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	429a      	cmp	r2, r3
 800261c:	d903      	bls.n	8002626 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002624:	e113      	b.n	800284e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	2200      	movs	r2, #0
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	60fa      	str	r2, [r7, #12]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002632:	4a84      	ldr	r2, [pc, #528]	@ (8002844 <UART_SetConfig+0x5c4>)
 8002634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002638:	b29b      	uxth	r3, r3
 800263a:	2200      	movs	r2, #0
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002644:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002648:	f7fd fde6 	bl	8000218 <__aeabi_uldivmod>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4610      	mov	r0, r2
 8002652:	4619      	mov	r1, r3
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	020b      	lsls	r3, r1, #8
 800265e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002662:	0202      	lsls	r2, r0, #8
 8002664:	6979      	ldr	r1, [r7, #20]
 8002666:	6849      	ldr	r1, [r1, #4]
 8002668:	0849      	lsrs	r1, r1, #1
 800266a:	2000      	movs	r0, #0
 800266c:	460c      	mov	r4, r1
 800266e:	4605      	mov	r5, r0
 8002670:	eb12 0804 	adds.w	r8, r2, r4
 8002674:	eb43 0905 	adc.w	r9, r3, r5
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	469a      	mov	sl, r3
 8002680:	4693      	mov	fp, r2
 8002682:	4652      	mov	r2, sl
 8002684:	465b      	mov	r3, fp
 8002686:	4640      	mov	r0, r8
 8002688:	4649      	mov	r1, r9
 800268a:	f7fd fdc5 	bl	8000218 <__aeabi_uldivmod>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4613      	mov	r3, r2
 8002694:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800269c:	d308      	bcc.n	80026b0 <UART_SetConfig+0x430>
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026a4:	d204      	bcs.n	80026b0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6a3a      	ldr	r2, [r7, #32]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	e0ce      	b.n	800284e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80026b6:	e0ca      	b.n	800284e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026c0:	d166      	bne.n	8002790 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80026c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d827      	bhi.n	800271a <UART_SetConfig+0x49a>
 80026ca:	a201      	add	r2, pc, #4	@ (adr r2, 80026d0 <UART_SetConfig+0x450>)
 80026cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d0:	080026f5 	.word	0x080026f5
 80026d4:	080026fd 	.word	0x080026fd
 80026d8:	08002705 	.word	0x08002705
 80026dc:	0800271b 	.word	0x0800271b
 80026e0:	0800270b 	.word	0x0800270b
 80026e4:	0800271b 	.word	0x0800271b
 80026e8:	0800271b 	.word	0x0800271b
 80026ec:	0800271b 	.word	0x0800271b
 80026f0:	08002713 	.word	0x08002713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026f4:	f7ff fa26 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 80026f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80026fa:	e014      	b.n	8002726 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026fc:	f7ff fa38 	bl	8001b70 <HAL_RCC_GetPCLK2Freq>
 8002700:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002702:	e010      	b.n	8002726 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002704:	4b4e      	ldr	r3, [pc, #312]	@ (8002840 <UART_SetConfig+0x5c0>)
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002708:	e00d      	b.n	8002726 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800270a:	f7ff f9ad 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 800270e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002710:	e009      	b.n	8002726 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002716:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002718:	e005      	b.n	8002726 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002724:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8090 	beq.w	800284e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002732:	4a44      	ldr	r2, [pc, #272]	@ (8002844 <UART_SetConfig+0x5c4>)
 8002734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002738:	461a      	mov	r2, r3
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002740:	005a      	lsls	r2, r3, #1
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	085b      	lsrs	r3, r3, #1
 8002748:	441a      	add	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002752:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	2b0f      	cmp	r3, #15
 8002758:	d916      	bls.n	8002788 <UART_SetConfig+0x508>
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002760:	d212      	bcs.n	8002788 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	b29b      	uxth	r3, r3
 8002766:	f023 030f 	bic.w	r3, r3, #15
 800276a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	085b      	lsrs	r3, r3, #1
 8002770:	b29b      	uxth	r3, r3
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	b29a      	uxth	r2, r3
 8002778:	8bfb      	ldrh	r3, [r7, #30]
 800277a:	4313      	orrs	r3, r2
 800277c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	8bfa      	ldrh	r2, [r7, #30]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	e062      	b.n	800284e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800278e:	e05e      	b.n	800284e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002790:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002794:	2b08      	cmp	r3, #8
 8002796:	d828      	bhi.n	80027ea <UART_SetConfig+0x56a>
 8002798:	a201      	add	r2, pc, #4	@ (adr r2, 80027a0 <UART_SetConfig+0x520>)
 800279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279e:	bf00      	nop
 80027a0:	080027c5 	.word	0x080027c5
 80027a4:	080027cd 	.word	0x080027cd
 80027a8:	080027d5 	.word	0x080027d5
 80027ac:	080027eb 	.word	0x080027eb
 80027b0:	080027db 	.word	0x080027db
 80027b4:	080027eb 	.word	0x080027eb
 80027b8:	080027eb 	.word	0x080027eb
 80027bc:	080027eb 	.word	0x080027eb
 80027c0:	080027e3 	.word	0x080027e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027c4:	f7ff f9be 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 80027c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80027ca:	e014      	b.n	80027f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027cc:	f7ff f9d0 	bl	8001b70 <HAL_RCC_GetPCLK2Freq>
 80027d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80027d2:	e010      	b.n	80027f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002840 <UART_SetConfig+0x5c0>)
 80027d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80027d8:	e00d      	b.n	80027f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027da:	f7ff f945 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 80027de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80027e0:	e009      	b.n	80027f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80027e8:	e005      	b.n	80027f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80027f4:	bf00      	nop
    }

    if (pclk != 0U)
 80027f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d028      	beq.n	800284e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	4a10      	ldr	r2, [pc, #64]	@ (8002844 <UART_SetConfig+0x5c4>)
 8002802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002806:	461a      	mov	r2, r3
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	fbb3 f2f2 	udiv	r2, r3, r2
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	085b      	lsrs	r3, r3, #1
 8002814:	441a      	add	r2, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
 800281e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	2b0f      	cmp	r3, #15
 8002824:	d910      	bls.n	8002848 <UART_SetConfig+0x5c8>
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800282c:	d20c      	bcs.n	8002848 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	b29a      	uxth	r2, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	60da      	str	r2, [r3, #12]
 8002838:	e009      	b.n	800284e <UART_SetConfig+0x5ce>
 800283a:	bf00      	nop
 800283c:	40008000 	.word	0x40008000
 8002840:	00f42400 	.word	0x00f42400
 8002844:	08002f44 	.word	0x08002f44
      }
      else
      {
        ret = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2201      	movs	r2, #1
 8002852:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2201      	movs	r2, #1
 800285a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2200      	movs	r2, #0
 8002862:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2200      	movs	r2, #0
 8002868:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800286a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800286e:	4618      	mov	r0, r3
 8002870:	3730      	adds	r7, #48	@ 0x30
 8002872:	46bd      	mov	sp, r7
 8002874:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002878 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01a      	beq.n	800298e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002972:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002976:	d10a      	bne.n	800298e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	605a      	str	r2, [r3, #4]
  }
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b098      	sub	sp, #96	@ 0x60
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029cc:	f7fe f89e 	bl	8000b0c <HAL_GetTick>
 80029d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d12f      	bne.n	8002a40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029e8:	2200      	movs	r2, #0
 80029ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f88e 	bl	8002b10 <UART_WaitOnFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d022      	beq.n	8002a40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a02:	e853 3f00 	ldrex	r3, [r3]
 8002a06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a20:	e841 2300 	strex	r3, r2, [r1]
 8002a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1e6      	bne.n	80029fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e063      	b.n	8002b08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d149      	bne.n	8002ae2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a56:	2200      	movs	r2, #0
 8002a58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f857 	bl	8002b10 <UART_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d03c      	beq.n	8002ae2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	e853 3f00 	ldrex	r3, [r3]
 8002a74:	623b      	str	r3, [r7, #32]
   return(result);
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a86:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a88:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a8e:	e841 2300 	strex	r3, r2, [r1]
 8002a92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1e6      	bne.n	8002a68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3308      	adds	r3, #8
 8002aa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	e853 3f00 	ldrex	r3, [r3]
 8002aa8:	60fb      	str	r3, [r7, #12]
   return(result);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3308      	adds	r3, #8
 8002ab8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002aba:	61fa      	str	r2, [r7, #28]
 8002abc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abe:	69b9      	ldr	r1, [r7, #24]
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	e841 2300 	strex	r3, r2, [r1]
 8002ac6:	617b      	str	r3, [r7, #20]
   return(result);
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1e5      	bne.n	8002a9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e012      	b.n	8002b08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3758      	adds	r7, #88	@ 0x58
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b20:	e04f      	b.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b28:	d04b      	beq.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2a:	f7fd ffef 	bl	8000b0c <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d302      	bcc.n	8002b40 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e04e      	b.n	8002be2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d037      	beq.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b80      	cmp	r3, #128	@ 0x80
 8002b56:	d034      	beq.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b40      	cmp	r3, #64	@ 0x40
 8002b5c:	d031      	beq.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d110      	bne.n	8002b8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2208      	movs	r2, #8
 8002b72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f838 	bl	8002bea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e029      	b.n	8002be2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b9c:	d111      	bne.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ba6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f81e 	bl	8002bea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e00f      	b.n	8002be2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	69da      	ldr	r2, [r3, #28]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	bf0c      	ite	eq
 8002bd2:	2301      	moveq	r3, #1
 8002bd4:	2300      	movne	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d0a0      	beq.n	8002b22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b095      	sub	sp, #84	@ 0x54
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bfa:	e853 3f00 	ldrex	r3, [r3]
 8002bfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c10:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c18:	e841 2300 	strex	r3, r2, [r1]
 8002c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1e6      	bne.n	8002bf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	3308      	adds	r3, #8
 8002c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	e853 3f00 	ldrex	r3, [r3]
 8002c32:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c3a:	f023 0301 	bic.w	r3, r3, #1
 8002c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	3308      	adds	r3, #8
 8002c46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c50:	e841 2300 	strex	r3, r2, [r1]
 8002c54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1e3      	bne.n	8002c24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d118      	bne.n	8002c96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	e853 3f00 	ldrex	r3, [r3]
 8002c70:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f023 0310 	bic.w	r3, r3, #16
 8002c78:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c86:	6979      	ldr	r1, [r7, #20]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	e841 2300 	strex	r3, r2, [r1]
 8002c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1e6      	bne.n	8002c64 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002caa:	bf00      	nop
 8002cac:	3754      	adds	r7, #84	@ 0x54
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b085      	sub	sp, #20
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_UARTEx_DisableFifoMode+0x16>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e027      	b.n	8002d1c <HAL_UARTEx_DisableFifoMode+0x66>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2224      	movs	r2, #36	@ 0x24
 8002cd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8002cfa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e02d      	b.n	8002d9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2224      	movs	r2, #36	@ 0x24
 8002d4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f84f 	bl	8002e20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e02d      	b.n	8002e18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2224      	movs	r2, #36	@ 0x24
 8002dc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f811 	bl	8002e20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d108      	bne.n	8002e42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002e40:	e031      	b.n	8002ea6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002e42:	2308      	movs	r3, #8
 8002e44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002e46:	2308      	movs	r3, #8
 8002e48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	0e5b      	lsrs	r3, r3, #25
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	0f5b      	lsrs	r3, r3, #29
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002e6a:	7bbb      	ldrb	r3, [r7, #14]
 8002e6c:	7b3a      	ldrb	r2, [r7, #12]
 8002e6e:	4911      	ldr	r1, [pc, #68]	@ (8002eb4 <UARTEx_SetNbDataToProcess+0x94>)
 8002e70:	5c8a      	ldrb	r2, [r1, r2]
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002e76:	7b3a      	ldrb	r2, [r7, #12]
 8002e78:	490f      	ldr	r1, [pc, #60]	@ (8002eb8 <UARTEx_SetNbDataToProcess+0x98>)
 8002e7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002e7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	7b7a      	ldrb	r2, [r7, #13]
 8002e8c:	4909      	ldr	r1, [pc, #36]	@ (8002eb4 <UARTEx_SetNbDataToProcess+0x94>)
 8002e8e:	5c8a      	ldrb	r2, [r1, r2]
 8002e90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002e94:	7b7a      	ldrb	r2, [r7, #13]
 8002e96:	4908      	ldr	r1, [pc, #32]	@ (8002eb8 <UARTEx_SetNbDataToProcess+0x98>)
 8002e98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002e9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	08002f5c 	.word	0x08002f5c
 8002eb8:	08002f64 	.word	0x08002f64

08002ebc <memset>:
 8002ebc:	4402      	add	r2, r0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d100      	bne.n	8002ec6 <memset+0xa>
 8002ec4:	4770      	bx	lr
 8002ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eca:	e7f9      	b.n	8002ec0 <memset+0x4>

08002ecc <__libc_init_array>:
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	4d0d      	ldr	r5, [pc, #52]	@ (8002f04 <__libc_init_array+0x38>)
 8002ed0:	4c0d      	ldr	r4, [pc, #52]	@ (8002f08 <__libc_init_array+0x3c>)
 8002ed2:	1b64      	subs	r4, r4, r5
 8002ed4:	10a4      	asrs	r4, r4, #2
 8002ed6:	2600      	movs	r6, #0
 8002ed8:	42a6      	cmp	r6, r4
 8002eda:	d109      	bne.n	8002ef0 <__libc_init_array+0x24>
 8002edc:	4d0b      	ldr	r5, [pc, #44]	@ (8002f0c <__libc_init_array+0x40>)
 8002ede:	4c0c      	ldr	r4, [pc, #48]	@ (8002f10 <__libc_init_array+0x44>)
 8002ee0:	f000 f818 	bl	8002f14 <_init>
 8002ee4:	1b64      	subs	r4, r4, r5
 8002ee6:	10a4      	asrs	r4, r4, #2
 8002ee8:	2600      	movs	r6, #0
 8002eea:	42a6      	cmp	r6, r4
 8002eec:	d105      	bne.n	8002efa <__libc_init_array+0x2e>
 8002eee:	bd70      	pop	{r4, r5, r6, pc}
 8002ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef4:	4798      	blx	r3
 8002ef6:	3601      	adds	r6, #1
 8002ef8:	e7ee      	b.n	8002ed8 <__libc_init_array+0xc>
 8002efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002efe:	4798      	blx	r3
 8002f00:	3601      	adds	r6, #1
 8002f02:	e7f2      	b.n	8002eea <__libc_init_array+0x1e>
 8002f04:	08002f74 	.word	0x08002f74
 8002f08:	08002f74 	.word	0x08002f74
 8002f0c:	08002f74 	.word	0x08002f74
 8002f10:	08002f78 	.word	0x08002f78

08002f14 <_init>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	bf00      	nop
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr

08002f20 <_fini>:
 8002f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f22:	bf00      	nop
 8002f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f26:	bc08      	pop	{r3}
 8002f28:	469e      	mov	lr, r3
 8002f2a:	4770      	bx	lr
