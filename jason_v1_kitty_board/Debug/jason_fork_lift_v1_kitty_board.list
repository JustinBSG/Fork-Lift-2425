
jason_fork_lift_v1_kitty_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a54  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08009c38  08009c38  0000ac38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e78  08009e78  0000b100  2**0
                  CONTENTS
  4 .ARM          00000008  08009e78  08009e78  0000ae78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e80  08009e80  0000b100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e80  08009e80  0000ae80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e84  08009e84  0000ae84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  08009e88  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  20000100  08009f88  0000b100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  08009f88  0000b5b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015296  00000000  00000000  0000b130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003192  00000000  00000000  000203c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  00023558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e0f  00000000  00000000  000247a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233dc  00000000  00000000  000255b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f1d  00000000  00000000  00048993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc425  00000000  00000000  000608b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ccd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005794  00000000  00000000  0013cd18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  001424ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000100 	.word	0x20000100
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009c1c 	.word	0x08009c1c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000104 	.word	0x20000104
 800021c:	08009c1c 	.word	0x08009c1c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b96a 	b.w	8000fc4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	460c      	mov	r4, r1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d14e      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d14:	4694      	mov	ip, r2
 8000d16:	458c      	cmp	ip, r1
 8000d18:	4686      	mov	lr, r0
 8000d1a:	fab2 f282 	clz	r2, r2
 8000d1e:	d962      	bls.n	8000de6 <__udivmoddi4+0xde>
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0320 	rsb	r3, r2, #32
 8000d26:	4091      	lsls	r1, r2
 8000d28:	fa20 f303 	lsr.w	r3, r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	4319      	orrs	r1, r3
 8000d32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3a:	fa1f f68c 	uxth.w	r6, ip
 8000d3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d46:	fb07 1114 	mls	r1, r7, r4, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb04 f106 	mul.w	r1, r4, r6
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d5e:	f080 8112 	bcs.w	8000f86 <__udivmoddi4+0x27e>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 810f 	bls.w	8000f86 <__udivmoddi4+0x27e>
 8000d68:	3c02      	subs	r4, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a59      	subs	r1, r3, r1
 8000d6e:	fa1f f38e 	uxth.w	r3, lr
 8000d72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d76:	fb07 1110 	mls	r1, r7, r0, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb00 f606 	mul.w	r6, r0, r6
 8000d82:	429e      	cmp	r6, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x94>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d8e:	f080 80fc 	bcs.w	8000f8a <__udivmoddi4+0x282>
 8000d92:	429e      	cmp	r6, r3
 8000d94:	f240 80f9 	bls.w	8000f8a <__udivmoddi4+0x282>
 8000d98:	4463      	add	r3, ip
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000da2:	2100      	movs	r1, #0
 8000da4:	b11d      	cbz	r5, 8000dae <__udivmoddi4+0xa6>
 8000da6:	40d3      	lsrs	r3, r2
 8000da8:	2200      	movs	r2, #0
 8000daa:	e9c5 3200 	strd	r3, r2, [r5]
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d905      	bls.n	8000dc2 <__udivmoddi4+0xba>
 8000db6:	b10d      	cbz	r5, 8000dbc <__udivmoddi4+0xb4>
 8000db8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e7f5      	b.n	8000dae <__udivmoddi4+0xa6>
 8000dc2:	fab3 f183 	clz	r1, r3
 8000dc6:	2900      	cmp	r1, #0
 8000dc8:	d146      	bne.n	8000e58 <__udivmoddi4+0x150>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d302      	bcc.n	8000dd4 <__udivmoddi4+0xcc>
 8000dce:	4290      	cmp	r0, r2
 8000dd0:	f0c0 80f0 	bcc.w	8000fb4 <__udivmoddi4+0x2ac>
 8000dd4:	1a86      	subs	r6, r0, r2
 8000dd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dda:	2001      	movs	r0, #1
 8000ddc:	2d00      	cmp	r5, #0
 8000dde:	d0e6      	beq.n	8000dae <__udivmoddi4+0xa6>
 8000de0:	e9c5 6300 	strd	r6, r3, [r5]
 8000de4:	e7e3      	b.n	8000dae <__udivmoddi4+0xa6>
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	f040 8090 	bne.w	8000f0c <__udivmoddi4+0x204>
 8000dec:	eba1 040c 	sub.w	r4, r1, ip
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e02:	fb08 4416 	mls	r4, r8, r6, r4
 8000e06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e0a:	fb07 f006 	mul.w	r0, r7, r6
 8000e0e:	4298      	cmp	r0, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x11c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x11a>
 8000e1c:	4298      	cmp	r0, r3
 8000e1e:	f200 80cd 	bhi.w	8000fbc <__udivmoddi4+0x2b4>
 8000e22:	4626      	mov	r6, r4
 8000e24:	1a1c      	subs	r4, r3, r0
 8000e26:	fa1f f38e 	uxth.w	r3, lr
 8000e2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb00 f707 	mul.w	r7, r0, r7
 8000e3a:	429f      	cmp	r7, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x148>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x146>
 8000e48:	429f      	cmp	r7, r3
 8000e4a:	f200 80b0 	bhi.w	8000fae <__udivmoddi4+0x2a6>
 8000e4e:	4620      	mov	r0, r4
 8000e50:	1bdb      	subs	r3, r3, r7
 8000e52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e56:	e7a5      	b.n	8000da4 <__udivmoddi4+0x9c>
 8000e58:	f1c1 0620 	rsb	r6, r1, #32
 8000e5c:	408b      	lsls	r3, r1
 8000e5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e62:	431f      	orrs	r7, r3
 8000e64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e68:	fa04 f301 	lsl.w	r3, r4, r1
 8000e6c:	ea43 030c 	orr.w	r3, r3, ip
 8000e70:	40f4      	lsrs	r4, r6
 8000e72:	fa00 f801 	lsl.w	r8, r0, r1
 8000e76:	0c38      	lsrs	r0, r7, #16
 8000e78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e80:	fa1f fc87 	uxth.w	ip, r7
 8000e84:	fb00 441e 	mls	r4, r0, lr, r4
 8000e88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e90:	45a1      	cmp	r9, r4
 8000e92:	fa02 f201 	lsl.w	r2, r2, r1
 8000e96:	d90a      	bls.n	8000eae <__udivmoddi4+0x1a6>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e9e:	f080 8084 	bcs.w	8000faa <__udivmoddi4+0x2a2>
 8000ea2:	45a1      	cmp	r9, r4
 8000ea4:	f240 8081 	bls.w	8000faa <__udivmoddi4+0x2a2>
 8000ea8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	eba4 0409 	sub.w	r4, r4, r9
 8000eb2:	fa1f f983 	uxth.w	r9, r3
 8000eb6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eba:	fb00 4413 	mls	r4, r0, r3, r4
 8000ebe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ec6:	45a4      	cmp	ip, r4
 8000ec8:	d907      	bls.n	8000eda <__udivmoddi4+0x1d2>
 8000eca:	193c      	adds	r4, r7, r4
 8000ecc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ed0:	d267      	bcs.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed2:	45a4      	cmp	ip, r4
 8000ed4:	d965      	bls.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed6:	3b02      	subs	r3, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ede:	fba0 9302 	umull	r9, r3, r0, r2
 8000ee2:	eba4 040c 	sub.w	r4, r4, ip
 8000ee6:	429c      	cmp	r4, r3
 8000ee8:	46ce      	mov	lr, r9
 8000eea:	469c      	mov	ip, r3
 8000eec:	d351      	bcc.n	8000f92 <__udivmoddi4+0x28a>
 8000eee:	d04e      	beq.n	8000f8e <__udivmoddi4+0x286>
 8000ef0:	b155      	cbz	r5, 8000f08 <__udivmoddi4+0x200>
 8000ef2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ef6:	eb64 040c 	sbc.w	r4, r4, ip
 8000efa:	fa04 f606 	lsl.w	r6, r4, r6
 8000efe:	40cb      	lsrs	r3, r1
 8000f00:	431e      	orrs	r6, r3
 8000f02:	40cc      	lsrs	r4, r1
 8000f04:	e9c5 6400 	strd	r6, r4, [r5]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	e750      	b.n	8000dae <__udivmoddi4+0xa6>
 8000f0c:	f1c2 0320 	rsb	r3, r2, #32
 8000f10:	fa20 f103 	lsr.w	r1, r0, r3
 8000f14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f18:	fa24 f303 	lsr.w	r3, r4, r3
 8000f1c:	4094      	lsls	r4, r2
 8000f1e:	430c      	orrs	r4, r1
 8000f20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f28:	fa1f f78c 	uxth.w	r7, ip
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3110 	mls	r1, r8, r0, r3
 8000f34:	0c23      	lsrs	r3, r4, #16
 8000f36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f3a:	fb00 f107 	mul.w	r1, r0, r7
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x24c>
 8000f42:	eb1c 0303 	adds.w	r3, ip, r3
 8000f46:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f4a:	d22c      	bcs.n	8000fa6 <__udivmoddi4+0x29e>
 8000f4c:	4299      	cmp	r1, r3
 8000f4e:	d92a      	bls.n	8000fa6 <__udivmoddi4+0x29e>
 8000f50:	3802      	subs	r0, #2
 8000f52:	4463      	add	r3, ip
 8000f54:	1a5b      	subs	r3, r3, r1
 8000f56:	b2a4      	uxth	r4, r4
 8000f58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f64:	fb01 f307 	mul.w	r3, r1, r7
 8000f68:	42a3      	cmp	r3, r4
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x276>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f74:	d213      	bcs.n	8000f9e <__udivmoddi4+0x296>
 8000f76:	42a3      	cmp	r3, r4
 8000f78:	d911      	bls.n	8000f9e <__udivmoddi4+0x296>
 8000f7a:	3902      	subs	r1, #2
 8000f7c:	4464      	add	r4, ip
 8000f7e:	1ae4      	subs	r4, r4, r3
 8000f80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f84:	e739      	b.n	8000dfa <__udivmoddi4+0xf2>
 8000f86:	4604      	mov	r4, r0
 8000f88:	e6f0      	b.n	8000d6c <__udivmoddi4+0x64>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e706      	b.n	8000d9c <__udivmoddi4+0x94>
 8000f8e:	45c8      	cmp	r8, r9
 8000f90:	d2ae      	bcs.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7a8      	b.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f9e:	4631      	mov	r1, r6
 8000fa0:	e7ed      	b.n	8000f7e <__udivmoddi4+0x276>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	e799      	b.n	8000eda <__udivmoddi4+0x1d2>
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	e7d4      	b.n	8000f54 <__udivmoddi4+0x24c>
 8000faa:	46d6      	mov	lr, sl
 8000fac:	e77f      	b.n	8000eae <__udivmoddi4+0x1a6>
 8000fae:	4463      	add	r3, ip
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	e74d      	b.n	8000e50 <__udivmoddi4+0x148>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e70f      	b.n	8000ddc <__udivmoddi4+0xd4>
 8000fbc:	3e02      	subs	r6, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	e730      	b.n	8000e24 <__udivmoddi4+0x11c>
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <follow_auto_path>:

bool prev_auto_path_switch = false;

AutoPathSelection auto_path_selection = LEFT_PATH;

void follow_auto_path(AutoPathSelection auto_path_selection) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b092      	sub	sp, #72	@ 0x48
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  switch (auto_path_selection) {
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d070      	beq.n	80010ba <follow_auto_path+0xf2>
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	f300 80bc 	bgt.w	8001156 <follow_auto_path+0x18e>
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <follow_auto_path+0x20>
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d04e      	beq.n	8001084 <follow_auto_path+0xbc>
 8000fe6:	e0b6      	b.n	8001156 <follow_auto_path+0x18e>
    case LEFT_PATH: {
      BaseVelocity target_vel = {0, ROBOT_MAX_Y_VELOCITY * -0.5, 0};
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	633b      	str	r3, [r7, #48]	@ 0x30
 8000fee:	4b73      	ldr	r3, [pc, #460]	@ (80011bc <follow_auto_path+0x1f4>)
 8000ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ff2:	f04f 0300 	mov.w	r3, #0
 8000ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
      movement_control(target_vel);
 8000ff8:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8000ffc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001000:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001004:	eeb0 0a66 	vmov.f32	s0, s13
 8001008:	eef0 0a47 	vmov.f32	s1, s14
 800100c:	eeb0 1a67 	vmov.f32	s2, s15
 8001010:	f002 fa22 	bl	8003458 <movement_control>
      HAL_Delay(LEFT_PATH_TIME_1);
 8001014:	f240 30b6 	movw	r0, #950	@ 0x3b6
 8001018:	f003 fb6e 	bl	80046f8 <HAL_Delay>
      target_vel.x_vel = 0;
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	633b      	str	r3, [r7, #48]	@ 0x30
      target_vel.y_vel = ROBOT_MAX_X_VELOCITY * 0.05;
 8001022:	4b67      	ldr	r3, [pc, #412]	@ (80011c0 <follow_auto_path+0x1f8>)
 8001024:	637b      	str	r3, [r7, #52]	@ 0x34
      target_vel.z_vel = 0;
 8001026:	f04f 0300 	mov.w	r3, #0
 800102a:	63bb      	str	r3, [r7, #56]	@ 0x38
      movement_control(target_vel);
 800102c:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001030:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001034:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001038:	eeb0 0a66 	vmov.f32	s0, s13
 800103c:	eef0 0a47 	vmov.f32	s1, s14
 8001040:	eeb0 1a67 	vmov.f32	s2, s15
 8001044:	f002 fa08 	bl	8003458 <movement_control>
      HAL_Delay(LEFT_PATH_TIME_2);
 8001048:	20c8      	movs	r0, #200	@ 0xc8
 800104a:	f003 fb55 	bl	80046f8 <HAL_Delay>
      target_vel.x_vel = ROBOT_MAX_X_VELOCITY * -0.5;
 800104e:	4b5b      	ldr	r3, [pc, #364]	@ (80011bc <follow_auto_path+0x1f4>)
 8001050:	633b      	str	r3, [r7, #48]	@ 0x30
      target_vel.y_vel = 0;
 8001052:	f04f 0300 	mov.w	r3, #0
 8001056:	637b      	str	r3, [r7, #52]	@ 0x34
      target_vel.z_vel = 0;
 8001058:	f04f 0300 	mov.w	r3, #0
 800105c:	63bb      	str	r3, [r7, #56]	@ 0x38
      movement_control(target_vel);
 800105e:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001062:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001066:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800106a:	eeb0 0a66 	vmov.f32	s0, s13
 800106e:	eef0 0a47 	vmov.f32	s1, s14
 8001072:	eeb0 1a67 	vmov.f32	s2, s15
 8001076:	f002 f9ef 	bl	8003458 <movement_control>
      HAL_Delay(LEFT_PATH_TIME_3);
 800107a:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800107e:	f003 fb3b 	bl	80046f8 <HAL_Delay>
      break;
 8001082:	e080      	b.n	8001186 <follow_auto_path+0x1be>
    }
    case MID_PATH: {
      BaseVelocity target_vel = {0, ROBOT_MAX_Y_VELOCITY * -0.5, 0};
 8001084:	f04f 0300 	mov.w	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	@ 0x24
 800108a:	4b4c      	ldr	r3, [pc, #304]	@ (80011bc <follow_auto_path+0x1f4>)
 800108c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	62fb      	str	r3, [r7, #44]	@ 0x2c
      movement_control(target_vel);
 8001094:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001098:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800109c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80010a0:	eeb0 0a66 	vmov.f32	s0, s13
 80010a4:	eef0 0a47 	vmov.f32	s1, s14
 80010a8:	eeb0 1a67 	vmov.f32	s2, s15
 80010ac:	f002 f9d4 	bl	8003458 <movement_control>
      HAL_Delay(MID_PATH_TIME_1);
 80010b0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80010b4:	f003 fb20 	bl	80046f8 <HAL_Delay>
      break;
 80010b8:	e065      	b.n	8001186 <follow_auto_path+0x1be>
    }
    case RIGHT_PATH: {
      BaseVelocity target_vel = {0, ROBOT_MAX_Y_VELOCITY * -0.5, 0};
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	4b3e      	ldr	r3, [pc, #248]	@ (80011bc <follow_auto_path+0x1f4>)
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	f04f 0300 	mov.w	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
      movement_control(target_vel);
 80010ca:	edd7 6a06 	vldr	s13, [r7, #24]
 80010ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80010d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80010d6:	eeb0 0a66 	vmov.f32	s0, s13
 80010da:	eef0 0a47 	vmov.f32	s1, s14
 80010de:	eeb0 1a67 	vmov.f32	s2, s15
 80010e2:	f002 f9b9 	bl	8003458 <movement_control>
      HAL_Delay(RIGHT_PATH_TIME_1);
 80010e6:	f240 30b6 	movw	r0, #950	@ 0x3b6
 80010ea:	f003 fb05 	bl	80046f8 <HAL_Delay>
      target_vel.x_vel = 0;
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
      target_vel.y_vel = ROBOT_MAX_X_VELOCITY * 0.05;
 80010f4:	4b32      	ldr	r3, [pc, #200]	@ (80011c0 <follow_auto_path+0x1f8>)
 80010f6:	61fb      	str	r3, [r7, #28]
      target_vel.z_vel = 0;
 80010f8:	f04f 0300 	mov.w	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
      movement_control(target_vel);
 80010fe:	edd7 6a06 	vldr	s13, [r7, #24]
 8001102:	ed97 7a07 	vldr	s14, [r7, #28]
 8001106:	edd7 7a08 	vldr	s15, [r7, #32]
 800110a:	eeb0 0a66 	vmov.f32	s0, s13
 800110e:	eef0 0a47 	vmov.f32	s1, s14
 8001112:	eeb0 1a67 	vmov.f32	s2, s15
 8001116:	f002 f99f 	bl	8003458 <movement_control>
      HAL_Delay(RIGHT_PATH_TIME_2);
 800111a:	20c8      	movs	r0, #200	@ 0xc8
 800111c:	f003 faec 	bl	80046f8 <HAL_Delay>
      target_vel.x_vel = ROBOT_MAX_X_VELOCITY * 0.5;
 8001120:	4b28      	ldr	r3, [pc, #160]	@ (80011c4 <follow_auto_path+0x1fc>)
 8001122:	61bb      	str	r3, [r7, #24]
      target_vel.y_vel = 0;
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
      target_vel.z_vel = 0;
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
      movement_control(target_vel);
 8001130:	edd7 6a06 	vldr	s13, [r7, #24]
 8001134:	ed97 7a07 	vldr	s14, [r7, #28]
 8001138:	edd7 7a08 	vldr	s15, [r7, #32]
 800113c:	eeb0 0a66 	vmov.f32	s0, s13
 8001140:	eef0 0a47 	vmov.f32	s1, s14
 8001144:	eeb0 1a67 	vmov.f32	s2, s15
 8001148:	f002 f986 	bl	8003458 <movement_control>
      HAL_Delay(RIGHT_PATH_TIME_3);
 800114c:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001150:	f003 fad2 	bl	80046f8 <HAL_Delay>
      break;
 8001154:	e017      	b.n	8001186 <follow_auto_path+0x1be>
    }
    default: {
      BaseVelocity target_vel = {0, 0, 0};
 8001156:	f04f 0300 	mov.w	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
      movement_control(target_vel);
 8001168:	edd7 6a03 	vldr	s13, [r7, #12]
 800116c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001170:	edd7 7a05 	vldr	s15, [r7, #20]
 8001174:	eeb0 0a66 	vmov.f32	s0, s13
 8001178:	eef0 0a47 	vmov.f32	s1, s14
 800117c:	eeb0 1a67 	vmov.f32	s2, s15
 8001180:	f002 f96a 	bl	8003458 <movement_control>
      break;
 8001184:	bf00      	nop
    }
  }
  BaseVelocity target_vel = {0, 0, 0};
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	643b      	str	r3, [r7, #64]	@ 0x40
 8001192:	f04f 0300 	mov.w	r3, #0
 8001196:	647b      	str	r3, [r7, #68]	@ 0x44
  movement_control(target_vel);
 8001198:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800119c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80011a0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80011a4:	eeb0 0a66 	vmov.f32	s0, s13
 80011a8:	eef0 0a47 	vmov.f32	s1, s14
 80011ac:	eeb0 1a67 	vmov.f32	s2, s15
 80011b0:	f002 f952 	bl	8003458 <movement_control>
 80011b4:	bf00      	nop
 80011b6:	3748      	adds	r7, #72	@ 0x48
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	c01942c4 	.word	0xc01942c4
 80011c0:	3e7537a0 	.word	0x3e7537a0
 80011c4:	401942c4 	.word	0x401942c4

080011c8 <parse_controller_data>:

char controller_buffer[41] = "";

ControllerState controller_state = {.r1 = false, .r2 = false, .r3 = false, .l1 = false, .l2 = false, .l3 = false, .cross = false, .circle = false, .triangle = false, .square = false, .up = false, .down = false, .left = false, .right = false, .l_stick_x = 0, .l_stick_y = 0, .r_stick_x = 0, .r_stick_y = 0, .l2_pressure = 0, .r2_pressure = 0, .ps_button = false, .share_button = false, .options_button = false};

uint8_t parse_controller_data(const char* input, ControllerState* data) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b098      	sub	sp, #96	@ 0x60
 80011cc:	af08      	add	r7, sp, #32
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  if (input == NULL || data == NULL) {
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <parse_controller_data+0x16>
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d104      	bne.n	80011e8 <parse_controller_data+0x20>
    printf("Invalid input or data pointer\n");
 80011de:	4887      	ldr	r0, [pc, #540]	@ (80013fc <parse_controller_data+0x234>)
 80011e0:	f007 fa1a 	bl	8008618 <puts>
    return 1;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e105      	b.n	80013f4 <parse_controller_data+0x22c>
  int buttons_value;
  char l_stick_x_str[5], l_stick_y_str[5], r_stick_x_str[5], r_stick_y_str[5];
  int l2_pressure, r2_pressure;
  int misc_buttons;

  int parse_num = sscanf(input, "c:%1x,%03x,%4s,%4s,%4s,%4s,%d,%d,%1x", &dpad_value, &buttons_value, l_stick_y_str, l_stick_x_str, r_stick_y_str, r_stick_x_str, &l2_pressure, &r2_pressure, &misc_buttons);
 80011e8:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80011ec:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	9306      	str	r3, [sp, #24]
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	9305      	str	r3, [sp, #20]
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	9304      	str	r3, [sp, #16]
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	9303      	str	r3, [sp, #12]
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	9302      	str	r3, [sp, #8]
 800120e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	460b      	mov	r3, r1
 800121c:	4978      	ldr	r1, [pc, #480]	@ (8001400 <parse_controller_data+0x238>)
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f006 ffec 	bl	80081fc <siscanf>
 8001224:	63f8      	str	r0, [r7, #60]	@ 0x3c

  if (parse_num != 9) {
 8001226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001228:	2b09      	cmp	r3, #9
 800122a:	d004      	beq.n	8001236 <parse_controller_data+0x6e>
    printf("Error parsing input string\n");
 800122c:	4875      	ldr	r0, [pc, #468]	@ (8001404 <parse_controller_data+0x23c>)
 800122e:	f007 f9f3 	bl	8008618 <puts>
    return 2;
 8001232:	2302      	movs	r3, #2
 8001234:	e0de      	b.n	80013f4 <parse_controller_data+0x22c>
  }

  data->up = dpad_value & 0x1;
 8001236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	bf14      	ite	ne
 8001240:	2301      	movne	r3, #1
 8001242:	2300      	moveq	r3, #0
 8001244:	b2da      	uxtb	r2, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	729a      	strb	r2, [r3, #10]
  data->down = dpad_value & 0x2;
 800124a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	bf14      	ite	ne
 8001254:	2301      	movne	r3, #1
 8001256:	2300      	moveq	r3, #0
 8001258:	b2da      	uxtb	r2, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	72da      	strb	r2, [r3, #11]
  data->right = dpad_value & 0x4;
 800125e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf14      	ite	ne
 8001268:	2301      	movne	r3, #1
 800126a:	2300      	moveq	r3, #0
 800126c:	b2da      	uxtb	r2, r3
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	735a      	strb	r2, [r3, #13]
  data->left = dpad_value & 0x8;
 8001272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001274:	f003 0308 	and.w	r3, r3, #8
 8001278:	2b00      	cmp	r3, #0
 800127a:	bf14      	ite	ne
 800127c:	2301      	movne	r3, #1
 800127e:	2300      	moveq	r3, #0
 8001280:	b2da      	uxtb	r2, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	731a      	strb	r2, [r3, #12]

  data->cross = buttons_value & 0x001;
 8001286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf14      	ite	ne
 8001290:	2301      	movne	r3, #1
 8001292:	2300      	moveq	r3, #0
 8001294:	b2da      	uxtb	r2, r3
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	719a      	strb	r2, [r3, #6]
  data->circle = buttons_value & 0x002;
 800129a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	bf14      	ite	ne
 80012a4:	2301      	movne	r3, #1
 80012a6:	2300      	moveq	r3, #0
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	71da      	strb	r2, [r3, #7]
  data->square = buttons_value & 0x004;
 80012ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	bf14      	ite	ne
 80012b8:	2301      	movne	r3, #1
 80012ba:	2300      	moveq	r3, #0
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	725a      	strb	r2, [r3, #9]
  data->triangle = buttons_value & 0x008;
 80012c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bf14      	ite	ne
 80012cc:	2301      	movne	r3, #1
 80012ce:	2300      	moveq	r3, #0
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	721a      	strb	r2, [r3, #8]
  data->l1 = buttons_value & 0x010;
 80012d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012d8:	f003 0310 	and.w	r3, r3, #16
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bf14      	ite	ne
 80012e0:	2301      	movne	r3, #1
 80012e2:	2300      	moveq	r3, #0
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	70da      	strb	r2, [r3, #3]
  data->r1 = buttons_value & 0x020;
 80012ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012ec:	f003 0320 	and.w	r3, r3, #32
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	bf14      	ite	ne
 80012f4:	2301      	movne	r3, #1
 80012f6:	2300      	moveq	r3, #0
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	701a      	strb	r2, [r3, #0]
  data->l2 = buttons_value & 0x040;
 80012fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001304:	2b00      	cmp	r3, #0
 8001306:	bf14      	ite	ne
 8001308:	2301      	movne	r3, #1
 800130a:	2300      	moveq	r3, #0
 800130c:	b2da      	uxtb	r2, r3
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	711a      	strb	r2, [r3, #4]
  data->r2 = buttons_value & 0x080;
 8001312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001318:	2b00      	cmp	r3, #0
 800131a:	bf14      	ite	ne
 800131c:	2301      	movne	r3, #1
 800131e:	2300      	moveq	r3, #0
 8001320:	b2da      	uxtb	r2, r3
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	705a      	strb	r2, [r3, #1]
  data->l3 = buttons_value & 0x100;
 8001326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800132c:	2b00      	cmp	r3, #0
 800132e:	bf14      	ite	ne
 8001330:	2301      	movne	r3, #1
 8001332:	2300      	moveq	r3, #0
 8001334:	b2da      	uxtb	r2, r3
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	715a      	strb	r2, [r3, #5]
  data->r3 = buttons_value & 0x200;
 800133a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800133c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001340:	2b00      	cmp	r3, #0
 8001342:	bf14      	ite	ne
 8001344:	2301      	movne	r3, #1
 8001346:	2300      	moveq	r3, #0
 8001348:	b2da      	uxtb	r2, r3
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	709a      	strb	r2, [r3, #2]

  data->l_stick_y = (int8_t)strtol(l_stick_y_str, NULL, 10);
 800134e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001352:	220a      	movs	r2, #10
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f007 f8e0 	bl	800851c <strtol>
 800135c:	4603      	mov	r3, r0
 800135e:	b25a      	sxtb	r2, r3
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	73da      	strb	r2, [r3, #15]
  data->l_stick_x = (int8_t)strtol(l_stick_x_str, NULL, 10);
 8001364:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001368:	220a      	movs	r2, #10
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f007 f8d5 	bl	800851c <strtol>
 8001372:	4603      	mov	r3, r0
 8001374:	b25a      	sxtb	r2, r3
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	739a      	strb	r2, [r3, #14]
  data->r_stick_y = (int8_t)strtol(r_stick_y_str, NULL, 10);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	220a      	movs	r2, #10
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f007 f8ca 	bl	800851c <strtol>
 8001388:	4603      	mov	r3, r0
 800138a:	b25a      	sxtb	r2, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	745a      	strb	r2, [r3, #17]
  data->r_stick_x = (int8_t)strtol(r_stick_x_str, NULL, 10);
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	220a      	movs	r2, #10
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f007 f8bf 	bl	800851c <strtol>
 800139e:	4603      	mov	r3, r0
 80013a0:	b25a      	sxtb	r2, r3
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	741a      	strb	r2, [r3, #16]

  data->l2_pressure = (uint16_t)l2_pressure;
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	825a      	strh	r2, [r3, #18]
  data->r2_pressure = (uint16_t)r2_pressure;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	829a      	strh	r2, [r3, #20]

  data->ps_button = misc_buttons & 0x1;
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b00      	cmp	r3, #0
 80013be:	bf14      	ite	ne
 80013c0:	2301      	movne	r3, #1
 80013c2:	2300      	moveq	r3, #0
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	759a      	strb	r2, [r3, #22]
  data->share_button = misc_buttons & 0x2;
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	bf14      	ite	ne
 80013d4:	2301      	movne	r3, #1
 80013d6:	2300      	moveq	r3, #0
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	75da      	strb	r2, [r3, #23]
  data->options_button = misc_buttons & 0x4;
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	bf14      	ite	ne
 80013e8:	2301      	movne	r3, #1
 80013ea:	2300      	moveq	r3, #0
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	761a      	strb	r2, [r3, #24]

  return 0;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3740      	adds	r7, #64	@ 0x40
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	08009c38 	.word	0x08009c38
 8001400:	08009c58 	.word	0x08009c58
 8001404:	08009c80 	.word	0x08009c80

08001408 <update_encoder>:
  encoder->displacement = 0;
  encoder->velocity = 0;
  encoder->last_counter_value = 0;
}

void update_encoder(EncoderData* encoder) {
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  int current_counter = __HAL_TIM_GET_COUNTER(encoder->htim);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001418:	613b      	str	r3, [r7, #16]
  uint32_t duration = HAL_GetTick() - encoder->last_tick;
 800141a:	f003 f961 	bl	80046e0 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	60fb      	str	r3, [r7, #12]
  int num_pulse = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  if (duration <= 1)  // delay for encode to update, in ms
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b01      	cmp	r3, #1
 8001430:	f240 8095 	bls.w	800155e <update_encoder+0x156>
    return;

  if (current_counter == encoder->last_counter_value) {
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	429a      	cmp	r2, r3
 800143c:	d102      	bne.n	8001444 <update_encoder+0x3c>
    num_pulse = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	e035      	b.n	80014b0 <update_encoder+0xa8>
  } else if (current_counter > encoder->last_counter_value) {
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	429a      	cmp	r2, r3
 800144c:	dd18      	ble.n	8001480 <update_encoder+0x78>
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move backward, count down, overflow
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	2b10      	cmp	r3, #16
 800145c:	d10a      	bne.n	8001474 <update_encoder+0x6c>
      num_pulse = (__HAL_TIM_GET_AUTORELOAD(encoder->htim) - current_counter + encoder->last_counter_value) * -1;
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6892      	ldr	r2, [r2, #8]
 800146e:	1a9b      	subs	r3, r3, r2
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	e01d      	b.n	80014b0 <update_encoder+0xa8>
    } else {  // move forward, count up, no overflow
      num_pulse = current_counter - encoder->last_counter_value;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	e017      	b.n	80014b0 <update_encoder+0xa8>
    }
  } else {
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move up, count up, overflow
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0310 	and.w	r3, r3, #16
 800148c:	2b10      	cmp	r3, #16
 800148e:	d105      	bne.n	800149c <update_encoder+0x94>
      num_pulse = (encoder->last_counter_value - current_counter) * -1;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e009      	b.n	80014b0 <update_encoder+0xa8>
    } else {  // move backward, count down, no overflow
      num_pulse = __HAL_TIM_GET_AUTORELOAD(encoder->htim) - encoder->last_counter_value + current_counter;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6892      	ldr	r2, [r2, #8]
 80014a8:	1a9a      	subs	r2, r3, r2
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4413      	add	r3, r2
 80014ae:	617b      	str	r3, [r7, #20]
    }
  }

  float temp_displacement = (float)num_pulse / encoder->_ppr * 2.0 * M_PI;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	8a9b      	ldrh	r3, [r3, #20]
 80014be:	ee07 3a90 	vmov	s15, r3
 80014c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014ca:	ee16 0a90 	vmov	r0, s13
 80014ce:	f7ff f863 	bl	8000598 <__aeabi_f2d>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	f7fe ff01 	bl	80002dc <__adddf3>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	a322      	add	r3, pc, #136	@ (adr r3, 800156c <update_encoder+0x164>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7ff f8ae 	bl	8000648 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f7ff fba0 	bl	8000c38 <__aeabi_d2f>
 80014f8:	4603      	mov	r3, r0
 80014fa:	60bb      	str	r3, [r7, #8]
  encoder->last_counter_value = current_counter;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	609a      	str	r2, [r3, #8]
  encoder->displacement += temp_displacement;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	ed93 7a00 	vldr	s14, [r3]
 8001508:	edd7 7a02 	vldr	s15, [r7, #8]
 800150c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	edc3 7a00 	vstr	s15, [r3]
  encoder->velocity = temp_displacement * 1000.0 / duration;
 8001516:	68b8      	ldr	r0, [r7, #8]
 8001518:	f7ff f83e 	bl	8000598 <__aeabi_f2d>
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <update_encoder+0x160>)
 8001522:	f7ff f891 	bl	8000648 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4614      	mov	r4, r2
 800152c:	461d      	mov	r5, r3
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f7ff f810 	bl	8000554 <__aeabi_ui2d>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4620      	mov	r0, r4
 800153a:	4629      	mov	r1, r5
 800153c:	f7ff f9ae 	bl	800089c <__aeabi_ddiv>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fb76 	bl	8000c38 <__aeabi_d2f>
 800154c:	4602      	mov	r2, r0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	605a      	str	r2, [r3, #4]
  encoder->last_tick = HAL_GetTick();
 8001552:	f003 f8c5 	bl	80046e0 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	e000      	b.n	8001560 <update_encoder+0x158>
    return;
 800155e:	bf00      	nop
}
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bdb0      	pop	{r4, r5, r7, pc}
 8001566:	bf00      	nop
 8001568:	408f4000 	.word	0x408f4000
 800156c:	54442d18 	.word	0x54442d18
 8001570:	400921fb 	.word	0x400921fb

08001574 <read_current_velocity>:

WheelVelocity read_current_velocity(EncoderData* encoders) {
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b095      	sub	sp, #84	@ 0x54
 8001578:	af00      	add	r7, sp, #0
 800157a:	6178      	str	r0, [r7, #20]
  if (encoders == NULL)
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d107      	bne.n	8001592 <read_current_velocity+0x1e>
    return (WheelVelocity){0, 0, 0, 0};
 8001582:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	e030      	b.n	80015f4 <read_current_velocity+0x80>

  WheelVelocity velocities = {.front_left = 0, .front_right = 0, .rear_left = 0, .rear_right = 0};
 8001592:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015a4:	e00d      	b.n	80015c2 <read_current_velocity+0x4e>
    update_encoder(&(encoders[i]));
 80015a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	461a      	mov	r2, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	4413      	add	r3, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff26 	bl	8001408 <update_encoder>
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 80015bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015be:	3301      	adds	r3, #1
 80015c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	ddee      	ble.n	80015a6 <read_current_velocity+0x32>

  velocities.front_left = encoders[FRONT_LEFT].velocity;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  velocities.front_right = encoders[FRONT_RIGHT].velocity;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	3318      	adds	r3, #24
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	633b      	str	r3, [r7, #48]	@ 0x30
  velocities.rear_left = encoders[REAR_LEFT].velocity;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3330      	adds	r3, #48	@ 0x30
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	637b      	str	r3, [r7, #52]	@ 0x34
  velocities.rear_right = encoders[REAR_RIGHT].velocity;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3348      	adds	r3, #72	@ 0x48
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	63bb      	str	r3, [r7, #56]	@ 0x38

  return velocities;
 80015e6:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80015ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80015f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80015f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80015f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80015fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015fc:	ee06 0a10 	vmov	s12, r0
 8001600:	ee06 1a90 	vmov	s13, r1
 8001604:	ee07 2a10 	vmov	s14, r2
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eeb0 0a46 	vmov.f32	s0, s12
 8001610:	eef0 0a66 	vmov.f32	s1, s13
 8001614:	eeb0 1a47 	vmov.f32	s2, s14
 8001618:	eef0 1a67 	vmov.f32	s3, s15
 800161c:	3754      	adds	r7, #84	@ 0x54
 800161e:	46bd      	mov	sp, r7
 8001620:	bd90      	pop	{r4, r7, pc}
	...

08001624 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	@ 0x30
 8001628:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800163a:	4b60      	ldr	r3, [pc, #384]	@ (80017bc <MX_GPIO_Init+0x198>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163e:	4a5f      	ldr	r2, [pc, #380]	@ (80017bc <MX_GPIO_Init+0x198>)
 8001640:	f043 0310 	orr.w	r3, r3, #16
 8001644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001646:	4b5d      	ldr	r3, [pc, #372]	@ (80017bc <MX_GPIO_Init+0x198>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	61bb      	str	r3, [r7, #24]
 8001650:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001652:	4b5a      	ldr	r3, [pc, #360]	@ (80017bc <MX_GPIO_Init+0x198>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	4a59      	ldr	r2, [pc, #356]	@ (80017bc <MX_GPIO_Init+0x198>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165e:	4b57      	ldr	r3, [pc, #348]	@ (80017bc <MX_GPIO_Init+0x198>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800166a:	4b54      	ldr	r3, [pc, #336]	@ (80017bc <MX_GPIO_Init+0x198>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166e:	4a53      	ldr	r2, [pc, #332]	@ (80017bc <MX_GPIO_Init+0x198>)
 8001670:	f043 0320 	orr.w	r3, r3, #32
 8001674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001676:	4b51      	ldr	r3, [pc, #324]	@ (80017bc <MX_GPIO_Init+0x198>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167a:	f003 0320 	and.w	r3, r3, #32
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	4b4e      	ldr	r3, [pc, #312]	@ (80017bc <MX_GPIO_Init+0x198>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001686:	4a4d      	ldr	r2, [pc, #308]	@ (80017bc <MX_GPIO_Init+0x198>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168e:	4b4b      	ldr	r3, [pc, #300]	@ (80017bc <MX_GPIO_Init+0x198>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	4b48      	ldr	r3, [pc, #288]	@ (80017bc <MX_GPIO_Init+0x198>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169e:	4a47      	ldr	r2, [pc, #284]	@ (80017bc <MX_GPIO_Init+0x198>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a6:	4b45      	ldr	r3, [pc, #276]	@ (80017bc <MX_GPIO_Init+0x198>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b2:	4b42      	ldr	r3, [pc, #264]	@ (80017bc <MX_GPIO_Init+0x198>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b6:	4a41      	ldr	r2, [pc, #260]	@ (80017bc <MX_GPIO_Init+0x198>)
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016be:	4b3f      	ldr	r3, [pc, #252]	@ (80017bc <MX_GPIO_Init+0x198>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, B_IN1_Pin|B_IN2_Pin|A_IN2_Pin|LED_4_Pin
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 61fe 	mov.w	r1, #2032	@ 0x7f0
 80016d0:	483b      	ldr	r0, [pc, #236]	@ (80017c0 <MX_GPIO_Init+0x19c>)
 80016d2:	f003 fa99 	bl	8004c08 <HAL_GPIO_WritePin>
                          |LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_IN1_Pin|D_IN2_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2181      	movs	r1, #129	@ 0x81
 80016da:	483a      	ldr	r0, [pc, #232]	@ (80017c4 <MX_GPIO_Init+0x1a0>)
 80016dc:	f003 fa94 	bl	8004c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D_IN1_GPIO_Port, D_IN1_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ea:	f003 fa8d 	bl	8004c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016f4:	4834      	ldr	r0, [pc, #208]	@ (80017c8 <MX_GPIO_Init+0x1a4>)
 80016f6:	f003 fa87 	bl	8004c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2101      	movs	r1, #1
 80016fe:	4833      	ldr	r0, [pc, #204]	@ (80017cc <MX_GPIO_Init+0x1a8>)
 8001700:	f003 fa82 	bl	8004c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B_IN1_Pin B_IN2_Pin A_IN2_Pin */
  GPIO_InitStruct.Pin = B_IN1_Pin|B_IN2_Pin|A_IN2_Pin;
 8001704:	2370      	movs	r3, #112	@ 0x70
 8001706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	4619      	mov	r1, r3
 800171a:	4829      	ldr	r0, [pc, #164]	@ (80017c0 <MX_GPIO_Init+0x19c>)
 800171c:	f003 f8f2 	bl	8004904 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_IN1_Pin D_IN2_Pin */
  GPIO_InitStruct.Pin = A_IN1_Pin|D_IN2_Pin;
 8001720:	2381      	movs	r3, #129	@ 0x81
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	4823      	ldr	r0, [pc, #140]	@ (80017c4 <MX_GPIO_Init+0x1a0>)
 8001738:	f003 f8e4 	bl	8004904 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin;
 800173c:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	481a      	ldr	r0, [pc, #104]	@ (80017c0 <MX_GPIO_Init+0x19c>)
 8001756:	f003 f8d5 	bl	8004904 <HAL_GPIO_Init>

  /*Configure GPIO pin : D_IN1_Pin */
  GPIO_InitStruct.Pin = D_IN1_Pin;
 800175a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800175e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(D_IN1_GPIO_Port, &GPIO_InitStruct);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001776:	f003 f8c5 	bl	8004904 <HAL_GPIO_Init>

  /*Configure GPIO pin : C_IN2_Pin */
  GPIO_InitStruct.Pin = C_IN2_Pin;
 800177a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001780:	2301      	movs	r3, #1
 8001782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(C_IN2_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	4619      	mov	r1, r3
 8001792:	480d      	ldr	r0, [pc, #52]	@ (80017c8 <MX_GPIO_Init+0x1a4>)
 8001794:	f003 f8b6 	bl	8004904 <HAL_GPIO_Init>

  /*Configure GPIO pin : C_IN1_Pin */
  GPIO_InitStruct.Pin = C_IN1_Pin;
 8001798:	2301      	movs	r3, #1
 800179a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179c:	2301      	movs	r3, #1
 800179e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(C_IN1_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	4619      	mov	r1, r3
 80017ae:	4807      	ldr	r0, [pc, #28]	@ (80017cc <MX_GPIO_Init+0x1a8>)
 80017b0:	f003 f8a8 	bl	8004904 <HAL_GPIO_Init>

}
 80017b4:	bf00      	nop
 80017b6:	3730      	adds	r7, #48	@ 0x30
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40021000 	.word	0x40021000
 80017c0:	48001000 	.word	0x48001000
 80017c4:	48000400 	.word	0x48000400
 80017c8:	48000800 	.word	0x48000800
 80017cc:	48000c00 	.word	0x48000c00

080017d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80017d0:	b5b0      	push	{r4, r5, r7, lr}
 80017d2:	b09a      	sub	sp, #104	@ 0x68
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d6:	f002 ff1e 	bl	8004616 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017da:	f000 fae1 	bl	8001da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017de:	f7ff ff21 	bl	8001624 <MX_GPIO_Init>
  MX_TIM1_Init();
 80017e2:	f002 f9f5 	bl	8003bd0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80017e6:	f002 facf 	bl	8003d88 <MX_TIM3_Init>
  MX_TIM4_Init();
 80017ea:	f002 fb4f 	bl	8003e8c <MX_TIM4_Init>
  MX_TIM5_Init();
 80017ee:	f002 fba3 	bl	8003f38 <MX_TIM5_Init>
  MX_TIM8_Init();
 80017f2:	f002 fbf7 	bl	8003fe4 <MX_TIM8_Init>
  MX_TIM2_Init();
 80017f6:	f002 fa45 	bl	8003c84 <MX_TIM2_Init>
  MX_UART4_Init();
 80017fa:	f002 fdb3 	bl	8004364 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80017fe:	f002 fdfd 	bl	80043fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001802:	2100      	movs	r1, #0
 8001804:	48a3      	ldr	r0, [pc, #652]	@ (8001a94 <main+0x2c4>)
 8001806:	f004 fb79 	bl	8005efc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800180a:	2104      	movs	r1, #4
 800180c:	48a1      	ldr	r0, [pc, #644]	@ (8001a94 <main+0x2c4>)
 800180e:	f004 fb75 	bl	8005efc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001812:	2100      	movs	r1, #0
 8001814:	48a0      	ldr	r0, [pc, #640]	@ (8001a98 <main+0x2c8>)
 8001816:	f004 fb71 	bl	8005efc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800181a:	2104      	movs	r1, #4
 800181c:	489e      	ldr	r0, [pc, #632]	@ (8001a98 <main+0x2c8>)
 800181e:	f004 fb6d 	bl	8005efc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8001822:	489e      	ldr	r0, [pc, #632]	@ (8001a9c <main+0x2cc>)
 8001824:	f004 fa90 	bl	8005d48 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001828:	213c      	movs	r1, #60	@ 0x3c
 800182a:	489c      	ldr	r0, [pc, #624]	@ (8001a9c <main+0x2cc>)
 800182c:	f004 fd1e 	bl	800626c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001830:	489b      	ldr	r0, [pc, #620]	@ (8001aa0 <main+0x2d0>)
 8001832:	f004 fa89 	bl	8005d48 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001836:	213c      	movs	r1, #60	@ 0x3c
 8001838:	4899      	ldr	r0, [pc, #612]	@ (8001aa0 <main+0x2d0>)
 800183a:	f004 fd17 	bl	800626c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800183e:	4899      	ldr	r0, [pc, #612]	@ (8001aa4 <main+0x2d4>)
 8001840:	f004 fa82 	bl	8005d48 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8001844:	213c      	movs	r1, #60	@ 0x3c
 8001846:	4897      	ldr	r0, [pc, #604]	@ (8001aa4 <main+0x2d4>)
 8001848:	f004 fd10 	bl	800626c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 800184c:	4896      	ldr	r0, [pc, #600]	@ (8001aa8 <main+0x2d8>)
 800184e:	f004 fa7b 	bl	8005d48 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8001852:	213c      	movs	r1, #60	@ 0x3c
 8001854:	4894      	ldr	r0, [pc, #592]	@ (8001aa8 <main+0x2d8>)
 8001856:	f004 fd09 	bl	800626c <HAL_TIM_Encoder_Start_IT>

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800185a:	2201      	movs	r2, #1
 800185c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001860:	4892      	ldr	r0, [pc, #584]	@ (8001aac <main+0x2dc>)
 8001862:	f003 f9d1 	bl	8004c08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001866:	2201      	movs	r2, #1
 8001868:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800186c:	488f      	ldr	r0, [pc, #572]	@ (8001aac <main+0x2dc>)
 800186e:	f003 f9cb 	bl	8004c08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001872:	2201      	movs	r2, #1
 8001874:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001878:	488c      	ldr	r0, [pc, #560]	@ (8001aac <main+0x2dc>)
 800187a:	f003 f9c5 	bl	8004c08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 800187e:	2201      	movs	r2, #1
 8001880:	2180      	movs	r1, #128	@ 0x80
 8001882:	488a      	ldr	r0, [pc, #552]	@ (8001aac <main+0x2dc>)
 8001884:	f003 f9c0 	bl	8004c08 <HAL_GPIO_WritePin>

  servo_reset_all();
 8001888:	f002 f878 	bl	800397c <servo_reset_all>
  HAL_Delay(1000);
 800188c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001890:	f002 ff32 	bl	80046f8 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 8001894:	2001      	movs	r0, #1
 8001896:	f002 ff2f 	bl	80046f8 <HAL_Delay>
    read_current_velocity(encoders);
 800189a:	4885      	ldr	r0, [pc, #532]	@ (8001ab0 <main+0x2e0>)
 800189c:	f7ff fe6a 	bl	8001574 <read_current_velocity>
#if (TEST == 0)
    HAL_UART_Receive(&huart1, controller_buffer, sizeof(controller_buffer), 0xFFFF);
 80018a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018a4:	2229      	movs	r2, #41	@ 0x29
 80018a6:	4983      	ldr	r1, [pc, #524]	@ (8001ab4 <main+0x2e4>)
 80018a8:	4883      	ldr	r0, [pc, #524]	@ (8001ab8 <main+0x2e8>)
 80018aa:	f005 fdc1 	bl	8007430 <HAL_UART_Receive>
    parse_controller_data(controller_buffer, &controller_state);
 80018ae:	4983      	ldr	r1, [pc, #524]	@ (8001abc <main+0x2ec>)
 80018b0:	4880      	ldr	r0, [pc, #512]	@ (8001ab4 <main+0x2e4>)
 80018b2:	f7ff fc89 	bl	80011c8 <parse_controller_data>
    if (controller_state.options_button && !prev_turn_on) {  // turn on/off the robot
 80018b6:	4b81      	ldr	r3, [pc, #516]	@ (8001abc <main+0x2ec>)
 80018b8:	7e1b      	ldrb	r3, [r3, #24]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d020      	beq.n	8001900 <main+0x130>
 80018be:	4b80      	ldr	r3, [pc, #512]	@ (8001ac0 <main+0x2f0>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	f083 0301 	eor.w	r3, r3, #1
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d019      	beq.n	8001900 <main+0x130>
      turn_on = !turn_on;
 80018cc:	4b7d      	ldr	r3, [pc, #500]	@ (8001ac4 <main+0x2f4>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	bf14      	ite	ne
 80018d4:	2301      	movne	r3, #1
 80018d6:	2300      	moveq	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	f083 0301 	eor.w	r3, r3, #1
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4b77      	ldr	r3, [pc, #476]	@ (8001ac4 <main+0x2f4>)
 80018e8:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, turn_on ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80018ea:	4b76      	ldr	r3, [pc, #472]	@ (8001ac4 <main+0x2f4>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	f083 0301 	eor.w	r3, r3, #1
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018fa:	486c      	ldr	r0, [pc, #432]	@ (8001aac <main+0x2dc>)
 80018fc:	f003 f984 	bl	8004c08 <HAL_GPIO_WritePin>
    }
    prev_turn_on = controller_state.options_button;
 8001900:	4b6e      	ldr	r3, [pc, #440]	@ (8001abc <main+0x2ec>)
 8001902:	7e1a      	ldrb	r2, [r3, #24]
 8001904:	4b6e      	ldr	r3, [pc, #440]	@ (8001ac0 <main+0x2f0>)
 8001906:	701a      	strb	r2, [r3, #0]

    if (turn_on) {
 8001908:	4b6e      	ldr	r3, [pc, #440]	@ (8001ac4 <main+0x2f4>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0c1      	beq.n	8001894 <main+0xc4>
      if (auto_path_selection == LEFT_PATH) {
 8001910:	4b6d      	ldr	r3, [pc, #436]	@ (8001ac8 <main+0x2f8>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d111      	bne.n	800193c <main+0x16c>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001918:	2201      	movs	r2, #1
 800191a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800191e:	4863      	ldr	r0, [pc, #396]	@ (8001aac <main+0x2dc>)
 8001920:	f003 f972 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001924:	2201      	movs	r2, #1
 8001926:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800192a:	4860      	ldr	r0, [pc, #384]	@ (8001aac <main+0x2dc>)
 800192c:	f003 f96c 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	2180      	movs	r1, #128	@ 0x80
 8001934:	485d      	ldr	r0, [pc, #372]	@ (8001aac <main+0x2dc>)
 8001936:	f003 f967 	bl	8004c08 <HAL_GPIO_WritePin>
 800193a:	e02a      	b.n	8001992 <main+0x1c2>
      } else if (auto_path_selection == MID_PATH) {
 800193c:	4b62      	ldr	r3, [pc, #392]	@ (8001ac8 <main+0x2f8>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d111      	bne.n	8001968 <main+0x198>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001944:	2201      	movs	r2, #1
 8001946:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800194a:	4858      	ldr	r0, [pc, #352]	@ (8001aac <main+0x2dc>)
 800194c:	f003 f95c 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001956:	4855      	ldr	r0, [pc, #340]	@ (8001aac <main+0x2dc>)
 8001958:	f003 f956 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 800195c:	2201      	movs	r2, #1
 800195e:	2180      	movs	r1, #128	@ 0x80
 8001960:	4852      	ldr	r0, [pc, #328]	@ (8001aac <main+0x2dc>)
 8001962:	f003 f951 	bl	8004c08 <HAL_GPIO_WritePin>
 8001966:	e014      	b.n	8001992 <main+0x1c2>
      } else if (auto_path_selection == RIGHT_PATH) {
 8001968:	4b57      	ldr	r3, [pc, #348]	@ (8001ac8 <main+0x2f8>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d110      	bne.n	8001992 <main+0x1c2>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001976:	484d      	ldr	r0, [pc, #308]	@ (8001aac <main+0x2dc>)
 8001978:	f003 f946 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800197c:	2201      	movs	r2, #1
 800197e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001982:	484a      	ldr	r0, [pc, #296]	@ (8001aac <main+0x2dc>)
 8001984:	f003 f940 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001988:	2201      	movs	r2, #1
 800198a:	2180      	movs	r1, #128	@ 0x80
 800198c:	4847      	ldr	r0, [pc, #284]	@ (8001aac <main+0x2dc>)
 800198e:	f003 f93b 	bl	8004c08 <HAL_GPIO_WritePin>
      }

      float rotation_vel = (controller_state.l2_pressure / 1024.0 + controller_state.r2_pressure / -1024.0) * 100.0;
 8001992:	4b4a      	ldr	r3, [pc, #296]	@ (8001abc <main+0x2ec>)
 8001994:	8a5b      	ldrh	r3, [r3, #18]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fdec 	bl	8000574 <__aeabi_i2d>
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	4b4a      	ldr	r3, [pc, #296]	@ (8001acc <main+0x2fc>)
 80019a2:	f7fe ff7b 	bl	800089c <__aeabi_ddiv>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4614      	mov	r4, r2
 80019ac:	461d      	mov	r5, r3
 80019ae:	4b43      	ldr	r3, [pc, #268]	@ (8001abc <main+0x2ec>)
 80019b0:	8a9b      	ldrh	r3, [r3, #20]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fdde 	bl	8000574 <__aeabi_i2d>
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	4b44      	ldr	r3, [pc, #272]	@ (8001ad0 <main+0x300>)
 80019be:	f7fe ff6d 	bl	800089c <__aeabi_ddiv>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4620      	mov	r0, r4
 80019c8:	4629      	mov	r1, r5
 80019ca:	f7fe fc87 	bl	80002dc <__adddf3>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad4 <main+0x304>)
 80019dc:	f7fe fe34 	bl	8000648 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	f7ff f926 	bl	8000c38 <__aeabi_d2f>
 80019ec:	4603      	mov	r3, r0
 80019ee:	667b      	str	r3, [r7, #100]	@ 0x64

      if (controller_state.ps_button && !prev_auto_path_enable) {  // auto, line following
 80019f0:	4b32      	ldr	r3, [pc, #200]	@ (8001abc <main+0x2ec>)
 80019f2:	7d9b      	ldrb	r3, [r3, #22]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d01e      	beq.n	8001a36 <main+0x266>
 80019f8:	4b37      	ldr	r3, [pc, #220]	@ (8001ad8 <main+0x308>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	f083 0301 	eor.w	r3, r3, #1
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d017      	beq.n	8001a36 <main+0x266>
        auto_path_enable = !auto_path_enable;
 8001a06:	4b35      	ldr	r3, [pc, #212]	@ (8001adc <main+0x30c>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	bf14      	ite	ne
 8001a0e:	2301      	movne	r3, #1
 8001a10:	2300      	moveq	r3, #0
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	f083 0301 	eor.w	r3, r3, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <main+0x30c>)
 8001a22:	701a      	strb	r2, [r3, #0]
        if (auto_path_enable)
 8001a24:	4b2d      	ldr	r3, [pc, #180]	@ (8001adc <main+0x30c>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d004      	beq.n	8001a36 <main+0x266>
          follow_auto_path(auto_path_selection);
 8001a2c:	4b26      	ldr	r3, [pc, #152]	@ (8001ac8 <main+0x2f8>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fac9 	bl	8000fc8 <follow_auto_path>
      }
      prev_auto_path_enable = controller_state.ps_button;
 8001a36:	4b21      	ldr	r3, [pc, #132]	@ (8001abc <main+0x2ec>)
 8001a38:	7d9a      	ldrb	r2, [r3, #22]
 8001a3a:	4b27      	ldr	r3, [pc, #156]	@ (8001ad8 <main+0x308>)
 8001a3c:	701a      	strb	r2, [r3, #0]

      if (controller_state.square && !prev_auto_path_switch) {
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001abc <main+0x2ec>)
 8001a40:	7a5b      	ldrb	r3, [r3, #9]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d057      	beq.n	8001af6 <main+0x326>
 8001a46:	4b26      	ldr	r3, [pc, #152]	@ (8001ae0 <main+0x310>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	f083 0301 	eor.w	r3, r3, #1
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d050      	beq.n	8001af6 <main+0x326>
        auto_path_switch = !auto_path_switch;
 8001a54:	4b23      	ldr	r3, [pc, #140]	@ (8001ae4 <main+0x314>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	bf14      	ite	ne
 8001a5c:	2301      	movne	r3, #1
 8001a5e:	2300      	moveq	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	f083 0301 	eor.w	r3, r3, #1
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae4 <main+0x314>)
 8001a70:	701a      	strb	r2, [r3, #0]
        if (auto_path_selection == LEFT_PATH)
 8001a72:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <main+0x2f8>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d103      	bne.n	8001a82 <main+0x2b2>
          auto_path_selection = MID_PATH;
 8001a7a:	4b13      	ldr	r3, [pc, #76]	@ (8001ac8 <main+0x2f8>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
 8001a80:	e039      	b.n	8001af6 <main+0x326>
        else if (auto_path_selection == MID_PATH)
 8001a82:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <main+0x2f8>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d12e      	bne.n	8001ae8 <main+0x318>
          auto_path_selection = RIGHT_PATH;
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <main+0x2f8>)
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	e031      	b.n	8001af6 <main+0x326>
 8001a92:	bf00      	nop
 8001a94:	200001c0 	.word	0x200001c0
 8001a98:	2000020c 	.word	0x2000020c
 8001a9c:	20000174 	.word	0x20000174
 8001aa0:	20000258 	.word	0x20000258
 8001aa4:	200002a4 	.word	0x200002a4
 8001aa8:	200002f0 	.word	0x200002f0
 8001aac:	48001000 	.word	0x48001000
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000124 	.word	0x20000124
 8001ab8:	200003d0 	.word	0x200003d0
 8001abc:	20000150 	.word	0x20000150
 8001ac0:	2000016e 	.word	0x2000016e
 8001ac4:	2000016d 	.word	0x2000016d
 8001ac8:	20000120 	.word	0x20000120
 8001acc:	40900000 	.word	0x40900000
 8001ad0:	c0900000 	.word	0xc0900000
 8001ad4:	40590000 	.word	0x40590000
 8001ad8:	2000011d 	.word	0x2000011d
 8001adc:	2000011c 	.word	0x2000011c
 8001ae0:	2000011f 	.word	0x2000011f
 8001ae4:	2000011e 	.word	0x2000011e
        else if (auto_path_selection == RIGHT_PATH)
 8001ae8:	4ba3      	ldr	r3, [pc, #652]	@ (8001d78 <main+0x5a8>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d102      	bne.n	8001af6 <main+0x326>
          auto_path_selection = LEFT_PATH;
 8001af0:	4ba1      	ldr	r3, [pc, #644]	@ (8001d78 <main+0x5a8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
      }  // auto, choose path, toggle left / right / straight forward
      prev_auto_path_switch = controller_state.square;
 8001af6:	4ba1      	ldr	r3, [pc, #644]	@ (8001d7c <main+0x5ac>)
 8001af8:	7a5a      	ldrb	r2, [r3, #9]
 8001afa:	4ba1      	ldr	r3, [pc, #644]	@ (8001d80 <main+0x5b0>)
 8001afc:	701a      	strb	r2, [r3, #0]

      if (controller_state.r2 || controller_state.l2) {
 8001afe:	4b9f      	ldr	r3, [pc, #636]	@ (8001d7c <main+0x5ac>)
 8001b00:	785b      	ldrb	r3, [r3, #1]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d103      	bne.n	8001b0e <main+0x33e>
 8001b06:	4b9d      	ldr	r3, [pc, #628]	@ (8001d7c <main+0x5ac>)
 8001b08:	791b      	ldrb	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d03f      	beq.n	8001b8e <main+0x3be>
        BaseVelocity target_vel = {0, 0, rotation_vel / 100.0 * ROBOT_MAX_Z_VELOCITY * 0.35};
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b1a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001b1c:	f7fe fd3c 	bl	8000598 <__aeabi_f2d>
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	4b97      	ldr	r3, [pc, #604]	@ (8001d84 <main+0x5b4>)
 8001b26:	f7fe feb9 	bl	800089c <__aeabi_ddiv>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	a38b      	add	r3, pc, #556	@ (adr r3, 8001d60 <main+0x590>)
 8001b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b38:	f7fe fd86 	bl	8000648 <__aeabi_dmul>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	a388      	add	r3, pc, #544	@ (adr r3, 8001d68 <main+0x598>)
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	f7fe fd7d 	bl	8000648 <__aeabi_dmul>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	a386      	add	r3, pc, #536	@ (adr r3, 8001d70 <main+0x5a0>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f7fe fd74 	bl	8000648 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7ff f866 	bl	8000c38 <__aeabi_d2f>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	663b      	str	r3, [r7, #96]	@ 0x60
        movement_control(target_vel);
 8001b70:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001b74:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001b78:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001b7c:	eeb0 0a66 	vmov.f32	s0, s13
 8001b80:	eef0 0a47 	vmov.f32	s1, s14
 8001b84:	eeb0 1a67 	vmov.f32	s2, s15
 8001b88:	f001 fc66 	bl	8003458 <movement_control>
      if (controller_state.r2 || controller_state.l2) {
 8001b8c:	e0ab      	b.n	8001ce6 <main+0x516>
      } else if (controller_state.r1) {
 8001b8e:	4b7b      	ldr	r3, [pc, #492]	@ (8001d7c <main+0x5ac>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d016      	beq.n	8001bc4 <main+0x3f4>
        BaseVelocity target_vel = {0, 0, ROBOT_MAX_Z_VELOCITY * -0.2};
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ba2:	4b79      	ldr	r3, [pc, #484]	@ (8001d88 <main+0x5b8>)
 8001ba4:	657b      	str	r3, [r7, #84]	@ 0x54
        movement_control(target_vel);
 8001ba6:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8001baa:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001bae:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001bb2:	eeb0 0a66 	vmov.f32	s0, s13
 8001bb6:	eef0 0a47 	vmov.f32	s1, s14
 8001bba:	eeb0 1a67 	vmov.f32	s2, s15
 8001bbe:	f001 fc4b 	bl	8003458 <movement_control>
 8001bc2:	e090      	b.n	8001ce6 <main+0x516>
      } else if (controller_state.l1) {
 8001bc4:	4b6d      	ldr	r3, [pc, #436]	@ (8001d7c <main+0x5ac>)
 8001bc6:	78db      	ldrb	r3, [r3, #3]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d016      	beq.n	8001bfa <main+0x42a>
        BaseVelocity target_vel = {0, 0, ROBOT_MAX_Z_VELOCITY * 0.2};
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bd8:	4b6c      	ldr	r3, [pc, #432]	@ (8001d8c <main+0x5bc>)
 8001bda:	64bb      	str	r3, [r7, #72]	@ 0x48
        movement_control(target_vel);
 8001bdc:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8001be0:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001be4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001be8:	eeb0 0a66 	vmov.f32	s0, s13
 8001bec:	eef0 0a47 	vmov.f32	s1, s14
 8001bf0:	eeb0 1a67 	vmov.f32	s2, s15
 8001bf4:	f001 fc30 	bl	8003458 <movement_control>
 8001bf8:	e075      	b.n	8001ce6 <main+0x516>
      } else if (controller_state.up) {
 8001bfa:	4b60      	ldr	r3, [pc, #384]	@ (8001d7c <main+0x5ac>)
 8001bfc:	7a9b      	ldrb	r3, [r3, #10]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d016      	beq.n	8001c30 <main+0x460>
        BaseVelocity target_vel = {0,
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c08:	4b61      	ldr	r3, [pc, #388]	@ (8001d90 <main+0x5c0>)
 8001c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                   ROBOT_MAX_Y_VELOCITY * 0.5,
                                   0};
        movement_control(target_vel);
 8001c12:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8001c16:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001c1a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001c1e:	eeb0 0a66 	vmov.f32	s0, s13
 8001c22:	eef0 0a47 	vmov.f32	s1, s14
 8001c26:	eeb0 1a67 	vmov.f32	s2, s15
 8001c2a:	f001 fc15 	bl	8003458 <movement_control>
 8001c2e:	e05a      	b.n	8001ce6 <main+0x516>
      } else if (controller_state.down) {
 8001c30:	4b52      	ldr	r3, [pc, #328]	@ (8001d7c <main+0x5ac>)
 8001c32:	7adb      	ldrb	r3, [r3, #11]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d016      	beq.n	8001c66 <main+0x496>
        BaseVelocity target_vel = {0,
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c3e:	4b55      	ldr	r3, [pc, #340]	@ (8001d94 <main+0x5c4>)
 8001c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	633b      	str	r3, [r7, #48]	@ 0x30
                                   ROBOT_MAX_Y_VELOCITY * -0.5,
                                   0};
        movement_control(target_vel);
 8001c48:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001c4c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001c50:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001c54:	eeb0 0a66 	vmov.f32	s0, s13
 8001c58:	eef0 0a47 	vmov.f32	s1, s14
 8001c5c:	eeb0 1a67 	vmov.f32	s2, s15
 8001c60:	f001 fbfa 	bl	8003458 <movement_control>
 8001c64:	e03f      	b.n	8001ce6 <main+0x516>
      } else if (controller_state.left) {
 8001c66:	4b45      	ldr	r3, [pc, #276]	@ (8001d7c <main+0x5ac>)
 8001c68:	7b1b      	ldrb	r3, [r3, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d016      	beq.n	8001c9c <main+0x4cc>
        BaseVelocity target_vel = {ROBOT_MAX_X_VELOCITY * 0.5,
 8001c6e:	4b48      	ldr	r3, [pc, #288]	@ (8001d90 <main+0x5c0>)
 8001c70:	61fb      	str	r3, [r7, #28]
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	@ 0x24
                                   0,
                                   0};
        movement_control(target_vel);
 8001c7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c82:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c86:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c8a:	eeb0 0a66 	vmov.f32	s0, s13
 8001c8e:	eef0 0a47 	vmov.f32	s1, s14
 8001c92:	eeb0 1a67 	vmov.f32	s2, s15
 8001c96:	f001 fbdf 	bl	8003458 <movement_control>
 8001c9a:	e024      	b.n	8001ce6 <main+0x516>
      } else if (controller_state.right) {
 8001c9c:	4b37      	ldr	r3, [pc, #220]	@ (8001d7c <main+0x5ac>)
 8001c9e:	7b5b      	ldrb	r3, [r3, #13]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d016      	beq.n	8001cd2 <main+0x502>
        BaseVelocity target_vel = {ROBOT_MAX_X_VELOCITY * -0.5,
 8001ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8001d94 <main+0x5c4>)
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
                                   0,
                                   0};
        movement_control(target_vel);
 8001cb4:	edd7 6a04 	vldr	s13, [r7, #16]
 8001cb8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cbc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cc0:	eeb0 0a66 	vmov.f32	s0, s13
 8001cc4:	eef0 0a47 	vmov.f32	s1, s14
 8001cc8:	eeb0 1a67 	vmov.f32	s2, s15
 8001ccc:	f001 fbc4 	bl	8003458 <movement_control>
 8001cd0:	e009      	b.n	8001ce6 <main+0x516>
      } else {
        WheelPWM target_pwm = {0, 0, 0, 0};
 8001cd2:	463b      	mov	r3, r7
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
        wheels_control(target_pwm);
 8001cde:	463b      	mov	r3, r7
 8001ce0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ce2:	f000 fd2b 	bl	800273c <wheels_control>
      }

      if (controller_state.triangle) {
 8001ce6:	4b25      	ldr	r3, [pc, #148]	@ (8001d7c <main+0x5ac>)
 8001ce8:	7a1b      	ldrb	r3, [r3, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <main+0x524>
        catch_move_down();
 8001cee:	f000 f8a7 	bl	8001e40 <catch_move_down>
 8001cf2:	e00c      	b.n	8001d0e <main+0x53e>
      } else if (controller_state.cross)
 8001cf4:	4b21      	ldr	r3, [pc, #132]	@ (8001d7c <main+0x5ac>)
 8001cf6:	799b      	ldrb	r3, [r3, #6]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <main+0x532>
        catch_move_up();
 8001cfc:	f000 f8c8 	bl	8001e90 <catch_move_up>
 8001d00:	e005      	b.n	8001d0e <main+0x53e>
      else if (controller_state.share_button) {
 8001d02:	4b1e      	ldr	r3, [pc, #120]	@ (8001d7c <main+0x5ac>)
 8001d04:	7ddb      	ldrb	r3, [r3, #23]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <main+0x53e>
        catch_reset();
 8001d0a:	f000 f8e9 	bl	8001ee0 <catch_reset>
      }

      if (controller_state.circle && !prev_container_down) {
 8001d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d7c <main+0x5ac>)
 8001d10:	79db      	ldrb	r3, [r3, #7]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d01e      	beq.n	8001d54 <main+0x584>
 8001d16:	4b20      	ldr	r3, [pc, #128]	@ (8001d98 <main+0x5c8>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	f083 0301 	eor.w	r3, r3, #1
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d017      	beq.n	8001d54 <main+0x584>
        container_down = !container_down;
 8001d24:	4b1d      	ldr	r3, [pc, #116]	@ (8001d9c <main+0x5cc>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bf14      	ite	ne
 8001d2c:	2301      	movne	r3, #1
 8001d2e:	2300      	moveq	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	f083 0301 	eor.w	r3, r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4b17      	ldr	r3, [pc, #92]	@ (8001d9c <main+0x5cc>)
 8001d40:	701a      	strb	r2, [r3, #0]
        if (container_down)
 8001d42:	4b16      	ldr	r3, [pc, #88]	@ (8001d9c <main+0x5cc>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <main+0x580>
          container_move_down();
 8001d4a:	f000 f8d5 	bl	8001ef8 <container_move_down>
 8001d4e:	e001      	b.n	8001d54 <main+0x584>
        else
          container_reset();
 8001d50:	f000 f900 	bl	8001f54 <container_reset>
      }
      prev_container_down = controller_state.circle;
 8001d54:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <main+0x5ac>)
 8001d56:	79da      	ldrb	r2, [r3, #7]
 8001d58:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <main+0x5c8>)
 8001d5a:	701a      	strb	r2, [r3, #0]
    HAL_Delay(1);
 8001d5c:	e59a      	b.n	8001894 <main+0xc4>
 8001d5e:	bf00      	nop
 8001d60:	70a3d70a 	.word	0x70a3d70a
 8001d64:	40424a3d 	.word	0x40424a3d
 8001d68:	33333333 	.word	0x33333333
 8001d6c:	3fc33333 	.word	0x3fc33333
 8001d70:	66666666 	.word	0x66666666
 8001d74:	3fd66666 	.word	0x3fd66666
 8001d78:	20000120 	.word	0x20000120
 8001d7c:	20000150 	.word	0x20000150
 8001d80:	2000011f 	.word	0x2000011f
 8001d84:	40590000 	.word	0x40590000
 8001d88:	bf8c779a 	.word	0xbf8c779a
 8001d8c:	3f8c779a 	.word	0x3f8c779a
 8001d90:	401942c4 	.word	0x401942c4
 8001d94:	c01942c4 	.word	0xc01942c4
 8001d98:	2000016c 	.word	0x2000016c
 8001d9c:	2000016b 	.word	0x2000016b

08001da0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b094      	sub	sp, #80	@ 0x50
 8001da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da6:	f107 0318 	add.w	r3, r7, #24
 8001daa:	2238      	movs	r2, #56	@ 0x38
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f006 fc3a 	bl	8008628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
 8001dc0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f002 ff38 	bl	8004c38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dd0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001dde:	2355      	movs	r3, #85	@ 0x55
 8001de0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001de2:	2302      	movs	r3, #2
 8001de4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001de6:	2302      	movs	r3, #2
 8001de8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dea:	2302      	movs	r3, #2
 8001dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001dee:	f107 0318 	add.w	r3, r7, #24
 8001df2:	4618      	mov	r0, r3
 8001df4:	f002 ffd4 	bl	8004da0 <HAL_RCC_OscConfig>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <SystemClock_Config+0x62>
    Error_Handler();
 8001dfe:	f000 f818 	bl	8001e32 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e02:	230f      	movs	r3, #15
 8001e04:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e06:	2303      	movs	r3, #3
 8001e08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	2104      	movs	r1, #4
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f003 fad2 	bl	80053c4 <HAL_RCC_ClockConfig>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <SystemClock_Config+0x8a>
    Error_Handler();
 8001e26:	f000 f804 	bl	8001e32 <Error_Handler>
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	3750      	adds	r7, #80	@ 0x50
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e36:	b672      	cpsid	i
}
 8001e38:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001e3a:	bf00      	nop
 8001e3c:	e7fd      	b.n	8001e3a <Error_Handler+0x8>
	...

08001e40 <catch_move_down>:

bool container_down = false;

bool prev_container_down = false;

void catch_move_down(void) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  servo_move(&(servos[4]), SERVO_ID5_MAX_POS, SHORTEST_TIME_ROTATE(5, 90));
 8001e44:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <catch_move_down+0x44>)
 8001e46:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001e4a:	3b5a      	subs	r3, #90	@ 0x5a
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bfb8      	it	lt
 8001e50:	425b      	neglt	r3, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb8e 	bl	8000574 <__aeabi_i2d>
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e88 <catch_move_down+0x48>)
 8001e5e:	f7fe fbf3 	bl	8000648 <__aeabi_dmul>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f7fe fec5 	bl	8000bf8 <__aeabi_d2uiz>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	f240 317a 	movw	r1, #890	@ 0x37a
 8001e78:	4804      	ldr	r0, [pc, #16]	@ (8001e8c <catch_move_down+0x4c>)
 8001e7a:	f001 fba1 	bl	80035c0 <servo_move>
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000060 	.word	0x20000060
 8001e88:	40080000 	.word	0x40080000
 8001e8c:	20000078 	.word	0x20000078

08001e90 <catch_move_up>:

void catch_move_up(void) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  servo_move(&(servos[4]), SERVO_ID5_MIN_POS, SHORTEST_TIME_ROTATE(5, 100));
 8001e94:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed4 <catch_move_up+0x44>)
 8001e96:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001e9a:	3b64      	subs	r3, #100	@ 0x64
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bfb8      	it	lt
 8001ea0:	425b      	neglt	r3, r3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fb66 	bl	8000574 <__aeabi_i2d>
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <catch_move_up+0x48>)
 8001eae:	f7fe fbcb 	bl	8000648 <__aeabi_dmul>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f7fe fe9d 	bl	8000bf8 <__aeabi_d2uiz>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f240 119f 	movw	r1, #415	@ 0x19f
 8001ec8:	4804      	ldr	r0, [pc, #16]	@ (8001edc <catch_move_up+0x4c>)
 8001eca:	f001 fb79 	bl	80035c0 <servo_move>
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000060 	.word	0x20000060
 8001ed8:	40080000 	.word	0x40080000
 8001edc:	20000078 	.word	0x20000078

08001ee0 <catch_reset>:

void catch_reset(void) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  servo_move(&(servos[4]), INITIAL_POS, 180);
 8001ee4:	22b4      	movs	r2, #180	@ 0xb4
 8001ee6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001eea:	4802      	ldr	r0, [pc, #8]	@ (8001ef4 <catch_reset+0x14>)
 8001eec:	f001 fb68 	bl	80035c0 <servo_move>
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000078 	.word	0x20000078

08001ef8 <container_move_down>:

void container_move_down(void) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  if (servos[4].current_pos != SERVO_ID5_MIN_POS)
 8001efc:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <container_move_down+0x50>)
 8001efe:	8b5b      	ldrh	r3, [r3, #26]
 8001f00:	f240 129f 	movw	r2, #415	@ 0x19f
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d01c      	beq.n	8001f42 <container_move_down+0x4a>
    servo_move(&(servos[5]), SERVO_ID6_MIN_POS, SHORTEST_TIME_ROTATE(6, 30));
 8001f08:	4b0f      	ldr	r3, [pc, #60]	@ (8001f48 <container_move_down+0x50>)
 8001f0a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001f0e:	3b1e      	subs	r3, #30
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	bfb8      	it	lt
 8001f14:	425b      	neglt	r3, r3
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fb2c 	bl	8000574 <__aeabi_i2d>
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <container_move_down+0x54>)
 8001f22:	f7fe fb91 	bl	8000648 <__aeabi_dmul>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f7fe fe63 	bl	8000bf8 <__aeabi_d2uiz>
 8001f32:	4603      	mov	r3, r0
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8001f3c:	4804      	ldr	r0, [pc, #16]	@ (8001f50 <container_move_down+0x58>)
 8001f3e:	f001 fb3f 	bl	80035c0 <servo_move>
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000060 	.word	0x20000060
 8001f4c:	40080000 	.word	0x40080000
 8001f50:	2000007e 	.word	0x2000007e

08001f54 <container_reset>:

void container_reset(void) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  if (servos[4].current_pos != SERVO_ID5_MIN_POS)
 8001f58:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <container_reset+0x50>)
 8001f5a:	8b5b      	ldrh	r3, [r3, #26]
 8001f5c:	f240 129f 	movw	r2, #415	@ 0x19f
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d01c      	beq.n	8001f9e <container_reset+0x4a>
    servo_move(&(servos[5]), INITIAL_POS, SHORTEST_TIME_ROTATE(6, 30));
 8001f64:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa4 <container_reset+0x50>)
 8001f66:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001f6a:	3b1e      	subs	r3, #30
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bfb8      	it	lt
 8001f70:	425b      	neglt	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fafe 	bl	8000574 <__aeabi_i2d>
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <container_reset+0x54>)
 8001f7e:	f7fe fb63 	bl	8000648 <__aeabi_dmul>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7fe fe35 	bl	8000bf8 <__aeabi_d2uiz>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001f98:	4804      	ldr	r0, [pc, #16]	@ (8001fac <container_reset+0x58>)
 8001f9a:	f001 fb11 	bl	80035c0 <servo_move>
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000060 	.word	0x20000060
 8001fa8:	40080000 	.word	0x40080000
 8001fac:	2000007e 	.word	0x2000007e

08001fb0 <base2wheel>:
#include "movement.h"

WheelVelocity base2wheel(BaseVelocity base_vel) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b094      	sub	sp, #80	@ 0x50
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	eef0 6a40 	vmov.f32	s13, s0
 8001fba:	eeb0 7a60 	vmov.f32	s14, s1
 8001fbe:	eef0 7a41 	vmov.f32	s15, s2
 8001fc2:	edc7 6a05 	vstr	s13, [r7, #20]
 8001fc6:	ed87 7a06 	vstr	s14, [r7, #24]
 8001fca:	edc7 7a07 	vstr	s15, [r7, #28]
  float front_left = 0, front_right = 0, rear_left = 0, rear_right = 0;
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001fda:	f04f 0300 	mov.w	r3, #0
 8001fde:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fe0:	f04f 0300 	mov.w	r3, #0
 8001fe4:	643b      	str	r3, [r7, #64]	@ 0x40
  if (base_vel.z_vel == 0) {
 8001fe6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff2:	f040 809d 	bne.w	8002130 <base2wheel+0x180>
    front_left = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 8001ff6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ffa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ffe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002002:	edd7 6a06 	vldr	s13, [r7, #24]
 8002006:	edd7 7a06 	vldr	s15, [r7, #24]
 800200a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800200e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002012:	ee17 0a90 	vmov	r0, s15
 8002016:	f7fe fabf 	bl	8000598 <__aeabi_f2d>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	ec43 2b10 	vmov	d0, r2, r3
 8002022:	f007 fb53 	bl	80096cc <sqrt>
 8002026:	ec51 0b10 	vmov	r0, r1, d0
 800202a:	a38b      	add	r3, pc, #556	@ (adr r3, 8002258 <base2wheel+0x2a8>)
 800202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002030:	f7fe fc34 	bl	800089c <__aeabi_ddiv>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f7fe fdfc 	bl	8000c38 <__aeabi_d2f>
 8002040:	4603      	mov	r3, r0
 8002042:	64fb      	str	r3, [r7, #76]	@ 0x4c
    front_right = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 8002044:	ed97 7a05 	vldr	s14, [r7, #20]
 8002048:	edd7 7a05 	vldr	s15, [r7, #20]
 800204c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002050:	edd7 6a06 	vldr	s13, [r7, #24]
 8002054:	edd7 7a06 	vldr	s15, [r7, #24]
 8002058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800205c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002060:	ee17 0a90 	vmov	r0, s15
 8002064:	f7fe fa98 	bl	8000598 <__aeabi_f2d>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	ec43 2b10 	vmov	d0, r2, r3
 8002070:	f007 fb2c 	bl	80096cc <sqrt>
 8002074:	ec51 0b10 	vmov	r0, r1, d0
 8002078:	a377      	add	r3, pc, #476	@ (adr r3, 8002258 <base2wheel+0x2a8>)
 800207a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207e:	f7fe fc0d 	bl	800089c <__aeabi_ddiv>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	f7fe fdd5 	bl	8000c38 <__aeabi_d2f>
 800208e:	4603      	mov	r3, r0
 8002090:	64bb      	str	r3, [r7, #72]	@ 0x48
    rear_left = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 8002092:	ed97 7a05 	vldr	s14, [r7, #20]
 8002096:	edd7 7a05 	vldr	s15, [r7, #20]
 800209a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800209e:	edd7 6a06 	vldr	s13, [r7, #24]
 80020a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80020a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ae:	ee17 0a90 	vmov	r0, s15
 80020b2:	f7fe fa71 	bl	8000598 <__aeabi_f2d>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	ec43 2b10 	vmov	d0, r2, r3
 80020be:	f007 fb05 	bl	80096cc <sqrt>
 80020c2:	ec51 0b10 	vmov	r0, r1, d0
 80020c6:	a364      	add	r3, pc, #400	@ (adr r3, 8002258 <base2wheel+0x2a8>)
 80020c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020cc:	f7fe fbe6 	bl	800089c <__aeabi_ddiv>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	f7fe fdae 	bl	8000c38 <__aeabi_d2f>
 80020dc:	4603      	mov	r3, r0
 80020de:	647b      	str	r3, [r7, #68]	@ 0x44
    rear_right = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 80020e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80020e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ec:	edd7 6a06 	vldr	s13, [r7, #24]
 80020f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80020f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fc:	ee17 0a90 	vmov	r0, s15
 8002100:	f7fe fa4a 	bl	8000598 <__aeabi_f2d>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	ec43 2b10 	vmov	d0, r2, r3
 800210c:	f007 fade 	bl	80096cc <sqrt>
 8002110:	ec51 0b10 	vmov	r0, r1, d0
 8002114:	a350      	add	r3, pc, #320	@ (adr r3, 8002258 <base2wheel+0x2a8>)
 8002116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211a:	f7fe fbbf 	bl	800089c <__aeabi_ddiv>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4610      	mov	r0, r2
 8002124:	4619      	mov	r1, r3
 8002126:	f7fe fd87 	bl	8000c38 <__aeabi_d2f>
 800212a:	4603      	mov	r3, r0
 800212c:	643b      	str	r3, [r7, #64]	@ 0x40
 800212e:	e04d      	b.n	80021cc <base2wheel+0x21c>
  } else {
    front_left = base_vel.z_vel / RADIUS_WHEEL;
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fa30 	bl	8000598 <__aeabi_f2d>
 8002138:	a347      	add	r3, pc, #284	@ (adr r3, 8002258 <base2wheel+0x2a8>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	f7fe fbad 	bl	800089c <__aeabi_ddiv>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	f7fe fd75 	bl	8000c38 <__aeabi_d2f>
 800214e:	4603      	mov	r3, r0
 8002150:	64fb      	str	r3, [r7, #76]	@ 0x4c
    front_right = -base_vel.z_vel / RADIUS_WHEEL;
 8002152:	edd7 7a07 	vldr	s15, [r7, #28]
 8002156:	eef1 7a67 	vneg.f32	s15, s15
 800215a:	ee17 3a90 	vmov	r3, s15
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe fa1a 	bl	8000598 <__aeabi_f2d>
 8002164:	a33c      	add	r3, pc, #240	@ (adr r3, 8002258 <base2wheel+0x2a8>)
 8002166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216a:	f7fe fb97 	bl	800089c <__aeabi_ddiv>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fd5f 	bl	8000c38 <__aeabi_d2f>
 800217a:	4603      	mov	r3, r0
 800217c:	64bb      	str	r3, [r7, #72]	@ 0x48
    rear_left = base_vel.z_vel / RADIUS_WHEEL;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe fa09 	bl	8000598 <__aeabi_f2d>
 8002186:	a334      	add	r3, pc, #208	@ (adr r3, 8002258 <base2wheel+0x2a8>)
 8002188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218c:	f7fe fb86 	bl	800089c <__aeabi_ddiv>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	f7fe fd4e 	bl	8000c38 <__aeabi_d2f>
 800219c:	4603      	mov	r3, r0
 800219e:	647b      	str	r3, [r7, #68]	@ 0x44
    rear_right = -base_vel.z_vel / RADIUS_WHEEL;
 80021a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80021a4:	eef1 7a67 	vneg.f32	s15, s15
 80021a8:	ee17 3a90 	vmov	r3, s15
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9f3 	bl	8000598 <__aeabi_f2d>
 80021b2:	a329      	add	r3, pc, #164	@ (adr r3, 8002258 <base2wheel+0x2a8>)
 80021b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b8:	f7fe fb70 	bl	800089c <__aeabi_ddiv>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	f7fe fd38 	bl	8000c38 <__aeabi_d2f>
 80021c8:	4603      	mov	r3, r0
 80021ca:	643b      	str	r3, [r7, #64]	@ 0x40
  }
  if (base_vel.x_vel < 0 || base_vel.y_vel < 0) {
 80021cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80021d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d8:	d406      	bmi.n	80021e8 <base2wheel+0x238>
 80021da:	edd7 7a06 	vldr	s15, [r7, #24]
 80021de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e6:	d517      	bpl.n	8002218 <base2wheel+0x268>
    front_left = -front_left;
 80021e8:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80021ec:	eef1 7a67 	vneg.f32	s15, s15
 80021f0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    front_right = -front_right;
 80021f4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80021f8:	eef1 7a67 	vneg.f32	s15, s15
 80021fc:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    rear_left = -rear_left;
 8002200:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002204:	eef1 7a67 	vneg.f32	s15, s15
 8002208:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    rear_right = -rear_right;
 800220c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002210:	eef1 7a67 	vneg.f32	s15, s15
 8002214:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  }
  return (WheelVelocity){front_left, front_right, rear_left, rear_right};
 8002218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800221a:	633b      	str	r3, [r7, #48]	@ 0x30
 800221c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800221e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002220:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002222:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002224:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002226:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002228:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800222a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800222c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800222e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002230:	ee06 0a10 	vmov	s12, r0
 8002234:	ee06 1a90 	vmov	s13, r1
 8002238:	ee07 2a10 	vmov	s14, r2
 800223c:	ee07 3a90 	vmov	s15, r3
}
 8002240:	eeb0 0a46 	vmov.f32	s0, s12
 8002244:	eef0 0a66 	vmov.f32	s1, s13
 8002248:	eeb0 1a47 	vmov.f32	s2, s14
 800224c:	eef0 1a67 	vmov.f32	s3, s15
 8002250:	3750      	adds	r7, #80	@ 0x50
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	020c49ba 	.word	0x020c49ba
 800225c:	3f96872b 	.word	0x3f96872b

08002260 <wheel2pwm>:
  // float y_vel = (-wheel_vel.front_left + wheel_vel.front_right + wheel_vel.rear_left - wheel_vel.rear_right) * RADIUS_WHEEL / 4.0;
  // float z_vel = (-wheel_vel.front_left + wheel_vel.front_right - wheel_vel.rear_left + wheel_vel.rear_right) * RADIUS_WHEEL / (4.0 * (LENGTH_CENTER_WHEEL_X + LENGTH_CENTER_WHEEL_Y));
  // return (BaseVelocity){x_vel, y_vel, z_vel};
}

WheelPWM wheel2pwm(WheelVelocity wheel_vel) {
 8002260:	b5b0      	push	{r4, r5, r7, lr}
 8002262:	b08e      	sub	sp, #56	@ 0x38
 8002264:	af00      	add	r7, sp, #0
 8002266:	6178      	str	r0, [r7, #20]
 8002268:	eeb0 6a40 	vmov.f32	s12, s0
 800226c:	eef0 6a60 	vmov.f32	s13, s1
 8002270:	eeb0 7a41 	vmov.f32	s14, s2
 8002274:	eef0 7a61 	vmov.f32	s15, s3
 8002278:	ed87 6a01 	vstr	s12, [r7, #4]
 800227c:	edc7 6a02 	vstr	s13, [r7, #8]
 8002280:	ed87 7a03 	vstr	s14, [r7, #12]
 8002284:	edc7 7a04 	vstr	s15, [r7, #16]
  int front_left = (int)(wheel_vel.front_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * FL_MOTOR_ARR / 100.0);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe f984 	bl	8000598 <__aeabi_f2d>
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	4b92      	ldr	r3, [pc, #584]	@ (80024e0 <wheel2pwm+0x280>)
 8002296:	f7fe f9d7 	bl	8000648 <__aeabi_dmul>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4610      	mov	r0, r2
 80022a0:	4619      	mov	r1, r3
 80022a2:	a38b      	add	r3, pc, #556	@ (adr r3, 80024d0 <wheel2pwm+0x270>)
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	f7fe faf8 	bl	800089c <__aeabi_ddiv>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4610      	mov	r0, r2
 80022b2:	4619      	mov	r1, r3
 80022b4:	a388      	add	r3, pc, #544	@ (adr r3, 80024d8 <wheel2pwm+0x278>)
 80022b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ba:	f7fe faef 	bl	800089c <__aeabi_ddiv>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4610      	mov	r0, r2
 80022c4:	4619      	mov	r1, r3
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	4b86      	ldr	r3, [pc, #536]	@ (80024e4 <wheel2pwm+0x284>)
 80022cc:	f7fe f9bc 	bl	8000648 <__aeabi_dmul>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4614      	mov	r4, r2
 80022d6:	461d      	mov	r5, r3
 80022d8:	4b83      	ldr	r3, [pc, #524]	@ (80024e8 <wheel2pwm+0x288>)
 80022da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f939 	bl	8000554 <__aeabi_ui2d>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4620      	mov	r0, r4
 80022e8:	4629      	mov	r1, r5
 80022ea:	f7fe f9ad 	bl	8000648 <__aeabi_dmul>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	4610      	mov	r0, r2
 80022f4:	4619      	mov	r1, r3
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	4b7a      	ldr	r3, [pc, #488]	@ (80024e4 <wheel2pwm+0x284>)
 80022fc:	f7fe face 	bl	800089c <__aeabi_ddiv>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4610      	mov	r0, r2
 8002306:	4619      	mov	r1, r3
 8002308:	f7fe fc4e 	bl	8000ba8 <__aeabi_d2iz>
 800230c:	4603      	mov	r3, r0
 800230e:	637b      	str	r3, [r7, #52]	@ 0x34
  int front_right = (int)(wheel_vel.front_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * FR_MOTOR_ARR / 100.0);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe f940 	bl	8000598 <__aeabi_f2d>
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	4b70      	ldr	r3, [pc, #448]	@ (80024e0 <wheel2pwm+0x280>)
 800231e:	f7fe f993 	bl	8000648 <__aeabi_dmul>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4610      	mov	r0, r2
 8002328:	4619      	mov	r1, r3
 800232a:	a369      	add	r3, pc, #420	@ (adr r3, 80024d0 <wheel2pwm+0x270>)
 800232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002330:	f7fe fab4 	bl	800089c <__aeabi_ddiv>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
 800233c:	a366      	add	r3, pc, #408	@ (adr r3, 80024d8 <wheel2pwm+0x278>)
 800233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002342:	f7fe faab 	bl	800089c <__aeabi_ddiv>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	4b64      	ldr	r3, [pc, #400]	@ (80024e4 <wheel2pwm+0x284>)
 8002354:	f7fe f978 	bl	8000648 <__aeabi_dmul>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4614      	mov	r4, r2
 800235e:	461d      	mov	r5, r3
 8002360:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe f8f4 	bl	8000554 <__aeabi_ui2d>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4620      	mov	r0, r4
 8002372:	4629      	mov	r1, r5
 8002374:	f7fe f968 	bl	8000648 <__aeabi_dmul>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	4b57      	ldr	r3, [pc, #348]	@ (80024e4 <wheel2pwm+0x284>)
 8002386:	f7fe fa89 	bl	800089c <__aeabi_ddiv>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4610      	mov	r0, r2
 8002390:	4619      	mov	r1, r3
 8002392:	f7fe fc09 	bl	8000ba8 <__aeabi_d2iz>
 8002396:	4603      	mov	r3, r0
 8002398:	633b      	str	r3, [r7, #48]	@ 0x30
  int rear_left = (int)(wheel_vel.rear_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RL_MOTOR_ARR / 100.0);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe f8fb 	bl	8000598 <__aeabi_f2d>
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	4b4e      	ldr	r3, [pc, #312]	@ (80024e0 <wheel2pwm+0x280>)
 80023a8:	f7fe f94e 	bl	8000648 <__aeabi_dmul>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4610      	mov	r0, r2
 80023b2:	4619      	mov	r1, r3
 80023b4:	a346      	add	r3, pc, #280	@ (adr r3, 80024d0 <wheel2pwm+0x270>)
 80023b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ba:	f7fe fa6f 	bl	800089c <__aeabi_ddiv>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4610      	mov	r0, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	a344      	add	r3, pc, #272	@ (adr r3, 80024d8 <wheel2pwm+0x278>)
 80023c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023cc:	f7fe fa66 	bl	800089c <__aeabi_ddiv>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	4b41      	ldr	r3, [pc, #260]	@ (80024e4 <wheel2pwm+0x284>)
 80023de:	f7fe f933 	bl	8000648 <__aeabi_dmul>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4614      	mov	r4, r2
 80023e8:	461d      	mov	r5, r3
 80023ea:	4b3f      	ldr	r3, [pc, #252]	@ (80024e8 <wheel2pwm+0x288>)
 80023ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f8b0 	bl	8000554 <__aeabi_ui2d>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4620      	mov	r0, r4
 80023fa:	4629      	mov	r1, r5
 80023fc:	f7fe f924 	bl	8000648 <__aeabi_dmul>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4610      	mov	r0, r2
 8002406:	4619      	mov	r1, r3
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	4b35      	ldr	r3, [pc, #212]	@ (80024e4 <wheel2pwm+0x284>)
 800240e:	f7fe fa45 	bl	800089c <__aeabi_ddiv>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4610      	mov	r0, r2
 8002418:	4619      	mov	r1, r3
 800241a:	f7fe fbc5 	bl	8000ba8 <__aeabi_d2iz>
 800241e:	4603      	mov	r3, r0
 8002420:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int rear_right = (int)(wheel_vel.rear_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RR_MOTOR_ARR / 100.0);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe f8b7 	bl	8000598 <__aeabi_f2d>
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	4b2c      	ldr	r3, [pc, #176]	@ (80024e0 <wheel2pwm+0x280>)
 8002430:	f7fe f90a 	bl	8000648 <__aeabi_dmul>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	a324      	add	r3, pc, #144	@ (adr r3, 80024d0 <wheel2pwm+0x270>)
 800243e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002442:	f7fe fa2b 	bl	800089c <__aeabi_ddiv>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4610      	mov	r0, r2
 800244c:	4619      	mov	r1, r3
 800244e:	a322      	add	r3, pc, #136	@ (adr r3, 80024d8 <wheel2pwm+0x278>)
 8002450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002454:	f7fe fa22 	bl	800089c <__aeabi_ddiv>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	4b1f      	ldr	r3, [pc, #124]	@ (80024e4 <wheel2pwm+0x284>)
 8002466:	f7fe f8ef 	bl	8000648 <__aeabi_dmul>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4614      	mov	r4, r2
 8002470:	461d      	mov	r5, r3
 8002472:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe f86b 	bl	8000554 <__aeabi_ui2d>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4620      	mov	r0, r4
 8002484:	4629      	mov	r1, r5
 8002486:	f7fe f8df 	bl	8000648 <__aeabi_dmul>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4610      	mov	r0, r2
 8002490:	4619      	mov	r1, r3
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	4b13      	ldr	r3, [pc, #76]	@ (80024e4 <wheel2pwm+0x284>)
 8002498:	f7fe fa00 	bl	800089c <__aeabi_ddiv>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4610      	mov	r0, r2
 80024a2:	4619      	mov	r1, r3
 80024a4:	f7fe fb80 	bl	8000ba8 <__aeabi_d2iz>
 80024a8:	4603      	mov	r3, r0
 80024aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (WheelPWM){front_left, front_right, rear_left, rear_right};
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024c2:	60da      	str	r2, [r3, #12]
}
 80024c4:	6978      	ldr	r0, [r7, #20]
 80024c6:	3738      	adds	r7, #56	@ 0x38
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bdb0      	pop	{r4, r5, r7, pc}
 80024cc:	f3af 8000 	nop.w
 80024d0:	54442d18 	.word	0x54442d18
 80024d4:	401921fb 	.word	0x401921fb
 80024d8:	980a206e 	.word	0x980a206e
 80024dc:	40a733a9 	.word	0x40a733a9
 80024e0:	404e0000 	.word	0x404e0000
 80024e4:	40590000 	.word	0x40590000
 80024e8:	40000400 	.word	0x40000400

080024ec <wheel_control>:

void wheel_control(Wheel wheel, int speed) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	6039      	str	r1, [r7, #0]
 80024f6:	71fb      	strb	r3, [r7, #7]
  if (speed > 16800)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 80024fe:	4293      	cmp	r3, r2
 8002500:	dd03      	ble.n	800250a <wheel_control+0x1e>
    speed = 16800;
 8002502:	f244 13a0 	movw	r3, #16800	@ 0x41a0
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	e005      	b.n	8002516 <wheel_control+0x2a>
  else if (speed < -16800)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	4a85      	ldr	r2, [pc, #532]	@ (8002724 <wheel_control+0x238>)
 800250e:	4293      	cmp	r3, r2
 8002510:	da01      	bge.n	8002516 <wheel_control+0x2a>
    speed = -16800;
 8002512:	4b84      	ldr	r3, [pc, #528]	@ (8002724 <wheel_control+0x238>)
 8002514:	603b      	str	r3, [r7, #0]

  switch (wheel) {
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	2b03      	cmp	r3, #3
 800251a:	f200 80ce 	bhi.w	80026ba <wheel_control+0x1ce>
 800251e:	a201      	add	r2, pc, #4	@ (adr r2, 8002524 <wheel_control+0x38>)
 8002520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002524:	08002535 	.word	0x08002535
 8002528:	08002597 	.word	0x08002597
 800252c:	080025f5 	.word	0x080025f5
 8002530:	0800265d 	.word	0x0800265d
    case FRONT_LEFT:
      if (speed < 0) {
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	da0b      	bge.n	8002552 <wheel_control+0x66>
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = speed;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_RESET);
 800253a:	2200      	movs	r2, #0
 800253c:	2101      	movs	r1, #1
 800253e:	487a      	ldr	r0, [pc, #488]	@ (8002728 <wheel_control+0x23c>)
 8002540:	f002 fb62 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_SET);
 8002544:	2201      	movs	r2, #1
 8002546:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800254a:	4878      	ldr	r0, [pc, #480]	@ (800272c <wheel_control+0x240>)
 800254c:	f002 fb5c 	bl	8004c08 <HAL_GPIO_WritePin>
 8002550:	e019      	b.n	8002586 <wheel_control+0x9a>
      } else if (speed > 0) {
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	dd0b      	ble.n	8002570 <wheel_control+0x84>
        // FL_MOTOR_A_CCR = -speed;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_SET);
 8002558:	2201      	movs	r2, #1
 800255a:	2101      	movs	r1, #1
 800255c:	4872      	ldr	r0, [pc, #456]	@ (8002728 <wheel_control+0x23c>)
 800255e:	f002 fb53 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 8002562:	2200      	movs	r2, #0
 8002564:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002568:	4870      	ldr	r0, [pc, #448]	@ (800272c <wheel_control+0x240>)
 800256a:	f002 fb4d 	bl	8004c08 <HAL_GPIO_WritePin>
 800256e:	e00a      	b.n	8002586 <wheel_control+0x9a>
      } else {
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_RESET);
 8002570:	2200      	movs	r2, #0
 8002572:	2101      	movs	r1, #1
 8002574:	486c      	ldr	r0, [pc, #432]	@ (8002728 <wheel_control+0x23c>)
 8002576:	f002 fb47 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 800257a:	2200      	movs	r2, #0
 800257c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002580:	486a      	ldr	r0, [pc, #424]	@ (800272c <wheel_control+0x240>)
 8002582:	f002 fb41 	bl	8004c08 <HAL_GPIO_WritePin>
      }
      FL_MOTOR_CCR = abs(speed);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800258c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002590:	4b67      	ldr	r3, [pc, #412]	@ (8002730 <wheel_control+0x244>)
 8002592:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
 8002594:	e0c2      	b.n	800271c <wheel_control+0x230>
    case FRONT_RIGHT:
      if (speed > 0) {
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	dd0a      	ble.n	80025b2 <wheel_control+0xc6>
        // FR_MOTOR_B_CCR = speed;
        // FR_MOTOR_A_CCR = 0;
        HAL_GPIO_WritePin(B_IN1_GPIO_Port, B_IN1_Pin, GPIO_PIN_RESET);
 800259c:	2200      	movs	r2, #0
 800259e:	2110      	movs	r1, #16
 80025a0:	4864      	ldr	r0, [pc, #400]	@ (8002734 <wheel_control+0x248>)
 80025a2:	f002 fb31 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B_IN2_GPIO_Port, B_IN2_Pin, GPIO_PIN_SET);
 80025a6:	2201      	movs	r2, #1
 80025a8:	2120      	movs	r1, #32
 80025aa:	4862      	ldr	r0, [pc, #392]	@ (8002734 <wheel_control+0x248>)
 80025ac:	f002 fb2c 	bl	8004c08 <HAL_GPIO_WritePin>
 80025b0:	e017      	b.n	80025e2 <wheel_control+0xf6>
      } else if (speed < 0) {
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	da0a      	bge.n	80025ce <wheel_control+0xe2>
        // FR_MOTOR_B_CCR = 0;
        // FR_MOTOR_A_CCR = -speed;
        HAL_GPIO_WritePin(B_IN1_GPIO_Port, B_IN1_Pin, GPIO_PIN_SET);
 80025b8:	2201      	movs	r2, #1
 80025ba:	2110      	movs	r1, #16
 80025bc:	485d      	ldr	r0, [pc, #372]	@ (8002734 <wheel_control+0x248>)
 80025be:	f002 fb23 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B_IN2_GPIO_Port, B_IN2_Pin, GPIO_PIN_RESET);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2120      	movs	r1, #32
 80025c6:	485b      	ldr	r0, [pc, #364]	@ (8002734 <wheel_control+0x248>)
 80025c8:	f002 fb1e 	bl	8004c08 <HAL_GPIO_WritePin>
 80025cc:	e009      	b.n	80025e2 <wheel_control+0xf6>
      } else {
        // FR_MOTOR_A_CCR = 0;
        // FR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(B_IN1_GPIO_Port, B_IN1_Pin, GPIO_PIN_RESET);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2110      	movs	r1, #16
 80025d2:	4858      	ldr	r0, [pc, #352]	@ (8002734 <wheel_control+0x248>)
 80025d4:	f002 fb18 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B_IN2_GPIO_Port, B_IN2_Pin, GPIO_PIN_RESET);
 80025d8:	2200      	movs	r2, #0
 80025da:	2120      	movs	r1, #32
 80025dc:	4855      	ldr	r0, [pc, #340]	@ (8002734 <wheel_control+0x248>)
 80025de:	f002 fb13 	bl	8004c08 <HAL_GPIO_WritePin>
      }
      FR_MOTOR_CCR = abs(speed);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80025e8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80025ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80025f0:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 80025f2:	e093      	b.n	800271c <wheel_control+0x230>
    case REAR_LEFT:
      if (speed < 0) {
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	da0c      	bge.n	8002614 <wheel_control+0x128>
        // RL_MOTOR_B_CCR = 0;
        // RL_MOTOR_A_CCR = speed;
        HAL_GPIO_WritePin(D_IN1_GPIO_Port, D_IN1_Pin, GPIO_PIN_SET);
 80025fa:	2201      	movs	r2, #1
 80025fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002600:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002604:	f002 fb00 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D_IN2_GPIO_Port, D_IN2_Pin, GPIO_PIN_RESET);
 8002608:	2200      	movs	r2, #0
 800260a:	2180      	movs	r1, #128	@ 0x80
 800260c:	484a      	ldr	r0, [pc, #296]	@ (8002738 <wheel_control+0x24c>)
 800260e:	f002 fafb 	bl	8004c08 <HAL_GPIO_WritePin>
 8002612:	e01b      	b.n	800264c <wheel_control+0x160>
      } else if (speed > 0) {
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	dd0c      	ble.n	8002634 <wheel_control+0x148>
        // RL_MOTOR_B_CCR = -speed;
        // RL_MOTOR_A_CCR = 0;
        HAL_GPIO_WritePin(D_IN1_GPIO_Port, D_IN1_Pin, GPIO_PIN_RESET);
 800261a:	2200      	movs	r2, #0
 800261c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002620:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002624:	f002 faf0 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D_IN2_GPIO_Port, D_IN2_Pin, GPIO_PIN_SET);
 8002628:	2201      	movs	r2, #1
 800262a:	2180      	movs	r1, #128	@ 0x80
 800262c:	4842      	ldr	r0, [pc, #264]	@ (8002738 <wheel_control+0x24c>)
 800262e:	f002 faeb 	bl	8004c08 <HAL_GPIO_WritePin>
 8002632:	e00b      	b.n	800264c <wheel_control+0x160>
      } else {
        // RL_MOTOR_A_CCR = 0;
        // RL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(D_IN1_GPIO_Port, D_IN1_Pin, GPIO_PIN_RESET);
 8002634:	2200      	movs	r2, #0
 8002636:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800263a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800263e:	f002 fae3 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D_IN2_GPIO_Port, D_IN2_Pin, GPIO_PIN_RESET);
 8002642:	2200      	movs	r2, #0
 8002644:	2180      	movs	r1, #128	@ 0x80
 8002646:	483c      	ldr	r0, [pc, #240]	@ (8002738 <wheel_control+0x24c>)
 8002648:	f002 fade 	bl	8004c08 <HAL_GPIO_WritePin>
      }
      RL_MOTOR_CCR = abs(speed);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002652:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002656:	4b36      	ldr	r3, [pc, #216]	@ (8002730 <wheel_control+0x244>)
 8002658:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 800265a:	e05f      	b.n	800271c <wheel_control+0x230>
    case REAR_RIGHT:
      if (speed > 0) {
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	dd0a      	ble.n	8002678 <wheel_control+0x18c>
        // RR_MOTOR_A_CCR = speed;
        // RR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(A_IN1_GPIO_Port, A_IN1_Pin, GPIO_PIN_SET);
 8002662:	2201      	movs	r2, #1
 8002664:	2101      	movs	r1, #1
 8002666:	4834      	ldr	r0, [pc, #208]	@ (8002738 <wheel_control+0x24c>)
 8002668:	f002 face 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(A_IN2_GPIO_Port, A_IN2_Pin, GPIO_PIN_RESET);
 800266c:	2200      	movs	r2, #0
 800266e:	2140      	movs	r1, #64	@ 0x40
 8002670:	4830      	ldr	r0, [pc, #192]	@ (8002734 <wheel_control+0x248>)
 8002672:	f002 fac9 	bl	8004c08 <HAL_GPIO_WritePin>
 8002676:	e017      	b.n	80026a8 <wheel_control+0x1bc>
      } else if (speed < 0) {
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	da0a      	bge.n	8002694 <wheel_control+0x1a8>
        // RR_MOTOR_A_CCR = 0;
        // RR_MOTOR_B_CCR = -speed;
        HAL_GPIO_WritePin(A_IN1_GPIO_Port, A_IN1_Pin, GPIO_PIN_RESET);
 800267e:	2200      	movs	r2, #0
 8002680:	2101      	movs	r1, #1
 8002682:	482d      	ldr	r0, [pc, #180]	@ (8002738 <wheel_control+0x24c>)
 8002684:	f002 fac0 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(A_IN2_GPIO_Port, A_IN2_Pin, GPIO_PIN_SET);
 8002688:	2201      	movs	r2, #1
 800268a:	2140      	movs	r1, #64	@ 0x40
 800268c:	4829      	ldr	r0, [pc, #164]	@ (8002734 <wheel_control+0x248>)
 800268e:	f002 fabb 	bl	8004c08 <HAL_GPIO_WritePin>
 8002692:	e009      	b.n	80026a8 <wheel_control+0x1bc>
      } else {
        // RR_MOTOR_A_CCR = 0;
        // RR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(A_IN1_GPIO_Port, A_IN1_Pin, GPIO_PIN_RESET);
 8002694:	2200      	movs	r2, #0
 8002696:	2101      	movs	r1, #1
 8002698:	4827      	ldr	r0, [pc, #156]	@ (8002738 <wheel_control+0x24c>)
 800269a:	f002 fab5 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(A_IN2_GPIO_Port, A_IN2_Pin, GPIO_PIN_RESET);
 800269e:	2200      	movs	r2, #0
 80026a0:	2140      	movs	r1, #64	@ 0x40
 80026a2:	4824      	ldr	r0, [pc, #144]	@ (8002734 <wheel_control+0x248>)
 80026a4:	f002 fab0 	bl	8004c08 <HAL_GPIO_WritePin>
      }
      RR_MOTOR_CCR = abs(speed);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80026ae:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80026b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80026b6:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
 80026b8:	e030      	b.n	800271c <wheel_control+0x230>
    default:
      if (speed < 0) {
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	da0b      	bge.n	80026d8 <wheel_control+0x1ec>
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = speed;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_RESET);
 80026c0:	2200      	movs	r2, #0
 80026c2:	2101      	movs	r1, #1
 80026c4:	4818      	ldr	r0, [pc, #96]	@ (8002728 <wheel_control+0x23c>)
 80026c6:	f002 fa9f 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_SET);
 80026ca:	2201      	movs	r2, #1
 80026cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80026d0:	4816      	ldr	r0, [pc, #88]	@ (800272c <wheel_control+0x240>)
 80026d2:	f002 fa99 	bl	8004c08 <HAL_GPIO_WritePin>
 80026d6:	e019      	b.n	800270c <wheel_control+0x220>
      } else if (speed > 0) {
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	dd0b      	ble.n	80026f6 <wheel_control+0x20a>
        // FL_MOTOR_A_CCR = -speed;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_SET);
 80026de:	2201      	movs	r2, #1
 80026e0:	2101      	movs	r1, #1
 80026e2:	4811      	ldr	r0, [pc, #68]	@ (8002728 <wheel_control+0x23c>)
 80026e4:	f002 fa90 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 80026e8:	2200      	movs	r2, #0
 80026ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80026ee:	480f      	ldr	r0, [pc, #60]	@ (800272c <wheel_control+0x240>)
 80026f0:	f002 fa8a 	bl	8004c08 <HAL_GPIO_WritePin>
 80026f4:	e00a      	b.n	800270c <wheel_control+0x220>
      } else {
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_RESET);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2101      	movs	r1, #1
 80026fa:	480b      	ldr	r0, [pc, #44]	@ (8002728 <wheel_control+0x23c>)
 80026fc:	f002 fa84 	bl	8004c08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 8002700:	2200      	movs	r2, #0
 8002702:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002706:	4809      	ldr	r0, [pc, #36]	@ (800272c <wheel_control+0x240>)
 8002708:	f002 fa7e 	bl	8004c08 <HAL_GPIO_WritePin>
      }
      FL_MOTOR_CCR = abs(speed);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002712:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002716:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <wheel_control+0x244>)
 8002718:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
 800271a:	bf00      	nop
  }
}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	ffffbe60 	.word	0xffffbe60
 8002728:	48000c00 	.word	0x48000c00
 800272c:	48000800 	.word	0x48000800
 8002730:	40000400 	.word	0x40000400
 8002734:	48001000 	.word	0x48001000
 8002738:	48000400 	.word	0x48000400

0800273c <wheels_control>:

void wheels_control(WheelPWM pwm) {
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	463c      	mov	r4, r7
 8002744:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  wheel_control(FRONT_LEFT, pwm.front_left);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	4619      	mov	r1, r3
 800274c:	2000      	movs	r0, #0
 800274e:	f7ff fecd 	bl	80024ec <wheel_control>
  wheel_control(FRONT_RIGHT, pwm.front_right);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4619      	mov	r1, r3
 8002756:	2001      	movs	r0, #1
 8002758:	f7ff fec8 	bl	80024ec <wheel_control>
  wheel_control(REAR_LEFT, pwm.rear_left);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4619      	mov	r1, r3
 8002760:	2002      	movs	r0, #2
 8002762:	f7ff fec3 	bl	80024ec <wheel_control>
  wheel_control(REAR_RIGHT, pwm.rear_right);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4619      	mov	r1, r3
 800276a:	2003      	movs	r0, #3
 800276c:	f7ff febe 	bl	80024ec <wheel_control>
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	bd90      	pop	{r4, r7, pc}

08002778 <rotate_motor>:

void rotate_motor(BaseVelocity base_vel) {
 8002778:	b5b0      	push	{r4, r5, r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	eef0 6a40 	vmov.f32	s13, s0
 8002782:	eeb0 7a60 	vmov.f32	s14, s1
 8002786:	eef0 7a41 	vmov.f32	s15, s2
 800278a:	edc7 6a01 	vstr	s13, [r7, #4]
 800278e:	ed87 7a02 	vstr	s14, [r7, #8]
 8002792:	edc7 7a03 	vstr	s15, [r7, #12]
  if (base_vel.z_vel != 0) {
 8002796:	edd7 7a03 	vldr	s15, [r7, #12]
 800279a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800279e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a2:	d075      	beq.n	8002890 <rotate_motor+0x118>
    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(45), SHORTEST_TIME_ROTATE(1, 45));
 80027a4:	4bd6      	ldr	r3, [pc, #856]	@ (8002b00 <rotate_motor+0x388>)
 80027a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027aa:	3b2d      	subs	r3, #45	@ 0x2d
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bfb8      	it	lt
 80027b0:	425b      	neglt	r3, r3
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fd fede 	bl	8000574 <__aeabi_i2d>
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	4bd1      	ldr	r3, [pc, #836]	@ (8002b04 <rotate_motor+0x38c>)
 80027be:	f7fd ff43 	bl	8000648 <__aeabi_dmul>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4610      	mov	r0, r2
 80027c8:	4619      	mov	r1, r3
 80027ca:	f7fe fa15 	bl	8000bf8 <__aeabi_d2uiz>
 80027ce:	4603      	mov	r3, r0
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	f240 21a9 	movw	r1, #681	@ 0x2a9
 80027d8:	48c9      	ldr	r0, [pc, #804]	@ (8002b00 <rotate_motor+0x388>)
 80027da:	f000 fef1 	bl	80035c0 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(-45), SHORTEST_TIME_ROTATE(2, -45));
 80027de:	4bc8      	ldr	r3, [pc, #800]	@ (8002b00 <rotate_motor+0x388>)
 80027e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80027e4:	332d      	adds	r3, #45	@ 0x2d
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	bfb8      	it	lt
 80027ea:	425b      	neglt	r3, r3
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fd fec1 	bl	8000574 <__aeabi_i2d>
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	4bc3      	ldr	r3, [pc, #780]	@ (8002b04 <rotate_motor+0x38c>)
 80027f8:	f7fd ff26 	bl	8000648 <__aeabi_dmul>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	f7fe f9f8 	bl	8000bf8 <__aeabi_d2uiz>
 8002808:	4603      	mov	r3, r0
 800280a:	b29b      	uxth	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	f240 1131 	movw	r1, #305	@ 0x131
 8002812:	48bd      	ldr	r0, [pc, #756]	@ (8002b08 <rotate_motor+0x390>)
 8002814:	f000 fed4 	bl	80035c0 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(45), SHORTEST_TIME_ROTATE(3, 45));
 8002818:	4bb9      	ldr	r3, [pc, #740]	@ (8002b00 <rotate_motor+0x388>)
 800281a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800281e:	3b2d      	subs	r3, #45	@ 0x2d
 8002820:	2b00      	cmp	r3, #0
 8002822:	bfb8      	it	lt
 8002824:	425b      	neglt	r3, r3
 8002826:	4618      	mov	r0, r3
 8002828:	f7fd fea4 	bl	8000574 <__aeabi_i2d>
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	4bb4      	ldr	r3, [pc, #720]	@ (8002b04 <rotate_motor+0x38c>)
 8002832:	f7fd ff09 	bl	8000648 <__aeabi_dmul>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4610      	mov	r0, r2
 800283c:	4619      	mov	r1, r3
 800283e:	f7fe f9db 	bl	8000bf8 <__aeabi_d2uiz>
 8002842:	4603      	mov	r3, r0
 8002844:	b29b      	uxth	r3, r3
 8002846:	461a      	mov	r2, r3
 8002848:	f240 21ad 	movw	r1, #685	@ 0x2ad
 800284c:	48af      	ldr	r0, [pc, #700]	@ (8002b0c <rotate_motor+0x394>)
 800284e:	f000 feb7 	bl	80035c0 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(-45), SHORTEST_TIME_ROTATE(4, -45));
 8002852:	4bab      	ldr	r3, [pc, #684]	@ (8002b00 <rotate_motor+0x388>)
 8002854:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002858:	332d      	adds	r3, #45	@ 0x2d
 800285a:	2b00      	cmp	r3, #0
 800285c:	bfb8      	it	lt
 800285e:	425b      	neglt	r3, r3
 8002860:	4618      	mov	r0, r3
 8002862:	f7fd fe87 	bl	8000574 <__aeabi_i2d>
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	4ba6      	ldr	r3, [pc, #664]	@ (8002b04 <rotate_motor+0x38c>)
 800286c:	f7fd feec 	bl	8000648 <__aeabi_dmul>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	f7fe f9be 	bl	8000bf8 <__aeabi_d2uiz>
 800287c:	4603      	mov	r3, r0
 800287e:	b29b      	uxth	r3, r3
 8002880:	461a      	mov	r2, r3
 8002882:	f240 1131 	movw	r1, #305	@ 0x131
 8002886:	48a2      	ldr	r0, [pc, #648]	@ (8002b10 <rotate_motor+0x398>)
 8002888:	f000 fe9a 	bl	80035c0 <servo_move>
    return;
 800288c:	f000 bdc6 	b.w	800341c <rotate_motor+0xca4>
  }

  float angle = atan2(base_vel.y_vel, base_vel.x_vel) * 180 / M_PI;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fe80 	bl	8000598 <__aeabi_f2d>
 8002898:	4604      	mov	r4, r0
 800289a:	460d      	mov	r5, r1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fe7a 	bl	8000598 <__aeabi_f2d>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	ec43 2b11 	vmov	d1, r2, r3
 80028ac:	ec45 4b10 	vmov	d0, r4, r5
 80028b0:	f006 fe44 	bl	800953c <atan2>
 80028b4:	ec51 0b10 	vmov	r0, r1, d0
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	4b95      	ldr	r3, [pc, #596]	@ (8002b14 <rotate_motor+0x39c>)
 80028be:	f7fd fec3 	bl	8000648 <__aeabi_dmul>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	a38b      	add	r3, pc, #556	@ (adr r3, 8002af8 <rotate_motor+0x380>)
 80028cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d0:	f7fd ffe4 	bl	800089c <__aeabi_ddiv>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	f7fe f9ac 	bl	8000c38 <__aeabi_d2f>
 80028e0:	4603      	mov	r3, r0
 80028e2:	617b      	str	r3, [r7, #20]

  if (base_vel.x_vel == 0 && base_vel.y_vel != 0) {  // angle = 90 or 270
 80028e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80028e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f0:	d17c      	bne.n	80029ec <rotate_motor+0x274>
 80028f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80028f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fe:	d075      	beq.n	80029ec <rotate_motor+0x274>
    servo_move(&(servos[0]), INITIAL_POS, SHORTEST_TIME_ROTATE(1, 90));
 8002900:	4b7f      	ldr	r3, [pc, #508]	@ (8002b00 <rotate_motor+0x388>)
 8002902:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002906:	3b5a      	subs	r3, #90	@ 0x5a
 8002908:	2b00      	cmp	r3, #0
 800290a:	bfb8      	it	lt
 800290c:	425b      	neglt	r3, r3
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fe30 	bl	8000574 <__aeabi_i2d>
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	4b7a      	ldr	r3, [pc, #488]	@ (8002b04 <rotate_motor+0x38c>)
 800291a:	f7fd fe95 	bl	8000648 <__aeabi_dmul>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4610      	mov	r0, r2
 8002924:	4619      	mov	r1, r3
 8002926:	f7fe f967 	bl	8000bf8 <__aeabi_d2uiz>
 800292a:	4603      	mov	r3, r0
 800292c:	b29b      	uxth	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002934:	4872      	ldr	r0, [pc, #456]	@ (8002b00 <rotate_motor+0x388>)
 8002936:	f000 fe43 	bl	80035c0 <servo_move>
    servo_move(&(servos[1]), INITIAL_POS, SHORTEST_TIME_ROTATE(2, 90));
 800293a:	4b71      	ldr	r3, [pc, #452]	@ (8002b00 <rotate_motor+0x388>)
 800293c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002940:	3b5a      	subs	r3, #90	@ 0x5a
 8002942:	2b00      	cmp	r3, #0
 8002944:	bfb8      	it	lt
 8002946:	425b      	neglt	r3, r3
 8002948:	4618      	mov	r0, r3
 800294a:	f7fd fe13 	bl	8000574 <__aeabi_i2d>
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	4b6c      	ldr	r3, [pc, #432]	@ (8002b04 <rotate_motor+0x38c>)
 8002954:	f7fd fe78 	bl	8000648 <__aeabi_dmul>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4610      	mov	r0, r2
 800295e:	4619      	mov	r1, r3
 8002960:	f7fe f94a 	bl	8000bf8 <__aeabi_d2uiz>
 8002964:	4603      	mov	r3, r0
 8002966:	b29b      	uxth	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800296e:	4866      	ldr	r0, [pc, #408]	@ (8002b08 <rotate_motor+0x390>)
 8002970:	f000 fe26 	bl	80035c0 <servo_move>
    servo_move(&(servos[2]), INITIAL_POS, SHORTEST_TIME_ROTATE(3, 90));
 8002974:	4b62      	ldr	r3, [pc, #392]	@ (8002b00 <rotate_motor+0x388>)
 8002976:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800297a:	3b5a      	subs	r3, #90	@ 0x5a
 800297c:	2b00      	cmp	r3, #0
 800297e:	bfb8      	it	lt
 8002980:	425b      	neglt	r3, r3
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fdf6 	bl	8000574 <__aeabi_i2d>
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	4b5d      	ldr	r3, [pc, #372]	@ (8002b04 <rotate_motor+0x38c>)
 800298e:	f7fd fe5b 	bl	8000648 <__aeabi_dmul>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	f7fe f92d 	bl	8000bf8 <__aeabi_d2uiz>
 800299e:	4603      	mov	r3, r0
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80029a8:	4859      	ldr	r0, [pc, #356]	@ (8002b10 <rotate_motor+0x398>)
 80029aa:	f000 fe09 	bl	80035c0 <servo_move>
    servo_move(&(servos[3]), INITIAL_POS, SHORTEST_TIME_ROTATE(4, 90));
 80029ae:	4b54      	ldr	r3, [pc, #336]	@ (8002b00 <rotate_motor+0x388>)
 80029b0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80029b4:	3b5a      	subs	r3, #90	@ 0x5a
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	bfb8      	it	lt
 80029ba:	425b      	neglt	r3, r3
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fdd9 	bl	8000574 <__aeabi_i2d>
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	4b4f      	ldr	r3, [pc, #316]	@ (8002b04 <rotate_motor+0x38c>)
 80029c8:	f7fd fe3e 	bl	8000648 <__aeabi_dmul>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	f7fe f910 	bl	8000bf8 <__aeabi_d2uiz>
 80029d8:	4603      	mov	r3, r0
 80029da:	b29b      	uxth	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80029e2:	484a      	ldr	r0, [pc, #296]	@ (8002b0c <rotate_motor+0x394>)
 80029e4:	f000 fdec 	bl	80035c0 <servo_move>
 80029e8:	f000 bd18 	b.w	800341c <rotate_motor+0xca4>
  } else if (base_vel.x_vel != 0 && base_vel.y_vel == 0) {  // angle = 0 or 180
 80029ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80029f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f8:	f000 8092 	beq.w	8002b20 <rotate_motor+0x3a8>
 80029fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a08:	f040 808a 	bne.w	8002b20 <rotate_motor+0x3a8>
    servo_move(&(servos[0]), SERVO_ID1_MAX_POS, SHORTEST_TIME_ROTATE(1, 90));
 8002a0c:	4b3c      	ldr	r3, [pc, #240]	@ (8002b00 <rotate_motor+0x388>)
 8002a0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a12:	3b5a      	subs	r3, #90	@ 0x5a
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	bfb8      	it	lt
 8002a18:	425b      	neglt	r3, r3
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fdaa 	bl	8000574 <__aeabi_i2d>
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	4b37      	ldr	r3, [pc, #220]	@ (8002b04 <rotate_motor+0x38c>)
 8002a26:	f7fd fe0f 	bl	8000648 <__aeabi_dmul>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4610      	mov	r0, r2
 8002a30:	4619      	mov	r1, r3
 8002a32:	f7fe f8e1 	bl	8000bf8 <__aeabi_d2uiz>
 8002a36:	4603      	mov	r3, r0
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f240 315e 	movw	r1, #862	@ 0x35e
 8002a40:	482f      	ldr	r0, [pc, #188]	@ (8002b00 <rotate_motor+0x388>)
 8002a42:	f000 fdbd 	bl	80035c0 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_MIN_POS, SHORTEST_TIME_ROTATE(2, 90));
 8002a46:	4b2e      	ldr	r3, [pc, #184]	@ (8002b00 <rotate_motor+0x388>)
 8002a48:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002a4c:	3b5a      	subs	r3, #90	@ 0x5a
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	bfb8      	it	lt
 8002a52:	425b      	neglt	r3, r3
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fd fd8d 	bl	8000574 <__aeabi_i2d>
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	4b29      	ldr	r3, [pc, #164]	@ (8002b04 <rotate_motor+0x38c>)
 8002a60:	f7fd fdf2 	bl	8000648 <__aeabi_dmul>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4610      	mov	r0, r2
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	f7fe f8c4 	bl	8000bf8 <__aeabi_d2uiz>
 8002a70:	4603      	mov	r3, r0
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	461a      	mov	r2, r3
 8002a76:	216e      	movs	r1, #110	@ 0x6e
 8002a78:	4823      	ldr	r0, [pc, #140]	@ (8002b08 <rotate_motor+0x390>)
 8002a7a:	f000 fda1 	bl	80035c0 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_MIN_POS, SHORTEST_TIME_ROTATE(3, 90));
 8002a7e:	4b20      	ldr	r3, [pc, #128]	@ (8002b00 <rotate_motor+0x388>)
 8002a80:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002a84:	3b5a      	subs	r3, #90	@ 0x5a
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bfb8      	it	lt
 8002a8a:	425b      	neglt	r3, r3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fd fd71 	bl	8000574 <__aeabi_i2d>
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	4b1b      	ldr	r3, [pc, #108]	@ (8002b04 <rotate_motor+0x38c>)
 8002a98:	f7fd fdd6 	bl	8000648 <__aeabi_dmul>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f7fe f8a8 	bl	8000bf8 <__aeabi_d2uiz>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	216e      	movs	r1, #110	@ 0x6e
 8002ab0:	4817      	ldr	r0, [pc, #92]	@ (8002b10 <rotate_motor+0x398>)
 8002ab2:	f000 fd85 	bl	80035c0 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_MAX_POS, SHORTEST_TIME_ROTATE(4, 90));
 8002ab6:	4b12      	ldr	r3, [pc, #72]	@ (8002b00 <rotate_motor+0x388>)
 8002ab8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002abc:	3b5a      	subs	r3, #90	@ 0x5a
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	bfb8      	it	lt
 8002ac2:	425b      	neglt	r3, r3
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fd55 	bl	8000574 <__aeabi_i2d>
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	4b0d      	ldr	r3, [pc, #52]	@ (8002b04 <rotate_motor+0x38c>)
 8002ad0:	f7fd fdba 	bl	8000648 <__aeabi_dmul>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	f7fe f88c 	bl	8000bf8 <__aeabi_d2uiz>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	f240 3166 	movw	r1, #870	@ 0x366
 8002aea:	4808      	ldr	r0, [pc, #32]	@ (8002b0c <rotate_motor+0x394>)
 8002aec:	f000 fd68 	bl	80035c0 <servo_move>
 8002af0:	f000 bc94 	b.w	800341c <rotate_motor+0xca4>
 8002af4:	f3af 8000 	nop.w
 8002af8:	54442d18 	.word	0x54442d18
 8002afc:	400921fb 	.word	0x400921fb
 8002b00:	20000060 	.word	0x20000060
 8002b04:	40080000 	.word	0x40080000
 8002b08:	20000066 	.word	0x20000066
 8002b0c:	20000072 	.word	0x20000072
 8002b10:	2000006c 	.word	0x2000006c
 8002b14:	40668000 	.word	0x40668000
 8002b18:	43340000 	.word	0x43340000
 8002b1c:	42b40000 	.word	0x42b40000
  } else if (base_vel.x_vel < 0 && base_vel.y_vel > 0 || base_vel.x_vel > 0 && base_vel.y_vel < 0) {  // quadrant 2 or 4
 8002b20:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2c:	d506      	bpl.n	8002b3c <rotate_motor+0x3c4>
 8002b2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3a:	dc0f      	bgt.n	8002b5c <rotate_motor+0x3e4>
 8002b3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b48:	f340 822d 	ble.w	8002fa6 <rotate_motor+0x82e>
 8002b4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b58:	f140 8225 	bpl.w	8002fa6 <rotate_motor+0x82e>
    if (angle < 0)
 8002b5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b68:	d507      	bpl.n	8002b7a <rotate_motor+0x402>
      angle += 180;
 8002b6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b6e:	ed1f 7a16 	vldr	s14, [pc, #-88]	@ 8002b18 <rotate_motor+0x3a0>
 8002b72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b76:	edc7 7a05 	vstr	s15, [r7, #20]
    angle -= 90;
 8002b7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b7e:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 8002b1c <rotate_motor+0x3a4>
 8002b82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b86:	edc7 7a05 	vstr	s15, [r7, #20]
    angle *= -1;
 8002b8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b8e:	eef1 7a67 	vneg.f32	s15, s15
 8002b92:	edc7 7a05 	vstr	s15, [r7, #20]

    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(1, angle));
 8002b96:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba2:	dd22      	ble.n	8002bea <rotate_motor+0x472>
 8002ba4:	6978      	ldr	r0, [r7, #20]
 8002ba6:	f7fd fcf7 	bl	8000598 <__aeabi_f2d>
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	4bce      	ldr	r3, [pc, #824]	@ (8002ee8 <rotate_motor+0x770>)
 8002bb0:	f7fd fe74 	bl	800089c <__aeabi_ddiv>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	a3c0      	add	r3, pc, #768	@ (adr r3, 8002ec0 <rotate_motor+0x748>)
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	f7fd fd41 	bl	8000648 <__aeabi_dmul>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	4bc6      	ldr	r3, [pc, #792]	@ (8002eec <rotate_motor+0x774>)
 8002bd4:	f7fd fb82 	bl	80002dc <__adddf3>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	f7fe f80a 	bl	8000bf8 <__aeabi_d2uiz>
 8002be4:	4603      	mov	r3, r0
 8002be6:	b29c      	uxth	r4, r3
 8002be8:	e021      	b.n	8002c2e <rotate_motor+0x4b6>
 8002bea:	6978      	ldr	r0, [r7, #20]
 8002bec:	f7fd fcd4 	bl	8000598 <__aeabi_f2d>
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	4bbc      	ldr	r3, [pc, #752]	@ (8002ee8 <rotate_motor+0x770>)
 8002bf6:	f7fd fe51 	bl	800089c <__aeabi_ddiv>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4619      	mov	r1, r3
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	4bba      	ldr	r3, [pc, #744]	@ (8002ef0 <rotate_motor+0x778>)
 8002c08:	f7fd fd1e 	bl	8000648 <__aeabi_dmul>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	4bb4      	ldr	r3, [pc, #720]	@ (8002eec <rotate_motor+0x774>)
 8002c1a:	f7fd fb5f 	bl	80002dc <__adddf3>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	f7fd ffe7 	bl	8000bf8 <__aeabi_d2uiz>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	b29c      	uxth	r4, r3
 8002c2e:	4bb1      	ldr	r3, [pc, #708]	@ (8002ef4 <rotate_motor+0x77c>)
 8002c30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c34:	335a      	adds	r3, #90	@ 0x5a
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c42:	eddf 6aad 	vldr	s13, [pc, #692]	@ 8002ef8 <rotate_motor+0x780>
 8002c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c52:	ee17 3a90 	vmov	r3, s15
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	bfb8      	it	lt
 8002c5a:	425b      	neglt	r3, r3
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fc89 	bl	8000574 <__aeabi_i2d>
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	4ba5      	ldr	r3, [pc, #660]	@ (8002efc <rotate_motor+0x784>)
 8002c68:	f7fd fcee 	bl	8000648 <__aeabi_dmul>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	f7fd ffc0 	bl	8000bf8 <__aeabi_d2uiz>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4621      	mov	r1, r4
 8002c80:	489c      	ldr	r0, [pc, #624]	@ (8002ef4 <rotate_motor+0x77c>)
 8002c82:	f000 fc9d 	bl	80035c0 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(2, angle));
 8002c86:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c92:	dd22      	ble.n	8002cda <rotate_motor+0x562>
 8002c94:	6978      	ldr	r0, [r7, #20]
 8002c96:	f7fd fc7f 	bl	8000598 <__aeabi_f2d>
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	4b92      	ldr	r3, [pc, #584]	@ (8002ee8 <rotate_motor+0x770>)
 8002ca0:	f7fd fdfc 	bl	800089c <__aeabi_ddiv>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	a386      	add	r3, pc, #536	@ (adr r3, 8002ec8 <rotate_motor+0x750>)
 8002cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb2:	f7fd fcc9 	bl	8000648 <__aeabi_dmul>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	4b8a      	ldr	r3, [pc, #552]	@ (8002eec <rotate_motor+0x774>)
 8002cc4:	f7fd fb0a 	bl	80002dc <__adddf3>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f7fd ff92 	bl	8000bf8 <__aeabi_d2uiz>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	b29c      	uxth	r4, r3
 8002cd8:	e021      	b.n	8002d1e <rotate_motor+0x5a6>
 8002cda:	6978      	ldr	r0, [r7, #20]
 8002cdc:	f7fd fc5c 	bl	8000598 <__aeabi_f2d>
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	4b80      	ldr	r3, [pc, #512]	@ (8002ee8 <rotate_motor+0x770>)
 8002ce6:	f7fd fdd9 	bl	800089c <__aeabi_ddiv>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	a377      	add	r3, pc, #476	@ (adr r3, 8002ed0 <rotate_motor+0x758>)
 8002cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf8:	f7fd fca6 	bl	8000648 <__aeabi_dmul>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4610      	mov	r0, r2
 8002d02:	4619      	mov	r1, r3
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	4b78      	ldr	r3, [pc, #480]	@ (8002eec <rotate_motor+0x774>)
 8002d0a:	f7fd fae7 	bl	80002dc <__adddf3>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	f7fd ff6f 	bl	8000bf8 <__aeabi_d2uiz>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	b29c      	uxth	r4, r3
 8002d1e:	4b75      	ldr	r3, [pc, #468]	@ (8002ef4 <rotate_motor+0x77c>)
 8002d20:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d24:	335a      	adds	r3, #90	@ 0x5a
 8002d26:	ee07 3a90 	vmov	s15, r3
 8002d2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d32:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002ef8 <rotate_motor+0x780>
 8002d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d42:	ee17 3a90 	vmov	r3, s15
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	bfb8      	it	lt
 8002d4a:	425b      	neglt	r3, r3
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fd fc11 	bl	8000574 <__aeabi_i2d>
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	4b69      	ldr	r3, [pc, #420]	@ (8002efc <rotate_motor+0x784>)
 8002d58:	f7fd fc76 	bl	8000648 <__aeabi_dmul>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4610      	mov	r0, r2
 8002d62:	4619      	mov	r1, r3
 8002d64:	f7fd ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4621      	mov	r1, r4
 8002d70:	4863      	ldr	r0, [pc, #396]	@ (8002f00 <rotate_motor+0x788>)
 8002d72:	f000 fc25 	bl	80035c0 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(3, angle));
 8002d76:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d82:	dd22      	ble.n	8002dca <rotate_motor+0x652>
 8002d84:	6978      	ldr	r0, [r7, #20]
 8002d86:	f7fd fc07 	bl	8000598 <__aeabi_f2d>
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	4b56      	ldr	r3, [pc, #344]	@ (8002ee8 <rotate_motor+0x770>)
 8002d90:	f7fd fd84 	bl	800089c <__aeabi_ddiv>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	a34e      	add	r3, pc, #312	@ (adr r3, 8002ed8 <rotate_motor+0x760>)
 8002d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da2:	f7fd fc51 	bl	8000648 <__aeabi_dmul>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	4b4e      	ldr	r3, [pc, #312]	@ (8002eec <rotate_motor+0x774>)
 8002db4:	f7fd fa92 	bl	80002dc <__adddf3>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	f7fd ff1a 	bl	8000bf8 <__aeabi_d2uiz>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	b29c      	uxth	r4, r3
 8002dc8:	e021      	b.n	8002e0e <rotate_motor+0x696>
 8002dca:	6978      	ldr	r0, [r7, #20]
 8002dcc:	f7fd fbe4 	bl	8000598 <__aeabi_f2d>
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	4b44      	ldr	r3, [pc, #272]	@ (8002ee8 <rotate_motor+0x770>)
 8002dd6:	f7fd fd61 	bl	800089c <__aeabi_ddiv>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4610      	mov	r0, r2
 8002de0:	4619      	mov	r1, r3
 8002de2:	a33b      	add	r3, pc, #236	@ (adr r3, 8002ed0 <rotate_motor+0x758>)
 8002de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de8:	f7fd fc2e 	bl	8000648 <__aeabi_dmul>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4610      	mov	r0, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	4b3c      	ldr	r3, [pc, #240]	@ (8002eec <rotate_motor+0x774>)
 8002dfa:	f7fd fa6f 	bl	80002dc <__adddf3>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4610      	mov	r0, r2
 8002e04:	4619      	mov	r1, r3
 8002e06:	f7fd fef7 	bl	8000bf8 <__aeabi_d2uiz>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	b29c      	uxth	r4, r3
 8002e0e:	4b39      	ldr	r3, [pc, #228]	@ (8002ef4 <rotate_motor+0x77c>)
 8002e10:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002e14:	335a      	adds	r3, #90	@ 0x5a
 8002e16:	ee07 3a90 	vmov	s15, r3
 8002e1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e22:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8002ef8 <rotate_motor+0x780>
 8002e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e32:	ee17 3a90 	vmov	r3, s15
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	bfb8      	it	lt
 8002e3a:	425b      	neglt	r3, r3
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fd fb99 	bl	8000574 <__aeabi_i2d>
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	4b2d      	ldr	r3, [pc, #180]	@ (8002efc <rotate_motor+0x784>)
 8002e48:	f7fd fbfe 	bl	8000648 <__aeabi_dmul>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4610      	mov	r0, r2
 8002e52:	4619      	mov	r1, r3
 8002e54:	f7fd fed0 	bl	8000bf8 <__aeabi_d2uiz>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4621      	mov	r1, r4
 8002e60:	4828      	ldr	r0, [pc, #160]	@ (8002f04 <rotate_motor+0x78c>)
 8002e62:	f000 fbad 	bl	80035c0 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(4, angle));
 8002e66:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e72:	dd49      	ble.n	8002f08 <rotate_motor+0x790>
 8002e74:	6978      	ldr	r0, [r7, #20]
 8002e76:	f7fd fb8f 	bl	8000598 <__aeabi_f2d>
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee8 <rotate_motor+0x770>)
 8002e80:	f7fd fd0c 	bl	800089c <__aeabi_ddiv>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	a314      	add	r3, pc, #80	@ (adr r3, 8002ee0 <rotate_motor+0x768>)
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	f7fd fbd9 	bl	8000648 <__aeabi_dmul>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	4b12      	ldr	r3, [pc, #72]	@ (8002eec <rotate_motor+0x774>)
 8002ea4:	f7fd fa1a 	bl	80002dc <__adddf3>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f7fd fea2 	bl	8000bf8 <__aeabi_d2uiz>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	b29c      	uxth	r4, r3
 8002eb8:	e048      	b.n	8002f4c <rotate_motor+0x7d4>
 8002eba:	bf00      	nop
 8002ebc:	f3af 8000 	nop.w
 8002ec0:	00000000 	.word	0x00000000
 8002ec4:	4076a000 	.word	0x4076a000
 8002ec8:	00000000 	.word	0x00000000
 8002ecc:	40775000 	.word	0x40775000
 8002ed0:	00000000 	.word	0x00000000
 8002ed4:	40786000 	.word	0x40786000
 8002ed8:	00000000 	.word	0x00000000
 8002edc:	4076c000 	.word	0x4076c000
 8002ee0:	00000000 	.word	0x00000000
 8002ee4:	40772000 	.word	0x40772000
 8002ee8:	40568000 	.word	0x40568000
 8002eec:	407f4000 	.word	0x407f4000
 8002ef0:	40790000 	.word	0x40790000
 8002ef4:	20000060 	.word	0x20000060
 8002ef8:	42b40000 	.word	0x42b40000
 8002efc:	40080000 	.word	0x40080000
 8002f00:	20000066 	.word	0x20000066
 8002f04:	2000006c 	.word	0x2000006c
 8002f08:	6978      	ldr	r0, [r7, #20]
 8002f0a:	f7fd fb45 	bl	8000598 <__aeabi_f2d>
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	4bd5      	ldr	r3, [pc, #852]	@ (8003268 <rotate_motor+0xaf0>)
 8002f14:	f7fd fcc2 	bl	800089c <__aeabi_ddiv>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	4bd1      	ldr	r3, [pc, #836]	@ (800326c <rotate_motor+0xaf4>)
 8002f26:	f7fd fb8f 	bl	8000648 <__aeabi_dmul>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4610      	mov	r0, r2
 8002f30:	4619      	mov	r1, r3
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	4bce      	ldr	r3, [pc, #824]	@ (8003270 <rotate_motor+0xaf8>)
 8002f38:	f7fd f9d0 	bl	80002dc <__adddf3>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4610      	mov	r0, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	f7fd fe58 	bl	8000bf8 <__aeabi_d2uiz>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	b29c      	uxth	r4, r3
 8002f4c:	4bc9      	ldr	r3, [pc, #804]	@ (8003274 <rotate_motor+0xafc>)
 8002f4e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002f52:	335a      	adds	r3, #90	@ 0x5a
 8002f54:	ee07 3a90 	vmov	s15, r3
 8002f58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f60:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 8003278 <rotate_motor+0xb00>
 8002f64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f70:	ee17 3a90 	vmov	r3, s15
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bfb8      	it	lt
 8002f78:	425b      	neglt	r3, r3
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd fafa 	bl	8000574 <__aeabi_i2d>
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	4bbd      	ldr	r3, [pc, #756]	@ (800327c <rotate_motor+0xb04>)
 8002f86:	f7fd fb5f 	bl	8000648 <__aeabi_dmul>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4610      	mov	r0, r2
 8002f90:	4619      	mov	r1, r3
 8002f92:	f7fd fe31 	bl	8000bf8 <__aeabi_d2uiz>
 8002f96:	4603      	mov	r3, r0
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	48b8      	ldr	r0, [pc, #736]	@ (8003280 <rotate_motor+0xb08>)
 8002fa0:	f000 fb0e 	bl	80035c0 <servo_move>
 8002fa4:	e23a      	b.n	800341c <rotate_motor+0xca4>
  } else if (base_vel.x_vel < 0 && base_vel.y_vel < 0 || base_vel.x_vel > 0 && base_vel.y_vel > 0) {  // quadrant 1 or 3
 8002fa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002faa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb2:	d506      	bpl.n	8002fc2 <rotate_motor+0x84a>
 8002fb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc0:	d40f      	bmi.n	8002fe2 <rotate_motor+0x86a>
 8002fc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fce:	f340 8225 	ble.w	800341c <rotate_motor+0xca4>
 8002fd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fde:	f340 821d 	ble.w	800341c <rotate_motor+0xca4>
    if (angle < 0)
 8002fe2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fe6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fee:	d507      	bpl.n	8003000 <rotate_motor+0x888>
      angle += 180;
 8002ff0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ff4:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8003284 <rotate_motor+0xb0c>
 8002ff8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ffc:	edc7 7a05 	vstr	s15, [r7, #20]
    angle = 90 - angle;
 8003000:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8003278 <rotate_motor+0xb00>
 8003004:	edd7 7a05 	vldr	s15, [r7, #20]
 8003008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300c:	edc7 7a05 	vstr	s15, [r7, #20]

    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(1, angle));
 8003010:	edd7 7a05 	vldr	s15, [r7, #20]
 8003014:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301c:	dd22      	ble.n	8003064 <rotate_motor+0x8ec>
 800301e:	6978      	ldr	r0, [r7, #20]
 8003020:	f7fd faba 	bl	8000598 <__aeabi_f2d>
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	4b8f      	ldr	r3, [pc, #572]	@ (8003268 <rotate_motor+0xaf0>)
 800302a:	f7fd fc37 	bl	800089c <__aeabi_ddiv>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4610      	mov	r0, r2
 8003034:	4619      	mov	r1, r3
 8003036:	a384      	add	r3, pc, #528	@ (adr r3, 8003248 <rotate_motor+0xad0>)
 8003038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303c:	f7fd fb04 	bl	8000648 <__aeabi_dmul>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	4b88      	ldr	r3, [pc, #544]	@ (8003270 <rotate_motor+0xaf8>)
 800304e:	f7fd f945 	bl	80002dc <__adddf3>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4610      	mov	r0, r2
 8003058:	4619      	mov	r1, r3
 800305a:	f7fd fdcd 	bl	8000bf8 <__aeabi_d2uiz>
 800305e:	4603      	mov	r3, r0
 8003060:	b29c      	uxth	r4, r3
 8003062:	e021      	b.n	80030a8 <rotate_motor+0x930>
 8003064:	6978      	ldr	r0, [r7, #20]
 8003066:	f7fd fa97 	bl	8000598 <__aeabi_f2d>
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	4b7e      	ldr	r3, [pc, #504]	@ (8003268 <rotate_motor+0xaf0>)
 8003070:	f7fd fc14 	bl	800089c <__aeabi_ddiv>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	4b81      	ldr	r3, [pc, #516]	@ (8003288 <rotate_motor+0xb10>)
 8003082:	f7fd fae1 	bl	8000648 <__aeabi_dmul>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4610      	mov	r0, r2
 800308c:	4619      	mov	r1, r3
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	4b77      	ldr	r3, [pc, #476]	@ (8003270 <rotate_motor+0xaf8>)
 8003094:	f7fd f922 	bl	80002dc <__adddf3>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	f7fd fdaa 	bl	8000bf8 <__aeabi_d2uiz>
 80030a4:	4603      	mov	r3, r0
 80030a6:	b29c      	uxth	r4, r3
 80030a8:	4b72      	ldr	r3, [pc, #456]	@ (8003274 <rotate_motor+0xafc>)
 80030aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030ae:	335a      	adds	r3, #90	@ 0x5a
 80030b0:	ee07 3a90 	vmov	s15, r3
 80030b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80030bc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8003278 <rotate_motor+0xb00>
 80030c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030cc:	ee17 3a90 	vmov	r3, s15
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bfb8      	it	lt
 80030d4:	425b      	neglt	r3, r3
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd fa4c 	bl	8000574 <__aeabi_i2d>
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	4b66      	ldr	r3, [pc, #408]	@ (800327c <rotate_motor+0xb04>)
 80030e2:	f7fd fab1 	bl	8000648 <__aeabi_dmul>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4610      	mov	r0, r2
 80030ec:	4619      	mov	r1, r3
 80030ee:	f7fd fd83 	bl	8000bf8 <__aeabi_d2uiz>
 80030f2:	4603      	mov	r3, r0
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	4621      	mov	r1, r4
 80030fa:	485e      	ldr	r0, [pc, #376]	@ (8003274 <rotate_motor+0xafc>)
 80030fc:	f000 fa60 	bl	80035c0 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(2, angle));
 8003100:	edd7 7a05 	vldr	s15, [r7, #20]
 8003104:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310c:	dd22      	ble.n	8003154 <rotate_motor+0x9dc>
 800310e:	6978      	ldr	r0, [r7, #20]
 8003110:	f7fd fa42 	bl	8000598 <__aeabi_f2d>
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	4b53      	ldr	r3, [pc, #332]	@ (8003268 <rotate_motor+0xaf0>)
 800311a:	f7fd fbbf 	bl	800089c <__aeabi_ddiv>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4610      	mov	r0, r2
 8003124:	4619      	mov	r1, r3
 8003126:	a34a      	add	r3, pc, #296	@ (adr r3, 8003250 <rotate_motor+0xad8>)
 8003128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312c:	f7fd fa8c 	bl	8000648 <__aeabi_dmul>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4610      	mov	r0, r2
 8003136:	4619      	mov	r1, r3
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	4b4c      	ldr	r3, [pc, #304]	@ (8003270 <rotate_motor+0xaf8>)
 800313e:	f7fd f8cd 	bl	80002dc <__adddf3>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4610      	mov	r0, r2
 8003148:	4619      	mov	r1, r3
 800314a:	f7fd fd55 	bl	8000bf8 <__aeabi_d2uiz>
 800314e:	4603      	mov	r3, r0
 8003150:	b29c      	uxth	r4, r3
 8003152:	e021      	b.n	8003198 <rotate_motor+0xa20>
 8003154:	6978      	ldr	r0, [r7, #20]
 8003156:	f7fd fa1f 	bl	8000598 <__aeabi_f2d>
 800315a:	f04f 0200 	mov.w	r2, #0
 800315e:	4b42      	ldr	r3, [pc, #264]	@ (8003268 <rotate_motor+0xaf0>)
 8003160:	f7fd fb9c 	bl	800089c <__aeabi_ddiv>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4610      	mov	r0, r2
 800316a:	4619      	mov	r1, r3
 800316c:	a33a      	add	r3, pc, #232	@ (adr r3, 8003258 <rotate_motor+0xae0>)
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	f7fd fa69 	bl	8000648 <__aeabi_dmul>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	4b3b      	ldr	r3, [pc, #236]	@ (8003270 <rotate_motor+0xaf8>)
 8003184:	f7fd f8aa 	bl	80002dc <__adddf3>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4610      	mov	r0, r2
 800318e:	4619      	mov	r1, r3
 8003190:	f7fd fd32 	bl	8000bf8 <__aeabi_d2uiz>
 8003194:	4603      	mov	r3, r0
 8003196:	b29c      	uxth	r4, r3
 8003198:	4b36      	ldr	r3, [pc, #216]	@ (8003274 <rotate_motor+0xafc>)
 800319a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800319e:	335a      	adds	r3, #90	@ 0x5a
 80031a0:	ee07 3a90 	vmov	s15, r3
 80031a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80031ac:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8003278 <rotate_motor+0xb00>
 80031b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031bc:	ee17 3a90 	vmov	r3, s15
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bfb8      	it	lt
 80031c4:	425b      	neglt	r3, r3
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd f9d4 	bl	8000574 <__aeabi_i2d>
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	4b2a      	ldr	r3, [pc, #168]	@ (800327c <rotate_motor+0xb04>)
 80031d2:	f7fd fa39 	bl	8000648 <__aeabi_dmul>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4610      	mov	r0, r2
 80031dc:	4619      	mov	r1, r3
 80031de:	f7fd fd0b 	bl	8000bf8 <__aeabi_d2uiz>
 80031e2:	4603      	mov	r3, r0
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	4621      	mov	r1, r4
 80031ea:	4828      	ldr	r0, [pc, #160]	@ (800328c <rotate_motor+0xb14>)
 80031ec:	f000 f9e8 	bl	80035c0 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(3, angle));
 80031f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80031f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fc:	dd48      	ble.n	8003290 <rotate_motor+0xb18>
 80031fe:	6978      	ldr	r0, [r7, #20]
 8003200:	f7fd f9ca 	bl	8000598 <__aeabi_f2d>
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	4b17      	ldr	r3, [pc, #92]	@ (8003268 <rotate_motor+0xaf0>)
 800320a:	f7fd fb47 	bl	800089c <__aeabi_ddiv>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4610      	mov	r0, r2
 8003214:	4619      	mov	r1, r3
 8003216:	a312      	add	r3, pc, #72	@ (adr r3, 8003260 <rotate_motor+0xae8>)
 8003218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321c:	f7fd fa14 	bl	8000648 <__aeabi_dmul>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	4b10      	ldr	r3, [pc, #64]	@ (8003270 <rotate_motor+0xaf8>)
 800322e:	f7fd f855 	bl	80002dc <__adddf3>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4610      	mov	r0, r2
 8003238:	4619      	mov	r1, r3
 800323a:	f7fd fcdd 	bl	8000bf8 <__aeabi_d2uiz>
 800323e:	4603      	mov	r3, r0
 8003240:	b29c      	uxth	r4, r3
 8003242:	e047      	b.n	80032d4 <rotate_motor+0xb5c>
 8003244:	f3af 8000 	nop.w
 8003248:	00000000 	.word	0x00000000
 800324c:	4076a000 	.word	0x4076a000
 8003250:	00000000 	.word	0x00000000
 8003254:	40775000 	.word	0x40775000
 8003258:	00000000 	.word	0x00000000
 800325c:	40786000 	.word	0x40786000
 8003260:	00000000 	.word	0x00000000
 8003264:	4076c000 	.word	0x4076c000
 8003268:	40568000 	.word	0x40568000
 800326c:	40768000 	.word	0x40768000
 8003270:	407f4000 	.word	0x407f4000
 8003274:	20000060 	.word	0x20000060
 8003278:	42b40000 	.word	0x42b40000
 800327c:	40080000 	.word	0x40080000
 8003280:	20000072 	.word	0x20000072
 8003284:	43340000 	.word	0x43340000
 8003288:	40790000 	.word	0x40790000
 800328c:	20000066 	.word	0x20000066
 8003290:	6978      	ldr	r0, [r7, #20]
 8003292:	f7fd f981 	bl	8000598 <__aeabi_f2d>
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	4b67      	ldr	r3, [pc, #412]	@ (8003438 <rotate_motor+0xcc0>)
 800329c:	f7fd fafe 	bl	800089c <__aeabi_ddiv>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4610      	mov	r0, r2
 80032a6:	4619      	mov	r1, r3
 80032a8:	a35f      	add	r3, pc, #380	@ (adr r3, 8003428 <rotate_motor+0xcb0>)
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	f7fd f9cb 	bl	8000648 <__aeabi_dmul>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4610      	mov	r0, r2
 80032b8:	4619      	mov	r1, r3
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	4b5f      	ldr	r3, [pc, #380]	@ (800343c <rotate_motor+0xcc4>)
 80032c0:	f7fd f80c 	bl	80002dc <__adddf3>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4610      	mov	r0, r2
 80032ca:	4619      	mov	r1, r3
 80032cc:	f7fd fc94 	bl	8000bf8 <__aeabi_d2uiz>
 80032d0:	4603      	mov	r3, r0
 80032d2:	b29c      	uxth	r4, r3
 80032d4:	4b5a      	ldr	r3, [pc, #360]	@ (8003440 <rotate_motor+0xcc8>)
 80032d6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80032da:	335a      	adds	r3, #90	@ 0x5a
 80032dc:	ee07 3a90 	vmov	s15, r3
 80032e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80032e8:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8003444 <rotate_motor+0xccc>
 80032ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032f8:	ee17 3a90 	vmov	r3, s15
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	bfb8      	it	lt
 8003300:	425b      	neglt	r3, r3
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd f936 	bl	8000574 <__aeabi_i2d>
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	4b4e      	ldr	r3, [pc, #312]	@ (8003448 <rotate_motor+0xcd0>)
 800330e:	f7fd f99b 	bl	8000648 <__aeabi_dmul>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4610      	mov	r0, r2
 8003318:	4619      	mov	r1, r3
 800331a:	f7fd fc6d 	bl	8000bf8 <__aeabi_d2uiz>
 800331e:	4603      	mov	r3, r0
 8003320:	b29b      	uxth	r3, r3
 8003322:	461a      	mov	r2, r3
 8003324:	4621      	mov	r1, r4
 8003326:	4849      	ldr	r0, [pc, #292]	@ (800344c <rotate_motor+0xcd4>)
 8003328:	f000 f94a 	bl	80035c0 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(4, angle));
 800332c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003330:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003338:	dd22      	ble.n	8003380 <rotate_motor+0xc08>
 800333a:	6978      	ldr	r0, [r7, #20]
 800333c:	f7fd f92c 	bl	8000598 <__aeabi_f2d>
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	4b3c      	ldr	r3, [pc, #240]	@ (8003438 <rotate_motor+0xcc0>)
 8003346:	f7fd faa9 	bl	800089c <__aeabi_ddiv>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4610      	mov	r0, r2
 8003350:	4619      	mov	r1, r3
 8003352:	a337      	add	r3, pc, #220	@ (adr r3, 8003430 <rotate_motor+0xcb8>)
 8003354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003358:	f7fd f976 	bl	8000648 <__aeabi_dmul>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4610      	mov	r0, r2
 8003362:	4619      	mov	r1, r3
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	4b34      	ldr	r3, [pc, #208]	@ (800343c <rotate_motor+0xcc4>)
 800336a:	f7fc ffb7 	bl	80002dc <__adddf3>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4610      	mov	r0, r2
 8003374:	4619      	mov	r1, r3
 8003376:	f7fd fc3f 	bl	8000bf8 <__aeabi_d2uiz>
 800337a:	4603      	mov	r3, r0
 800337c:	b29c      	uxth	r4, r3
 800337e:	e021      	b.n	80033c4 <rotate_motor+0xc4c>
 8003380:	6978      	ldr	r0, [r7, #20]
 8003382:	f7fd f909 	bl	8000598 <__aeabi_f2d>
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	4b2b      	ldr	r3, [pc, #172]	@ (8003438 <rotate_motor+0xcc0>)
 800338c:	f7fd fa86 	bl	800089c <__aeabi_ddiv>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4610      	mov	r0, r2
 8003396:	4619      	mov	r1, r3
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	4b2c      	ldr	r3, [pc, #176]	@ (8003450 <rotate_motor+0xcd8>)
 800339e:	f7fd f953 	bl	8000648 <__aeabi_dmul>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4610      	mov	r0, r2
 80033a8:	4619      	mov	r1, r3
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	4b23      	ldr	r3, [pc, #140]	@ (800343c <rotate_motor+0xcc4>)
 80033b0:	f7fc ff94 	bl	80002dc <__adddf3>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4610      	mov	r0, r2
 80033ba:	4619      	mov	r1, r3
 80033bc:	f7fd fc1c 	bl	8000bf8 <__aeabi_d2uiz>
 80033c0:	4603      	mov	r3, r0
 80033c2:	b29c      	uxth	r4, r3
 80033c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003440 <rotate_motor+0xcc8>)
 80033c6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80033ca:	335a      	adds	r3, #90	@ 0x5a
 80033cc:	ee07 3a90 	vmov	s15, r3
 80033d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80033d8:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8003444 <rotate_motor+0xccc>
 80033dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033e8:	ee17 3a90 	vmov	r3, s15
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bfb8      	it	lt
 80033f0:	425b      	neglt	r3, r3
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fd f8be 	bl	8000574 <__aeabi_i2d>
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	4b12      	ldr	r3, [pc, #72]	@ (8003448 <rotate_motor+0xcd0>)
 80033fe:	f7fd f923 	bl	8000648 <__aeabi_dmul>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4610      	mov	r0, r2
 8003408:	4619      	mov	r1, r3
 800340a:	f7fd fbf5 	bl	8000bf8 <__aeabi_d2uiz>
 800340e:	4603      	mov	r3, r0
 8003410:	b29b      	uxth	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	4621      	mov	r1, r4
 8003416:	480f      	ldr	r0, [pc, #60]	@ (8003454 <rotate_motor+0xcdc>)
 8003418:	f000 f8d2 	bl	80035c0 <servo_move>
  }
}
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bdb0      	pop	{r4, r5, r7, pc}
 8003422:	bf00      	nop
 8003424:	f3af 8000 	nop.w
 8003428:	00000000 	.word	0x00000000
 800342c:	40786000 	.word	0x40786000
 8003430:	00000000 	.word	0x00000000
 8003434:	40772000 	.word	0x40772000
 8003438:	40568000 	.word	0x40568000
 800343c:	407f4000 	.word	0x407f4000
 8003440:	20000060 	.word	0x20000060
 8003444:	42b40000 	.word	0x42b40000
 8003448:	40080000 	.word	0x40080000
 800344c:	2000006c 	.word	0x2000006c
 8003450:	40768000 	.word	0x40768000
 8003454:	20000072 	.word	0x20000072

08003458 <movement_control>:

void movement_control(BaseVelocity base_vel) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b08c      	sub	sp, #48	@ 0x30
 800345c:	af00      	add	r7, sp, #0
 800345e:	eef0 6a40 	vmov.f32	s13, s0
 8003462:	eeb0 7a60 	vmov.f32	s14, s1
 8003466:	eef0 7a41 	vmov.f32	s15, s2
 800346a:	edc7 6a01 	vstr	s13, [r7, #4]
 800346e:	ed87 7a02 	vstr	s14, [r7, #8]
 8003472:	edc7 7a03 	vstr	s15, [r7, #12]
  if (base_vel.x_vel != 0 && direction_encoder != LEFT_RIGHT || base_vel.y_vel != 0 && direction_encoder != FRONT_BACK) {
 8003476:	edd7 7a01 	vldr	s15, [r7, #4]
 800347a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800347e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003482:	d003      	beq.n	800348c <movement_control+0x34>
 8003484:	4b4c      	ldr	r3, [pc, #304]	@ (80035b8 <movement_control+0x160>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d10a      	bne.n	80034a2 <movement_control+0x4a>
 800348c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003490:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003498:	d022      	beq.n	80034e0 <movement_control+0x88>
 800349a:	4b47      	ldr	r3, [pc, #284]	@ (80035b8 <movement_control+0x160>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d01e      	beq.n	80034e0 <movement_control+0x88>
    rotate_motor(base_vel);
 80034a2:	edd7 6a01 	vldr	s13, [r7, #4]
 80034a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80034aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80034ae:	eeb0 0a66 	vmov.f32	s0, s13
 80034b2:	eef0 0a47 	vmov.f32	s1, s14
 80034b6:	eeb0 1a67 	vmov.f32	s2, s15
 80034ba:	f7ff f95d 	bl	8002778 <rotate_motor>
    direction_encoder = base_vel.x_vel != 0 ? LEFT_RIGHT : FRONT_BACK;
 80034be:	edd7 7a01 	vldr	s15, [r7, #4]
 80034c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ca:	bf14      	ite	ne
 80034cc:	2301      	movne	r3, #1
 80034ce:	2300      	moveq	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	4b38      	ldr	r3, [pc, #224]	@ (80035b8 <movement_control+0x160>)
 80034d6:	701a      	strb	r2, [r3, #0]
    HAL_Delay(250);
 80034d8:	20fa      	movs	r0, #250	@ 0xfa
 80034da:	f001 f90d 	bl	80046f8 <HAL_Delay>
 80034de:	e01e      	b.n	800351e <movement_control+0xc6>
  } else if (base_vel.z_vel != 0 && direction_encoder != ROTATE) {
 80034e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80034e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ec:	d017      	beq.n	800351e <movement_control+0xc6>
 80034ee:	4b32      	ldr	r3, [pc, #200]	@ (80035b8 <movement_control+0x160>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d013      	beq.n	800351e <movement_control+0xc6>
    rotate_motor(base_vel);
 80034f6:	edd7 6a01 	vldr	s13, [r7, #4]
 80034fa:	ed97 7a02 	vldr	s14, [r7, #8]
 80034fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003502:	eeb0 0a66 	vmov.f32	s0, s13
 8003506:	eef0 0a47 	vmov.f32	s1, s14
 800350a:	eeb0 1a67 	vmov.f32	s2, s15
 800350e:	f7ff f933 	bl	8002778 <rotate_motor>
    direction_encoder = ROTATE;
 8003512:	4b29      	ldr	r3, [pc, #164]	@ (80035b8 <movement_control+0x160>)
 8003514:	2202      	movs	r2, #2
 8003516:	701a      	strb	r2, [r3, #0]
    HAL_Delay(250);
 8003518:	20fa      	movs	r0, #250	@ 0xfa
 800351a:	f001 f8ed 	bl	80046f8 <HAL_Delay>
  }

  WheelVelocity target_vel = base2wheel(base_vel);
 800351e:	edd7 6a01 	vldr	s13, [r7, #4]
 8003522:	ed97 7a02 	vldr	s14, [r7, #8]
 8003526:	edd7 7a03 	vldr	s15, [r7, #12]
 800352a:	eeb0 0a66 	vmov.f32	s0, s13
 800352e:	eef0 0a47 	vmov.f32	s1, s14
 8003532:	eeb0 1a67 	vmov.f32	s2, s15
 8003536:	f7fe fd3b 	bl	8001fb0 <base2wheel>
 800353a:	eeb0 6a40 	vmov.f32	s12, s0
 800353e:	eef0 6a60 	vmov.f32	s13, s1
 8003542:	eeb0 7a41 	vmov.f32	s14, s2
 8003546:	eef0 7a61 	vmov.f32	s15, s3
 800354a:	ed87 6a08 	vstr	s12, [r7, #32]
 800354e:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8003552:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8003556:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
  if (direction_encoder == LEFT_RIGHT) {
 800355a:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <movement_control+0x160>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d10b      	bne.n	800357a <movement_control+0x122>
    target_vel.rear_left *= -1;
 8003562:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003566:	eef1 7a67 	vneg.f32	s15, s15
 800356a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    target_vel.front_right *= -1;
 800356e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003572:	eef1 7a67 	vneg.f32	s15, s15
 8003576:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  }

  WheelPWM target_pwm = wheel2pwm(target_vel);
 800357a:	f107 0310 	add.w	r3, r7, #16
 800357e:	ed97 6a08 	vldr	s12, [r7, #32]
 8003582:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003586:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800358a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800358e:	eeb0 0a46 	vmov.f32	s0, s12
 8003592:	eef0 0a66 	vmov.f32	s1, s13
 8003596:	eeb0 1a47 	vmov.f32	s2, s14
 800359a:	eef0 1a67 	vmov.f32	s3, s15
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fe fe5e 	bl	8002260 <wheel2pwm>
  wheels_control(target_pwm);
 80035a4:	f107 0310 	add.w	r3, r7, #16
 80035a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035aa:	f7ff f8c7 	bl	800273c <wheels_control>
}
 80035ae:	bf00      	nop
 80035b0:	3730      	adds	r7, #48	@ 0x30
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	2000016a 	.word	0x2000016a
 80035bc:	00000000 	.word	0x00000000

080035c0 <servo_move>:
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
  HAL_UART_Receive(&huart4, receive_buffer, sizeof(receive_buffer), 0xFFFF);
  target_servo->current_pos = (receive_buffer[8] << 8) + receive_buffer[7];
}

void servo_move(HTD45H_Servo* target_servo, uint16_t target_pos, uint16_t time) {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	807b      	strh	r3, [r7, #2]
 80035cc:	4613      	mov	r3, r2
 80035ce:	803b      	strh	r3, [r7, #0]
  uint8_t send_buffer[10];
  send_buffer[0] = send_buffer[1] = FRAME_HEADER;
 80035d0:	2355      	movs	r3, #85	@ 0x55
 80035d2:	737b      	strb	r3, [r7, #13]
 80035d4:	7b7b      	ldrb	r3, [r7, #13]
 80035d6:	733b      	strb	r3, [r7, #12]
  send_buffer[2] = 0x01 * 3 + 5;
 80035d8:	2308      	movs	r3, #8
 80035da:	73bb      	strb	r3, [r7, #14]
  send_buffer[3] = CMD_SERVO_MOVE;
 80035dc:	2303      	movs	r3, #3
 80035de:	73fb      	strb	r3, [r7, #15]
  send_buffer[4] = 0x01;
 80035e0:	2301      	movs	r3, #1
 80035e2:	743b      	strb	r3, [r7, #16]
  send_buffer[5] = GET_LOW_BYTE(time);
 80035e4:	883b      	ldrh	r3, [r7, #0]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	747b      	strb	r3, [r7, #17]
  send_buffer[6] = GET_HIGH_BYTE(time);
 80035ea:	883b      	ldrh	r3, [r7, #0]
 80035ec:	0a1b      	lsrs	r3, r3, #8
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	74bb      	strb	r3, [r7, #18]
  send_buffer[7] = target_servo->servo_id;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	74fb      	strb	r3, [r7, #19]
  send_buffer[8] = GET_LOW_BYTE(target_pos);
 80035fa:	887b      	ldrh	r3, [r7, #2]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	753b      	strb	r3, [r7, #20]
  send_buffer[9] = GET_HIGH_BYTE(target_pos);
 8003600:	887b      	ldrh	r3, [r7, #2]
 8003602:	0a1b      	lsrs	r3, r3, #8
 8003604:	b29b      	uxth	r3, r3
 8003606:	b2db      	uxtb	r3, r3
 8003608:	757b      	strb	r3, [r7, #21]
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
 800360a:	f107 010c 	add.w	r1, r7, #12
 800360e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003612:	220a      	movs	r2, #10
 8003614:	48cc      	ldr	r0, [pc, #816]	@ (8003948 <servo_move+0x388>)
 8003616:	f003 fe7d 	bl	8007314 <HAL_UART_Transmit>
  target_servo->current_pos = target_pos;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	887a      	ldrh	r2, [r7, #2]
 800361e:	805a      	strh	r2, [r3, #2]

  switch (target_servo->servo_id) {
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	3b01      	subs	r3, #1
 8003626:	2b05      	cmp	r3, #5
 8003628:	f200 81a2 	bhi.w	8003970 <servo_move+0x3b0>
 800362c:	a201      	add	r2, pc, #4	@ (adr r2, 8003634 <servo_move+0x74>)
 800362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003632:	bf00      	nop
 8003634:	0800364d 	.word	0x0800364d
 8003638:	080036cd 	.word	0x080036cd
 800363c:	0800374d 	.word	0x0800374d
 8003640:	080037cd 	.word	0x080037cd
 8003644:	0800384d 	.word	0x0800384d
 8003648:	080038cd 	.word	0x080038cd
    case 1:
      target_servo->current_degree = SERVO_ID1_POS_TO_ANGLE(target_pos);
 800364c:	887b      	ldrh	r3, [r7, #2]
 800364e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003652:	d91c      	bls.n	800368e <servo_move+0xce>
 8003654:	887b      	ldrh	r3, [r7, #2]
 8003656:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800365a:	4618      	mov	r0, r3
 800365c:	f7fc ff8a 	bl	8000574 <__aeabi_i2d>
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	4bb9      	ldr	r3, [pc, #740]	@ (800394c <servo_move+0x38c>)
 8003666:	f7fc ffef 	bl	8000648 <__aeabi_dmul>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	4610      	mov	r0, r2
 8003670:	4619      	mov	r1, r3
 8003672:	a3a7      	add	r3, pc, #668	@ (adr r3, 8003910 <servo_move+0x350>)
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	f7fd f910 	bl	800089c <__aeabi_ddiv>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4610      	mov	r0, r2
 8003682:	4619      	mov	r1, r3
 8003684:	f7fd fa90 	bl	8000ba8 <__aeabi_d2iz>
 8003688:	4603      	mov	r3, r0
 800368a:	b21b      	sxth	r3, r3
 800368c:	e01b      	b.n	80036c6 <servo_move+0x106>
 800368e:	887b      	ldrh	r3, [r7, #2]
 8003690:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8003694:	4618      	mov	r0, r3
 8003696:	f7fc ff6d 	bl	8000574 <__aeabi_i2d>
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	4bac      	ldr	r3, [pc, #688]	@ (8003950 <servo_move+0x390>)
 80036a0:	f7fc ffd2 	bl	8000648 <__aeabi_dmul>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4610      	mov	r0, r2
 80036aa:	4619      	mov	r1, r3
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	4ba8      	ldr	r3, [pc, #672]	@ (8003954 <servo_move+0x394>)
 80036b2:	f7fd f8f3 	bl	800089c <__aeabi_ddiv>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4610      	mov	r0, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	f7fd fa73 	bl	8000ba8 <__aeabi_d2iz>
 80036c2:	4603      	mov	r3, r0
 80036c4:	b21b      	sxth	r3, r3
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	8093      	strh	r3, [r2, #4]
      break;
 80036ca:	e152      	b.n	8003972 <servo_move+0x3b2>
    case 2:
      target_servo->current_degree = SERVO_ID2_POS_TO_ANGLE(target_pos);
 80036cc:	887b      	ldrh	r3, [r7, #2]
 80036ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80036d2:	d91c      	bls.n	800370e <servo_move+0x14e>
 80036d4:	887b      	ldrh	r3, [r7, #2]
 80036d6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fc ff4a 	bl	8000574 <__aeabi_i2d>
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	4b99      	ldr	r3, [pc, #612]	@ (800394c <servo_move+0x38c>)
 80036e6:	f7fc ffaf 	bl	8000648 <__aeabi_dmul>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	4610      	mov	r0, r2
 80036f0:	4619      	mov	r1, r3
 80036f2:	a389      	add	r3, pc, #548	@ (adr r3, 8003918 <servo_move+0x358>)
 80036f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f8:	f7fd f8d0 	bl	800089c <__aeabi_ddiv>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4610      	mov	r0, r2
 8003702:	4619      	mov	r1, r3
 8003704:	f7fd fa50 	bl	8000ba8 <__aeabi_d2iz>
 8003708:	4603      	mov	r3, r0
 800370a:	b21b      	sxth	r3, r3
 800370c:	e01b      	b.n	8003746 <servo_move+0x186>
 800370e:	887b      	ldrh	r3, [r7, #2]
 8003710:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8003714:	4618      	mov	r0, r3
 8003716:	f7fc ff2d 	bl	8000574 <__aeabi_i2d>
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	4b8c      	ldr	r3, [pc, #560]	@ (8003950 <servo_move+0x390>)
 8003720:	f7fc ff92 	bl	8000648 <__aeabi_dmul>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4610      	mov	r0, r2
 800372a:	4619      	mov	r1, r3
 800372c:	a37c      	add	r3, pc, #496	@ (adr r3, 8003920 <servo_move+0x360>)
 800372e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003732:	f7fd f8b3 	bl	800089c <__aeabi_ddiv>
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	4610      	mov	r0, r2
 800373c:	4619      	mov	r1, r3
 800373e:	f7fd fa33 	bl	8000ba8 <__aeabi_d2iz>
 8003742:	4603      	mov	r3, r0
 8003744:	b21b      	sxth	r3, r3
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	8093      	strh	r3, [r2, #4]
      break;
 800374a:	e112      	b.n	8003972 <servo_move+0x3b2>
    case 3:
      target_servo->current_degree = SERVO_ID3_POS_TO_ANGLE(target_pos);
 800374c:	887b      	ldrh	r3, [r7, #2]
 800374e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003752:	d91c      	bls.n	800378e <servo_move+0x1ce>
 8003754:	887b      	ldrh	r3, [r7, #2]
 8003756:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800375a:	4618      	mov	r0, r3
 800375c:	f7fc ff0a 	bl	8000574 <__aeabi_i2d>
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	4b79      	ldr	r3, [pc, #484]	@ (800394c <servo_move+0x38c>)
 8003766:	f7fc ff6f 	bl	8000648 <__aeabi_dmul>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4610      	mov	r0, r2
 8003770:	4619      	mov	r1, r3
 8003772:	a36d      	add	r3, pc, #436	@ (adr r3, 8003928 <servo_move+0x368>)
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	f7fd f890 	bl	800089c <__aeabi_ddiv>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4610      	mov	r0, r2
 8003782:	4619      	mov	r1, r3
 8003784:	f7fd fa10 	bl	8000ba8 <__aeabi_d2iz>
 8003788:	4603      	mov	r3, r0
 800378a:	b21b      	sxth	r3, r3
 800378c:	e01b      	b.n	80037c6 <servo_move+0x206>
 800378e:	887b      	ldrh	r3, [r7, #2]
 8003790:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8003794:	4618      	mov	r0, r3
 8003796:	f7fc feed 	bl	8000574 <__aeabi_i2d>
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	4b6c      	ldr	r3, [pc, #432]	@ (8003950 <servo_move+0x390>)
 80037a0:	f7fc ff52 	bl	8000648 <__aeabi_dmul>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4610      	mov	r0, r2
 80037aa:	4619      	mov	r1, r3
 80037ac:	a35c      	add	r3, pc, #368	@ (adr r3, 8003920 <servo_move+0x360>)
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	f7fd f873 	bl	800089c <__aeabi_ddiv>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4610      	mov	r0, r2
 80037bc:	4619      	mov	r1, r3
 80037be:	f7fd f9f3 	bl	8000ba8 <__aeabi_d2iz>
 80037c2:	4603      	mov	r3, r0
 80037c4:	b21b      	sxth	r3, r3
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	8093      	strh	r3, [r2, #4]
      break;
 80037ca:	e0d2      	b.n	8003972 <servo_move+0x3b2>
    case 4:
      target_servo->current_degree = SERVO_ID4_POS_TO_ANGLE(target_pos);
 80037cc:	887b      	ldrh	r3, [r7, #2]
 80037ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80037d2:	d91c      	bls.n	800380e <servo_move+0x24e>
 80037d4:	887b      	ldrh	r3, [r7, #2]
 80037d6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fc feca 	bl	8000574 <__aeabi_i2d>
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	4b59      	ldr	r3, [pc, #356]	@ (800394c <servo_move+0x38c>)
 80037e6:	f7fc ff2f 	bl	8000648 <__aeabi_dmul>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4610      	mov	r0, r2
 80037f0:	4619      	mov	r1, r3
 80037f2:	a34f      	add	r3, pc, #316	@ (adr r3, 8003930 <servo_move+0x370>)
 80037f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f8:	f7fd f850 	bl	800089c <__aeabi_ddiv>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4610      	mov	r0, r2
 8003802:	4619      	mov	r1, r3
 8003804:	f7fd f9d0 	bl	8000ba8 <__aeabi_d2iz>
 8003808:	4603      	mov	r3, r0
 800380a:	b21b      	sxth	r3, r3
 800380c:	e01b      	b.n	8003846 <servo_move+0x286>
 800380e:	887b      	ldrh	r3, [r7, #2]
 8003810:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8003814:	4618      	mov	r0, r3
 8003816:	f7fc fead 	bl	8000574 <__aeabi_i2d>
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	4b4c      	ldr	r3, [pc, #304]	@ (8003950 <servo_move+0x390>)
 8003820:	f7fc ff12 	bl	8000648 <__aeabi_dmul>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4610      	mov	r0, r2
 800382a:	4619      	mov	r1, r3
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	4b49      	ldr	r3, [pc, #292]	@ (8003958 <servo_move+0x398>)
 8003832:	f7fd f833 	bl	800089c <__aeabi_ddiv>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4610      	mov	r0, r2
 800383c:	4619      	mov	r1, r3
 800383e:	f7fd f9b3 	bl	8000ba8 <__aeabi_d2iz>
 8003842:	4603      	mov	r3, r0
 8003844:	b21b      	sxth	r3, r3
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	8093      	strh	r3, [r2, #4]
      break;
 800384a:	e092      	b.n	8003972 <servo_move+0x3b2>
    case 5:
      target_servo->current_degree = SERVO_ID5_POS_TO_ANGLE(target_pos);
 800384c:	887b      	ldrh	r3, [r7, #2]
 800384e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003852:	d91c      	bls.n	800388e <servo_move+0x2ce>
 8003854:	887b      	ldrh	r3, [r7, #2]
 8003856:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800385a:	4618      	mov	r0, r3
 800385c:	f7fc fe8a 	bl	8000574 <__aeabi_i2d>
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	4b39      	ldr	r3, [pc, #228]	@ (800394c <servo_move+0x38c>)
 8003866:	f7fc feef 	bl	8000648 <__aeabi_dmul>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4610      	mov	r0, r2
 8003870:	4619      	mov	r1, r3
 8003872:	a331      	add	r3, pc, #196	@ (adr r3, 8003938 <servo_move+0x378>)
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	f7fd f810 	bl	800089c <__aeabi_ddiv>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4610      	mov	r0, r2
 8003882:	4619      	mov	r1, r3
 8003884:	f7fd f990 	bl	8000ba8 <__aeabi_d2iz>
 8003888:	4603      	mov	r3, r0
 800388a:	b21b      	sxth	r3, r3
 800388c:	e01b      	b.n	80038c6 <servo_move+0x306>
 800388e:	887b      	ldrh	r3, [r7, #2]
 8003890:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8003894:	4618      	mov	r0, r3
 8003896:	f7fc fe6d 	bl	8000574 <__aeabi_i2d>
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	4b2f      	ldr	r3, [pc, #188]	@ (800395c <servo_move+0x39c>)
 80038a0:	f7fc fed2 	bl	8000648 <__aeabi_dmul>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4610      	mov	r0, r2
 80038aa:	4619      	mov	r1, r3
 80038ac:	a324      	add	r3, pc, #144	@ (adr r3, 8003940 <servo_move+0x380>)
 80038ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b2:	f7fc fff3 	bl	800089c <__aeabi_ddiv>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4610      	mov	r0, r2
 80038bc:	4619      	mov	r1, r3
 80038be:	f7fd f973 	bl	8000ba8 <__aeabi_d2iz>
 80038c2:	4603      	mov	r3, r0
 80038c4:	b21b      	sxth	r3, r3
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	8093      	strh	r3, [r2, #4]
      break;
 80038ca:	e052      	b.n	8003972 <servo_move+0x3b2>
    case 6:
      target_servo->current_degree = SERVO_ID6_POS_TO_ANGLE(target_pos);
 80038cc:	887b      	ldrh	r3, [r7, #2]
 80038ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80038d2:	d849      	bhi.n	8003968 <servo_move+0x3a8>
 80038d4:	887b      	ldrh	r3, [r7, #2]
 80038d6:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fc fe4a 	bl	8000574 <__aeabi_i2d>
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003960 <servo_move+0x3a0>)
 80038e6:	f7fc feaf 	bl	8000648 <__aeabi_dmul>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4610      	mov	r0, r2
 80038f0:	4619      	mov	r1, r3
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003964 <servo_move+0x3a4>)
 80038f8:	f7fc ffd0 	bl	800089c <__aeabi_ddiv>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4610      	mov	r0, r2
 8003902:	4619      	mov	r1, r3
 8003904:	f7fd f950 	bl	8000ba8 <__aeabi_d2iz>
 8003908:	4603      	mov	r3, r0
 800390a:	b21a      	sxth	r2, r3
 800390c:	e02d      	b.n	800396a <servo_move+0x3aa>
 800390e:	bf00      	nop
 8003910:	00000000 	.word	0x00000000
 8003914:	4076a000 	.word	0x4076a000
 8003918:	00000000 	.word	0x00000000
 800391c:	40775000 	.word	0x40775000
 8003920:	00000000 	.word	0x00000000
 8003924:	c0786000 	.word	0xc0786000
 8003928:	00000000 	.word	0x00000000
 800392c:	4076c000 	.word	0x4076c000
 8003930:	00000000 	.word	0x00000000
 8003934:	40772000 	.word	0x40772000
 8003938:	00000000 	.word	0x00000000
 800393c:	40786000 	.word	0x40786000
 8003940:	00000000 	.word	0x00000000
 8003944:	c0554000 	.word	0xc0554000
 8003948:	2000033c 	.word	0x2000033c
 800394c:	40568000 	.word	0x40568000
 8003950:	c0568000 	.word	0xc0568000
 8003954:	c0790000 	.word	0xc0790000
 8003958:	c0768000 	.word	0xc0768000
 800395c:	c0240000 	.word	0xc0240000
 8003960:	c03e0000 	.word	0xc03e0000
 8003964:	c05e0000 	.word	0xc05e0000
 8003968:	2200      	movs	r2, #0
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	809a      	strh	r2, [r3, #4]
      break;
 800396e:	e000      	b.n	8003972 <servo_move+0x3b2>
    default:
      break;
 8003970:	bf00      	nop
  }
}
 8003972:	bf00      	nop
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop

0800397c <servo_reset_all>:
uint16_t servo_get_current_pos(HTD45H_Servo* target_servo) {
  servo_update_current_pos(target_servo);
  return target_servo->current_pos;
}

void servo_reset_all(void) {
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
  for (int i = 0; i < 6; i++)
 8003982:	2300      	movs	r3, #0
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	e010      	b.n	80039aa <servo_reset_all+0x2e>
    servo_move(&(servos[i]), INITIAL_POS, 500);
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	4413      	add	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4a0a      	ldr	r2, [pc, #40]	@ (80039bc <servo_reset_all+0x40>)
 8003994:	4413      	add	r3, r2
 8003996:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800399a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff fe0e 	bl	80035c0 <servo_move>
  for (int i = 0; i < 6; i++)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3301      	adds	r3, #1
 80039a8:	607b      	str	r3, [r7, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b05      	cmp	r3, #5
 80039ae:	ddeb      	ble.n	8003988 <servo_reset_all+0xc>
 80039b0:	bf00      	nop
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000060 	.word	0x20000060

080039c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003a04 <HAL_MspInit+0x44>)
 80039c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003a04 <HAL_MspInit+0x44>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80039d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003a04 <HAL_MspInit+0x44>)
 80039d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039de:	4b09      	ldr	r3, [pc, #36]	@ (8003a04 <HAL_MspInit+0x44>)
 80039e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e2:	4a08      	ldr	r2, [pc, #32]	@ (8003a04 <HAL_MspInit+0x44>)
 80039e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80039ea:	4b06      	ldr	r3, [pc, #24]	@ (8003a04 <HAL_MspInit+0x44>)
 80039ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80039f6:	f001 f9c3 	bl	8004d80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000

08003a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a0c:	bf00      	nop
 8003a0e:	e7fd      	b.n	8003a0c <NMI_Handler+0x4>

08003a10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a14:	bf00      	nop
 8003a16:	e7fd      	b.n	8003a14 <HardFault_Handler+0x4>

08003a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a1c:	bf00      	nop
 8003a1e:	e7fd      	b.n	8003a1c <MemManage_Handler+0x4>

08003a20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a24:	bf00      	nop
 8003a26:	e7fd      	b.n	8003a24 <BusFault_Handler+0x4>

08003a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a2c:	bf00      	nop
 8003a2e:	e7fd      	b.n	8003a2c <UsageFault_Handler+0x4>

08003a30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a34:	bf00      	nop
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a42:	bf00      	nop
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a50:	bf00      	nop
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a5e:	f000 fe2d 	bl	80046bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b086      	sub	sp, #24
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	e00a      	b.n	8003a8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a78:	f3af 8000 	nop.w
 8003a7c:	4601      	mov	r1, r0
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	60ba      	str	r2, [r7, #8]
 8003a84:	b2ca      	uxtb	r2, r1
 8003a86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	dbf0      	blt.n	8003a78 <_read+0x12>
  }

  return len;
 8003a96:	687b      	ldr	r3, [r7, #4]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	e009      	b.n	8003ac6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	60ba      	str	r2, [r7, #8]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	dbf1      	blt.n	8003ab2 <_write+0x12>
  }
  return len;
 8003ace:	687b      	ldr	r3, [r7, #4]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <_close>:

int _close(int file)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ae0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b00:	605a      	str	r2, [r3, #4]
  return 0;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <_isatty>:

int _isatty(int file)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b18:	2301      	movs	r3, #1
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b085      	sub	sp, #20
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b48:	4a14      	ldr	r2, [pc, #80]	@ (8003b9c <_sbrk+0x5c>)
 8003b4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ba0 <_sbrk+0x60>)
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b54:	4b13      	ldr	r3, [pc, #76]	@ (8003ba4 <_sbrk+0x64>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d102      	bne.n	8003b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ba4 <_sbrk+0x64>)
 8003b5e:	4a12      	ldr	r2, [pc, #72]	@ (8003ba8 <_sbrk+0x68>)
 8003b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b62:	4b10      	ldr	r3, [pc, #64]	@ (8003ba4 <_sbrk+0x64>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4413      	add	r3, r2
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d207      	bcs.n	8003b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b70:	f004 fda8 	bl	80086c4 <__errno>
 8003b74:	4603      	mov	r3, r0
 8003b76:	220c      	movs	r2, #12
 8003b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b7e:	e009      	b.n	8003b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b80:	4b08      	ldr	r3, [pc, #32]	@ (8003ba4 <_sbrk+0x64>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b86:	4b07      	ldr	r3, [pc, #28]	@ (8003ba4 <_sbrk+0x64>)
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	4a05      	ldr	r2, [pc, #20]	@ (8003ba4 <_sbrk+0x64>)
 8003b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b92:	68fb      	ldr	r3, [r7, #12]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	20020000 	.word	0x20020000
 8003ba0:	00000400 	.word	0x00000400
 8003ba4:	20000170 	.word	0x20000170
 8003ba8:	200005b8 	.word	0x200005b8

08003bac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003bb0:	4b06      	ldr	r3, [pc, #24]	@ (8003bcc <SystemInit+0x20>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb6:	4a05      	ldr	r2, [pc, #20]	@ (8003bcc <SystemInit+0x20>)
 8003bb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003bbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	e000ed00 	.word	0xe000ed00

08003bd0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08c      	sub	sp, #48	@ 0x30
 8003bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003bd6:	f107 030c 	add.w	r3, r7, #12
 8003bda:	2224      	movs	r2, #36	@ 0x24
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4618      	mov	r0, r3
 8003be0:	f004 fd22 	bl	8008628 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003be4:	463b      	mov	r3, r7
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	605a      	str	r2, [r3, #4]
 8003bec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003bee:	4b23      	ldr	r3, [pc, #140]	@ (8003c7c <MX_TIM1_Init+0xac>)
 8003bf0:	4a23      	ldr	r2, [pc, #140]	@ (8003c80 <MX_TIM1_Init+0xb0>)
 8003bf2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003bf4:	4b21      	ldr	r3, [pc, #132]	@ (8003c7c <MX_TIM1_Init+0xac>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bfa:	4b20      	ldr	r3, [pc, #128]	@ (8003c7c <MX_TIM1_Init+0xac>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003c00:	4b1e      	ldr	r3, [pc, #120]	@ (8003c7c <MX_TIM1_Init+0xac>)
 8003c02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c08:	4b1c      	ldr	r3, [pc, #112]	@ (8003c7c <MX_TIM1_Init+0xac>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003c7c <MX_TIM1_Init+0xac>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c14:	4b19      	ldr	r3, [pc, #100]	@ (8003c7c <MX_TIM1_Init+0xac>)
 8003c16:	2280      	movs	r2, #128	@ 0x80
 8003c18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c22:	2301      	movs	r3, #1
 8003c24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c26:	2300      	movs	r3, #0
 8003c28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003c2a:	230a      	movs	r3, #10
 8003c2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c32:	2301      	movs	r3, #1
 8003c34:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c36:	2300      	movs	r3, #0
 8003c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003c3a:	230a      	movs	r3, #10
 8003c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003c3e:	f107 030c 	add.w	r3, r7, #12
 8003c42:	4619      	mov	r1, r3
 8003c44:	480d      	ldr	r0, [pc, #52]	@ (8003c7c <MX_TIM1_Init+0xac>)
 8003c46:	f002 fa6b 	bl	8006120 <HAL_TIM_Encoder_Init>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8003c50:	f7fe f8ef 	bl	8001e32 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c54:	2300      	movs	r3, #0
 8003c56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c60:	463b      	mov	r3, r7
 8003c62:	4619      	mov	r1, r3
 8003c64:	4805      	ldr	r0, [pc, #20]	@ (8003c7c <MX_TIM1_Init+0xac>)
 8003c66:	f003 fa6f 	bl	8007148 <HAL_TIMEx_MasterConfigSynchronization>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003c70:	f7fe f8df 	bl	8001e32 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003c74:	bf00      	nop
 8003c76:	3730      	adds	r7, #48	@ 0x30
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000174 	.word	0x20000174
 8003c80:	40012c00 	.word	0x40012c00

08003c84 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08e      	sub	sp, #56	@ 0x38
 8003c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	605a      	str	r2, [r3, #4]
 8003c94:	609a      	str	r2, [r3, #8]
 8003c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c98:	f107 031c 	add.w	r3, r7, #28
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ca4:	463b      	mov	r3, r7
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	605a      	str	r2, [r3, #4]
 8003cac:	609a      	str	r2, [r3, #8]
 8003cae:	60da      	str	r2, [r3, #12]
 8003cb0:	611a      	str	r2, [r3, #16]
 8003cb2:	615a      	str	r2, [r3, #20]
 8003cb4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003cb6:	4b33      	ldr	r3, [pc, #204]	@ (8003d84 <MX_TIM2_Init+0x100>)
 8003cb8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003cbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003cbe:	4b31      	ldr	r3, [pc, #196]	@ (8003d84 <MX_TIM2_Init+0x100>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8003d84 <MX_TIM2_Init+0x100>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16799;
 8003cca:	4b2e      	ldr	r3, [pc, #184]	@ (8003d84 <MX_TIM2_Init+0x100>)
 8003ccc:	f244 129f 	movw	r2, #16799	@ 0x419f
 8003cd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8003d84 <MX_TIM2_Init+0x100>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8003d84 <MX_TIM2_Init+0x100>)
 8003cda:	2280      	movs	r2, #128	@ 0x80
 8003cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003cde:	4829      	ldr	r0, [pc, #164]	@ (8003d84 <MX_TIM2_Init+0x100>)
 8003ce0:	f001 ffda 	bl	8005c98 <HAL_TIM_Base_Init>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003cea:	f7fe f8a2 	bl	8001e32 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003cf4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4822      	ldr	r0, [pc, #136]	@ (8003d84 <MX_TIM2_Init+0x100>)
 8003cfc:	f002 fc78 	bl	80065f0 <HAL_TIM_ConfigClockSource>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003d06:	f7fe f894 	bl	8001e32 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003d0a:	481e      	ldr	r0, [pc, #120]	@ (8003d84 <MX_TIM2_Init+0x100>)
 8003d0c:	f002 f894 	bl	8005e38 <HAL_TIM_PWM_Init>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003d16:	f7fe f88c 	bl	8001e32 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d22:	f107 031c 	add.w	r3, r7, #28
 8003d26:	4619      	mov	r1, r3
 8003d28:	4816      	ldr	r0, [pc, #88]	@ (8003d84 <MX_TIM2_Init+0x100>)
 8003d2a:	f003 fa0d 	bl	8007148 <HAL_TIMEx_MasterConfigSynchronization>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003d34:	f7fe f87d 	bl	8001e32 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d38:	2360      	movs	r3, #96	@ 0x60
 8003d3a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d48:	463b      	mov	r3, r7
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	480d      	ldr	r0, [pc, #52]	@ (8003d84 <MX_TIM2_Init+0x100>)
 8003d50:	f002 fb3a 	bl	80063c8 <HAL_TIM_PWM_ConfigChannel>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003d5a:	f7fe f86a 	bl	8001e32 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d5e:	463b      	mov	r3, r7
 8003d60:	2204      	movs	r2, #4
 8003d62:	4619      	mov	r1, r3
 8003d64:	4807      	ldr	r0, [pc, #28]	@ (8003d84 <MX_TIM2_Init+0x100>)
 8003d66:	f002 fb2f 	bl	80063c8 <HAL_TIM_PWM_ConfigChannel>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003d70:	f7fe f85f 	bl	8001e32 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003d74:	4803      	ldr	r0, [pc, #12]	@ (8003d84 <MX_TIM2_Init+0x100>)
 8003d76:	f000 fa99 	bl	80042ac <HAL_TIM_MspPostInit>

}
 8003d7a:	bf00      	nop
 8003d7c:	3738      	adds	r7, #56	@ 0x38
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	200001c0 	.word	0x200001c0

08003d88 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08e      	sub	sp, #56	@ 0x38
 8003d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	605a      	str	r2, [r3, #4]
 8003d98:	609a      	str	r2, [r3, #8]
 8003d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d9c:	f107 031c 	add.w	r3, r7, #28
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003da8:	463b      	mov	r3, r7
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	609a      	str	r2, [r3, #8]
 8003db2:	60da      	str	r2, [r3, #12]
 8003db4:	611a      	str	r2, [r3, #16]
 8003db6:	615a      	str	r2, [r3, #20]
 8003db8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003dba:	4b32      	ldr	r3, [pc, #200]	@ (8003e84 <MX_TIM3_Init+0xfc>)
 8003dbc:	4a32      	ldr	r2, [pc, #200]	@ (8003e88 <MX_TIM3_Init+0x100>)
 8003dbe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8003dc0:	4b30      	ldr	r3, [pc, #192]	@ (8003e84 <MX_TIM3_Init+0xfc>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8003e84 <MX_TIM3_Init+0xfc>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16799;
 8003dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8003e84 <MX_TIM3_Init+0xfc>)
 8003dce:	f244 129f 	movw	r2, #16799	@ 0x419f
 8003dd2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8003e84 <MX_TIM3_Init+0xfc>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003dda:	4b2a      	ldr	r3, [pc, #168]	@ (8003e84 <MX_TIM3_Init+0xfc>)
 8003ddc:	2280      	movs	r2, #128	@ 0x80
 8003dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003de0:	4828      	ldr	r0, [pc, #160]	@ (8003e84 <MX_TIM3_Init+0xfc>)
 8003de2:	f001 ff59 	bl	8005c98 <HAL_TIM_Base_Init>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003dec:	f7fe f821 	bl	8001e32 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003df0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003df6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4821      	ldr	r0, [pc, #132]	@ (8003e84 <MX_TIM3_Init+0xfc>)
 8003dfe:	f002 fbf7 	bl	80065f0 <HAL_TIM_ConfigClockSource>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003e08:	f7fe f813 	bl	8001e32 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003e0c:	481d      	ldr	r0, [pc, #116]	@ (8003e84 <MX_TIM3_Init+0xfc>)
 8003e0e:	f002 f813 	bl	8005e38 <HAL_TIM_PWM_Init>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003e18:	f7fe f80b 	bl	8001e32 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e20:	2300      	movs	r3, #0
 8003e22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e24:	f107 031c 	add.w	r3, r7, #28
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4816      	ldr	r0, [pc, #88]	@ (8003e84 <MX_TIM3_Init+0xfc>)
 8003e2c:	f003 f98c 	bl	8007148 <HAL_TIMEx_MasterConfigSynchronization>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003e36:	f7fd fffc 	bl	8001e32 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e3a:	2360      	movs	r3, #96	@ 0x60
 8003e3c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e42:	2300      	movs	r3, #0
 8003e44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e46:	2300      	movs	r3, #0
 8003e48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e4a:	463b      	mov	r3, r7
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	4619      	mov	r1, r3
 8003e50:	480c      	ldr	r0, [pc, #48]	@ (8003e84 <MX_TIM3_Init+0xfc>)
 8003e52:	f002 fab9 	bl	80063c8 <HAL_TIM_PWM_ConfigChannel>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003e5c:	f7fd ffe9 	bl	8001e32 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e60:	463b      	mov	r3, r7
 8003e62:	2204      	movs	r2, #4
 8003e64:	4619      	mov	r1, r3
 8003e66:	4807      	ldr	r0, [pc, #28]	@ (8003e84 <MX_TIM3_Init+0xfc>)
 8003e68:	f002 faae 	bl	80063c8 <HAL_TIM_PWM_ConfigChannel>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003e72:	f7fd ffde 	bl	8001e32 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003e76:	4803      	ldr	r0, [pc, #12]	@ (8003e84 <MX_TIM3_Init+0xfc>)
 8003e78:	f000 fa18 	bl	80042ac <HAL_TIM_MspPostInit>

}
 8003e7c:	bf00      	nop
 8003e7e:	3738      	adds	r7, #56	@ 0x38
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	2000020c 	.word	0x2000020c
 8003e88:	40000400 	.word	0x40000400

08003e8c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08c      	sub	sp, #48	@ 0x30
 8003e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e92:	f107 030c 	add.w	r3, r7, #12
 8003e96:	2224      	movs	r2, #36	@ 0x24
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f004 fbc4 	bl	8008628 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ea0:	463b      	mov	r3, r7
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	605a      	str	r2, [r3, #4]
 8003ea8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003eaa:	4b21      	ldr	r3, [pc, #132]	@ (8003f30 <MX_TIM4_Init+0xa4>)
 8003eac:	4a21      	ldr	r2, [pc, #132]	@ (8003f34 <MX_TIM4_Init+0xa8>)
 8003eae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f30 <MX_TIM4_Init+0xa4>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f30 <MX_TIM4_Init+0xa4>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8003f30 <MX_TIM4_Init+0xa4>)
 8003ebe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ec2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f30 <MX_TIM4_Init+0xa4>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003eca:	4b19      	ldr	r3, [pc, #100]	@ (8003f30 <MX_TIM4_Init+0xa4>)
 8003ecc:	2280      	movs	r2, #128	@ 0x80
 8003ece:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003edc:	2300      	movs	r3, #0
 8003ede:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003ee0:	230a      	movs	r3, #10
 8003ee2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003eec:	2300      	movs	r3, #0
 8003eee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003ef0:	230a      	movs	r3, #10
 8003ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003ef4:	f107 030c 	add.w	r3, r7, #12
 8003ef8:	4619      	mov	r1, r3
 8003efa:	480d      	ldr	r0, [pc, #52]	@ (8003f30 <MX_TIM4_Init+0xa4>)
 8003efc:	f002 f910 	bl	8006120 <HAL_TIM_Encoder_Init>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003f06:	f7fd ff94 	bl	8001e32 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003f12:	463b      	mov	r3, r7
 8003f14:	4619      	mov	r1, r3
 8003f16:	4806      	ldr	r0, [pc, #24]	@ (8003f30 <MX_TIM4_Init+0xa4>)
 8003f18:	f003 f916 	bl	8007148 <HAL_TIMEx_MasterConfigSynchronization>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003f22:	f7fd ff86 	bl	8001e32 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003f26:	bf00      	nop
 8003f28:	3730      	adds	r7, #48	@ 0x30
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000258 	.word	0x20000258
 8003f34:	40000800 	.word	0x40000800

08003f38 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08c      	sub	sp, #48	@ 0x30
 8003f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f3e:	f107 030c 	add.w	r3, r7, #12
 8003f42:	2224      	movs	r2, #36	@ 0x24
 8003f44:	2100      	movs	r1, #0
 8003f46:	4618      	mov	r0, r3
 8003f48:	f004 fb6e 	bl	8008628 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f4c:	463b      	mov	r3, r7
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	605a      	str	r2, [r3, #4]
 8003f54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003f56:	4b21      	ldr	r3, [pc, #132]	@ (8003fdc <MX_TIM5_Init+0xa4>)
 8003f58:	4a21      	ldr	r2, [pc, #132]	@ (8003fe0 <MX_TIM5_Init+0xa8>)
 8003f5a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8003fdc <MX_TIM5_Init+0xa4>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f62:	4b1e      	ldr	r3, [pc, #120]	@ (8003fdc <MX_TIM5_Init+0xa4>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003f68:	4b1c      	ldr	r3, [pc, #112]	@ (8003fdc <MX_TIM5_Init+0xa4>)
 8003f6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f6e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f70:	4b1a      	ldr	r3, [pc, #104]	@ (8003fdc <MX_TIM5_Init+0xa4>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f76:	4b19      	ldr	r3, [pc, #100]	@ (8003fdc <MX_TIM5_Init+0xa4>)
 8003f78:	2280      	movs	r2, #128	@ 0x80
 8003f7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f80:	2300      	movs	r3, #0
 8003f82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f84:	2301      	movs	r3, #1
 8003f86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003f8c:	230a      	movs	r3, #10
 8003f8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f90:	2300      	movs	r3, #0
 8003f92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f94:	2301      	movs	r3, #1
 8003f96:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003f9c:	230a      	movs	r3, #10
 8003f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003fa0:	f107 030c 	add.w	r3, r7, #12
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	480d      	ldr	r0, [pc, #52]	@ (8003fdc <MX_TIM5_Init+0xa4>)
 8003fa8:	f002 f8ba 	bl	8006120 <HAL_TIM_Encoder_Init>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8003fb2:	f7fd ff3e 	bl	8001e32 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003fbe:	463b      	mov	r3, r7
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4806      	ldr	r0, [pc, #24]	@ (8003fdc <MX_TIM5_Init+0xa4>)
 8003fc4:	f003 f8c0 	bl	8007148 <HAL_TIMEx_MasterConfigSynchronization>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8003fce:	f7fd ff30 	bl	8001e32 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003fd2:	bf00      	nop
 8003fd4:	3730      	adds	r7, #48	@ 0x30
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	200002a4 	.word	0x200002a4
 8003fe0:	40000c00 	.word	0x40000c00

08003fe4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08c      	sub	sp, #48	@ 0x30
 8003fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003fea:	f107 030c 	add.w	r3, r7, #12
 8003fee:	2224      	movs	r2, #36	@ 0x24
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f004 fb18 	bl	8008628 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	605a      	str	r2, [r3, #4]
 8004000:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004002:	4b23      	ldr	r3, [pc, #140]	@ (8004090 <MX_TIM8_Init+0xac>)
 8004004:	4a23      	ldr	r2, [pc, #140]	@ (8004094 <MX_TIM8_Init+0xb0>)
 8004006:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004008:	4b21      	ldr	r3, [pc, #132]	@ (8004090 <MX_TIM8_Init+0xac>)
 800400a:	2200      	movs	r2, #0
 800400c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800400e:	4b20      	ldr	r3, [pc, #128]	@ (8004090 <MX_TIM8_Init+0xac>)
 8004010:	2200      	movs	r2, #0
 8004012:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004014:	4b1e      	ldr	r3, [pc, #120]	@ (8004090 <MX_TIM8_Init+0xac>)
 8004016:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800401a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800401c:	4b1c      	ldr	r3, [pc, #112]	@ (8004090 <MX_TIM8_Init+0xac>)
 800401e:	2200      	movs	r2, #0
 8004020:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004022:	4b1b      	ldr	r3, [pc, #108]	@ (8004090 <MX_TIM8_Init+0xac>)
 8004024:	2200      	movs	r2, #0
 8004026:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004028:	4b19      	ldr	r3, [pc, #100]	@ (8004090 <MX_TIM8_Init+0xac>)
 800402a:	2280      	movs	r2, #128	@ 0x80
 800402c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800402e:	2303      	movs	r3, #3
 8004030:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004032:	2300      	movs	r3, #0
 8004034:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004036:	2301      	movs	r3, #1
 8004038:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800403a:	2300      	movs	r3, #0
 800403c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800403e:	230a      	movs	r3, #10
 8004040:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004042:	2300      	movs	r3, #0
 8004044:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004046:	2301      	movs	r3, #1
 8004048:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800404a:	2300      	movs	r3, #0
 800404c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800404e:	230a      	movs	r3, #10
 8004050:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004052:	f107 030c 	add.w	r3, r7, #12
 8004056:	4619      	mov	r1, r3
 8004058:	480d      	ldr	r0, [pc, #52]	@ (8004090 <MX_TIM8_Init+0xac>)
 800405a:	f002 f861 	bl	8006120 <HAL_TIM_Encoder_Init>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8004064:	f7fd fee5 	bl	8001e32 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004068:	2300      	movs	r3, #0
 800406a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800406c:	2300      	movs	r3, #0
 800406e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004070:	2300      	movs	r3, #0
 8004072:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004074:	463b      	mov	r3, r7
 8004076:	4619      	mov	r1, r3
 8004078:	4805      	ldr	r0, [pc, #20]	@ (8004090 <MX_TIM8_Init+0xac>)
 800407a:	f003 f865 	bl	8007148 <HAL_TIMEx_MasterConfigSynchronization>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8004084:	f7fd fed5 	bl	8001e32 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004088:	bf00      	nop
 800408a:	3730      	adds	r7, #48	@ 0x30
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	200002f0 	.word	0x200002f0
 8004094:	40013400 	.word	0x40013400

08004098 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b090      	sub	sp, #64	@ 0x40
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	605a      	str	r2, [r3, #4]
 80040aa:	609a      	str	r2, [r3, #8]
 80040ac:	60da      	str	r2, [r3, #12]
 80040ae:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a5d      	ldr	r2, [pc, #372]	@ (800422c <HAL_TIM_Encoder_MspInit+0x194>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d128      	bne.n	800410c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040ba:	4b5d      	ldr	r3, [pc, #372]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 80040bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040be:	4a5c      	ldr	r2, [pc, #368]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 80040c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80040c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80040c6:	4b5a      	ldr	r3, [pc, #360]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 80040c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040d2:	4b57      	ldr	r3, [pc, #348]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 80040d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d6:	4a56      	ldr	r2, [pc, #344]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 80040d8:	f043 0304 	orr.w	r3, r3, #4
 80040dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040de:	4b54      	ldr	r3, [pc, #336]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 80040e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80040ea:	2303      	movs	r3, #3
 80040ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ee:	2302      	movs	r3, #2
 80040f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f6:	2300      	movs	r3, #0
 80040f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80040fa:	2302      	movs	r3, #2
 80040fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004102:	4619      	mov	r1, r3
 8004104:	484b      	ldr	r0, [pc, #300]	@ (8004234 <HAL_TIM_Encoder_MspInit+0x19c>)
 8004106:	f000 fbfd 	bl	8004904 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800410a:	e08a      	b.n	8004222 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a49      	ldr	r2, [pc, #292]	@ (8004238 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d129      	bne.n	800416a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004116:	4b46      	ldr	r3, [pc, #280]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 8004118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411a:	4a45      	ldr	r2, [pc, #276]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 800411c:	f043 0304 	orr.w	r3, r3, #4
 8004120:	6593      	str	r3, [r2, #88]	@ 0x58
 8004122:	4b43      	ldr	r3, [pc, #268]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 8004124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	623b      	str	r3, [r7, #32]
 800412c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800412e:	4b40      	ldr	r3, [pc, #256]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 8004130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004132:	4a3f      	ldr	r2, [pc, #252]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 8004134:	f043 0308 	orr.w	r3, r3, #8
 8004138:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800413a:	4b3d      	ldr	r3, [pc, #244]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 800413c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	61fb      	str	r3, [r7, #28]
 8004144:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004146:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800414a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414c:	2302      	movs	r3, #2
 800414e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004150:	2300      	movs	r3, #0
 8004152:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004154:	2300      	movs	r3, #0
 8004156:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004158:	2302      	movs	r3, #2
 800415a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800415c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004160:	4619      	mov	r1, r3
 8004162:	4836      	ldr	r0, [pc, #216]	@ (800423c <HAL_TIM_Encoder_MspInit+0x1a4>)
 8004164:	f000 fbce 	bl	8004904 <HAL_GPIO_Init>
}
 8004168:	e05b      	b.n	8004222 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a34      	ldr	r2, [pc, #208]	@ (8004240 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d129      	bne.n	80041c8 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004174:	4b2e      	ldr	r3, [pc, #184]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 8004176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004178:	4a2d      	ldr	r2, [pc, #180]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 800417a:	f043 0308 	orr.w	r3, r3, #8
 800417e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004180:	4b2b      	ldr	r3, [pc, #172]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 8004182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800418c:	4b28      	ldr	r3, [pc, #160]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 800418e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004190:	4a27      	ldr	r2, [pc, #156]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004198:	4b25      	ldr	r3, [pc, #148]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 800419a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80041a4:	2303      	movs	r3, #3
 80041a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a8:	2302      	movs	r3, #2
 80041aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b0:	2300      	movs	r3, #0
 80041b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80041b4:	2302      	movs	r3, #2
 80041b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80041bc:	4619      	mov	r1, r3
 80041be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041c2:	f000 fb9f 	bl	8004904 <HAL_GPIO_Init>
}
 80041c6:	e02c      	b.n	8004222 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004244 <HAL_TIM_Encoder_MspInit+0x1ac>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d127      	bne.n	8004222 <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80041d2:	4b17      	ldr	r3, [pc, #92]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 80041d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041d6:	4a16      	ldr	r2, [pc, #88]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 80041d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80041dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80041de:	4b14      	ldr	r3, [pc, #80]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 80041e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041ea:	4b11      	ldr	r3, [pc, #68]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 80041ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ee:	4a10      	ldr	r2, [pc, #64]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 80041f0:	f043 0304 	orr.w	r3, r3, #4
 80041f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004230 <HAL_TIM_Encoder_MspInit+0x198>)
 80041f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004202:	23c0      	movs	r3, #192	@ 0xc0
 8004204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004206:	2302      	movs	r3, #2
 8004208:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420a:	2300      	movs	r3, #0
 800420c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420e:	2300      	movs	r3, #0
 8004210:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004212:	2304      	movs	r3, #4
 8004214:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004216:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800421a:	4619      	mov	r1, r3
 800421c:	4805      	ldr	r0, [pc, #20]	@ (8004234 <HAL_TIM_Encoder_MspInit+0x19c>)
 800421e:	f000 fb71 	bl	8004904 <HAL_GPIO_Init>
}
 8004222:	bf00      	nop
 8004224:	3740      	adds	r7, #64	@ 0x40
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40012c00 	.word	0x40012c00
 8004230:	40021000 	.word	0x40021000
 8004234:	48000800 	.word	0x48000800
 8004238:	40000800 	.word	0x40000800
 800423c:	48000c00 	.word	0x48000c00
 8004240:	40000c00 	.word	0x40000c00
 8004244:	40013400 	.word	0x40013400

08004248 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004258:	d10c      	bne.n	8004274 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800425a:	4b12      	ldr	r3, [pc, #72]	@ (80042a4 <HAL_TIM_Base_MspInit+0x5c>)
 800425c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425e:	4a11      	ldr	r2, [pc, #68]	@ (80042a4 <HAL_TIM_Base_MspInit+0x5c>)
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	6593      	str	r3, [r2, #88]	@ 0x58
 8004266:	4b0f      	ldr	r3, [pc, #60]	@ (80042a4 <HAL_TIM_Base_MspInit+0x5c>)
 8004268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004272:	e010      	b.n	8004296 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a0b      	ldr	r2, [pc, #44]	@ (80042a8 <HAL_TIM_Base_MspInit+0x60>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d10b      	bne.n	8004296 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800427e:	4b09      	ldr	r3, [pc, #36]	@ (80042a4 <HAL_TIM_Base_MspInit+0x5c>)
 8004280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004282:	4a08      	ldr	r2, [pc, #32]	@ (80042a4 <HAL_TIM_Base_MspInit+0x5c>)
 8004284:	f043 0302 	orr.w	r3, r3, #2
 8004288:	6593      	str	r3, [r2, #88]	@ 0x58
 800428a:	4b06      	ldr	r3, [pc, #24]	@ (80042a4 <HAL_TIM_Base_MspInit+0x5c>)
 800428c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	68bb      	ldr	r3, [r7, #8]
}
 8004296:	bf00      	nop
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40021000 	.word	0x40021000
 80042a8:	40000400 	.word	0x40000400

080042ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08a      	sub	sp, #40	@ 0x28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b4:	f107 0314 	add.w	r3, r7, #20
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	605a      	str	r2, [r3, #4]
 80042be:	609a      	str	r2, [r3, #8]
 80042c0:	60da      	str	r2, [r3, #12]
 80042c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042cc:	d11c      	bne.n	8004308 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80042ce:	4b21      	ldr	r3, [pc, #132]	@ (8004354 <HAL_TIM_MspPostInit+0xa8>)
 80042d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d2:	4a20      	ldr	r2, [pc, #128]	@ (8004354 <HAL_TIM_MspPostInit+0xa8>)
 80042d4:	f043 0308 	orr.w	r3, r3, #8
 80042d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042da:	4b1e      	ldr	r3, [pc, #120]	@ (8004354 <HAL_TIM_MspPostInit+0xa8>)
 80042dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	613b      	str	r3, [r7, #16]
 80042e4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = RL_PWM_Pin|RR_PWM_Pin;
 80042e6:	2318      	movs	r3, #24
 80042e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ea:	2302      	movs	r3, #2
 80042ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f2:	2300      	movs	r3, #0
 80042f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80042f6:	2302      	movs	r3, #2
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042fa:	f107 0314 	add.w	r3, r7, #20
 80042fe:	4619      	mov	r1, r3
 8004300:	4815      	ldr	r0, [pc, #84]	@ (8004358 <HAL_TIM_MspPostInit+0xac>)
 8004302:	f000 faff 	bl	8004904 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004306:	e020      	b.n	800434a <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a13      	ldr	r2, [pc, #76]	@ (800435c <HAL_TIM_MspPostInit+0xb0>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d11b      	bne.n	800434a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004312:	4b10      	ldr	r3, [pc, #64]	@ (8004354 <HAL_TIM_MspPostInit+0xa8>)
 8004314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004316:	4a0f      	ldr	r2, [pc, #60]	@ (8004354 <HAL_TIM_MspPostInit+0xa8>)
 8004318:	f043 0310 	orr.w	r3, r3, #16
 800431c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800431e:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <HAL_TIM_MspPostInit+0xa8>)
 8004320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FR_PWM_Pin|FL_PWM_Pin;
 800432a:	230c      	movs	r3, #12
 800432c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432e:	2302      	movs	r3, #2
 8004330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004336:	2300      	movs	r3, #0
 8004338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800433a:	2302      	movs	r3, #2
 800433c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800433e:	f107 0314 	add.w	r3, r7, #20
 8004342:	4619      	mov	r1, r3
 8004344:	4806      	ldr	r0, [pc, #24]	@ (8004360 <HAL_TIM_MspPostInit+0xb4>)
 8004346:	f000 fadd 	bl	8004904 <HAL_GPIO_Init>
}
 800434a:	bf00      	nop
 800434c:	3728      	adds	r7, #40	@ 0x28
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40021000 	.word	0x40021000
 8004358:	48000c00 	.word	0x48000c00
 800435c:	40000400 	.word	0x40000400
 8004360:	48001000 	.word	0x48001000

08004364 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004368:	4b22      	ldr	r3, [pc, #136]	@ (80043f4 <MX_UART4_Init+0x90>)
 800436a:	4a23      	ldr	r2, [pc, #140]	@ (80043f8 <MX_UART4_Init+0x94>)
 800436c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800436e:	4b21      	ldr	r3, [pc, #132]	@ (80043f4 <MX_UART4_Init+0x90>)
 8004370:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004374:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004376:	4b1f      	ldr	r3, [pc, #124]	@ (80043f4 <MX_UART4_Init+0x90>)
 8004378:	2200      	movs	r2, #0
 800437a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800437c:	4b1d      	ldr	r3, [pc, #116]	@ (80043f4 <MX_UART4_Init+0x90>)
 800437e:	2200      	movs	r2, #0
 8004380:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004382:	4b1c      	ldr	r3, [pc, #112]	@ (80043f4 <MX_UART4_Init+0x90>)
 8004384:	2200      	movs	r2, #0
 8004386:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004388:	4b1a      	ldr	r3, [pc, #104]	@ (80043f4 <MX_UART4_Init+0x90>)
 800438a:	220c      	movs	r2, #12
 800438c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800438e:	4b19      	ldr	r3, [pc, #100]	@ (80043f4 <MX_UART4_Init+0x90>)
 8004390:	2200      	movs	r2, #0
 8004392:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004394:	4b17      	ldr	r3, [pc, #92]	@ (80043f4 <MX_UART4_Init+0x90>)
 8004396:	2200      	movs	r2, #0
 8004398:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800439a:	4b16      	ldr	r3, [pc, #88]	@ (80043f4 <MX_UART4_Init+0x90>)
 800439c:	2200      	movs	r2, #0
 800439e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80043a0:	4b14      	ldr	r3, [pc, #80]	@ (80043f4 <MX_UART4_Init+0x90>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043a6:	4b13      	ldr	r3, [pc, #76]	@ (80043f4 <MX_UART4_Init+0x90>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80043ac:	4811      	ldr	r0, [pc, #68]	@ (80043f4 <MX_UART4_Init+0x90>)
 80043ae:	f002 ff61 	bl	8007274 <HAL_UART_Init>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80043b8:	f7fd fd3b 	bl	8001e32 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043bc:	2100      	movs	r1, #0
 80043be:	480d      	ldr	r0, [pc, #52]	@ (80043f4 <MX_UART4_Init+0x90>)
 80043c0:	f003 fe52 	bl	8008068 <HAL_UARTEx_SetTxFifoThreshold>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80043ca:	f7fd fd32 	bl	8001e32 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043ce:	2100      	movs	r1, #0
 80043d0:	4808      	ldr	r0, [pc, #32]	@ (80043f4 <MX_UART4_Init+0x90>)
 80043d2:	f003 fe87 	bl	80080e4 <HAL_UARTEx_SetRxFifoThreshold>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80043dc:	f7fd fd29 	bl	8001e32 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80043e0:	4804      	ldr	r0, [pc, #16]	@ (80043f4 <MX_UART4_Init+0x90>)
 80043e2:	f003 fe08 	bl	8007ff6 <HAL_UARTEx_DisableFifoMode>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80043ec:	f7fd fd21 	bl	8001e32 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80043f0:	bf00      	nop
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	2000033c 	.word	0x2000033c
 80043f8:	40004c00 	.word	0x40004c00

080043fc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004400:	4b22      	ldr	r3, [pc, #136]	@ (800448c <MX_USART1_UART_Init+0x90>)
 8004402:	4a23      	ldr	r2, [pc, #140]	@ (8004490 <MX_USART1_UART_Init+0x94>)
 8004404:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004406:	4b21      	ldr	r3, [pc, #132]	@ (800448c <MX_USART1_UART_Init+0x90>)
 8004408:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800440c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800440e:	4b1f      	ldr	r3, [pc, #124]	@ (800448c <MX_USART1_UART_Init+0x90>)
 8004410:	2200      	movs	r2, #0
 8004412:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004414:	4b1d      	ldr	r3, [pc, #116]	@ (800448c <MX_USART1_UART_Init+0x90>)
 8004416:	2200      	movs	r2, #0
 8004418:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800441a:	4b1c      	ldr	r3, [pc, #112]	@ (800448c <MX_USART1_UART_Init+0x90>)
 800441c:	2200      	movs	r2, #0
 800441e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004420:	4b1a      	ldr	r3, [pc, #104]	@ (800448c <MX_USART1_UART_Init+0x90>)
 8004422:	220c      	movs	r2, #12
 8004424:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004426:	4b19      	ldr	r3, [pc, #100]	@ (800448c <MX_USART1_UART_Init+0x90>)
 8004428:	2200      	movs	r2, #0
 800442a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800442c:	4b17      	ldr	r3, [pc, #92]	@ (800448c <MX_USART1_UART_Init+0x90>)
 800442e:	2200      	movs	r2, #0
 8004430:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004432:	4b16      	ldr	r3, [pc, #88]	@ (800448c <MX_USART1_UART_Init+0x90>)
 8004434:	2200      	movs	r2, #0
 8004436:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004438:	4b14      	ldr	r3, [pc, #80]	@ (800448c <MX_USART1_UART_Init+0x90>)
 800443a:	2200      	movs	r2, #0
 800443c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800443e:	4b13      	ldr	r3, [pc, #76]	@ (800448c <MX_USART1_UART_Init+0x90>)
 8004440:	2200      	movs	r2, #0
 8004442:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004444:	4811      	ldr	r0, [pc, #68]	@ (800448c <MX_USART1_UART_Init+0x90>)
 8004446:	f002 ff15 	bl	8007274 <HAL_UART_Init>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004450:	f7fd fcef 	bl	8001e32 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004454:	2100      	movs	r1, #0
 8004456:	480d      	ldr	r0, [pc, #52]	@ (800448c <MX_USART1_UART_Init+0x90>)
 8004458:	f003 fe06 	bl	8008068 <HAL_UARTEx_SetTxFifoThreshold>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004462:	f7fd fce6 	bl	8001e32 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004466:	2100      	movs	r1, #0
 8004468:	4808      	ldr	r0, [pc, #32]	@ (800448c <MX_USART1_UART_Init+0x90>)
 800446a:	f003 fe3b 	bl	80080e4 <HAL_UARTEx_SetRxFifoThreshold>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004474:	f7fd fcdd 	bl	8001e32 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004478:	4804      	ldr	r0, [pc, #16]	@ (800448c <MX_USART1_UART_Init+0x90>)
 800447a:	f003 fdbc 	bl	8007ff6 <HAL_UARTEx_DisableFifoMode>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004484:	f7fd fcd5 	bl	8001e32 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004488:	bf00      	nop
 800448a:	bd80      	pop	{r7, pc}
 800448c:	200003d0 	.word	0x200003d0
 8004490:	40013800 	.word	0x40013800

08004494 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b0a0      	sub	sp, #128	@ 0x80
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800449c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	605a      	str	r2, [r3, #4]
 80044a6:	609a      	str	r2, [r3, #8]
 80044a8:	60da      	str	r2, [r3, #12]
 80044aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044ac:	f107 0318 	add.w	r3, r7, #24
 80044b0:	2254      	movs	r2, #84	@ 0x54
 80044b2:	2100      	movs	r1, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f004 f8b7 	bl	8008628 <memset>
  if(uartHandle->Instance==UART4)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a3d      	ldr	r2, [pc, #244]	@ (80045b4 <HAL_UART_MspInit+0x120>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d137      	bne.n	8004534 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80044c4:	2308      	movs	r3, #8
 80044c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80044c8:	2300      	movs	r3, #0
 80044ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044cc:	f107 0318 	add.w	r3, r7, #24
 80044d0:	4618      	mov	r0, r3
 80044d2:	f001 f993 	bl	80057fc <HAL_RCCEx_PeriphCLKConfig>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80044dc:	f7fd fca9 	bl	8001e32 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80044e0:	4b35      	ldr	r3, [pc, #212]	@ (80045b8 <HAL_UART_MspInit+0x124>)
 80044e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e4:	4a34      	ldr	r2, [pc, #208]	@ (80045b8 <HAL_UART_MspInit+0x124>)
 80044e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80044ec:	4b32      	ldr	r3, [pc, #200]	@ (80045b8 <HAL_UART_MspInit+0x124>)
 80044ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044f8:	4b2f      	ldr	r3, [pc, #188]	@ (80045b8 <HAL_UART_MspInit+0x124>)
 80044fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044fc:	4a2e      	ldr	r2, [pc, #184]	@ (80045b8 <HAL_UART_MspInit+0x124>)
 80044fe:	f043 0304 	orr.w	r3, r3, #4
 8004502:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004504:	4b2c      	ldr	r3, [pc, #176]	@ (80045b8 <HAL_UART_MspInit+0x124>)
 8004506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004510:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004514:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004516:	2302      	movs	r3, #2
 8004518:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451a:	2300      	movs	r3, #0
 800451c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800451e:	2300      	movs	r3, #0
 8004520:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8004522:	2305      	movs	r3, #5
 8004524:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004526:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800452a:	4619      	mov	r1, r3
 800452c:	4823      	ldr	r0, [pc, #140]	@ (80045bc <HAL_UART_MspInit+0x128>)
 800452e:	f000 f9e9 	bl	8004904 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004532:	e03a      	b.n	80045aa <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a21      	ldr	r2, [pc, #132]	@ (80045c0 <HAL_UART_MspInit+0x12c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d135      	bne.n	80045aa <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800453e:	2301      	movs	r3, #1
 8004540:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004546:	f107 0318 	add.w	r3, r7, #24
 800454a:	4618      	mov	r0, r3
 800454c:	f001 f956 	bl	80057fc <HAL_RCCEx_PeriphCLKConfig>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8004556:	f7fd fc6c 	bl	8001e32 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800455a:	4b17      	ldr	r3, [pc, #92]	@ (80045b8 <HAL_UART_MspInit+0x124>)
 800455c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800455e:	4a16      	ldr	r2, [pc, #88]	@ (80045b8 <HAL_UART_MspInit+0x124>)
 8004560:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004564:	6613      	str	r3, [r2, #96]	@ 0x60
 8004566:	4b14      	ldr	r3, [pc, #80]	@ (80045b8 <HAL_UART_MspInit+0x124>)
 8004568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004572:	4b11      	ldr	r3, [pc, #68]	@ (80045b8 <HAL_UART_MspInit+0x124>)
 8004574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004576:	4a10      	ldr	r2, [pc, #64]	@ (80045b8 <HAL_UART_MspInit+0x124>)
 8004578:	f043 0304 	orr.w	r3, r3, #4
 800457c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800457e:	4b0e      	ldr	r3, [pc, #56]	@ (80045b8 <HAL_UART_MspInit+0x124>)
 8004580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	60bb      	str	r3, [r7, #8]
 8004588:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800458a:	2330      	movs	r3, #48	@ 0x30
 800458c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800458e:	2302      	movs	r3, #2
 8004590:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004592:	2300      	movs	r3, #0
 8004594:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004596:	2300      	movs	r3, #0
 8004598:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800459a:	2307      	movs	r3, #7
 800459c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800459e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80045a2:	4619      	mov	r1, r3
 80045a4:	4805      	ldr	r0, [pc, #20]	@ (80045bc <HAL_UART_MspInit+0x128>)
 80045a6:	f000 f9ad 	bl	8004904 <HAL_GPIO_Init>
}
 80045aa:	bf00      	nop
 80045ac:	3780      	adds	r7, #128	@ 0x80
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40004c00 	.word	0x40004c00
 80045b8:	40021000 	.word	0x40021000
 80045bc:	48000800 	.word	0x48000800
 80045c0:	40013800 	.word	0x40013800

080045c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80045c4:	480d      	ldr	r0, [pc, #52]	@ (80045fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80045c6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80045c8:	f7ff faf0 	bl	8003bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80045cc:	480c      	ldr	r0, [pc, #48]	@ (8004600 <LoopForever+0x6>)
  ldr r1, =_edata
 80045ce:	490d      	ldr	r1, [pc, #52]	@ (8004604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80045d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004608 <LoopForever+0xe>)
  movs r3, #0
 80045d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80045d4:	e002      	b.n	80045dc <LoopCopyDataInit>

080045d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045da:	3304      	adds	r3, #4

080045dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045e0:	d3f9      	bcc.n	80045d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045e2:	4a0a      	ldr	r2, [pc, #40]	@ (800460c <LoopForever+0x12>)
  ldr r4, =_ebss
 80045e4:	4c0a      	ldr	r4, [pc, #40]	@ (8004610 <LoopForever+0x16>)
  movs r3, #0
 80045e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045e8:	e001      	b.n	80045ee <LoopFillZerobss>

080045ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045ec:	3204      	adds	r2, #4

080045ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045f0:	d3fb      	bcc.n	80045ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80045f2:	f004 f86d 	bl	80086d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80045f6:	f7fd f8eb 	bl	80017d0 <main>

080045fa <LoopForever>:

LoopForever:
    b LoopForever
 80045fa:	e7fe      	b.n	80045fa <LoopForever>
  ldr   r0, =_estack
 80045fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004604:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8004608:	08009e88 	.word	0x08009e88
  ldr r2, =_sbss
 800460c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8004610:	200005b4 	.word	0x200005b4

08004614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004614:	e7fe      	b.n	8004614 <ADC1_2_IRQHandler>

08004616 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004620:	2003      	movs	r0, #3
 8004622:	f000 f93d 	bl	80048a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004626:	200f      	movs	r0, #15
 8004628:	f000 f80e 	bl	8004648 <HAL_InitTick>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	71fb      	strb	r3, [r7, #7]
 8004636:	e001      	b.n	800463c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004638:	f7ff f9c2 	bl	80039c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800463c:	79fb      	ldrb	r3, [r7, #7]

}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004654:	4b16      	ldr	r3, [pc, #88]	@ (80046b0 <HAL_InitTick+0x68>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d022      	beq.n	80046a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800465c:	4b15      	ldr	r3, [pc, #84]	@ (80046b4 <HAL_InitTick+0x6c>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b13      	ldr	r3, [pc, #76]	@ (80046b0 <HAL_InitTick+0x68>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004668:	fbb1 f3f3 	udiv	r3, r1, r3
 800466c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004670:	4618      	mov	r0, r3
 8004672:	f000 f93a 	bl	80048ea <HAL_SYSTICK_Config>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10f      	bne.n	800469c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b0f      	cmp	r3, #15
 8004680:	d809      	bhi.n	8004696 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004682:	2200      	movs	r2, #0
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800468a:	f000 f914 	bl	80048b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800468e:	4a0a      	ldr	r2, [pc, #40]	@ (80046b8 <HAL_InitTick+0x70>)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	e007      	b.n	80046a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
 800469a:	e004      	b.n	80046a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
 80046a0:	e001      	b.n	80046a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	2000008c 	.word	0x2000008c
 80046b4:	20000084 	.word	0x20000084
 80046b8:	20000088 	.word	0x20000088

080046bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046c0:	4b05      	ldr	r3, [pc, #20]	@ (80046d8 <HAL_IncTick+0x1c>)
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4b05      	ldr	r3, [pc, #20]	@ (80046dc <HAL_IncTick+0x20>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4413      	add	r3, r2
 80046ca:	4a03      	ldr	r2, [pc, #12]	@ (80046d8 <HAL_IncTick+0x1c>)
 80046cc:	6013      	str	r3, [r2, #0]
}
 80046ce:	bf00      	nop
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	20000464 	.word	0x20000464
 80046dc:	2000008c 	.word	0x2000008c

080046e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  return uwTick;
 80046e4:	4b03      	ldr	r3, [pc, #12]	@ (80046f4 <HAL_GetTick+0x14>)
 80046e6:	681b      	ldr	r3, [r3, #0]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	20000464 	.word	0x20000464

080046f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004700:	f7ff ffee 	bl	80046e0 <HAL_GetTick>
 8004704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004710:	d004      	beq.n	800471c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004712:	4b09      	ldr	r3, [pc, #36]	@ (8004738 <HAL_Delay+0x40>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4413      	add	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800471c:	bf00      	nop
 800471e:	f7ff ffdf 	bl	80046e0 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	429a      	cmp	r2, r3
 800472c:	d8f7      	bhi.n	800471e <HAL_Delay+0x26>
  {
  }
}
 800472e:	bf00      	nop
 8004730:	bf00      	nop
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	2000008c 	.word	0x2000008c

0800473c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800474c:	4b0c      	ldr	r3, [pc, #48]	@ (8004780 <__NVIC_SetPriorityGrouping+0x44>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004758:	4013      	ands	r3, r2
 800475a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800476c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800476e:	4a04      	ldr	r2, [pc, #16]	@ (8004780 <__NVIC_SetPriorityGrouping+0x44>)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	60d3      	str	r3, [r2, #12]
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	e000ed00 	.word	0xe000ed00

08004784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004788:	4b04      	ldr	r3, [pc, #16]	@ (800479c <__NVIC_GetPriorityGrouping+0x18>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	0a1b      	lsrs	r3, r3, #8
 800478e:	f003 0307 	and.w	r3, r3, #7
}
 8004792:	4618      	mov	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	e000ed00 	.word	0xe000ed00

080047a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	6039      	str	r1, [r7, #0]
 80047aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	db0a      	blt.n	80047ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	490c      	ldr	r1, [pc, #48]	@ (80047ec <__NVIC_SetPriority+0x4c>)
 80047ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047be:	0112      	lsls	r2, r2, #4
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	440b      	add	r3, r1
 80047c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047c8:	e00a      	b.n	80047e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	4908      	ldr	r1, [pc, #32]	@ (80047f0 <__NVIC_SetPriority+0x50>)
 80047d0:	79fb      	ldrb	r3, [r7, #7]
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	3b04      	subs	r3, #4
 80047d8:	0112      	lsls	r2, r2, #4
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	440b      	add	r3, r1
 80047de:	761a      	strb	r2, [r3, #24]
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	e000e100 	.word	0xe000e100
 80047f0:	e000ed00 	.word	0xe000ed00

080047f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b089      	sub	sp, #36	@ 0x24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f1c3 0307 	rsb	r3, r3, #7
 800480e:	2b04      	cmp	r3, #4
 8004810:	bf28      	it	cs
 8004812:	2304      	movcs	r3, #4
 8004814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	3304      	adds	r3, #4
 800481a:	2b06      	cmp	r3, #6
 800481c:	d902      	bls.n	8004824 <NVIC_EncodePriority+0x30>
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	3b03      	subs	r3, #3
 8004822:	e000      	b.n	8004826 <NVIC_EncodePriority+0x32>
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004828:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	43da      	mvns	r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	401a      	ands	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800483c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	fa01 f303 	lsl.w	r3, r1, r3
 8004846:	43d9      	mvns	r1, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800484c:	4313      	orrs	r3, r2
         );
}
 800484e:	4618      	mov	r0, r3
 8004850:	3724      	adds	r7, #36	@ 0x24
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3b01      	subs	r3, #1
 8004868:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800486c:	d301      	bcc.n	8004872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800486e:	2301      	movs	r3, #1
 8004870:	e00f      	b.n	8004892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004872:	4a0a      	ldr	r2, [pc, #40]	@ (800489c <SysTick_Config+0x40>)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3b01      	subs	r3, #1
 8004878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800487a:	210f      	movs	r1, #15
 800487c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004880:	f7ff ff8e 	bl	80047a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004884:	4b05      	ldr	r3, [pc, #20]	@ (800489c <SysTick_Config+0x40>)
 8004886:	2200      	movs	r2, #0
 8004888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800488a:	4b04      	ldr	r3, [pc, #16]	@ (800489c <SysTick_Config+0x40>)
 800488c:	2207      	movs	r2, #7
 800488e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	e000e010 	.word	0xe000e010

080048a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff ff47 	bl	800473c <__NVIC_SetPriorityGrouping>
}
 80048ae:	bf00      	nop
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b086      	sub	sp, #24
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	4603      	mov	r3, r0
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	607a      	str	r2, [r7, #4]
 80048c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048c4:	f7ff ff5e 	bl	8004784 <__NVIC_GetPriorityGrouping>
 80048c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	6978      	ldr	r0, [r7, #20]
 80048d0:	f7ff ff90 	bl	80047f4 <NVIC_EncodePriority>
 80048d4:	4602      	mov	r2, r0
 80048d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048da:	4611      	mov	r1, r2
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff ff5f 	bl	80047a0 <__NVIC_SetPriority>
}
 80048e2:	bf00      	nop
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7ff ffb2 	bl	800485c <SysTick_Config>
 80048f8:	4603      	mov	r3, r0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004912:	e15a      	b.n	8004bca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	2101      	movs	r1, #1
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	fa01 f303 	lsl.w	r3, r1, r3
 8004920:	4013      	ands	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 814c 	beq.w	8004bc4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	2b01      	cmp	r3, #1
 8004936:	d005      	beq.n	8004944 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004940:	2b02      	cmp	r3, #2
 8004942:	d130      	bne.n	80049a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	2203      	movs	r2, #3
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	43db      	mvns	r3, r3
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4013      	ands	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800497a:	2201      	movs	r2, #1
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	43db      	mvns	r3, r3
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	4013      	ands	r3, r2
 8004988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	f003 0201 	and.w	r2, r3, #1
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d017      	beq.n	80049e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	2203      	movs	r2, #3
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	43db      	mvns	r3, r3
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4013      	ands	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d123      	bne.n	8004a36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	08da      	lsrs	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3208      	adds	r2, #8
 80049f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	220f      	movs	r2, #15
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	08da      	lsrs	r2, r3, #3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3208      	adds	r2, #8
 8004a30:	6939      	ldr	r1, [r7, #16]
 8004a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	2203      	movs	r2, #3
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	43db      	mvns	r3, r3
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f003 0203 	and.w	r2, r3, #3
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 80a6 	beq.w	8004bc4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a78:	4b5b      	ldr	r3, [pc, #364]	@ (8004be8 <HAL_GPIO_Init+0x2e4>)
 8004a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a7c:	4a5a      	ldr	r2, [pc, #360]	@ (8004be8 <HAL_GPIO_Init+0x2e4>)
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a84:	4b58      	ldr	r3, [pc, #352]	@ (8004be8 <HAL_GPIO_Init+0x2e4>)
 8004a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a90:	4a56      	ldr	r2, [pc, #344]	@ (8004bec <HAL_GPIO_Init+0x2e8>)
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	089b      	lsrs	r3, r3, #2
 8004a96:	3302      	adds	r3, #2
 8004a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	220f      	movs	r2, #15
 8004aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aac:	43db      	mvns	r3, r3
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004aba:	d01f      	beq.n	8004afc <HAL_GPIO_Init+0x1f8>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a4c      	ldr	r2, [pc, #304]	@ (8004bf0 <HAL_GPIO_Init+0x2ec>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d019      	beq.n	8004af8 <HAL_GPIO_Init+0x1f4>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a4b      	ldr	r2, [pc, #300]	@ (8004bf4 <HAL_GPIO_Init+0x2f0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d013      	beq.n	8004af4 <HAL_GPIO_Init+0x1f0>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a4a      	ldr	r2, [pc, #296]	@ (8004bf8 <HAL_GPIO_Init+0x2f4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00d      	beq.n	8004af0 <HAL_GPIO_Init+0x1ec>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a49      	ldr	r2, [pc, #292]	@ (8004bfc <HAL_GPIO_Init+0x2f8>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d007      	beq.n	8004aec <HAL_GPIO_Init+0x1e8>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a48      	ldr	r2, [pc, #288]	@ (8004c00 <HAL_GPIO_Init+0x2fc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d101      	bne.n	8004ae8 <HAL_GPIO_Init+0x1e4>
 8004ae4:	2305      	movs	r3, #5
 8004ae6:	e00a      	b.n	8004afe <HAL_GPIO_Init+0x1fa>
 8004ae8:	2306      	movs	r3, #6
 8004aea:	e008      	b.n	8004afe <HAL_GPIO_Init+0x1fa>
 8004aec:	2304      	movs	r3, #4
 8004aee:	e006      	b.n	8004afe <HAL_GPIO_Init+0x1fa>
 8004af0:	2303      	movs	r3, #3
 8004af2:	e004      	b.n	8004afe <HAL_GPIO_Init+0x1fa>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e002      	b.n	8004afe <HAL_GPIO_Init+0x1fa>
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <HAL_GPIO_Init+0x1fa>
 8004afc:	2300      	movs	r3, #0
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	f002 0203 	and.w	r2, r2, #3
 8004b04:	0092      	lsls	r2, r2, #2
 8004b06:	4093      	lsls	r3, r2
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b0e:	4937      	ldr	r1, [pc, #220]	@ (8004bec <HAL_GPIO_Init+0x2e8>)
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	089b      	lsrs	r3, r3, #2
 8004b14:	3302      	adds	r3, #2
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b1c:	4b39      	ldr	r3, [pc, #228]	@ (8004c04 <HAL_GPIO_Init+0x300>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b40:	4a30      	ldr	r2, [pc, #192]	@ (8004c04 <HAL_GPIO_Init+0x300>)
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b46:	4b2f      	ldr	r3, [pc, #188]	@ (8004c04 <HAL_GPIO_Init+0x300>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4013      	ands	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b6a:	4a26      	ldr	r2, [pc, #152]	@ (8004c04 <HAL_GPIO_Init+0x300>)
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004b70:	4b24      	ldr	r3, [pc, #144]	@ (8004c04 <HAL_GPIO_Init+0x300>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b94:	4a1b      	ldr	r2, [pc, #108]	@ (8004c04 <HAL_GPIO_Init+0x300>)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8004c04 <HAL_GPIO_Init+0x300>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004bbe:	4a11      	ldr	r2, [pc, #68]	@ (8004c04 <HAL_GPIO_Init+0x300>)
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f47f ae9d 	bne.w	8004914 <HAL_GPIO_Init+0x10>
  }
}
 8004bda:	bf00      	nop
 8004bdc:	bf00      	nop
 8004bde:	371c      	adds	r7, #28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	40021000 	.word	0x40021000
 8004bec:	40010000 	.word	0x40010000
 8004bf0:	48000400 	.word	0x48000400
 8004bf4:	48000800 	.word	0x48000800
 8004bf8:	48000c00 	.word	0x48000c00
 8004bfc:	48001000 	.word	0x48001000
 8004c00:	48001400 	.word	0x48001400
 8004c04:	40010400 	.word	0x40010400

08004c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	807b      	strh	r3, [r7, #2]
 8004c14:	4613      	mov	r3, r2
 8004c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c18:	787b      	ldrb	r3, [r7, #1]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c1e:	887a      	ldrh	r2, [r7, #2]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c24:	e002      	b.n	8004c2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c26:	887a      	ldrh	r2, [r7, #2]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d141      	bne.n	8004cca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c46:	4b4b      	ldr	r3, [pc, #300]	@ (8004d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c52:	d131      	bne.n	8004cb8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c54:	4b47      	ldr	r3, [pc, #284]	@ (8004d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c5a:	4a46      	ldr	r2, [pc, #280]	@ (8004d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c64:	4b43      	ldr	r3, [pc, #268]	@ (8004d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c6c:	4a41      	ldr	r2, [pc, #260]	@ (8004d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c74:	4b40      	ldr	r3, [pc, #256]	@ (8004d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2232      	movs	r2, #50	@ 0x32
 8004c7a:	fb02 f303 	mul.w	r3, r2, r3
 8004c7e:	4a3f      	ldr	r2, [pc, #252]	@ (8004d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c80:	fba2 2303 	umull	r2, r3, r2, r3
 8004c84:	0c9b      	lsrs	r3, r3, #18
 8004c86:	3301      	adds	r3, #1
 8004c88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c8a:	e002      	b.n	8004c92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c92:	4b38      	ldr	r3, [pc, #224]	@ (8004d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c9e:	d102      	bne.n	8004ca6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f2      	bne.n	8004c8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ca6:	4b33      	ldr	r3, [pc, #204]	@ (8004d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb2:	d158      	bne.n	8004d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e057      	b.n	8004d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8004d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8004d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004cc8:	e04d      	b.n	8004d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cd0:	d141      	bne.n	8004d56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cd2:	4b28      	ldr	r3, [pc, #160]	@ (8004d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cde:	d131      	bne.n	8004d44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ce0:	4b24      	ldr	r3, [pc, #144]	@ (8004d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ce6:	4a23      	ldr	r2, [pc, #140]	@ (8004d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cf0:	4b20      	ldr	r3, [pc, #128]	@ (8004d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8004d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004cfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d00:	4b1d      	ldr	r3, [pc, #116]	@ (8004d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2232      	movs	r2, #50	@ 0x32
 8004d06:	fb02 f303 	mul.w	r3, r2, r3
 8004d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8004d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d10:	0c9b      	lsrs	r3, r3, #18
 8004d12:	3301      	adds	r3, #1
 8004d14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d16:	e002      	b.n	8004d1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d1e:	4b15      	ldr	r3, [pc, #84]	@ (8004d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d2a:	d102      	bne.n	8004d32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f2      	bne.n	8004d18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d32:	4b10      	ldr	r3, [pc, #64]	@ (8004d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d3e:	d112      	bne.n	8004d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e011      	b.n	8004d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d44:	4b0b      	ldr	r3, [pc, #44]	@ (8004d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004d54:	e007      	b.n	8004d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d56:	4b07      	ldr	r3, [pc, #28]	@ (8004d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d5e:	4a05      	ldr	r2, [pc, #20]	@ (8004d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	40007000 	.word	0x40007000
 8004d78:	20000084 	.word	0x20000084
 8004d7c:	431bde83 	.word	0x431bde83

08004d80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004d84:	4b05      	ldr	r3, [pc, #20]	@ (8004d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	4a04      	ldr	r2, [pc, #16]	@ (8004d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d8e:	6093      	str	r3, [r2, #8]
}
 8004d90:	bf00      	nop
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40007000 	.word	0x40007000

08004da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e2fe      	b.n	80053b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d075      	beq.n	8004eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dbe:	4b97      	ldr	r3, [pc, #604]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dc8:	4b94      	ldr	r3, [pc, #592]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f003 0303 	and.w	r3, r3, #3
 8004dd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b0c      	cmp	r3, #12
 8004dd6:	d102      	bne.n	8004dde <HAL_RCC_OscConfig+0x3e>
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d002      	beq.n	8004de4 <HAL_RCC_OscConfig+0x44>
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d10b      	bne.n	8004dfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de4:	4b8d      	ldr	r3, [pc, #564]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d05b      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x108>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d157      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e2d9      	b.n	80053b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e04:	d106      	bne.n	8004e14 <HAL_RCC_OscConfig+0x74>
 8004e06:	4b85      	ldr	r3, [pc, #532]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a84      	ldr	r2, [pc, #528]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	e01d      	b.n	8004e50 <HAL_RCC_OscConfig+0xb0>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e1c:	d10c      	bne.n	8004e38 <HAL_RCC_OscConfig+0x98>
 8004e1e:	4b7f      	ldr	r3, [pc, #508]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a7e      	ldr	r2, [pc, #504]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	4b7c      	ldr	r3, [pc, #496]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a7b      	ldr	r2, [pc, #492]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e00b      	b.n	8004e50 <HAL_RCC_OscConfig+0xb0>
 8004e38:	4b78      	ldr	r3, [pc, #480]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a77      	ldr	r2, [pc, #476]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	4b75      	ldr	r3, [pc, #468]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a74      	ldr	r2, [pc, #464]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d013      	beq.n	8004e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e58:	f7ff fc42 	bl	80046e0 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e60:	f7ff fc3e 	bl	80046e0 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b64      	cmp	r3, #100	@ 0x64
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e29e      	b.n	80053b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e72:	4b6a      	ldr	r3, [pc, #424]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f0      	beq.n	8004e60 <HAL_RCC_OscConfig+0xc0>
 8004e7e:	e014      	b.n	8004eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7ff fc2e 	bl	80046e0 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e88:	f7ff fc2a 	bl	80046e0 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b64      	cmp	r3, #100	@ 0x64
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e28a      	b.n	80053b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e9a:	4b60      	ldr	r3, [pc, #384]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCC_OscConfig+0xe8>
 8004ea6:	e000      	b.n	8004eaa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d075      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eb6:	4b59      	ldr	r3, [pc, #356]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ec0:	4b56      	ldr	r3, [pc, #344]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f003 0303 	and.w	r3, r3, #3
 8004ec8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	2b0c      	cmp	r3, #12
 8004ece:	d102      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x136>
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d002      	beq.n	8004edc <HAL_RCC_OscConfig+0x13c>
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d11f      	bne.n	8004f1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004edc:	4b4f      	ldr	r3, [pc, #316]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d005      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x154>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e25d      	b.n	80053b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef4:	4b49      	ldr	r3, [pc, #292]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	061b      	lsls	r3, r3, #24
 8004f02:	4946      	ldr	r1, [pc, #280]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004f08:	4b45      	ldr	r3, [pc, #276]	@ (8005020 <HAL_RCC_OscConfig+0x280>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff fb9b 	bl	8004648 <HAL_InitTick>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d043      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e249      	b.n	80053b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d023      	beq.n	8004f6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f24:	4b3d      	ldr	r3, [pc, #244]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a3c      	ldr	r2, [pc, #240]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f30:	f7ff fbd6 	bl	80046e0 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f38:	f7ff fbd2 	bl	80046e0 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e232      	b.n	80053b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f4a:	4b34      	ldr	r3, [pc, #208]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0f0      	beq.n	8004f38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f56:	4b31      	ldr	r3, [pc, #196]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	061b      	lsls	r3, r3, #24
 8004f64:	492d      	ldr	r1, [pc, #180]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	604b      	str	r3, [r1, #4]
 8004f6a:	e01a      	b.n	8004fa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a2a      	ldr	r2, [pc, #168]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004f72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f78:	f7ff fbb2 	bl	80046e0 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f80:	f7ff fbae 	bl	80046e0 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e20e      	b.n	80053b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f92:	4b22      	ldr	r3, [pc, #136]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f0      	bne.n	8004f80 <HAL_RCC_OscConfig+0x1e0>
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fa0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d041      	beq.n	8005032 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d01c      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fb6:	4b19      	ldr	r3, [pc, #100]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fbc:	4a17      	ldr	r2, [pc, #92]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004fbe:	f043 0301 	orr.w	r3, r3, #1
 8004fc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc6:	f7ff fb8b 	bl	80046e0 <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fce:	f7ff fb87 	bl	80046e0 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e1e7      	b.n	80053b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0ef      	beq.n	8004fce <HAL_RCC_OscConfig+0x22e>
 8004fee:	e020      	b.n	8005032 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ff6:	4a09      	ldr	r2, [pc, #36]	@ (800501c <HAL_RCC_OscConfig+0x27c>)
 8004ff8:	f023 0301 	bic.w	r3, r3, #1
 8004ffc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005000:	f7ff fb6e 	bl	80046e0 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005006:	e00d      	b.n	8005024 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005008:	f7ff fb6a 	bl	80046e0 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d906      	bls.n	8005024 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e1ca      	b.n	80053b0 <HAL_RCC_OscConfig+0x610>
 800501a:	bf00      	nop
 800501c:	40021000 	.word	0x40021000
 8005020:	20000088 	.word	0x20000088
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005024:	4b8c      	ldr	r3, [pc, #560]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 8005026:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1ea      	bne.n	8005008 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 80a6 	beq.w	800518c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005040:	2300      	movs	r3, #0
 8005042:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005044:	4b84      	ldr	r3, [pc, #528]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 8005046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_RCC_OscConfig+0x2b4>
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <HAL_RCC_OscConfig+0x2b6>
 8005054:	2300      	movs	r3, #0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00d      	beq.n	8005076 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800505a:	4b7f      	ldr	r3, [pc, #508]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 800505c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800505e:	4a7e      	ldr	r2, [pc, #504]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 8005060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005064:	6593      	str	r3, [r2, #88]	@ 0x58
 8005066:	4b7c      	ldr	r3, [pc, #496]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 8005068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800506a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005072:	2301      	movs	r3, #1
 8005074:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005076:	4b79      	ldr	r3, [pc, #484]	@ (800525c <HAL_RCC_OscConfig+0x4bc>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800507e:	2b00      	cmp	r3, #0
 8005080:	d118      	bne.n	80050b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005082:	4b76      	ldr	r3, [pc, #472]	@ (800525c <HAL_RCC_OscConfig+0x4bc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a75      	ldr	r2, [pc, #468]	@ (800525c <HAL_RCC_OscConfig+0x4bc>)
 8005088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800508c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800508e:	f7ff fb27 	bl	80046e0 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005096:	f7ff fb23 	bl	80046e0 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e183      	b.n	80053b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050a8:	4b6c      	ldr	r3, [pc, #432]	@ (800525c <HAL_RCC_OscConfig+0x4bc>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0f0      	beq.n	8005096 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d108      	bne.n	80050ce <HAL_RCC_OscConfig+0x32e>
 80050bc:	4b66      	ldr	r3, [pc, #408]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c2:	4a65      	ldr	r2, [pc, #404]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 80050c4:	f043 0301 	orr.w	r3, r3, #1
 80050c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050cc:	e024      	b.n	8005118 <HAL_RCC_OscConfig+0x378>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2b05      	cmp	r3, #5
 80050d4:	d110      	bne.n	80050f8 <HAL_RCC_OscConfig+0x358>
 80050d6:	4b60      	ldr	r3, [pc, #384]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 80050d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050dc:	4a5e      	ldr	r2, [pc, #376]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 80050de:	f043 0304 	orr.w	r3, r3, #4
 80050e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050e6:	4b5c      	ldr	r3, [pc, #368]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 80050e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ec:	4a5a      	ldr	r2, [pc, #360]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 80050ee:	f043 0301 	orr.w	r3, r3, #1
 80050f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050f6:	e00f      	b.n	8005118 <HAL_RCC_OscConfig+0x378>
 80050f8:	4b57      	ldr	r3, [pc, #348]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fe:	4a56      	ldr	r2, [pc, #344]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 8005100:	f023 0301 	bic.w	r3, r3, #1
 8005104:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005108:	4b53      	ldr	r3, [pc, #332]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 800510a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800510e:	4a52      	ldr	r2, [pc, #328]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 8005110:	f023 0304 	bic.w	r3, r3, #4
 8005114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d016      	beq.n	800514e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005120:	f7ff fade 	bl	80046e0 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005126:	e00a      	b.n	800513e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005128:	f7ff fada 	bl	80046e0 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005136:	4293      	cmp	r3, r2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e138      	b.n	80053b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800513e:	4b46      	ldr	r3, [pc, #280]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 8005140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0ed      	beq.n	8005128 <HAL_RCC_OscConfig+0x388>
 800514c:	e015      	b.n	800517a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514e:	f7ff fac7 	bl	80046e0 <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005154:	e00a      	b.n	800516c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005156:	f7ff fac3 	bl	80046e0 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005164:	4293      	cmp	r3, r2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e121      	b.n	80053b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800516c:	4b3a      	ldr	r3, [pc, #232]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 800516e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1ed      	bne.n	8005156 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800517a:	7ffb      	ldrb	r3, [r7, #31]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d105      	bne.n	800518c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005180:	4b35      	ldr	r3, [pc, #212]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 8005182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005184:	4a34      	ldr	r2, [pc, #208]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 8005186:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800518a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b00      	cmp	r3, #0
 8005196:	d03c      	beq.n	8005212 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d01c      	beq.n	80051da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051a0:	4b2d      	ldr	r3, [pc, #180]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 80051a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 80051a8:	f043 0301 	orr.w	r3, r3, #1
 80051ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b0:	f7ff fa96 	bl	80046e0 <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051b8:	f7ff fa92 	bl	80046e0 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e0f2      	b.n	80053b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051ca:	4b23      	ldr	r3, [pc, #140]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 80051cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0ef      	beq.n	80051b8 <HAL_RCC_OscConfig+0x418>
 80051d8:	e01b      	b.n	8005212 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051da:	4b1f      	ldr	r3, [pc, #124]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 80051dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 80051e2:	f023 0301 	bic.w	r3, r3, #1
 80051e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ea:	f7ff fa79 	bl	80046e0 <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051f2:	f7ff fa75 	bl	80046e0 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e0d5      	b.n	80053b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005204:	4b14      	ldr	r3, [pc, #80]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 8005206:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1ef      	bne.n	80051f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 80c9 	beq.w	80053ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800521c:	4b0e      	ldr	r3, [pc, #56]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 030c 	and.w	r3, r3, #12
 8005224:	2b0c      	cmp	r3, #12
 8005226:	f000 8083 	beq.w	8005330 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d15e      	bne.n	80052f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005232:	4b09      	ldr	r3, [pc, #36]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a08      	ldr	r2, [pc, #32]	@ (8005258 <HAL_RCC_OscConfig+0x4b8>)
 8005238:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800523c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523e:	f7ff fa4f 	bl	80046e0 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005244:	e00c      	b.n	8005260 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005246:	f7ff fa4b 	bl	80046e0 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d905      	bls.n	8005260 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e0ab      	b.n	80053b0 <HAL_RCC_OscConfig+0x610>
 8005258:	40021000 	.word	0x40021000
 800525c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005260:	4b55      	ldr	r3, [pc, #340]	@ (80053b8 <HAL_RCC_OscConfig+0x618>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1ec      	bne.n	8005246 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800526c:	4b52      	ldr	r3, [pc, #328]	@ (80053b8 <HAL_RCC_OscConfig+0x618>)
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	4b52      	ldr	r3, [pc, #328]	@ (80053bc <HAL_RCC_OscConfig+0x61c>)
 8005272:	4013      	ands	r3, r2
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6a11      	ldr	r1, [r2, #32]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800527c:	3a01      	subs	r2, #1
 800527e:	0112      	lsls	r2, r2, #4
 8005280:	4311      	orrs	r1, r2
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005286:	0212      	lsls	r2, r2, #8
 8005288:	4311      	orrs	r1, r2
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800528e:	0852      	lsrs	r2, r2, #1
 8005290:	3a01      	subs	r2, #1
 8005292:	0552      	lsls	r2, r2, #21
 8005294:	4311      	orrs	r1, r2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800529a:	0852      	lsrs	r2, r2, #1
 800529c:	3a01      	subs	r2, #1
 800529e:	0652      	lsls	r2, r2, #25
 80052a0:	4311      	orrs	r1, r2
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80052a6:	06d2      	lsls	r2, r2, #27
 80052a8:	430a      	orrs	r2, r1
 80052aa:	4943      	ldr	r1, [pc, #268]	@ (80053b8 <HAL_RCC_OscConfig+0x618>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052b0:	4b41      	ldr	r3, [pc, #260]	@ (80053b8 <HAL_RCC_OscConfig+0x618>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a40      	ldr	r2, [pc, #256]	@ (80053b8 <HAL_RCC_OscConfig+0x618>)
 80052b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052bc:	4b3e      	ldr	r3, [pc, #248]	@ (80053b8 <HAL_RCC_OscConfig+0x618>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	4a3d      	ldr	r2, [pc, #244]	@ (80053b8 <HAL_RCC_OscConfig+0x618>)
 80052c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c8:	f7ff fa0a 	bl	80046e0 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d0:	f7ff fa06 	bl	80046e0 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e066      	b.n	80053b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052e2:	4b35      	ldr	r3, [pc, #212]	@ (80053b8 <HAL_RCC_OscConfig+0x618>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0f0      	beq.n	80052d0 <HAL_RCC_OscConfig+0x530>
 80052ee:	e05e      	b.n	80053ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f0:	4b31      	ldr	r3, [pc, #196]	@ (80053b8 <HAL_RCC_OscConfig+0x618>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a30      	ldr	r2, [pc, #192]	@ (80053b8 <HAL_RCC_OscConfig+0x618>)
 80052f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fc:	f7ff f9f0 	bl	80046e0 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005304:	f7ff f9ec 	bl	80046e0 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e04c      	b.n	80053b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005316:	4b28      	ldr	r3, [pc, #160]	@ (80053b8 <HAL_RCC_OscConfig+0x618>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1f0      	bne.n	8005304 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005322:	4b25      	ldr	r3, [pc, #148]	@ (80053b8 <HAL_RCC_OscConfig+0x618>)
 8005324:	68da      	ldr	r2, [r3, #12]
 8005326:	4924      	ldr	r1, [pc, #144]	@ (80053b8 <HAL_RCC_OscConfig+0x618>)
 8005328:	4b25      	ldr	r3, [pc, #148]	@ (80053c0 <HAL_RCC_OscConfig+0x620>)
 800532a:	4013      	ands	r3, r2
 800532c:	60cb      	str	r3, [r1, #12]
 800532e:	e03e      	b.n	80053ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e039      	b.n	80053b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800533c:	4b1e      	ldr	r3, [pc, #120]	@ (80053b8 <HAL_RCC_OscConfig+0x618>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f003 0203 	and.w	r2, r3, #3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	429a      	cmp	r2, r3
 800534e:	d12c      	bne.n	80053aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535a:	3b01      	subs	r3, #1
 800535c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800535e:	429a      	cmp	r2, r3
 8005360:	d123      	bne.n	80053aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800536e:	429a      	cmp	r2, r3
 8005370:	d11b      	bne.n	80053aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800537e:	429a      	cmp	r2, r3
 8005380:	d113      	bne.n	80053aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538c:	085b      	lsrs	r3, r3, #1
 800538e:	3b01      	subs	r3, #1
 8005390:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005392:	429a      	cmp	r2, r3
 8005394:	d109      	bne.n	80053aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053a0:	085b      	lsrs	r3, r3, #1
 80053a2:	3b01      	subs	r3, #1
 80053a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d001      	beq.n	80053ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e000      	b.n	80053b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3720      	adds	r7, #32
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40021000 	.word	0x40021000
 80053bc:	019f800c 	.word	0x019f800c
 80053c0:	feeefffc 	.word	0xfeeefffc

080053c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e11e      	b.n	800561a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053dc:	4b91      	ldr	r3, [pc, #580]	@ (8005624 <HAL_RCC_ClockConfig+0x260>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 030f 	and.w	r3, r3, #15
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d910      	bls.n	800540c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ea:	4b8e      	ldr	r3, [pc, #568]	@ (8005624 <HAL_RCC_ClockConfig+0x260>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f023 020f 	bic.w	r2, r3, #15
 80053f2:	498c      	ldr	r1, [pc, #560]	@ (8005624 <HAL_RCC_ClockConfig+0x260>)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fa:	4b8a      	ldr	r3, [pc, #552]	@ (8005624 <HAL_RCC_ClockConfig+0x260>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d001      	beq.n	800540c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e106      	b.n	800561a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d073      	beq.n	8005500 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2b03      	cmp	r3, #3
 800541e:	d129      	bne.n	8005474 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005420:	4b81      	ldr	r3, [pc, #516]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e0f4      	b.n	800561a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005430:	f000 f99e 	bl	8005770 <RCC_GetSysClockFreqFromPLLSource>
 8005434:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	4a7c      	ldr	r2, [pc, #496]	@ (800562c <HAL_RCC_ClockConfig+0x268>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d93f      	bls.n	80054be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800543e:	4b7a      	ldr	r3, [pc, #488]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d009      	beq.n	800545e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005452:	2b00      	cmp	r3, #0
 8005454:	d033      	beq.n	80054be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800545a:	2b00      	cmp	r3, #0
 800545c:	d12f      	bne.n	80054be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800545e:	4b72      	ldr	r3, [pc, #456]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005466:	4a70      	ldr	r2, [pc, #448]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 8005468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800546c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800546e:	2380      	movs	r3, #128	@ 0x80
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	e024      	b.n	80054be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d107      	bne.n	800548c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800547c:	4b6a      	ldr	r3, [pc, #424]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d109      	bne.n	800549c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0c6      	b.n	800561a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800548c:	4b66      	ldr	r3, [pc, #408]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e0be      	b.n	800561a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800549c:	f000 f8ce 	bl	800563c <HAL_RCC_GetSysClockFreq>
 80054a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	4a61      	ldr	r2, [pc, #388]	@ (800562c <HAL_RCC_ClockConfig+0x268>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d909      	bls.n	80054be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054aa:	4b5f      	ldr	r3, [pc, #380]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054b2:	4a5d      	ldr	r2, [pc, #372]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 80054b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80054ba:	2380      	movs	r3, #128	@ 0x80
 80054bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054be:	4b5a      	ldr	r3, [pc, #360]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f023 0203 	bic.w	r2, r3, #3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	4957      	ldr	r1, [pc, #348]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d0:	f7ff f906 	bl	80046e0 <HAL_GetTick>
 80054d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054d6:	e00a      	b.n	80054ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054d8:	f7ff f902 	bl	80046e0 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e095      	b.n	800561a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ee:	4b4e      	ldr	r3, [pc, #312]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f003 020c 	and.w	r2, r3, #12
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d1eb      	bne.n	80054d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d023      	beq.n	8005554 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	d005      	beq.n	8005524 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005518:	4b43      	ldr	r3, [pc, #268]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	4a42      	ldr	r2, [pc, #264]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 800551e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005522:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b00      	cmp	r3, #0
 800552e:	d007      	beq.n	8005540 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005530:	4b3d      	ldr	r3, [pc, #244]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005538:	4a3b      	ldr	r2, [pc, #236]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 800553a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800553e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005540:	4b39      	ldr	r3, [pc, #228]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	4936      	ldr	r1, [pc, #216]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 800554e:	4313      	orrs	r3, r2
 8005550:	608b      	str	r3, [r1, #8]
 8005552:	e008      	b.n	8005566 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2b80      	cmp	r3, #128	@ 0x80
 8005558:	d105      	bne.n	8005566 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800555a:	4b33      	ldr	r3, [pc, #204]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	4a32      	ldr	r2, [pc, #200]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 8005560:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005564:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005566:	4b2f      	ldr	r3, [pc, #188]	@ (8005624 <HAL_RCC_ClockConfig+0x260>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d21d      	bcs.n	80055b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005574:	4b2b      	ldr	r3, [pc, #172]	@ (8005624 <HAL_RCC_ClockConfig+0x260>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f023 020f 	bic.w	r2, r3, #15
 800557c:	4929      	ldr	r1, [pc, #164]	@ (8005624 <HAL_RCC_ClockConfig+0x260>)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	4313      	orrs	r3, r2
 8005582:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005584:	f7ff f8ac 	bl	80046e0 <HAL_GetTick>
 8005588:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800558a:	e00a      	b.n	80055a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800558c:	f7ff f8a8 	bl	80046e0 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e03b      	b.n	800561a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a2:	4b20      	ldr	r3, [pc, #128]	@ (8005624 <HAL_RCC_ClockConfig+0x260>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d1ed      	bne.n	800558c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d008      	beq.n	80055ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	4917      	ldr	r1, [pc, #92]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d009      	beq.n	80055ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055da:	4b13      	ldr	r3, [pc, #76]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	490f      	ldr	r1, [pc, #60]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055ee:	f000 f825 	bl	800563c <HAL_RCC_GetSysClockFreq>
 80055f2:	4602      	mov	r2, r0
 80055f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005628 <HAL_RCC_ClockConfig+0x264>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	091b      	lsrs	r3, r3, #4
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	490c      	ldr	r1, [pc, #48]	@ (8005630 <HAL_RCC_ClockConfig+0x26c>)
 8005600:	5ccb      	ldrb	r3, [r1, r3]
 8005602:	f003 031f 	and.w	r3, r3, #31
 8005606:	fa22 f303 	lsr.w	r3, r2, r3
 800560a:	4a0a      	ldr	r2, [pc, #40]	@ (8005634 <HAL_RCC_ClockConfig+0x270>)
 800560c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800560e:	4b0a      	ldr	r3, [pc, #40]	@ (8005638 <HAL_RCC_ClockConfig+0x274>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff f818 	bl	8004648 <HAL_InitTick>
 8005618:	4603      	mov	r3, r0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	40022000 	.word	0x40022000
 8005628:	40021000 	.word	0x40021000
 800562c:	04c4b400 	.word	0x04c4b400
 8005630:	08009ca8 	.word	0x08009ca8
 8005634:	20000084 	.word	0x20000084
 8005638:	20000088 	.word	0x20000088

0800563c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005642:	4b2c      	ldr	r3, [pc, #176]	@ (80056f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 030c 	and.w	r3, r3, #12
 800564a:	2b04      	cmp	r3, #4
 800564c:	d102      	bne.n	8005654 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800564e:	4b2a      	ldr	r3, [pc, #168]	@ (80056f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	e047      	b.n	80056e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005654:	4b27      	ldr	r3, [pc, #156]	@ (80056f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 030c 	and.w	r3, r3, #12
 800565c:	2b08      	cmp	r3, #8
 800565e:	d102      	bne.n	8005666 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005660:	4b26      	ldr	r3, [pc, #152]	@ (80056fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005662:	613b      	str	r3, [r7, #16]
 8005664:	e03e      	b.n	80056e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005666:	4b23      	ldr	r3, [pc, #140]	@ (80056f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 030c 	and.w	r3, r3, #12
 800566e:	2b0c      	cmp	r3, #12
 8005670:	d136      	bne.n	80056e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005672:	4b20      	ldr	r3, [pc, #128]	@ (80056f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800567c:	4b1d      	ldr	r3, [pc, #116]	@ (80056f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	091b      	lsrs	r3, r3, #4
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	3301      	adds	r3, #1
 8005688:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b03      	cmp	r3, #3
 800568e:	d10c      	bne.n	80056aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005690:	4a1a      	ldr	r2, [pc, #104]	@ (80056fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	fbb2 f3f3 	udiv	r3, r2, r3
 8005698:	4a16      	ldr	r2, [pc, #88]	@ (80056f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800569a:	68d2      	ldr	r2, [r2, #12]
 800569c:	0a12      	lsrs	r2, r2, #8
 800569e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056a2:	fb02 f303 	mul.w	r3, r2, r3
 80056a6:	617b      	str	r3, [r7, #20]
      break;
 80056a8:	e00c      	b.n	80056c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056aa:	4a13      	ldr	r2, [pc, #76]	@ (80056f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b2:	4a10      	ldr	r2, [pc, #64]	@ (80056f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056b4:	68d2      	ldr	r2, [r2, #12]
 80056b6:	0a12      	lsrs	r2, r2, #8
 80056b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056bc:	fb02 f303 	mul.w	r3, r2, r3
 80056c0:	617b      	str	r3, [r7, #20]
      break;
 80056c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056c4:	4b0b      	ldr	r3, [pc, #44]	@ (80056f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	0e5b      	lsrs	r3, r3, #25
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	3301      	adds	r3, #1
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056dc:	613b      	str	r3, [r7, #16]
 80056de:	e001      	b.n	80056e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80056e4:	693b      	ldr	r3, [r7, #16]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40021000 	.word	0x40021000
 80056f8:	00f42400 	.word	0x00f42400
 80056fc:	007a1200 	.word	0x007a1200

08005700 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005704:	4b03      	ldr	r3, [pc, #12]	@ (8005714 <HAL_RCC_GetHCLKFreq+0x14>)
 8005706:	681b      	ldr	r3, [r3, #0]
}
 8005708:	4618      	mov	r0, r3
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	20000084 	.word	0x20000084

08005718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800571c:	f7ff fff0 	bl	8005700 <HAL_RCC_GetHCLKFreq>
 8005720:	4602      	mov	r2, r0
 8005722:	4b06      	ldr	r3, [pc, #24]	@ (800573c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	0a1b      	lsrs	r3, r3, #8
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	4904      	ldr	r1, [pc, #16]	@ (8005740 <HAL_RCC_GetPCLK1Freq+0x28>)
 800572e:	5ccb      	ldrb	r3, [r1, r3]
 8005730:	f003 031f 	and.w	r3, r3, #31
 8005734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005738:	4618      	mov	r0, r3
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40021000 	.word	0x40021000
 8005740:	08009cb8 	.word	0x08009cb8

08005744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005748:	f7ff ffda 	bl	8005700 <HAL_RCC_GetHCLKFreq>
 800574c:	4602      	mov	r2, r0
 800574e:	4b06      	ldr	r3, [pc, #24]	@ (8005768 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	0adb      	lsrs	r3, r3, #11
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	4904      	ldr	r1, [pc, #16]	@ (800576c <HAL_RCC_GetPCLK2Freq+0x28>)
 800575a:	5ccb      	ldrb	r3, [r1, r3]
 800575c:	f003 031f 	and.w	r3, r3, #31
 8005760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005764:	4618      	mov	r0, r3
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40021000 	.word	0x40021000
 800576c:	08009cb8 	.word	0x08009cb8

08005770 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005776:	4b1e      	ldr	r3, [pc, #120]	@ (80057f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005780:	4b1b      	ldr	r3, [pc, #108]	@ (80057f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	091b      	lsrs	r3, r3, #4
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	3301      	adds	r3, #1
 800578c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	2b03      	cmp	r3, #3
 8005792:	d10c      	bne.n	80057ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005794:	4a17      	ldr	r2, [pc, #92]	@ (80057f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	fbb2 f3f3 	udiv	r3, r2, r3
 800579c:	4a14      	ldr	r2, [pc, #80]	@ (80057f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800579e:	68d2      	ldr	r2, [r2, #12]
 80057a0:	0a12      	lsrs	r2, r2, #8
 80057a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057a6:	fb02 f303 	mul.w	r3, r2, r3
 80057aa:	617b      	str	r3, [r7, #20]
    break;
 80057ac:	e00c      	b.n	80057c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057ae:	4a12      	ldr	r2, [pc, #72]	@ (80057f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b6:	4a0e      	ldr	r2, [pc, #56]	@ (80057f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057b8:	68d2      	ldr	r2, [r2, #12]
 80057ba:	0a12      	lsrs	r2, r2, #8
 80057bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057c0:	fb02 f303 	mul.w	r3, r2, r3
 80057c4:	617b      	str	r3, [r7, #20]
    break;
 80057c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057c8:	4b09      	ldr	r3, [pc, #36]	@ (80057f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	0e5b      	lsrs	r3, r3, #25
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	3301      	adds	r3, #1
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80057e2:	687b      	ldr	r3, [r7, #4]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	40021000 	.word	0x40021000
 80057f4:	007a1200 	.word	0x007a1200
 80057f8:	00f42400 	.word	0x00f42400

080057fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005804:	2300      	movs	r3, #0
 8005806:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005808:	2300      	movs	r3, #0
 800580a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 8098 	beq.w	800594a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800581a:	2300      	movs	r3, #0
 800581c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800581e:	4b43      	ldr	r3, [pc, #268]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10d      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800582a:	4b40      	ldr	r3, [pc, #256]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800582c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800582e:	4a3f      	ldr	r2, [pc, #252]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005834:	6593      	str	r3, [r2, #88]	@ 0x58
 8005836:	4b3d      	ldr	r3, [pc, #244]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800583a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800583e:	60bb      	str	r3, [r7, #8]
 8005840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005842:	2301      	movs	r3, #1
 8005844:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005846:	4b3a      	ldr	r3, [pc, #232]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a39      	ldr	r2, [pc, #228]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800584c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005850:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005852:	f7fe ff45 	bl	80046e0 <HAL_GetTick>
 8005856:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005858:	e009      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800585a:	f7fe ff41 	bl	80046e0 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d902      	bls.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	74fb      	strb	r3, [r7, #19]
        break;
 800586c:	e005      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800586e:	4b30      	ldr	r3, [pc, #192]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0ef      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800587a:	7cfb      	ldrb	r3, [r7, #19]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d159      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005880:	4b2a      	ldr	r3, [pc, #168]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800588a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d01e      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	429a      	cmp	r2, r3
 800589a:	d019      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800589c:	4b23      	ldr	r3, [pc, #140]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800589e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058a8:	4b20      	ldr	r3, [pc, #128]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ae:	4a1f      	ldr	r2, [pc, #124]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058b8:	4b1c      	ldr	r3, [pc, #112]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058be:	4a1b      	ldr	r2, [pc, #108]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058c8:	4a18      	ldr	r2, [pc, #96]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d016      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058da:	f7fe ff01 	bl	80046e0 <HAL_GetTick>
 80058de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058e0:	e00b      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e2:	f7fe fefd 	bl	80046e0 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d902      	bls.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	74fb      	strb	r3, [r7, #19]
            break;
 80058f8:	e006      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058fa:	4b0c      	ldr	r3, [pc, #48]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d0ec      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005908:	7cfb      	ldrb	r3, [r7, #19]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10b      	bne.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800590e:	4b07      	ldr	r3, [pc, #28]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005914:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800591c:	4903      	ldr	r1, [pc, #12]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800591e:	4313      	orrs	r3, r2
 8005920:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005924:	e008      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005926:	7cfb      	ldrb	r3, [r7, #19]
 8005928:	74bb      	strb	r3, [r7, #18]
 800592a:	e005      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800592c:	40021000 	.word	0x40021000
 8005930:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005934:	7cfb      	ldrb	r3, [r7, #19]
 8005936:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005938:	7c7b      	ldrb	r3, [r7, #17]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d105      	bne.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800593e:	4ba7      	ldr	r3, [pc, #668]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005942:	4aa6      	ldr	r2, [pc, #664]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005944:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005948:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005956:	4ba1      	ldr	r3, [pc, #644]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800595c:	f023 0203 	bic.w	r2, r3, #3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	499d      	ldr	r1, [pc, #628]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00a      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005978:	4b98      	ldr	r3, [pc, #608]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800597a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800597e:	f023 020c 	bic.w	r2, r3, #12
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	4995      	ldr	r1, [pc, #596]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800599a:	4b90      	ldr	r3, [pc, #576]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800599c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	498c      	ldr	r1, [pc, #560]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00a      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059bc:	4b87      	ldr	r3, [pc, #540]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	4984      	ldr	r1, [pc, #528]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0310 	and.w	r3, r3, #16
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00a      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059de:	4b7f      	ldr	r3, [pc, #508]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	497b      	ldr	r1, [pc, #492]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0320 	and.w	r3, r3, #32
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00a      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a00:	4b76      	ldr	r3, [pc, #472]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	4973      	ldr	r1, [pc, #460]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a22:	4b6e      	ldr	r3, [pc, #440]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a28:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	496a      	ldr	r1, [pc, #424]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a44:	4b65      	ldr	r3, [pc, #404]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a4a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	4962      	ldr	r1, [pc, #392]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a66:	4b5d      	ldr	r3, [pc, #372]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a74:	4959      	ldr	r1, [pc, #356]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00a      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a88:	4b54      	ldr	r3, [pc, #336]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a8e:	f023 0203 	bic.w	r2, r3, #3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a96:	4951      	ldr	r1, [pc, #324]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005aaa:	4b4c      	ldr	r3, [pc, #304]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab8:	4948      	ldr	r1, [pc, #288]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d015      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005acc:	4b43      	ldr	r3, [pc, #268]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ada:	4940      	ldr	r1, [pc, #256]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aea:	d105      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aec:	4b3b      	ldr	r3, [pc, #236]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	4a3a      	ldr	r2, [pc, #232]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005af6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d015      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b04:	4b35      	ldr	r3, [pc, #212]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b12:	4932      	ldr	r1, [pc, #200]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b22:	d105      	bne.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b24:	4b2d      	ldr	r3, [pc, #180]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	4a2c      	ldr	r2, [pc, #176]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b2e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d015      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b3c:	4b27      	ldr	r3, [pc, #156]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4a:	4924      	ldr	r1, [pc, #144]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b5a:	d105      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	4a1e      	ldr	r2, [pc, #120]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d015      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b74:	4b19      	ldr	r3, [pc, #100]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b82:	4916      	ldr	r1, [pc, #88]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b92:	d105      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b94:	4b11      	ldr	r3, [pc, #68]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	4a10      	ldr	r2, [pc, #64]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d019      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bac:	4b0b      	ldr	r3, [pc, #44]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bba:	4908      	ldr	r1, [pc, #32]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bca:	d109      	bne.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bcc:	4b03      	ldr	r3, [pc, #12]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	4a02      	ldr	r2, [pc, #8]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bd6:	60d3      	str	r3, [r2, #12]
 8005bd8:	e002      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005bda:	bf00      	nop
 8005bdc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d015      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005bec:	4b29      	ldr	r3, [pc, #164]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bfa:	4926      	ldr	r1, [pc, #152]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c0a:	d105      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c0c:	4b21      	ldr	r3, [pc, #132]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	4a20      	ldr	r2, [pc, #128]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c16:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d015      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005c24:	4b1b      	ldr	r3, [pc, #108]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c2a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c32:	4918      	ldr	r1, [pc, #96]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c42:	d105      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c44:	4b13      	ldr	r3, [pc, #76]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	4a12      	ldr	r2, [pc, #72]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c4e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d015      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c6a:	490a      	ldr	r1, [pc, #40]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c7a:	d105      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c7c:	4b05      	ldr	r3, [pc, #20]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	4a04      	ldr	r2, [pc, #16]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c88:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3718      	adds	r7, #24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	40021000 	.word	0x40021000

08005c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e049      	b.n	8005d3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fe fac2 	bl	8004248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	f000 fd96 	bl	8006808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d001      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e054      	b.n	8005e0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0201 	orr.w	r2, r2, #1
 8005d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a26      	ldr	r2, [pc, #152]	@ (8005e18 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d022      	beq.n	8005dc8 <HAL_TIM_Base_Start_IT+0x80>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d8a:	d01d      	beq.n	8005dc8 <HAL_TIM_Base_Start_IT+0x80>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a22      	ldr	r2, [pc, #136]	@ (8005e1c <HAL_TIM_Base_Start_IT+0xd4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d018      	beq.n	8005dc8 <HAL_TIM_Base_Start_IT+0x80>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a21      	ldr	r2, [pc, #132]	@ (8005e20 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d013      	beq.n	8005dc8 <HAL_TIM_Base_Start_IT+0x80>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1f      	ldr	r2, [pc, #124]	@ (8005e24 <HAL_TIM_Base_Start_IT+0xdc>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00e      	beq.n	8005dc8 <HAL_TIM_Base_Start_IT+0x80>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a1e      	ldr	r2, [pc, #120]	@ (8005e28 <HAL_TIM_Base_Start_IT+0xe0>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d009      	beq.n	8005dc8 <HAL_TIM_Base_Start_IT+0x80>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1c      	ldr	r2, [pc, #112]	@ (8005e2c <HAL_TIM_Base_Start_IT+0xe4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d004      	beq.n	8005dc8 <HAL_TIM_Base_Start_IT+0x80>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8005e30 <HAL_TIM_Base_Start_IT+0xe8>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d115      	bne.n	8005df4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	4b19      	ldr	r3, [pc, #100]	@ (8005e34 <HAL_TIM_Base_Start_IT+0xec>)
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b06      	cmp	r3, #6
 8005dd8:	d015      	beq.n	8005e06 <HAL_TIM_Base_Start_IT+0xbe>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005de0:	d011      	beq.n	8005e06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f042 0201 	orr.w	r2, r2, #1
 8005df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df2:	e008      	b.n	8005e06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f042 0201 	orr.w	r2, r2, #1
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	e000      	b.n	8005e08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	40012c00 	.word	0x40012c00
 8005e1c:	40000400 	.word	0x40000400
 8005e20:	40000800 	.word	0x40000800
 8005e24:	40000c00 	.word	0x40000c00
 8005e28:	40013400 	.word	0x40013400
 8005e2c:	40014000 	.word	0x40014000
 8005e30:	40015000 	.word	0x40015000
 8005e34:	00010007 	.word	0x00010007

08005e38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e049      	b.n	8005ede <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f841 	bl	8005ee6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4619      	mov	r1, r3
 8005e76:	4610      	mov	r0, r2
 8005e78:	f000 fcc6 	bl	8006808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
	...

08005efc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d109      	bne.n	8005f20 <HAL_TIM_PWM_Start+0x24>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	bf14      	ite	ne
 8005f18:	2301      	movne	r3, #1
 8005f1a:	2300      	moveq	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	e03c      	b.n	8005f9a <HAL_TIM_PWM_Start+0x9e>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d109      	bne.n	8005f3a <HAL_TIM_PWM_Start+0x3e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	bf14      	ite	ne
 8005f32:	2301      	movne	r3, #1
 8005f34:	2300      	moveq	r3, #0
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	e02f      	b.n	8005f9a <HAL_TIM_PWM_Start+0x9e>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d109      	bne.n	8005f54 <HAL_TIM_PWM_Start+0x58>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	bf14      	ite	ne
 8005f4c:	2301      	movne	r3, #1
 8005f4e:	2300      	moveq	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	e022      	b.n	8005f9a <HAL_TIM_PWM_Start+0x9e>
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b0c      	cmp	r3, #12
 8005f58:	d109      	bne.n	8005f6e <HAL_TIM_PWM_Start+0x72>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	bf14      	ite	ne
 8005f66:	2301      	movne	r3, #1
 8005f68:	2300      	moveq	r3, #0
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	e015      	b.n	8005f9a <HAL_TIM_PWM_Start+0x9e>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b10      	cmp	r3, #16
 8005f72:	d109      	bne.n	8005f88 <HAL_TIM_PWM_Start+0x8c>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	bf14      	ite	ne
 8005f80:	2301      	movne	r3, #1
 8005f82:	2300      	moveq	r3, #0
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	e008      	b.n	8005f9a <HAL_TIM_PWM_Start+0x9e>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	bf14      	ite	ne
 8005f94:	2301      	movne	r3, #1
 8005f96:	2300      	moveq	r3, #0
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e0a6      	b.n	80060f0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d104      	bne.n	8005fb2 <HAL_TIM_PWM_Start+0xb6>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fb0:	e023      	b.n	8005ffa <HAL_TIM_PWM_Start+0xfe>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d104      	bne.n	8005fc2 <HAL_TIM_PWM_Start+0xc6>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fc0:	e01b      	b.n	8005ffa <HAL_TIM_PWM_Start+0xfe>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b08      	cmp	r3, #8
 8005fc6:	d104      	bne.n	8005fd2 <HAL_TIM_PWM_Start+0xd6>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fd0:	e013      	b.n	8005ffa <HAL_TIM_PWM_Start+0xfe>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b0c      	cmp	r3, #12
 8005fd6:	d104      	bne.n	8005fe2 <HAL_TIM_PWM_Start+0xe6>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fe0:	e00b      	b.n	8005ffa <HAL_TIM_PWM_Start+0xfe>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b10      	cmp	r3, #16
 8005fe6:	d104      	bne.n	8005ff2 <HAL_TIM_PWM_Start+0xf6>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ff0:	e003      	b.n	8005ffa <HAL_TIM_PWM_Start+0xfe>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2201      	movs	r2, #1
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f001 f87a 	bl	80070fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a3a      	ldr	r2, [pc, #232]	@ (80060f8 <HAL_TIM_PWM_Start+0x1fc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d018      	beq.n	8006044 <HAL_TIM_PWM_Start+0x148>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a39      	ldr	r2, [pc, #228]	@ (80060fc <HAL_TIM_PWM_Start+0x200>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d013      	beq.n	8006044 <HAL_TIM_PWM_Start+0x148>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a37      	ldr	r2, [pc, #220]	@ (8006100 <HAL_TIM_PWM_Start+0x204>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d00e      	beq.n	8006044 <HAL_TIM_PWM_Start+0x148>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a36      	ldr	r2, [pc, #216]	@ (8006104 <HAL_TIM_PWM_Start+0x208>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d009      	beq.n	8006044 <HAL_TIM_PWM_Start+0x148>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a34      	ldr	r2, [pc, #208]	@ (8006108 <HAL_TIM_PWM_Start+0x20c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d004      	beq.n	8006044 <HAL_TIM_PWM_Start+0x148>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a33      	ldr	r2, [pc, #204]	@ (800610c <HAL_TIM_PWM_Start+0x210>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d101      	bne.n	8006048 <HAL_TIM_PWM_Start+0x14c>
 8006044:	2301      	movs	r3, #1
 8006046:	e000      	b.n	800604a <HAL_TIM_PWM_Start+0x14e>
 8006048:	2300      	movs	r3, #0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d007      	beq.n	800605e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800605c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a25      	ldr	r2, [pc, #148]	@ (80060f8 <HAL_TIM_PWM_Start+0x1fc>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d022      	beq.n	80060ae <HAL_TIM_PWM_Start+0x1b2>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006070:	d01d      	beq.n	80060ae <HAL_TIM_PWM_Start+0x1b2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a26      	ldr	r2, [pc, #152]	@ (8006110 <HAL_TIM_PWM_Start+0x214>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d018      	beq.n	80060ae <HAL_TIM_PWM_Start+0x1b2>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a24      	ldr	r2, [pc, #144]	@ (8006114 <HAL_TIM_PWM_Start+0x218>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d013      	beq.n	80060ae <HAL_TIM_PWM_Start+0x1b2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a23      	ldr	r2, [pc, #140]	@ (8006118 <HAL_TIM_PWM_Start+0x21c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00e      	beq.n	80060ae <HAL_TIM_PWM_Start+0x1b2>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a19      	ldr	r2, [pc, #100]	@ (80060fc <HAL_TIM_PWM_Start+0x200>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d009      	beq.n	80060ae <HAL_TIM_PWM_Start+0x1b2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a18      	ldr	r2, [pc, #96]	@ (8006100 <HAL_TIM_PWM_Start+0x204>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d004      	beq.n	80060ae <HAL_TIM_PWM_Start+0x1b2>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a18      	ldr	r2, [pc, #96]	@ (800610c <HAL_TIM_PWM_Start+0x210>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d115      	bne.n	80060da <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	4b19      	ldr	r3, [pc, #100]	@ (800611c <HAL_TIM_PWM_Start+0x220>)
 80060b6:	4013      	ands	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b06      	cmp	r3, #6
 80060be:	d015      	beq.n	80060ec <HAL_TIM_PWM_Start+0x1f0>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060c6:	d011      	beq.n	80060ec <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0201 	orr.w	r2, r2, #1
 80060d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d8:	e008      	b.n	80060ec <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f042 0201 	orr.w	r2, r2, #1
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	e000      	b.n	80060ee <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	40012c00 	.word	0x40012c00
 80060fc:	40013400 	.word	0x40013400
 8006100:	40014000 	.word	0x40014000
 8006104:	40014400 	.word	0x40014400
 8006108:	40014800 	.word	0x40014800
 800610c:	40015000 	.word	0x40015000
 8006110:	40000400 	.word	0x40000400
 8006114:	40000800 	.word	0x40000800
 8006118:	40000c00 	.word	0x40000c00
 800611c:	00010007 	.word	0x00010007

08006120 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e097      	b.n	8006264 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d106      	bne.n	800614e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7fd ffa5 	bl	8004098 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2202      	movs	r2, #2
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6812      	ldr	r2, [r2, #0]
 8006160:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006164:	f023 0307 	bic.w	r3, r3, #7
 8006168:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	3304      	adds	r3, #4
 8006172:	4619      	mov	r1, r3
 8006174:	4610      	mov	r0, r2
 8006176:	f000 fb47 	bl	8006808 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4313      	orrs	r3, r2
 800619a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061a2:	f023 0303 	bic.w	r3, r3, #3
 80061a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	021b      	lsls	r3, r3, #8
 80061b2:	4313      	orrs	r3, r2
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80061c0:	f023 030c 	bic.w	r3, r3, #12
 80061c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	4313      	orrs	r3, r2
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	011a      	lsls	r2, r3, #4
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	031b      	lsls	r3, r3, #12
 80061f0:	4313      	orrs	r3, r2
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80061fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006206:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	4313      	orrs	r3, r2
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800627c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006284:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800628c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006294:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d110      	bne.n	80062be <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d102      	bne.n	80062a8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80062a2:	7b7b      	ldrb	r3, [r7, #13]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d001      	beq.n	80062ac <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e089      	b.n	80063c0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062bc:	e031      	b.n	8006322 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d110      	bne.n	80062e6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80062c4:	7bbb      	ldrb	r3, [r7, #14]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d102      	bne.n	80062d0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062ca:	7b3b      	ldrb	r3, [r7, #12]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d001      	beq.n	80062d4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e075      	b.n	80063c0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062e4:	e01d      	b.n	8006322 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d108      	bne.n	80062fe <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80062ec:	7bbb      	ldrb	r3, [r7, #14]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d105      	bne.n	80062fe <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062f2:	7b7b      	ldrb	r3, [r7, #13]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d102      	bne.n	80062fe <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062f8:	7b3b      	ldrb	r3, [r7, #12]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d001      	beq.n	8006302 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e05e      	b.n	80063c0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2202      	movs	r2, #2
 8006306:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2202      	movs	r2, #2
 800630e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2202      	movs	r2, #2
 8006316:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2202      	movs	r2, #2
 800631e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d003      	beq.n	8006330 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	2b04      	cmp	r3, #4
 800632c:	d010      	beq.n	8006350 <HAL_TIM_Encoder_Start_IT+0xe4>
 800632e:	e01f      	b.n	8006370 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2201      	movs	r2, #1
 8006336:	2100      	movs	r1, #0
 8006338:	4618      	mov	r0, r3
 800633a:	f000 fedf 	bl	80070fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68da      	ldr	r2, [r3, #12]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f042 0202 	orr.w	r2, r2, #2
 800634c:	60da      	str	r2, [r3, #12]
      break;
 800634e:	e02e      	b.n	80063ae <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2201      	movs	r2, #1
 8006356:	2104      	movs	r1, #4
 8006358:	4618      	mov	r0, r3
 800635a:	f000 fecf 	bl	80070fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f042 0204 	orr.w	r2, r2, #4
 800636c:	60da      	str	r2, [r3, #12]
      break;
 800636e:	e01e      	b.n	80063ae <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2201      	movs	r2, #1
 8006376:	2100      	movs	r1, #0
 8006378:	4618      	mov	r0, r3
 800637a:	f000 febf 	bl	80070fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2201      	movs	r2, #1
 8006384:	2104      	movs	r1, #4
 8006386:	4618      	mov	r0, r3
 8006388:	f000 feb8 	bl	80070fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0202 	orr.w	r2, r2, #2
 800639a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0204 	orr.w	r2, r2, #4
 80063aa:	60da      	str	r2, [r3, #12]
      break;
 80063ac:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0201 	orr.w	r2, r2, #1
 80063bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d101      	bne.n	80063e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063e2:	2302      	movs	r3, #2
 80063e4:	e0ff      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b14      	cmp	r3, #20
 80063f2:	f200 80f0 	bhi.w	80065d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80063f6:	a201      	add	r2, pc, #4	@ (adr r2, 80063fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fc:	08006451 	.word	0x08006451
 8006400:	080065d7 	.word	0x080065d7
 8006404:	080065d7 	.word	0x080065d7
 8006408:	080065d7 	.word	0x080065d7
 800640c:	08006491 	.word	0x08006491
 8006410:	080065d7 	.word	0x080065d7
 8006414:	080065d7 	.word	0x080065d7
 8006418:	080065d7 	.word	0x080065d7
 800641c:	080064d3 	.word	0x080064d3
 8006420:	080065d7 	.word	0x080065d7
 8006424:	080065d7 	.word	0x080065d7
 8006428:	080065d7 	.word	0x080065d7
 800642c:	08006513 	.word	0x08006513
 8006430:	080065d7 	.word	0x080065d7
 8006434:	080065d7 	.word	0x080065d7
 8006438:	080065d7 	.word	0x080065d7
 800643c:	08006555 	.word	0x08006555
 8006440:	080065d7 	.word	0x080065d7
 8006444:	080065d7 	.word	0x080065d7
 8006448:	080065d7 	.word	0x080065d7
 800644c:	08006595 	.word	0x08006595
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68b9      	ldr	r1, [r7, #8]
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fa8a 	bl	8006970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699a      	ldr	r2, [r3, #24]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0208 	orr.w	r2, r2, #8
 800646a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699a      	ldr	r2, [r3, #24]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0204 	bic.w	r2, r2, #4
 800647a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6999      	ldr	r1, [r3, #24]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	691a      	ldr	r2, [r3, #16]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	619a      	str	r2, [r3, #24]
      break;
 800648e:	e0a5      	b.n	80065dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fb04 	bl	8006aa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	699a      	ldr	r2, [r3, #24]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	699a      	ldr	r2, [r3, #24]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6999      	ldr	r1, [r3, #24]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	021a      	lsls	r2, r3, #8
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	619a      	str	r2, [r3, #24]
      break;
 80064d0:	e084      	b.n	80065dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68b9      	ldr	r1, [r7, #8]
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 fb77 	bl	8006bcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69da      	ldr	r2, [r3, #28]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f042 0208 	orr.w	r2, r2, #8
 80064ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	69da      	ldr	r2, [r3, #28]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0204 	bic.w	r2, r2, #4
 80064fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69d9      	ldr	r1, [r3, #28]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	691a      	ldr	r2, [r3, #16]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	61da      	str	r2, [r3, #28]
      break;
 8006510:	e064      	b.n	80065dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68b9      	ldr	r1, [r7, #8]
 8006518:	4618      	mov	r0, r3
 800651a:	f000 fbe9 	bl	8006cf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69da      	ldr	r2, [r3, #28]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800652c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69da      	ldr	r2, [r3, #28]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800653c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	69d9      	ldr	r1, [r3, #28]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	021a      	lsls	r2, r3, #8
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	61da      	str	r2, [r3, #28]
      break;
 8006552:	e043      	b.n	80065dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68b9      	ldr	r1, [r7, #8]
 800655a:	4618      	mov	r0, r3
 800655c:	f000 fc5c 	bl	8006e18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0208 	orr.w	r2, r2, #8
 800656e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0204 	bic.w	r2, r2, #4
 800657e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	691a      	ldr	r2, [r3, #16]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006592:	e023      	b.n	80065dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68b9      	ldr	r1, [r7, #8]
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fca6 	bl	8006eec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065be:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	021a      	lsls	r2, r3, #8
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80065d4:	e002      	b.n	80065dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	75fb      	strb	r3, [r7, #23]
      break;
 80065da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop

080065f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006604:	2b01      	cmp	r3, #1
 8006606:	d101      	bne.n	800660c <HAL_TIM_ConfigClockSource+0x1c>
 8006608:	2302      	movs	r3, #2
 800660a:	e0ee      	b.n	80067ea <HAL_TIM_ConfigClockSource+0x1fa>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2202      	movs	r2, #2
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800662a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800662e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006636:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a6b      	ldr	r2, [pc, #428]	@ (80067f4 <HAL_TIM_ConfigClockSource+0x204>)
 8006646:	4293      	cmp	r3, r2
 8006648:	f000 80b9 	beq.w	80067be <HAL_TIM_ConfigClockSource+0x1ce>
 800664c:	4a69      	ldr	r2, [pc, #420]	@ (80067f4 <HAL_TIM_ConfigClockSource+0x204>)
 800664e:	4293      	cmp	r3, r2
 8006650:	f200 80be 	bhi.w	80067d0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006654:	4a68      	ldr	r2, [pc, #416]	@ (80067f8 <HAL_TIM_ConfigClockSource+0x208>)
 8006656:	4293      	cmp	r3, r2
 8006658:	f000 80b1 	beq.w	80067be <HAL_TIM_ConfigClockSource+0x1ce>
 800665c:	4a66      	ldr	r2, [pc, #408]	@ (80067f8 <HAL_TIM_ConfigClockSource+0x208>)
 800665e:	4293      	cmp	r3, r2
 8006660:	f200 80b6 	bhi.w	80067d0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006664:	4a65      	ldr	r2, [pc, #404]	@ (80067fc <HAL_TIM_ConfigClockSource+0x20c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	f000 80a9 	beq.w	80067be <HAL_TIM_ConfigClockSource+0x1ce>
 800666c:	4a63      	ldr	r2, [pc, #396]	@ (80067fc <HAL_TIM_ConfigClockSource+0x20c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	f200 80ae 	bhi.w	80067d0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006674:	4a62      	ldr	r2, [pc, #392]	@ (8006800 <HAL_TIM_ConfigClockSource+0x210>)
 8006676:	4293      	cmp	r3, r2
 8006678:	f000 80a1 	beq.w	80067be <HAL_TIM_ConfigClockSource+0x1ce>
 800667c:	4a60      	ldr	r2, [pc, #384]	@ (8006800 <HAL_TIM_ConfigClockSource+0x210>)
 800667e:	4293      	cmp	r3, r2
 8006680:	f200 80a6 	bhi.w	80067d0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006684:	4a5f      	ldr	r2, [pc, #380]	@ (8006804 <HAL_TIM_ConfigClockSource+0x214>)
 8006686:	4293      	cmp	r3, r2
 8006688:	f000 8099 	beq.w	80067be <HAL_TIM_ConfigClockSource+0x1ce>
 800668c:	4a5d      	ldr	r2, [pc, #372]	@ (8006804 <HAL_TIM_ConfigClockSource+0x214>)
 800668e:	4293      	cmp	r3, r2
 8006690:	f200 809e 	bhi.w	80067d0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006694:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006698:	f000 8091 	beq.w	80067be <HAL_TIM_ConfigClockSource+0x1ce>
 800669c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80066a0:	f200 8096 	bhi.w	80067d0 <HAL_TIM_ConfigClockSource+0x1e0>
 80066a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066a8:	f000 8089 	beq.w	80067be <HAL_TIM_ConfigClockSource+0x1ce>
 80066ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066b0:	f200 808e 	bhi.w	80067d0 <HAL_TIM_ConfigClockSource+0x1e0>
 80066b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066b8:	d03e      	beq.n	8006738 <HAL_TIM_ConfigClockSource+0x148>
 80066ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066be:	f200 8087 	bhi.w	80067d0 <HAL_TIM_ConfigClockSource+0x1e0>
 80066c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066c6:	f000 8086 	beq.w	80067d6 <HAL_TIM_ConfigClockSource+0x1e6>
 80066ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ce:	d87f      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x1e0>
 80066d0:	2b70      	cmp	r3, #112	@ 0x70
 80066d2:	d01a      	beq.n	800670a <HAL_TIM_ConfigClockSource+0x11a>
 80066d4:	2b70      	cmp	r3, #112	@ 0x70
 80066d6:	d87b      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x1e0>
 80066d8:	2b60      	cmp	r3, #96	@ 0x60
 80066da:	d050      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x18e>
 80066dc:	2b60      	cmp	r3, #96	@ 0x60
 80066de:	d877      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x1e0>
 80066e0:	2b50      	cmp	r3, #80	@ 0x50
 80066e2:	d03c      	beq.n	800675e <HAL_TIM_ConfigClockSource+0x16e>
 80066e4:	2b50      	cmp	r3, #80	@ 0x50
 80066e6:	d873      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x1e0>
 80066e8:	2b40      	cmp	r3, #64	@ 0x40
 80066ea:	d058      	beq.n	800679e <HAL_TIM_ConfigClockSource+0x1ae>
 80066ec:	2b40      	cmp	r3, #64	@ 0x40
 80066ee:	d86f      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x1e0>
 80066f0:	2b30      	cmp	r3, #48	@ 0x30
 80066f2:	d064      	beq.n	80067be <HAL_TIM_ConfigClockSource+0x1ce>
 80066f4:	2b30      	cmp	r3, #48	@ 0x30
 80066f6:	d86b      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x1e0>
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	d060      	beq.n	80067be <HAL_TIM_ConfigClockSource+0x1ce>
 80066fc:	2b20      	cmp	r3, #32
 80066fe:	d867      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006700:	2b00      	cmp	r3, #0
 8006702:	d05c      	beq.n	80067be <HAL_TIM_ConfigClockSource+0x1ce>
 8006704:	2b10      	cmp	r3, #16
 8006706:	d05a      	beq.n	80067be <HAL_TIM_ConfigClockSource+0x1ce>
 8006708:	e062      	b.n	80067d0 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800671a:	f000 fccf 	bl	80070bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800672c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	609a      	str	r2, [r3, #8]
      break;
 8006736:	e04f      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006748:	f000 fcb8 	bl	80070bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689a      	ldr	r2, [r3, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800675a:	609a      	str	r2, [r3, #8]
      break;
 800675c:	e03c      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800676a:	461a      	mov	r2, r3
 800676c:	f000 fc2a 	bl	8006fc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2150      	movs	r1, #80	@ 0x50
 8006776:	4618      	mov	r0, r3
 8006778:	f000 fc83 	bl	8007082 <TIM_ITRx_SetConfig>
      break;
 800677c:	e02c      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800678a:	461a      	mov	r2, r3
 800678c:	f000 fc49 	bl	8007022 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2160      	movs	r1, #96	@ 0x60
 8006796:	4618      	mov	r0, r3
 8006798:	f000 fc73 	bl	8007082 <TIM_ITRx_SetConfig>
      break;
 800679c:	e01c      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067aa:	461a      	mov	r2, r3
 80067ac:	f000 fc0a 	bl	8006fc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2140      	movs	r1, #64	@ 0x40
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fc63 	bl	8007082 <TIM_ITRx_SetConfig>
      break;
 80067bc:	e00c      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4619      	mov	r1, r3
 80067c8:	4610      	mov	r0, r2
 80067ca:	f000 fc5a 	bl	8007082 <TIM_ITRx_SetConfig>
      break;
 80067ce:	e003      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	73fb      	strb	r3, [r7, #15]
      break;
 80067d4:	e000      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 80067d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	00100070 	.word	0x00100070
 80067f8:	00100050 	.word	0x00100050
 80067fc:	00100040 	.word	0x00100040
 8006800:	00100030 	.word	0x00100030
 8006804:	00100020 	.word	0x00100020

08006808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a4c      	ldr	r2, [pc, #304]	@ (800694c <TIM_Base_SetConfig+0x144>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d017      	beq.n	8006850 <TIM_Base_SetConfig+0x48>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006826:	d013      	beq.n	8006850 <TIM_Base_SetConfig+0x48>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a49      	ldr	r2, [pc, #292]	@ (8006950 <TIM_Base_SetConfig+0x148>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d00f      	beq.n	8006850 <TIM_Base_SetConfig+0x48>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a48      	ldr	r2, [pc, #288]	@ (8006954 <TIM_Base_SetConfig+0x14c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d00b      	beq.n	8006850 <TIM_Base_SetConfig+0x48>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a47      	ldr	r2, [pc, #284]	@ (8006958 <TIM_Base_SetConfig+0x150>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d007      	beq.n	8006850 <TIM_Base_SetConfig+0x48>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a46      	ldr	r2, [pc, #280]	@ (800695c <TIM_Base_SetConfig+0x154>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d003      	beq.n	8006850 <TIM_Base_SetConfig+0x48>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a45      	ldr	r2, [pc, #276]	@ (8006960 <TIM_Base_SetConfig+0x158>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d108      	bne.n	8006862 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a39      	ldr	r2, [pc, #228]	@ (800694c <TIM_Base_SetConfig+0x144>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d023      	beq.n	80068b2 <TIM_Base_SetConfig+0xaa>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006870:	d01f      	beq.n	80068b2 <TIM_Base_SetConfig+0xaa>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a36      	ldr	r2, [pc, #216]	@ (8006950 <TIM_Base_SetConfig+0x148>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d01b      	beq.n	80068b2 <TIM_Base_SetConfig+0xaa>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a35      	ldr	r2, [pc, #212]	@ (8006954 <TIM_Base_SetConfig+0x14c>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d017      	beq.n	80068b2 <TIM_Base_SetConfig+0xaa>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a34      	ldr	r2, [pc, #208]	@ (8006958 <TIM_Base_SetConfig+0x150>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d013      	beq.n	80068b2 <TIM_Base_SetConfig+0xaa>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a33      	ldr	r2, [pc, #204]	@ (800695c <TIM_Base_SetConfig+0x154>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d00f      	beq.n	80068b2 <TIM_Base_SetConfig+0xaa>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a33      	ldr	r2, [pc, #204]	@ (8006964 <TIM_Base_SetConfig+0x15c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d00b      	beq.n	80068b2 <TIM_Base_SetConfig+0xaa>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a32      	ldr	r2, [pc, #200]	@ (8006968 <TIM_Base_SetConfig+0x160>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d007      	beq.n	80068b2 <TIM_Base_SetConfig+0xaa>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a31      	ldr	r2, [pc, #196]	@ (800696c <TIM_Base_SetConfig+0x164>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d003      	beq.n	80068b2 <TIM_Base_SetConfig+0xaa>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a2c      	ldr	r2, [pc, #176]	@ (8006960 <TIM_Base_SetConfig+0x158>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d108      	bne.n	80068c4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a18      	ldr	r2, [pc, #96]	@ (800694c <TIM_Base_SetConfig+0x144>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d013      	beq.n	8006918 <TIM_Base_SetConfig+0x110>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a1a      	ldr	r2, [pc, #104]	@ (800695c <TIM_Base_SetConfig+0x154>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d00f      	beq.n	8006918 <TIM_Base_SetConfig+0x110>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a1a      	ldr	r2, [pc, #104]	@ (8006964 <TIM_Base_SetConfig+0x15c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d00b      	beq.n	8006918 <TIM_Base_SetConfig+0x110>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a19      	ldr	r2, [pc, #100]	@ (8006968 <TIM_Base_SetConfig+0x160>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d007      	beq.n	8006918 <TIM_Base_SetConfig+0x110>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a18      	ldr	r2, [pc, #96]	@ (800696c <TIM_Base_SetConfig+0x164>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d003      	beq.n	8006918 <TIM_Base_SetConfig+0x110>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a13      	ldr	r2, [pc, #76]	@ (8006960 <TIM_Base_SetConfig+0x158>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d103      	bne.n	8006920 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b01      	cmp	r3, #1
 8006930:	d105      	bne.n	800693e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f023 0201 	bic.w	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	611a      	str	r2, [r3, #16]
  }
}
 800693e:	bf00      	nop
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	40012c00 	.word	0x40012c00
 8006950:	40000400 	.word	0x40000400
 8006954:	40000800 	.word	0x40000800
 8006958:	40000c00 	.word	0x40000c00
 800695c:	40013400 	.word	0x40013400
 8006960:	40015000 	.word	0x40015000
 8006964:	40014000 	.word	0x40014000
 8006968:	40014400 	.word	0x40014400
 800696c:	40014800 	.word	0x40014800

08006970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	f023 0201 	bic.w	r2, r3, #1
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800699e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0303 	bic.w	r3, r3, #3
 80069aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f023 0302 	bic.w	r3, r3, #2
 80069bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a30      	ldr	r2, [pc, #192]	@ (8006a8c <TIM_OC1_SetConfig+0x11c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d013      	beq.n	80069f8 <TIM_OC1_SetConfig+0x88>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a2f      	ldr	r2, [pc, #188]	@ (8006a90 <TIM_OC1_SetConfig+0x120>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d00f      	beq.n	80069f8 <TIM_OC1_SetConfig+0x88>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a2e      	ldr	r2, [pc, #184]	@ (8006a94 <TIM_OC1_SetConfig+0x124>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d00b      	beq.n	80069f8 <TIM_OC1_SetConfig+0x88>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a2d      	ldr	r2, [pc, #180]	@ (8006a98 <TIM_OC1_SetConfig+0x128>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d007      	beq.n	80069f8 <TIM_OC1_SetConfig+0x88>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a2c      	ldr	r2, [pc, #176]	@ (8006a9c <TIM_OC1_SetConfig+0x12c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d003      	beq.n	80069f8 <TIM_OC1_SetConfig+0x88>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a2b      	ldr	r2, [pc, #172]	@ (8006aa0 <TIM_OC1_SetConfig+0x130>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d10c      	bne.n	8006a12 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f023 0308 	bic.w	r3, r3, #8
 80069fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f023 0304 	bic.w	r3, r3, #4
 8006a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a1d      	ldr	r2, [pc, #116]	@ (8006a8c <TIM_OC1_SetConfig+0x11c>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d013      	beq.n	8006a42 <TIM_OC1_SetConfig+0xd2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8006a90 <TIM_OC1_SetConfig+0x120>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d00f      	beq.n	8006a42 <TIM_OC1_SetConfig+0xd2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a1b      	ldr	r2, [pc, #108]	@ (8006a94 <TIM_OC1_SetConfig+0x124>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d00b      	beq.n	8006a42 <TIM_OC1_SetConfig+0xd2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8006a98 <TIM_OC1_SetConfig+0x128>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d007      	beq.n	8006a42 <TIM_OC1_SetConfig+0xd2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a19      	ldr	r2, [pc, #100]	@ (8006a9c <TIM_OC1_SetConfig+0x12c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d003      	beq.n	8006a42 <TIM_OC1_SetConfig+0xd2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a18      	ldr	r2, [pc, #96]	@ (8006aa0 <TIM_OC1_SetConfig+0x130>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d111      	bne.n	8006a66 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	621a      	str	r2, [r3, #32]
}
 8006a80:	bf00      	nop
 8006a82:	371c      	adds	r7, #28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	40012c00 	.word	0x40012c00
 8006a90:	40013400 	.word	0x40013400
 8006a94:	40014000 	.word	0x40014000
 8006a98:	40014400 	.word	0x40014400
 8006a9c:	40014800 	.word	0x40014800
 8006aa0:	40015000 	.word	0x40015000

08006aa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	f023 0210 	bic.w	r2, r3, #16
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f023 0320 	bic.w	r3, r3, #32
 8006af2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	011b      	lsls	r3, r3, #4
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a2c      	ldr	r2, [pc, #176]	@ (8006bb4 <TIM_OC2_SetConfig+0x110>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d007      	beq.n	8006b18 <TIM_OC2_SetConfig+0x74>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a2b      	ldr	r2, [pc, #172]	@ (8006bb8 <TIM_OC2_SetConfig+0x114>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d003      	beq.n	8006b18 <TIM_OC2_SetConfig+0x74>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a2a      	ldr	r2, [pc, #168]	@ (8006bbc <TIM_OC2_SetConfig+0x118>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d10d      	bne.n	8006b34 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	011b      	lsls	r3, r3, #4
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a1f      	ldr	r2, [pc, #124]	@ (8006bb4 <TIM_OC2_SetConfig+0x110>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d013      	beq.n	8006b64 <TIM_OC2_SetConfig+0xc0>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8006bb8 <TIM_OC2_SetConfig+0x114>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d00f      	beq.n	8006b64 <TIM_OC2_SetConfig+0xc0>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a1e      	ldr	r2, [pc, #120]	@ (8006bc0 <TIM_OC2_SetConfig+0x11c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00b      	beq.n	8006b64 <TIM_OC2_SetConfig+0xc0>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8006bc4 <TIM_OC2_SetConfig+0x120>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d007      	beq.n	8006b64 <TIM_OC2_SetConfig+0xc0>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a1c      	ldr	r2, [pc, #112]	@ (8006bc8 <TIM_OC2_SetConfig+0x124>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d003      	beq.n	8006b64 <TIM_OC2_SetConfig+0xc0>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a17      	ldr	r2, [pc, #92]	@ (8006bbc <TIM_OC2_SetConfig+0x118>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d113      	bne.n	8006b8c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	621a      	str	r2, [r3, #32]
}
 8006ba6:	bf00      	nop
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	40012c00 	.word	0x40012c00
 8006bb8:	40013400 	.word	0x40013400
 8006bbc:	40015000 	.word	0x40015000
 8006bc0:	40014000 	.word	0x40014000
 8006bc4:	40014400 	.word	0x40014400
 8006bc8:	40014800 	.word	0x40014800

08006bcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 0303 	bic.w	r3, r3, #3
 8006c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	021b      	lsls	r3, r3, #8
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a2b      	ldr	r2, [pc, #172]	@ (8006cd8 <TIM_OC3_SetConfig+0x10c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d007      	beq.n	8006c3e <TIM_OC3_SetConfig+0x72>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a2a      	ldr	r2, [pc, #168]	@ (8006cdc <TIM_OC3_SetConfig+0x110>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d003      	beq.n	8006c3e <TIM_OC3_SetConfig+0x72>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a29      	ldr	r2, [pc, #164]	@ (8006ce0 <TIM_OC3_SetConfig+0x114>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d10d      	bne.n	8006c5a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	021b      	lsls	r3, r3, #8
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8006cd8 <TIM_OC3_SetConfig+0x10c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d013      	beq.n	8006c8a <TIM_OC3_SetConfig+0xbe>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a1d      	ldr	r2, [pc, #116]	@ (8006cdc <TIM_OC3_SetConfig+0x110>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d00f      	beq.n	8006c8a <TIM_OC3_SetConfig+0xbe>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ce4 <TIM_OC3_SetConfig+0x118>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00b      	beq.n	8006c8a <TIM_OC3_SetConfig+0xbe>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a1c      	ldr	r2, [pc, #112]	@ (8006ce8 <TIM_OC3_SetConfig+0x11c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d007      	beq.n	8006c8a <TIM_OC3_SetConfig+0xbe>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8006cec <TIM_OC3_SetConfig+0x120>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d003      	beq.n	8006c8a <TIM_OC3_SetConfig+0xbe>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a16      	ldr	r2, [pc, #88]	@ (8006ce0 <TIM_OC3_SetConfig+0x114>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d113      	bne.n	8006cb2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	011b      	lsls	r3, r3, #4
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	011b      	lsls	r3, r3, #4
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	621a      	str	r2, [r3, #32]
}
 8006ccc:	bf00      	nop
 8006cce:	371c      	adds	r7, #28
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	40012c00 	.word	0x40012c00
 8006cdc:	40013400 	.word	0x40013400
 8006ce0:	40015000 	.word	0x40015000
 8006ce4:	40014000 	.word	0x40014000
 8006ce8:	40014400 	.word	0x40014400
 8006cec:	40014800 	.word	0x40014800

08006cf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	021b      	lsls	r3, r3, #8
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	031b      	lsls	r3, r3, #12
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a2c      	ldr	r2, [pc, #176]	@ (8006e00 <TIM_OC4_SetConfig+0x110>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d007      	beq.n	8006d64 <TIM_OC4_SetConfig+0x74>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a2b      	ldr	r2, [pc, #172]	@ (8006e04 <TIM_OC4_SetConfig+0x114>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d003      	beq.n	8006d64 <TIM_OC4_SetConfig+0x74>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8006e08 <TIM_OC4_SetConfig+0x118>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d10d      	bne.n	8006d80 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	031b      	lsls	r3, r3, #12
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a1f      	ldr	r2, [pc, #124]	@ (8006e00 <TIM_OC4_SetConfig+0x110>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d013      	beq.n	8006db0 <TIM_OC4_SetConfig+0xc0>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8006e04 <TIM_OC4_SetConfig+0x114>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d00f      	beq.n	8006db0 <TIM_OC4_SetConfig+0xc0>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a1e      	ldr	r2, [pc, #120]	@ (8006e0c <TIM_OC4_SetConfig+0x11c>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d00b      	beq.n	8006db0 <TIM_OC4_SetConfig+0xc0>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8006e10 <TIM_OC4_SetConfig+0x120>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d007      	beq.n	8006db0 <TIM_OC4_SetConfig+0xc0>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a1c      	ldr	r2, [pc, #112]	@ (8006e14 <TIM_OC4_SetConfig+0x124>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d003      	beq.n	8006db0 <TIM_OC4_SetConfig+0xc0>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a17      	ldr	r2, [pc, #92]	@ (8006e08 <TIM_OC4_SetConfig+0x118>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d113      	bne.n	8006dd8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006db6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006dbe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	019b      	lsls	r3, r3, #6
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	019b      	lsls	r3, r3, #6
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	621a      	str	r2, [r3, #32]
}
 8006df2:	bf00      	nop
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	40012c00 	.word	0x40012c00
 8006e04:	40013400 	.word	0x40013400
 8006e08:	40015000 	.word	0x40015000
 8006e0c:	40014000 	.word	0x40014000
 8006e10:	40014400 	.word	0x40014400
 8006e14:	40014800 	.word	0x40014800

08006e18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006e5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	041b      	lsls	r3, r3, #16
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a19      	ldr	r2, [pc, #100]	@ (8006ed4 <TIM_OC5_SetConfig+0xbc>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d013      	beq.n	8006e9a <TIM_OC5_SetConfig+0x82>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a18      	ldr	r2, [pc, #96]	@ (8006ed8 <TIM_OC5_SetConfig+0xc0>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d00f      	beq.n	8006e9a <TIM_OC5_SetConfig+0x82>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a17      	ldr	r2, [pc, #92]	@ (8006edc <TIM_OC5_SetConfig+0xc4>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d00b      	beq.n	8006e9a <TIM_OC5_SetConfig+0x82>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a16      	ldr	r2, [pc, #88]	@ (8006ee0 <TIM_OC5_SetConfig+0xc8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d007      	beq.n	8006e9a <TIM_OC5_SetConfig+0x82>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a15      	ldr	r2, [pc, #84]	@ (8006ee4 <TIM_OC5_SetConfig+0xcc>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d003      	beq.n	8006e9a <TIM_OC5_SetConfig+0x82>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a14      	ldr	r2, [pc, #80]	@ (8006ee8 <TIM_OC5_SetConfig+0xd0>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d109      	bne.n	8006eae <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ea0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	021b      	lsls	r3, r3, #8
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	621a      	str	r2, [r3, #32]
}
 8006ec8:	bf00      	nop
 8006eca:	371c      	adds	r7, #28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	40012c00 	.word	0x40012c00
 8006ed8:	40013400 	.word	0x40013400
 8006edc:	40014000 	.word	0x40014000
 8006ee0:	40014400 	.word	0x40014400
 8006ee4:	40014800 	.word	0x40014800
 8006ee8:	40015000 	.word	0x40015000

08006eec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	021b      	lsls	r3, r3, #8
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	051b      	lsls	r3, r3, #20
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a1a      	ldr	r2, [pc, #104]	@ (8006fac <TIM_OC6_SetConfig+0xc0>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d013      	beq.n	8006f70 <TIM_OC6_SetConfig+0x84>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a19      	ldr	r2, [pc, #100]	@ (8006fb0 <TIM_OC6_SetConfig+0xc4>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00f      	beq.n	8006f70 <TIM_OC6_SetConfig+0x84>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a18      	ldr	r2, [pc, #96]	@ (8006fb4 <TIM_OC6_SetConfig+0xc8>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d00b      	beq.n	8006f70 <TIM_OC6_SetConfig+0x84>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a17      	ldr	r2, [pc, #92]	@ (8006fb8 <TIM_OC6_SetConfig+0xcc>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d007      	beq.n	8006f70 <TIM_OC6_SetConfig+0x84>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a16      	ldr	r2, [pc, #88]	@ (8006fbc <TIM_OC6_SetConfig+0xd0>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d003      	beq.n	8006f70 <TIM_OC6_SetConfig+0x84>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a15      	ldr	r2, [pc, #84]	@ (8006fc0 <TIM_OC6_SetConfig+0xd4>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d109      	bne.n	8006f84 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	029b      	lsls	r3, r3, #10
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	621a      	str	r2, [r3, #32]
}
 8006f9e:	bf00      	nop
 8006fa0:	371c      	adds	r7, #28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40012c00 	.word	0x40012c00
 8006fb0:	40013400 	.word	0x40013400
 8006fb4:	40014000 	.word	0x40014000
 8006fb8:	40014400 	.word	0x40014400
 8006fbc:	40014800 	.word	0x40014800
 8006fc0:	40015000 	.word	0x40015000

08006fc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	f023 0201 	bic.w	r2, r3, #1
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	011b      	lsls	r3, r3, #4
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f023 030a 	bic.w	r3, r3, #10
 8007000:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	4313      	orrs	r3, r2
 8007008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	621a      	str	r2, [r3, #32]
}
 8007016:	bf00      	nop
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007022:	b480      	push	{r7}
 8007024:	b087      	sub	sp, #28
 8007026:	af00      	add	r7, sp, #0
 8007028:	60f8      	str	r0, [r7, #12]
 800702a:	60b9      	str	r1, [r7, #8]
 800702c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	f023 0210 	bic.w	r2, r3, #16
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800704c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	031b      	lsls	r3, r3, #12
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	4313      	orrs	r3, r2
 8007056:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800705e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	011b      	lsls	r3, r3, #4
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	4313      	orrs	r3, r2
 8007068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	621a      	str	r2, [r3, #32]
}
 8007076:	bf00      	nop
 8007078:	371c      	adds	r7, #28
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007082:	b480      	push	{r7}
 8007084:	b085      	sub	sp, #20
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007098:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800709c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	f043 0307 	orr.w	r3, r3, #7
 80070a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	609a      	str	r2, [r3, #8]
}
 80070b0:	bf00      	nop
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
 80070c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	021a      	lsls	r2, r3, #8
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	431a      	orrs	r2, r3
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	609a      	str	r2, [r3, #8]
}
 80070f0:	bf00      	nop
 80070f2:	371c      	adds	r7, #28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	f003 031f 	and.w	r3, r3, #31
 800710e:	2201      	movs	r2, #1
 8007110:	fa02 f303 	lsl.w	r3, r2, r3
 8007114:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6a1a      	ldr	r2, [r3, #32]
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	43db      	mvns	r3, r3
 800711e:	401a      	ands	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6a1a      	ldr	r2, [r3, #32]
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f003 031f 	and.w	r3, r3, #31
 800712e:	6879      	ldr	r1, [r7, #4]
 8007130:	fa01 f303 	lsl.w	r3, r1, r3
 8007134:	431a      	orrs	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	621a      	str	r2, [r3, #32]
}
 800713a:	bf00      	nop
 800713c:	371c      	adds	r7, #28
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
	...

08007148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007158:	2b01      	cmp	r3, #1
 800715a:	d101      	bne.n	8007160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800715c:	2302      	movs	r3, #2
 800715e:	e074      	b.n	800724a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2202      	movs	r2, #2
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a34      	ldr	r2, [pc, #208]	@ (8007258 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d009      	beq.n	800719e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a33      	ldr	r2, [pc, #204]	@ (800725c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d004      	beq.n	800719e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a31      	ldr	r2, [pc, #196]	@ (8007260 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d108      	bne.n	80071b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80071a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80071b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a21      	ldr	r2, [pc, #132]	@ (8007258 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d022      	beq.n	800721e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071e0:	d01d      	beq.n	800721e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a1f      	ldr	r2, [pc, #124]	@ (8007264 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d018      	beq.n	800721e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007268 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d013      	beq.n	800721e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a1c      	ldr	r2, [pc, #112]	@ (800726c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d00e      	beq.n	800721e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a15      	ldr	r2, [pc, #84]	@ (800725c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d009      	beq.n	800721e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a18      	ldr	r2, [pc, #96]	@ (8007270 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d004      	beq.n	800721e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a11      	ldr	r2, [pc, #68]	@ (8007260 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d10c      	bne.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007224:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	4313      	orrs	r3, r2
 800722e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	40012c00 	.word	0x40012c00
 800725c:	40013400 	.word	0x40013400
 8007260:	40015000 	.word	0x40015000
 8007264:	40000400 	.word	0x40000400
 8007268:	40000800 	.word	0x40000800
 800726c:	40000c00 	.word	0x40000c00
 8007270:	40014000 	.word	0x40014000

08007274 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e042      	b.n	800730c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800728c:	2b00      	cmp	r3, #0
 800728e:	d106      	bne.n	800729e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7fd f8fb 	bl	8004494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2224      	movs	r2, #36	@ 0x24
 80072a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 0201 	bic.w	r2, r2, #1
 80072b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d002      	beq.n	80072c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fc7a 	bl	8007bb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f97b 	bl	80075c0 <UART_SetConfig>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d101      	bne.n	80072d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e01b      	b.n	800730c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685a      	ldr	r2, [r3, #4]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689a      	ldr	r2, [r3, #8]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f042 0201 	orr.w	r2, r2, #1
 8007302:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fcf9 	bl	8007cfc <UART_CheckIdleState>
 800730a:	4603      	mov	r3, r0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b08a      	sub	sp, #40	@ 0x28
 8007318:	af02      	add	r7, sp, #8
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	603b      	str	r3, [r7, #0]
 8007320:	4613      	mov	r3, r2
 8007322:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800732a:	2b20      	cmp	r3, #32
 800732c:	d17b      	bne.n	8007426 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <HAL_UART_Transmit+0x26>
 8007334:	88fb      	ldrh	r3, [r7, #6]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e074      	b.n	8007428 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2221      	movs	r2, #33	@ 0x21
 800734a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800734e:	f7fd f9c7 	bl	80046e0 <HAL_GetTick>
 8007352:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	88fa      	ldrh	r2, [r7, #6]
 8007358:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	88fa      	ldrh	r2, [r7, #6]
 8007360:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800736c:	d108      	bne.n	8007380 <HAL_UART_Transmit+0x6c>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d104      	bne.n	8007380 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007376:	2300      	movs	r3, #0
 8007378:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	61bb      	str	r3, [r7, #24]
 800737e:	e003      	b.n	8007388 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007384:	2300      	movs	r3, #0
 8007386:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007388:	e030      	b.n	80073ec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	2200      	movs	r2, #0
 8007392:	2180      	movs	r1, #128	@ 0x80
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 fd5b 	bl	8007e50 <UART_WaitOnFlagUntilTimeout>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d005      	beq.n	80073ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e03d      	b.n	8007428 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10b      	bne.n	80073ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	3302      	adds	r3, #2
 80073c6:	61bb      	str	r3, [r7, #24]
 80073c8:	e007      	b.n	80073da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	781a      	ldrb	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	3301      	adds	r3, #1
 80073d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1c8      	bne.n	800738a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2200      	movs	r2, #0
 8007400:	2140      	movs	r1, #64	@ 0x40
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 fd24 	bl	8007e50 <UART_WaitOnFlagUntilTimeout>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d005      	beq.n	800741a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2220      	movs	r2, #32
 8007412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e006      	b.n	8007428 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2220      	movs	r2, #32
 800741e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	e000      	b.n	8007428 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007426:	2302      	movs	r3, #2
  }
}
 8007428:	4618      	mov	r0, r3
 800742a:	3720      	adds	r7, #32
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b08a      	sub	sp, #40	@ 0x28
 8007434:	af02      	add	r7, sp, #8
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	603b      	str	r3, [r7, #0]
 800743c:	4613      	mov	r3, r2
 800743e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007446:	2b20      	cmp	r3, #32
 8007448:	f040 80b5 	bne.w	80075b6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <HAL_UART_Receive+0x28>
 8007452:	88fb      	ldrh	r3, [r7, #6]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e0ad      	b.n	80075b8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2222      	movs	r2, #34	@ 0x22
 8007468:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007472:	f7fd f935 	bl	80046e0 <HAL_GetTick>
 8007476:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	88fa      	ldrh	r2, [r7, #6]
 800747c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	88fa      	ldrh	r2, [r7, #6]
 8007484:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007490:	d10e      	bne.n	80074b0 <HAL_UART_Receive+0x80>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d105      	bne.n	80074a6 <HAL_UART_Receive+0x76>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80074a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074a4:	e02d      	b.n	8007502 <HAL_UART_Receive+0xd2>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	22ff      	movs	r2, #255	@ 0xff
 80074aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074ae:	e028      	b.n	8007502 <HAL_UART_Receive+0xd2>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10d      	bne.n	80074d4 <HAL_UART_Receive+0xa4>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d104      	bne.n	80074ca <HAL_UART_Receive+0x9a>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	22ff      	movs	r2, #255	@ 0xff
 80074c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074c8:	e01b      	b.n	8007502 <HAL_UART_Receive+0xd2>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	227f      	movs	r2, #127	@ 0x7f
 80074ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074d2:	e016      	b.n	8007502 <HAL_UART_Receive+0xd2>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074dc:	d10d      	bne.n	80074fa <HAL_UART_Receive+0xca>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d104      	bne.n	80074f0 <HAL_UART_Receive+0xc0>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	227f      	movs	r2, #127	@ 0x7f
 80074ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074ee:	e008      	b.n	8007502 <HAL_UART_Receive+0xd2>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	223f      	movs	r2, #63	@ 0x3f
 80074f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074f8:	e003      	b.n	8007502 <HAL_UART_Receive+0xd2>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007508:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007512:	d108      	bne.n	8007526 <HAL_UART_Receive+0xf6>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d104      	bne.n	8007526 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800751c:	2300      	movs	r3, #0
 800751e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	61bb      	str	r3, [r7, #24]
 8007524:	e003      	b.n	800752e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800752a:	2300      	movs	r3, #0
 800752c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800752e:	e036      	b.n	800759e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	2200      	movs	r2, #0
 8007538:	2120      	movs	r1, #32
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 fc88 	bl	8007e50 <UART_WaitOnFlagUntilTimeout>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d005      	beq.n	8007552 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2220      	movs	r2, #32
 800754a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e032      	b.n	80075b8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10c      	bne.n	8007572 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800755e:	b29a      	uxth	r2, r3
 8007560:	8a7b      	ldrh	r3, [r7, #18]
 8007562:	4013      	ands	r3, r2
 8007564:	b29a      	uxth	r2, r3
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	3302      	adds	r3, #2
 800756e:	61bb      	str	r3, [r7, #24]
 8007570:	e00c      	b.n	800758c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007578:	b2da      	uxtb	r2, r3
 800757a:	8a7b      	ldrh	r3, [r7, #18]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	4013      	ands	r3, r2
 8007580:	b2da      	uxtb	r2, r3
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	3301      	adds	r3, #1
 800758a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007592:	b29b      	uxth	r3, r3
 8007594:	3b01      	subs	r3, #1
 8007596:	b29a      	uxth	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1c2      	bne.n	8007530 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2220      	movs	r2, #32
 80075ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	e000      	b.n	80075b8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80075b6:	2302      	movs	r3, #2
  }
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3720      	adds	r7, #32
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075c4:	b08c      	sub	sp, #48	@ 0x30
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	431a      	orrs	r2, r3
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	431a      	orrs	r2, r3
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	4baa      	ldr	r3, [pc, #680]	@ (8007898 <UART_SetConfig+0x2d8>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	6812      	ldr	r2, [r2, #0]
 80075f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075f8:	430b      	orrs	r3, r1
 80075fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a9f      	ldr	r2, [pc, #636]	@ (800789c <UART_SetConfig+0x2dc>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d004      	beq.n	800762c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007628:	4313      	orrs	r3, r2
 800762a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007636:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	6812      	ldr	r2, [r2, #0]
 800763e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007640:	430b      	orrs	r3, r1
 8007642:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800764a:	f023 010f 	bic.w	r1, r3, #15
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a90      	ldr	r2, [pc, #576]	@ (80078a0 <UART_SetConfig+0x2e0>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d125      	bne.n	80076b0 <UART_SetConfig+0xf0>
 8007664:	4b8f      	ldr	r3, [pc, #572]	@ (80078a4 <UART_SetConfig+0x2e4>)
 8007666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800766a:	f003 0303 	and.w	r3, r3, #3
 800766e:	2b03      	cmp	r3, #3
 8007670:	d81a      	bhi.n	80076a8 <UART_SetConfig+0xe8>
 8007672:	a201      	add	r2, pc, #4	@ (adr r2, 8007678 <UART_SetConfig+0xb8>)
 8007674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007678:	08007689 	.word	0x08007689
 800767c:	08007699 	.word	0x08007699
 8007680:	08007691 	.word	0x08007691
 8007684:	080076a1 	.word	0x080076a1
 8007688:	2301      	movs	r3, #1
 800768a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800768e:	e116      	b.n	80078be <UART_SetConfig+0x2fe>
 8007690:	2302      	movs	r3, #2
 8007692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007696:	e112      	b.n	80078be <UART_SetConfig+0x2fe>
 8007698:	2304      	movs	r3, #4
 800769a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800769e:	e10e      	b.n	80078be <UART_SetConfig+0x2fe>
 80076a0:	2308      	movs	r3, #8
 80076a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076a6:	e10a      	b.n	80078be <UART_SetConfig+0x2fe>
 80076a8:	2310      	movs	r3, #16
 80076aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ae:	e106      	b.n	80078be <UART_SetConfig+0x2fe>
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a7c      	ldr	r2, [pc, #496]	@ (80078a8 <UART_SetConfig+0x2e8>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d138      	bne.n	800772c <UART_SetConfig+0x16c>
 80076ba:	4b7a      	ldr	r3, [pc, #488]	@ (80078a4 <UART_SetConfig+0x2e4>)
 80076bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076c0:	f003 030c 	and.w	r3, r3, #12
 80076c4:	2b0c      	cmp	r3, #12
 80076c6:	d82d      	bhi.n	8007724 <UART_SetConfig+0x164>
 80076c8:	a201      	add	r2, pc, #4	@ (adr r2, 80076d0 <UART_SetConfig+0x110>)
 80076ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ce:	bf00      	nop
 80076d0:	08007705 	.word	0x08007705
 80076d4:	08007725 	.word	0x08007725
 80076d8:	08007725 	.word	0x08007725
 80076dc:	08007725 	.word	0x08007725
 80076e0:	08007715 	.word	0x08007715
 80076e4:	08007725 	.word	0x08007725
 80076e8:	08007725 	.word	0x08007725
 80076ec:	08007725 	.word	0x08007725
 80076f0:	0800770d 	.word	0x0800770d
 80076f4:	08007725 	.word	0x08007725
 80076f8:	08007725 	.word	0x08007725
 80076fc:	08007725 	.word	0x08007725
 8007700:	0800771d 	.word	0x0800771d
 8007704:	2300      	movs	r3, #0
 8007706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800770a:	e0d8      	b.n	80078be <UART_SetConfig+0x2fe>
 800770c:	2302      	movs	r3, #2
 800770e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007712:	e0d4      	b.n	80078be <UART_SetConfig+0x2fe>
 8007714:	2304      	movs	r3, #4
 8007716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800771a:	e0d0      	b.n	80078be <UART_SetConfig+0x2fe>
 800771c:	2308      	movs	r3, #8
 800771e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007722:	e0cc      	b.n	80078be <UART_SetConfig+0x2fe>
 8007724:	2310      	movs	r3, #16
 8007726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800772a:	e0c8      	b.n	80078be <UART_SetConfig+0x2fe>
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a5e      	ldr	r2, [pc, #376]	@ (80078ac <UART_SetConfig+0x2ec>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d125      	bne.n	8007782 <UART_SetConfig+0x1c2>
 8007736:	4b5b      	ldr	r3, [pc, #364]	@ (80078a4 <UART_SetConfig+0x2e4>)
 8007738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800773c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007740:	2b30      	cmp	r3, #48	@ 0x30
 8007742:	d016      	beq.n	8007772 <UART_SetConfig+0x1b2>
 8007744:	2b30      	cmp	r3, #48	@ 0x30
 8007746:	d818      	bhi.n	800777a <UART_SetConfig+0x1ba>
 8007748:	2b20      	cmp	r3, #32
 800774a:	d00a      	beq.n	8007762 <UART_SetConfig+0x1a2>
 800774c:	2b20      	cmp	r3, #32
 800774e:	d814      	bhi.n	800777a <UART_SetConfig+0x1ba>
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <UART_SetConfig+0x19a>
 8007754:	2b10      	cmp	r3, #16
 8007756:	d008      	beq.n	800776a <UART_SetConfig+0x1aa>
 8007758:	e00f      	b.n	800777a <UART_SetConfig+0x1ba>
 800775a:	2300      	movs	r3, #0
 800775c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007760:	e0ad      	b.n	80078be <UART_SetConfig+0x2fe>
 8007762:	2302      	movs	r3, #2
 8007764:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007768:	e0a9      	b.n	80078be <UART_SetConfig+0x2fe>
 800776a:	2304      	movs	r3, #4
 800776c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007770:	e0a5      	b.n	80078be <UART_SetConfig+0x2fe>
 8007772:	2308      	movs	r3, #8
 8007774:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007778:	e0a1      	b.n	80078be <UART_SetConfig+0x2fe>
 800777a:	2310      	movs	r3, #16
 800777c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007780:	e09d      	b.n	80078be <UART_SetConfig+0x2fe>
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a4a      	ldr	r2, [pc, #296]	@ (80078b0 <UART_SetConfig+0x2f0>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d125      	bne.n	80077d8 <UART_SetConfig+0x218>
 800778c:	4b45      	ldr	r3, [pc, #276]	@ (80078a4 <UART_SetConfig+0x2e4>)
 800778e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007792:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007796:	2bc0      	cmp	r3, #192	@ 0xc0
 8007798:	d016      	beq.n	80077c8 <UART_SetConfig+0x208>
 800779a:	2bc0      	cmp	r3, #192	@ 0xc0
 800779c:	d818      	bhi.n	80077d0 <UART_SetConfig+0x210>
 800779e:	2b80      	cmp	r3, #128	@ 0x80
 80077a0:	d00a      	beq.n	80077b8 <UART_SetConfig+0x1f8>
 80077a2:	2b80      	cmp	r3, #128	@ 0x80
 80077a4:	d814      	bhi.n	80077d0 <UART_SetConfig+0x210>
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d002      	beq.n	80077b0 <UART_SetConfig+0x1f0>
 80077aa:	2b40      	cmp	r3, #64	@ 0x40
 80077ac:	d008      	beq.n	80077c0 <UART_SetConfig+0x200>
 80077ae:	e00f      	b.n	80077d0 <UART_SetConfig+0x210>
 80077b0:	2300      	movs	r3, #0
 80077b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077b6:	e082      	b.n	80078be <UART_SetConfig+0x2fe>
 80077b8:	2302      	movs	r3, #2
 80077ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077be:	e07e      	b.n	80078be <UART_SetConfig+0x2fe>
 80077c0:	2304      	movs	r3, #4
 80077c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077c6:	e07a      	b.n	80078be <UART_SetConfig+0x2fe>
 80077c8:	2308      	movs	r3, #8
 80077ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ce:	e076      	b.n	80078be <UART_SetConfig+0x2fe>
 80077d0:	2310      	movs	r3, #16
 80077d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077d6:	e072      	b.n	80078be <UART_SetConfig+0x2fe>
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a35      	ldr	r2, [pc, #212]	@ (80078b4 <UART_SetConfig+0x2f4>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d12a      	bne.n	8007838 <UART_SetConfig+0x278>
 80077e2:	4b30      	ldr	r3, [pc, #192]	@ (80078a4 <UART_SetConfig+0x2e4>)
 80077e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077f0:	d01a      	beq.n	8007828 <UART_SetConfig+0x268>
 80077f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077f6:	d81b      	bhi.n	8007830 <UART_SetConfig+0x270>
 80077f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077fc:	d00c      	beq.n	8007818 <UART_SetConfig+0x258>
 80077fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007802:	d815      	bhi.n	8007830 <UART_SetConfig+0x270>
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <UART_SetConfig+0x250>
 8007808:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800780c:	d008      	beq.n	8007820 <UART_SetConfig+0x260>
 800780e:	e00f      	b.n	8007830 <UART_SetConfig+0x270>
 8007810:	2300      	movs	r3, #0
 8007812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007816:	e052      	b.n	80078be <UART_SetConfig+0x2fe>
 8007818:	2302      	movs	r3, #2
 800781a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800781e:	e04e      	b.n	80078be <UART_SetConfig+0x2fe>
 8007820:	2304      	movs	r3, #4
 8007822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007826:	e04a      	b.n	80078be <UART_SetConfig+0x2fe>
 8007828:	2308      	movs	r3, #8
 800782a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800782e:	e046      	b.n	80078be <UART_SetConfig+0x2fe>
 8007830:	2310      	movs	r3, #16
 8007832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007836:	e042      	b.n	80078be <UART_SetConfig+0x2fe>
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a17      	ldr	r2, [pc, #92]	@ (800789c <UART_SetConfig+0x2dc>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d13a      	bne.n	80078b8 <UART_SetConfig+0x2f8>
 8007842:	4b18      	ldr	r3, [pc, #96]	@ (80078a4 <UART_SetConfig+0x2e4>)
 8007844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007848:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800784c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007850:	d01a      	beq.n	8007888 <UART_SetConfig+0x2c8>
 8007852:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007856:	d81b      	bhi.n	8007890 <UART_SetConfig+0x2d0>
 8007858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800785c:	d00c      	beq.n	8007878 <UART_SetConfig+0x2b8>
 800785e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007862:	d815      	bhi.n	8007890 <UART_SetConfig+0x2d0>
 8007864:	2b00      	cmp	r3, #0
 8007866:	d003      	beq.n	8007870 <UART_SetConfig+0x2b0>
 8007868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800786c:	d008      	beq.n	8007880 <UART_SetConfig+0x2c0>
 800786e:	e00f      	b.n	8007890 <UART_SetConfig+0x2d0>
 8007870:	2300      	movs	r3, #0
 8007872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007876:	e022      	b.n	80078be <UART_SetConfig+0x2fe>
 8007878:	2302      	movs	r3, #2
 800787a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800787e:	e01e      	b.n	80078be <UART_SetConfig+0x2fe>
 8007880:	2304      	movs	r3, #4
 8007882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007886:	e01a      	b.n	80078be <UART_SetConfig+0x2fe>
 8007888:	2308      	movs	r3, #8
 800788a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800788e:	e016      	b.n	80078be <UART_SetConfig+0x2fe>
 8007890:	2310      	movs	r3, #16
 8007892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007896:	e012      	b.n	80078be <UART_SetConfig+0x2fe>
 8007898:	cfff69f3 	.word	0xcfff69f3
 800789c:	40008000 	.word	0x40008000
 80078a0:	40013800 	.word	0x40013800
 80078a4:	40021000 	.word	0x40021000
 80078a8:	40004400 	.word	0x40004400
 80078ac:	40004800 	.word	0x40004800
 80078b0:	40004c00 	.word	0x40004c00
 80078b4:	40005000 	.word	0x40005000
 80078b8:	2310      	movs	r3, #16
 80078ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4aae      	ldr	r2, [pc, #696]	@ (8007b7c <UART_SetConfig+0x5bc>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	f040 8097 	bne.w	80079f8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80078ce:	2b08      	cmp	r3, #8
 80078d0:	d823      	bhi.n	800791a <UART_SetConfig+0x35a>
 80078d2:	a201      	add	r2, pc, #4	@ (adr r2, 80078d8 <UART_SetConfig+0x318>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	080078fd 	.word	0x080078fd
 80078dc:	0800791b 	.word	0x0800791b
 80078e0:	08007905 	.word	0x08007905
 80078e4:	0800791b 	.word	0x0800791b
 80078e8:	0800790b 	.word	0x0800790b
 80078ec:	0800791b 	.word	0x0800791b
 80078f0:	0800791b 	.word	0x0800791b
 80078f4:	0800791b 	.word	0x0800791b
 80078f8:	08007913 	.word	0x08007913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078fc:	f7fd ff0c 	bl	8005718 <HAL_RCC_GetPCLK1Freq>
 8007900:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007902:	e010      	b.n	8007926 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007904:	4b9e      	ldr	r3, [pc, #632]	@ (8007b80 <UART_SetConfig+0x5c0>)
 8007906:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007908:	e00d      	b.n	8007926 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800790a:	f7fd fe97 	bl	800563c <HAL_RCC_GetSysClockFreq>
 800790e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007910:	e009      	b.n	8007926 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007912:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007916:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007918:	e005      	b.n	8007926 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800791a:	2300      	movs	r3, #0
 800791c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007924:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 8130 	beq.w	8007b8e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007932:	4a94      	ldr	r2, [pc, #592]	@ (8007b84 <UART_SetConfig+0x5c4>)
 8007934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007938:	461a      	mov	r2, r3
 800793a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007940:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	4613      	mov	r3, r2
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	4413      	add	r3, r2
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	429a      	cmp	r2, r3
 8007950:	d305      	bcc.n	800795e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	429a      	cmp	r2, r3
 800795c:	d903      	bls.n	8007966 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007964:	e113      	b.n	8007b8e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007968:	2200      	movs	r2, #0
 800796a:	60bb      	str	r3, [r7, #8]
 800796c:	60fa      	str	r2, [r7, #12]
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007972:	4a84      	ldr	r2, [pc, #528]	@ (8007b84 <UART_SetConfig+0x5c4>)
 8007974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007978:	b29b      	uxth	r3, r3
 800797a:	2200      	movs	r2, #0
 800797c:	603b      	str	r3, [r7, #0]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007984:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007988:	f7f9 f9a6 	bl	8000cd8 <__aeabi_uldivmod>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	4610      	mov	r0, r2
 8007992:	4619      	mov	r1, r3
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	f04f 0300 	mov.w	r3, #0
 800799c:	020b      	lsls	r3, r1, #8
 800799e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80079a2:	0202      	lsls	r2, r0, #8
 80079a4:	6979      	ldr	r1, [r7, #20]
 80079a6:	6849      	ldr	r1, [r1, #4]
 80079a8:	0849      	lsrs	r1, r1, #1
 80079aa:	2000      	movs	r0, #0
 80079ac:	460c      	mov	r4, r1
 80079ae:	4605      	mov	r5, r0
 80079b0:	eb12 0804 	adds.w	r8, r2, r4
 80079b4:	eb43 0905 	adc.w	r9, r3, r5
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	469a      	mov	sl, r3
 80079c0:	4693      	mov	fp, r2
 80079c2:	4652      	mov	r2, sl
 80079c4:	465b      	mov	r3, fp
 80079c6:	4640      	mov	r0, r8
 80079c8:	4649      	mov	r1, r9
 80079ca:	f7f9 f985 	bl	8000cd8 <__aeabi_uldivmod>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	4613      	mov	r3, r2
 80079d4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079dc:	d308      	bcc.n	80079f0 <UART_SetConfig+0x430>
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079e4:	d204      	bcs.n	80079f0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6a3a      	ldr	r2, [r7, #32]
 80079ec:	60da      	str	r2, [r3, #12]
 80079ee:	e0ce      	b.n	8007b8e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80079f6:	e0ca      	b.n	8007b8e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a00:	d166      	bne.n	8007ad0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007a02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a06:	2b08      	cmp	r3, #8
 8007a08:	d827      	bhi.n	8007a5a <UART_SetConfig+0x49a>
 8007a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a10 <UART_SetConfig+0x450>)
 8007a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a10:	08007a35 	.word	0x08007a35
 8007a14:	08007a3d 	.word	0x08007a3d
 8007a18:	08007a45 	.word	0x08007a45
 8007a1c:	08007a5b 	.word	0x08007a5b
 8007a20:	08007a4b 	.word	0x08007a4b
 8007a24:	08007a5b 	.word	0x08007a5b
 8007a28:	08007a5b 	.word	0x08007a5b
 8007a2c:	08007a5b 	.word	0x08007a5b
 8007a30:	08007a53 	.word	0x08007a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a34:	f7fd fe70 	bl	8005718 <HAL_RCC_GetPCLK1Freq>
 8007a38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a3a:	e014      	b.n	8007a66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a3c:	f7fd fe82 	bl	8005744 <HAL_RCC_GetPCLK2Freq>
 8007a40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a42:	e010      	b.n	8007a66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a44:	4b4e      	ldr	r3, [pc, #312]	@ (8007b80 <UART_SetConfig+0x5c0>)
 8007a46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a48:	e00d      	b.n	8007a66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a4a:	f7fd fdf7 	bl	800563c <HAL_RCC_GetSysClockFreq>
 8007a4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a50:	e009      	b.n	8007a66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a58:	e005      	b.n	8007a66 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 8090 	beq.w	8007b8e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a72:	4a44      	ldr	r2, [pc, #272]	@ (8007b84 <UART_SetConfig+0x5c4>)
 8007a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a80:	005a      	lsls	r2, r3, #1
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	085b      	lsrs	r3, r3, #1
 8007a88:	441a      	add	r2, r3
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	2b0f      	cmp	r3, #15
 8007a98:	d916      	bls.n	8007ac8 <UART_SetConfig+0x508>
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007aa0:	d212      	bcs.n	8007ac8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	f023 030f 	bic.w	r3, r3, #15
 8007aaa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	085b      	lsrs	r3, r3, #1
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	8bfb      	ldrh	r3, [r7, #30]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	8bfa      	ldrh	r2, [r7, #30]
 8007ac4:	60da      	str	r2, [r3, #12]
 8007ac6:	e062      	b.n	8007b8e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007ace:	e05e      	b.n	8007b8e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ad0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ad4:	2b08      	cmp	r3, #8
 8007ad6:	d828      	bhi.n	8007b2a <UART_SetConfig+0x56a>
 8007ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae0 <UART_SetConfig+0x520>)
 8007ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ade:	bf00      	nop
 8007ae0:	08007b05 	.word	0x08007b05
 8007ae4:	08007b0d 	.word	0x08007b0d
 8007ae8:	08007b15 	.word	0x08007b15
 8007aec:	08007b2b 	.word	0x08007b2b
 8007af0:	08007b1b 	.word	0x08007b1b
 8007af4:	08007b2b 	.word	0x08007b2b
 8007af8:	08007b2b 	.word	0x08007b2b
 8007afc:	08007b2b 	.word	0x08007b2b
 8007b00:	08007b23 	.word	0x08007b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b04:	f7fd fe08 	bl	8005718 <HAL_RCC_GetPCLK1Freq>
 8007b08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b0a:	e014      	b.n	8007b36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b0c:	f7fd fe1a 	bl	8005744 <HAL_RCC_GetPCLK2Freq>
 8007b10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b12:	e010      	b.n	8007b36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b14:	4b1a      	ldr	r3, [pc, #104]	@ (8007b80 <UART_SetConfig+0x5c0>)
 8007b16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b18:	e00d      	b.n	8007b36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b1a:	f7fd fd8f 	bl	800563c <HAL_RCC_GetSysClockFreq>
 8007b1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b20:	e009      	b.n	8007b36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b28:	e005      	b.n	8007b36 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b34:	bf00      	nop
    }

    if (pclk != 0U)
 8007b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d028      	beq.n	8007b8e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b40:	4a10      	ldr	r2, [pc, #64]	@ (8007b84 <UART_SetConfig+0x5c4>)
 8007b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b46:	461a      	mov	r2, r3
 8007b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	085b      	lsrs	r3, r3, #1
 8007b54:	441a      	add	r2, r3
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b5e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b60:	6a3b      	ldr	r3, [r7, #32]
 8007b62:	2b0f      	cmp	r3, #15
 8007b64:	d910      	bls.n	8007b88 <UART_SetConfig+0x5c8>
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b6c:	d20c      	bcs.n	8007b88 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	60da      	str	r2, [r3, #12]
 8007b78:	e009      	b.n	8007b8e <UART_SetConfig+0x5ce>
 8007b7a:	bf00      	nop
 8007b7c:	40008000 	.word	0x40008000
 8007b80:	00f42400 	.word	0x00f42400
 8007b84:	08009cc0 	.word	0x08009cc0
      }
      else
      {
        ret = HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007baa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3730      	adds	r7, #48	@ 0x30
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007bb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc4:	f003 0308 	and.w	r3, r3, #8
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00a      	beq.n	8007be2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00a      	beq.n	8007c26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2a:	f003 0304 	and.w	r3, r3, #4
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c4c:	f003 0310 	and.w	r3, r3, #16
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00a      	beq.n	8007c6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6e:	f003 0320 	and.w	r3, r3, #32
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00a      	beq.n	8007c8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d01a      	beq.n	8007cce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cb6:	d10a      	bne.n	8007cce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	430a      	orrs	r2, r1
 8007cee:	605a      	str	r2, [r3, #4]
  }
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b098      	sub	sp, #96	@ 0x60
 8007d00:	af02      	add	r7, sp, #8
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d0c:	f7fc fce8 	bl	80046e0 <HAL_GetTick>
 8007d10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0308 	and.w	r3, r3, #8
 8007d1c:	2b08      	cmp	r3, #8
 8007d1e:	d12f      	bne.n	8007d80 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f88e 	bl	8007e50 <UART_WaitOnFlagUntilTimeout>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d022      	beq.n	8007d80 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d42:	e853 3f00 	ldrex	r3, [r3]
 8007d46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	461a      	mov	r2, r3
 8007d56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d58:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d5a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d60:	e841 2300 	strex	r3, r2, [r1]
 8007d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1e6      	bne.n	8007d3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e063      	b.n	8007e48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 0304 	and.w	r3, r3, #4
 8007d8a:	2b04      	cmp	r3, #4
 8007d8c:	d149      	bne.n	8007e22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d8e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d96:	2200      	movs	r2, #0
 8007d98:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f857 	bl	8007e50 <UART_WaitOnFlagUntilTimeout>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d03c      	beq.n	8007e22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	623b      	str	r3, [r7, #32]
   return(result);
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1e6      	bne.n	8007da8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3308      	adds	r3, #8
 8007de0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	e853 3f00 	ldrex	r3, [r3]
 8007de8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f023 0301 	bic.w	r3, r3, #1
 8007df0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3308      	adds	r3, #8
 8007df8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007dfa:	61fa      	str	r2, [r7, #28]
 8007dfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfe:	69b9      	ldr	r1, [r7, #24]
 8007e00:	69fa      	ldr	r2, [r7, #28]
 8007e02:	e841 2300 	strex	r3, r2, [r1]
 8007e06:	617b      	str	r3, [r7, #20]
   return(result);
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1e5      	bne.n	8007dda <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2220      	movs	r2, #32
 8007e12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e012      	b.n	8007e48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2220      	movs	r2, #32
 8007e26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3758      	adds	r7, #88	@ 0x58
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	603b      	str	r3, [r7, #0]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e60:	e04f      	b.n	8007f02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e68:	d04b      	beq.n	8007f02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e6a:	f7fc fc39 	bl	80046e0 <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	69ba      	ldr	r2, [r7, #24]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d302      	bcc.n	8007e80 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e04e      	b.n	8007f22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0304 	and.w	r3, r3, #4
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d037      	beq.n	8007f02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b80      	cmp	r3, #128	@ 0x80
 8007e96:	d034      	beq.n	8007f02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2b40      	cmp	r3, #64	@ 0x40
 8007e9c:	d031      	beq.n	8007f02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	69db      	ldr	r3, [r3, #28]
 8007ea4:	f003 0308 	and.w	r3, r3, #8
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	d110      	bne.n	8007ece <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2208      	movs	r2, #8
 8007eb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f000 f838 	bl	8007f2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2208      	movs	r2, #8
 8007ebe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e029      	b.n	8007f22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ed8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007edc:	d111      	bne.n	8007f02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ee6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f000 f81e 	bl	8007f2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2220      	movs	r2, #32
 8007ef2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e00f      	b.n	8007f22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	69da      	ldr	r2, [r3, #28]
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	bf0c      	ite	eq
 8007f12:	2301      	moveq	r3, #1
 8007f14:	2300      	movne	r3, #0
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	461a      	mov	r2, r3
 8007f1a:	79fb      	ldrb	r3, [r7, #7]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d0a0      	beq.n	8007e62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b095      	sub	sp, #84	@ 0x54
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f3a:	e853 3f00 	ldrex	r3, [r3]
 8007f3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f50:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f58:	e841 2300 	strex	r3, r2, [r1]
 8007f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1e6      	bne.n	8007f32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	3308      	adds	r3, #8
 8007f6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f7a:	f023 0301 	bic.w	r3, r3, #1
 8007f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3308      	adds	r3, #8
 8007f86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e3      	bne.n	8007f64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d118      	bne.n	8007fd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	f023 0310 	bic.w	r3, r3, #16
 8007fb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fc2:	61bb      	str	r3, [r7, #24]
 8007fc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	6979      	ldr	r1, [r7, #20]
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	613b      	str	r3, [r7, #16]
   return(result);
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e6      	bne.n	8007fa4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007fea:	bf00      	nop
 8007fec:	3754      	adds	r7, #84	@ 0x54
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b085      	sub	sp, #20
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008004:	2b01      	cmp	r3, #1
 8008006:	d101      	bne.n	800800c <HAL_UARTEx_DisableFifoMode+0x16>
 8008008:	2302      	movs	r3, #2
 800800a:	e027      	b.n	800805c <HAL_UARTEx_DisableFifoMode+0x66>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2224      	movs	r2, #36	@ 0x24
 8008018:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 0201 	bic.w	r2, r2, #1
 8008032:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800803a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2220      	movs	r2, #32
 800804e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008078:	2b01      	cmp	r3, #1
 800807a:	d101      	bne.n	8008080 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800807c:	2302      	movs	r3, #2
 800807e:	e02d      	b.n	80080dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2224      	movs	r2, #36	@ 0x24
 800808c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f022 0201 	bic.w	r2, r2, #1
 80080a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	430a      	orrs	r2, r1
 80080ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f84f 	bl	8008160 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2220      	movs	r2, #32
 80080ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d101      	bne.n	80080fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80080f8:	2302      	movs	r3, #2
 80080fa:	e02d      	b.n	8008158 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2224      	movs	r2, #36	@ 0x24
 8008108:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f022 0201 	bic.w	r2, r2, #1
 8008122:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	430a      	orrs	r2, r1
 8008136:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f811 	bl	8008160 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2220      	movs	r2, #32
 800814a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800816c:	2b00      	cmp	r3, #0
 800816e:	d108      	bne.n	8008182 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008180:	e031      	b.n	80081e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008182:	2308      	movs	r3, #8
 8008184:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008186:	2308      	movs	r3, #8
 8008188:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	0e5b      	lsrs	r3, r3, #25
 8008192:	b2db      	uxtb	r3, r3
 8008194:	f003 0307 	and.w	r3, r3, #7
 8008198:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	0f5b      	lsrs	r3, r3, #29
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	f003 0307 	and.w	r3, r3, #7
 80081a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081aa:	7bbb      	ldrb	r3, [r7, #14]
 80081ac:	7b3a      	ldrb	r2, [r7, #12]
 80081ae:	4911      	ldr	r1, [pc, #68]	@ (80081f4 <UARTEx_SetNbDataToProcess+0x94>)
 80081b0:	5c8a      	ldrb	r2, [r1, r2]
 80081b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80081b6:	7b3a      	ldrb	r2, [r7, #12]
 80081b8:	490f      	ldr	r1, [pc, #60]	@ (80081f8 <UARTEx_SetNbDataToProcess+0x98>)
 80081ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
 80081ca:	7b7a      	ldrb	r2, [r7, #13]
 80081cc:	4909      	ldr	r1, [pc, #36]	@ (80081f4 <UARTEx_SetNbDataToProcess+0x94>)
 80081ce:	5c8a      	ldrb	r2, [r1, r2]
 80081d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80081d4:	7b7a      	ldrb	r2, [r7, #13]
 80081d6:	4908      	ldr	r1, [pc, #32]	@ (80081f8 <UARTEx_SetNbDataToProcess+0x98>)
 80081d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081da:	fb93 f3f2 	sdiv	r3, r3, r2
 80081de:	b29a      	uxth	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80081e6:	bf00      	nop
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	08009cd8 	.word	0x08009cd8
 80081f8:	08009ce0 	.word	0x08009ce0

080081fc <siscanf>:
 80081fc:	b40e      	push	{r1, r2, r3}
 80081fe:	b530      	push	{r4, r5, lr}
 8008200:	b09c      	sub	sp, #112	@ 0x70
 8008202:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008204:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008208:	f854 5b04 	ldr.w	r5, [r4], #4
 800820c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008210:	9002      	str	r0, [sp, #8]
 8008212:	9006      	str	r0, [sp, #24]
 8008214:	f7f8 f804 	bl	8000220 <strlen>
 8008218:	4b0b      	ldr	r3, [pc, #44]	@ (8008248 <siscanf+0x4c>)
 800821a:	9003      	str	r0, [sp, #12]
 800821c:	9007      	str	r0, [sp, #28]
 800821e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008220:	480a      	ldr	r0, [pc, #40]	@ (800824c <siscanf+0x50>)
 8008222:	9401      	str	r4, [sp, #4]
 8008224:	2300      	movs	r3, #0
 8008226:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008228:	9314      	str	r3, [sp, #80]	@ 0x50
 800822a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800822e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008232:	462a      	mov	r2, r5
 8008234:	4623      	mov	r3, r4
 8008236:	a902      	add	r1, sp, #8
 8008238:	6800      	ldr	r0, [r0, #0]
 800823a:	f000 fb13 	bl	8008864 <__ssvfiscanf_r>
 800823e:	b01c      	add	sp, #112	@ 0x70
 8008240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008244:	b003      	add	sp, #12
 8008246:	4770      	bx	lr
 8008248:	08008273 	.word	0x08008273
 800824c:	2000009c 	.word	0x2000009c

08008250 <__sread>:
 8008250:	b510      	push	{r4, lr}
 8008252:	460c      	mov	r4, r1
 8008254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008258:	f000 fa10 	bl	800867c <_read_r>
 800825c:	2800      	cmp	r0, #0
 800825e:	bfab      	itete	ge
 8008260:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008262:	89a3      	ldrhlt	r3, [r4, #12]
 8008264:	181b      	addge	r3, r3, r0
 8008266:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800826a:	bfac      	ite	ge
 800826c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800826e:	81a3      	strhlt	r3, [r4, #12]
 8008270:	bd10      	pop	{r4, pc}

08008272 <__seofread>:
 8008272:	2000      	movs	r0, #0
 8008274:	4770      	bx	lr

08008276 <__swrite>:
 8008276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800827a:	461f      	mov	r7, r3
 800827c:	898b      	ldrh	r3, [r1, #12]
 800827e:	05db      	lsls	r3, r3, #23
 8008280:	4605      	mov	r5, r0
 8008282:	460c      	mov	r4, r1
 8008284:	4616      	mov	r6, r2
 8008286:	d505      	bpl.n	8008294 <__swrite+0x1e>
 8008288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800828c:	2302      	movs	r3, #2
 800828e:	2200      	movs	r2, #0
 8008290:	f000 f9e2 	bl	8008658 <_lseek_r>
 8008294:	89a3      	ldrh	r3, [r4, #12]
 8008296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800829a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800829e:	81a3      	strh	r3, [r4, #12]
 80082a0:	4632      	mov	r2, r6
 80082a2:	463b      	mov	r3, r7
 80082a4:	4628      	mov	r0, r5
 80082a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082aa:	f000 b9f9 	b.w	80086a0 <_write_r>

080082ae <__sseek>:
 80082ae:	b510      	push	{r4, lr}
 80082b0:	460c      	mov	r4, r1
 80082b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b6:	f000 f9cf 	bl	8008658 <_lseek_r>
 80082ba:	1c43      	adds	r3, r0, #1
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	bf15      	itete	ne
 80082c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80082c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80082ca:	81a3      	strheq	r3, [r4, #12]
 80082cc:	bf18      	it	ne
 80082ce:	81a3      	strhne	r3, [r4, #12]
 80082d0:	bd10      	pop	{r4, pc}

080082d2 <__sclose>:
 80082d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d6:	f000 b9af 	b.w	8008638 <_close_r>
	...

080082dc <std>:
 80082dc:	2300      	movs	r3, #0
 80082de:	b510      	push	{r4, lr}
 80082e0:	4604      	mov	r4, r0
 80082e2:	e9c0 3300 	strd	r3, r3, [r0]
 80082e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082ea:	6083      	str	r3, [r0, #8]
 80082ec:	8181      	strh	r1, [r0, #12]
 80082ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80082f0:	81c2      	strh	r2, [r0, #14]
 80082f2:	6183      	str	r3, [r0, #24]
 80082f4:	4619      	mov	r1, r3
 80082f6:	2208      	movs	r2, #8
 80082f8:	305c      	adds	r0, #92	@ 0x5c
 80082fa:	f000 f995 	bl	8008628 <memset>
 80082fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008334 <std+0x58>)
 8008300:	6263      	str	r3, [r4, #36]	@ 0x24
 8008302:	4b0d      	ldr	r3, [pc, #52]	@ (8008338 <std+0x5c>)
 8008304:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008306:	4b0d      	ldr	r3, [pc, #52]	@ (800833c <std+0x60>)
 8008308:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800830a:	4b0d      	ldr	r3, [pc, #52]	@ (8008340 <std+0x64>)
 800830c:	6323      	str	r3, [r4, #48]	@ 0x30
 800830e:	4b0d      	ldr	r3, [pc, #52]	@ (8008344 <std+0x68>)
 8008310:	6224      	str	r4, [r4, #32]
 8008312:	429c      	cmp	r4, r3
 8008314:	d006      	beq.n	8008324 <std+0x48>
 8008316:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800831a:	4294      	cmp	r4, r2
 800831c:	d002      	beq.n	8008324 <std+0x48>
 800831e:	33d0      	adds	r3, #208	@ 0xd0
 8008320:	429c      	cmp	r4, r3
 8008322:	d105      	bne.n	8008330 <std+0x54>
 8008324:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800832c:	f000 b9f4 	b.w	8008718 <__retarget_lock_init_recursive>
 8008330:	bd10      	pop	{r4, pc}
 8008332:	bf00      	nop
 8008334:	08008251 	.word	0x08008251
 8008338:	08008277 	.word	0x08008277
 800833c:	080082af 	.word	0x080082af
 8008340:	080082d3 	.word	0x080082d3
 8008344:	20000468 	.word	0x20000468

08008348 <stdio_exit_handler>:
 8008348:	4a02      	ldr	r2, [pc, #8]	@ (8008354 <stdio_exit_handler+0xc>)
 800834a:	4903      	ldr	r1, [pc, #12]	@ (8008358 <stdio_exit_handler+0x10>)
 800834c:	4803      	ldr	r0, [pc, #12]	@ (800835c <stdio_exit_handler+0x14>)
 800834e:	f000 b8ef 	b.w	8008530 <_fwalk_sglue>
 8008352:	bf00      	nop
 8008354:	20000090 	.word	0x20000090
 8008358:	080090a9 	.word	0x080090a9
 800835c:	200000a0 	.word	0x200000a0

08008360 <cleanup_stdio>:
 8008360:	6841      	ldr	r1, [r0, #4]
 8008362:	4b0c      	ldr	r3, [pc, #48]	@ (8008394 <cleanup_stdio+0x34>)
 8008364:	4299      	cmp	r1, r3
 8008366:	b510      	push	{r4, lr}
 8008368:	4604      	mov	r4, r0
 800836a:	d001      	beq.n	8008370 <cleanup_stdio+0x10>
 800836c:	f000 fe9c 	bl	80090a8 <_fflush_r>
 8008370:	68a1      	ldr	r1, [r4, #8]
 8008372:	4b09      	ldr	r3, [pc, #36]	@ (8008398 <cleanup_stdio+0x38>)
 8008374:	4299      	cmp	r1, r3
 8008376:	d002      	beq.n	800837e <cleanup_stdio+0x1e>
 8008378:	4620      	mov	r0, r4
 800837a:	f000 fe95 	bl	80090a8 <_fflush_r>
 800837e:	68e1      	ldr	r1, [r4, #12]
 8008380:	4b06      	ldr	r3, [pc, #24]	@ (800839c <cleanup_stdio+0x3c>)
 8008382:	4299      	cmp	r1, r3
 8008384:	d004      	beq.n	8008390 <cleanup_stdio+0x30>
 8008386:	4620      	mov	r0, r4
 8008388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800838c:	f000 be8c 	b.w	80090a8 <_fflush_r>
 8008390:	bd10      	pop	{r4, pc}
 8008392:	bf00      	nop
 8008394:	20000468 	.word	0x20000468
 8008398:	200004d0 	.word	0x200004d0
 800839c:	20000538 	.word	0x20000538

080083a0 <global_stdio_init.part.0>:
 80083a0:	b510      	push	{r4, lr}
 80083a2:	4b0b      	ldr	r3, [pc, #44]	@ (80083d0 <global_stdio_init.part.0+0x30>)
 80083a4:	4c0b      	ldr	r4, [pc, #44]	@ (80083d4 <global_stdio_init.part.0+0x34>)
 80083a6:	4a0c      	ldr	r2, [pc, #48]	@ (80083d8 <global_stdio_init.part.0+0x38>)
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	4620      	mov	r0, r4
 80083ac:	2200      	movs	r2, #0
 80083ae:	2104      	movs	r1, #4
 80083b0:	f7ff ff94 	bl	80082dc <std>
 80083b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80083b8:	2201      	movs	r2, #1
 80083ba:	2109      	movs	r1, #9
 80083bc:	f7ff ff8e 	bl	80082dc <std>
 80083c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80083c4:	2202      	movs	r2, #2
 80083c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083ca:	2112      	movs	r1, #18
 80083cc:	f7ff bf86 	b.w	80082dc <std>
 80083d0:	200005a0 	.word	0x200005a0
 80083d4:	20000468 	.word	0x20000468
 80083d8:	08008349 	.word	0x08008349

080083dc <__sfp_lock_acquire>:
 80083dc:	4801      	ldr	r0, [pc, #4]	@ (80083e4 <__sfp_lock_acquire+0x8>)
 80083de:	f000 b99c 	b.w	800871a <__retarget_lock_acquire_recursive>
 80083e2:	bf00      	nop
 80083e4:	200005a9 	.word	0x200005a9

080083e8 <__sfp_lock_release>:
 80083e8:	4801      	ldr	r0, [pc, #4]	@ (80083f0 <__sfp_lock_release+0x8>)
 80083ea:	f000 b997 	b.w	800871c <__retarget_lock_release_recursive>
 80083ee:	bf00      	nop
 80083f0:	200005a9 	.word	0x200005a9

080083f4 <__sinit>:
 80083f4:	b510      	push	{r4, lr}
 80083f6:	4604      	mov	r4, r0
 80083f8:	f7ff fff0 	bl	80083dc <__sfp_lock_acquire>
 80083fc:	6a23      	ldr	r3, [r4, #32]
 80083fe:	b11b      	cbz	r3, 8008408 <__sinit+0x14>
 8008400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008404:	f7ff bff0 	b.w	80083e8 <__sfp_lock_release>
 8008408:	4b04      	ldr	r3, [pc, #16]	@ (800841c <__sinit+0x28>)
 800840a:	6223      	str	r3, [r4, #32]
 800840c:	4b04      	ldr	r3, [pc, #16]	@ (8008420 <__sinit+0x2c>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1f5      	bne.n	8008400 <__sinit+0xc>
 8008414:	f7ff ffc4 	bl	80083a0 <global_stdio_init.part.0>
 8008418:	e7f2      	b.n	8008400 <__sinit+0xc>
 800841a:	bf00      	nop
 800841c:	08008361 	.word	0x08008361
 8008420:	200005a0 	.word	0x200005a0

08008424 <_strtol_l.constprop.0>:
 8008424:	2b24      	cmp	r3, #36	@ 0x24
 8008426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800842a:	4686      	mov	lr, r0
 800842c:	4690      	mov	r8, r2
 800842e:	d801      	bhi.n	8008434 <_strtol_l.constprop.0+0x10>
 8008430:	2b01      	cmp	r3, #1
 8008432:	d106      	bne.n	8008442 <_strtol_l.constprop.0+0x1e>
 8008434:	f000 f946 	bl	80086c4 <__errno>
 8008438:	2316      	movs	r3, #22
 800843a:	6003      	str	r3, [r0, #0]
 800843c:	2000      	movs	r0, #0
 800843e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008442:	4834      	ldr	r0, [pc, #208]	@ (8008514 <_strtol_l.constprop.0+0xf0>)
 8008444:	460d      	mov	r5, r1
 8008446:	462a      	mov	r2, r5
 8008448:	f815 4b01 	ldrb.w	r4, [r5], #1
 800844c:	5d06      	ldrb	r6, [r0, r4]
 800844e:	f016 0608 	ands.w	r6, r6, #8
 8008452:	d1f8      	bne.n	8008446 <_strtol_l.constprop.0+0x22>
 8008454:	2c2d      	cmp	r4, #45	@ 0x2d
 8008456:	d12d      	bne.n	80084b4 <_strtol_l.constprop.0+0x90>
 8008458:	782c      	ldrb	r4, [r5, #0]
 800845a:	2601      	movs	r6, #1
 800845c:	1c95      	adds	r5, r2, #2
 800845e:	f033 0210 	bics.w	r2, r3, #16
 8008462:	d109      	bne.n	8008478 <_strtol_l.constprop.0+0x54>
 8008464:	2c30      	cmp	r4, #48	@ 0x30
 8008466:	d12a      	bne.n	80084be <_strtol_l.constprop.0+0x9a>
 8008468:	782a      	ldrb	r2, [r5, #0]
 800846a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800846e:	2a58      	cmp	r2, #88	@ 0x58
 8008470:	d125      	bne.n	80084be <_strtol_l.constprop.0+0x9a>
 8008472:	786c      	ldrb	r4, [r5, #1]
 8008474:	2310      	movs	r3, #16
 8008476:	3502      	adds	r5, #2
 8008478:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800847c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008480:	2200      	movs	r2, #0
 8008482:	fbbc f9f3 	udiv	r9, ip, r3
 8008486:	4610      	mov	r0, r2
 8008488:	fb03 ca19 	mls	sl, r3, r9, ip
 800848c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008490:	2f09      	cmp	r7, #9
 8008492:	d81b      	bhi.n	80084cc <_strtol_l.constprop.0+0xa8>
 8008494:	463c      	mov	r4, r7
 8008496:	42a3      	cmp	r3, r4
 8008498:	dd27      	ble.n	80084ea <_strtol_l.constprop.0+0xc6>
 800849a:	1c57      	adds	r7, r2, #1
 800849c:	d007      	beq.n	80084ae <_strtol_l.constprop.0+0x8a>
 800849e:	4581      	cmp	r9, r0
 80084a0:	d320      	bcc.n	80084e4 <_strtol_l.constprop.0+0xc0>
 80084a2:	d101      	bne.n	80084a8 <_strtol_l.constprop.0+0x84>
 80084a4:	45a2      	cmp	sl, r4
 80084a6:	db1d      	blt.n	80084e4 <_strtol_l.constprop.0+0xc0>
 80084a8:	fb00 4003 	mla	r0, r0, r3, r4
 80084ac:	2201      	movs	r2, #1
 80084ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084b2:	e7eb      	b.n	800848c <_strtol_l.constprop.0+0x68>
 80084b4:	2c2b      	cmp	r4, #43	@ 0x2b
 80084b6:	bf04      	itt	eq
 80084b8:	782c      	ldrbeq	r4, [r5, #0]
 80084ba:	1c95      	addeq	r5, r2, #2
 80084bc:	e7cf      	b.n	800845e <_strtol_l.constprop.0+0x3a>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1da      	bne.n	8008478 <_strtol_l.constprop.0+0x54>
 80084c2:	2c30      	cmp	r4, #48	@ 0x30
 80084c4:	bf0c      	ite	eq
 80084c6:	2308      	moveq	r3, #8
 80084c8:	230a      	movne	r3, #10
 80084ca:	e7d5      	b.n	8008478 <_strtol_l.constprop.0+0x54>
 80084cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80084d0:	2f19      	cmp	r7, #25
 80084d2:	d801      	bhi.n	80084d8 <_strtol_l.constprop.0+0xb4>
 80084d4:	3c37      	subs	r4, #55	@ 0x37
 80084d6:	e7de      	b.n	8008496 <_strtol_l.constprop.0+0x72>
 80084d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80084dc:	2f19      	cmp	r7, #25
 80084de:	d804      	bhi.n	80084ea <_strtol_l.constprop.0+0xc6>
 80084e0:	3c57      	subs	r4, #87	@ 0x57
 80084e2:	e7d8      	b.n	8008496 <_strtol_l.constprop.0+0x72>
 80084e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084e8:	e7e1      	b.n	80084ae <_strtol_l.constprop.0+0x8a>
 80084ea:	1c53      	adds	r3, r2, #1
 80084ec:	d108      	bne.n	8008500 <_strtol_l.constprop.0+0xdc>
 80084ee:	2322      	movs	r3, #34	@ 0x22
 80084f0:	f8ce 3000 	str.w	r3, [lr]
 80084f4:	4660      	mov	r0, ip
 80084f6:	f1b8 0f00 	cmp.w	r8, #0
 80084fa:	d0a0      	beq.n	800843e <_strtol_l.constprop.0+0x1a>
 80084fc:	1e69      	subs	r1, r5, #1
 80084fe:	e006      	b.n	800850e <_strtol_l.constprop.0+0xea>
 8008500:	b106      	cbz	r6, 8008504 <_strtol_l.constprop.0+0xe0>
 8008502:	4240      	negs	r0, r0
 8008504:	f1b8 0f00 	cmp.w	r8, #0
 8008508:	d099      	beq.n	800843e <_strtol_l.constprop.0+0x1a>
 800850a:	2a00      	cmp	r2, #0
 800850c:	d1f6      	bne.n	80084fc <_strtol_l.constprop.0+0xd8>
 800850e:	f8c8 1000 	str.w	r1, [r8]
 8008512:	e794      	b.n	800843e <_strtol_l.constprop.0+0x1a>
 8008514:	08009ce9 	.word	0x08009ce9

08008518 <_strtol_r>:
 8008518:	f7ff bf84 	b.w	8008424 <_strtol_l.constprop.0>

0800851c <strtol>:
 800851c:	4613      	mov	r3, r2
 800851e:	460a      	mov	r2, r1
 8008520:	4601      	mov	r1, r0
 8008522:	4802      	ldr	r0, [pc, #8]	@ (800852c <strtol+0x10>)
 8008524:	6800      	ldr	r0, [r0, #0]
 8008526:	f7ff bf7d 	b.w	8008424 <_strtol_l.constprop.0>
 800852a:	bf00      	nop
 800852c:	2000009c 	.word	0x2000009c

08008530 <_fwalk_sglue>:
 8008530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008534:	4607      	mov	r7, r0
 8008536:	4688      	mov	r8, r1
 8008538:	4614      	mov	r4, r2
 800853a:	2600      	movs	r6, #0
 800853c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008540:	f1b9 0901 	subs.w	r9, r9, #1
 8008544:	d505      	bpl.n	8008552 <_fwalk_sglue+0x22>
 8008546:	6824      	ldr	r4, [r4, #0]
 8008548:	2c00      	cmp	r4, #0
 800854a:	d1f7      	bne.n	800853c <_fwalk_sglue+0xc>
 800854c:	4630      	mov	r0, r6
 800854e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008552:	89ab      	ldrh	r3, [r5, #12]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d907      	bls.n	8008568 <_fwalk_sglue+0x38>
 8008558:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800855c:	3301      	adds	r3, #1
 800855e:	d003      	beq.n	8008568 <_fwalk_sglue+0x38>
 8008560:	4629      	mov	r1, r5
 8008562:	4638      	mov	r0, r7
 8008564:	47c0      	blx	r8
 8008566:	4306      	orrs	r6, r0
 8008568:	3568      	adds	r5, #104	@ 0x68
 800856a:	e7e9      	b.n	8008540 <_fwalk_sglue+0x10>

0800856c <_puts_r>:
 800856c:	6a03      	ldr	r3, [r0, #32]
 800856e:	b570      	push	{r4, r5, r6, lr}
 8008570:	6884      	ldr	r4, [r0, #8]
 8008572:	4605      	mov	r5, r0
 8008574:	460e      	mov	r6, r1
 8008576:	b90b      	cbnz	r3, 800857c <_puts_r+0x10>
 8008578:	f7ff ff3c 	bl	80083f4 <__sinit>
 800857c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800857e:	07db      	lsls	r3, r3, #31
 8008580:	d405      	bmi.n	800858e <_puts_r+0x22>
 8008582:	89a3      	ldrh	r3, [r4, #12]
 8008584:	0598      	lsls	r0, r3, #22
 8008586:	d402      	bmi.n	800858e <_puts_r+0x22>
 8008588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800858a:	f000 f8c6 	bl	800871a <__retarget_lock_acquire_recursive>
 800858e:	89a3      	ldrh	r3, [r4, #12]
 8008590:	0719      	lsls	r1, r3, #28
 8008592:	d502      	bpl.n	800859a <_puts_r+0x2e>
 8008594:	6923      	ldr	r3, [r4, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d135      	bne.n	8008606 <_puts_r+0x9a>
 800859a:	4621      	mov	r1, r4
 800859c:	4628      	mov	r0, r5
 800859e:	f000 fecd 	bl	800933c <__swsetup_r>
 80085a2:	b380      	cbz	r0, 8008606 <_puts_r+0x9a>
 80085a4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80085a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085aa:	07da      	lsls	r2, r3, #31
 80085ac:	d405      	bmi.n	80085ba <_puts_r+0x4e>
 80085ae:	89a3      	ldrh	r3, [r4, #12]
 80085b0:	059b      	lsls	r3, r3, #22
 80085b2:	d402      	bmi.n	80085ba <_puts_r+0x4e>
 80085b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085b6:	f000 f8b1 	bl	800871c <__retarget_lock_release_recursive>
 80085ba:	4628      	mov	r0, r5
 80085bc:	bd70      	pop	{r4, r5, r6, pc}
 80085be:	2b00      	cmp	r3, #0
 80085c0:	da04      	bge.n	80085cc <_puts_r+0x60>
 80085c2:	69a2      	ldr	r2, [r4, #24]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	dc17      	bgt.n	80085f8 <_puts_r+0x8c>
 80085c8:	290a      	cmp	r1, #10
 80085ca:	d015      	beq.n	80085f8 <_puts_r+0x8c>
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	1c5a      	adds	r2, r3, #1
 80085d0:	6022      	str	r2, [r4, #0]
 80085d2:	7019      	strb	r1, [r3, #0]
 80085d4:	68a3      	ldr	r3, [r4, #8]
 80085d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80085da:	3b01      	subs	r3, #1
 80085dc:	60a3      	str	r3, [r4, #8]
 80085de:	2900      	cmp	r1, #0
 80085e0:	d1ed      	bne.n	80085be <_puts_r+0x52>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	da11      	bge.n	800860a <_puts_r+0x9e>
 80085e6:	4622      	mov	r2, r4
 80085e8:	210a      	movs	r1, #10
 80085ea:	4628      	mov	r0, r5
 80085ec:	f000 fe68 	bl	80092c0 <__swbuf_r>
 80085f0:	3001      	adds	r0, #1
 80085f2:	d0d7      	beq.n	80085a4 <_puts_r+0x38>
 80085f4:	250a      	movs	r5, #10
 80085f6:	e7d7      	b.n	80085a8 <_puts_r+0x3c>
 80085f8:	4622      	mov	r2, r4
 80085fa:	4628      	mov	r0, r5
 80085fc:	f000 fe60 	bl	80092c0 <__swbuf_r>
 8008600:	3001      	adds	r0, #1
 8008602:	d1e7      	bne.n	80085d4 <_puts_r+0x68>
 8008604:	e7ce      	b.n	80085a4 <_puts_r+0x38>
 8008606:	3e01      	subs	r6, #1
 8008608:	e7e4      	b.n	80085d4 <_puts_r+0x68>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	1c5a      	adds	r2, r3, #1
 800860e:	6022      	str	r2, [r4, #0]
 8008610:	220a      	movs	r2, #10
 8008612:	701a      	strb	r2, [r3, #0]
 8008614:	e7ee      	b.n	80085f4 <_puts_r+0x88>
	...

08008618 <puts>:
 8008618:	4b02      	ldr	r3, [pc, #8]	@ (8008624 <puts+0xc>)
 800861a:	4601      	mov	r1, r0
 800861c:	6818      	ldr	r0, [r3, #0]
 800861e:	f7ff bfa5 	b.w	800856c <_puts_r>
 8008622:	bf00      	nop
 8008624:	2000009c 	.word	0x2000009c

08008628 <memset>:
 8008628:	4402      	add	r2, r0
 800862a:	4603      	mov	r3, r0
 800862c:	4293      	cmp	r3, r2
 800862e:	d100      	bne.n	8008632 <memset+0xa>
 8008630:	4770      	bx	lr
 8008632:	f803 1b01 	strb.w	r1, [r3], #1
 8008636:	e7f9      	b.n	800862c <memset+0x4>

08008638 <_close_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	4d06      	ldr	r5, [pc, #24]	@ (8008654 <_close_r+0x1c>)
 800863c:	2300      	movs	r3, #0
 800863e:	4604      	mov	r4, r0
 8008640:	4608      	mov	r0, r1
 8008642:	602b      	str	r3, [r5, #0]
 8008644:	f7fb fa48 	bl	8003ad8 <_close>
 8008648:	1c43      	adds	r3, r0, #1
 800864a:	d102      	bne.n	8008652 <_close_r+0x1a>
 800864c:	682b      	ldr	r3, [r5, #0]
 800864e:	b103      	cbz	r3, 8008652 <_close_r+0x1a>
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	bd38      	pop	{r3, r4, r5, pc}
 8008654:	200005a4 	.word	0x200005a4

08008658 <_lseek_r>:
 8008658:	b538      	push	{r3, r4, r5, lr}
 800865a:	4d07      	ldr	r5, [pc, #28]	@ (8008678 <_lseek_r+0x20>)
 800865c:	4604      	mov	r4, r0
 800865e:	4608      	mov	r0, r1
 8008660:	4611      	mov	r1, r2
 8008662:	2200      	movs	r2, #0
 8008664:	602a      	str	r2, [r5, #0]
 8008666:	461a      	mov	r2, r3
 8008668:	f7fb fa5d 	bl	8003b26 <_lseek>
 800866c:	1c43      	adds	r3, r0, #1
 800866e:	d102      	bne.n	8008676 <_lseek_r+0x1e>
 8008670:	682b      	ldr	r3, [r5, #0]
 8008672:	b103      	cbz	r3, 8008676 <_lseek_r+0x1e>
 8008674:	6023      	str	r3, [r4, #0]
 8008676:	bd38      	pop	{r3, r4, r5, pc}
 8008678:	200005a4 	.word	0x200005a4

0800867c <_read_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4d07      	ldr	r5, [pc, #28]	@ (800869c <_read_r+0x20>)
 8008680:	4604      	mov	r4, r0
 8008682:	4608      	mov	r0, r1
 8008684:	4611      	mov	r1, r2
 8008686:	2200      	movs	r2, #0
 8008688:	602a      	str	r2, [r5, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	f7fb f9eb 	bl	8003a66 <_read>
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	d102      	bne.n	800869a <_read_r+0x1e>
 8008694:	682b      	ldr	r3, [r5, #0]
 8008696:	b103      	cbz	r3, 800869a <_read_r+0x1e>
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	bd38      	pop	{r3, r4, r5, pc}
 800869c:	200005a4 	.word	0x200005a4

080086a0 <_write_r>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	4d07      	ldr	r5, [pc, #28]	@ (80086c0 <_write_r+0x20>)
 80086a4:	4604      	mov	r4, r0
 80086a6:	4608      	mov	r0, r1
 80086a8:	4611      	mov	r1, r2
 80086aa:	2200      	movs	r2, #0
 80086ac:	602a      	str	r2, [r5, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	f7fb f9f6 	bl	8003aa0 <_write>
 80086b4:	1c43      	adds	r3, r0, #1
 80086b6:	d102      	bne.n	80086be <_write_r+0x1e>
 80086b8:	682b      	ldr	r3, [r5, #0]
 80086ba:	b103      	cbz	r3, 80086be <_write_r+0x1e>
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	bd38      	pop	{r3, r4, r5, pc}
 80086c0:	200005a4 	.word	0x200005a4

080086c4 <__errno>:
 80086c4:	4b01      	ldr	r3, [pc, #4]	@ (80086cc <__errno+0x8>)
 80086c6:	6818      	ldr	r0, [r3, #0]
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	2000009c 	.word	0x2000009c

080086d0 <__libc_init_array>:
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	4d0d      	ldr	r5, [pc, #52]	@ (8008708 <__libc_init_array+0x38>)
 80086d4:	4c0d      	ldr	r4, [pc, #52]	@ (800870c <__libc_init_array+0x3c>)
 80086d6:	1b64      	subs	r4, r4, r5
 80086d8:	10a4      	asrs	r4, r4, #2
 80086da:	2600      	movs	r6, #0
 80086dc:	42a6      	cmp	r6, r4
 80086de:	d109      	bne.n	80086f4 <__libc_init_array+0x24>
 80086e0:	4d0b      	ldr	r5, [pc, #44]	@ (8008710 <__libc_init_array+0x40>)
 80086e2:	4c0c      	ldr	r4, [pc, #48]	@ (8008714 <__libc_init_array+0x44>)
 80086e4:	f001 fa9a 	bl	8009c1c <_init>
 80086e8:	1b64      	subs	r4, r4, r5
 80086ea:	10a4      	asrs	r4, r4, #2
 80086ec:	2600      	movs	r6, #0
 80086ee:	42a6      	cmp	r6, r4
 80086f0:	d105      	bne.n	80086fe <__libc_init_array+0x2e>
 80086f2:	bd70      	pop	{r4, r5, r6, pc}
 80086f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086f8:	4798      	blx	r3
 80086fa:	3601      	adds	r6, #1
 80086fc:	e7ee      	b.n	80086dc <__libc_init_array+0xc>
 80086fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008702:	4798      	blx	r3
 8008704:	3601      	adds	r6, #1
 8008706:	e7f2      	b.n	80086ee <__libc_init_array+0x1e>
 8008708:	08009e80 	.word	0x08009e80
 800870c:	08009e80 	.word	0x08009e80
 8008710:	08009e80 	.word	0x08009e80
 8008714:	08009e84 	.word	0x08009e84

08008718 <__retarget_lock_init_recursive>:
 8008718:	4770      	bx	lr

0800871a <__retarget_lock_acquire_recursive>:
 800871a:	4770      	bx	lr

0800871c <__retarget_lock_release_recursive>:
 800871c:	4770      	bx	lr
	...

08008720 <_free_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4605      	mov	r5, r0
 8008724:	2900      	cmp	r1, #0
 8008726:	d041      	beq.n	80087ac <_free_r+0x8c>
 8008728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800872c:	1f0c      	subs	r4, r1, #4
 800872e:	2b00      	cmp	r3, #0
 8008730:	bfb8      	it	lt
 8008732:	18e4      	addlt	r4, r4, r3
 8008734:	f000 fce0 	bl	80090f8 <__malloc_lock>
 8008738:	4a1d      	ldr	r2, [pc, #116]	@ (80087b0 <_free_r+0x90>)
 800873a:	6813      	ldr	r3, [r2, #0]
 800873c:	b933      	cbnz	r3, 800874c <_free_r+0x2c>
 800873e:	6063      	str	r3, [r4, #4]
 8008740:	6014      	str	r4, [r2, #0]
 8008742:	4628      	mov	r0, r5
 8008744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008748:	f000 bcdc 	b.w	8009104 <__malloc_unlock>
 800874c:	42a3      	cmp	r3, r4
 800874e:	d908      	bls.n	8008762 <_free_r+0x42>
 8008750:	6820      	ldr	r0, [r4, #0]
 8008752:	1821      	adds	r1, r4, r0
 8008754:	428b      	cmp	r3, r1
 8008756:	bf01      	itttt	eq
 8008758:	6819      	ldreq	r1, [r3, #0]
 800875a:	685b      	ldreq	r3, [r3, #4]
 800875c:	1809      	addeq	r1, r1, r0
 800875e:	6021      	streq	r1, [r4, #0]
 8008760:	e7ed      	b.n	800873e <_free_r+0x1e>
 8008762:	461a      	mov	r2, r3
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	b10b      	cbz	r3, 800876c <_free_r+0x4c>
 8008768:	42a3      	cmp	r3, r4
 800876a:	d9fa      	bls.n	8008762 <_free_r+0x42>
 800876c:	6811      	ldr	r1, [r2, #0]
 800876e:	1850      	adds	r0, r2, r1
 8008770:	42a0      	cmp	r0, r4
 8008772:	d10b      	bne.n	800878c <_free_r+0x6c>
 8008774:	6820      	ldr	r0, [r4, #0]
 8008776:	4401      	add	r1, r0
 8008778:	1850      	adds	r0, r2, r1
 800877a:	4283      	cmp	r3, r0
 800877c:	6011      	str	r1, [r2, #0]
 800877e:	d1e0      	bne.n	8008742 <_free_r+0x22>
 8008780:	6818      	ldr	r0, [r3, #0]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	6053      	str	r3, [r2, #4]
 8008786:	4408      	add	r0, r1
 8008788:	6010      	str	r0, [r2, #0]
 800878a:	e7da      	b.n	8008742 <_free_r+0x22>
 800878c:	d902      	bls.n	8008794 <_free_r+0x74>
 800878e:	230c      	movs	r3, #12
 8008790:	602b      	str	r3, [r5, #0]
 8008792:	e7d6      	b.n	8008742 <_free_r+0x22>
 8008794:	6820      	ldr	r0, [r4, #0]
 8008796:	1821      	adds	r1, r4, r0
 8008798:	428b      	cmp	r3, r1
 800879a:	bf04      	itt	eq
 800879c:	6819      	ldreq	r1, [r3, #0]
 800879e:	685b      	ldreq	r3, [r3, #4]
 80087a0:	6063      	str	r3, [r4, #4]
 80087a2:	bf04      	itt	eq
 80087a4:	1809      	addeq	r1, r1, r0
 80087a6:	6021      	streq	r1, [r4, #0]
 80087a8:	6054      	str	r4, [r2, #4]
 80087aa:	e7ca      	b.n	8008742 <_free_r+0x22>
 80087ac:	bd38      	pop	{r3, r4, r5, pc}
 80087ae:	bf00      	nop
 80087b0:	200005b0 	.word	0x200005b0

080087b4 <_sungetc_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	1c4b      	adds	r3, r1, #1
 80087b8:	4614      	mov	r4, r2
 80087ba:	d103      	bne.n	80087c4 <_sungetc_r+0x10>
 80087bc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80087c0:	4628      	mov	r0, r5
 80087c2:	bd38      	pop	{r3, r4, r5, pc}
 80087c4:	8993      	ldrh	r3, [r2, #12]
 80087c6:	f023 0320 	bic.w	r3, r3, #32
 80087ca:	8193      	strh	r3, [r2, #12]
 80087cc:	6853      	ldr	r3, [r2, #4]
 80087ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80087d0:	b2cd      	uxtb	r5, r1
 80087d2:	b18a      	cbz	r2, 80087f8 <_sungetc_r+0x44>
 80087d4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80087d6:	429a      	cmp	r2, r3
 80087d8:	dd08      	ble.n	80087ec <_sungetc_r+0x38>
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	1e5a      	subs	r2, r3, #1
 80087de:	6022      	str	r2, [r4, #0]
 80087e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80087e4:	6863      	ldr	r3, [r4, #4]
 80087e6:	3301      	adds	r3, #1
 80087e8:	6063      	str	r3, [r4, #4]
 80087ea:	e7e9      	b.n	80087c0 <_sungetc_r+0xc>
 80087ec:	4621      	mov	r1, r4
 80087ee:	f000 fc8f 	bl	8009110 <__submore>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d0f1      	beq.n	80087da <_sungetc_r+0x26>
 80087f6:	e7e1      	b.n	80087bc <_sungetc_r+0x8>
 80087f8:	6921      	ldr	r1, [r4, #16]
 80087fa:	6822      	ldr	r2, [r4, #0]
 80087fc:	b141      	cbz	r1, 8008810 <_sungetc_r+0x5c>
 80087fe:	4291      	cmp	r1, r2
 8008800:	d206      	bcs.n	8008810 <_sungetc_r+0x5c>
 8008802:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008806:	42a9      	cmp	r1, r5
 8008808:	d102      	bne.n	8008810 <_sungetc_r+0x5c>
 800880a:	3a01      	subs	r2, #1
 800880c:	6022      	str	r2, [r4, #0]
 800880e:	e7ea      	b.n	80087e6 <_sungetc_r+0x32>
 8008810:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8008814:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008818:	6363      	str	r3, [r4, #52]	@ 0x34
 800881a:	2303      	movs	r3, #3
 800881c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800881e:	4623      	mov	r3, r4
 8008820:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008824:	6023      	str	r3, [r4, #0]
 8008826:	2301      	movs	r3, #1
 8008828:	e7de      	b.n	80087e8 <_sungetc_r+0x34>

0800882a <__ssrefill_r>:
 800882a:	b510      	push	{r4, lr}
 800882c:	460c      	mov	r4, r1
 800882e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008830:	b169      	cbz	r1, 800884e <__ssrefill_r+0x24>
 8008832:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008836:	4299      	cmp	r1, r3
 8008838:	d001      	beq.n	800883e <__ssrefill_r+0x14>
 800883a:	f7ff ff71 	bl	8008720 <_free_r>
 800883e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008840:	6063      	str	r3, [r4, #4]
 8008842:	2000      	movs	r0, #0
 8008844:	6360      	str	r0, [r4, #52]	@ 0x34
 8008846:	b113      	cbz	r3, 800884e <__ssrefill_r+0x24>
 8008848:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800884a:	6023      	str	r3, [r4, #0]
 800884c:	bd10      	pop	{r4, pc}
 800884e:	6923      	ldr	r3, [r4, #16]
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	2300      	movs	r3, #0
 8008854:	6063      	str	r3, [r4, #4]
 8008856:	89a3      	ldrh	r3, [r4, #12]
 8008858:	f043 0320 	orr.w	r3, r3, #32
 800885c:	81a3      	strh	r3, [r4, #12]
 800885e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008862:	e7f3      	b.n	800884c <__ssrefill_r+0x22>

08008864 <__ssvfiscanf_r>:
 8008864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008868:	460c      	mov	r4, r1
 800886a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800886e:	2100      	movs	r1, #0
 8008870:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8008874:	49a5      	ldr	r1, [pc, #660]	@ (8008b0c <__ssvfiscanf_r+0x2a8>)
 8008876:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008878:	f10d 0804 	add.w	r8, sp, #4
 800887c:	49a4      	ldr	r1, [pc, #656]	@ (8008b10 <__ssvfiscanf_r+0x2ac>)
 800887e:	4fa5      	ldr	r7, [pc, #660]	@ (8008b14 <__ssvfiscanf_r+0x2b0>)
 8008880:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008884:	4606      	mov	r6, r0
 8008886:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	7813      	ldrb	r3, [r2, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	f000 8158 	beq.w	8008b42 <__ssvfiscanf_r+0x2de>
 8008892:	5cf9      	ldrb	r1, [r7, r3]
 8008894:	f011 0108 	ands.w	r1, r1, #8
 8008898:	f102 0501 	add.w	r5, r2, #1
 800889c:	d019      	beq.n	80088d2 <__ssvfiscanf_r+0x6e>
 800889e:	6863      	ldr	r3, [r4, #4]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	dd0f      	ble.n	80088c4 <__ssvfiscanf_r+0x60>
 80088a4:	6823      	ldr	r3, [r4, #0]
 80088a6:	781a      	ldrb	r2, [r3, #0]
 80088a8:	5cba      	ldrb	r2, [r7, r2]
 80088aa:	0712      	lsls	r2, r2, #28
 80088ac:	d401      	bmi.n	80088b2 <__ssvfiscanf_r+0x4e>
 80088ae:	462a      	mov	r2, r5
 80088b0:	e7eb      	b.n	800888a <__ssvfiscanf_r+0x26>
 80088b2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80088b4:	3201      	adds	r2, #1
 80088b6:	9245      	str	r2, [sp, #276]	@ 0x114
 80088b8:	6862      	ldr	r2, [r4, #4]
 80088ba:	3301      	adds	r3, #1
 80088bc:	3a01      	subs	r2, #1
 80088be:	6062      	str	r2, [r4, #4]
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	e7ec      	b.n	800889e <__ssvfiscanf_r+0x3a>
 80088c4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80088c6:	4621      	mov	r1, r4
 80088c8:	4630      	mov	r0, r6
 80088ca:	4798      	blx	r3
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d0e9      	beq.n	80088a4 <__ssvfiscanf_r+0x40>
 80088d0:	e7ed      	b.n	80088ae <__ssvfiscanf_r+0x4a>
 80088d2:	2b25      	cmp	r3, #37	@ 0x25
 80088d4:	d012      	beq.n	80088fc <__ssvfiscanf_r+0x98>
 80088d6:	4699      	mov	r9, r3
 80088d8:	6863      	ldr	r3, [r4, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f340 8093 	ble.w	8008a06 <__ssvfiscanf_r+0x1a2>
 80088e0:	6822      	ldr	r2, [r4, #0]
 80088e2:	7813      	ldrb	r3, [r2, #0]
 80088e4:	454b      	cmp	r3, r9
 80088e6:	f040 812c 	bne.w	8008b42 <__ssvfiscanf_r+0x2de>
 80088ea:	6863      	ldr	r3, [r4, #4]
 80088ec:	3b01      	subs	r3, #1
 80088ee:	6063      	str	r3, [r4, #4]
 80088f0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80088f2:	3201      	adds	r2, #1
 80088f4:	3301      	adds	r3, #1
 80088f6:	6022      	str	r2, [r4, #0]
 80088f8:	9345      	str	r3, [sp, #276]	@ 0x114
 80088fa:	e7d8      	b.n	80088ae <__ssvfiscanf_r+0x4a>
 80088fc:	9141      	str	r1, [sp, #260]	@ 0x104
 80088fe:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008900:	7853      	ldrb	r3, [r2, #1]
 8008902:	2b2a      	cmp	r3, #42	@ 0x2a
 8008904:	bf02      	ittt	eq
 8008906:	2310      	moveq	r3, #16
 8008908:	1c95      	addeq	r5, r2, #2
 800890a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800890c:	220a      	movs	r2, #10
 800890e:	46a9      	mov	r9, r5
 8008910:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008914:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008918:	2b09      	cmp	r3, #9
 800891a:	d91e      	bls.n	800895a <__ssvfiscanf_r+0xf6>
 800891c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8008b18 <__ssvfiscanf_r+0x2b4>
 8008920:	2203      	movs	r2, #3
 8008922:	4650      	mov	r0, sl
 8008924:	f7f7 fc84 	bl	8000230 <memchr>
 8008928:	b138      	cbz	r0, 800893a <__ssvfiscanf_r+0xd6>
 800892a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800892c:	eba0 000a 	sub.w	r0, r0, sl
 8008930:	2301      	movs	r3, #1
 8008932:	4083      	lsls	r3, r0
 8008934:	4313      	orrs	r3, r2
 8008936:	9341      	str	r3, [sp, #260]	@ 0x104
 8008938:	464d      	mov	r5, r9
 800893a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800893e:	2b78      	cmp	r3, #120	@ 0x78
 8008940:	d806      	bhi.n	8008950 <__ssvfiscanf_r+0xec>
 8008942:	2b57      	cmp	r3, #87	@ 0x57
 8008944:	d810      	bhi.n	8008968 <__ssvfiscanf_r+0x104>
 8008946:	2b25      	cmp	r3, #37	@ 0x25
 8008948:	d0c5      	beq.n	80088d6 <__ssvfiscanf_r+0x72>
 800894a:	d857      	bhi.n	80089fc <__ssvfiscanf_r+0x198>
 800894c:	2b00      	cmp	r3, #0
 800894e:	d065      	beq.n	8008a1c <__ssvfiscanf_r+0x1b8>
 8008950:	2303      	movs	r3, #3
 8008952:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008954:	230a      	movs	r3, #10
 8008956:	9342      	str	r3, [sp, #264]	@ 0x108
 8008958:	e078      	b.n	8008a4c <__ssvfiscanf_r+0x1e8>
 800895a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800895c:	fb02 1103 	mla	r1, r2, r3, r1
 8008960:	3930      	subs	r1, #48	@ 0x30
 8008962:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008964:	464d      	mov	r5, r9
 8008966:	e7d2      	b.n	800890e <__ssvfiscanf_r+0xaa>
 8008968:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800896c:	2a20      	cmp	r2, #32
 800896e:	d8ef      	bhi.n	8008950 <__ssvfiscanf_r+0xec>
 8008970:	a101      	add	r1, pc, #4	@ (adr r1, 8008978 <__ssvfiscanf_r+0x114>)
 8008972:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008976:	bf00      	nop
 8008978:	08008a2b 	.word	0x08008a2b
 800897c:	08008951 	.word	0x08008951
 8008980:	08008951 	.word	0x08008951
 8008984:	08008a85 	.word	0x08008a85
 8008988:	08008951 	.word	0x08008951
 800898c:	08008951 	.word	0x08008951
 8008990:	08008951 	.word	0x08008951
 8008994:	08008951 	.word	0x08008951
 8008998:	08008951 	.word	0x08008951
 800899c:	08008951 	.word	0x08008951
 80089a0:	08008951 	.word	0x08008951
 80089a4:	08008a9b 	.word	0x08008a9b
 80089a8:	08008a81 	.word	0x08008a81
 80089ac:	08008a03 	.word	0x08008a03
 80089b0:	08008a03 	.word	0x08008a03
 80089b4:	08008a03 	.word	0x08008a03
 80089b8:	08008951 	.word	0x08008951
 80089bc:	08008a3d 	.word	0x08008a3d
 80089c0:	08008951 	.word	0x08008951
 80089c4:	08008951 	.word	0x08008951
 80089c8:	08008951 	.word	0x08008951
 80089cc:	08008951 	.word	0x08008951
 80089d0:	08008aab 	.word	0x08008aab
 80089d4:	08008a45 	.word	0x08008a45
 80089d8:	08008a23 	.word	0x08008a23
 80089dc:	08008951 	.word	0x08008951
 80089e0:	08008951 	.word	0x08008951
 80089e4:	08008aa7 	.word	0x08008aa7
 80089e8:	08008951 	.word	0x08008951
 80089ec:	08008a81 	.word	0x08008a81
 80089f0:	08008951 	.word	0x08008951
 80089f4:	08008951 	.word	0x08008951
 80089f8:	08008a2b 	.word	0x08008a2b
 80089fc:	3b45      	subs	r3, #69	@ 0x45
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d8a6      	bhi.n	8008950 <__ssvfiscanf_r+0xec>
 8008a02:	2305      	movs	r3, #5
 8008a04:	e021      	b.n	8008a4a <__ssvfiscanf_r+0x1e6>
 8008a06:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008a08:	4621      	mov	r1, r4
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	4798      	blx	r3
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	f43f af66 	beq.w	80088e0 <__ssvfiscanf_r+0x7c>
 8008a14:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008a16:	2800      	cmp	r0, #0
 8008a18:	f040 808b 	bne.w	8008b32 <__ssvfiscanf_r+0x2ce>
 8008a1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a20:	e08b      	b.n	8008b3a <__ssvfiscanf_r+0x2d6>
 8008a22:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008a24:	f042 0220 	orr.w	r2, r2, #32
 8008a28:	9241      	str	r2, [sp, #260]	@ 0x104
 8008a2a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008a2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a30:	9241      	str	r2, [sp, #260]	@ 0x104
 8008a32:	2210      	movs	r2, #16
 8008a34:	2b6e      	cmp	r3, #110	@ 0x6e
 8008a36:	9242      	str	r2, [sp, #264]	@ 0x108
 8008a38:	d902      	bls.n	8008a40 <__ssvfiscanf_r+0x1dc>
 8008a3a:	e005      	b.n	8008a48 <__ssvfiscanf_r+0x1e4>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	9342      	str	r3, [sp, #264]	@ 0x108
 8008a40:	2303      	movs	r3, #3
 8008a42:	e002      	b.n	8008a4a <__ssvfiscanf_r+0x1e6>
 8008a44:	2308      	movs	r3, #8
 8008a46:	9342      	str	r3, [sp, #264]	@ 0x108
 8008a48:	2304      	movs	r3, #4
 8008a4a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008a4c:	6863      	ldr	r3, [r4, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	dd39      	ble.n	8008ac6 <__ssvfiscanf_r+0x262>
 8008a52:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008a54:	0659      	lsls	r1, r3, #25
 8008a56:	d404      	bmi.n	8008a62 <__ssvfiscanf_r+0x1fe>
 8008a58:	6823      	ldr	r3, [r4, #0]
 8008a5a:	781a      	ldrb	r2, [r3, #0]
 8008a5c:	5cba      	ldrb	r2, [r7, r2]
 8008a5e:	0712      	lsls	r2, r2, #28
 8008a60:	d438      	bmi.n	8008ad4 <__ssvfiscanf_r+0x270>
 8008a62:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	dc47      	bgt.n	8008af8 <__ssvfiscanf_r+0x294>
 8008a68:	466b      	mov	r3, sp
 8008a6a:	4622      	mov	r2, r4
 8008a6c:	a941      	add	r1, sp, #260	@ 0x104
 8008a6e:	4630      	mov	r0, r6
 8008a70:	f000 f90e 	bl	8008c90 <_scanf_chars>
 8008a74:	2801      	cmp	r0, #1
 8008a76:	d064      	beq.n	8008b42 <__ssvfiscanf_r+0x2de>
 8008a78:	2802      	cmp	r0, #2
 8008a7a:	f47f af18 	bne.w	80088ae <__ssvfiscanf_r+0x4a>
 8008a7e:	e7c9      	b.n	8008a14 <__ssvfiscanf_r+0x1b0>
 8008a80:	220a      	movs	r2, #10
 8008a82:	e7d7      	b.n	8008a34 <__ssvfiscanf_r+0x1d0>
 8008a84:	4629      	mov	r1, r5
 8008a86:	4640      	mov	r0, r8
 8008a88:	f000 fa50 	bl	8008f2c <__sccl>
 8008a8c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a92:	9341      	str	r3, [sp, #260]	@ 0x104
 8008a94:	4605      	mov	r5, r0
 8008a96:	2301      	movs	r3, #1
 8008a98:	e7d7      	b.n	8008a4a <__ssvfiscanf_r+0x1e6>
 8008a9a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008a9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aa0:	9341      	str	r3, [sp, #260]	@ 0x104
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	e7d1      	b.n	8008a4a <__ssvfiscanf_r+0x1e6>
 8008aa6:	2302      	movs	r3, #2
 8008aa8:	e7cf      	b.n	8008a4a <__ssvfiscanf_r+0x1e6>
 8008aaa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008aac:	06c3      	lsls	r3, r0, #27
 8008aae:	f53f aefe 	bmi.w	80088ae <__ssvfiscanf_r+0x4a>
 8008ab2:	9b00      	ldr	r3, [sp, #0]
 8008ab4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008ab6:	1d19      	adds	r1, r3, #4
 8008ab8:	9100      	str	r1, [sp, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	07c0      	lsls	r0, r0, #31
 8008abe:	bf4c      	ite	mi
 8008ac0:	801a      	strhmi	r2, [r3, #0]
 8008ac2:	601a      	strpl	r2, [r3, #0]
 8008ac4:	e6f3      	b.n	80088ae <__ssvfiscanf_r+0x4a>
 8008ac6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008ac8:	4621      	mov	r1, r4
 8008aca:	4630      	mov	r0, r6
 8008acc:	4798      	blx	r3
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	d0bf      	beq.n	8008a52 <__ssvfiscanf_r+0x1ee>
 8008ad2:	e79f      	b.n	8008a14 <__ssvfiscanf_r+0x1b0>
 8008ad4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008ad6:	3201      	adds	r2, #1
 8008ad8:	9245      	str	r2, [sp, #276]	@ 0x114
 8008ada:	6862      	ldr	r2, [r4, #4]
 8008adc:	3a01      	subs	r2, #1
 8008ade:	2a00      	cmp	r2, #0
 8008ae0:	6062      	str	r2, [r4, #4]
 8008ae2:	dd02      	ble.n	8008aea <__ssvfiscanf_r+0x286>
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	6023      	str	r3, [r4, #0]
 8008ae8:	e7b6      	b.n	8008a58 <__ssvfiscanf_r+0x1f4>
 8008aea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008aec:	4621      	mov	r1, r4
 8008aee:	4630      	mov	r0, r6
 8008af0:	4798      	blx	r3
 8008af2:	2800      	cmp	r0, #0
 8008af4:	d0b0      	beq.n	8008a58 <__ssvfiscanf_r+0x1f4>
 8008af6:	e78d      	b.n	8008a14 <__ssvfiscanf_r+0x1b0>
 8008af8:	2b04      	cmp	r3, #4
 8008afa:	dc0f      	bgt.n	8008b1c <__ssvfiscanf_r+0x2b8>
 8008afc:	466b      	mov	r3, sp
 8008afe:	4622      	mov	r2, r4
 8008b00:	a941      	add	r1, sp, #260	@ 0x104
 8008b02:	4630      	mov	r0, r6
 8008b04:	f000 f91e 	bl	8008d44 <_scanf_i>
 8008b08:	e7b4      	b.n	8008a74 <__ssvfiscanf_r+0x210>
 8008b0a:	bf00      	nop
 8008b0c:	080087b5 	.word	0x080087b5
 8008b10:	0800882b 	.word	0x0800882b
 8008b14:	08009ce9 	.word	0x08009ce9
 8008b18:	08009de9 	.word	0x08009de9
 8008b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b48 <__ssvfiscanf_r+0x2e4>)
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f43f aec5 	beq.w	80088ae <__ssvfiscanf_r+0x4a>
 8008b24:	466b      	mov	r3, sp
 8008b26:	4622      	mov	r2, r4
 8008b28:	a941      	add	r1, sp, #260	@ 0x104
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f3af 8000 	nop.w
 8008b30:	e7a0      	b.n	8008a74 <__ssvfiscanf_r+0x210>
 8008b32:	89a3      	ldrh	r3, [r4, #12]
 8008b34:	065b      	lsls	r3, r3, #25
 8008b36:	f53f af71 	bmi.w	8008a1c <__ssvfiscanf_r+0x1b8>
 8008b3a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8008b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b42:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008b44:	e7f9      	b.n	8008b3a <__ssvfiscanf_r+0x2d6>
 8008b46:	bf00      	nop
 8008b48:	00000000 	.word	0x00000000

08008b4c <sbrk_aligned>:
 8008b4c:	b570      	push	{r4, r5, r6, lr}
 8008b4e:	4e0f      	ldr	r6, [pc, #60]	@ (8008b8c <sbrk_aligned+0x40>)
 8008b50:	460c      	mov	r4, r1
 8008b52:	6831      	ldr	r1, [r6, #0]
 8008b54:	4605      	mov	r5, r0
 8008b56:	b911      	cbnz	r1, 8008b5e <sbrk_aligned+0x12>
 8008b58:	f000 fcca 	bl	80094f0 <_sbrk_r>
 8008b5c:	6030      	str	r0, [r6, #0]
 8008b5e:	4621      	mov	r1, r4
 8008b60:	4628      	mov	r0, r5
 8008b62:	f000 fcc5 	bl	80094f0 <_sbrk_r>
 8008b66:	1c43      	adds	r3, r0, #1
 8008b68:	d103      	bne.n	8008b72 <sbrk_aligned+0x26>
 8008b6a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008b6e:	4620      	mov	r0, r4
 8008b70:	bd70      	pop	{r4, r5, r6, pc}
 8008b72:	1cc4      	adds	r4, r0, #3
 8008b74:	f024 0403 	bic.w	r4, r4, #3
 8008b78:	42a0      	cmp	r0, r4
 8008b7a:	d0f8      	beq.n	8008b6e <sbrk_aligned+0x22>
 8008b7c:	1a21      	subs	r1, r4, r0
 8008b7e:	4628      	mov	r0, r5
 8008b80:	f000 fcb6 	bl	80094f0 <_sbrk_r>
 8008b84:	3001      	adds	r0, #1
 8008b86:	d1f2      	bne.n	8008b6e <sbrk_aligned+0x22>
 8008b88:	e7ef      	b.n	8008b6a <sbrk_aligned+0x1e>
 8008b8a:	bf00      	nop
 8008b8c:	200005ac 	.word	0x200005ac

08008b90 <_malloc_r>:
 8008b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b94:	1ccd      	adds	r5, r1, #3
 8008b96:	f025 0503 	bic.w	r5, r5, #3
 8008b9a:	3508      	adds	r5, #8
 8008b9c:	2d0c      	cmp	r5, #12
 8008b9e:	bf38      	it	cc
 8008ba0:	250c      	movcc	r5, #12
 8008ba2:	2d00      	cmp	r5, #0
 8008ba4:	4606      	mov	r6, r0
 8008ba6:	db01      	blt.n	8008bac <_malloc_r+0x1c>
 8008ba8:	42a9      	cmp	r1, r5
 8008baa:	d904      	bls.n	8008bb6 <_malloc_r+0x26>
 8008bac:	230c      	movs	r3, #12
 8008bae:	6033      	str	r3, [r6, #0]
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c8c <_malloc_r+0xfc>
 8008bba:	f000 fa9d 	bl	80090f8 <__malloc_lock>
 8008bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8008bc2:	461c      	mov	r4, r3
 8008bc4:	bb44      	cbnz	r4, 8008c18 <_malloc_r+0x88>
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f7ff ffbf 	bl	8008b4c <sbrk_aligned>
 8008bce:	1c43      	adds	r3, r0, #1
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	d158      	bne.n	8008c86 <_malloc_r+0xf6>
 8008bd4:	f8d8 4000 	ldr.w	r4, [r8]
 8008bd8:	4627      	mov	r7, r4
 8008bda:	2f00      	cmp	r7, #0
 8008bdc:	d143      	bne.n	8008c66 <_malloc_r+0xd6>
 8008bde:	2c00      	cmp	r4, #0
 8008be0:	d04b      	beq.n	8008c7a <_malloc_r+0xea>
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	4639      	mov	r1, r7
 8008be6:	4630      	mov	r0, r6
 8008be8:	eb04 0903 	add.w	r9, r4, r3
 8008bec:	f000 fc80 	bl	80094f0 <_sbrk_r>
 8008bf0:	4581      	cmp	r9, r0
 8008bf2:	d142      	bne.n	8008c7a <_malloc_r+0xea>
 8008bf4:	6821      	ldr	r1, [r4, #0]
 8008bf6:	1a6d      	subs	r5, r5, r1
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f7ff ffa6 	bl	8008b4c <sbrk_aligned>
 8008c00:	3001      	adds	r0, #1
 8008c02:	d03a      	beq.n	8008c7a <_malloc_r+0xea>
 8008c04:	6823      	ldr	r3, [r4, #0]
 8008c06:	442b      	add	r3, r5
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	f8d8 3000 	ldr.w	r3, [r8]
 8008c0e:	685a      	ldr	r2, [r3, #4]
 8008c10:	bb62      	cbnz	r2, 8008c6c <_malloc_r+0xdc>
 8008c12:	f8c8 7000 	str.w	r7, [r8]
 8008c16:	e00f      	b.n	8008c38 <_malloc_r+0xa8>
 8008c18:	6822      	ldr	r2, [r4, #0]
 8008c1a:	1b52      	subs	r2, r2, r5
 8008c1c:	d420      	bmi.n	8008c60 <_malloc_r+0xd0>
 8008c1e:	2a0b      	cmp	r2, #11
 8008c20:	d917      	bls.n	8008c52 <_malloc_r+0xc2>
 8008c22:	1961      	adds	r1, r4, r5
 8008c24:	42a3      	cmp	r3, r4
 8008c26:	6025      	str	r5, [r4, #0]
 8008c28:	bf18      	it	ne
 8008c2a:	6059      	strne	r1, [r3, #4]
 8008c2c:	6863      	ldr	r3, [r4, #4]
 8008c2e:	bf08      	it	eq
 8008c30:	f8c8 1000 	streq.w	r1, [r8]
 8008c34:	5162      	str	r2, [r4, r5]
 8008c36:	604b      	str	r3, [r1, #4]
 8008c38:	4630      	mov	r0, r6
 8008c3a:	f000 fa63 	bl	8009104 <__malloc_unlock>
 8008c3e:	f104 000b 	add.w	r0, r4, #11
 8008c42:	1d23      	adds	r3, r4, #4
 8008c44:	f020 0007 	bic.w	r0, r0, #7
 8008c48:	1ac2      	subs	r2, r0, r3
 8008c4a:	bf1c      	itt	ne
 8008c4c:	1a1b      	subne	r3, r3, r0
 8008c4e:	50a3      	strne	r3, [r4, r2]
 8008c50:	e7af      	b.n	8008bb2 <_malloc_r+0x22>
 8008c52:	6862      	ldr	r2, [r4, #4]
 8008c54:	42a3      	cmp	r3, r4
 8008c56:	bf0c      	ite	eq
 8008c58:	f8c8 2000 	streq.w	r2, [r8]
 8008c5c:	605a      	strne	r2, [r3, #4]
 8008c5e:	e7eb      	b.n	8008c38 <_malloc_r+0xa8>
 8008c60:	4623      	mov	r3, r4
 8008c62:	6864      	ldr	r4, [r4, #4]
 8008c64:	e7ae      	b.n	8008bc4 <_malloc_r+0x34>
 8008c66:	463c      	mov	r4, r7
 8008c68:	687f      	ldr	r7, [r7, #4]
 8008c6a:	e7b6      	b.n	8008bda <_malloc_r+0x4a>
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	42a3      	cmp	r3, r4
 8008c72:	d1fb      	bne.n	8008c6c <_malloc_r+0xdc>
 8008c74:	2300      	movs	r3, #0
 8008c76:	6053      	str	r3, [r2, #4]
 8008c78:	e7de      	b.n	8008c38 <_malloc_r+0xa8>
 8008c7a:	230c      	movs	r3, #12
 8008c7c:	6033      	str	r3, [r6, #0]
 8008c7e:	4630      	mov	r0, r6
 8008c80:	f000 fa40 	bl	8009104 <__malloc_unlock>
 8008c84:	e794      	b.n	8008bb0 <_malloc_r+0x20>
 8008c86:	6005      	str	r5, [r0, #0]
 8008c88:	e7d6      	b.n	8008c38 <_malloc_r+0xa8>
 8008c8a:	bf00      	nop
 8008c8c:	200005b0 	.word	0x200005b0

08008c90 <_scanf_chars>:
 8008c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c94:	4615      	mov	r5, r2
 8008c96:	688a      	ldr	r2, [r1, #8]
 8008c98:	4680      	mov	r8, r0
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	b932      	cbnz	r2, 8008cac <_scanf_chars+0x1c>
 8008c9e:	698a      	ldr	r2, [r1, #24]
 8008ca0:	2a00      	cmp	r2, #0
 8008ca2:	bf14      	ite	ne
 8008ca4:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8008ca8:	2201      	moveq	r2, #1
 8008caa:	608a      	str	r2, [r1, #8]
 8008cac:	6822      	ldr	r2, [r4, #0]
 8008cae:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008d40 <_scanf_chars+0xb0>
 8008cb2:	06d1      	lsls	r1, r2, #27
 8008cb4:	bf5f      	itttt	pl
 8008cb6:	681a      	ldrpl	r2, [r3, #0]
 8008cb8:	1d11      	addpl	r1, r2, #4
 8008cba:	6019      	strpl	r1, [r3, #0]
 8008cbc:	6816      	ldrpl	r6, [r2, #0]
 8008cbe:	2700      	movs	r7, #0
 8008cc0:	69a0      	ldr	r0, [r4, #24]
 8008cc2:	b188      	cbz	r0, 8008ce8 <_scanf_chars+0x58>
 8008cc4:	2801      	cmp	r0, #1
 8008cc6:	d107      	bne.n	8008cd8 <_scanf_chars+0x48>
 8008cc8:	682b      	ldr	r3, [r5, #0]
 8008cca:	781a      	ldrb	r2, [r3, #0]
 8008ccc:	6963      	ldr	r3, [r4, #20]
 8008cce:	5c9b      	ldrb	r3, [r3, r2]
 8008cd0:	b953      	cbnz	r3, 8008ce8 <_scanf_chars+0x58>
 8008cd2:	2f00      	cmp	r7, #0
 8008cd4:	d031      	beq.n	8008d3a <_scanf_chars+0xaa>
 8008cd6:	e022      	b.n	8008d1e <_scanf_chars+0x8e>
 8008cd8:	2802      	cmp	r0, #2
 8008cda:	d120      	bne.n	8008d1e <_scanf_chars+0x8e>
 8008cdc:	682b      	ldr	r3, [r5, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008ce4:	071b      	lsls	r3, r3, #28
 8008ce6:	d41a      	bmi.n	8008d1e <_scanf_chars+0x8e>
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	06da      	lsls	r2, r3, #27
 8008cec:	bf5e      	ittt	pl
 8008cee:	682b      	ldrpl	r3, [r5, #0]
 8008cf0:	781b      	ldrbpl	r3, [r3, #0]
 8008cf2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008cf6:	682a      	ldr	r2, [r5, #0]
 8008cf8:	686b      	ldr	r3, [r5, #4]
 8008cfa:	3201      	adds	r2, #1
 8008cfc:	602a      	str	r2, [r5, #0]
 8008cfe:	68a2      	ldr	r2, [r4, #8]
 8008d00:	3b01      	subs	r3, #1
 8008d02:	3a01      	subs	r2, #1
 8008d04:	606b      	str	r3, [r5, #4]
 8008d06:	3701      	adds	r7, #1
 8008d08:	60a2      	str	r2, [r4, #8]
 8008d0a:	b142      	cbz	r2, 8008d1e <_scanf_chars+0x8e>
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	dcd7      	bgt.n	8008cc0 <_scanf_chars+0x30>
 8008d10:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008d14:	4629      	mov	r1, r5
 8008d16:	4640      	mov	r0, r8
 8008d18:	4798      	blx	r3
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d0d0      	beq.n	8008cc0 <_scanf_chars+0x30>
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	f013 0310 	ands.w	r3, r3, #16
 8008d24:	d105      	bne.n	8008d32 <_scanf_chars+0xa2>
 8008d26:	68e2      	ldr	r2, [r4, #12]
 8008d28:	3201      	adds	r2, #1
 8008d2a:	60e2      	str	r2, [r4, #12]
 8008d2c:	69a2      	ldr	r2, [r4, #24]
 8008d2e:	b102      	cbz	r2, 8008d32 <_scanf_chars+0xa2>
 8008d30:	7033      	strb	r3, [r6, #0]
 8008d32:	6923      	ldr	r3, [r4, #16]
 8008d34:	443b      	add	r3, r7
 8008d36:	6123      	str	r3, [r4, #16]
 8008d38:	2000      	movs	r0, #0
 8008d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d3e:	bf00      	nop
 8008d40:	08009ce9 	.word	0x08009ce9

08008d44 <_scanf_i>:
 8008d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d48:	4698      	mov	r8, r3
 8008d4a:	4b74      	ldr	r3, [pc, #464]	@ (8008f1c <_scanf_i+0x1d8>)
 8008d4c:	460c      	mov	r4, r1
 8008d4e:	4682      	mov	sl, r0
 8008d50:	4616      	mov	r6, r2
 8008d52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d56:	b087      	sub	sp, #28
 8008d58:	ab03      	add	r3, sp, #12
 8008d5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008d5e:	4b70      	ldr	r3, [pc, #448]	@ (8008f20 <_scanf_i+0x1dc>)
 8008d60:	69a1      	ldr	r1, [r4, #24]
 8008d62:	4a70      	ldr	r2, [pc, #448]	@ (8008f24 <_scanf_i+0x1e0>)
 8008d64:	2903      	cmp	r1, #3
 8008d66:	bf08      	it	eq
 8008d68:	461a      	moveq	r2, r3
 8008d6a:	68a3      	ldr	r3, [r4, #8]
 8008d6c:	9201      	str	r2, [sp, #4]
 8008d6e:	1e5a      	subs	r2, r3, #1
 8008d70:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008d74:	bf88      	it	hi
 8008d76:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008d7a:	4627      	mov	r7, r4
 8008d7c:	bf82      	ittt	hi
 8008d7e:	eb03 0905 	addhi.w	r9, r3, r5
 8008d82:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008d86:	60a3      	strhi	r3, [r4, #8]
 8008d88:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008d8c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008d90:	bf98      	it	ls
 8008d92:	f04f 0900 	movls.w	r9, #0
 8008d96:	6023      	str	r3, [r4, #0]
 8008d98:	463d      	mov	r5, r7
 8008d9a:	f04f 0b00 	mov.w	fp, #0
 8008d9e:	6831      	ldr	r1, [r6, #0]
 8008da0:	ab03      	add	r3, sp, #12
 8008da2:	7809      	ldrb	r1, [r1, #0]
 8008da4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008da8:	2202      	movs	r2, #2
 8008daa:	f7f7 fa41 	bl	8000230 <memchr>
 8008dae:	b328      	cbz	r0, 8008dfc <_scanf_i+0xb8>
 8008db0:	f1bb 0f01 	cmp.w	fp, #1
 8008db4:	d159      	bne.n	8008e6a <_scanf_i+0x126>
 8008db6:	6862      	ldr	r2, [r4, #4]
 8008db8:	b92a      	cbnz	r2, 8008dc6 <_scanf_i+0x82>
 8008dba:	6822      	ldr	r2, [r4, #0]
 8008dbc:	2108      	movs	r1, #8
 8008dbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dc2:	6061      	str	r1, [r4, #4]
 8008dc4:	6022      	str	r2, [r4, #0]
 8008dc6:	6822      	ldr	r2, [r4, #0]
 8008dc8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008dcc:	6022      	str	r2, [r4, #0]
 8008dce:	68a2      	ldr	r2, [r4, #8]
 8008dd0:	1e51      	subs	r1, r2, #1
 8008dd2:	60a1      	str	r1, [r4, #8]
 8008dd4:	b192      	cbz	r2, 8008dfc <_scanf_i+0xb8>
 8008dd6:	6832      	ldr	r2, [r6, #0]
 8008dd8:	1c51      	adds	r1, r2, #1
 8008dda:	6031      	str	r1, [r6, #0]
 8008ddc:	7812      	ldrb	r2, [r2, #0]
 8008dde:	f805 2b01 	strb.w	r2, [r5], #1
 8008de2:	6872      	ldr	r2, [r6, #4]
 8008de4:	3a01      	subs	r2, #1
 8008de6:	2a00      	cmp	r2, #0
 8008de8:	6072      	str	r2, [r6, #4]
 8008dea:	dc07      	bgt.n	8008dfc <_scanf_i+0xb8>
 8008dec:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008df0:	4631      	mov	r1, r6
 8008df2:	4650      	mov	r0, sl
 8008df4:	4790      	blx	r2
 8008df6:	2800      	cmp	r0, #0
 8008df8:	f040 8085 	bne.w	8008f06 <_scanf_i+0x1c2>
 8008dfc:	f10b 0b01 	add.w	fp, fp, #1
 8008e00:	f1bb 0f03 	cmp.w	fp, #3
 8008e04:	d1cb      	bne.n	8008d9e <_scanf_i+0x5a>
 8008e06:	6863      	ldr	r3, [r4, #4]
 8008e08:	b90b      	cbnz	r3, 8008e0e <_scanf_i+0xca>
 8008e0a:	230a      	movs	r3, #10
 8008e0c:	6063      	str	r3, [r4, #4]
 8008e0e:	6863      	ldr	r3, [r4, #4]
 8008e10:	4945      	ldr	r1, [pc, #276]	@ (8008f28 <_scanf_i+0x1e4>)
 8008e12:	6960      	ldr	r0, [r4, #20]
 8008e14:	1ac9      	subs	r1, r1, r3
 8008e16:	f000 f889 	bl	8008f2c <__sccl>
 8008e1a:	f04f 0b00 	mov.w	fp, #0
 8008e1e:	68a3      	ldr	r3, [r4, #8]
 8008e20:	6822      	ldr	r2, [r4, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d03d      	beq.n	8008ea2 <_scanf_i+0x15e>
 8008e26:	6831      	ldr	r1, [r6, #0]
 8008e28:	6960      	ldr	r0, [r4, #20]
 8008e2a:	f891 c000 	ldrb.w	ip, [r1]
 8008e2e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008e32:	2800      	cmp	r0, #0
 8008e34:	d035      	beq.n	8008ea2 <_scanf_i+0x15e>
 8008e36:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008e3a:	d124      	bne.n	8008e86 <_scanf_i+0x142>
 8008e3c:	0510      	lsls	r0, r2, #20
 8008e3e:	d522      	bpl.n	8008e86 <_scanf_i+0x142>
 8008e40:	f10b 0b01 	add.w	fp, fp, #1
 8008e44:	f1b9 0f00 	cmp.w	r9, #0
 8008e48:	d003      	beq.n	8008e52 <_scanf_i+0x10e>
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8008e50:	60a3      	str	r3, [r4, #8]
 8008e52:	6873      	ldr	r3, [r6, #4]
 8008e54:	3b01      	subs	r3, #1
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	6073      	str	r3, [r6, #4]
 8008e5a:	dd1b      	ble.n	8008e94 <_scanf_i+0x150>
 8008e5c:	6833      	ldr	r3, [r6, #0]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	6033      	str	r3, [r6, #0]
 8008e62:	68a3      	ldr	r3, [r4, #8]
 8008e64:	3b01      	subs	r3, #1
 8008e66:	60a3      	str	r3, [r4, #8]
 8008e68:	e7d9      	b.n	8008e1e <_scanf_i+0xda>
 8008e6a:	f1bb 0f02 	cmp.w	fp, #2
 8008e6e:	d1ae      	bne.n	8008dce <_scanf_i+0x8a>
 8008e70:	6822      	ldr	r2, [r4, #0]
 8008e72:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008e76:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008e7a:	d1bf      	bne.n	8008dfc <_scanf_i+0xb8>
 8008e7c:	2110      	movs	r1, #16
 8008e7e:	6061      	str	r1, [r4, #4]
 8008e80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e84:	e7a2      	b.n	8008dcc <_scanf_i+0x88>
 8008e86:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008e8a:	6022      	str	r2, [r4, #0]
 8008e8c:	780b      	ldrb	r3, [r1, #0]
 8008e8e:	f805 3b01 	strb.w	r3, [r5], #1
 8008e92:	e7de      	b.n	8008e52 <_scanf_i+0x10e>
 8008e94:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008e98:	4631      	mov	r1, r6
 8008e9a:	4650      	mov	r0, sl
 8008e9c:	4798      	blx	r3
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	d0df      	beq.n	8008e62 <_scanf_i+0x11e>
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	05d9      	lsls	r1, r3, #23
 8008ea6:	d50d      	bpl.n	8008ec4 <_scanf_i+0x180>
 8008ea8:	42bd      	cmp	r5, r7
 8008eaa:	d909      	bls.n	8008ec0 <_scanf_i+0x17c>
 8008eac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008eb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008eb4:	4632      	mov	r2, r6
 8008eb6:	4650      	mov	r0, sl
 8008eb8:	4798      	blx	r3
 8008eba:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8008ebe:	464d      	mov	r5, r9
 8008ec0:	42bd      	cmp	r5, r7
 8008ec2:	d028      	beq.n	8008f16 <_scanf_i+0x1d2>
 8008ec4:	6822      	ldr	r2, [r4, #0]
 8008ec6:	f012 0210 	ands.w	r2, r2, #16
 8008eca:	d113      	bne.n	8008ef4 <_scanf_i+0x1b0>
 8008ecc:	702a      	strb	r2, [r5, #0]
 8008ece:	6863      	ldr	r3, [r4, #4]
 8008ed0:	9e01      	ldr	r6, [sp, #4]
 8008ed2:	4639      	mov	r1, r7
 8008ed4:	4650      	mov	r0, sl
 8008ed6:	47b0      	blx	r6
 8008ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8008edc:	6821      	ldr	r1, [r4, #0]
 8008ede:	1d1a      	adds	r2, r3, #4
 8008ee0:	f8c8 2000 	str.w	r2, [r8]
 8008ee4:	f011 0f20 	tst.w	r1, #32
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	d00f      	beq.n	8008f0c <_scanf_i+0x1c8>
 8008eec:	6018      	str	r0, [r3, #0]
 8008eee:	68e3      	ldr	r3, [r4, #12]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	60e3      	str	r3, [r4, #12]
 8008ef4:	6923      	ldr	r3, [r4, #16]
 8008ef6:	1bed      	subs	r5, r5, r7
 8008ef8:	445d      	add	r5, fp
 8008efa:	442b      	add	r3, r5
 8008efc:	6123      	str	r3, [r4, #16]
 8008efe:	2000      	movs	r0, #0
 8008f00:	b007      	add	sp, #28
 8008f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f06:	f04f 0b00 	mov.w	fp, #0
 8008f0a:	e7ca      	b.n	8008ea2 <_scanf_i+0x15e>
 8008f0c:	07ca      	lsls	r2, r1, #31
 8008f0e:	bf4c      	ite	mi
 8008f10:	8018      	strhmi	r0, [r3, #0]
 8008f12:	6018      	strpl	r0, [r3, #0]
 8008f14:	e7eb      	b.n	8008eee <_scanf_i+0x1aa>
 8008f16:	2001      	movs	r0, #1
 8008f18:	e7f2      	b.n	8008f00 <_scanf_i+0x1bc>
 8008f1a:	bf00      	nop
 8008f1c:	08009c9c 	.word	0x08009c9c
 8008f20:	08008519 	.word	0x08008519
 8008f24:	080092bd 	.word	0x080092bd
 8008f28:	08009dfd 	.word	0x08009dfd

08008f2c <__sccl>:
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	780b      	ldrb	r3, [r1, #0]
 8008f30:	4604      	mov	r4, r0
 8008f32:	2b5e      	cmp	r3, #94	@ 0x5e
 8008f34:	bf0b      	itete	eq
 8008f36:	784b      	ldrbeq	r3, [r1, #1]
 8008f38:	1c4a      	addne	r2, r1, #1
 8008f3a:	1c8a      	addeq	r2, r1, #2
 8008f3c:	2100      	movne	r1, #0
 8008f3e:	bf08      	it	eq
 8008f40:	2101      	moveq	r1, #1
 8008f42:	3801      	subs	r0, #1
 8008f44:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008f48:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008f4c:	42a8      	cmp	r0, r5
 8008f4e:	d1fb      	bne.n	8008f48 <__sccl+0x1c>
 8008f50:	b90b      	cbnz	r3, 8008f56 <__sccl+0x2a>
 8008f52:	1e50      	subs	r0, r2, #1
 8008f54:	bd70      	pop	{r4, r5, r6, pc}
 8008f56:	f081 0101 	eor.w	r1, r1, #1
 8008f5a:	54e1      	strb	r1, [r4, r3]
 8008f5c:	4610      	mov	r0, r2
 8008f5e:	4602      	mov	r2, r0
 8008f60:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008f64:	2d2d      	cmp	r5, #45	@ 0x2d
 8008f66:	d005      	beq.n	8008f74 <__sccl+0x48>
 8008f68:	2d5d      	cmp	r5, #93	@ 0x5d
 8008f6a:	d016      	beq.n	8008f9a <__sccl+0x6e>
 8008f6c:	2d00      	cmp	r5, #0
 8008f6e:	d0f1      	beq.n	8008f54 <__sccl+0x28>
 8008f70:	462b      	mov	r3, r5
 8008f72:	e7f2      	b.n	8008f5a <__sccl+0x2e>
 8008f74:	7846      	ldrb	r6, [r0, #1]
 8008f76:	2e5d      	cmp	r6, #93	@ 0x5d
 8008f78:	d0fa      	beq.n	8008f70 <__sccl+0x44>
 8008f7a:	42b3      	cmp	r3, r6
 8008f7c:	dcf8      	bgt.n	8008f70 <__sccl+0x44>
 8008f7e:	3002      	adds	r0, #2
 8008f80:	461a      	mov	r2, r3
 8008f82:	3201      	adds	r2, #1
 8008f84:	4296      	cmp	r6, r2
 8008f86:	54a1      	strb	r1, [r4, r2]
 8008f88:	dcfb      	bgt.n	8008f82 <__sccl+0x56>
 8008f8a:	1af2      	subs	r2, r6, r3
 8008f8c:	3a01      	subs	r2, #1
 8008f8e:	1c5d      	adds	r5, r3, #1
 8008f90:	42b3      	cmp	r3, r6
 8008f92:	bfa8      	it	ge
 8008f94:	2200      	movge	r2, #0
 8008f96:	18ab      	adds	r3, r5, r2
 8008f98:	e7e1      	b.n	8008f5e <__sccl+0x32>
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	e7da      	b.n	8008f54 <__sccl+0x28>
	...

08008fa0 <__sflush_r>:
 8008fa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa8:	0716      	lsls	r6, r2, #28
 8008faa:	4605      	mov	r5, r0
 8008fac:	460c      	mov	r4, r1
 8008fae:	d454      	bmi.n	800905a <__sflush_r+0xba>
 8008fb0:	684b      	ldr	r3, [r1, #4]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	dc02      	bgt.n	8008fbc <__sflush_r+0x1c>
 8008fb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	dd48      	ble.n	800904e <__sflush_r+0xae>
 8008fbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fbe:	2e00      	cmp	r6, #0
 8008fc0:	d045      	beq.n	800904e <__sflush_r+0xae>
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008fc8:	682f      	ldr	r7, [r5, #0]
 8008fca:	6a21      	ldr	r1, [r4, #32]
 8008fcc:	602b      	str	r3, [r5, #0]
 8008fce:	d030      	beq.n	8009032 <__sflush_r+0x92>
 8008fd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008fd2:	89a3      	ldrh	r3, [r4, #12]
 8008fd4:	0759      	lsls	r1, r3, #29
 8008fd6:	d505      	bpl.n	8008fe4 <__sflush_r+0x44>
 8008fd8:	6863      	ldr	r3, [r4, #4]
 8008fda:	1ad2      	subs	r2, r2, r3
 8008fdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008fde:	b10b      	cbz	r3, 8008fe4 <__sflush_r+0x44>
 8008fe0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008fe2:	1ad2      	subs	r2, r2, r3
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fe8:	6a21      	ldr	r1, [r4, #32]
 8008fea:	4628      	mov	r0, r5
 8008fec:	47b0      	blx	r6
 8008fee:	1c43      	adds	r3, r0, #1
 8008ff0:	89a3      	ldrh	r3, [r4, #12]
 8008ff2:	d106      	bne.n	8009002 <__sflush_r+0x62>
 8008ff4:	6829      	ldr	r1, [r5, #0]
 8008ff6:	291d      	cmp	r1, #29
 8008ff8:	d82b      	bhi.n	8009052 <__sflush_r+0xb2>
 8008ffa:	4a2a      	ldr	r2, [pc, #168]	@ (80090a4 <__sflush_r+0x104>)
 8008ffc:	410a      	asrs	r2, r1
 8008ffe:	07d6      	lsls	r6, r2, #31
 8009000:	d427      	bmi.n	8009052 <__sflush_r+0xb2>
 8009002:	2200      	movs	r2, #0
 8009004:	6062      	str	r2, [r4, #4]
 8009006:	04d9      	lsls	r1, r3, #19
 8009008:	6922      	ldr	r2, [r4, #16]
 800900a:	6022      	str	r2, [r4, #0]
 800900c:	d504      	bpl.n	8009018 <__sflush_r+0x78>
 800900e:	1c42      	adds	r2, r0, #1
 8009010:	d101      	bne.n	8009016 <__sflush_r+0x76>
 8009012:	682b      	ldr	r3, [r5, #0]
 8009014:	b903      	cbnz	r3, 8009018 <__sflush_r+0x78>
 8009016:	6560      	str	r0, [r4, #84]	@ 0x54
 8009018:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800901a:	602f      	str	r7, [r5, #0]
 800901c:	b1b9      	cbz	r1, 800904e <__sflush_r+0xae>
 800901e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009022:	4299      	cmp	r1, r3
 8009024:	d002      	beq.n	800902c <__sflush_r+0x8c>
 8009026:	4628      	mov	r0, r5
 8009028:	f7ff fb7a 	bl	8008720 <_free_r>
 800902c:	2300      	movs	r3, #0
 800902e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009030:	e00d      	b.n	800904e <__sflush_r+0xae>
 8009032:	2301      	movs	r3, #1
 8009034:	4628      	mov	r0, r5
 8009036:	47b0      	blx	r6
 8009038:	4602      	mov	r2, r0
 800903a:	1c50      	adds	r0, r2, #1
 800903c:	d1c9      	bne.n	8008fd2 <__sflush_r+0x32>
 800903e:	682b      	ldr	r3, [r5, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d0c6      	beq.n	8008fd2 <__sflush_r+0x32>
 8009044:	2b1d      	cmp	r3, #29
 8009046:	d001      	beq.n	800904c <__sflush_r+0xac>
 8009048:	2b16      	cmp	r3, #22
 800904a:	d11e      	bne.n	800908a <__sflush_r+0xea>
 800904c:	602f      	str	r7, [r5, #0]
 800904e:	2000      	movs	r0, #0
 8009050:	e022      	b.n	8009098 <__sflush_r+0xf8>
 8009052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009056:	b21b      	sxth	r3, r3
 8009058:	e01b      	b.n	8009092 <__sflush_r+0xf2>
 800905a:	690f      	ldr	r7, [r1, #16]
 800905c:	2f00      	cmp	r7, #0
 800905e:	d0f6      	beq.n	800904e <__sflush_r+0xae>
 8009060:	0793      	lsls	r3, r2, #30
 8009062:	680e      	ldr	r6, [r1, #0]
 8009064:	bf08      	it	eq
 8009066:	694b      	ldreq	r3, [r1, #20]
 8009068:	600f      	str	r7, [r1, #0]
 800906a:	bf18      	it	ne
 800906c:	2300      	movne	r3, #0
 800906e:	eba6 0807 	sub.w	r8, r6, r7
 8009072:	608b      	str	r3, [r1, #8]
 8009074:	f1b8 0f00 	cmp.w	r8, #0
 8009078:	dde9      	ble.n	800904e <__sflush_r+0xae>
 800907a:	6a21      	ldr	r1, [r4, #32]
 800907c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800907e:	4643      	mov	r3, r8
 8009080:	463a      	mov	r2, r7
 8009082:	4628      	mov	r0, r5
 8009084:	47b0      	blx	r6
 8009086:	2800      	cmp	r0, #0
 8009088:	dc08      	bgt.n	800909c <__sflush_r+0xfc>
 800908a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800908e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009092:	81a3      	strh	r3, [r4, #12]
 8009094:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800909c:	4407      	add	r7, r0
 800909e:	eba8 0800 	sub.w	r8, r8, r0
 80090a2:	e7e7      	b.n	8009074 <__sflush_r+0xd4>
 80090a4:	dfbffffe 	.word	0xdfbffffe

080090a8 <_fflush_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	690b      	ldr	r3, [r1, #16]
 80090ac:	4605      	mov	r5, r0
 80090ae:	460c      	mov	r4, r1
 80090b0:	b913      	cbnz	r3, 80090b8 <_fflush_r+0x10>
 80090b2:	2500      	movs	r5, #0
 80090b4:	4628      	mov	r0, r5
 80090b6:	bd38      	pop	{r3, r4, r5, pc}
 80090b8:	b118      	cbz	r0, 80090c2 <_fflush_r+0x1a>
 80090ba:	6a03      	ldr	r3, [r0, #32]
 80090bc:	b90b      	cbnz	r3, 80090c2 <_fflush_r+0x1a>
 80090be:	f7ff f999 	bl	80083f4 <__sinit>
 80090c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d0f3      	beq.n	80090b2 <_fflush_r+0xa>
 80090ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090cc:	07d0      	lsls	r0, r2, #31
 80090ce:	d404      	bmi.n	80090da <_fflush_r+0x32>
 80090d0:	0599      	lsls	r1, r3, #22
 80090d2:	d402      	bmi.n	80090da <_fflush_r+0x32>
 80090d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090d6:	f7ff fb20 	bl	800871a <__retarget_lock_acquire_recursive>
 80090da:	4628      	mov	r0, r5
 80090dc:	4621      	mov	r1, r4
 80090de:	f7ff ff5f 	bl	8008fa0 <__sflush_r>
 80090e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090e4:	07da      	lsls	r2, r3, #31
 80090e6:	4605      	mov	r5, r0
 80090e8:	d4e4      	bmi.n	80090b4 <_fflush_r+0xc>
 80090ea:	89a3      	ldrh	r3, [r4, #12]
 80090ec:	059b      	lsls	r3, r3, #22
 80090ee:	d4e1      	bmi.n	80090b4 <_fflush_r+0xc>
 80090f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090f2:	f7ff fb13 	bl	800871c <__retarget_lock_release_recursive>
 80090f6:	e7dd      	b.n	80090b4 <_fflush_r+0xc>

080090f8 <__malloc_lock>:
 80090f8:	4801      	ldr	r0, [pc, #4]	@ (8009100 <__malloc_lock+0x8>)
 80090fa:	f7ff bb0e 	b.w	800871a <__retarget_lock_acquire_recursive>
 80090fe:	bf00      	nop
 8009100:	200005a8 	.word	0x200005a8

08009104 <__malloc_unlock>:
 8009104:	4801      	ldr	r0, [pc, #4]	@ (800910c <__malloc_unlock+0x8>)
 8009106:	f7ff bb09 	b.w	800871c <__retarget_lock_release_recursive>
 800910a:	bf00      	nop
 800910c:	200005a8 	.word	0x200005a8

08009110 <__submore>:
 8009110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009114:	460c      	mov	r4, r1
 8009116:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009118:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800911c:	4299      	cmp	r1, r3
 800911e:	d11d      	bne.n	800915c <__submore+0x4c>
 8009120:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009124:	f7ff fd34 	bl	8008b90 <_malloc_r>
 8009128:	b918      	cbnz	r0, 8009132 <__submore+0x22>
 800912a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800912e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009132:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009136:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009138:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800913c:	6360      	str	r0, [r4, #52]	@ 0x34
 800913e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009142:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009146:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800914a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800914e:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8009152:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009156:	6020      	str	r0, [r4, #0]
 8009158:	2000      	movs	r0, #0
 800915a:	e7e8      	b.n	800912e <__submore+0x1e>
 800915c:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800915e:	0077      	lsls	r7, r6, #1
 8009160:	463a      	mov	r2, r7
 8009162:	f000 f80f 	bl	8009184 <_realloc_r>
 8009166:	4605      	mov	r5, r0
 8009168:	2800      	cmp	r0, #0
 800916a:	d0de      	beq.n	800912a <__submore+0x1a>
 800916c:	eb00 0806 	add.w	r8, r0, r6
 8009170:	4601      	mov	r1, r0
 8009172:	4632      	mov	r2, r6
 8009174:	4640      	mov	r0, r8
 8009176:	f000 f9cb 	bl	8009510 <memcpy>
 800917a:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800917e:	f8c4 8000 	str.w	r8, [r4]
 8009182:	e7e9      	b.n	8009158 <__submore+0x48>

08009184 <_realloc_r>:
 8009184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009188:	4680      	mov	r8, r0
 800918a:	4615      	mov	r5, r2
 800918c:	460c      	mov	r4, r1
 800918e:	b921      	cbnz	r1, 800919a <_realloc_r+0x16>
 8009190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009194:	4611      	mov	r1, r2
 8009196:	f7ff bcfb 	b.w	8008b90 <_malloc_r>
 800919a:	b92a      	cbnz	r2, 80091a8 <_realloc_r+0x24>
 800919c:	f7ff fac0 	bl	8008720 <_free_r>
 80091a0:	2400      	movs	r4, #0
 80091a2:	4620      	mov	r0, r4
 80091a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a8:	f000 f9c0 	bl	800952c <_malloc_usable_size_r>
 80091ac:	4285      	cmp	r5, r0
 80091ae:	4606      	mov	r6, r0
 80091b0:	d802      	bhi.n	80091b8 <_realloc_r+0x34>
 80091b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80091b6:	d8f4      	bhi.n	80091a2 <_realloc_r+0x1e>
 80091b8:	4629      	mov	r1, r5
 80091ba:	4640      	mov	r0, r8
 80091bc:	f7ff fce8 	bl	8008b90 <_malloc_r>
 80091c0:	4607      	mov	r7, r0
 80091c2:	2800      	cmp	r0, #0
 80091c4:	d0ec      	beq.n	80091a0 <_realloc_r+0x1c>
 80091c6:	42b5      	cmp	r5, r6
 80091c8:	462a      	mov	r2, r5
 80091ca:	4621      	mov	r1, r4
 80091cc:	bf28      	it	cs
 80091ce:	4632      	movcs	r2, r6
 80091d0:	f000 f99e 	bl	8009510 <memcpy>
 80091d4:	4621      	mov	r1, r4
 80091d6:	4640      	mov	r0, r8
 80091d8:	f7ff faa2 	bl	8008720 <_free_r>
 80091dc:	463c      	mov	r4, r7
 80091de:	e7e0      	b.n	80091a2 <_realloc_r+0x1e>

080091e0 <_strtoul_l.constprop.0>:
 80091e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091e4:	4e34      	ldr	r6, [pc, #208]	@ (80092b8 <_strtoul_l.constprop.0+0xd8>)
 80091e6:	4686      	mov	lr, r0
 80091e8:	460d      	mov	r5, r1
 80091ea:	4628      	mov	r0, r5
 80091ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091f0:	5d37      	ldrb	r7, [r6, r4]
 80091f2:	f017 0708 	ands.w	r7, r7, #8
 80091f6:	d1f8      	bne.n	80091ea <_strtoul_l.constprop.0+0xa>
 80091f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80091fa:	d12f      	bne.n	800925c <_strtoul_l.constprop.0+0x7c>
 80091fc:	782c      	ldrb	r4, [r5, #0]
 80091fe:	2701      	movs	r7, #1
 8009200:	1c85      	adds	r5, r0, #2
 8009202:	f033 0010 	bics.w	r0, r3, #16
 8009206:	d109      	bne.n	800921c <_strtoul_l.constprop.0+0x3c>
 8009208:	2c30      	cmp	r4, #48	@ 0x30
 800920a:	d12c      	bne.n	8009266 <_strtoul_l.constprop.0+0x86>
 800920c:	7828      	ldrb	r0, [r5, #0]
 800920e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009212:	2858      	cmp	r0, #88	@ 0x58
 8009214:	d127      	bne.n	8009266 <_strtoul_l.constprop.0+0x86>
 8009216:	786c      	ldrb	r4, [r5, #1]
 8009218:	2310      	movs	r3, #16
 800921a:	3502      	adds	r5, #2
 800921c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8009220:	2600      	movs	r6, #0
 8009222:	fbb8 f8f3 	udiv	r8, r8, r3
 8009226:	fb03 f908 	mul.w	r9, r3, r8
 800922a:	ea6f 0909 	mvn.w	r9, r9
 800922e:	4630      	mov	r0, r6
 8009230:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009234:	f1bc 0f09 	cmp.w	ip, #9
 8009238:	d81c      	bhi.n	8009274 <_strtoul_l.constprop.0+0x94>
 800923a:	4664      	mov	r4, ip
 800923c:	42a3      	cmp	r3, r4
 800923e:	dd2a      	ble.n	8009296 <_strtoul_l.constprop.0+0xb6>
 8009240:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8009244:	d007      	beq.n	8009256 <_strtoul_l.constprop.0+0x76>
 8009246:	4580      	cmp	r8, r0
 8009248:	d322      	bcc.n	8009290 <_strtoul_l.constprop.0+0xb0>
 800924a:	d101      	bne.n	8009250 <_strtoul_l.constprop.0+0x70>
 800924c:	45a1      	cmp	r9, r4
 800924e:	db1f      	blt.n	8009290 <_strtoul_l.constprop.0+0xb0>
 8009250:	fb00 4003 	mla	r0, r0, r3, r4
 8009254:	2601      	movs	r6, #1
 8009256:	f815 4b01 	ldrb.w	r4, [r5], #1
 800925a:	e7e9      	b.n	8009230 <_strtoul_l.constprop.0+0x50>
 800925c:	2c2b      	cmp	r4, #43	@ 0x2b
 800925e:	bf04      	itt	eq
 8009260:	782c      	ldrbeq	r4, [r5, #0]
 8009262:	1c85      	addeq	r5, r0, #2
 8009264:	e7cd      	b.n	8009202 <_strtoul_l.constprop.0+0x22>
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1d8      	bne.n	800921c <_strtoul_l.constprop.0+0x3c>
 800926a:	2c30      	cmp	r4, #48	@ 0x30
 800926c:	bf0c      	ite	eq
 800926e:	2308      	moveq	r3, #8
 8009270:	230a      	movne	r3, #10
 8009272:	e7d3      	b.n	800921c <_strtoul_l.constprop.0+0x3c>
 8009274:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009278:	f1bc 0f19 	cmp.w	ip, #25
 800927c:	d801      	bhi.n	8009282 <_strtoul_l.constprop.0+0xa2>
 800927e:	3c37      	subs	r4, #55	@ 0x37
 8009280:	e7dc      	b.n	800923c <_strtoul_l.constprop.0+0x5c>
 8009282:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009286:	f1bc 0f19 	cmp.w	ip, #25
 800928a:	d804      	bhi.n	8009296 <_strtoul_l.constprop.0+0xb6>
 800928c:	3c57      	subs	r4, #87	@ 0x57
 800928e:	e7d5      	b.n	800923c <_strtoul_l.constprop.0+0x5c>
 8009290:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8009294:	e7df      	b.n	8009256 <_strtoul_l.constprop.0+0x76>
 8009296:	1c73      	adds	r3, r6, #1
 8009298:	d106      	bne.n	80092a8 <_strtoul_l.constprop.0+0xc8>
 800929a:	2322      	movs	r3, #34	@ 0x22
 800929c:	f8ce 3000 	str.w	r3, [lr]
 80092a0:	4630      	mov	r0, r6
 80092a2:	b932      	cbnz	r2, 80092b2 <_strtoul_l.constprop.0+0xd2>
 80092a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092a8:	b107      	cbz	r7, 80092ac <_strtoul_l.constprop.0+0xcc>
 80092aa:	4240      	negs	r0, r0
 80092ac:	2a00      	cmp	r2, #0
 80092ae:	d0f9      	beq.n	80092a4 <_strtoul_l.constprop.0+0xc4>
 80092b0:	b106      	cbz	r6, 80092b4 <_strtoul_l.constprop.0+0xd4>
 80092b2:	1e69      	subs	r1, r5, #1
 80092b4:	6011      	str	r1, [r2, #0]
 80092b6:	e7f5      	b.n	80092a4 <_strtoul_l.constprop.0+0xc4>
 80092b8:	08009ce9 	.word	0x08009ce9

080092bc <_strtoul_r>:
 80092bc:	f7ff bf90 	b.w	80091e0 <_strtoul_l.constprop.0>

080092c0 <__swbuf_r>:
 80092c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c2:	460e      	mov	r6, r1
 80092c4:	4614      	mov	r4, r2
 80092c6:	4605      	mov	r5, r0
 80092c8:	b118      	cbz	r0, 80092d2 <__swbuf_r+0x12>
 80092ca:	6a03      	ldr	r3, [r0, #32]
 80092cc:	b90b      	cbnz	r3, 80092d2 <__swbuf_r+0x12>
 80092ce:	f7ff f891 	bl	80083f4 <__sinit>
 80092d2:	69a3      	ldr	r3, [r4, #24]
 80092d4:	60a3      	str	r3, [r4, #8]
 80092d6:	89a3      	ldrh	r3, [r4, #12]
 80092d8:	071a      	lsls	r2, r3, #28
 80092da:	d501      	bpl.n	80092e0 <__swbuf_r+0x20>
 80092dc:	6923      	ldr	r3, [r4, #16]
 80092de:	b943      	cbnz	r3, 80092f2 <__swbuf_r+0x32>
 80092e0:	4621      	mov	r1, r4
 80092e2:	4628      	mov	r0, r5
 80092e4:	f000 f82a 	bl	800933c <__swsetup_r>
 80092e8:	b118      	cbz	r0, 80092f2 <__swbuf_r+0x32>
 80092ea:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80092ee:	4638      	mov	r0, r7
 80092f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	6922      	ldr	r2, [r4, #16]
 80092f6:	1a98      	subs	r0, r3, r2
 80092f8:	6963      	ldr	r3, [r4, #20]
 80092fa:	b2f6      	uxtb	r6, r6
 80092fc:	4283      	cmp	r3, r0
 80092fe:	4637      	mov	r7, r6
 8009300:	dc05      	bgt.n	800930e <__swbuf_r+0x4e>
 8009302:	4621      	mov	r1, r4
 8009304:	4628      	mov	r0, r5
 8009306:	f7ff fecf 	bl	80090a8 <_fflush_r>
 800930a:	2800      	cmp	r0, #0
 800930c:	d1ed      	bne.n	80092ea <__swbuf_r+0x2a>
 800930e:	68a3      	ldr	r3, [r4, #8]
 8009310:	3b01      	subs	r3, #1
 8009312:	60a3      	str	r3, [r4, #8]
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	1c5a      	adds	r2, r3, #1
 8009318:	6022      	str	r2, [r4, #0]
 800931a:	701e      	strb	r6, [r3, #0]
 800931c:	6962      	ldr	r2, [r4, #20]
 800931e:	1c43      	adds	r3, r0, #1
 8009320:	429a      	cmp	r2, r3
 8009322:	d004      	beq.n	800932e <__swbuf_r+0x6e>
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	07db      	lsls	r3, r3, #31
 8009328:	d5e1      	bpl.n	80092ee <__swbuf_r+0x2e>
 800932a:	2e0a      	cmp	r6, #10
 800932c:	d1df      	bne.n	80092ee <__swbuf_r+0x2e>
 800932e:	4621      	mov	r1, r4
 8009330:	4628      	mov	r0, r5
 8009332:	f7ff feb9 	bl	80090a8 <_fflush_r>
 8009336:	2800      	cmp	r0, #0
 8009338:	d0d9      	beq.n	80092ee <__swbuf_r+0x2e>
 800933a:	e7d6      	b.n	80092ea <__swbuf_r+0x2a>

0800933c <__swsetup_r>:
 800933c:	b538      	push	{r3, r4, r5, lr}
 800933e:	4b29      	ldr	r3, [pc, #164]	@ (80093e4 <__swsetup_r+0xa8>)
 8009340:	4605      	mov	r5, r0
 8009342:	6818      	ldr	r0, [r3, #0]
 8009344:	460c      	mov	r4, r1
 8009346:	b118      	cbz	r0, 8009350 <__swsetup_r+0x14>
 8009348:	6a03      	ldr	r3, [r0, #32]
 800934a:	b90b      	cbnz	r3, 8009350 <__swsetup_r+0x14>
 800934c:	f7ff f852 	bl	80083f4 <__sinit>
 8009350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009354:	0719      	lsls	r1, r3, #28
 8009356:	d422      	bmi.n	800939e <__swsetup_r+0x62>
 8009358:	06da      	lsls	r2, r3, #27
 800935a:	d407      	bmi.n	800936c <__swsetup_r+0x30>
 800935c:	2209      	movs	r2, #9
 800935e:	602a      	str	r2, [r5, #0]
 8009360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009364:	81a3      	strh	r3, [r4, #12]
 8009366:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800936a:	e033      	b.n	80093d4 <__swsetup_r+0x98>
 800936c:	0758      	lsls	r0, r3, #29
 800936e:	d512      	bpl.n	8009396 <__swsetup_r+0x5a>
 8009370:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009372:	b141      	cbz	r1, 8009386 <__swsetup_r+0x4a>
 8009374:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009378:	4299      	cmp	r1, r3
 800937a:	d002      	beq.n	8009382 <__swsetup_r+0x46>
 800937c:	4628      	mov	r0, r5
 800937e:	f7ff f9cf 	bl	8008720 <_free_r>
 8009382:	2300      	movs	r3, #0
 8009384:	6363      	str	r3, [r4, #52]	@ 0x34
 8009386:	89a3      	ldrh	r3, [r4, #12]
 8009388:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800938c:	81a3      	strh	r3, [r4, #12]
 800938e:	2300      	movs	r3, #0
 8009390:	6063      	str	r3, [r4, #4]
 8009392:	6923      	ldr	r3, [r4, #16]
 8009394:	6023      	str	r3, [r4, #0]
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	f043 0308 	orr.w	r3, r3, #8
 800939c:	81a3      	strh	r3, [r4, #12]
 800939e:	6923      	ldr	r3, [r4, #16]
 80093a0:	b94b      	cbnz	r3, 80093b6 <__swsetup_r+0x7a>
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80093a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093ac:	d003      	beq.n	80093b6 <__swsetup_r+0x7a>
 80093ae:	4621      	mov	r1, r4
 80093b0:	4628      	mov	r0, r5
 80093b2:	f000 f83f 	bl	8009434 <__smakebuf_r>
 80093b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ba:	f013 0201 	ands.w	r2, r3, #1
 80093be:	d00a      	beq.n	80093d6 <__swsetup_r+0x9a>
 80093c0:	2200      	movs	r2, #0
 80093c2:	60a2      	str	r2, [r4, #8]
 80093c4:	6962      	ldr	r2, [r4, #20]
 80093c6:	4252      	negs	r2, r2
 80093c8:	61a2      	str	r2, [r4, #24]
 80093ca:	6922      	ldr	r2, [r4, #16]
 80093cc:	b942      	cbnz	r2, 80093e0 <__swsetup_r+0xa4>
 80093ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80093d2:	d1c5      	bne.n	8009360 <__swsetup_r+0x24>
 80093d4:	bd38      	pop	{r3, r4, r5, pc}
 80093d6:	0799      	lsls	r1, r3, #30
 80093d8:	bf58      	it	pl
 80093da:	6962      	ldrpl	r2, [r4, #20]
 80093dc:	60a2      	str	r2, [r4, #8]
 80093de:	e7f4      	b.n	80093ca <__swsetup_r+0x8e>
 80093e0:	2000      	movs	r0, #0
 80093e2:	e7f7      	b.n	80093d4 <__swsetup_r+0x98>
 80093e4:	2000009c 	.word	0x2000009c

080093e8 <__swhatbuf_r>:
 80093e8:	b570      	push	{r4, r5, r6, lr}
 80093ea:	460c      	mov	r4, r1
 80093ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093f0:	2900      	cmp	r1, #0
 80093f2:	b096      	sub	sp, #88	@ 0x58
 80093f4:	4615      	mov	r5, r2
 80093f6:	461e      	mov	r6, r3
 80093f8:	da0d      	bge.n	8009416 <__swhatbuf_r+0x2e>
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009400:	f04f 0100 	mov.w	r1, #0
 8009404:	bf14      	ite	ne
 8009406:	2340      	movne	r3, #64	@ 0x40
 8009408:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800940c:	2000      	movs	r0, #0
 800940e:	6031      	str	r1, [r6, #0]
 8009410:	602b      	str	r3, [r5, #0]
 8009412:	b016      	add	sp, #88	@ 0x58
 8009414:	bd70      	pop	{r4, r5, r6, pc}
 8009416:	466a      	mov	r2, sp
 8009418:	f000 f848 	bl	80094ac <_fstat_r>
 800941c:	2800      	cmp	r0, #0
 800941e:	dbec      	blt.n	80093fa <__swhatbuf_r+0x12>
 8009420:	9901      	ldr	r1, [sp, #4]
 8009422:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009426:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800942a:	4259      	negs	r1, r3
 800942c:	4159      	adcs	r1, r3
 800942e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009432:	e7eb      	b.n	800940c <__swhatbuf_r+0x24>

08009434 <__smakebuf_r>:
 8009434:	898b      	ldrh	r3, [r1, #12]
 8009436:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009438:	079d      	lsls	r5, r3, #30
 800943a:	4606      	mov	r6, r0
 800943c:	460c      	mov	r4, r1
 800943e:	d507      	bpl.n	8009450 <__smakebuf_r+0x1c>
 8009440:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	6123      	str	r3, [r4, #16]
 8009448:	2301      	movs	r3, #1
 800944a:	6163      	str	r3, [r4, #20]
 800944c:	b003      	add	sp, #12
 800944e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009450:	ab01      	add	r3, sp, #4
 8009452:	466a      	mov	r2, sp
 8009454:	f7ff ffc8 	bl	80093e8 <__swhatbuf_r>
 8009458:	9f00      	ldr	r7, [sp, #0]
 800945a:	4605      	mov	r5, r0
 800945c:	4639      	mov	r1, r7
 800945e:	4630      	mov	r0, r6
 8009460:	f7ff fb96 	bl	8008b90 <_malloc_r>
 8009464:	b948      	cbnz	r0, 800947a <__smakebuf_r+0x46>
 8009466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800946a:	059a      	lsls	r2, r3, #22
 800946c:	d4ee      	bmi.n	800944c <__smakebuf_r+0x18>
 800946e:	f023 0303 	bic.w	r3, r3, #3
 8009472:	f043 0302 	orr.w	r3, r3, #2
 8009476:	81a3      	strh	r3, [r4, #12]
 8009478:	e7e2      	b.n	8009440 <__smakebuf_r+0xc>
 800947a:	89a3      	ldrh	r3, [r4, #12]
 800947c:	6020      	str	r0, [r4, #0]
 800947e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009482:	81a3      	strh	r3, [r4, #12]
 8009484:	9b01      	ldr	r3, [sp, #4]
 8009486:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800948a:	b15b      	cbz	r3, 80094a4 <__smakebuf_r+0x70>
 800948c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009490:	4630      	mov	r0, r6
 8009492:	f000 f81d 	bl	80094d0 <_isatty_r>
 8009496:	b128      	cbz	r0, 80094a4 <__smakebuf_r+0x70>
 8009498:	89a3      	ldrh	r3, [r4, #12]
 800949a:	f023 0303 	bic.w	r3, r3, #3
 800949e:	f043 0301 	orr.w	r3, r3, #1
 80094a2:	81a3      	strh	r3, [r4, #12]
 80094a4:	89a3      	ldrh	r3, [r4, #12]
 80094a6:	431d      	orrs	r5, r3
 80094a8:	81a5      	strh	r5, [r4, #12]
 80094aa:	e7cf      	b.n	800944c <__smakebuf_r+0x18>

080094ac <_fstat_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4d07      	ldr	r5, [pc, #28]	@ (80094cc <_fstat_r+0x20>)
 80094b0:	2300      	movs	r3, #0
 80094b2:	4604      	mov	r4, r0
 80094b4:	4608      	mov	r0, r1
 80094b6:	4611      	mov	r1, r2
 80094b8:	602b      	str	r3, [r5, #0]
 80094ba:	f7fa fb19 	bl	8003af0 <_fstat>
 80094be:	1c43      	adds	r3, r0, #1
 80094c0:	d102      	bne.n	80094c8 <_fstat_r+0x1c>
 80094c2:	682b      	ldr	r3, [r5, #0]
 80094c4:	b103      	cbz	r3, 80094c8 <_fstat_r+0x1c>
 80094c6:	6023      	str	r3, [r4, #0]
 80094c8:	bd38      	pop	{r3, r4, r5, pc}
 80094ca:	bf00      	nop
 80094cc:	200005a4 	.word	0x200005a4

080094d0 <_isatty_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	4d06      	ldr	r5, [pc, #24]	@ (80094ec <_isatty_r+0x1c>)
 80094d4:	2300      	movs	r3, #0
 80094d6:	4604      	mov	r4, r0
 80094d8:	4608      	mov	r0, r1
 80094da:	602b      	str	r3, [r5, #0]
 80094dc:	f7fa fb18 	bl	8003b10 <_isatty>
 80094e0:	1c43      	adds	r3, r0, #1
 80094e2:	d102      	bne.n	80094ea <_isatty_r+0x1a>
 80094e4:	682b      	ldr	r3, [r5, #0]
 80094e6:	b103      	cbz	r3, 80094ea <_isatty_r+0x1a>
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	bd38      	pop	{r3, r4, r5, pc}
 80094ec:	200005a4 	.word	0x200005a4

080094f0 <_sbrk_r>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	4d06      	ldr	r5, [pc, #24]	@ (800950c <_sbrk_r+0x1c>)
 80094f4:	2300      	movs	r3, #0
 80094f6:	4604      	mov	r4, r0
 80094f8:	4608      	mov	r0, r1
 80094fa:	602b      	str	r3, [r5, #0]
 80094fc:	f7fa fb20 	bl	8003b40 <_sbrk>
 8009500:	1c43      	adds	r3, r0, #1
 8009502:	d102      	bne.n	800950a <_sbrk_r+0x1a>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	b103      	cbz	r3, 800950a <_sbrk_r+0x1a>
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	bd38      	pop	{r3, r4, r5, pc}
 800950c:	200005a4 	.word	0x200005a4

08009510 <memcpy>:
 8009510:	440a      	add	r2, r1
 8009512:	4291      	cmp	r1, r2
 8009514:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009518:	d100      	bne.n	800951c <memcpy+0xc>
 800951a:	4770      	bx	lr
 800951c:	b510      	push	{r4, lr}
 800951e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009526:	4291      	cmp	r1, r2
 8009528:	d1f9      	bne.n	800951e <memcpy+0xe>
 800952a:	bd10      	pop	{r4, pc}

0800952c <_malloc_usable_size_r>:
 800952c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009530:	1f18      	subs	r0, r3, #4
 8009532:	2b00      	cmp	r3, #0
 8009534:	bfbc      	itt	lt
 8009536:	580b      	ldrlt	r3, [r1, r0]
 8009538:	18c0      	addlt	r0, r0, r3
 800953a:	4770      	bx	lr

0800953c <atan2>:
 800953c:	f000 b800 	b.w	8009540 <__ieee754_atan2>

08009540 <__ieee754_atan2>:
 8009540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009544:	ec57 6b11 	vmov	r6, r7, d1
 8009548:	4273      	negs	r3, r6
 800954a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80096c8 <__ieee754_atan2+0x188>
 800954e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8009552:	4333      	orrs	r3, r6
 8009554:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009558:	4543      	cmp	r3, r8
 800955a:	ec51 0b10 	vmov	r0, r1, d0
 800955e:	4635      	mov	r5, r6
 8009560:	d809      	bhi.n	8009576 <__ieee754_atan2+0x36>
 8009562:	4244      	negs	r4, r0
 8009564:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009568:	4304      	orrs	r4, r0
 800956a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800956e:	4544      	cmp	r4, r8
 8009570:	468e      	mov	lr, r1
 8009572:	4681      	mov	r9, r0
 8009574:	d907      	bls.n	8009586 <__ieee754_atan2+0x46>
 8009576:	4632      	mov	r2, r6
 8009578:	463b      	mov	r3, r7
 800957a:	f7f6 feaf 	bl	80002dc <__adddf3>
 800957e:	ec41 0b10 	vmov	d0, r0, r1
 8009582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009586:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800958a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800958e:	4334      	orrs	r4, r6
 8009590:	d103      	bne.n	800959a <__ieee754_atan2+0x5a>
 8009592:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009596:	f000 b8c7 	b.w	8009728 <atan>
 800959a:	17bc      	asrs	r4, r7, #30
 800959c:	f004 0402 	and.w	r4, r4, #2
 80095a0:	ea53 0909 	orrs.w	r9, r3, r9
 80095a4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80095a8:	d107      	bne.n	80095ba <__ieee754_atan2+0x7a>
 80095aa:	2c02      	cmp	r4, #2
 80095ac:	d05f      	beq.n	800966e <__ieee754_atan2+0x12e>
 80095ae:	2c03      	cmp	r4, #3
 80095b0:	d1e5      	bne.n	800957e <__ieee754_atan2+0x3e>
 80095b2:	a141      	add	r1, pc, #260	@ (adr r1, 80096b8 <__ieee754_atan2+0x178>)
 80095b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095b8:	e7e1      	b.n	800957e <__ieee754_atan2+0x3e>
 80095ba:	4315      	orrs	r5, r2
 80095bc:	d106      	bne.n	80095cc <__ieee754_atan2+0x8c>
 80095be:	f1be 0f00 	cmp.w	lr, #0
 80095c2:	da5f      	bge.n	8009684 <__ieee754_atan2+0x144>
 80095c4:	a13e      	add	r1, pc, #248	@ (adr r1, 80096c0 <__ieee754_atan2+0x180>)
 80095c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095ca:	e7d8      	b.n	800957e <__ieee754_atan2+0x3e>
 80095cc:	4542      	cmp	r2, r8
 80095ce:	d10f      	bne.n	80095f0 <__ieee754_atan2+0xb0>
 80095d0:	4293      	cmp	r3, r2
 80095d2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 80095d6:	d107      	bne.n	80095e8 <__ieee754_atan2+0xa8>
 80095d8:	2c02      	cmp	r4, #2
 80095da:	d84c      	bhi.n	8009676 <__ieee754_atan2+0x136>
 80095dc:	4b34      	ldr	r3, [pc, #208]	@ (80096b0 <__ieee754_atan2+0x170>)
 80095de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80095e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095e6:	e7ca      	b.n	800957e <__ieee754_atan2+0x3e>
 80095e8:	2c02      	cmp	r4, #2
 80095ea:	d848      	bhi.n	800967e <__ieee754_atan2+0x13e>
 80095ec:	4b31      	ldr	r3, [pc, #196]	@ (80096b4 <__ieee754_atan2+0x174>)
 80095ee:	e7f6      	b.n	80095de <__ieee754_atan2+0x9e>
 80095f0:	4543      	cmp	r3, r8
 80095f2:	d0e4      	beq.n	80095be <__ieee754_atan2+0x7e>
 80095f4:	1a9b      	subs	r3, r3, r2
 80095f6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80095fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80095fe:	da1e      	bge.n	800963e <__ieee754_atan2+0xfe>
 8009600:	2f00      	cmp	r7, #0
 8009602:	da01      	bge.n	8009608 <__ieee754_atan2+0xc8>
 8009604:	323c      	adds	r2, #60	@ 0x3c
 8009606:	db1e      	blt.n	8009646 <__ieee754_atan2+0x106>
 8009608:	4632      	mov	r2, r6
 800960a:	463b      	mov	r3, r7
 800960c:	f7f7 f946 	bl	800089c <__aeabi_ddiv>
 8009610:	ec41 0b10 	vmov	d0, r0, r1
 8009614:	f000 fa20 	bl	8009a58 <fabs>
 8009618:	f000 f886 	bl	8009728 <atan>
 800961c:	ec51 0b10 	vmov	r0, r1, d0
 8009620:	2c01      	cmp	r4, #1
 8009622:	d013      	beq.n	800964c <__ieee754_atan2+0x10c>
 8009624:	2c02      	cmp	r4, #2
 8009626:	d015      	beq.n	8009654 <__ieee754_atan2+0x114>
 8009628:	2c00      	cmp	r4, #0
 800962a:	d0a8      	beq.n	800957e <__ieee754_atan2+0x3e>
 800962c:	a318      	add	r3, pc, #96	@ (adr r3, 8009690 <__ieee754_atan2+0x150>)
 800962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009632:	f7f6 fe51 	bl	80002d8 <__aeabi_dsub>
 8009636:	a318      	add	r3, pc, #96	@ (adr r3, 8009698 <__ieee754_atan2+0x158>)
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	e014      	b.n	8009668 <__ieee754_atan2+0x128>
 800963e:	a118      	add	r1, pc, #96	@ (adr r1, 80096a0 <__ieee754_atan2+0x160>)
 8009640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009644:	e7ec      	b.n	8009620 <__ieee754_atan2+0xe0>
 8009646:	2000      	movs	r0, #0
 8009648:	2100      	movs	r1, #0
 800964a:	e7e9      	b.n	8009620 <__ieee754_atan2+0xe0>
 800964c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009650:	4619      	mov	r1, r3
 8009652:	e794      	b.n	800957e <__ieee754_atan2+0x3e>
 8009654:	a30e      	add	r3, pc, #56	@ (adr r3, 8009690 <__ieee754_atan2+0x150>)
 8009656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965a:	f7f6 fe3d 	bl	80002d8 <__aeabi_dsub>
 800965e:	4602      	mov	r2, r0
 8009660:	460b      	mov	r3, r1
 8009662:	a10d      	add	r1, pc, #52	@ (adr r1, 8009698 <__ieee754_atan2+0x158>)
 8009664:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009668:	f7f6 fe36 	bl	80002d8 <__aeabi_dsub>
 800966c:	e787      	b.n	800957e <__ieee754_atan2+0x3e>
 800966e:	a10a      	add	r1, pc, #40	@ (adr r1, 8009698 <__ieee754_atan2+0x158>)
 8009670:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009674:	e783      	b.n	800957e <__ieee754_atan2+0x3e>
 8009676:	a10c      	add	r1, pc, #48	@ (adr r1, 80096a8 <__ieee754_atan2+0x168>)
 8009678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800967c:	e77f      	b.n	800957e <__ieee754_atan2+0x3e>
 800967e:	2000      	movs	r0, #0
 8009680:	2100      	movs	r1, #0
 8009682:	e77c      	b.n	800957e <__ieee754_atan2+0x3e>
 8009684:	a106      	add	r1, pc, #24	@ (adr r1, 80096a0 <__ieee754_atan2+0x160>)
 8009686:	e9d1 0100 	ldrd	r0, r1, [r1]
 800968a:	e778      	b.n	800957e <__ieee754_atan2+0x3e>
 800968c:	f3af 8000 	nop.w
 8009690:	33145c07 	.word	0x33145c07
 8009694:	3ca1a626 	.word	0x3ca1a626
 8009698:	54442d18 	.word	0x54442d18
 800969c:	400921fb 	.word	0x400921fb
 80096a0:	54442d18 	.word	0x54442d18
 80096a4:	3ff921fb 	.word	0x3ff921fb
 80096a8:	54442d18 	.word	0x54442d18
 80096ac:	3fe921fb 	.word	0x3fe921fb
 80096b0:	08009e20 	.word	0x08009e20
 80096b4:	08009e08 	.word	0x08009e08
 80096b8:	54442d18 	.word	0x54442d18
 80096bc:	c00921fb 	.word	0xc00921fb
 80096c0:	54442d18 	.word	0x54442d18
 80096c4:	bff921fb 	.word	0xbff921fb
 80096c8:	7ff00000 	.word	0x7ff00000

080096cc <sqrt>:
 80096cc:	b538      	push	{r3, r4, r5, lr}
 80096ce:	ed2d 8b02 	vpush	{d8}
 80096d2:	ec55 4b10 	vmov	r4, r5, d0
 80096d6:	f000 f9c7 	bl	8009a68 <__ieee754_sqrt>
 80096da:	4622      	mov	r2, r4
 80096dc:	462b      	mov	r3, r5
 80096de:	4620      	mov	r0, r4
 80096e0:	4629      	mov	r1, r5
 80096e2:	eeb0 8a40 	vmov.f32	s16, s0
 80096e6:	eef0 8a60 	vmov.f32	s17, s1
 80096ea:	f7f7 fa47 	bl	8000b7c <__aeabi_dcmpun>
 80096ee:	b990      	cbnz	r0, 8009716 <sqrt+0x4a>
 80096f0:	2200      	movs	r2, #0
 80096f2:	2300      	movs	r3, #0
 80096f4:	4620      	mov	r0, r4
 80096f6:	4629      	mov	r1, r5
 80096f8:	f7f7 fa18 	bl	8000b2c <__aeabi_dcmplt>
 80096fc:	b158      	cbz	r0, 8009716 <sqrt+0x4a>
 80096fe:	f7fe ffe1 	bl	80086c4 <__errno>
 8009702:	2321      	movs	r3, #33	@ 0x21
 8009704:	6003      	str	r3, [r0, #0]
 8009706:	2200      	movs	r2, #0
 8009708:	2300      	movs	r3, #0
 800970a:	4610      	mov	r0, r2
 800970c:	4619      	mov	r1, r3
 800970e:	f7f7 f8c5 	bl	800089c <__aeabi_ddiv>
 8009712:	ec41 0b18 	vmov	d8, r0, r1
 8009716:	eeb0 0a48 	vmov.f32	s0, s16
 800971a:	eef0 0a68 	vmov.f32	s1, s17
 800971e:	ecbd 8b02 	vpop	{d8}
 8009722:	bd38      	pop	{r3, r4, r5, pc}
 8009724:	0000      	movs	r0, r0
	...

08009728 <atan>:
 8009728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972c:	ec55 4b10 	vmov	r4, r5, d0
 8009730:	4bbf      	ldr	r3, [pc, #764]	@ (8009a30 <atan+0x308>)
 8009732:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8009736:	429e      	cmp	r6, r3
 8009738:	46ab      	mov	fp, r5
 800973a:	d918      	bls.n	800976e <atan+0x46>
 800973c:	4bbd      	ldr	r3, [pc, #756]	@ (8009a34 <atan+0x30c>)
 800973e:	429e      	cmp	r6, r3
 8009740:	d801      	bhi.n	8009746 <atan+0x1e>
 8009742:	d109      	bne.n	8009758 <atan+0x30>
 8009744:	b144      	cbz	r4, 8009758 <atan+0x30>
 8009746:	4622      	mov	r2, r4
 8009748:	462b      	mov	r3, r5
 800974a:	4620      	mov	r0, r4
 800974c:	4629      	mov	r1, r5
 800974e:	f7f6 fdc5 	bl	80002dc <__adddf3>
 8009752:	4604      	mov	r4, r0
 8009754:	460d      	mov	r5, r1
 8009756:	e006      	b.n	8009766 <atan+0x3e>
 8009758:	f1bb 0f00 	cmp.w	fp, #0
 800975c:	f340 812b 	ble.w	80099b6 <atan+0x28e>
 8009760:	a597      	add	r5, pc, #604	@ (adr r5, 80099c0 <atan+0x298>)
 8009762:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009766:	ec45 4b10 	vmov	d0, r4, r5
 800976a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800976e:	4bb2      	ldr	r3, [pc, #712]	@ (8009a38 <atan+0x310>)
 8009770:	429e      	cmp	r6, r3
 8009772:	d813      	bhi.n	800979c <atan+0x74>
 8009774:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8009778:	429e      	cmp	r6, r3
 800977a:	d80c      	bhi.n	8009796 <atan+0x6e>
 800977c:	a392      	add	r3, pc, #584	@ (adr r3, 80099c8 <atan+0x2a0>)
 800977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009782:	4620      	mov	r0, r4
 8009784:	4629      	mov	r1, r5
 8009786:	f7f6 fda9 	bl	80002dc <__adddf3>
 800978a:	4bac      	ldr	r3, [pc, #688]	@ (8009a3c <atan+0x314>)
 800978c:	2200      	movs	r2, #0
 800978e:	f7f7 f9eb 	bl	8000b68 <__aeabi_dcmpgt>
 8009792:	2800      	cmp	r0, #0
 8009794:	d1e7      	bne.n	8009766 <atan+0x3e>
 8009796:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800979a:	e029      	b.n	80097f0 <atan+0xc8>
 800979c:	f000 f95c 	bl	8009a58 <fabs>
 80097a0:	4ba7      	ldr	r3, [pc, #668]	@ (8009a40 <atan+0x318>)
 80097a2:	429e      	cmp	r6, r3
 80097a4:	ec55 4b10 	vmov	r4, r5, d0
 80097a8:	f200 80bc 	bhi.w	8009924 <atan+0x1fc>
 80097ac:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80097b0:	429e      	cmp	r6, r3
 80097b2:	f200 809e 	bhi.w	80098f2 <atan+0x1ca>
 80097b6:	4622      	mov	r2, r4
 80097b8:	462b      	mov	r3, r5
 80097ba:	4620      	mov	r0, r4
 80097bc:	4629      	mov	r1, r5
 80097be:	f7f6 fd8d 	bl	80002dc <__adddf3>
 80097c2:	4b9e      	ldr	r3, [pc, #632]	@ (8009a3c <atan+0x314>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	f7f6 fd87 	bl	80002d8 <__aeabi_dsub>
 80097ca:	2200      	movs	r2, #0
 80097cc:	4606      	mov	r6, r0
 80097ce:	460f      	mov	r7, r1
 80097d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80097d4:	4620      	mov	r0, r4
 80097d6:	4629      	mov	r1, r5
 80097d8:	f7f6 fd80 	bl	80002dc <__adddf3>
 80097dc:	4602      	mov	r2, r0
 80097de:	460b      	mov	r3, r1
 80097e0:	4630      	mov	r0, r6
 80097e2:	4639      	mov	r1, r7
 80097e4:	f7f7 f85a 	bl	800089c <__aeabi_ddiv>
 80097e8:	f04f 0a00 	mov.w	sl, #0
 80097ec:	4604      	mov	r4, r0
 80097ee:	460d      	mov	r5, r1
 80097f0:	4622      	mov	r2, r4
 80097f2:	462b      	mov	r3, r5
 80097f4:	4620      	mov	r0, r4
 80097f6:	4629      	mov	r1, r5
 80097f8:	f7f6 ff26 	bl	8000648 <__aeabi_dmul>
 80097fc:	4602      	mov	r2, r0
 80097fe:	460b      	mov	r3, r1
 8009800:	4680      	mov	r8, r0
 8009802:	4689      	mov	r9, r1
 8009804:	f7f6 ff20 	bl	8000648 <__aeabi_dmul>
 8009808:	a371      	add	r3, pc, #452	@ (adr r3, 80099d0 <atan+0x2a8>)
 800980a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980e:	4606      	mov	r6, r0
 8009810:	460f      	mov	r7, r1
 8009812:	f7f6 ff19 	bl	8000648 <__aeabi_dmul>
 8009816:	a370      	add	r3, pc, #448	@ (adr r3, 80099d8 <atan+0x2b0>)
 8009818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981c:	f7f6 fd5e 	bl	80002dc <__adddf3>
 8009820:	4632      	mov	r2, r6
 8009822:	463b      	mov	r3, r7
 8009824:	f7f6 ff10 	bl	8000648 <__aeabi_dmul>
 8009828:	a36d      	add	r3, pc, #436	@ (adr r3, 80099e0 <atan+0x2b8>)
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	f7f6 fd55 	bl	80002dc <__adddf3>
 8009832:	4632      	mov	r2, r6
 8009834:	463b      	mov	r3, r7
 8009836:	f7f6 ff07 	bl	8000648 <__aeabi_dmul>
 800983a:	a36b      	add	r3, pc, #428	@ (adr r3, 80099e8 <atan+0x2c0>)
 800983c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009840:	f7f6 fd4c 	bl	80002dc <__adddf3>
 8009844:	4632      	mov	r2, r6
 8009846:	463b      	mov	r3, r7
 8009848:	f7f6 fefe 	bl	8000648 <__aeabi_dmul>
 800984c:	a368      	add	r3, pc, #416	@ (adr r3, 80099f0 <atan+0x2c8>)
 800984e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009852:	f7f6 fd43 	bl	80002dc <__adddf3>
 8009856:	4632      	mov	r2, r6
 8009858:	463b      	mov	r3, r7
 800985a:	f7f6 fef5 	bl	8000648 <__aeabi_dmul>
 800985e:	a366      	add	r3, pc, #408	@ (adr r3, 80099f8 <atan+0x2d0>)
 8009860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009864:	f7f6 fd3a 	bl	80002dc <__adddf3>
 8009868:	4642      	mov	r2, r8
 800986a:	464b      	mov	r3, r9
 800986c:	f7f6 feec 	bl	8000648 <__aeabi_dmul>
 8009870:	a363      	add	r3, pc, #396	@ (adr r3, 8009a00 <atan+0x2d8>)
 8009872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009876:	4680      	mov	r8, r0
 8009878:	4689      	mov	r9, r1
 800987a:	4630      	mov	r0, r6
 800987c:	4639      	mov	r1, r7
 800987e:	f7f6 fee3 	bl	8000648 <__aeabi_dmul>
 8009882:	a361      	add	r3, pc, #388	@ (adr r3, 8009a08 <atan+0x2e0>)
 8009884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009888:	f7f6 fd26 	bl	80002d8 <__aeabi_dsub>
 800988c:	4632      	mov	r2, r6
 800988e:	463b      	mov	r3, r7
 8009890:	f7f6 feda 	bl	8000648 <__aeabi_dmul>
 8009894:	a35e      	add	r3, pc, #376	@ (adr r3, 8009a10 <atan+0x2e8>)
 8009896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989a:	f7f6 fd1d 	bl	80002d8 <__aeabi_dsub>
 800989e:	4632      	mov	r2, r6
 80098a0:	463b      	mov	r3, r7
 80098a2:	f7f6 fed1 	bl	8000648 <__aeabi_dmul>
 80098a6:	a35c      	add	r3, pc, #368	@ (adr r3, 8009a18 <atan+0x2f0>)
 80098a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ac:	f7f6 fd14 	bl	80002d8 <__aeabi_dsub>
 80098b0:	4632      	mov	r2, r6
 80098b2:	463b      	mov	r3, r7
 80098b4:	f7f6 fec8 	bl	8000648 <__aeabi_dmul>
 80098b8:	a359      	add	r3, pc, #356	@ (adr r3, 8009a20 <atan+0x2f8>)
 80098ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098be:	f7f6 fd0b 	bl	80002d8 <__aeabi_dsub>
 80098c2:	4632      	mov	r2, r6
 80098c4:	463b      	mov	r3, r7
 80098c6:	f7f6 febf 	bl	8000648 <__aeabi_dmul>
 80098ca:	4602      	mov	r2, r0
 80098cc:	460b      	mov	r3, r1
 80098ce:	4640      	mov	r0, r8
 80098d0:	4649      	mov	r1, r9
 80098d2:	f7f6 fd03 	bl	80002dc <__adddf3>
 80098d6:	4622      	mov	r2, r4
 80098d8:	462b      	mov	r3, r5
 80098da:	f7f6 feb5 	bl	8000648 <__aeabi_dmul>
 80098de:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 80098e2:	4602      	mov	r2, r0
 80098e4:	460b      	mov	r3, r1
 80098e6:	d148      	bne.n	800997a <atan+0x252>
 80098e8:	4620      	mov	r0, r4
 80098ea:	4629      	mov	r1, r5
 80098ec:	f7f6 fcf4 	bl	80002d8 <__aeabi_dsub>
 80098f0:	e72f      	b.n	8009752 <atan+0x2a>
 80098f2:	4b52      	ldr	r3, [pc, #328]	@ (8009a3c <atan+0x314>)
 80098f4:	2200      	movs	r2, #0
 80098f6:	4620      	mov	r0, r4
 80098f8:	4629      	mov	r1, r5
 80098fa:	f7f6 fced 	bl	80002d8 <__aeabi_dsub>
 80098fe:	4b4f      	ldr	r3, [pc, #316]	@ (8009a3c <atan+0x314>)
 8009900:	4606      	mov	r6, r0
 8009902:	460f      	mov	r7, r1
 8009904:	2200      	movs	r2, #0
 8009906:	4620      	mov	r0, r4
 8009908:	4629      	mov	r1, r5
 800990a:	f7f6 fce7 	bl	80002dc <__adddf3>
 800990e:	4602      	mov	r2, r0
 8009910:	460b      	mov	r3, r1
 8009912:	4630      	mov	r0, r6
 8009914:	4639      	mov	r1, r7
 8009916:	f7f6 ffc1 	bl	800089c <__aeabi_ddiv>
 800991a:	f04f 0a01 	mov.w	sl, #1
 800991e:	4604      	mov	r4, r0
 8009920:	460d      	mov	r5, r1
 8009922:	e765      	b.n	80097f0 <atan+0xc8>
 8009924:	4b47      	ldr	r3, [pc, #284]	@ (8009a44 <atan+0x31c>)
 8009926:	429e      	cmp	r6, r3
 8009928:	d21c      	bcs.n	8009964 <atan+0x23c>
 800992a:	4b47      	ldr	r3, [pc, #284]	@ (8009a48 <atan+0x320>)
 800992c:	2200      	movs	r2, #0
 800992e:	4620      	mov	r0, r4
 8009930:	4629      	mov	r1, r5
 8009932:	f7f6 fcd1 	bl	80002d8 <__aeabi_dsub>
 8009936:	4b44      	ldr	r3, [pc, #272]	@ (8009a48 <atan+0x320>)
 8009938:	4606      	mov	r6, r0
 800993a:	460f      	mov	r7, r1
 800993c:	2200      	movs	r2, #0
 800993e:	4620      	mov	r0, r4
 8009940:	4629      	mov	r1, r5
 8009942:	f7f6 fe81 	bl	8000648 <__aeabi_dmul>
 8009946:	4b3d      	ldr	r3, [pc, #244]	@ (8009a3c <atan+0x314>)
 8009948:	2200      	movs	r2, #0
 800994a:	f7f6 fcc7 	bl	80002dc <__adddf3>
 800994e:	4602      	mov	r2, r0
 8009950:	460b      	mov	r3, r1
 8009952:	4630      	mov	r0, r6
 8009954:	4639      	mov	r1, r7
 8009956:	f7f6 ffa1 	bl	800089c <__aeabi_ddiv>
 800995a:	f04f 0a02 	mov.w	sl, #2
 800995e:	4604      	mov	r4, r0
 8009960:	460d      	mov	r5, r1
 8009962:	e745      	b.n	80097f0 <atan+0xc8>
 8009964:	4622      	mov	r2, r4
 8009966:	462b      	mov	r3, r5
 8009968:	4938      	ldr	r1, [pc, #224]	@ (8009a4c <atan+0x324>)
 800996a:	2000      	movs	r0, #0
 800996c:	f7f6 ff96 	bl	800089c <__aeabi_ddiv>
 8009970:	f04f 0a03 	mov.w	sl, #3
 8009974:	4604      	mov	r4, r0
 8009976:	460d      	mov	r5, r1
 8009978:	e73a      	b.n	80097f0 <atan+0xc8>
 800997a:	4b35      	ldr	r3, [pc, #212]	@ (8009a50 <atan+0x328>)
 800997c:	4e35      	ldr	r6, [pc, #212]	@ (8009a54 <atan+0x32c>)
 800997e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	f7f6 fca7 	bl	80002d8 <__aeabi_dsub>
 800998a:	4622      	mov	r2, r4
 800998c:	462b      	mov	r3, r5
 800998e:	f7f6 fca3 	bl	80002d8 <__aeabi_dsub>
 8009992:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009996:	4602      	mov	r2, r0
 8009998:	460b      	mov	r3, r1
 800999a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800999e:	f7f6 fc9b 	bl	80002d8 <__aeabi_dsub>
 80099a2:	f1bb 0f00 	cmp.w	fp, #0
 80099a6:	4604      	mov	r4, r0
 80099a8:	460d      	mov	r5, r1
 80099aa:	f6bf aedc 	bge.w	8009766 <atan+0x3e>
 80099ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80099b2:	461d      	mov	r5, r3
 80099b4:	e6d7      	b.n	8009766 <atan+0x3e>
 80099b6:	a51c      	add	r5, pc, #112	@ (adr r5, 8009a28 <atan+0x300>)
 80099b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80099bc:	e6d3      	b.n	8009766 <atan+0x3e>
 80099be:	bf00      	nop
 80099c0:	54442d18 	.word	0x54442d18
 80099c4:	3ff921fb 	.word	0x3ff921fb
 80099c8:	8800759c 	.word	0x8800759c
 80099cc:	7e37e43c 	.word	0x7e37e43c
 80099d0:	e322da11 	.word	0xe322da11
 80099d4:	3f90ad3a 	.word	0x3f90ad3a
 80099d8:	24760deb 	.word	0x24760deb
 80099dc:	3fa97b4b 	.word	0x3fa97b4b
 80099e0:	a0d03d51 	.word	0xa0d03d51
 80099e4:	3fb10d66 	.word	0x3fb10d66
 80099e8:	c54c206e 	.word	0xc54c206e
 80099ec:	3fb745cd 	.word	0x3fb745cd
 80099f0:	920083ff 	.word	0x920083ff
 80099f4:	3fc24924 	.word	0x3fc24924
 80099f8:	5555550d 	.word	0x5555550d
 80099fc:	3fd55555 	.word	0x3fd55555
 8009a00:	2c6a6c2f 	.word	0x2c6a6c2f
 8009a04:	bfa2b444 	.word	0xbfa2b444
 8009a08:	52defd9a 	.word	0x52defd9a
 8009a0c:	3fadde2d 	.word	0x3fadde2d
 8009a10:	af749a6d 	.word	0xaf749a6d
 8009a14:	3fb3b0f2 	.word	0x3fb3b0f2
 8009a18:	fe231671 	.word	0xfe231671
 8009a1c:	3fbc71c6 	.word	0x3fbc71c6
 8009a20:	9998ebc4 	.word	0x9998ebc4
 8009a24:	3fc99999 	.word	0x3fc99999
 8009a28:	54442d18 	.word	0x54442d18
 8009a2c:	bff921fb 	.word	0xbff921fb
 8009a30:	440fffff 	.word	0x440fffff
 8009a34:	7ff00000 	.word	0x7ff00000
 8009a38:	3fdbffff 	.word	0x3fdbffff
 8009a3c:	3ff00000 	.word	0x3ff00000
 8009a40:	3ff2ffff 	.word	0x3ff2ffff
 8009a44:	40038000 	.word	0x40038000
 8009a48:	3ff80000 	.word	0x3ff80000
 8009a4c:	bff00000 	.word	0xbff00000
 8009a50:	08009e38 	.word	0x08009e38
 8009a54:	08009e58 	.word	0x08009e58

08009a58 <fabs>:
 8009a58:	ec51 0b10 	vmov	r0, r1, d0
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009a62:	ec43 2b10 	vmov	d0, r2, r3
 8009a66:	4770      	bx	lr

08009a68 <__ieee754_sqrt>:
 8009a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a6c:	4a68      	ldr	r2, [pc, #416]	@ (8009c10 <__ieee754_sqrt+0x1a8>)
 8009a6e:	ec55 4b10 	vmov	r4, r5, d0
 8009a72:	43aa      	bics	r2, r5
 8009a74:	462b      	mov	r3, r5
 8009a76:	4621      	mov	r1, r4
 8009a78:	d110      	bne.n	8009a9c <__ieee754_sqrt+0x34>
 8009a7a:	4622      	mov	r2, r4
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	4629      	mov	r1, r5
 8009a80:	f7f6 fde2 	bl	8000648 <__aeabi_dmul>
 8009a84:	4602      	mov	r2, r0
 8009a86:	460b      	mov	r3, r1
 8009a88:	4620      	mov	r0, r4
 8009a8a:	4629      	mov	r1, r5
 8009a8c:	f7f6 fc26 	bl	80002dc <__adddf3>
 8009a90:	4604      	mov	r4, r0
 8009a92:	460d      	mov	r5, r1
 8009a94:	ec45 4b10 	vmov	d0, r4, r5
 8009a98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a9c:	2d00      	cmp	r5, #0
 8009a9e:	dc0e      	bgt.n	8009abe <__ieee754_sqrt+0x56>
 8009aa0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009aa4:	4322      	orrs	r2, r4
 8009aa6:	d0f5      	beq.n	8009a94 <__ieee754_sqrt+0x2c>
 8009aa8:	b19d      	cbz	r5, 8009ad2 <__ieee754_sqrt+0x6a>
 8009aaa:	4622      	mov	r2, r4
 8009aac:	4620      	mov	r0, r4
 8009aae:	4629      	mov	r1, r5
 8009ab0:	f7f6 fc12 	bl	80002d8 <__aeabi_dsub>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	f7f6 fef0 	bl	800089c <__aeabi_ddiv>
 8009abc:	e7e8      	b.n	8009a90 <__ieee754_sqrt+0x28>
 8009abe:	152a      	asrs	r2, r5, #20
 8009ac0:	d115      	bne.n	8009aee <__ieee754_sqrt+0x86>
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	e009      	b.n	8009ada <__ieee754_sqrt+0x72>
 8009ac6:	0acb      	lsrs	r3, r1, #11
 8009ac8:	3a15      	subs	r2, #21
 8009aca:	0549      	lsls	r1, r1, #21
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d0fa      	beq.n	8009ac6 <__ieee754_sqrt+0x5e>
 8009ad0:	e7f7      	b.n	8009ac2 <__ieee754_sqrt+0x5a>
 8009ad2:	462a      	mov	r2, r5
 8009ad4:	e7fa      	b.n	8009acc <__ieee754_sqrt+0x64>
 8009ad6:	005b      	lsls	r3, r3, #1
 8009ad8:	3001      	adds	r0, #1
 8009ada:	02dc      	lsls	r4, r3, #11
 8009adc:	d5fb      	bpl.n	8009ad6 <__ieee754_sqrt+0x6e>
 8009ade:	1e44      	subs	r4, r0, #1
 8009ae0:	1b12      	subs	r2, r2, r4
 8009ae2:	f1c0 0420 	rsb	r4, r0, #32
 8009ae6:	fa21 f404 	lsr.w	r4, r1, r4
 8009aea:	4323      	orrs	r3, r4
 8009aec:	4081      	lsls	r1, r0
 8009aee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009af2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009af6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009afa:	07d2      	lsls	r2, r2, #31
 8009afc:	bf5c      	itt	pl
 8009afe:	005b      	lslpl	r3, r3, #1
 8009b00:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009b04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009b08:	bf58      	it	pl
 8009b0a:	0049      	lslpl	r1, r1, #1
 8009b0c:	2600      	movs	r6, #0
 8009b0e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009b12:	106d      	asrs	r5, r5, #1
 8009b14:	0049      	lsls	r1, r1, #1
 8009b16:	2016      	movs	r0, #22
 8009b18:	4632      	mov	r2, r6
 8009b1a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009b1e:	1917      	adds	r7, r2, r4
 8009b20:	429f      	cmp	r7, r3
 8009b22:	bfde      	ittt	le
 8009b24:	193a      	addle	r2, r7, r4
 8009b26:	1bdb      	suble	r3, r3, r7
 8009b28:	1936      	addle	r6, r6, r4
 8009b2a:	0fcf      	lsrs	r7, r1, #31
 8009b2c:	3801      	subs	r0, #1
 8009b2e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009b32:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009b36:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009b3a:	d1f0      	bne.n	8009b1e <__ieee754_sqrt+0xb6>
 8009b3c:	4604      	mov	r4, r0
 8009b3e:	2720      	movs	r7, #32
 8009b40:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009b44:	429a      	cmp	r2, r3
 8009b46:	eb00 0e0c 	add.w	lr, r0, ip
 8009b4a:	db02      	blt.n	8009b52 <__ieee754_sqrt+0xea>
 8009b4c:	d113      	bne.n	8009b76 <__ieee754_sqrt+0x10e>
 8009b4e:	458e      	cmp	lr, r1
 8009b50:	d811      	bhi.n	8009b76 <__ieee754_sqrt+0x10e>
 8009b52:	f1be 0f00 	cmp.w	lr, #0
 8009b56:	eb0e 000c 	add.w	r0, lr, ip
 8009b5a:	da42      	bge.n	8009be2 <__ieee754_sqrt+0x17a>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	db40      	blt.n	8009be2 <__ieee754_sqrt+0x17a>
 8009b60:	f102 0801 	add.w	r8, r2, #1
 8009b64:	1a9b      	subs	r3, r3, r2
 8009b66:	458e      	cmp	lr, r1
 8009b68:	bf88      	it	hi
 8009b6a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8009b6e:	eba1 010e 	sub.w	r1, r1, lr
 8009b72:	4464      	add	r4, ip
 8009b74:	4642      	mov	r2, r8
 8009b76:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009b7a:	3f01      	subs	r7, #1
 8009b7c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009b80:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009b84:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009b88:	d1dc      	bne.n	8009b44 <__ieee754_sqrt+0xdc>
 8009b8a:	4319      	orrs	r1, r3
 8009b8c:	d01b      	beq.n	8009bc6 <__ieee754_sqrt+0x15e>
 8009b8e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009c14 <__ieee754_sqrt+0x1ac>
 8009b92:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009c18 <__ieee754_sqrt+0x1b0>
 8009b96:	e9da 0100 	ldrd	r0, r1, [sl]
 8009b9a:	e9db 2300 	ldrd	r2, r3, [fp]
 8009b9e:	f7f6 fb9b 	bl	80002d8 <__aeabi_dsub>
 8009ba2:	e9da 8900 	ldrd	r8, r9, [sl]
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4640      	mov	r0, r8
 8009bac:	4649      	mov	r1, r9
 8009bae:	f7f6 ffc7 	bl	8000b40 <__aeabi_dcmple>
 8009bb2:	b140      	cbz	r0, 8009bc6 <__ieee754_sqrt+0x15e>
 8009bb4:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8009bb8:	e9da 0100 	ldrd	r0, r1, [sl]
 8009bbc:	e9db 2300 	ldrd	r2, r3, [fp]
 8009bc0:	d111      	bne.n	8009be6 <__ieee754_sqrt+0x17e>
 8009bc2:	3601      	adds	r6, #1
 8009bc4:	463c      	mov	r4, r7
 8009bc6:	1072      	asrs	r2, r6, #1
 8009bc8:	0863      	lsrs	r3, r4, #1
 8009bca:	07f1      	lsls	r1, r6, #31
 8009bcc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009bd0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009bd4:	bf48      	it	mi
 8009bd6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009bda:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009bde:	4618      	mov	r0, r3
 8009be0:	e756      	b.n	8009a90 <__ieee754_sqrt+0x28>
 8009be2:	4690      	mov	r8, r2
 8009be4:	e7be      	b.n	8009b64 <__ieee754_sqrt+0xfc>
 8009be6:	f7f6 fb79 	bl	80002dc <__adddf3>
 8009bea:	e9da 8900 	ldrd	r8, r9, [sl]
 8009bee:	4602      	mov	r2, r0
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	4640      	mov	r0, r8
 8009bf4:	4649      	mov	r1, r9
 8009bf6:	f7f6 ff99 	bl	8000b2c <__aeabi_dcmplt>
 8009bfa:	b120      	cbz	r0, 8009c06 <__ieee754_sqrt+0x19e>
 8009bfc:	1ca0      	adds	r0, r4, #2
 8009bfe:	bf08      	it	eq
 8009c00:	3601      	addeq	r6, #1
 8009c02:	3402      	adds	r4, #2
 8009c04:	e7df      	b.n	8009bc6 <__ieee754_sqrt+0x15e>
 8009c06:	1c63      	adds	r3, r4, #1
 8009c08:	f023 0401 	bic.w	r4, r3, #1
 8009c0c:	e7db      	b.n	8009bc6 <__ieee754_sqrt+0x15e>
 8009c0e:	bf00      	nop
 8009c10:	7ff00000 	.word	0x7ff00000
 8009c14:	200000f8 	.word	0x200000f8
 8009c18:	200000f0 	.word	0x200000f0

08009c1c <_init>:
 8009c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1e:	bf00      	nop
 8009c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c22:	bc08      	pop	{r3}
 8009c24:	469e      	mov	lr, r3
 8009c26:	4770      	bx	lr

08009c28 <_fini>:
 8009c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2a:	bf00      	nop
 8009c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c2e:	bc08      	pop	{r3}
 8009c30:	469e      	mov	lr, r3
 8009c32:	4770      	bx	lr
