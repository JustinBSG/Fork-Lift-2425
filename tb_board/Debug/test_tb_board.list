
test_tb_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000452c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080046b4  080046b4  000056b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c4  080046c4  0000607c  2**0
                  CONTENTS
  4 .ARM          00000008  080046c4  080046c4  000056c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046cc  080046cc  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046cc  080046cc  000056cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046d0  080046d0  000056d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080046d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000607c  2**0
                  CONTENTS
 10 .bss          00000280  2000007c  2000007c  0000607c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002fc  200002fc  0000607c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac0a  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c8c  00000000  00000000  00010cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a78  00000000  00000000  00012948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000080e  00000000  00000000  000133c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002110b  00000000  00000000  00013bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c643  00000000  00000000  00034cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8dde  00000000  00000000  0004131c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010a0fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002be8  00000000  00000000  0010a140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  0010cd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800469c 	.word	0x0800469c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800469c 	.word	0x0800469c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	0000      	movs	r0, r0
	...

08000d48 <update_encoder>:
  encoder->velocity = 0;
  encoder->last_counter_value = 0;
}

// TODO: need to test
void update_encoder(EncoderData* encoder) {
 8000d48:	b5b0      	push	{r4, r5, r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  int current_counter = __HAL_TIM_GET_COUNTER(encoder->htim);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d58:	613b      	str	r3, [r7, #16]
  uint32_t duration = HAL_GetTick() - encoder->last_tick;
 8000d5a:	f001 fb39 	bl	80023d0 <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	60fb      	str	r3, [r7, #12]
  int num_pulse = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  if (duration <= 1)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	f240 8095 	bls.w	8000e9e <update_encoder+0x156>
    return;

  if (current_counter == encoder->last_counter_value)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d102      	bne.n	8000d84 <update_encoder+0x3c>
    num_pulse = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	e035      	b.n	8000df0 <update_encoder+0xa8>
  else if (current_counter > encoder->last_counter_value)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	dd18      	ble.n	8000dc0 <update_encoder+0x78>
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	2b10      	cmp	r3, #16
 8000d9c:	d10a      	bne.n	8000db4 <update_encoder+0x6c>
      num_pulse = (__HAL_TIM_GET_AUTORELOAD(encoder->htim) - current_counter + encoder->last_counter_value) * -1;
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	6892      	ldr	r2, [r2, #8]
 8000dae:	1a9b      	subs	r3, r3, r2
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	e01d      	b.n	8000df0 <update_encoder+0xa8>
    else
      num_pulse = current_counter - encoder->last_counter_value;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	e017      	b.n	8000df0 <update_encoder+0xa8>
  else if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	691b      	ldr	r3, [r3, #16]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 0310 	and.w	r3, r3, #16
 8000dcc:	2b10      	cmp	r3, #16
 8000dce:	d105      	bne.n	8000ddc <update_encoder+0x94>
    num_pulse = (encoder->last_counter_value - current_counter) * -1;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	e009      	b.n	8000df0 <update_encoder+0xa8>
  else
    num_pulse = __HAL_TIM_GET_AUTORELOAD(encoder->htim) - encoder->last_counter_value + current_counter;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	6892      	ldr	r2, [r2, #8]
 8000de8:	1a9a      	subs	r2, r3, r2
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4413      	add	r3, r2
 8000dee:	617b      	str	r3, [r7, #20]

  float temp_displacement = (float)num_pulse / encoder->_ppr * 2.0 * M_PI;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	ee07 3a90 	vmov	s15, r3
 8000df6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	8a9b      	ldrh	r3, [r3, #20]
 8000dfe:	ee07 3a90 	vmov	s15, r3
 8000e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e06:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e0a:	ee16 0a90 	vmov	r0, s13
 8000e0e:	f7ff fb3f 	bl	8000490 <__aeabi_f2d>
 8000e12:	4602      	mov	r2, r0
 8000e14:	460b      	mov	r3, r1
 8000e16:	f7ff f9dd 	bl	80001d4 <__adddf3>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	4610      	mov	r0, r2
 8000e20:	4619      	mov	r1, r3
 8000e22:	a322      	add	r3, pc, #136	@ (adr r3, 8000eac <update_encoder+0x164>)
 8000e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e28:	f7ff fb8a 	bl	8000540 <__aeabi_dmul>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4610      	mov	r0, r2
 8000e32:	4619      	mov	r1, r3
 8000e34:	f7ff fdbe 	bl	80009b4 <__aeabi_d2f>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60bb      	str	r3, [r7, #8]
  encoder->last_counter_value = current_counter;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	609a      	str	r2, [r3, #8]
  encoder->displacement += temp_displacement;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	ed93 7a00 	vldr	s14, [r3]
 8000e48:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	edc3 7a00 	vstr	s15, [r3]
  encoder->velocity = temp_displacement * 1000.0 / duration;
 8000e56:	68b8      	ldr	r0, [r7, #8]
 8000e58:	f7ff fb1a 	bl	8000490 <__aeabi_f2d>
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <update_encoder+0x160>)
 8000e62:	f7ff fb6d 	bl	8000540 <__aeabi_dmul>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4614      	mov	r4, r2
 8000e6c:	461d      	mov	r5, r3
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f7ff faec 	bl	800044c <__aeabi_ui2d>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	4620      	mov	r0, r4
 8000e7a:	4629      	mov	r1, r5
 8000e7c:	f7ff fc8a 	bl	8000794 <__aeabi_ddiv>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f7ff fd94 	bl	80009b4 <__aeabi_d2f>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	605a      	str	r2, [r3, #4]
  encoder->last_tick = HAL_GetTick();
 8000e92:	f001 fa9d 	bl	80023d0 <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	e000      	b.n	8000ea0 <update_encoder+0x158>
    return;
 8000e9e:	bf00      	nop
}
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	408f4000 	.word	0x408f4000
 8000eac:	54442d18 	.word	0x54442d18
 8000eb0:	400921fb 	.word	0x400921fb

08000eb4 <read_current_velocity>:

// TODO: need to test
WheelVelocity read_current_velocity(EncoderData* encoders) {
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b095      	sub	sp, #84	@ 0x54
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6178      	str	r0, [r7, #20]
  if (encoders == NULL)
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d107      	bne.n	8000ed2 <read_current_velocity+0x1e>
    return (WheelVelocity){0, 0, 0, 0};
 8000ec2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	e030      	b.n	8000f34 <read_current_velocity+0x80>

  WheelVelocity velocities = {.front_left = 0, .front_right = 0, .rear_left = 0, .rear_right = 0};
 8000ed2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000ee4:	e00d      	b.n	8000f02 <read_current_velocity+0x4e>
    update_encoder(&(encoders[i]));
 8000ee6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000ee8:	4613      	mov	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4413      	add	r3, r2
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff26 	bl	8000d48 <update_encoder>
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 8000efc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000efe:	3301      	adds	r3, #1
 8000f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000f02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	ddee      	ble.n	8000ee6 <read_current_velocity+0x32>

  velocities.front_left = encoders[FRONT_LEFT].velocity;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  velocities.front_right = encoders[FRONT_RIGHT].velocity;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3318      	adds	r3, #24
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	633b      	str	r3, [r7, #48]	@ 0x30
  velocities.rear_left = encoders[REAR_LEFT].velocity;
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3330      	adds	r3, #48	@ 0x30
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	637b      	str	r3, [r7, #52]	@ 0x34
  velocities.rear_right = encoders[REAR_RIGHT].velocity;
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3348      	adds	r3, #72	@ 0x48
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	63bb      	str	r3, [r7, #56]	@ 0x38

  return velocities;
 8000f26:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000f2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f34:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000f36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000f38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f3c:	ee06 0a10 	vmov	s12, r0
 8000f40:	ee06 1a90 	vmov	s13, r1
 8000f44:	ee07 2a10 	vmov	s14, r2
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eeb0 0a46 	vmov.f32	s0, s12
 8000f50:	eef0 0a66 	vmov.f32	s1, s13
 8000f54:	eeb0 1a47 	vmov.f32	s2, s14
 8000f58:	eef0 1a67 	vmov.f32	s3, s15
 8000f5c:	3754      	adds	r7, #84	@ 0x54
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd90      	pop	{r4, r7, pc}
	...

08000f64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	@ 0x28
 8000f68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b34      	ldr	r3, [pc, #208]	@ (8001050 <MX_GPIO_Init+0xec>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a33      	ldr	r2, [pc, #204]	@ (8001050 <MX_GPIO_Init+0xec>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b31      	ldr	r3, [pc, #196]	@ (8001050 <MX_GPIO_Init+0xec>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8001050 <MX_GPIO_Init+0xec>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a2c      	ldr	r2, [pc, #176]	@ (8001050 <MX_GPIO_Init+0xec>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8001050 <MX_GPIO_Init+0xec>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b26      	ldr	r3, [pc, #152]	@ (8001050 <MX_GPIO_Init+0xec>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a25      	ldr	r2, [pc, #148]	@ (8001050 <MX_GPIO_Init+0xec>)
 8000fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b23      	ldr	r3, [pc, #140]	@ (8001050 <MX_GPIO_Init+0xec>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001050 <MX_GPIO_Init+0xec>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8001050 <MX_GPIO_Init+0xec>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b1c      	ldr	r3, [pc, #112]	@ (8001050 <MX_GPIO_Init+0xec>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <MX_GPIO_Init+0xec>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a17      	ldr	r2, [pc, #92]	@ (8001050 <MX_GPIO_Init+0xec>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <MX_GPIO_Init+0xec>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800100c:	4811      	ldr	r0, [pc, #68]	@ (8001054 <MX_GPIO_Init+0xf0>)
 800100e:	f001 fcd5 	bl	80029bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZZ_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin;
 8001012:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	480a      	ldr	r0, [pc, #40]	@ (8001054 <MX_GPIO_Init+0xf0>)
 800102c:	f001 fb12 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_SWITCH_Pin */
  GPIO_InitStruct.Pin = USER_SWITCH_Pin;
 8001030:	2301      	movs	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001038:	2301      	movs	r3, #1
 800103a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_SWITCH_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	4805      	ldr	r0, [pc, #20]	@ (8001058 <MX_GPIO_Init+0xf4>)
 8001044:	f001 fb06 	bl	8002654 <HAL_GPIO_Init>

}
 8001048:	bf00      	nop
 800104a:	3728      	adds	r7, #40	@ 0x28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40023800 	.word	0x40023800
 8001054:	40020000 	.word	0x40020000
 8001058:	40021000 	.word	0x40021000

0800105c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001062:	f001 f94f 	bl	8002304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001066:	f000 f8b7 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106a:	f7ff ff7b 	bl	8000f64 <MX_GPIO_Init>
  MX_TIM2_Init();
 800106e:	f000 fc8f 	bl	8001990 <MX_TIM2_Init>
  MX_TIM10_Init();
 8001072:	f000 fe4b 	bl	8001d0c <MX_TIM10_Init>
  MX_TIM11_Init();
 8001076:	f000 fe97 	bl	8001da8 <MX_TIM11_Init>
  MX_TIM3_Init();
 800107a:	f000 fcdd 	bl	8001a38 <MX_TIM3_Init>
  MX_TIM4_Init();
 800107e:	f000 fd2f 	bl	8001ae0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001082:	f000 fd81 	bl	8001b88 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001086:	f000 fbbf 	bl	8001808 <MX_TIM1_Init>
  MX_TIM9_Init();
 800108a:	f000 fdd1 	bl	8001c30 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001094:	4842      	ldr	r0, [pc, #264]	@ (80011a0 <main+0x144>)
 8001096:	f001 fc91 	bl	80029bc <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800109a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800109e:	f001 f9a3 	bl	80023e8 <HAL_Delay>
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010a8:	483d      	ldr	r0, [pc, #244]	@ (80011a0 <main+0x144>)
 80010aa:	f001 fc87 	bl	80029bc <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 80010ae:	483d      	ldr	r0, [pc, #244]	@ (80011a4 <main+0x148>)
 80010b0:	f002 f938 	bl	8003324 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80010b4:	213c      	movs	r1, #60	@ 0x3c
 80010b6:	483b      	ldr	r0, [pc, #236]	@ (80011a4 <main+0x148>)
 80010b8:	f002 fb6c 	bl	8003794 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80010bc:	483a      	ldr	r0, [pc, #232]	@ (80011a8 <main+0x14c>)
 80010be:	f002 f931 	bl	8003324 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80010c2:	213c      	movs	r1, #60	@ 0x3c
 80010c4:	4838      	ldr	r0, [pc, #224]	@ (80011a8 <main+0x14c>)
 80010c6:	f002 fb65 	bl	8003794 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80010ca:	4838      	ldr	r0, [pc, #224]	@ (80011ac <main+0x150>)
 80010cc:	f002 f92a 	bl	8003324 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80010d0:	213c      	movs	r1, #60	@ 0x3c
 80010d2:	4836      	ldr	r0, [pc, #216]	@ (80011ac <main+0x150>)
 80010d4:	f002 fb5e 	bl	8003794 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80010d8:	4835      	ldr	r0, [pc, #212]	@ (80011b0 <main+0x154>)
 80010da:	f002 f923 	bl	8003324 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 80010de:	213c      	movs	r1, #60	@ 0x3c
 80010e0:	4833      	ldr	r0, [pc, #204]	@ (80011b0 <main+0x154>)
 80010e2:	f002 fb57 	bl	8003794 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80010e6:	2100      	movs	r1, #0
 80010e8:	4832      	ldr	r0, [pc, #200]	@ (80011b4 <main+0x158>)
 80010ea:	f002 f9e5 	bl	80034b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80010ee:	2100      	movs	r1, #0
 80010f0:	4831      	ldr	r0, [pc, #196]	@ (80011b8 <main+0x15c>)
 80010f2:	f002 f9e1 	bl	80034b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80010f6:	2100      	movs	r1, #0
 80010f8:	4830      	ldr	r0, [pc, #192]	@ (80011bc <main+0x160>)
 80010fa:	f002 f9dd 	bl	80034b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 80010fe:	2104      	movs	r1, #4
 8001100:	482e      	ldr	r0, [pc, #184]	@ (80011bc <main+0x160>)
 8001102:	f002 f9d9 	bl	80034b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001106:	2100      	movs	r1, #0
 8001108:	482d      	ldr	r0, [pc, #180]	@ (80011c0 <main+0x164>)
 800110a:	f002 f9d5 	bl	80034b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800110e:	2104      	movs	r1, #4
 8001110:	482b      	ldr	r0, [pc, #172]	@ (80011c0 <main+0x164>)
 8001112:	f002 f9d1 	bl	80034b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001116:	2108      	movs	r1, #8
 8001118:	4829      	ldr	r0, [pc, #164]	@ (80011c0 <main+0x164>)
 800111a:	f002 f9cd 	bl	80034b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800111e:	210c      	movs	r1, #12
 8001120:	4827      	ldr	r0, [pc, #156]	@ (80011c0 <main+0x164>)
 8001122:	f002 f9c9 	bl	80034b8 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (HAL_GPIO_ReadPin(USER_SWITCH_GPIO_Port, USER_SWITCH_Pin) == GPIO_PIN_RESET) {
 8001126:	2101      	movs	r1, #1
 8001128:	4826      	ldr	r0, [pc, #152]	@ (80011c4 <main+0x168>)
 800112a:	f001 fc2f 	bl	800298c <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d106      	bne.n	8001142 <main+0xe6>
      HAL_Delay(100);
 8001134:	2064      	movs	r0, #100	@ 0x64
 8001136:	f001 f957 	bl	80023e8 <HAL_Delay>
      wheels_control(test_target_pwm);
 800113a:	4b23      	ldr	r3, [pc, #140]	@ (80011c8 <main+0x16c>)
 800113c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800113e:	f000 fab1 	bl	80016a4 <wheels_control>
    }

    test_read_vel = read_current_velocity(encoders);
 8001142:	4822      	ldr	r0, [pc, #136]	@ (80011cc <main+0x170>)
 8001144:	f7ff feb6 	bl	8000eb4 <read_current_velocity>
 8001148:	eeb0 6a40 	vmov.f32	s12, s0
 800114c:	eef0 6a60 	vmov.f32	s13, s1
 8001150:	eeb0 7a41 	vmov.f32	s14, s2
 8001154:	eef0 7a61 	vmov.f32	s15, s3
 8001158:	4b1d      	ldr	r3, [pc, #116]	@ (80011d0 <main+0x174>)
 800115a:	ed83 6a00 	vstr	s12, [r3]
 800115e:	edc3 6a01 	vstr	s13, [r3, #4]
 8001162:	ed83 7a02 	vstr	s14, [r3, #8]
 8001166:	edc3 7a03 	vstr	s15, [r3, #12]
    test_read_pwm = wheel2pwm(test_read_vel);
 800116a:	4c1a      	ldr	r4, [pc, #104]	@ (80011d4 <main+0x178>)
 800116c:	463a      	mov	r2, r7
 800116e:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <main+0x174>)
 8001170:	ed93 6a00 	vldr	s12, [r3]
 8001174:	edd3 6a01 	vldr	s13, [r3, #4]
 8001178:	ed93 7a02 	vldr	s14, [r3, #8]
 800117c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001180:	eeb0 0a46 	vmov.f32	s0, s12
 8001184:	eef0 0a66 	vmov.f32	s1, s13
 8001188:	eeb0 1a47 	vmov.f32	s2, s14
 800118c:	eef0 1a67 	vmov.f32	s3, s15
 8001190:	4610      	mov	r0, r2
 8001192:	f000 f895 	bl	80012c0 <wheel2pwm>
 8001196:	463b      	mov	r3, r7
 8001198:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800119a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (HAL_GPIO_ReadPin(USER_SWITCH_GPIO_Port, USER_SWITCH_Pin) == GPIO_PIN_RESET) {
 800119e:	e7c2      	b.n	8001126 <main+0xca>
 80011a0:	40020000 	.word	0x40020000
 80011a4:	20000100 	.word	0x20000100
 80011a8:	20000148 	.word	0x20000148
 80011ac:	20000190 	.word	0x20000190
 80011b0:	200001d8 	.word	0x200001d8
 80011b4:	20000268 	.word	0x20000268
 80011b8:	200002b0 	.word	0x200002b0
 80011bc:	20000220 	.word	0x20000220
 80011c0:	200000b8 	.word	0x200000b8
 80011c4:	40021000 	.word	0x40021000
 80011c8:	20000060 	.word	0x20000060
 80011cc:	20000000 	.word	0x20000000
 80011d0:	200000a8 	.word	0x200000a8
 80011d4:	20000098 	.word	0x20000098

080011d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b094      	sub	sp, #80	@ 0x50
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 0320 	add.w	r3, r7, #32
 80011e2:	2230      	movs	r2, #48	@ 0x30
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 fa2c 	bl	8004644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	4b29      	ldr	r3, [pc, #164]	@ (80012a8 <SystemClock_Config+0xd0>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001204:	4a28      	ldr	r2, [pc, #160]	@ (80012a8 <SystemClock_Config+0xd0>)
 8001206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800120a:	6413      	str	r3, [r2, #64]	@ 0x40
 800120c:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <SystemClock_Config+0xd0>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	4b23      	ldr	r3, [pc, #140]	@ (80012ac <SystemClock_Config+0xd4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a22      	ldr	r2, [pc, #136]	@ (80012ac <SystemClock_Config+0xd4>)
 8001222:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b20      	ldr	r3, [pc, #128]	@ (80012ac <SystemClock_Config+0xd4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001234:	2301      	movs	r3, #1
 8001236:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001238:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001242:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001246:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001248:	2319      	movs	r3, #25
 800124a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800124c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001250:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001252:	2302      	movs	r3, #2
 8001254:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001256:	2304      	movs	r3, #4
 8001258:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	4618      	mov	r0, r3
 8001260:	f001 fbc6 	bl	80029f0 <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x96>
    Error_Handler();
 800126a:	f000 f821 	bl	80012b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800126e:	230f      	movs	r3, #15
 8001270:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001272:	2302      	movs	r3, #2
 8001274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800127a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800127e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001280:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001284:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2105      	movs	r1, #5
 800128c:	4618      	mov	r0, r3
 800128e:	f001 fe27 	bl	8002ee0 <HAL_RCC_ClockConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0xc4>
    Error_Handler();
 8001298:	f000 f80a 	bl	80012b0 <Error_Handler>
  }

  /** Enables the Clock Security System
   */
  HAL_RCC_EnableCSS();
 800129c:	f001 ff06 	bl	80030ac <HAL_RCC_EnableCSS>
}
 80012a0:	bf00      	nop
 80012a2:	3750      	adds	r7, #80	@ 0x50
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40007000 	.word	0x40007000

080012b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <Error_Handler+0x8>
 80012bc:	0000      	movs	r0, r0
	...

080012c0 <wheel2pwm>:
  float z_vel = (-wheel_vel.front_left + wheel_vel.front_right - wheel_vel.rear_left + wheel_vel.rear_right) * RADIUS_WHEEL / (4.0 * (LENGTH_CENTER_WHEEL_X + LENGTH_CENTER_WHEEL_Y));
  return (BaseVelocity){x_vel, y_vel, z_vel};
}

// TODO: need to test
WheelPWM wheel2pwm(WheelVelocity wheel_vel) {
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	b08e      	sub	sp, #56	@ 0x38
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6178      	str	r0, [r7, #20]
 80012c8:	eeb0 6a40 	vmov.f32	s12, s0
 80012cc:	eef0 6a60 	vmov.f32	s13, s1
 80012d0:	eeb0 7a41 	vmov.f32	s14, s2
 80012d4:	eef0 7a61 	vmov.f32	s15, s3
 80012d8:	ed87 6a01 	vstr	s12, [r7, #4]
 80012dc:	edc7 6a02 	vstr	s13, [r7, #8]
 80012e0:	ed87 7a03 	vstr	s14, [r7, #12]
 80012e4:	edc7 7a04 	vstr	s15, [r7, #16]
  // rad/s *2 * pi * 60 = rpm
  // rpm / max rpm * 100 = duty cycle
  // duty cycle * ARR = CCR = pwm signal
  int front_left = (int)(wheel_vel.front_left * 2 * M_PI * 60 / MOTOR_MAX_VELOCITY * 100 * FL_MOTOR_A_ARR);
 80012e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012f0:	ee17 0a90 	vmov	r0, s15
 80012f4:	f7ff f8cc 	bl	8000490 <__aeabi_f2d>
 80012f8:	a383      	add	r3, pc, #524	@ (adr r3, 8001508 <wheel2pwm+0x248>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	f7ff f91f 	bl	8000540 <__aeabi_dmul>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	4b80      	ldr	r3, [pc, #512]	@ (8001510 <wheel2pwm+0x250>)
 8001310:	f7ff f916 	bl	8000540 <__aeabi_dmul>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	a378      	add	r3, pc, #480	@ (adr r3, 8001500 <wheel2pwm+0x240>)
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	f7ff fa37 	bl	8000794 <__aeabi_ddiv>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	4b78      	ldr	r3, [pc, #480]	@ (8001514 <wheel2pwm+0x254>)
 8001334:	f7ff f904 	bl	8000540 <__aeabi_dmul>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4614      	mov	r4, r2
 800133e:	461d      	mov	r5, r3
 8001340:	4b75      	ldr	r3, [pc, #468]	@ (8001518 <wheel2pwm+0x258>)
 8001342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f881 	bl	800044c <__aeabi_ui2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4620      	mov	r0, r4
 8001350:	4629      	mov	r1, r5
 8001352:	f7ff f8f5 	bl	8000540 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fb01 	bl	8000964 <__aeabi_d2iz>
 8001362:	4603      	mov	r3, r0
 8001364:	637b      	str	r3, [r7, #52]	@ 0x34
  int front_right = (int)(wheel_vel.front_right * 2 * M_PI * 60 / MOTOR_MAX_VELOCITY * 100 * FR_MOTOR_A_ARR);
 8001366:	edd7 7a02 	vldr	s15, [r7, #8]
 800136a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800136e:	ee17 0a90 	vmov	r0, s15
 8001372:	f7ff f88d 	bl	8000490 <__aeabi_f2d>
 8001376:	a364      	add	r3, pc, #400	@ (adr r3, 8001508 <wheel2pwm+0x248>)
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	f7ff f8e0 	bl	8000540 <__aeabi_dmul>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b60      	ldr	r3, [pc, #384]	@ (8001510 <wheel2pwm+0x250>)
 800138e:	f7ff f8d7 	bl	8000540 <__aeabi_dmul>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	a359      	add	r3, pc, #356	@ (adr r3, 8001500 <wheel2pwm+0x240>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7ff f9f8 	bl	8000794 <__aeabi_ddiv>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b58      	ldr	r3, [pc, #352]	@ (8001514 <wheel2pwm+0x254>)
 80013b2:	f7ff f8c5 	bl	8000540 <__aeabi_dmul>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4614      	mov	r4, r2
 80013bc:	461d      	mov	r5, r3
 80013be:	4b57      	ldr	r3, [pc, #348]	@ (800151c <wheel2pwm+0x25c>)
 80013c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f842 	bl	800044c <__aeabi_ui2d>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4620      	mov	r0, r4
 80013ce:	4629      	mov	r1, r5
 80013d0:	f7ff f8b6 	bl	8000540 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	f7ff fac2 	bl	8000964 <__aeabi_d2iz>
 80013e0:	4603      	mov	r3, r0
 80013e2:	633b      	str	r3, [r7, #48]	@ 0x30
  int rear_left = (int)(wheel_vel.rear_left * 2 * M_PI * 60 / MOTOR_MAX_VELOCITY * 100 * RL_MOTOR_A_ARR);
 80013e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80013e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013ec:	ee17 0a90 	vmov	r0, s15
 80013f0:	f7ff f84e 	bl	8000490 <__aeabi_f2d>
 80013f4:	a344      	add	r3, pc, #272	@ (adr r3, 8001508 <wheel2pwm+0x248>)
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f7ff f8a1 	bl	8000540 <__aeabi_dmul>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	4b41      	ldr	r3, [pc, #260]	@ (8001510 <wheel2pwm+0x250>)
 800140c:	f7ff f898 	bl	8000540 <__aeabi_dmul>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	a339      	add	r3, pc, #228	@ (adr r3, 8001500 <wheel2pwm+0x240>)
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	f7ff f9b9 	bl	8000794 <__aeabi_ddiv>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4610      	mov	r0, r2
 8001428:	4619      	mov	r1, r3
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	4b39      	ldr	r3, [pc, #228]	@ (8001514 <wheel2pwm+0x254>)
 8001430:	f7ff f886 	bl	8000540 <__aeabi_dmul>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4614      	mov	r4, r2
 800143a:	461d      	mov	r5, r3
 800143c:	4b38      	ldr	r3, [pc, #224]	@ (8001520 <wheel2pwm+0x260>)
 800143e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f803 	bl	800044c <__aeabi_ui2d>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4620      	mov	r0, r4
 800144c:	4629      	mov	r1, r5
 800144e:	f7ff f877 	bl	8000540 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fa83 	bl	8000964 <__aeabi_d2iz>
 800145e:	4603      	mov	r3, r0
 8001460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int rear_right = (int)(wheel_vel.rear_right * 2 * M_PI * 60 / MOTOR_MAX_VELOCITY * 100 * RR_MOTOR_A_ARR);
 8001462:	edd7 7a04 	vldr	s15, [r7, #16]
 8001466:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800146a:	ee17 0a90 	vmov	r0, s15
 800146e:	f7ff f80f 	bl	8000490 <__aeabi_f2d>
 8001472:	a325      	add	r3, pc, #148	@ (adr r3, 8001508 <wheel2pwm+0x248>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff f862 	bl	8000540 <__aeabi_dmul>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <wheel2pwm+0x250>)
 800148a:	f7ff f859 	bl	8000540 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	a31a      	add	r3, pc, #104	@ (adr r3, 8001500 <wheel2pwm+0x240>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7ff f97a 	bl	8000794 <__aeabi_ddiv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <wheel2pwm+0x254>)
 80014ae:	f7ff f847 	bl	8000540 <__aeabi_dmul>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4614      	mov	r4, r2
 80014b8:	461d      	mov	r5, r3
 80014ba:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <wheel2pwm+0x260>)
 80014bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe ffc4 	bl	800044c <__aeabi_ui2d>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4620      	mov	r0, r4
 80014ca:	4629      	mov	r1, r5
 80014cc:	f7ff f838 	bl	8000540 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff fa44 	bl	8000964 <__aeabi_d2iz>
 80014dc:	4603      	mov	r3, r0
 80014de:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (WheelPWM){front_left, front_right, rear_left, rear_right};
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014f6:	60da      	str	r2, [r3, #12]
}
 80014f8:	6978      	ldr	r0, [r7, #20]
 80014fa:	3738      	adds	r7, #56	@ 0x38
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001500:	00000000 	.word	0x00000000
 8001504:	405ec000 	.word	0x405ec000
 8001508:	54442d18 	.word	0x54442d18
 800150c:	400921fb 	.word	0x400921fb
 8001510:	404e0000 	.word	0x404e0000
 8001514:	40590000 	.word	0x40590000
 8001518:	40014400 	.word	0x40014400
 800151c:	40014000 	.word	0x40014000
 8001520:	40010000 	.word	0x40010000

08001524 <wheel_control>:

void wheel_control(MecanumWheel wheel, int speed) {
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
  if (speed > 16800)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8001536:	4293      	cmp	r3, r2
 8001538:	dd03      	ble.n	8001542 <wheel_control+0x1e>
    speed = 16800;
 800153a:	f244 13a0 	movw	r3, #16800	@ 0x41a0
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	e005      	b.n	800154e <wheel_control+0x2a>
  else if (speed < -16800)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	4a52      	ldr	r2, [pc, #328]	@ (8001690 <wheel_control+0x16c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	da01      	bge.n	800154e <wheel_control+0x2a>
    speed = -16800;
 800154a:	4b51      	ldr	r3, [pc, #324]	@ (8001690 <wheel_control+0x16c>)
 800154c:	603b      	str	r3, [r7, #0]

  switch (wheel) {
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b03      	cmp	r3, #3
 8001552:	d87b      	bhi.n	800164c <wheel_control+0x128>
 8001554:	a201      	add	r2, pc, #4	@ (adr r2, 800155c <wheel_control+0x38>)
 8001556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155a:	bf00      	nop
 800155c:	0800156d 	.word	0x0800156d
 8001560:	080015a5 	.word	0x080015a5
 8001564:	080015dd 	.word	0x080015dd
 8001568:	08001615 	.word	0x08001615
    case FRONT_LEFT:
      if (speed > 0) {
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	dd06      	ble.n	8001580 <wheel_control+0x5c>
        FL_MOTOR_A_CCR = speed;
 8001572:	4a48      	ldr	r2, [pc, #288]	@ (8001694 <wheel_control+0x170>)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	6353      	str	r3, [r2, #52]	@ 0x34
        FL_MOTOR_B_CCR = 0;
 8001578:	4b47      	ldr	r3, [pc, #284]	@ (8001698 <wheel_control+0x174>)
 800157a:	2200      	movs	r2, #0
 800157c:	635a      	str	r2, [r3, #52]	@ 0x34
        FL_MOTOR_B_CCR = -speed;
      } else {
        FL_MOTOR_A_CCR = 0;
        FL_MOTOR_B_CCR = 0;
      }
      break;
 800157e:	e081      	b.n	8001684 <wheel_control+0x160>
      } else if (speed < 0) {
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	da07      	bge.n	8001596 <wheel_control+0x72>
        FL_MOTOR_A_CCR = 0;
 8001586:	4b43      	ldr	r3, [pc, #268]	@ (8001694 <wheel_control+0x170>)
 8001588:	2200      	movs	r2, #0
 800158a:	635a      	str	r2, [r3, #52]	@ 0x34
        FL_MOTOR_B_CCR = -speed;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	425a      	negs	r2, r3
 8001590:	4b41      	ldr	r3, [pc, #260]	@ (8001698 <wheel_control+0x174>)
 8001592:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 8001594:	e076      	b.n	8001684 <wheel_control+0x160>
        FL_MOTOR_A_CCR = 0;
 8001596:	4b3f      	ldr	r3, [pc, #252]	@ (8001694 <wheel_control+0x170>)
 8001598:	2200      	movs	r2, #0
 800159a:	635a      	str	r2, [r3, #52]	@ 0x34
        FL_MOTOR_B_CCR = 0;
 800159c:	4b3e      	ldr	r3, [pc, #248]	@ (8001698 <wheel_control+0x174>)
 800159e:	2200      	movs	r2, #0
 80015a0:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 80015a2:	e06f      	b.n	8001684 <wheel_control+0x160>
    case FRONT_RIGHT:
      if (speed > 0) {
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	dd06      	ble.n	80015b8 <wheel_control+0x94>
        FR_MOTOR_A_CCR = speed;
 80015aa:	4a3c      	ldr	r2, [pc, #240]	@ (800169c <wheel_control+0x178>)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	6353      	str	r3, [r2, #52]	@ 0x34
        FR_MOTOR_B_CCR = 0;
 80015b0:	4b3a      	ldr	r3, [pc, #232]	@ (800169c <wheel_control+0x178>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	639a      	str	r2, [r3, #56]	@ 0x38
        FR_MOTOR_B_CCR = -speed;
      } else {
        FR_MOTOR_A_CCR = 0;
        FR_MOTOR_B_CCR = 0;
      }
      break;
 80015b6:	e065      	b.n	8001684 <wheel_control+0x160>
      } else if (speed < 0) {
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	da07      	bge.n	80015ce <wheel_control+0xaa>
        FR_MOTOR_A_CCR = 0;
 80015be:	4b37      	ldr	r3, [pc, #220]	@ (800169c <wheel_control+0x178>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	635a      	str	r2, [r3, #52]	@ 0x34
        FR_MOTOR_B_CCR = -speed;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	425a      	negs	r2, r3
 80015c8:	4b34      	ldr	r3, [pc, #208]	@ (800169c <wheel_control+0x178>)
 80015ca:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
 80015cc:	e05a      	b.n	8001684 <wheel_control+0x160>
        FR_MOTOR_A_CCR = 0;
 80015ce:	4b33      	ldr	r3, [pc, #204]	@ (800169c <wheel_control+0x178>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	635a      	str	r2, [r3, #52]	@ 0x34
        FR_MOTOR_B_CCR = 0;
 80015d4:	4b31      	ldr	r3, [pc, #196]	@ (800169c <wheel_control+0x178>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
 80015da:	e053      	b.n	8001684 <wheel_control+0x160>
    case REAR_LEFT:
      if (speed > 0) {
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	dd06      	ble.n	80015f0 <wheel_control+0xcc>
        RL_MOTOR_A_CCR = speed;
 80015e2:	4a2f      	ldr	r2, [pc, #188]	@ (80016a0 <wheel_control+0x17c>)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	6353      	str	r3, [r2, #52]	@ 0x34
        RL_MOTOR_B_CCR = 0;
 80015e8:	4b2d      	ldr	r3, [pc, #180]	@ (80016a0 <wheel_control+0x17c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	639a      	str	r2, [r3, #56]	@ 0x38
        RL_MOTOR_B_CCR = -speed;
      } else {
        RL_MOTOR_A_CCR = 0;
        RL_MOTOR_B_CCR = 0;
      }
      break;
 80015ee:	e049      	b.n	8001684 <wheel_control+0x160>
      } else if (speed < 0) {
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	da07      	bge.n	8001606 <wheel_control+0xe2>
        RL_MOTOR_A_CCR = 0;
 80015f6:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <wheel_control+0x17c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	635a      	str	r2, [r3, #52]	@ 0x34
        RL_MOTOR_B_CCR = -speed;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	425a      	negs	r2, r3
 8001600:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <wheel_control+0x17c>)
 8001602:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
 8001604:	e03e      	b.n	8001684 <wheel_control+0x160>
        RL_MOTOR_A_CCR = 0;
 8001606:	4b26      	ldr	r3, [pc, #152]	@ (80016a0 <wheel_control+0x17c>)
 8001608:	2200      	movs	r2, #0
 800160a:	635a      	str	r2, [r3, #52]	@ 0x34
        RL_MOTOR_B_CCR = 0;
 800160c:	4b24      	ldr	r3, [pc, #144]	@ (80016a0 <wheel_control+0x17c>)
 800160e:	2200      	movs	r2, #0
 8001610:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
 8001612:	e037      	b.n	8001684 <wheel_control+0x160>
    case REAR_RIGHT:
      if (speed > 0) {
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	dd06      	ble.n	8001628 <wheel_control+0x104>
        RR_MOTOR_A_CCR = speed;
 800161a:	4a21      	ldr	r2, [pc, #132]	@ (80016a0 <wheel_control+0x17c>)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	63d3      	str	r3, [r2, #60]	@ 0x3c
        RR_MOTOR_B_CCR = 0;
 8001620:	4b1f      	ldr	r3, [pc, #124]	@ (80016a0 <wheel_control+0x17c>)
 8001622:	2200      	movs	r2, #0
 8001624:	641a      	str	r2, [r3, #64]	@ 0x40
        RR_MOTOR_B_CCR = -speed;
      } else {
        RR_MOTOR_A_CCR = 0;
        RR_MOTOR_B_CCR = 0;
      }
      break;
 8001626:	e02d      	b.n	8001684 <wheel_control+0x160>
      } else if (speed < 0) {
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	da07      	bge.n	800163e <wheel_control+0x11a>
        RR_MOTOR_A_CCR = 0;
 800162e:	4b1c      	ldr	r3, [pc, #112]	@ (80016a0 <wheel_control+0x17c>)
 8001630:	2200      	movs	r2, #0
 8001632:	63da      	str	r2, [r3, #60]	@ 0x3c
        RR_MOTOR_B_CCR = -speed;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	425a      	negs	r2, r3
 8001638:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <wheel_control+0x17c>)
 800163a:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800163c:	e022      	b.n	8001684 <wheel_control+0x160>
        RR_MOTOR_A_CCR = 0;
 800163e:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <wheel_control+0x17c>)
 8001640:	2200      	movs	r2, #0
 8001642:	63da      	str	r2, [r3, #60]	@ 0x3c
        RR_MOTOR_B_CCR = 0;
 8001644:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <wheel_control+0x17c>)
 8001646:	2200      	movs	r2, #0
 8001648:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800164a:	e01b      	b.n	8001684 <wheel_control+0x160>
    default:
      if (speed > 0) {
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	dd06      	ble.n	8001660 <wheel_control+0x13c>
        FL_MOTOR_A_CCR = speed;
 8001652:	4a10      	ldr	r2, [pc, #64]	@ (8001694 <wheel_control+0x170>)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	6353      	str	r3, [r2, #52]	@ 0x34
        FL_MOTOR_B_CCR = 0;
 8001658:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <wheel_control+0x174>)
 800165a:	2200      	movs	r2, #0
 800165c:	635a      	str	r2, [r3, #52]	@ 0x34
        FL_MOTOR_B_CCR = -speed;
      } else {
        FL_MOTOR_A_CCR = 0;
        FL_MOTOR_B_CCR = 0;
      }
      break;
 800165e:	e010      	b.n	8001682 <wheel_control+0x15e>
      } else if (speed < 0) {
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	da07      	bge.n	8001676 <wheel_control+0x152>
        FL_MOTOR_A_CCR = 0;
 8001666:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <wheel_control+0x170>)
 8001668:	2200      	movs	r2, #0
 800166a:	635a      	str	r2, [r3, #52]	@ 0x34
        FL_MOTOR_B_CCR = -speed;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	425a      	negs	r2, r3
 8001670:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <wheel_control+0x174>)
 8001672:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 8001674:	e005      	b.n	8001682 <wheel_control+0x15e>
        FL_MOTOR_A_CCR = 0;
 8001676:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <wheel_control+0x170>)
 8001678:	2200      	movs	r2, #0
 800167a:	635a      	str	r2, [r3, #52]	@ 0x34
        FL_MOTOR_B_CCR = 0;
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <wheel_control+0x174>)
 800167e:	2200      	movs	r2, #0
 8001680:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 8001682:	bf00      	nop
  }
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	ffffbe60 	.word	0xffffbe60
 8001694:	40014400 	.word	0x40014400
 8001698:	40014800 	.word	0x40014800
 800169c:	40014000 	.word	0x40014000
 80016a0:	40010000 	.word	0x40010000

080016a4 <wheels_control>:

void wheels_control(WheelPWM pwm) {
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	463c      	mov	r4, r7
 80016ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  wheel_control(FRONT_LEFT, pwm.front_left);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	4619      	mov	r1, r3
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff ff35 	bl	8001524 <wheel_control>
  wheel_control(FRONT_RIGHT, pwm.front_right);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4619      	mov	r1, r3
 80016be:	2001      	movs	r0, #1
 80016c0:	f7ff ff30 	bl	8001524 <wheel_control>
  wheel_control(REAR_LEFT, pwm.rear_left);
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	4619      	mov	r1, r3
 80016c8:	2002      	movs	r0, #2
 80016ca:	f7ff ff2b 	bl	8001524 <wheel_control>
  wheel_control(REAR_RIGHT, pwm.rear_right);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4619      	mov	r1, r3
 80016d2:	2003      	movs	r0, #3
 80016d4:	f7ff ff26 	bl	8001524 <wheel_control>
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd90      	pop	{r4, r7, pc}

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <HAL_MspInit+0x4c>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ee:	4a0f      	ldr	r2, [pc, #60]	@ (800172c <HAL_MspInit+0x4c>)
 80016f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016f6:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <HAL_MspInit+0x4c>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	4b09      	ldr	r3, [pc, #36]	@ (800172c <HAL_MspInit+0x4c>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	4a08      	ldr	r2, [pc, #32]	@ (800172c <HAL_MspInit+0x4c>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001710:	6413      	str	r3, [r2, #64]	@ 0x40
 8001712:	4b06      	ldr	r3, [pc, #24]	@ (800172c <HAL_MspInit+0x4c>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800

08001730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001734:	f001 fd8c 	bl	8003250 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <NMI_Handler+0x8>

0800173c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <HardFault_Handler+0x4>

08001744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <MemManage_Handler+0x4>

0800174c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <BusFault_Handler+0x4>

08001754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <UsageFault_Handler+0x4>

0800175c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178a:	f000 fe0d 	bl	80023a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001798:	4802      	ldr	r0, [pc, #8]	@ (80017a4 <TIM2_IRQHandler+0x10>)
 800179a:	f002 f8a9 	bl	80038f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000100 	.word	0x20000100

080017a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017ac:	4802      	ldr	r0, [pc, #8]	@ (80017b8 <TIM3_IRQHandler+0x10>)
 80017ae:	f002 f89f 	bl	80038f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000148 	.word	0x20000148

080017bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017c0:	4802      	ldr	r0, [pc, #8]	@ (80017cc <TIM4_IRQHandler+0x10>)
 80017c2:	f002 f895 	bl	80038f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000190 	.word	0x20000190

080017d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80017d4:	4802      	ldr	r0, [pc, #8]	@ (80017e0 <TIM5_IRQHandler+0x10>)
 80017d6:	f002 f88b 	bl	80038f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200001d8 	.word	0x200001d8

080017e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <SystemInit+0x20>)
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ee:	4a05      	ldr	r2, [pc, #20]	@ (8001804 <SystemInit+0x20>)
 80017f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b096      	sub	sp, #88	@ 0x58
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800180e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	611a      	str	r2, [r3, #16]
 8001836:	615a      	str	r2, [r3, #20]
 8001838:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	2220      	movs	r2, #32
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f002 feff 	bl	8004644 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001846:	4b50      	ldr	r3, [pc, #320]	@ (8001988 <MX_TIM1_Init+0x180>)
 8001848:	4a50      	ldr	r2, [pc, #320]	@ (800198c <MX_TIM1_Init+0x184>)
 800184a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 800184c:	4b4e      	ldr	r3, [pc, #312]	@ (8001988 <MX_TIM1_Init+0x180>)
 800184e:	2200      	movs	r2, #0
 8001850:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001852:	4b4d      	ldr	r3, [pc, #308]	@ (8001988 <MX_TIM1_Init+0x180>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16800-1;
 8001858:	4b4b      	ldr	r3, [pc, #300]	@ (8001988 <MX_TIM1_Init+0x180>)
 800185a:	f244 129f 	movw	r2, #16799	@ 0x419f
 800185e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001860:	4b49      	ldr	r3, [pc, #292]	@ (8001988 <MX_TIM1_Init+0x180>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001866:	4b48      	ldr	r3, [pc, #288]	@ (8001988 <MX_TIM1_Init+0x180>)
 8001868:	2200      	movs	r2, #0
 800186a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800186c:	4b46      	ldr	r3, [pc, #280]	@ (8001988 <MX_TIM1_Init+0x180>)
 800186e:	2280      	movs	r2, #128	@ 0x80
 8001870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001872:	4845      	ldr	r0, [pc, #276]	@ (8001988 <MX_TIM1_Init+0x180>)
 8001874:	f001 fd07 	bl	8003286 <HAL_TIM_Base_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800187e:	f7ff fd17 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001882:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001886:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001888:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800188c:	4619      	mov	r1, r3
 800188e:	483e      	ldr	r0, [pc, #248]	@ (8001988 <MX_TIM1_Init+0x180>)
 8001890:	f002 f9e0 	bl	8003c54 <HAL_TIM_ConfigClockSource>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800189a:	f7ff fd09 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800189e:	483a      	ldr	r0, [pc, #232]	@ (8001988 <MX_TIM1_Init+0x180>)
 80018a0:	f001 fdb0 	bl	8003404 <HAL_TIM_PWM_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80018aa:	f7ff fd01 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018b6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80018ba:	4619      	mov	r1, r3
 80018bc:	4832      	ldr	r0, [pc, #200]	@ (8001988 <MX_TIM1_Init+0x180>)
 80018be:	f002 fddf 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80018c8:	f7ff fcf2 	bl	80012b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018cc:	2360      	movs	r3, #96	@ 0x60
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018d8:	2300      	movs	r3, #0
 80018da:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018e0:	2300      	movs	r3, #0
 80018e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018e4:	2300      	movs	r3, #0
 80018e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ec:	2200      	movs	r2, #0
 80018ee:	4619      	mov	r1, r3
 80018f0:	4825      	ldr	r0, [pc, #148]	@ (8001988 <MX_TIM1_Init+0x180>)
 80018f2:	f002 f8ed 	bl	8003ad0 <HAL_TIM_PWM_ConfigChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80018fc:	f7ff fcd8 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001904:	2204      	movs	r2, #4
 8001906:	4619      	mov	r1, r3
 8001908:	481f      	ldr	r0, [pc, #124]	@ (8001988 <MX_TIM1_Init+0x180>)
 800190a:	f002 f8e1 	bl	8003ad0 <HAL_TIM_PWM_ConfigChannel>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001914:	f7ff fccc 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001918:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800191c:	2208      	movs	r2, #8
 800191e:	4619      	mov	r1, r3
 8001920:	4819      	ldr	r0, [pc, #100]	@ (8001988 <MX_TIM1_Init+0x180>)
 8001922:	f002 f8d5 	bl	8003ad0 <HAL_TIM_PWM_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800192c:	f7ff fcc0 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001934:	220c      	movs	r2, #12
 8001936:	4619      	mov	r1, r3
 8001938:	4813      	ldr	r0, [pc, #76]	@ (8001988 <MX_TIM1_Init+0x180>)
 800193a:	f002 f8c9 	bl	8003ad0 <HAL_TIM_PWM_ConfigChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001944:	f7ff fcb4 	bl	80012b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800195c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001960:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	4619      	mov	r1, r3
 800196a:	4807      	ldr	r0, [pc, #28]	@ (8001988 <MX_TIM1_Init+0x180>)
 800196c:	f002 fe04 	bl	8004578 <HAL_TIMEx_ConfigBreakDeadTime>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001976:	f7ff fc9b 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800197a:	4803      	ldr	r0, [pc, #12]	@ (8001988 <MX_TIM1_Init+0x180>)
 800197c:	f000 fbe8 	bl	8002150 <HAL_TIM_MspPostInit>

}
 8001980:	bf00      	nop
 8001982:	3758      	adds	r7, #88	@ 0x58
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200000b8 	.word	0x200000b8
 800198c:	40010000 	.word	0x40010000

08001990 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08c      	sub	sp, #48	@ 0x30
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	2224      	movs	r2, #36	@ 0x24
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f002 fe50 	bl	8004644 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ac:	4b21      	ldr	r3, [pc, #132]	@ (8001a34 <MX_TIM2_Init+0xa4>)
 80019ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a34 <MX_TIM2_Init+0xa4>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001a34 <MX_TIM2_Init+0xa4>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80019c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a34 <MX_TIM2_Init+0xa4>)
 80019c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <MX_TIM2_Init+0xa4>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019ce:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <MX_TIM2_Init+0xa4>)
 80019d0:	2280      	movs	r2, #128	@ 0x80
 80019d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019d4:	2303      	movs	r3, #3
 80019d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019dc:	2301      	movs	r3, #1
 80019de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80019e4:	230a      	movs	r3, #10
 80019e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019e8:	2300      	movs	r3, #0
 80019ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019ec:	2301      	movs	r3, #1
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80019f4:	230a      	movs	r3, #10
 80019f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	4619      	mov	r1, r3
 80019fe:	480d      	ldr	r0, [pc, #52]	@ (8001a34 <MX_TIM2_Init+0xa4>)
 8001a00:	f001 fe22 	bl	8003648 <HAL_TIM_Encoder_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001a0a:	f7ff fc51 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4806      	ldr	r0, [pc, #24]	@ (8001a34 <MX_TIM2_Init+0xa4>)
 8001a1c:	f002 fd30 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a26:	f7ff fc43 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	3730      	adds	r7, #48	@ 0x30
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000100 	.word	0x20000100

08001a38 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08c      	sub	sp, #48	@ 0x30
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a3e:	f107 030c 	add.w	r3, r7, #12
 8001a42:	2224      	movs	r2, #36	@ 0x24
 8001a44:	2100      	movs	r1, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 fdfc 	bl	8004644 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a54:	4b20      	ldr	r3, [pc, #128]	@ (8001ad8 <MX_TIM3_Init+0xa0>)
 8001a56:	4a21      	ldr	r2, [pc, #132]	@ (8001adc <MX_TIM3_Init+0xa4>)
 8001a58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <MX_TIM3_Init+0xa0>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad8 <MX_TIM3_Init+0xa0>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <MX_TIM3_Init+0xa0>)
 8001a68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad8 <MX_TIM3_Init+0xa0>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a74:	4b18      	ldr	r3, [pc, #96]	@ (8001ad8 <MX_TIM3_Init+0xa0>)
 8001a76:	2280      	movs	r2, #128	@ 0x80
 8001a78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a82:	2301      	movs	r3, #1
 8001a84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001a8a:	230a      	movs	r3, #10
 8001a8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a92:	2301      	movs	r3, #1
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a96:	2300      	movs	r3, #0
 8001a98:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001a9a:	230a      	movs	r3, #10
 8001a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	480c      	ldr	r0, [pc, #48]	@ (8001ad8 <MX_TIM3_Init+0xa0>)
 8001aa6:	f001 fdcf 	bl	8003648 <HAL_TIM_Encoder_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ab0:	f7ff fbfe 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4805      	ldr	r0, [pc, #20]	@ (8001ad8 <MX_TIM3_Init+0xa0>)
 8001ac2:	f002 fcdd 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001acc:	f7ff fbf0 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	3730      	adds	r7, #48	@ 0x30
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000148 	.word	0x20000148
 8001adc:	40000400 	.word	0x40000400

08001ae0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	@ 0x30
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ae6:	f107 030c 	add.w	r3, r7, #12
 8001aea:	2224      	movs	r2, #36	@ 0x24
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 fda8 	bl	8004644 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001afc:	4b20      	ldr	r3, [pc, #128]	@ (8001b80 <MX_TIM4_Init+0xa0>)
 8001afe:	4a21      	ldr	r2, [pc, #132]	@ (8001b84 <MX_TIM4_Init+0xa4>)
 8001b00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b02:	4b1f      	ldr	r3, [pc, #124]	@ (8001b80 <MX_TIM4_Init+0xa0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b08:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <MX_TIM4_Init+0xa0>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b80 <MX_TIM4_Init+0xa0>)
 8001b10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b14:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b16:	4b1a      	ldr	r3, [pc, #104]	@ (8001b80 <MX_TIM4_Init+0xa0>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b1c:	4b18      	ldr	r3, [pc, #96]	@ (8001b80 <MX_TIM4_Init+0xa0>)
 8001b1e:	2280      	movs	r2, #128	@ 0x80
 8001b20:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b22:	2303      	movs	r3, #3
 8001b24:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b32:	230a      	movs	r3, #10
 8001b34:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001b42:	230a      	movs	r3, #10
 8001b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480c      	ldr	r0, [pc, #48]	@ (8001b80 <MX_TIM4_Init+0xa0>)
 8001b4e:	f001 fd7b 	bl	8003648 <HAL_TIM_Encoder_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001b58:	f7ff fbaa 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	@ (8001b80 <MX_TIM4_Init+0xa0>)
 8001b6a:	f002 fc89 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001b74:	f7ff fb9c 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	3730      	adds	r7, #48	@ 0x30
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000190 	.word	0x20000190
 8001b84:	40000800 	.word	0x40000800

08001b88 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08c      	sub	sp, #48	@ 0x30
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b8e:	f107 030c 	add.w	r3, r7, #12
 8001b92:	2224      	movs	r2, #36	@ 0x24
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 fd54 	bl	8004644 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ba4:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <MX_TIM5_Init+0xa0>)
 8001ba6:	4a21      	ldr	r2, [pc, #132]	@ (8001c2c <MX_TIM5_Init+0xa4>)
 8001ba8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001baa:	4b1f      	ldr	r3, [pc, #124]	@ (8001c28 <MX_TIM5_Init+0xa0>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c28 <MX_TIM5_Init+0xa0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c28 <MX_TIM5_Init+0xa0>)
 8001bb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bbc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <MX_TIM5_Init+0xa0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bc4:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <MX_TIM5_Init+0xa0>)
 8001bc6:	2280      	movs	r2, #128	@ 0x80
 8001bc8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001bda:	230a      	movs	r3, #10
 8001bdc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001be2:	2301      	movs	r3, #1
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001bea:	230a      	movs	r3, #10
 8001bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001bee:	f107 030c 	add.w	r3, r7, #12
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480c      	ldr	r0, [pc, #48]	@ (8001c28 <MX_TIM5_Init+0xa0>)
 8001bf6:	f001 fd27 	bl	8003648 <HAL_TIM_Encoder_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001c00:	f7ff fb56 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	@ (8001c28 <MX_TIM5_Init+0xa0>)
 8001c12:	f002 fc35 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001c1c:	f7ff fb48 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	3730      	adds	r7, #48	@ 0x30
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200001d8 	.word	0x200001d8
 8001c2c:	40000c00 	.word	0x40000c00

08001c30 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08c      	sub	sp, #48	@ 0x30
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c36:	f107 0320 	add.w	r3, r7, #32
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
 8001c50:	611a      	str	r2, [r3, #16]
 8001c52:	615a      	str	r2, [r3, #20]
 8001c54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001c56:	4b2b      	ldr	r3, [pc, #172]	@ (8001d04 <MX_TIM9_Init+0xd4>)
 8001c58:	4a2b      	ldr	r2, [pc, #172]	@ (8001d08 <MX_TIM9_Init+0xd8>)
 8001c5a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1-1;
 8001c5c:	4b29      	ldr	r3, [pc, #164]	@ (8001d04 <MX_TIM9_Init+0xd4>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c62:	4b28      	ldr	r3, [pc, #160]	@ (8001d04 <MX_TIM9_Init+0xd4>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 16800-1;
 8001c68:	4b26      	ldr	r3, [pc, #152]	@ (8001d04 <MX_TIM9_Init+0xd4>)
 8001c6a:	f244 129f 	movw	r2, #16799	@ 0x419f
 8001c6e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c70:	4b24      	ldr	r3, [pc, #144]	@ (8001d04 <MX_TIM9_Init+0xd4>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c76:	4b23      	ldr	r3, [pc, #140]	@ (8001d04 <MX_TIM9_Init+0xd4>)
 8001c78:	2280      	movs	r2, #128	@ 0x80
 8001c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001c7c:	4821      	ldr	r0, [pc, #132]	@ (8001d04 <MX_TIM9_Init+0xd4>)
 8001c7e:	f001 fb02 	bl	8003286 <HAL_TIM_Base_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001c88:	f7ff fb12 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c90:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001c92:	f107 0320 	add.w	r3, r7, #32
 8001c96:	4619      	mov	r1, r3
 8001c98:	481a      	ldr	r0, [pc, #104]	@ (8001d04 <MX_TIM9_Init+0xd4>)
 8001c9a:	f001 ffdb 	bl	8003c54 <HAL_TIM_ConfigClockSource>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001ca4:	f7ff fb04 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001ca8:	4816      	ldr	r0, [pc, #88]	@ (8001d04 <MX_TIM9_Init+0xd4>)
 8001caa:	f001 fbab 	bl	8003404 <HAL_TIM_PWM_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001cb4:	f7ff fafc 	bl	80012b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb8:	2360      	movs	r3, #96	@ 0x60
 8001cba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	2200      	movs	r2, #0
 8001ccc:	4619      	mov	r1, r3
 8001cce:	480d      	ldr	r0, [pc, #52]	@ (8001d04 <MX_TIM9_Init+0xd4>)
 8001cd0:	f001 fefe 	bl	8003ad0 <HAL_TIM_PWM_ConfigChannel>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001cda:	f7ff fae9 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4807      	ldr	r0, [pc, #28]	@ (8001d04 <MX_TIM9_Init+0xd4>)
 8001ce6:	f001 fef3 	bl	8003ad0 <HAL_TIM_PWM_ConfigChannel>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8001cf0:	f7ff fade 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001cf4:	4803      	ldr	r0, [pc, #12]	@ (8001d04 <MX_TIM9_Init+0xd4>)
 8001cf6:	f000 fa2b 	bl	8002150 <HAL_TIM_MspPostInit>

}
 8001cfa:	bf00      	nop
 8001cfc:	3730      	adds	r7, #48	@ 0x30
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000220 	.word	0x20000220
 8001d08:	40014000 	.word	0x40014000

08001d0c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
 8001d20:	615a      	str	r2, [r3, #20]
 8001d22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001d24:	4b1e      	ldr	r3, [pc, #120]	@ (8001da0 <MX_TIM10_Init+0x94>)
 8001d26:	4a1f      	ldr	r2, [pc, #124]	@ (8001da4 <MX_TIM10_Init+0x98>)
 8001d28:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1-1;
 8001d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001da0 <MX_TIM10_Init+0x94>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d30:	4b1b      	ldr	r3, [pc, #108]	@ (8001da0 <MX_TIM10_Init+0x94>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 16800-1;
 8001d36:	4b1a      	ldr	r3, [pc, #104]	@ (8001da0 <MX_TIM10_Init+0x94>)
 8001d38:	f244 129f 	movw	r2, #16799	@ 0x419f
 8001d3c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d3e:	4b18      	ldr	r3, [pc, #96]	@ (8001da0 <MX_TIM10_Init+0x94>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d44:	4b16      	ldr	r3, [pc, #88]	@ (8001da0 <MX_TIM10_Init+0x94>)
 8001d46:	2280      	movs	r2, #128	@ 0x80
 8001d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001d4a:	4815      	ldr	r0, [pc, #84]	@ (8001da0 <MX_TIM10_Init+0x94>)
 8001d4c:	f001 fa9b 	bl	8003286 <HAL_TIM_Base_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001d56:	f7ff faab 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001d5a:	4811      	ldr	r0, [pc, #68]	@ (8001da0 <MX_TIM10_Init+0x94>)
 8001d5c:	f001 fb52 	bl	8003404 <HAL_TIM_PWM_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001d66:	f7ff faa3 	bl	80012b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d6a:	2360      	movs	r3, #96	@ 0x60
 8001d6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4807      	ldr	r0, [pc, #28]	@ (8001da0 <MX_TIM10_Init+0x94>)
 8001d82:	f001 fea5 	bl	8003ad0 <HAL_TIM_PWM_ConfigChannel>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001d8c:	f7ff fa90 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001d90:	4803      	ldr	r0, [pc, #12]	@ (8001da0 <MX_TIM10_Init+0x94>)
 8001d92:	f000 f9dd 	bl	8002150 <HAL_TIM_MspPostInit>

}
 8001d96:	bf00      	nop
 8001d98:	3720      	adds	r7, #32
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000268 	.word	0x20000268
 8001da4:	40014400 	.word	0x40014400

08001da8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
 8001dbc:	615a      	str	r2, [r3, #20]
 8001dbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e3c <MX_TIM11_Init+0x94>)
 8001dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001e40 <MX_TIM11_Init+0x98>)
 8001dc4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1-1;
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e3c <MX_TIM11_Init+0x94>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e3c <MX_TIM11_Init+0x94>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 16800-1;
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <MX_TIM11_Init+0x94>)
 8001dd4:	f244 129f 	movw	r2, #16799	@ 0x419f
 8001dd8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dda:	4b18      	ldr	r3, [pc, #96]	@ (8001e3c <MX_TIM11_Init+0x94>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001de0:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <MX_TIM11_Init+0x94>)
 8001de2:	2280      	movs	r2, #128	@ 0x80
 8001de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001de6:	4815      	ldr	r0, [pc, #84]	@ (8001e3c <MX_TIM11_Init+0x94>)
 8001de8:	f001 fa4d 	bl	8003286 <HAL_TIM_Base_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001df2:	f7ff fa5d 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001df6:	4811      	ldr	r0, [pc, #68]	@ (8001e3c <MX_TIM11_Init+0x94>)
 8001df8:	f001 fb04 	bl	8003404 <HAL_TIM_PWM_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001e02:	f7ff fa55 	bl	80012b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e06:	2360      	movs	r3, #96	@ 0x60
 8001e08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	2200      	movs	r2, #0
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4807      	ldr	r0, [pc, #28]	@ (8001e3c <MX_TIM11_Init+0x94>)
 8001e1e:	f001 fe57 	bl	8003ad0 <HAL_TIM_PWM_ConfigChannel>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001e28:	f7ff fa42 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001e2c:	4803      	ldr	r0, [pc, #12]	@ (8001e3c <MX_TIM11_Init+0x94>)
 8001e2e:	f000 f98f 	bl	8002150 <HAL_TIM_MspPostInit>

}
 8001e32:	bf00      	nop
 8001e34:	3720      	adds	r7, #32
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200002b0 	.word	0x200002b0
 8001e40:	40014800 	.word	0x40014800

08001e44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a29      	ldr	r2, [pc, #164]	@ (8001ef8 <HAL_TIM_Base_MspInit+0xb4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10e      	bne.n	8001e74 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	4b28      	ldr	r3, [pc, #160]	@ (8001efc <HAL_TIM_Base_MspInit+0xb8>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5e:	4a27      	ldr	r2, [pc, #156]	@ (8001efc <HAL_TIM_Base_MspInit+0xb8>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e66:	4b25      	ldr	r3, [pc, #148]	@ (8001efc <HAL_TIM_Base_MspInit+0xb8>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001e72:	e03a      	b.n	8001eea <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM9)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a21      	ldr	r2, [pc, #132]	@ (8001f00 <HAL_TIM_Base_MspInit+0xbc>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d10e      	bne.n	8001e9c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	4b1e      	ldr	r3, [pc, #120]	@ (8001efc <HAL_TIM_Base_MspInit+0xb8>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	4a1d      	ldr	r2, [pc, #116]	@ (8001efc <HAL_TIM_Base_MspInit+0xb8>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <HAL_TIM_Base_MspInit+0xb8>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
}
 8001e9a:	e026      	b.n	8001eea <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM10)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a18      	ldr	r2, [pc, #96]	@ (8001f04 <HAL_TIM_Base_MspInit+0xc0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d10e      	bne.n	8001ec4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <HAL_TIM_Base_MspInit+0xb8>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eae:	4a13      	ldr	r2, [pc, #76]	@ (8001efc <HAL_TIM_Base_MspInit+0xb8>)
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eb6:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <HAL_TIM_Base_MspInit+0xb8>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
}
 8001ec2:	e012      	b.n	8001eea <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM11)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0f      	ldr	r2, [pc, #60]	@ (8001f08 <HAL_TIM_Base_MspInit+0xc4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d10d      	bne.n	8001eea <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8001efc <HAL_TIM_Base_MspInit+0xb8>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed6:	4a09      	ldr	r2, [pc, #36]	@ (8001efc <HAL_TIM_Base_MspInit+0xb8>)
 8001ed8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ede:	4b07      	ldr	r3, [pc, #28]	@ (8001efc <HAL_TIM_Base_MspInit+0xb8>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
}
 8001eea:	bf00      	nop
 8001eec:	371c      	adds	r7, #28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40010000 	.word	0x40010000
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40014000 	.word	0x40014000
 8001f04:	40014400 	.word	0x40014400
 8001f08:	40014800 	.word	0x40014800

08001f0c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b090      	sub	sp, #64	@ 0x40
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f2c:	d153      	bne.n	8001fd6 <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f32:	4b81      	ldr	r3, [pc, #516]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	4a80      	ldr	r2, [pc, #512]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3e:	4b7e      	ldr	r3, [pc, #504]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f4e:	4b7a      	ldr	r3, [pc, #488]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	4a79      	ldr	r2, [pc, #484]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5a:	4b77      	ldr	r3, [pc, #476]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	623b      	str	r3, [r7, #32]
 8001f6a:	4b73      	ldr	r3, [pc, #460]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	4a72      	ldr	r2, [pc, #456]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f76:	4b70      	ldr	r3, [pc, #448]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	623b      	str	r3, [r7, #32]
 8001f80:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f94:	2301      	movs	r3, #1
 8001f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4867      	ldr	r0, [pc, #412]	@ (800213c <HAL_TIM_Encoder_MspInit+0x230>)
 8001fa0:	f000 fb58 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4860      	ldr	r0, [pc, #384]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x234>)
 8001fc0:	f000 fb48 	bl	8002654 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	201c      	movs	r0, #28
 8001fca:	f000 fb0c 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fce:	201c      	movs	r0, #28
 8001fd0:	f000 fb25 	bl	800261e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001fd4:	e0ac      	b.n	8002130 <HAL_TIM_Encoder_MspInit+0x224>
  else if(tim_encoderHandle->Instance==TIM3)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a5a      	ldr	r2, [pc, #360]	@ (8002144 <HAL_TIM_Encoder_MspInit+0x238>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d134      	bne.n	800204a <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
 8001fe4:	4b54      	ldr	r3, [pc, #336]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe8:	4a53      	ldr	r2, [pc, #332]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001fea:	f043 0302 	orr.w	r3, r3, #2
 8001fee:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff0:	4b51      	ldr	r3, [pc, #324]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	4b4d      	ldr	r3, [pc, #308]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002004:	4a4c      	ldr	r2, [pc, #304]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002006:	f043 0302 	orr.w	r3, r3, #2
 800200a:	6313      	str	r3, [r2, #48]	@ 0x30
 800200c:	4b4a      	ldr	r3, [pc, #296]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002018:	2330      	movs	r3, #48	@ 0x30
 800201a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002028:	2302      	movs	r3, #2
 800202a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002030:	4619      	mov	r1, r3
 8002032:	4843      	ldr	r0, [pc, #268]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x234>)
 8002034:	f000 fb0e 	bl	8002654 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002038:	2200      	movs	r2, #0
 800203a:	2100      	movs	r1, #0
 800203c:	201d      	movs	r0, #29
 800203e:	f000 fad2 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002042:	201d      	movs	r0, #29
 8002044:	f000 faeb 	bl	800261e <HAL_NVIC_EnableIRQ>
}
 8002048:	e072      	b.n	8002130 <HAL_TIM_Encoder_MspInit+0x224>
  else if(tim_encoderHandle->Instance==TIM4)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a3e      	ldr	r2, [pc, #248]	@ (8002148 <HAL_TIM_Encoder_MspInit+0x23c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d134      	bne.n	80020be <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	4b37      	ldr	r3, [pc, #220]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205c:	4a36      	ldr	r2, [pc, #216]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 800205e:	f043 0304 	orr.w	r3, r3, #4
 8002062:	6413      	str	r3, [r2, #64]	@ 0x40
 8002064:	4b34      	ldr	r3, [pc, #208]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	4b30      	ldr	r3, [pc, #192]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002078:	4a2f      	ldr	r2, [pc, #188]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 800207a:	f043 0302 	orr.w	r3, r3, #2
 800207e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002080:	4b2d      	ldr	r3, [pc, #180]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800208c:	23c0      	movs	r3, #192	@ 0xc0
 800208e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800209c:	2302      	movs	r3, #2
 800209e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020a4:	4619      	mov	r1, r3
 80020a6:	4826      	ldr	r0, [pc, #152]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x234>)
 80020a8:	f000 fad4 	bl	8002654 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	201e      	movs	r0, #30
 80020b2:	f000 fa98 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80020b6:	201e      	movs	r0, #30
 80020b8:	f000 fab1 	bl	800261e <HAL_NVIC_EnableIRQ>
}
 80020bc:	e038      	b.n	8002130 <HAL_TIM_Encoder_MspInit+0x224>
  else if(tim_encoderHandle->Instance==TIM5)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a22      	ldr	r2, [pc, #136]	@ (800214c <HAL_TIM_Encoder_MspInit+0x240>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d133      	bne.n	8002130 <HAL_TIM_Encoder_MspInit+0x224>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	4a19      	ldr	r2, [pc, #100]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 80020d2:	f043 0308 	orr.w	r3, r3, #8
 80020d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80020d8:	4b17      	ldr	r3, [pc, #92]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	4b13      	ldr	r3, [pc, #76]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 80020ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ec:	4a12      	ldr	r2, [pc, #72]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f4:	4b10      	ldr	r3, [pc, #64]	@ (8002138 <HAL_TIM_Encoder_MspInit+0x22c>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002100:	2303      	movs	r3, #3
 8002102:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210c:	2300      	movs	r3, #0
 800210e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002110:	2302      	movs	r3, #2
 8002112:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002114:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002118:	4619      	mov	r1, r3
 800211a:	4808      	ldr	r0, [pc, #32]	@ (800213c <HAL_TIM_Encoder_MspInit+0x230>)
 800211c:	f000 fa9a 	bl	8002654 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002120:	2200      	movs	r2, #0
 8002122:	2100      	movs	r1, #0
 8002124:	2032      	movs	r0, #50	@ 0x32
 8002126:	f000 fa5e 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800212a:	2032      	movs	r0, #50	@ 0x32
 800212c:	f000 fa77 	bl	800261e <HAL_NVIC_EnableIRQ>
}
 8002130:	bf00      	nop
 8002132:	3740      	adds	r7, #64	@ 0x40
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	40020000 	.word	0x40020000
 8002140:	40020400 	.word	0x40020400
 8002144:	40000400 	.word	0x40000400
 8002148:	40000800 	.word	0x40000800
 800214c:	40000c00 	.word	0x40000c00

08002150 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	@ 0x30
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 031c 	add.w	r3, r7, #28
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a49      	ldr	r2, [pc, #292]	@ (8002294 <HAL_TIM_MspPostInit+0x144>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d11f      	bne.n	80021b2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	4b48      	ldr	r3, [pc, #288]	@ (8002298 <HAL_TIM_MspPostInit+0x148>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	4a47      	ldr	r2, [pc, #284]	@ (8002298 <HAL_TIM_MspPostInit+0x148>)
 800217c:	f043 0310 	orr.w	r3, r3, #16
 8002180:	6313      	str	r3, [r2, #48]	@ 0x30
 8002182:	4b45      	ldr	r3, [pc, #276]	@ (8002298 <HAL_TIM_MspPostInit+0x148>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	61bb      	str	r3, [r7, #24]
 800218c:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800218e:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8002192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021a0:	2301      	movs	r3, #1
 80021a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021a4:	f107 031c 	add.w	r3, r7, #28
 80021a8:	4619      	mov	r1, r3
 80021aa:	483c      	ldr	r0, [pc, #240]	@ (800229c <HAL_TIM_MspPostInit+0x14c>)
 80021ac:	f000 fa52 	bl	8002654 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80021b0:	e06c      	b.n	800228c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM9)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a3a      	ldr	r2, [pc, #232]	@ (80022a0 <HAL_TIM_MspPostInit+0x150>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d11e      	bne.n	80021fa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	4b35      	ldr	r3, [pc, #212]	@ (8002298 <HAL_TIM_MspPostInit+0x148>)
 80021c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c4:	4a34      	ldr	r2, [pc, #208]	@ (8002298 <HAL_TIM_MspPostInit+0x148>)
 80021c6:	f043 0310 	orr.w	r3, r3, #16
 80021ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80021cc:	4b32      	ldr	r3, [pc, #200]	@ (8002298 <HAL_TIM_MspPostInit+0x148>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80021d8:	2360      	movs	r3, #96	@ 0x60
 80021da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80021e8:	2303      	movs	r3, #3
 80021ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021ec:	f107 031c 	add.w	r3, r7, #28
 80021f0:	4619      	mov	r1, r3
 80021f2:	482a      	ldr	r0, [pc, #168]	@ (800229c <HAL_TIM_MspPostInit+0x14c>)
 80021f4:	f000 fa2e 	bl	8002654 <HAL_GPIO_Init>
}
 80021f8:	e048      	b.n	800228c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM10)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a29      	ldr	r2, [pc, #164]	@ (80022a4 <HAL_TIM_MspPostInit+0x154>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d11f      	bne.n	8002244 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002204:	2300      	movs	r3, #0
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	4b23      	ldr	r3, [pc, #140]	@ (8002298 <HAL_TIM_MspPostInit+0x148>)
 800220a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220c:	4a22      	ldr	r2, [pc, #136]	@ (8002298 <HAL_TIM_MspPostInit+0x148>)
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	6313      	str	r3, [r2, #48]	@ 0x30
 8002214:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <HAL_TIM_MspPostInit+0x148>)
 8002216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002220:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	2300      	movs	r3, #0
 8002230:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002232:	2303      	movs	r3, #3
 8002234:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002236:	f107 031c 	add.w	r3, r7, #28
 800223a:	4619      	mov	r1, r3
 800223c:	481a      	ldr	r0, [pc, #104]	@ (80022a8 <HAL_TIM_MspPostInit+0x158>)
 800223e:	f000 fa09 	bl	8002654 <HAL_GPIO_Init>
}
 8002242:	e023      	b.n	800228c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM11)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a18      	ldr	r2, [pc, #96]	@ (80022ac <HAL_TIM_MspPostInit+0x15c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d11e      	bne.n	800228c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <HAL_TIM_MspPostInit+0x148>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	4a10      	ldr	r2, [pc, #64]	@ (8002298 <HAL_TIM_MspPostInit+0x148>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	6313      	str	r3, [r2, #48]	@ 0x30
 800225e:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <HAL_TIM_MspPostInit+0x148>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800226a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800226e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800227c:	2303      	movs	r3, #3
 800227e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002280:	f107 031c 	add.w	r3, r7, #28
 8002284:	4619      	mov	r1, r3
 8002286:	4808      	ldr	r0, [pc, #32]	@ (80022a8 <HAL_TIM_MspPostInit+0x158>)
 8002288:	f000 f9e4 	bl	8002654 <HAL_GPIO_Init>
}
 800228c:	bf00      	nop
 800228e:	3730      	adds	r7, #48	@ 0x30
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40010000 	.word	0x40010000
 8002298:	40023800 	.word	0x40023800
 800229c:	40021000 	.word	0x40021000
 80022a0:	40014000 	.word	0x40014000
 80022a4:	40014400 	.word	0x40014400
 80022a8:	40020400 	.word	0x40020400
 80022ac:	40014800 	.word	0x40014800

080022b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80022b4:	f7ff fa96 	bl	80017e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022b8:	480c      	ldr	r0, [pc, #48]	@ (80022ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022ba:	490d      	ldr	r1, [pc, #52]	@ (80022f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022bc:	4a0d      	ldr	r2, [pc, #52]	@ (80022f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022c0:	e002      	b.n	80022c8 <LoopCopyDataInit>

080022c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022c6:	3304      	adds	r3, #4

080022c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022cc:	d3f9      	bcc.n	80022c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ce:	4a0a      	ldr	r2, [pc, #40]	@ (80022f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022d0:	4c0a      	ldr	r4, [pc, #40]	@ (80022fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80022d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d4:	e001      	b.n	80022da <LoopFillZerobss>

080022d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d8:	3204      	adds	r2, #4

080022da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022dc:	d3fb      	bcc.n	80022d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022de:	f002 f9b9 	bl	8004654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022e2:	f7fe febb 	bl	800105c <main>
  bx  lr    
 80022e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80022f4:	080046d4 	.word	0x080046d4
  ldr r2, =_sbss
 80022f8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80022fc:	200002fc 	.word	0x200002fc

08002300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002300:	e7fe      	b.n	8002300 <ADC_IRQHandler>
	...

08002304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002308:	4b0e      	ldr	r3, [pc, #56]	@ (8002344 <HAL_Init+0x40>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0d      	ldr	r2, [pc, #52]	@ (8002344 <HAL_Init+0x40>)
 800230e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002312:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002314:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <HAL_Init+0x40>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0a      	ldr	r2, [pc, #40]	@ (8002344 <HAL_Init+0x40>)
 800231a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800231e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002320:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <HAL_Init+0x40>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a07      	ldr	r2, [pc, #28]	@ (8002344 <HAL_Init+0x40>)
 8002326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800232a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800232c:	2003      	movs	r0, #3
 800232e:	f000 f94f 	bl	80025d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002332:	200f      	movs	r0, #15
 8002334:	f000 f808 	bl	8002348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002338:	f7ff f9d2 	bl	80016e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023c00 	.word	0x40023c00

08002348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002350:	4b12      	ldr	r3, [pc, #72]	@ (800239c <HAL_InitTick+0x54>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b12      	ldr	r3, [pc, #72]	@ (80023a0 <HAL_InitTick+0x58>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4619      	mov	r1, r3
 800235a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800235e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002362:	fbb2 f3f3 	udiv	r3, r2, r3
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f967 	bl	800263a <HAL_SYSTICK_Config>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e00e      	b.n	8002394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b0f      	cmp	r3, #15
 800237a:	d80a      	bhi.n	8002392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800237c:	2200      	movs	r2, #0
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002384:	f000 f92f 	bl	80025e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002388:	4a06      	ldr	r2, [pc, #24]	@ (80023a4 <HAL_InitTick+0x5c>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	e000      	b.n	8002394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000070 	.word	0x20000070
 80023a0:	20000078 	.word	0x20000078
 80023a4:	20000074 	.word	0x20000074

080023a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023ac:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <HAL_IncTick+0x20>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <HAL_IncTick+0x24>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	4a04      	ldr	r2, [pc, #16]	@ (80023cc <HAL_IncTick+0x24>)
 80023ba:	6013      	str	r3, [r2, #0]
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20000078 	.word	0x20000078
 80023cc:	200002f8 	.word	0x200002f8

080023d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return uwTick;
 80023d4:	4b03      	ldr	r3, [pc, #12]	@ (80023e4 <HAL_GetTick+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	200002f8 	.word	0x200002f8

080023e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f0:	f7ff ffee 	bl	80023d0 <HAL_GetTick>
 80023f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002400:	d005      	beq.n	800240e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002402:	4b0a      	ldr	r3, [pc, #40]	@ (800242c <HAL_Delay+0x44>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4413      	add	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800240e:	bf00      	nop
 8002410:	f7ff ffde 	bl	80023d0 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	429a      	cmp	r2, r3
 800241e:	d8f7      	bhi.n	8002410 <HAL_Delay+0x28>
  {
  }
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000078 	.word	0x20000078

08002430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800244c:	4013      	ands	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002458:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800245c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002462:	4a04      	ldr	r2, [pc, #16]	@ (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	60d3      	str	r3, [r2, #12]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800247c:	4b04      	ldr	r3, [pc, #16]	@ (8002490 <__NVIC_GetPriorityGrouping+0x18>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	f003 0307 	and.w	r3, r3, #7
}
 8002486:	4618      	mov	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	db0b      	blt.n	80024be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	f003 021f 	and.w	r2, r3, #31
 80024ac:	4907      	ldr	r1, [pc, #28]	@ (80024cc <__NVIC_EnableIRQ+0x38>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	2001      	movs	r0, #1
 80024b6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000e100 	.word	0xe000e100

080024d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	db0a      	blt.n	80024fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	490c      	ldr	r1, [pc, #48]	@ (800251c <__NVIC_SetPriority+0x4c>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	0112      	lsls	r2, r2, #4
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	440b      	add	r3, r1
 80024f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f8:	e00a      	b.n	8002510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4908      	ldr	r1, [pc, #32]	@ (8002520 <__NVIC_SetPriority+0x50>)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	3b04      	subs	r3, #4
 8002508:	0112      	lsls	r2, r2, #4
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	440b      	add	r3, r1
 800250e:	761a      	strb	r2, [r3, #24]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000e100 	.word	0xe000e100
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	@ 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f1c3 0307 	rsb	r3, r3, #7
 800253e:	2b04      	cmp	r3, #4
 8002540:	bf28      	it	cs
 8002542:	2304      	movcs	r3, #4
 8002544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3304      	adds	r3, #4
 800254a:	2b06      	cmp	r3, #6
 800254c:	d902      	bls.n	8002554 <NVIC_EncodePriority+0x30>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3b03      	subs	r3, #3
 8002552:	e000      	b.n	8002556 <NVIC_EncodePriority+0x32>
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	401a      	ands	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800256c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	43d9      	mvns	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	4313      	orrs	r3, r2
         );
}
 800257e:	4618      	mov	r0, r3
 8002580:	3724      	adds	r7, #36	@ 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800259c:	d301      	bcc.n	80025a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259e:	2301      	movs	r3, #1
 80025a0:	e00f      	b.n	80025c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a2:	4a0a      	ldr	r2, [pc, #40]	@ (80025cc <SysTick_Config+0x40>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025aa:	210f      	movs	r1, #15
 80025ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025b0:	f7ff ff8e 	bl	80024d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b4:	4b05      	ldr	r3, [pc, #20]	@ (80025cc <SysTick_Config+0x40>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ba:	4b04      	ldr	r3, [pc, #16]	@ (80025cc <SysTick_Config+0x40>)
 80025bc:	2207      	movs	r2, #7
 80025be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	e000e010 	.word	0xe000e010

080025d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff ff29 	bl	8002430 <__NVIC_SetPriorityGrouping>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f8:	f7ff ff3e 	bl	8002478 <__NVIC_GetPriorityGrouping>
 80025fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	6978      	ldr	r0, [r7, #20]
 8002604:	f7ff ff8e 	bl	8002524 <NVIC_EncodePriority>
 8002608:	4602      	mov	r2, r0
 800260a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff5d 	bl	80024d0 <__NVIC_SetPriority>
}
 8002616:	bf00      	nop
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff31 	bl	8002494 <__NVIC_EnableIRQ>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ffa2 	bl	800258c <SysTick_Config>
 8002648:	4603      	mov	r3, r0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	@ 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	e16b      	b.n	8002948 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002670:	2201      	movs	r2, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	429a      	cmp	r2, r3
 800268a:	f040 815a 	bne.w	8002942 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d005      	beq.n	80026a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d130      	bne.n	8002708 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	2203      	movs	r2, #3
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026dc:	2201      	movs	r2, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 0201 	and.w	r2, r3, #1
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b03      	cmp	r3, #3
 8002712:	d017      	beq.n	8002744 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	2203      	movs	r2, #3
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d123      	bne.n	8002798 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	08da      	lsrs	r2, r3, #3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3208      	adds	r2, #8
 8002758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	220f      	movs	r2, #15
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	08da      	lsrs	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3208      	adds	r2, #8
 8002792:	69b9      	ldr	r1, [r7, #24]
 8002794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	2203      	movs	r2, #3
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0203 	and.w	r2, r3, #3
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80b4 	beq.w	8002942 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	4b60      	ldr	r3, [pc, #384]	@ (8002960 <HAL_GPIO_Init+0x30c>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002960 <HAL_GPIO_Init+0x30c>)
 80027e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002960 <HAL_GPIO_Init+0x30c>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <HAL_GPIO_Init+0x310>)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	089b      	lsrs	r3, r3, #2
 80027fc:	3302      	adds	r3, #2
 80027fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	220f      	movs	r2, #15
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a52      	ldr	r2, [pc, #328]	@ (8002968 <HAL_GPIO_Init+0x314>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d02b      	beq.n	800287a <HAL_GPIO_Init+0x226>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a51      	ldr	r2, [pc, #324]	@ (800296c <HAL_GPIO_Init+0x318>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d025      	beq.n	8002876 <HAL_GPIO_Init+0x222>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a50      	ldr	r2, [pc, #320]	@ (8002970 <HAL_GPIO_Init+0x31c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d01f      	beq.n	8002872 <HAL_GPIO_Init+0x21e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a4f      	ldr	r2, [pc, #316]	@ (8002974 <HAL_GPIO_Init+0x320>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d019      	beq.n	800286e <HAL_GPIO_Init+0x21a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a4e      	ldr	r2, [pc, #312]	@ (8002978 <HAL_GPIO_Init+0x324>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d013      	beq.n	800286a <HAL_GPIO_Init+0x216>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4d      	ldr	r2, [pc, #308]	@ (800297c <HAL_GPIO_Init+0x328>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00d      	beq.n	8002866 <HAL_GPIO_Init+0x212>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a4c      	ldr	r2, [pc, #304]	@ (8002980 <HAL_GPIO_Init+0x32c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d007      	beq.n	8002862 <HAL_GPIO_Init+0x20e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4b      	ldr	r2, [pc, #300]	@ (8002984 <HAL_GPIO_Init+0x330>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d101      	bne.n	800285e <HAL_GPIO_Init+0x20a>
 800285a:	2307      	movs	r3, #7
 800285c:	e00e      	b.n	800287c <HAL_GPIO_Init+0x228>
 800285e:	2308      	movs	r3, #8
 8002860:	e00c      	b.n	800287c <HAL_GPIO_Init+0x228>
 8002862:	2306      	movs	r3, #6
 8002864:	e00a      	b.n	800287c <HAL_GPIO_Init+0x228>
 8002866:	2305      	movs	r3, #5
 8002868:	e008      	b.n	800287c <HAL_GPIO_Init+0x228>
 800286a:	2304      	movs	r3, #4
 800286c:	e006      	b.n	800287c <HAL_GPIO_Init+0x228>
 800286e:	2303      	movs	r3, #3
 8002870:	e004      	b.n	800287c <HAL_GPIO_Init+0x228>
 8002872:	2302      	movs	r3, #2
 8002874:	e002      	b.n	800287c <HAL_GPIO_Init+0x228>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_GPIO_Init+0x228>
 800287a:	2300      	movs	r3, #0
 800287c:	69fa      	ldr	r2, [r7, #28]
 800287e:	f002 0203 	and.w	r2, r2, #3
 8002882:	0092      	lsls	r2, r2, #2
 8002884:	4093      	lsls	r3, r2
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800288c:	4935      	ldr	r1, [pc, #212]	@ (8002964 <HAL_GPIO_Init+0x310>)
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	089b      	lsrs	r3, r3, #2
 8002892:	3302      	adds	r3, #2
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800289a:	4b3b      	ldr	r3, [pc, #236]	@ (8002988 <HAL_GPIO_Init+0x334>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028be:	4a32      	ldr	r2, [pc, #200]	@ (8002988 <HAL_GPIO_Init+0x334>)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028c4:	4b30      	ldr	r3, [pc, #192]	@ (8002988 <HAL_GPIO_Init+0x334>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028e8:	4a27      	ldr	r2, [pc, #156]	@ (8002988 <HAL_GPIO_Init+0x334>)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ee:	4b26      	ldr	r3, [pc, #152]	@ (8002988 <HAL_GPIO_Init+0x334>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002912:	4a1d      	ldr	r2, [pc, #116]	@ (8002988 <HAL_GPIO_Init+0x334>)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002918:	4b1b      	ldr	r3, [pc, #108]	@ (8002988 <HAL_GPIO_Init+0x334>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800293c:	4a12      	ldr	r2, [pc, #72]	@ (8002988 <HAL_GPIO_Init+0x334>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3301      	adds	r3, #1
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	2b0f      	cmp	r3, #15
 800294c:	f67f ae90 	bls.w	8002670 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	3724      	adds	r7, #36	@ 0x24
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800
 8002964:	40013800 	.word	0x40013800
 8002968:	40020000 	.word	0x40020000
 800296c:	40020400 	.word	0x40020400
 8002970:	40020800 	.word	0x40020800
 8002974:	40020c00 	.word	0x40020c00
 8002978:	40021000 	.word	0x40021000
 800297c:	40021400 	.word	0x40021400
 8002980:	40021800 	.word	0x40021800
 8002984:	40021c00 	.word	0x40021c00
 8002988:	40013c00 	.word	0x40013c00

0800298c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	887b      	ldrh	r3, [r7, #2]
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
 80029a8:	e001      	b.n	80029ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029aa:	2300      	movs	r3, #0
 80029ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	807b      	strh	r3, [r7, #2]
 80029c8:	4613      	mov	r3, r2
 80029ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029cc:	787b      	ldrb	r3, [r7, #1]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029d2:	887a      	ldrh	r2, [r7, #2]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029d8:	e003      	b.n	80029e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029da:	887b      	ldrh	r3, [r7, #2]
 80029dc:	041a      	lsls	r2, r3, #16
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	619a      	str	r2, [r3, #24]
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e267      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d075      	beq.n	8002afa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a0e:	4b88      	ldr	r3, [pc, #544]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d00c      	beq.n	8002a34 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1a:	4b85      	ldr	r3, [pc, #532]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d112      	bne.n	8002a4c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a26:	4b82      	ldr	r3, [pc, #520]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a32:	d10b      	bne.n	8002a4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	4b7e      	ldr	r3, [pc, #504]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d05b      	beq.n	8002af8 <HAL_RCC_OscConfig+0x108>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d157      	bne.n	8002af8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e242      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a54:	d106      	bne.n	8002a64 <HAL_RCC_OscConfig+0x74>
 8002a56:	4b76      	ldr	r3, [pc, #472]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a75      	ldr	r2, [pc, #468]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e01d      	b.n	8002aa0 <HAL_RCC_OscConfig+0xb0>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCC_OscConfig+0x98>
 8002a6e:	4b70      	ldr	r3, [pc, #448]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a6f      	ldr	r2, [pc, #444]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	4b6d      	ldr	r3, [pc, #436]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a6c      	ldr	r2, [pc, #432]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCC_OscConfig+0xb0>
 8002a88:	4b69      	ldr	r3, [pc, #420]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a68      	ldr	r2, [pc, #416]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	4b66      	ldr	r3, [pc, #408]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a65      	ldr	r2, [pc, #404]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d013      	beq.n	8002ad0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7ff fc92 	bl	80023d0 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7ff fc8e 	bl	80023d0 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	@ 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e207      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	4b5b      	ldr	r3, [pc, #364]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0xc0>
 8002ace:	e014      	b.n	8002afa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7ff fc7e 	bl	80023d0 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad8:	f7ff fc7a 	bl	80023d0 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	@ 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e1f3      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	4b51      	ldr	r3, [pc, #324]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0xe8>
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d063      	beq.n	8002bce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b06:	4b4a      	ldr	r3, [pc, #296]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b12:	4b47      	ldr	r3, [pc, #284]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d11c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b1e:	4b44      	ldr	r3, [pc, #272]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d116      	bne.n	8002b58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2a:	4b41      	ldr	r3, [pc, #260]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_RCC_OscConfig+0x152>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e1c7      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b42:	4b3b      	ldr	r3, [pc, #236]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4937      	ldr	r1, [pc, #220]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b56:	e03a      	b.n	8002bce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d020      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b60:	4b34      	ldr	r3, [pc, #208]	@ (8002c34 <HAL_RCC_OscConfig+0x244>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b66:	f7ff fc33 	bl	80023d0 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b6e:	f7ff fc2f 	bl	80023d0 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e1a8      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b80:	4b2b      	ldr	r3, [pc, #172]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8c:	4b28      	ldr	r3, [pc, #160]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4925      	ldr	r1, [pc, #148]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]
 8002ba0:	e015      	b.n	8002bce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba2:	4b24      	ldr	r3, [pc, #144]	@ (8002c34 <HAL_RCC_OscConfig+0x244>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7ff fc12 	bl	80023d0 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb0:	f7ff fc0e 	bl	80023d0 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e187      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d036      	beq.n	8002c48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d016      	beq.n	8002c10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be2:	4b15      	ldr	r3, [pc, #84]	@ (8002c38 <HAL_RCC_OscConfig+0x248>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7ff fbf2 	bl	80023d0 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf0:	f7ff fbee 	bl	80023d0 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e167      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c02:	4b0b      	ldr	r3, [pc, #44]	@ (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002c04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x200>
 8002c0e:	e01b      	b.n	8002c48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c10:	4b09      	ldr	r3, [pc, #36]	@ (8002c38 <HAL_RCC_OscConfig+0x248>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c16:	f7ff fbdb 	bl	80023d0 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1c:	e00e      	b.n	8002c3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c1e:	f7ff fbd7 	bl	80023d0 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d907      	bls.n	8002c3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e150      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
 8002c30:	40023800 	.word	0x40023800
 8002c34:	42470000 	.word	0x42470000
 8002c38:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c3c:	4b88      	ldr	r3, [pc, #544]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1ea      	bne.n	8002c1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 8097 	beq.w	8002d84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5a:	4b81      	ldr	r3, [pc, #516]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10f      	bne.n	8002c86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	4b7d      	ldr	r3, [pc, #500]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	4a7c      	ldr	r2, [pc, #496]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c76:	4b7a      	ldr	r3, [pc, #488]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c82:	2301      	movs	r3, #1
 8002c84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c86:	4b77      	ldr	r3, [pc, #476]	@ (8002e64 <HAL_RCC_OscConfig+0x474>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d118      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c92:	4b74      	ldr	r3, [pc, #464]	@ (8002e64 <HAL_RCC_OscConfig+0x474>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a73      	ldr	r2, [pc, #460]	@ (8002e64 <HAL_RCC_OscConfig+0x474>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c9e:	f7ff fb97 	bl	80023d0 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca6:	f7ff fb93 	bl	80023d0 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e10c      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	4b6a      	ldr	r3, [pc, #424]	@ (8002e64 <HAL_RCC_OscConfig+0x474>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d106      	bne.n	8002cda <HAL_RCC_OscConfig+0x2ea>
 8002ccc:	4b64      	ldr	r3, [pc, #400]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd0:	4a63      	ldr	r2, [pc, #396]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cd8:	e01c      	b.n	8002d14 <HAL_RCC_OscConfig+0x324>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b05      	cmp	r3, #5
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x30c>
 8002ce2:	4b5f      	ldr	r3, [pc, #380]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce6:	4a5e      	ldr	r2, [pc, #376]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002ce8:	f043 0304 	orr.w	r3, r3, #4
 8002cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cee:	4b5c      	ldr	r3, [pc, #368]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf2:	4a5b      	ldr	r2, [pc, #364]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cfa:	e00b      	b.n	8002d14 <HAL_RCC_OscConfig+0x324>
 8002cfc:	4b58      	ldr	r3, [pc, #352]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d00:	4a57      	ldr	r2, [pc, #348]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002d02:	f023 0301 	bic.w	r3, r3, #1
 8002d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d08:	4b55      	ldr	r3, [pc, #340]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0c:	4a54      	ldr	r2, [pc, #336]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002d0e:	f023 0304 	bic.w	r3, r3, #4
 8002d12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d015      	beq.n	8002d48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1c:	f7ff fb58 	bl	80023d0 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d24:	f7ff fb54 	bl	80023d0 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e0cb      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3a:	4b49      	ldr	r3, [pc, #292]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0ee      	beq.n	8002d24 <HAL_RCC_OscConfig+0x334>
 8002d46:	e014      	b.n	8002d72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d48:	f7ff fb42 	bl	80023d0 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d4e:	e00a      	b.n	8002d66 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d50:	f7ff fb3e 	bl	80023d0 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e0b5      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d66:	4b3e      	ldr	r3, [pc, #248]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1ee      	bne.n	8002d50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d72:	7dfb      	ldrb	r3, [r7, #23]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d105      	bne.n	8002d84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d78:	4b39      	ldr	r3, [pc, #228]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7c:	4a38      	ldr	r2, [pc, #224]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002d7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 80a1 	beq.w	8002ed0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d8e:	4b34      	ldr	r3, [pc, #208]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d05c      	beq.n	8002e54 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d141      	bne.n	8002e26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da2:	4b31      	ldr	r3, [pc, #196]	@ (8002e68 <HAL_RCC_OscConfig+0x478>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7ff fb12 	bl	80023d0 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db0:	f7ff fb0e 	bl	80023d0 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e087      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc2:	4b27      	ldr	r3, [pc, #156]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69da      	ldr	r2, [r3, #28]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	019b      	lsls	r3, r3, #6
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de4:	085b      	lsrs	r3, r3, #1
 8002de6:	3b01      	subs	r3, #1
 8002de8:	041b      	lsls	r3, r3, #16
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df0:	061b      	lsls	r3, r3, #24
 8002df2:	491b      	ldr	r1, [pc, #108]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e68 <HAL_RCC_OscConfig+0x478>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfe:	f7ff fae7 	bl	80023d0 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e06:	f7ff fae3 	bl	80023d0 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e05c      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e18:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x416>
 8002e24:	e054      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e26:	4b10      	ldr	r3, [pc, #64]	@ (8002e68 <HAL_RCC_OscConfig+0x478>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7ff fad0 	bl	80023d0 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e34:	f7ff facc 	bl	80023d0 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e045      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e46:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x444>
 8002e52:	e03d      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d107      	bne.n	8002e6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e038      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40007000 	.word	0x40007000
 8002e68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002edc <HAL_RCC_OscConfig+0x4ec>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d028      	beq.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d121      	bne.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d11a      	bne.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ea2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d111      	bne.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb2:	085b      	lsrs	r3, r3, #1
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d107      	bne.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800

08002ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0cc      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b68      	ldr	r3, [pc, #416]	@ (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d90c      	bls.n	8002f1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b65      	ldr	r3, [pc, #404]	@ (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b63      	ldr	r3, [pc, #396]	@ (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0b8      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d020      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f34:	4b59      	ldr	r3, [pc, #356]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	4a58      	ldr	r2, [pc, #352]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f4c:	4b53      	ldr	r3, [pc, #332]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4a52      	ldr	r2, [pc, #328]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f58:	4b50      	ldr	r3, [pc, #320]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	494d      	ldr	r1, [pc, #308]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d044      	beq.n	8003000 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	4b47      	ldr	r3, [pc, #284]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d119      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e07f      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d003      	beq.n	8002f9e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d107      	bne.n	8002fae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9e:	4b3f      	ldr	r3, [pc, #252]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e06f      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fae:	4b3b      	ldr	r3, [pc, #236]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e067      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fbe:	4b37      	ldr	r3, [pc, #220]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f023 0203 	bic.w	r2, r3, #3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	4934      	ldr	r1, [pc, #208]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fd0:	f7ff f9fe 	bl	80023d0 <HAL_GetTick>
 8002fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd8:	f7ff f9fa 	bl	80023d0 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e04f      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	4b2b      	ldr	r3, [pc, #172]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 020c 	and.w	r2, r3, #12
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d1eb      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003000:	4b25      	ldr	r3, [pc, #148]	@ (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d20c      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b22      	ldr	r3, [pc, #136]	@ (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003016:	4b20      	ldr	r3, [pc, #128]	@ (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e032      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003034:	4b19      	ldr	r3, [pc, #100]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4916      	ldr	r1, [pc, #88]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003052:	4b12      	ldr	r3, [pc, #72]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	490e      	ldr	r1, [pc, #56]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	4313      	orrs	r3, r2
 8003064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003066:	f000 f82d 	bl	80030c4 <HAL_RCC_GetSysClockFreq>
 800306a:	4602      	mov	r2, r0
 800306c:	4b0b      	ldr	r3, [pc, #44]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	490a      	ldr	r1, [pc, #40]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	5ccb      	ldrb	r3, [r1, r3]
 800307a:	fa22 f303 	lsr.w	r3, r2, r3
 800307e:	4a09      	ldr	r2, [pc, #36]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003082:	4b09      	ldr	r3, [pc, #36]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff f95e 	bl	8002348 <HAL_InitTick>

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40023c00 	.word	0x40023c00
 800309c:	40023800 	.word	0x40023800
 80030a0:	080046b4 	.word	0x080046b4
 80030a4:	20000070 	.word	0x20000070
 80030a8:	20000074 	.word	0x20000074

080030ac <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80030b0:	4b03      	ldr	r3, [pc, #12]	@ (80030c0 <HAL_RCC_EnableCSS+0x14>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
}
 80030b6:	bf00      	nop
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	4247004c 	.word	0x4247004c

080030c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c8:	b090      	sub	sp, #64	@ 0x40
 80030ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030dc:	4b59      	ldr	r3, [pc, #356]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x180>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d00d      	beq.n	8003104 <HAL_RCC_GetSysClockFreq+0x40>
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	f200 80a1 	bhi.w	8003230 <HAL_RCC_GetSysClockFreq+0x16c>
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0x34>
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d003      	beq.n	80030fe <HAL_RCC_GetSysClockFreq+0x3a>
 80030f6:	e09b      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030f8:	4b53      	ldr	r3, [pc, #332]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x184>)
 80030fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030fc:	e09b      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030fe:	4b53      	ldr	r3, [pc, #332]	@ (800324c <HAL_RCC_GetSysClockFreq+0x188>)
 8003100:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003102:	e098      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003104:	4b4f      	ldr	r3, [pc, #316]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x180>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800310c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800310e:	4b4d      	ldr	r3, [pc, #308]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x180>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d028      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800311a:	4b4a      	ldr	r3, [pc, #296]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x180>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	099b      	lsrs	r3, r3, #6
 8003120:	2200      	movs	r2, #0
 8003122:	623b      	str	r3, [r7, #32]
 8003124:	627a      	str	r2, [r7, #36]	@ 0x24
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800312c:	2100      	movs	r1, #0
 800312e:	4b47      	ldr	r3, [pc, #284]	@ (800324c <HAL_RCC_GetSysClockFreq+0x188>)
 8003130:	fb03 f201 	mul.w	r2, r3, r1
 8003134:	2300      	movs	r3, #0
 8003136:	fb00 f303 	mul.w	r3, r0, r3
 800313a:	4413      	add	r3, r2
 800313c:	4a43      	ldr	r2, [pc, #268]	@ (800324c <HAL_RCC_GetSysClockFreq+0x188>)
 800313e:	fba0 1202 	umull	r1, r2, r0, r2
 8003142:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003144:	460a      	mov	r2, r1
 8003146:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003148:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800314a:	4413      	add	r3, r2
 800314c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800314e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003150:	2200      	movs	r2, #0
 8003152:	61bb      	str	r3, [r7, #24]
 8003154:	61fa      	str	r2, [r7, #28]
 8003156:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800315a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800315e:	f7fd fc79 	bl	8000a54 <__aeabi_uldivmod>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4613      	mov	r3, r2
 8003168:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800316a:	e053      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800316c:	4b35      	ldr	r3, [pc, #212]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x180>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	099b      	lsrs	r3, r3, #6
 8003172:	2200      	movs	r2, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	617a      	str	r2, [r7, #20]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800317e:	f04f 0b00 	mov.w	fp, #0
 8003182:	4652      	mov	r2, sl
 8003184:	465b      	mov	r3, fp
 8003186:	f04f 0000 	mov.w	r0, #0
 800318a:	f04f 0100 	mov.w	r1, #0
 800318e:	0159      	lsls	r1, r3, #5
 8003190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003194:	0150      	lsls	r0, r2, #5
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	ebb2 080a 	subs.w	r8, r2, sl
 800319e:	eb63 090b 	sbc.w	r9, r3, fp
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031b6:	ebb2 0408 	subs.w	r4, r2, r8
 80031ba:	eb63 0509 	sbc.w	r5, r3, r9
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	00eb      	lsls	r3, r5, #3
 80031c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031cc:	00e2      	lsls	r2, r4, #3
 80031ce:	4614      	mov	r4, r2
 80031d0:	461d      	mov	r5, r3
 80031d2:	eb14 030a 	adds.w	r3, r4, sl
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	eb45 030b 	adc.w	r3, r5, fp
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031ea:	4629      	mov	r1, r5
 80031ec:	028b      	lsls	r3, r1, #10
 80031ee:	4621      	mov	r1, r4
 80031f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031f4:	4621      	mov	r1, r4
 80031f6:	028a      	lsls	r2, r1, #10
 80031f8:	4610      	mov	r0, r2
 80031fa:	4619      	mov	r1, r3
 80031fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031fe:	2200      	movs	r2, #0
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	60fa      	str	r2, [r7, #12]
 8003204:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003208:	f7fd fc24 	bl	8000a54 <__aeabi_uldivmod>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4613      	mov	r3, r2
 8003212:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003214:	4b0b      	ldr	r3, [pc, #44]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x180>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	0c1b      	lsrs	r3, r3, #16
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	3301      	adds	r3, #1
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003224:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800322e:	e002      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003230:	4b05      	ldr	r3, [pc, #20]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x184>)
 8003232:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003238:	4618      	mov	r0, r3
 800323a:	3740      	adds	r7, #64	@ 0x40
 800323c:	46bd      	mov	sp, r7
 800323e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800
 8003248:	00f42400 	.word	0x00f42400
 800324c:	017d7840 	.word	0x017d7840

08003250 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003254:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <HAL_RCC_NMI_IRQHandler+0x20>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800325c:	2b80      	cmp	r3, #128	@ 0x80
 800325e:	d104      	bne.n	800326a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003260:	f000 f80a 	bl	8003278 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003264:	4b03      	ldr	r3, [pc, #12]	@ (8003274 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003266:	2280      	movs	r2, #128	@ 0x80
 8003268:	701a      	strb	r2, [r3, #0]
  }
}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
 8003274:	4002380e 	.word	0x4002380e

08003278 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e041      	b.n	800331c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d106      	bne.n	80032b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7fe fdc9 	bl	8001e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2202      	movs	r2, #2
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3304      	adds	r3, #4
 80032c2:	4619      	mov	r1, r3
 80032c4:	4610      	mov	r0, r2
 80032c6:	f000 fdbf 	bl	8003e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b01      	cmp	r3, #1
 8003336:	d001      	beq.n	800333c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e04e      	b.n	80033da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a23      	ldr	r2, [pc, #140]	@ (80033e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d022      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x80>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003366:	d01d      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x80>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a1f      	ldr	r2, [pc, #124]	@ (80033ec <HAL_TIM_Base_Start_IT+0xc8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d018      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x80>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1e      	ldr	r2, [pc, #120]	@ (80033f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d013      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x80>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1c      	ldr	r2, [pc, #112]	@ (80033f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00e      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x80>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1b      	ldr	r2, [pc, #108]	@ (80033f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x80>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a19      	ldr	r2, [pc, #100]	@ (80033fc <HAL_TIM_Base_Start_IT+0xd8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d004      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x80>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a18      	ldr	r2, [pc, #96]	@ (8003400 <HAL_TIM_Base_Start_IT+0xdc>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d111      	bne.n	80033c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2b06      	cmp	r3, #6
 80033b4:	d010      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0201 	orr.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c6:	e007      	b.n	80033d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40010000 	.word	0x40010000
 80033ec:	40000400 	.word	0x40000400
 80033f0:	40000800 	.word	0x40000800
 80033f4:	40000c00 	.word	0x40000c00
 80033f8:	40010400 	.word	0x40010400
 80033fc:	40014000 	.word	0x40014000
 8003400:	40001800 	.word	0x40001800

08003404 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e041      	b.n	800349a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f839 	bl	80034a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3304      	adds	r3, #4
 8003440:	4619      	mov	r1, r3
 8003442:	4610      	mov	r0, r2
 8003444:	f000 fd00 	bl	8003e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d109      	bne.n	80034dc <HAL_TIM_PWM_Start+0x24>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	bf14      	ite	ne
 80034d4:	2301      	movne	r3, #1
 80034d6:	2300      	moveq	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	e022      	b.n	8003522 <HAL_TIM_PWM_Start+0x6a>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d109      	bne.n	80034f6 <HAL_TIM_PWM_Start+0x3e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	bf14      	ite	ne
 80034ee:	2301      	movne	r3, #1
 80034f0:	2300      	moveq	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	e015      	b.n	8003522 <HAL_TIM_PWM_Start+0x6a>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d109      	bne.n	8003510 <HAL_TIM_PWM_Start+0x58>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	e008      	b.n	8003522 <HAL_TIM_PWM_Start+0x6a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	bf14      	ite	ne
 800351c:	2301      	movne	r3, #1
 800351e:	2300      	moveq	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e07c      	b.n	8003624 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d104      	bne.n	800353a <HAL_TIM_PWM_Start+0x82>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003538:	e013      	b.n	8003562 <HAL_TIM_PWM_Start+0xaa>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b04      	cmp	r3, #4
 800353e:	d104      	bne.n	800354a <HAL_TIM_PWM_Start+0x92>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003548:	e00b      	b.n	8003562 <HAL_TIM_PWM_Start+0xaa>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b08      	cmp	r3, #8
 800354e:	d104      	bne.n	800355a <HAL_TIM_PWM_Start+0xa2>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003558:	e003      	b.n	8003562 <HAL_TIM_PWM_Start+0xaa>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2201      	movs	r2, #1
 8003568:	6839      	ldr	r1, [r7, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f000 ff62 	bl	8004434 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a2d      	ldr	r2, [pc, #180]	@ (800362c <HAL_TIM_PWM_Start+0x174>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d004      	beq.n	8003584 <HAL_TIM_PWM_Start+0xcc>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a2c      	ldr	r2, [pc, #176]	@ (8003630 <HAL_TIM_PWM_Start+0x178>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d101      	bne.n	8003588 <HAL_TIM_PWM_Start+0xd0>
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <HAL_TIM_PWM_Start+0xd2>
 8003588:	2300      	movs	r3, #0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d007      	beq.n	800359e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800359c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a22      	ldr	r2, [pc, #136]	@ (800362c <HAL_TIM_PWM_Start+0x174>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d022      	beq.n	80035ee <HAL_TIM_PWM_Start+0x136>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035b0:	d01d      	beq.n	80035ee <HAL_TIM_PWM_Start+0x136>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003634 <HAL_TIM_PWM_Start+0x17c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d018      	beq.n	80035ee <HAL_TIM_PWM_Start+0x136>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003638 <HAL_TIM_PWM_Start+0x180>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <HAL_TIM_PWM_Start+0x136>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a1c      	ldr	r2, [pc, #112]	@ (800363c <HAL_TIM_PWM_Start+0x184>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00e      	beq.n	80035ee <HAL_TIM_PWM_Start+0x136>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a16      	ldr	r2, [pc, #88]	@ (8003630 <HAL_TIM_PWM_Start+0x178>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d009      	beq.n	80035ee <HAL_TIM_PWM_Start+0x136>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a18      	ldr	r2, [pc, #96]	@ (8003640 <HAL_TIM_PWM_Start+0x188>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_TIM_PWM_Start+0x136>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a16      	ldr	r2, [pc, #88]	@ (8003644 <HAL_TIM_PWM_Start+0x18c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d111      	bne.n	8003612 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2b06      	cmp	r3, #6
 80035fe:	d010      	beq.n	8003622 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003610:	e007      	b.n	8003622 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0201 	orr.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40010000 	.word	0x40010000
 8003630:	40010400 	.word	0x40010400
 8003634:	40000400 	.word	0x40000400
 8003638:	40000800 	.word	0x40000800
 800363c:	40000c00 	.word	0x40000c00
 8003640:	40014000 	.word	0x40014000
 8003644:	40001800 	.word	0x40001800

08003648 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e097      	b.n	800378c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d106      	bne.n	8003676 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7fe fc4b 	bl	8001f0c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2202      	movs	r2, #2
 800367a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800368c:	f023 0307 	bic.w	r3, r3, #7
 8003690:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3304      	adds	r3, #4
 800369a:	4619      	mov	r1, r3
 800369c:	4610      	mov	r0, r2
 800369e:	f000 fbd3 	bl	8003e48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ca:	f023 0303 	bic.w	r3, r3, #3
 80036ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	021b      	lsls	r3, r3, #8
 80036da:	4313      	orrs	r3, r2
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80036e8:	f023 030c 	bic.w	r3, r3, #12
 80036ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	021b      	lsls	r3, r3, #8
 8003704:	4313      	orrs	r3, r2
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	011a      	lsls	r2, r3, #4
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	031b      	lsls	r3, r3, #12
 8003718:	4313      	orrs	r3, r2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003726:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800372e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	4313      	orrs	r3, r2
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80037bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d110      	bne.n	80037e6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d102      	bne.n	80037d0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80037ca:	7b7b      	ldrb	r3, [r7, #13]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d001      	beq.n	80037d4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e089      	b.n	80038e8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037e4:	e031      	b.n	800384a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d110      	bne.n	800380e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037ec:	7bbb      	ldrb	r3, [r7, #14]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d102      	bne.n	80037f8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037f2:	7b3b      	ldrb	r3, [r7, #12]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d001      	beq.n	80037fc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e075      	b.n	80038e8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800380c:	e01d      	b.n	800384a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d108      	bne.n	8003826 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003814:	7bbb      	ldrb	r3, [r7, #14]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d105      	bne.n	8003826 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800381a:	7b7b      	ldrb	r3, [r7, #13]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d102      	bne.n	8003826 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003820:	7b3b      	ldrb	r3, [r7, #12]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d001      	beq.n	800382a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e05e      	b.n	80038e8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2202      	movs	r2, #2
 800382e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2202      	movs	r2, #2
 8003836:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2202      	movs	r2, #2
 800383e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2202      	movs	r2, #2
 8003846:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2b04      	cmp	r3, #4
 8003854:	d010      	beq.n	8003878 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003856:	e01f      	b.n	8003898 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2201      	movs	r2, #1
 800385e:	2100      	movs	r1, #0
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fde7 	bl	8004434 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0202 	orr.w	r2, r2, #2
 8003874:	60da      	str	r2, [r3, #12]
      break;
 8003876:	e02e      	b.n	80038d6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2201      	movs	r2, #1
 800387e:	2104      	movs	r1, #4
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fdd7 	bl	8004434 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0204 	orr.w	r2, r2, #4
 8003894:	60da      	str	r2, [r3, #12]
      break;
 8003896:	e01e      	b.n	80038d6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2201      	movs	r2, #1
 800389e:	2100      	movs	r1, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fdc7 	bl	8004434 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2201      	movs	r2, #1
 80038ac:	2104      	movs	r1, #4
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fdc0 	bl	8004434 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0202 	orr.w	r2, r2, #2
 80038c2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0204 	orr.w	r2, r2, #4
 80038d2:	60da      	str	r2, [r3, #12]
      break;
 80038d4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d020      	beq.n	8003954 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01b      	beq.n	8003954 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0202 	mvn.w	r2, #2
 8003924:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fa65 	bl	8003e0a <HAL_TIM_IC_CaptureCallback>
 8003940:	e005      	b.n	800394e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fa57 	bl	8003df6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 fa68 	bl	8003e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b00      	cmp	r3, #0
 800395c:	d020      	beq.n	80039a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01b      	beq.n	80039a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0204 	mvn.w	r2, #4
 8003970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2202      	movs	r2, #2
 8003976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fa3f 	bl	8003e0a <HAL_TIM_IC_CaptureCallback>
 800398c:	e005      	b.n	800399a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fa31 	bl	8003df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fa42 	bl	8003e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d020      	beq.n	80039ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01b      	beq.n	80039ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0208 	mvn.w	r2, #8
 80039bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2204      	movs	r2, #4
 80039c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fa19 	bl	8003e0a <HAL_TIM_IC_CaptureCallback>
 80039d8:	e005      	b.n	80039e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fa0b 	bl	8003df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fa1c 	bl	8003e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d020      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01b      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0210 	mvn.w	r2, #16
 8003a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2208      	movs	r2, #8
 8003a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f9f3 	bl	8003e0a <HAL_TIM_IC_CaptureCallback>
 8003a24:	e005      	b.n	8003a32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f9e5 	bl	8003df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f9f6 	bl	8003e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00c      	beq.n	8003a5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d007      	beq.n	8003a5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0201 	mvn.w	r2, #1
 8003a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f9c3 	bl	8003de2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00c      	beq.n	8003a80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d007      	beq.n	8003a80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fdd8 	bl	8004630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00c      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d007      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f9c7 	bl	8003e32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00c      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0220 	mvn.w	r2, #32
 8003ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fdaa 	bl	800461c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ac8:	bf00      	nop
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e0ae      	b.n	8003c4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b0c      	cmp	r3, #12
 8003afa:	f200 809f 	bhi.w	8003c3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003afe:	a201      	add	r2, pc, #4	@ (adr r2, 8003b04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b04:	08003b39 	.word	0x08003b39
 8003b08:	08003c3d 	.word	0x08003c3d
 8003b0c:	08003c3d 	.word	0x08003c3d
 8003b10:	08003c3d 	.word	0x08003c3d
 8003b14:	08003b79 	.word	0x08003b79
 8003b18:	08003c3d 	.word	0x08003c3d
 8003b1c:	08003c3d 	.word	0x08003c3d
 8003b20:	08003c3d 	.word	0x08003c3d
 8003b24:	08003bbb 	.word	0x08003bbb
 8003b28:	08003c3d 	.word	0x08003c3d
 8003b2c:	08003c3d 	.word	0x08003c3d
 8003b30:	08003c3d 	.word	0x08003c3d
 8003b34:	08003bfb 	.word	0x08003bfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fa2e 	bl	8003fa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699a      	ldr	r2, [r3, #24]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0208 	orr.w	r2, r2, #8
 8003b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0204 	bic.w	r2, r2, #4
 8003b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6999      	ldr	r1, [r3, #24]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	619a      	str	r2, [r3, #24]
      break;
 8003b76:	e064      	b.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fa7e 	bl	8004080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6999      	ldr	r1, [r3, #24]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	021a      	lsls	r2, r3, #8
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	619a      	str	r2, [r3, #24]
      break;
 8003bb8:	e043      	b.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fad3 	bl	800416c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69da      	ldr	r2, [r3, #28]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0208 	orr.w	r2, r2, #8
 8003bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0204 	bic.w	r2, r2, #4
 8003be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69d9      	ldr	r1, [r3, #28]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	61da      	str	r2, [r3, #28]
      break;
 8003bf8:	e023      	b.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 fb27 	bl	8004254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69da      	ldr	r2, [r3, #28]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69d9      	ldr	r1, [r3, #28]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	021a      	lsls	r2, r3, #8
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	61da      	str	r2, [r3, #28]
      break;
 8003c3a:	e002      	b.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_TIM_ConfigClockSource+0x1c>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e0b4      	b.n	8003dda <HAL_TIM_ConfigClockSource+0x186>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ca8:	d03e      	beq.n	8003d28 <HAL_TIM_ConfigClockSource+0xd4>
 8003caa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cae:	f200 8087 	bhi.w	8003dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cb6:	f000 8086 	beq.w	8003dc6 <HAL_TIM_ConfigClockSource+0x172>
 8003cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cbe:	d87f      	bhi.n	8003dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc0:	2b70      	cmp	r3, #112	@ 0x70
 8003cc2:	d01a      	beq.n	8003cfa <HAL_TIM_ConfigClockSource+0xa6>
 8003cc4:	2b70      	cmp	r3, #112	@ 0x70
 8003cc6:	d87b      	bhi.n	8003dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc8:	2b60      	cmp	r3, #96	@ 0x60
 8003cca:	d050      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x11a>
 8003ccc:	2b60      	cmp	r3, #96	@ 0x60
 8003cce:	d877      	bhi.n	8003dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd0:	2b50      	cmp	r3, #80	@ 0x50
 8003cd2:	d03c      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0xfa>
 8003cd4:	2b50      	cmp	r3, #80	@ 0x50
 8003cd6:	d873      	bhi.n	8003dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd8:	2b40      	cmp	r3, #64	@ 0x40
 8003cda:	d058      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x13a>
 8003cdc:	2b40      	cmp	r3, #64	@ 0x40
 8003cde:	d86f      	bhi.n	8003dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce0:	2b30      	cmp	r3, #48	@ 0x30
 8003ce2:	d064      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0x15a>
 8003ce4:	2b30      	cmp	r3, #48	@ 0x30
 8003ce6:	d86b      	bhi.n	8003dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d060      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0x15a>
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d867      	bhi.n	8003dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d05c      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0x15a>
 8003cf4:	2b10      	cmp	r3, #16
 8003cf6:	d05a      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0x15a>
 8003cf8:	e062      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d0a:	f000 fb73 	bl	80043f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	609a      	str	r2, [r3, #8]
      break;
 8003d26:	e04f      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d38:	f000 fb5c 	bl	80043f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d4a:	609a      	str	r2, [r3, #8]
      break;
 8003d4c:	e03c      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f000 fad0 	bl	8004300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2150      	movs	r1, #80	@ 0x50
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fb29 	bl	80043be <TIM_ITRx_SetConfig>
      break;
 8003d6c:	e02c      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f000 faef 	bl	800435e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2160      	movs	r1, #96	@ 0x60
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fb19 	bl	80043be <TIM_ITRx_SetConfig>
      break;
 8003d8c:	e01c      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f000 fab0 	bl	8004300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2140      	movs	r1, #64	@ 0x40
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 fb09 	bl	80043be <TIM_ITRx_SetConfig>
      break;
 8003dac:	e00c      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4619      	mov	r1, r3
 8003db8:	4610      	mov	r0, r2
 8003dba:	f000 fb00 	bl	80043be <TIM_ITRx_SetConfig>
      break;
 8003dbe:	e003      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc4:	e000      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a46      	ldr	r2, [pc, #280]	@ (8003f74 <TIM_Base_SetConfig+0x12c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d013      	beq.n	8003e88 <TIM_Base_SetConfig+0x40>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e66:	d00f      	beq.n	8003e88 <TIM_Base_SetConfig+0x40>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a43      	ldr	r2, [pc, #268]	@ (8003f78 <TIM_Base_SetConfig+0x130>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00b      	beq.n	8003e88 <TIM_Base_SetConfig+0x40>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a42      	ldr	r2, [pc, #264]	@ (8003f7c <TIM_Base_SetConfig+0x134>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d007      	beq.n	8003e88 <TIM_Base_SetConfig+0x40>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a41      	ldr	r2, [pc, #260]	@ (8003f80 <TIM_Base_SetConfig+0x138>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d003      	beq.n	8003e88 <TIM_Base_SetConfig+0x40>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a40      	ldr	r2, [pc, #256]	@ (8003f84 <TIM_Base_SetConfig+0x13c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d108      	bne.n	8003e9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a35      	ldr	r2, [pc, #212]	@ (8003f74 <TIM_Base_SetConfig+0x12c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d02b      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea8:	d027      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a32      	ldr	r2, [pc, #200]	@ (8003f78 <TIM_Base_SetConfig+0x130>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d023      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a31      	ldr	r2, [pc, #196]	@ (8003f7c <TIM_Base_SetConfig+0x134>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d01f      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a30      	ldr	r2, [pc, #192]	@ (8003f80 <TIM_Base_SetConfig+0x138>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d01b      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a2f      	ldr	r2, [pc, #188]	@ (8003f84 <TIM_Base_SetConfig+0x13c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d017      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a2e      	ldr	r2, [pc, #184]	@ (8003f88 <TIM_Base_SetConfig+0x140>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d013      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a2d      	ldr	r2, [pc, #180]	@ (8003f8c <TIM_Base_SetConfig+0x144>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00f      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a2c      	ldr	r2, [pc, #176]	@ (8003f90 <TIM_Base_SetConfig+0x148>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00b      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a2b      	ldr	r2, [pc, #172]	@ (8003f94 <TIM_Base_SetConfig+0x14c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d007      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a2a      	ldr	r2, [pc, #168]	@ (8003f98 <TIM_Base_SetConfig+0x150>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d003      	beq.n	8003efa <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a29      	ldr	r2, [pc, #164]	@ (8003f9c <TIM_Base_SetConfig+0x154>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d108      	bne.n	8003f0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a10      	ldr	r2, [pc, #64]	@ (8003f74 <TIM_Base_SetConfig+0x12c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d003      	beq.n	8003f40 <TIM_Base_SetConfig+0xf8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a12      	ldr	r2, [pc, #72]	@ (8003f84 <TIM_Base_SetConfig+0x13c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d103      	bne.n	8003f48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d105      	bne.n	8003f66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f023 0201 	bic.w	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	611a      	str	r2, [r3, #16]
  }
}
 8003f66:	bf00      	nop
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40010000 	.word	0x40010000
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800
 8003f80:	40000c00 	.word	0x40000c00
 8003f84:	40010400 	.word	0x40010400
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40014400 	.word	0x40014400
 8003f90:	40014800 	.word	0x40014800
 8003f94:	40001800 	.word	0x40001800
 8003f98:	40001c00 	.word	0x40001c00
 8003f9c:	40002000 	.word	0x40002000

08003fa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f023 0201 	bic.w	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0303 	bic.w	r3, r3, #3
 8003fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f023 0302 	bic.w	r3, r3, #2
 8003fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a20      	ldr	r2, [pc, #128]	@ (8004078 <TIM_OC1_SetConfig+0xd8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d003      	beq.n	8004004 <TIM_OC1_SetConfig+0x64>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800407c <TIM_OC1_SetConfig+0xdc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d10c      	bne.n	800401e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f023 0308 	bic.w	r3, r3, #8
 800400a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f023 0304 	bic.w	r3, r3, #4
 800401c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a15      	ldr	r2, [pc, #84]	@ (8004078 <TIM_OC1_SetConfig+0xd8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d003      	beq.n	800402e <TIM_OC1_SetConfig+0x8e>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a14      	ldr	r2, [pc, #80]	@ (800407c <TIM_OC1_SetConfig+0xdc>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d111      	bne.n	8004052 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800403c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	621a      	str	r2, [r3, #32]
}
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	40010000 	.word	0x40010000
 800407c:	40010400 	.word	0x40010400

08004080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	f023 0210 	bic.w	r2, r3, #16
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	021b      	lsls	r3, r3, #8
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f023 0320 	bic.w	r3, r3, #32
 80040ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a22      	ldr	r2, [pc, #136]	@ (8004164 <TIM_OC2_SetConfig+0xe4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <TIM_OC2_SetConfig+0x68>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a21      	ldr	r2, [pc, #132]	@ (8004168 <TIM_OC2_SetConfig+0xe8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d10d      	bne.n	8004104 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004102:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a17      	ldr	r2, [pc, #92]	@ (8004164 <TIM_OC2_SetConfig+0xe4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_OC2_SetConfig+0x94>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a16      	ldr	r2, [pc, #88]	@ (8004168 <TIM_OC2_SetConfig+0xe8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d113      	bne.n	800413c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800411a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	621a      	str	r2, [r3, #32]
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40010000 	.word	0x40010000
 8004168:	40010400 	.word	0x40010400

0800416c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800419a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0303 	bic.w	r3, r3, #3
 80041a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a21      	ldr	r2, [pc, #132]	@ (800424c <TIM_OC3_SetConfig+0xe0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d003      	beq.n	80041d2 <TIM_OC3_SetConfig+0x66>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a20      	ldr	r2, [pc, #128]	@ (8004250 <TIM_OC3_SetConfig+0xe4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10d      	bne.n	80041ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a16      	ldr	r2, [pc, #88]	@ (800424c <TIM_OC3_SetConfig+0xe0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_OC3_SetConfig+0x92>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a15      	ldr	r2, [pc, #84]	@ (8004250 <TIM_OC3_SetConfig+0xe4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d113      	bne.n	8004226 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800420c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	621a      	str	r2, [r3, #32]
}
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40010000 	.word	0x40010000
 8004250:	40010400 	.word	0x40010400

08004254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800428a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800429e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	031b      	lsls	r3, r3, #12
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a12      	ldr	r2, [pc, #72]	@ (80042f8 <TIM_OC4_SetConfig+0xa4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d003      	beq.n	80042bc <TIM_OC4_SetConfig+0x68>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a11      	ldr	r2, [pc, #68]	@ (80042fc <TIM_OC4_SetConfig+0xa8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d109      	bne.n	80042d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	019b      	lsls	r3, r3, #6
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	621a      	str	r2, [r3, #32]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40010000 	.word	0x40010000
 80042fc:	40010400 	.word	0x40010400

08004300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	f023 0201 	bic.w	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800432a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f023 030a 	bic.w	r3, r3, #10
 800433c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4313      	orrs	r3, r2
 8004344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	621a      	str	r2, [r3, #32]
}
 8004352:	bf00      	nop
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800435e:	b480      	push	{r7}
 8004360:	b087      	sub	sp, #28
 8004362:	af00      	add	r7, sp, #0
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	f023 0210 	bic.w	r2, r3, #16
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004388:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	031b      	lsls	r3, r3, #12
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800439a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	621a      	str	r2, [r3, #32]
}
 80043b2:	bf00      	nop
 80043b4:	371c      	adds	r7, #28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043be:	b480      	push	{r7}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
 80043c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	f043 0307 	orr.w	r3, r3, #7
 80043e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	609a      	str	r2, [r3, #8]
}
 80043e8:	bf00      	nop
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800440e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	021a      	lsls	r2, r3, #8
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	431a      	orrs	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4313      	orrs	r3, r2
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	4313      	orrs	r3, r2
 8004420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	609a      	str	r2, [r3, #8]
}
 8004428:	bf00      	nop
 800442a:	371c      	adds	r7, #28
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	2201      	movs	r2, #1
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a1a      	ldr	r2, [r3, #32]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	43db      	mvns	r3, r3
 8004456:	401a      	ands	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a1a      	ldr	r2, [r3, #32]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 031f 	and.w	r3, r3, #31
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	fa01 f303 	lsl.w	r3, r1, r3
 800446c:	431a      	orrs	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	621a      	str	r2, [r3, #32]
}
 8004472:	bf00      	nop
 8004474:	371c      	adds	r7, #28
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
	...

08004480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004494:	2302      	movs	r3, #2
 8004496:	e05a      	b.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a21      	ldr	r2, [pc, #132]	@ (800455c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d022      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e4:	d01d      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004560 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d018      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004564 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d013      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004568 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00e      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a18      	ldr	r2, [pc, #96]	@ (800456c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d009      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a17      	ldr	r2, [pc, #92]	@ (8004570 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a15      	ldr	r2, [pc, #84]	@ (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d10c      	bne.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004528:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	4313      	orrs	r3, r2
 8004532:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40010000 	.word	0x40010000
 8004560:	40000400 	.word	0x40000400
 8004564:	40000800 	.word	0x40000800
 8004568:	40000c00 	.word	0x40000c00
 800456c:	40010400 	.word	0x40010400
 8004570:	40014000 	.word	0x40014000
 8004574:	40001800 	.word	0x40001800

08004578 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004590:	2302      	movs	r3, #2
 8004592:	e03d      	b.n	8004610 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <memset>:
 8004644:	4402      	add	r2, r0
 8004646:	4603      	mov	r3, r0
 8004648:	4293      	cmp	r3, r2
 800464a:	d100      	bne.n	800464e <memset+0xa>
 800464c:	4770      	bx	lr
 800464e:	f803 1b01 	strb.w	r1, [r3], #1
 8004652:	e7f9      	b.n	8004648 <memset+0x4>

08004654 <__libc_init_array>:
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	4d0d      	ldr	r5, [pc, #52]	@ (800468c <__libc_init_array+0x38>)
 8004658:	4c0d      	ldr	r4, [pc, #52]	@ (8004690 <__libc_init_array+0x3c>)
 800465a:	1b64      	subs	r4, r4, r5
 800465c:	10a4      	asrs	r4, r4, #2
 800465e:	2600      	movs	r6, #0
 8004660:	42a6      	cmp	r6, r4
 8004662:	d109      	bne.n	8004678 <__libc_init_array+0x24>
 8004664:	4d0b      	ldr	r5, [pc, #44]	@ (8004694 <__libc_init_array+0x40>)
 8004666:	4c0c      	ldr	r4, [pc, #48]	@ (8004698 <__libc_init_array+0x44>)
 8004668:	f000 f818 	bl	800469c <_init>
 800466c:	1b64      	subs	r4, r4, r5
 800466e:	10a4      	asrs	r4, r4, #2
 8004670:	2600      	movs	r6, #0
 8004672:	42a6      	cmp	r6, r4
 8004674:	d105      	bne.n	8004682 <__libc_init_array+0x2e>
 8004676:	bd70      	pop	{r4, r5, r6, pc}
 8004678:	f855 3b04 	ldr.w	r3, [r5], #4
 800467c:	4798      	blx	r3
 800467e:	3601      	adds	r6, #1
 8004680:	e7ee      	b.n	8004660 <__libc_init_array+0xc>
 8004682:	f855 3b04 	ldr.w	r3, [r5], #4
 8004686:	4798      	blx	r3
 8004688:	3601      	adds	r6, #1
 800468a:	e7f2      	b.n	8004672 <__libc_init_array+0x1e>
 800468c:	080046cc 	.word	0x080046cc
 8004690:	080046cc 	.word	0x080046cc
 8004694:	080046cc 	.word	0x080046cc
 8004698:	080046d0 	.word	0x080046d0

0800469c <_init>:
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469e:	bf00      	nop
 80046a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a2:	bc08      	pop	{r3}
 80046a4:	469e      	mov	lr, r3
 80046a6:	4770      	bx	lr

080046a8 <_fini>:
 80046a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046aa:	bf00      	nop
 80046ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ae:	bc08      	pop	{r3}
 80046b0:	469e      	mov	lr, r3
 80046b2:	4770      	bx	lr
