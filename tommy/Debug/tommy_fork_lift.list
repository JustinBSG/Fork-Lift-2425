
tommy_fork_lift.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047fc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080049d4  080049d4  000059d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a14  08004a14  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a14  08004a14  00005a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a1c  08004a1c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a1c  08004a1c  00005a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a20  08004a20  00005a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004a24  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  2000000c  08004a30  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08004a30  0000628c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011da1  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c1  00000000  00000000  00017ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  0001a2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9a  00000000  00000000  0001b2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000022ca  00000000  00000000  0001bf5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001348a  00000000  00000000  0001e224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d947f  00000000  00000000  000316ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ab2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043ec  00000000  00000000  0010ab70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0010ef5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080049bc 	.word	0x080049bc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080049bc 	.word	0x080049bc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 031c 	add.w	r3, r7, #28
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800051e:	4b66      	ldr	r3, [pc, #408]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a65      	ldr	r2, [pc, #404]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000524:	f043 0310 	orr.w	r3, r3, #16
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b63      	ldr	r3, [pc, #396]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0310 	and.w	r3, r3, #16
 8000532:	61bb      	str	r3, [r7, #24]
 8000534:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	4b60      	ldr	r3, [pc, #384]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a5f      	ldr	r2, [pc, #380]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 800053c:	f043 0304 	orr.w	r3, r3, #4
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b5d      	ldr	r3, [pc, #372]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054e:	4b5a      	ldr	r3, [pc, #360]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000552:	4a59      	ldr	r2, [pc, #356]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000554:	f043 0320 	orr.w	r3, r3, #32
 8000558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055a:	4b57      	ldr	r3, [pc, #348]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	f003 0320 	and.w	r3, r3, #32
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b54      	ldr	r3, [pc, #336]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	4a53      	ldr	r2, [pc, #332]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000572:	4b51      	ldr	r3, [pc, #324]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b4e      	ldr	r3, [pc, #312]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000582:	4a4d      	ldr	r2, [pc, #308]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000584:	f043 0302 	orr.w	r3, r3, #2
 8000588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058a:	4b4b      	ldr	r3, [pc, #300]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000596:	4b48      	ldr	r3, [pc, #288]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059a:	4a47      	ldr	r2, [pc, #284]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a2:	4b45      	ldr	r3, [pc, #276]	@ (80006b8 <MX_GPIO_Init+0x1b0>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a6:	f003 0308 	and.w	r3, r3, #8
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, D_IN1_Pin|LED4_Pin|LED3_Pin|LED2_Pin
 80005ae:	2200      	movs	r2, #0
 80005b0:	f64f 71c3 	movw	r1, #65475	@ 0xffc3
 80005b4:	4841      	ldr	r0, [pc, #260]	@ (80006bc <MX_GPIO_Init+0x1b4>)
 80005b6:	f001 fa21 	bl	80019fc <HAL_GPIO_WritePin>
                          |LED1_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |LINEAR_ACT_2_2_Pin|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LINEAR_ACT_2_1_Pin|LINEAR_ACT_1_2_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80005c0:	483f      	ldr	r0, [pc, #252]	@ (80006c0 <MX_GPIO_Init+0x1b8>)
 80005c2:	f001 fa1b 	bl	80019fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 417e 	mov.w	r1, #65024	@ 0xfe00
 80005cc:	483d      	ldr	r0, [pc, #244]	@ (80006c4 <MX_GPIO_Init+0x1bc>)
 80005ce:	f001 fa15 	bl	80019fc <HAL_GPIO_WritePin>
                          |C_IN1_Pin|C_IN2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D_IN2_Pin|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80005d8:	483b      	ldr	r0, [pc, #236]	@ (80006c8 <MX_GPIO_Init+0x1c0>)
 80005da:	f001 fa0f 	bl	80019fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_IN2_Pin|A_IN1_Pin|B_IN1_Pin|B_IN2_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 80005e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e8:	f001 fa08 	bl	80019fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LINEAR_ACT_1_1_GPIO_Port, LINEAR_ACT_1_1_Pin, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005f2:	4836      	ldr	r0, [pc, #216]	@ (80006cc <MX_GPIO_Init+0x1c4>)
 80005f4:	f001 fa02 	bl	80019fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D_IN1_Pin LED4_Pin LED3_Pin LED2_Pin
                           LED1_Pin PE11 PE12 PE13
                           LINEAR_ACT_2_2_Pin PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = D_IN1_Pin|LED4_Pin|LED3_Pin|LED2_Pin
 80005f8:	f64f 73c3 	movw	r3, #65475	@ 0xffc3
 80005fc:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |LINEAR_ACT_2_2_Pin|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	4619      	mov	r1, r3
 8000610:	482a      	ldr	r0, [pc, #168]	@ (80006bc <MX_GPIO_Init+0x1b4>)
 8000612:	f001 f871 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LINEAR_ACT_2_1_Pin LINEAR_ACT_1_2_Pin */
  GPIO_InitStruct.Pin = LINEAR_ACT_2_1_Pin|LINEAR_ACT_1_2_Pin;
 8000616:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800061a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2300      	movs	r3, #0
 8000626:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4619      	mov	r1, r3
 800062e:	4824      	ldr	r0, [pc, #144]	@ (80006c0 <MX_GPIO_Init+0x1b8>)
 8000630:	f001 f862 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           C_IN1_Pin C_IN2_Pin PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000634:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8000638:	61fb      	str	r3, [r7, #28]
                          |C_IN1_Pin|C_IN2_Pin|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	4619      	mov	r1, r3
 800064c:	481d      	ldr	r0, [pc, #116]	@ (80006c4 <MX_GPIO_Init+0x1bc>)
 800064e:	f001 f853 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_IN2_Pin PD9 PD10 */
  GPIO_InitStruct.Pin = D_IN2_Pin|GPIO_PIN_9|GPIO_PIN_10;
 8000652:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4619      	mov	r1, r3
 800066a:	4817      	ldr	r0, [pc, #92]	@ (80006c8 <MX_GPIO_Init+0x1c0>)
 800066c:	f001 f844 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_IN2_Pin A_IN1_Pin B_IN1_Pin B_IN2_Pin */
  GPIO_InitStruct.Pin = A_IN2_Pin|A_IN1_Pin|B_IN1_Pin|B_IN2_Pin;
 8000670:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4619      	mov	r1, r3
 8000688:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068c:	f001 f834 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LINEAR_ACT_1_1_Pin */
  GPIO_InitStruct.Pin = LINEAR_ACT_1_1_Pin;
 8000690:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LINEAR_ACT_1_1_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4619      	mov	r1, r3
 80006a8:	4808      	ldr	r0, [pc, #32]	@ (80006cc <MX_GPIO_Init+0x1c4>)
 80006aa:	f001 f825 	bl	80016f8 <HAL_GPIO_Init>

}
 80006ae:	bf00      	nop
 80006b0:	3730      	adds	r7, #48	@ 0x30
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000
 80006bc:	48001000 	.word	0x48001000
 80006c0:	48001400 	.word	0x48001400
 80006c4:	48000400 	.word	0x48000400
 80006c8:	48000c00 	.word	0x48000c00
 80006cc:	48000800 	.word	0x48000800

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 fe99 	bl	800140a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f98e 	bl	80009f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f7ff ff14 	bl	8000508 <MX_GPIO_Init>
  MX_TIM3_Init();
 80006e0:	f000 faea 	bl	8000cb8 <MX_TIM3_Init>
  MX_TIM1_Init();
 80006e4:	f000 fa34 	bl	8000b50 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006e8:	f000 fa8c 	bl	8000c04 <MX_TIM2_Init>
  MX_TIM4_Init();
 80006ec:	f000 fb54 	bl	8000d98 <MX_TIM4_Init>
  MX_TIM5_Init();
 80006f0:	f000 fba8 	bl	8000e44 <MX_TIM5_Init>
  MX_TIM8_Init();
 80006f4:	f000 fbfc 	bl	8000ef0 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80006f8:	f000 fdba 	bl	8001270 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80006fc:	2108      	movs	r1, #8
 80006fe:	48b1      	ldr	r0, [pc, #708]	@ (80009c4 <main+0x2f4>)
 8000700:	f002 faae 	bl	8002c60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000704:	2100      	movs	r1, #0
 8000706:	48b0      	ldr	r0, [pc, #704]	@ (80009c8 <main+0x2f8>)
 8000708:	f002 faaa 	bl	8002c60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800070c:	2104      	movs	r1, #4
 800070e:	48ae      	ldr	r0, [pc, #696]	@ (80009c8 <main+0x2f8>)
 8000710:	f002 faa6 	bl	8002c60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000714:	210c      	movs	r1, #12
 8000716:	48ac      	ldr	r0, [pc, #688]	@ (80009c8 <main+0x2f8>)
 8000718:	f002 faa2 	bl	8002c60 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim1);
 800071c:	48ab      	ldr	r0, [pc, #684]	@ (80009cc <main+0x2fc>)
 800071e:	f002 f9cf 	bl	8002ac0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000722:	213c      	movs	r1, #60	@ 0x3c
 8000724:	48a9      	ldr	r0, [pc, #676]	@ (80009cc <main+0x2fc>)
 8000726:	f002 fc53 	bl	8002fd0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800072a:	48a9      	ldr	r0, [pc, #676]	@ (80009d0 <main+0x300>)
 800072c:	f002 f9c8 	bl	8002ac0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000730:	213c      	movs	r1, #60	@ 0x3c
 8000732:	48a7      	ldr	r0, [pc, #668]	@ (80009d0 <main+0x300>)
 8000734:	f002 fc4c 	bl	8002fd0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8000738:	48a6      	ldr	r0, [pc, #664]	@ (80009d4 <main+0x304>)
 800073a:	f002 f9c1 	bl	8002ac0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 800073e:	213c      	movs	r1, #60	@ 0x3c
 8000740:	48a4      	ldr	r0, [pc, #656]	@ (80009d4 <main+0x304>)
 8000742:	f002 fc45 	bl	8002fd0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8000746:	48a4      	ldr	r0, [pc, #656]	@ (80009d8 <main+0x308>)
 8000748:	f002 f9ba 	bl	8002ac0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 800074c:	213c      	movs	r1, #60	@ 0x3c
 800074e:	48a2      	ldr	r0, [pc, #648]	@ (80009d8 <main+0x308>)
 8000750:	f002 fc3e 	bl	8002fd0 <HAL_TIM_Encoder_Start_IT>

  HAL_GPIO_WritePin(LINEAR_ACT_1_1_GPIO_Port, LINEAR_ACT_1_1_Pin, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800075a:	48a0      	ldr	r0, [pc, #640]	@ (80009dc <main+0x30c>)
 800075c:	f001 f94e 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LINEAR_ACT_1_2_GPIO_Port, LINEAR_ACT_1_2_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2104      	movs	r1, #4
 8000764:	489e      	ldr	r0, [pc, #632]	@ (80009e0 <main+0x310>)
 8000766:	f001 f949 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LINEAR_ACT_2_1_GPIO_Port, LINEAR_ACT_2_1_Pin, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000770:	489b      	ldr	r0, [pc, #620]	@ (80009e0 <main+0x310>)
 8000772:	f001 f943 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LINEAR_ACT_2_2_GPIO_Port, LINEAR_ACT_2_2_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800077c:	4899      	ldr	r0, [pc, #612]	@ (80009e4 <main+0x314>)
 800077e:	f001 f93d 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(A_IN1_GPIO_Port, A_IN1_Pin, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000788:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078c:	f001 f936 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(A_IN2_GPIO_Port, A_IN2_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000796:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079a:	f001 f92f 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(B_IN1_GPIO_Port, B_IN1_Pin, GPIO_PIN_SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a8:	f001 f928 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(B_IN2_GPIO_Port, B_IN2_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b6:	f001 f921 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007c0:	4889      	ldr	r0, [pc, #548]	@ (80009e8 <main+0x318>)
 80007c2:	f001 f91b 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007cc:	4886      	ldr	r0, [pc, #536]	@ (80009e8 <main+0x318>)
 80007ce:	f001 f915 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D_IN1_GPIO_Port, D_IN1_Pin, GPIO_PIN_SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	2140      	movs	r1, #64	@ 0x40
 80007d6:	4883      	ldr	r0, [pc, #524]	@ (80009e4 <main+0x314>)
 80007d8:	f001 f910 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D_IN2_GPIO_Port, D_IN2_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e2:	4882      	ldr	r0, [pc, #520]	@ (80009ec <main+0x31c>)
 80007e4:	f001 f90a 	bl	80019fc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2101      	movs	r1, #1
 80007ec:	487d      	ldr	r0, [pc, #500]	@ (80009e4 <main+0x314>)
 80007ee:	f001 f905 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET); 
 80007f2:	2201      	movs	r2, #1
 80007f4:	2102      	movs	r1, #2
 80007f6:	487b      	ldr	r0, [pc, #492]	@ (80009e4 <main+0x314>)
 80007f8:	f001 f900 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000802:	4879      	ldr	r0, [pc, #484]	@ (80009e8 <main+0x318>)
 8000804:	f001 f8fa 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800080e:	4877      	ldr	r0, [pc, #476]	@ (80009ec <main+0x31c>)
 8000810:	f001 f8f4 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800081a:	4874      	ldr	r0, [pc, #464]	@ (80009ec <main+0x31c>)
 800081c:	f001 f8ee 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000826:	4870      	ldr	r0, [pc, #448]	@ (80009e8 <main+0x318>)
 8000828:	f001 f8e8 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000832:	486d      	ldr	r0, [pc, #436]	@ (80009e8 <main+0x318>)
 8000834:	f001 f8e2 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800083e:	486a      	ldr	r0, [pc, #424]	@ (80009e8 <main+0x318>)
 8000840:	f001 f8dc 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800084a:	4867      	ldr	r0, [pc, #412]	@ (80009e8 <main+0x318>)
 800084c:	f001 f8d6 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000856:	4863      	ldr	r0, [pc, #396]	@ (80009e4 <main+0x314>)
 8000858:	f001 f8d0 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000862:	4860      	ldr	r0, [pc, #384]	@ (80009e4 <main+0x314>)
 8000864:	f001 f8ca 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800086e:	485d      	ldr	r0, [pc, #372]	@ (80009e4 <main+0x314>)
 8000870:	f001 f8c4 	bl	80019fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800087a:	485a      	ldr	r0, [pc, #360]	@ (80009e4 <main+0x314>)
 800087c:	f001 f8be 	bl	80019fc <HAL_GPIO_WritePin>

  TIM3->CCR4 = 65535/4;
 8000880:	4b5b      	ldr	r3, [pc, #364]	@ (80009f0 <main+0x320>)
 8000882:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 8000886:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3->CCR2 = 65535/4;
 8000888:	4b59      	ldr	r3, [pc, #356]	@ (80009f0 <main+0x320>)
 800088a:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 800088e:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3->CCR1 = 65535/4;
 8000890:	4b57      	ldr	r3, [pc, #348]	@ (80009f0 <main+0x320>)
 8000892:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 8000896:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2->CCR3 = 65535/4;
 8000898:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800089c:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 80008a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 80008a2:	2001      	movs	r0, #1
 80008a4:	f000 fe22 	bl	80014ec <HAL_Delay>
          linear_actuator_retract(&linear_actuator[1]);
      }
      prev_horizontal_linear_actuator_extend = controller_state.square;
    }
#else
    if (HAL_GetTick() - time_stamp > 3000) {
 80008a8:	f000 fe14 	bl	80014d4 <HAL_GetTick>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a51      	ldr	r2, [pc, #324]	@ (80009f4 <main+0x324>)
 80008b0:	6812      	ldr	r2, [r2, #0]
 80008b2:	1a9b      	subs	r3, r3, r2
 80008b4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d9f2      	bls.n	80008a2 <main+0x1d2>
      time_stamp = HAL_GetTick();
 80008bc:	f000 fe0a 	bl	80014d4 <HAL_GetTick>
 80008c0:	4603      	mov	r3, r0
 80008c2:	461a      	mov	r2, r3
 80008c4:	4b4b      	ldr	r3, [pc, #300]	@ (80009f4 <main+0x324>)
 80008c6:	601a      	str	r2, [r3, #0]
      HAL_GPIO_TogglePin(LINEAR_ACT_1_1_GPIO_Port, LINEAR_ACT_1_1_Pin);
 80008c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008cc:	4843      	ldr	r0, [pc, #268]	@ (80009dc <main+0x30c>)
 80008ce:	f001 f8ad 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LINEAR_ACT_1_2_GPIO_Port, LINEAR_ACT_1_2_Pin);
 80008d2:	2104      	movs	r1, #4
 80008d4:	4842      	ldr	r0, [pc, #264]	@ (80009e0 <main+0x310>)
 80008d6:	f001 f8a9 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LINEAR_ACT_2_1_GPIO_Port, LINEAR_ACT_2_1_Pin);
 80008da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008de:	4840      	ldr	r0, [pc, #256]	@ (80009e0 <main+0x310>)
 80008e0:	f001 f8a4 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LINEAR_ACT_2_2_GPIO_Port, LINEAR_ACT_2_2_Pin);
 80008e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008e8:	483e      	ldr	r0, [pc, #248]	@ (80009e4 <main+0x314>)
 80008ea:	f001 f89f 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(A_IN1_GPIO_Port, A_IN1_Pin);
 80008ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f6:	f001 f899 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(A_IN2_GPIO_Port, A_IN2_Pin);
 80008fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000902:	f001 f893 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(B_IN1_GPIO_Port, B_IN1_Pin);
 8000906:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800090a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090e:	f001 f88d 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(B_IN2_GPIO_Port, B_IN2_Pin);
 8000912:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091a:	f001 f887 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(C_IN1_GPIO_Port, C_IN1_Pin);
 800091e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000922:	4831      	ldr	r0, [pc, #196]	@ (80009e8 <main+0x318>)
 8000924:	f001 f882 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(C_IN2_GPIO_Port, C_IN2_Pin);
 8000928:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800092c:	482e      	ldr	r0, [pc, #184]	@ (80009e8 <main+0x318>)
 800092e:	f001 f87d 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(D_IN1_GPIO_Port, D_IN1_Pin);
 8000932:	2140      	movs	r1, #64	@ 0x40
 8000934:	482b      	ldr	r0, [pc, #172]	@ (80009e4 <main+0x314>)
 8000936:	f001 f879 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(D_IN2_GPIO_Port, D_IN2_Pin);
 800093a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800093e:	482b      	ldr	r0, [pc, #172]	@ (80009ec <main+0x31c>)
 8000940:	f001 f874 	bl	8001a2c <HAL_GPIO_TogglePin>

      HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_0);
 8000944:	2101      	movs	r1, #1
 8000946:	4827      	ldr	r0, [pc, #156]	@ (80009e4 <main+0x314>)
 8000948:	f001 f870 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 800094c:	2102      	movs	r1, #2
 800094e:	4825      	ldr	r0, [pc, #148]	@ (80009e4 <main+0x314>)
 8000950:	f001 f86c 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000954:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000958:	4823      	ldr	r0, [pc, #140]	@ (80009e8 <main+0x318>)
 800095a:	f001 f867 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_10);
 800095e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000962:	4822      	ldr	r0, [pc, #136]	@ (80009ec <main+0x31c>)
 8000964:	f001 f862 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_11);
 8000968:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800096c:	481f      	ldr	r0, [pc, #124]	@ (80009ec <main+0x31c>)
 800096e:	f001 f85d 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8000972:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000976:	481c      	ldr	r0, [pc, #112]	@ (80009e8 <main+0x318>)
 8000978:	f001 f858 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800097c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000980:	4819      	ldr	r0, [pc, #100]	@ (80009e8 <main+0x318>)
 8000982:	f001 f853 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 8000986:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800098a:	4817      	ldr	r0, [pc, #92]	@ (80009e8 <main+0x318>)
 800098c:	f001 f84e 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 8000990:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000994:	4814      	ldr	r0, [pc, #80]	@ (80009e8 <main+0x318>)
 8000996:	f001 f849 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);
 800099a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800099e:	4811      	ldr	r0, [pc, #68]	@ (80009e4 <main+0x314>)
 80009a0:	f001 f844 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
 80009a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009a8:	480e      	ldr	r0, [pc, #56]	@ (80009e4 <main+0x314>)
 80009aa:	f001 f83f 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 80009ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009b2:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <main+0x314>)
 80009b4:	f001 f83a 	bl	8001a2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 80009b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009bc:	4809      	ldr	r0, [pc, #36]	@ (80009e4 <main+0x314>)
 80009be:	f001 f835 	bl	8001a2c <HAL_GPIO_TogglePin>
    HAL_Delay(1);
 80009c2:	e76e      	b.n	80008a2 <main+0x1d2>
 80009c4:	20000078 	.word	0x20000078
 80009c8:	200000c4 	.word	0x200000c4
 80009cc:	2000002c 	.word	0x2000002c
 80009d0:	20000110 	.word	0x20000110
 80009d4:	2000015c 	.word	0x2000015c
 80009d8:	200001a8 	.word	0x200001a8
 80009dc:	48000800 	.word	0x48000800
 80009e0:	48001400 	.word	0x48001400
 80009e4:	48001000 	.word	0x48001000
 80009e8:	48000400 	.word	0x48000400
 80009ec:	48000c00 	.word	0x48000c00
 80009f0:	40000400 	.word	0x40000400
 80009f4:	20000028 	.word	0x20000028

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b094      	sub	sp, #80	@ 0x50
 80009fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fe:	f107 0318 	add.w	r3, r7, #24
 8000a02:	2238      	movs	r2, #56	@ 0x38
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f003 ffac 	bl	8004964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a1a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a1e:	f001 f81f 	bl	8001a60 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a22:	2302      	movs	r3, #2
 8000a24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a2c:	2340      	movs	r3, #64	@ 0x40
 8000a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a34:	f107 0318 	add.w	r3, r7, #24
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 f8c5 	bl	8001bc8 <HAL_RCC_OscConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a44:	f000 f818 	bl	8000a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a48:	230f      	movs	r3, #15
 8000a4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 fbc3 	bl	80021ec <HAL_RCC_ClockConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a6c:	f000 f804 	bl	8000a78 <Error_Handler>
  }
}
 8000a70:	bf00      	nop
 8000a72:	3750      	adds	r7, #80	@ 0x50
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <Error_Handler+0x8>

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa6:	4a08      	ldr	r2, [pc, #32]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000aba:	f001 f875 	bl	8001ba8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b22:	f000 fcc5 	bl	80014b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	@ (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	@ 0x30
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	2224      	movs	r2, #36	@ 0x24
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f003 ff00 	bl	8004964 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b64:	463b      	mov	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b6e:	4b23      	ldr	r3, [pc, #140]	@ (8000bfc <MX_TIM1_Init+0xac>)
 8000b70:	4a23      	ldr	r2, [pc, #140]	@ (8000c00 <MX_TIM1_Init+0xb0>)
 8000b72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b74:	4b21      	ldr	r3, [pc, #132]	@ (8000bfc <MX_TIM1_Init+0xac>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <MX_TIM1_Init+0xac>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b80:	4b1e      	ldr	r3, [pc, #120]	@ (8000bfc <MX_TIM1_Init+0xac>)
 8000b82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b88:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <MX_TIM1_Init+0xac>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bfc <MX_TIM1_Init+0xac>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b94:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <MX_TIM1_Init+0xac>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480d      	ldr	r0, [pc, #52]	@ (8000bfc <MX_TIM1_Init+0xac>)
 8000bc6:	f002 f95d 	bl	8002e84 <HAL_TIM_Encoder_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000bd0:	f7ff ff52 	bl	8000a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <MX_TIM1_Init+0xac>)
 8000be6:	f002 ffb9 	bl	8003b5c <HAL_TIMEx_MasterConfigSynchronization>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000bf0:	f7ff ff42 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	3730      	adds	r7, #48	@ 0x30
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	2000002c 	.word	0x2000002c
 8000c00:	40012c00 	.word	0x40012c00

08000c04 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	@ 0x28
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c16:	463b      	mov	r3, r7
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
 8000c24:	615a      	str	r2, [r3, #20]
 8000c26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c28:	4b22      	ldr	r3, [pc, #136]	@ (8000cb4 <MX_TIM2_Init+0xb0>)
 8000c2a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c30:	4b20      	ldr	r3, [pc, #128]	@ (8000cb4 <MX_TIM2_Init+0xb0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb4 <MX_TIM2_Init+0xb0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <MX_TIM2_Init+0xb0>)
 8000c3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb4 <MX_TIM2_Init+0xb0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <MX_TIM2_Init+0xb0>)
 8000c4c:	2280      	movs	r2, #128	@ 0x80
 8000c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c50:	4818      	ldr	r0, [pc, #96]	@ (8000cb4 <MX_TIM2_Init+0xb0>)
 8000c52:	f001 ffad 	bl	8002bb0 <HAL_TIM_PWM_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000c5c:	f7ff ff0c 	bl	8000a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4811      	ldr	r0, [pc, #68]	@ (8000cb4 <MX_TIM2_Init+0xb0>)
 8000c70:	f002 ff74 	bl	8003b5c <HAL_TIMEx_MasterConfigSynchronization>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000c7a:	f7ff fefd 	bl	8000a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c7e:	2360      	movs	r3, #96	@ 0x60
 8000c80:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c8e:	463b      	mov	r3, r7
 8000c90:	2208      	movs	r2, #8
 8000c92:	4619      	mov	r1, r3
 8000c94:	4807      	ldr	r0, [pc, #28]	@ (8000cb4 <MX_TIM2_Init+0xb0>)
 8000c96:	f002 fa49 	bl	800312c <HAL_TIM_PWM_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000ca0:	f7ff feea 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ca4:	4803      	ldr	r0, [pc, #12]	@ (8000cb4 <MX_TIM2_Init+0xb0>)
 8000ca6:	f000 fa87 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	@ 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000078 	.word	0x20000078

08000cb8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	@ 0x28
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cca:	463b      	mov	r3, r7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	615a      	str	r2, [r3, #20]
 8000cda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8000d90 <MX_TIM3_Init+0xd8>)
 8000cde:	4a2d      	ldr	r2, [pc, #180]	@ (8000d94 <MX_TIM3_Init+0xdc>)
 8000ce0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8000d90 <MX_TIM3_Init+0xd8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce8:	4b29      	ldr	r3, [pc, #164]	@ (8000d90 <MX_TIM3_Init+0xd8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cee:	4b28      	ldr	r3, [pc, #160]	@ (8000d90 <MX_TIM3_Init+0xd8>)
 8000cf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cf4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf6:	4b26      	ldr	r3, [pc, #152]	@ (8000d90 <MX_TIM3_Init+0xd8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cfc:	4b24      	ldr	r3, [pc, #144]	@ (8000d90 <MX_TIM3_Init+0xd8>)
 8000cfe:	2280      	movs	r2, #128	@ 0x80
 8000d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d02:	4823      	ldr	r0, [pc, #140]	@ (8000d90 <MX_TIM3_Init+0xd8>)
 8000d04:	f001 ff54 	bl	8002bb0 <HAL_TIM_PWM_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000d0e:	f7ff feb3 	bl	8000a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	481b      	ldr	r0, [pc, #108]	@ (8000d90 <MX_TIM3_Init+0xd8>)
 8000d22:	f002 ff1b 	bl	8003b5c <HAL_TIMEx_MasterConfigSynchronization>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000d2c:	f7ff fea4 	bl	8000a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d30:	2360      	movs	r3, #96	@ 0x60
 8000d32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d40:	463b      	mov	r3, r7
 8000d42:	2200      	movs	r2, #0
 8000d44:	4619      	mov	r1, r3
 8000d46:	4812      	ldr	r0, [pc, #72]	@ (8000d90 <MX_TIM3_Init+0xd8>)
 8000d48:	f002 f9f0 	bl	800312c <HAL_TIM_PWM_ConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000d52:	f7ff fe91 	bl	8000a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d56:	463b      	mov	r3, r7
 8000d58:	2204      	movs	r2, #4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480c      	ldr	r0, [pc, #48]	@ (8000d90 <MX_TIM3_Init+0xd8>)
 8000d5e:	f002 f9e5 	bl	800312c <HAL_TIM_PWM_ConfigChannel>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000d68:	f7ff fe86 	bl	8000a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	220c      	movs	r2, #12
 8000d70:	4619      	mov	r1, r3
 8000d72:	4807      	ldr	r0, [pc, #28]	@ (8000d90 <MX_TIM3_Init+0xd8>)
 8000d74:	f002 f9da 	bl	800312c <HAL_TIM_PWM_ConfigChannel>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8000d7e:	f7ff fe7b 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d82:	4803      	ldr	r0, [pc, #12]	@ (8000d90 <MX_TIM3_Init+0xd8>)
 8000d84:	f000 fa18 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 8000d88:	bf00      	nop
 8000d8a:	3728      	adds	r7, #40	@ 0x28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200000c4 	.word	0x200000c4
 8000d94:	40000400 	.word	0x40000400

08000d98 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08c      	sub	sp, #48	@ 0x30
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	2224      	movs	r2, #36	@ 0x24
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f003 fddc 	bl	8004964 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dac:	463b      	mov	r3, r7
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000db6:	4b21      	ldr	r3, [pc, #132]	@ (8000e3c <MX_TIM4_Init+0xa4>)
 8000db8:	4a21      	ldr	r2, [pc, #132]	@ (8000e40 <MX_TIM4_Init+0xa8>)
 8000dba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e3c <MX_TIM4_Init+0xa4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e3c <MX_TIM4_Init+0xa4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <MX_TIM4_Init+0xa4>)
 8000dca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <MX_TIM4_Init+0xa4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <MX_TIM4_Init+0xa4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000de0:	2300      	movs	r3, #0
 8000de2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000de4:	2301      	movs	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000df0:	2300      	movs	r3, #0
 8000df2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000df4:	2301      	movs	r3, #1
 8000df6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	4619      	mov	r1, r3
 8000e06:	480d      	ldr	r0, [pc, #52]	@ (8000e3c <MX_TIM4_Init+0xa4>)
 8000e08:	f002 f83c 	bl	8002e84 <HAL_TIM_Encoder_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000e12:	f7ff fe31 	bl	8000a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	@ (8000e3c <MX_TIM4_Init+0xa4>)
 8000e24:	f002 fe9a 	bl	8003b5c <HAL_TIMEx_MasterConfigSynchronization>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000e2e:	f7ff fe23 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3730      	adds	r7, #48	@ 0x30
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000110 	.word	0x20000110
 8000e40:	40000800 	.word	0x40000800

08000e44 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08c      	sub	sp, #48	@ 0x30
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	2224      	movs	r2, #36	@ 0x24
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 fd86 	bl	8004964 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e58:	463b      	mov	r3, r7
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e62:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <MX_TIM5_Init+0xa4>)
 8000e64:	4a21      	ldr	r2, [pc, #132]	@ (8000eec <MX_TIM5_Init+0xa8>)
 8000e66:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee8 <MX_TIM5_Init+0xa4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee8 <MX_TIM5_Init+0xa4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000e74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee8 <MX_TIM5_Init+0xa4>)
 8000e76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e7a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee8 <MX_TIM5_Init+0xa4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e82:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <MX_TIM5_Init+0xa4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e90:	2301      	movs	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480d      	ldr	r0, [pc, #52]	@ (8000ee8 <MX_TIM5_Init+0xa4>)
 8000eb4:	f001 ffe6 	bl	8002e84 <HAL_TIM_Encoder_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000ebe:	f7ff fddb 	bl	8000a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4806      	ldr	r0, [pc, #24]	@ (8000ee8 <MX_TIM5_Init+0xa4>)
 8000ed0:	f002 fe44 	bl	8003b5c <HAL_TIMEx_MasterConfigSynchronization>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000eda:	f7ff fdcd 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	3730      	adds	r7, #48	@ 0x30
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000015c 	.word	0x2000015c
 8000eec:	40000c00 	.word	0x40000c00

08000ef0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	@ 0x30
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	2224      	movs	r2, #36	@ 0x24
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 fd30 	bl	8004964 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	463b      	mov	r3, r7
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f0e:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <MX_TIM8_Init+0xac>)
 8000f10:	4a23      	ldr	r2, [pc, #140]	@ (8000fa0 <MX_TIM8_Init+0xb0>)
 8000f12:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f14:	4b21      	ldr	r3, [pc, #132]	@ (8000f9c <MX_TIM8_Init+0xac>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1a:	4b20      	ldr	r3, [pc, #128]	@ (8000f9c <MX_TIM8_Init+0xac>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000f20:	4b1e      	ldr	r3, [pc, #120]	@ (8000f9c <MX_TIM8_Init+0xac>)
 8000f22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f26:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f28:	4b1c      	ldr	r3, [pc, #112]	@ (8000f9c <MX_TIM8_Init+0xac>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f9c <MX_TIM8_Init+0xac>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f34:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <MX_TIM8_Init+0xac>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f42:	2301      	movs	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f52:	2301      	movs	r3, #1
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	4619      	mov	r1, r3
 8000f64:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <MX_TIM8_Init+0xac>)
 8000f66:	f001 ff8d 	bl	8002e84 <HAL_TIM_Encoder_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000f70:	f7ff fd82 	bl	8000a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f74:	2300      	movs	r3, #0
 8000f76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f80:	463b      	mov	r3, r7
 8000f82:	4619      	mov	r1, r3
 8000f84:	4805      	ldr	r0, [pc, #20]	@ (8000f9c <MX_TIM8_Init+0xac>)
 8000f86:	f002 fde9 	bl	8003b5c <HAL_TIMEx_MasterConfigSynchronization>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000f90:	f7ff fd72 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	3730      	adds	r7, #48	@ 0x30
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200001a8 	.word	0x200001a8
 8000fa0:	40013400 	.word	0x40013400

08000fa4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b090      	sub	sp, #64	@ 0x40
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a5d      	ldr	r2, [pc, #372]	@ (8001138 <HAL_TIM_Encoder_MspInit+0x194>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d128      	bne.n	8001018 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fc6:	4b5d      	ldr	r3, [pc, #372]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 8000fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fca:	4a5c      	ldr	r2, [pc, #368]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 8000fcc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fd2:	4b5a      	ldr	r3, [pc, #360]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 8000fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b57      	ldr	r3, [pc, #348]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	4a56      	ldr	r2, [pc, #344]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fea:	4b54      	ldr	r3, [pc, #336]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001006:	2302      	movs	r3, #2
 8001008:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800100e:	4619      	mov	r1, r3
 8001010:	484b      	ldr	r0, [pc, #300]	@ (8001140 <HAL_TIM_Encoder_MspInit+0x19c>)
 8001012:	f000 fb71 	bl	80016f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001016:	e08a      	b.n	800112e <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a49      	ldr	r2, [pc, #292]	@ (8001144 <HAL_TIM_Encoder_MspInit+0x1a0>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d129      	bne.n	8001076 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001022:	4b46      	ldr	r3, [pc, #280]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001026:	4a45      	ldr	r2, [pc, #276]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	6593      	str	r3, [r2, #88]	@ 0x58
 800102e:	4b43      	ldr	r3, [pc, #268]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	623b      	str	r3, [r7, #32]
 8001038:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800103a:	4b40      	ldr	r3, [pc, #256]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103e:	4a3f      	ldr	r2, [pc, #252]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001046:	4b3d      	ldr	r3, [pc, #244]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001052:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001056:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001064:	2302      	movs	r3, #2
 8001066:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001068:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800106c:	4619      	mov	r1, r3
 800106e:	4836      	ldr	r0, [pc, #216]	@ (8001148 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001070:	f000 fb42 	bl	80016f8 <HAL_GPIO_Init>
}
 8001074:	e05b      	b.n	800112e <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a34      	ldr	r2, [pc, #208]	@ (800114c <HAL_TIM_Encoder_MspInit+0x1a8>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d129      	bne.n	80010d4 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001080:	4b2e      	ldr	r3, [pc, #184]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 8001082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001084:	4a2d      	ldr	r2, [pc, #180]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 8001086:	f043 0308 	orr.w	r3, r3, #8
 800108a:	6593      	str	r3, [r2, #88]	@ 0x58
 800108c:	4b2b      	ldr	r3, [pc, #172]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 800108e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	61bb      	str	r3, [r7, #24]
 8001096:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	4b28      	ldr	r3, [pc, #160]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 800109a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109c:	4a27      	ldr	r2, [pc, #156]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a4:	4b25      	ldr	r3, [pc, #148]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010b0:	2303      	movs	r3, #3
 80010b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80010c0:	2302      	movs	r3, #2
 80010c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010c8:	4619      	mov	r1, r3
 80010ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ce:	f000 fb13 	bl	80016f8 <HAL_GPIO_Init>
}
 80010d2:	e02c      	b.n	800112e <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001150 <HAL_TIM_Encoder_MspInit+0x1ac>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d127      	bne.n	800112e <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80010de:	4b17      	ldr	r3, [pc, #92]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e2:	4a16      	ldr	r2, [pc, #88]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 80010e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ea:	4b14      	ldr	r3, [pc, #80]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 80010ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f6:	4b11      	ldr	r3, [pc, #68]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fa:	4a10      	ldr	r2, [pc, #64]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 80010fc:	f043 0304 	orr.w	r3, r3, #4
 8001100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <HAL_TIM_Encoder_MspInit+0x198>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800110e:	23c0      	movs	r3, #192	@ 0xc0
 8001110:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800111e:	2304      	movs	r3, #4
 8001120:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001122:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001126:	4619      	mov	r1, r3
 8001128:	4805      	ldr	r0, [pc, #20]	@ (8001140 <HAL_TIM_Encoder_MspInit+0x19c>)
 800112a:	f000 fae5 	bl	80016f8 <HAL_GPIO_Init>
}
 800112e:	bf00      	nop
 8001130:	3740      	adds	r7, #64	@ 0x40
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40012c00 	.word	0x40012c00
 800113c:	40021000 	.word	0x40021000
 8001140:	48000800 	.word	0x48000800
 8001144:	40000800 	.word	0x40000800
 8001148:	48000c00 	.word	0x48000c00
 800114c:	40000c00 	.word	0x40000c00
 8001150:	40013400 	.word	0x40013400

08001154 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001164:	d10c      	bne.n	8001180 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001166:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116a:	4a11      	ldr	r2, [pc, #68]	@ (80011b0 <HAL_TIM_PWM_MspInit+0x5c>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6593      	str	r3, [r2, #88]	@ 0x58
 8001172:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800117e:	e010      	b.n	80011a2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <HAL_TIM_PWM_MspInit+0x60>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d10b      	bne.n	80011a2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800118a:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <HAL_TIM_PWM_MspInit+0x5c>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118e:	4a08      	ldr	r2, [pc, #32]	@ (80011b0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6593      	str	r3, [r2, #88]	@ 0x58
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
}
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40000400 	.word	0x40000400

080011b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	@ 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011d8:	d11c      	bne.n	8001214 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011da:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <HAL_TIM_MspPostInit+0xa8>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a20      	ldr	r2, [pc, #128]	@ (8001260 <HAL_TIM_MspPostInit+0xa8>)
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001260 <HAL_TIM_MspPostInit+0xa8>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = RR_PWM_Pin;
 80011f2:	2380      	movs	r3, #128	@ 0x80
 80011f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001202:	2302      	movs	r3, #2
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RR_PWM_GPIO_Port, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	4815      	ldr	r0, [pc, #84]	@ (8001264 <HAL_TIM_MspPostInit+0xac>)
 800120e:	f000 fa73 	bl	80016f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001212:	e020      	b.n	8001256 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a13      	ldr	r2, [pc, #76]	@ (8001268 <HAL_TIM_MspPostInit+0xb0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d11b      	bne.n	8001256 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <HAL_TIM_MspPostInit+0xa8>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	4a0f      	ldr	r2, [pc, #60]	@ (8001260 <HAL_TIM_MspPostInit+0xa8>)
 8001224:	f043 0310 	orr.w	r3, r3, #16
 8001228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122a:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <HAL_TIM_MspPostInit+0xa8>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FR_PWM_Pin|RL_PWM_Pin|FL_PWM_Pin;
 8001236:	232c      	movs	r3, #44	@ 0x2c
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001246:	2302      	movs	r3, #2
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	4806      	ldr	r0, [pc, #24]	@ (800126c <HAL_TIM_MspPostInit+0xb4>)
 8001252:	f000 fa51 	bl	80016f8 <HAL_GPIO_Init>
}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	@ 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	48000c00 	.word	0x48000c00
 8001268:	40000400 	.word	0x40000400
 800126c:	48001000 	.word	0x48001000

08001270 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001274:	4b22      	ldr	r3, [pc, #136]	@ (8001300 <MX_USART1_UART_Init+0x90>)
 8001276:	4a23      	ldr	r2, [pc, #140]	@ (8001304 <MX_USART1_UART_Init+0x94>)
 8001278:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800127a:	4b21      	ldr	r3, [pc, #132]	@ (8001300 <MX_USART1_UART_Init+0x90>)
 800127c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001280:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <MX_USART1_UART_Init+0x90>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <MX_USART1_UART_Init+0x90>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800128e:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <MX_USART1_UART_Init+0x90>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <MX_USART1_UART_Init+0x90>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <MX_USART1_UART_Init+0x90>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <MX_USART1_UART_Init+0x90>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a6:	4b16      	ldr	r3, [pc, #88]	@ (8001300 <MX_USART1_UART_Init+0x90>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012ac:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <MX_USART1_UART_Init+0x90>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b2:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <MX_USART1_UART_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012b8:	4811      	ldr	r0, [pc, #68]	@ (8001300 <MX_USART1_UART_Init+0x90>)
 80012ba:	f002 fce5 	bl	8003c88 <HAL_UART_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80012c4:	f7ff fbd8 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012c8:	2100      	movs	r1, #0
 80012ca:	480d      	ldr	r0, [pc, #52]	@ (8001300 <MX_USART1_UART_Init+0x90>)
 80012cc:	f003 fa80 	bl	80047d0 <HAL_UARTEx_SetTxFifoThreshold>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012d6:	f7ff fbcf 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012da:	2100      	movs	r1, #0
 80012dc:	4808      	ldr	r0, [pc, #32]	@ (8001300 <MX_USART1_UART_Init+0x90>)
 80012de:	f003 fab5 	bl	800484c <HAL_UARTEx_SetRxFifoThreshold>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012e8:	f7ff fbc6 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	@ (8001300 <MX_USART1_UART_Init+0x90>)
 80012ee:	f003 fa36 	bl	800475e <HAL_UARTEx_DisableFifoMode>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012f8:	f7ff fbbe 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200001f4 	.word	0x200001f4
 8001304:	40013800 	.word	0x40013800

08001308 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b09e      	sub	sp, #120	@ 0x78
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	2254      	movs	r2, #84	@ 0x54
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f003 fb1b 	bl	8004964 <memset>
  if(uartHandle->Instance==USART1)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a1e      	ldr	r2, [pc, #120]	@ (80013ac <HAL_UART_MspInit+0xa4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d135      	bne.n	80013a4 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001338:	2301      	movs	r3, #1
 800133a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	4618      	mov	r0, r3
 8001346:	f001 f96d 	bl	8002624 <HAL_RCCEx_PeriphCLKConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001350:	f7ff fb92 	bl	8000a78 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001354:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <HAL_UART_MspInit+0xa8>)
 8001356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001358:	4a15      	ldr	r2, [pc, #84]	@ (80013b0 <HAL_UART_MspInit+0xa8>)
 800135a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800135e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <HAL_UART_MspInit+0xa8>)
 8001362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001364:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800136c:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <HAL_UART_MspInit+0xa8>)
 800136e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001370:	4a0f      	ldr	r2, [pc, #60]	@ (80013b0 <HAL_UART_MspInit+0xa8>)
 8001372:	f043 0304 	orr.w	r3, r3, #4
 8001376:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001378:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <HAL_UART_MspInit+0xa8>)
 800137a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001384:	2330      	movs	r3, #48	@ 0x30
 8001386:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001394:	2307      	movs	r3, #7
 8001396:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001398:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800139c:	4619      	mov	r1, r3
 800139e:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <HAL_UART_MspInit+0xac>)
 80013a0:	f000 f9aa 	bl	80016f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80013a4:	bf00      	nop
 80013a6:	3778      	adds	r7, #120	@ 0x78
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40013800 	.word	0x40013800
 80013b0:	40021000 	.word	0x40021000
 80013b4:	48000800 	.word	0x48000800

080013b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013b8:	480d      	ldr	r0, [pc, #52]	@ (80013f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013ba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013bc:	f7ff fbb6 	bl	8000b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c0:	480c      	ldr	r0, [pc, #48]	@ (80013f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013c2:	490d      	ldr	r1, [pc, #52]	@ (80013f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013c4:	4a0d      	ldr	r2, [pc, #52]	@ (80013fc <LoopForever+0xe>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001404 <LoopForever+0x16>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013e6:	f003 fac5 	bl	8004974 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ea:	f7ff f971 	bl	80006d0 <main>

080013ee <LoopForever>:

LoopForever:
    b LoopForever
 80013ee:	e7fe      	b.n	80013ee <LoopForever>
  ldr   r0, =_estack
 80013f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013fc:	08004a24 	.word	0x08004a24
  ldr r2, =_sbss
 8001400:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001404:	2000028c 	.word	0x2000028c

08001408 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC1_2_IRQHandler>

0800140a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001414:	2003      	movs	r0, #3
 8001416:	f000 f93d 	bl	8001694 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800141a:	200f      	movs	r0, #15
 800141c:	f000 f80e 	bl	800143c <HAL_InitTick>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d002      	beq.n	800142c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	71fb      	strb	r3, [r7, #7]
 800142a:	e001      	b.n	8001430 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800142c:	f7ff fb2a 	bl	8000a84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001430:	79fb      	ldrb	r3, [r7, #7]

}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001448:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <HAL_InitTick+0x68>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d022      	beq.n	8001496 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001450:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <HAL_InitTick+0x6c>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <HAL_InitTick+0x68>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800145c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001460:	fbb2 f3f3 	udiv	r3, r2, r3
 8001464:	4618      	mov	r0, r3
 8001466:	f000 f93a 	bl	80016de <HAL_SYSTICK_Config>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10f      	bne.n	8001490 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b0f      	cmp	r3, #15
 8001474:	d809      	bhi.n	800148a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001476:	2200      	movs	r2, #0
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800147e:	f000 f914 	bl	80016aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001482:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <HAL_InitTick+0x70>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	e007      	b.n	800149a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	e004      	b.n	800149a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	e001      	b.n	800149a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800149a:	7bfb      	ldrb	r3, [r7, #15]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000008 	.word	0x20000008
 80014a8:	20000000 	.word	0x20000000
 80014ac:	20000004 	.word	0x20000004

080014b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b4:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <HAL_IncTick+0x1c>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <HAL_IncTick+0x20>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4413      	add	r3, r2
 80014be:	4a03      	ldr	r2, [pc, #12]	@ (80014cc <HAL_IncTick+0x1c>)
 80014c0:	6013      	str	r3, [r2, #0]
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	20000288 	.word	0x20000288
 80014d0:	20000008 	.word	0x20000008

080014d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;
 80014d8:	4b03      	ldr	r3, [pc, #12]	@ (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000288 	.word	0x20000288

080014ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff ffee 	bl	80014d4 <HAL_GetTick>
 80014f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001504:	d004      	beq.n	8001510 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <HAL_Delay+0x40>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	4413      	add	r3, r2
 800150e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001510:	bf00      	nop
 8001512:	f7ff ffdf 	bl	80014d4 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	429a      	cmp	r2, r3
 8001520:	d8f7      	bhi.n	8001512 <HAL_Delay+0x26>
  {
  }
}
 8001522:	bf00      	nop
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000008 	.word	0x20000008

08001530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800155c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <__NVIC_GetPriorityGrouping+0x18>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0307 	and.w	r3, r3, #7
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	@ (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	@ (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	@ 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
         );
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	@ 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001660:	d301      	bcc.n	8001666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001662:	2301      	movs	r3, #1
 8001664:	e00f      	b.n	8001686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001666:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <SysTick_Config+0x40>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166e:	210f      	movs	r1, #15
 8001670:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001674:	f7ff ff8e 	bl	8001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <SysTick_Config+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167e:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <SysTick_Config+0x40>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	e000e010 	.word	0xe000e010

08001694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff47 	bl	8001530 <__NVIC_SetPriorityGrouping>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff5e 	bl	8001578 <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff90 	bl	80015e8 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5f 	bl	8001594 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffb2 	bl	8001650 <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001706:	e15a      	b.n	80019be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	2101      	movs	r1, #1
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	fa01 f303 	lsl.w	r3, r1, r3
 8001714:	4013      	ands	r3, r2
 8001716:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 814c 	beq.w	80019b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b01      	cmp	r3, #1
 800172a:	d005      	beq.n	8001738 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001734:	2b02      	cmp	r3, #2
 8001736:	d130      	bne.n	800179a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800176e:	2201      	movs	r2, #1
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	f003 0201 	and.w	r2, r3, #1
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d017      	beq.n	80017d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d123      	bne.n	800182a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	08da      	lsrs	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3208      	adds	r2, #8
 80017ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	220f      	movs	r2, #15
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	691a      	ldr	r2, [r3, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	08da      	lsrs	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3208      	adds	r2, #8
 8001824:	6939      	ldr	r1, [r7, #16]
 8001826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0203 	and.w	r2, r3, #3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 80a6 	beq.w	80019b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186c:	4b5b      	ldr	r3, [pc, #364]	@ (80019dc <HAL_GPIO_Init+0x2e4>)
 800186e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001870:	4a5a      	ldr	r2, [pc, #360]	@ (80019dc <HAL_GPIO_Init+0x2e4>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6613      	str	r3, [r2, #96]	@ 0x60
 8001878:	4b58      	ldr	r3, [pc, #352]	@ (80019dc <HAL_GPIO_Init+0x2e4>)
 800187a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001884:	4a56      	ldr	r2, [pc, #344]	@ (80019e0 <HAL_GPIO_Init+0x2e8>)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	3302      	adds	r3, #2
 800188c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018ae:	d01f      	beq.n	80018f0 <HAL_GPIO_Init+0x1f8>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a4c      	ldr	r2, [pc, #304]	@ (80019e4 <HAL_GPIO_Init+0x2ec>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d019      	beq.n	80018ec <HAL_GPIO_Init+0x1f4>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a4b      	ldr	r2, [pc, #300]	@ (80019e8 <HAL_GPIO_Init+0x2f0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d013      	beq.n	80018e8 <HAL_GPIO_Init+0x1f0>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a4a      	ldr	r2, [pc, #296]	@ (80019ec <HAL_GPIO_Init+0x2f4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d00d      	beq.n	80018e4 <HAL_GPIO_Init+0x1ec>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a49      	ldr	r2, [pc, #292]	@ (80019f0 <HAL_GPIO_Init+0x2f8>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d007      	beq.n	80018e0 <HAL_GPIO_Init+0x1e8>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a48      	ldr	r2, [pc, #288]	@ (80019f4 <HAL_GPIO_Init+0x2fc>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d101      	bne.n	80018dc <HAL_GPIO_Init+0x1e4>
 80018d8:	2305      	movs	r3, #5
 80018da:	e00a      	b.n	80018f2 <HAL_GPIO_Init+0x1fa>
 80018dc:	2306      	movs	r3, #6
 80018de:	e008      	b.n	80018f2 <HAL_GPIO_Init+0x1fa>
 80018e0:	2304      	movs	r3, #4
 80018e2:	e006      	b.n	80018f2 <HAL_GPIO_Init+0x1fa>
 80018e4:	2303      	movs	r3, #3
 80018e6:	e004      	b.n	80018f2 <HAL_GPIO_Init+0x1fa>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e002      	b.n	80018f2 <HAL_GPIO_Init+0x1fa>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_GPIO_Init+0x1fa>
 80018f0:	2300      	movs	r3, #0
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	f002 0203 	and.w	r2, r2, #3
 80018f8:	0092      	lsls	r2, r2, #2
 80018fa:	4093      	lsls	r3, r2
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001902:	4937      	ldr	r1, [pc, #220]	@ (80019e0 <HAL_GPIO_Init+0x2e8>)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001910:	4b39      	ldr	r3, [pc, #228]	@ (80019f8 <HAL_GPIO_Init+0x300>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001934:	4a30      	ldr	r2, [pc, #192]	@ (80019f8 <HAL_GPIO_Init+0x300>)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800193a:	4b2f      	ldr	r3, [pc, #188]	@ (80019f8 <HAL_GPIO_Init+0x300>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800195e:	4a26      	ldr	r2, [pc, #152]	@ (80019f8 <HAL_GPIO_Init+0x300>)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001964:	4b24      	ldr	r3, [pc, #144]	@ (80019f8 <HAL_GPIO_Init+0x300>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001988:	4a1b      	ldr	r2, [pc, #108]	@ (80019f8 <HAL_GPIO_Init+0x300>)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800198e:	4b1a      	ldr	r3, [pc, #104]	@ (80019f8 <HAL_GPIO_Init+0x300>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019b2:	4a11      	ldr	r2, [pc, #68]	@ (80019f8 <HAL_GPIO_Init+0x300>)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f47f ae9d 	bne.w	8001708 <HAL_GPIO_Init+0x10>
  }
}
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
 80019d2:	371c      	adds	r7, #28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010000 	.word	0x40010000
 80019e4:	48000400 	.word	0x48000400
 80019e8:	48000800 	.word	0x48000800
 80019ec:	48000c00 	.word	0x48000c00
 80019f0:	48001000 	.word	0x48001000
 80019f4:	48001400 	.word	0x48001400
 80019f8:	40010400 	.word	0x40010400

080019fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	807b      	strh	r3, [r7, #2]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a0c:	787b      	ldrb	r3, [r7, #1]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a12:	887a      	ldrh	r2, [r7, #2]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a18:	e002      	b.n	8001a20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a1a:	887a      	ldrh	r2, [r7, #2]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4013      	ands	r3, r2
 8001a44:	041a      	lsls	r2, r3, #16
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	43d9      	mvns	r1, r3
 8001a4a:	887b      	ldrh	r3, [r7, #2]
 8001a4c:	400b      	ands	r3, r1
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	619a      	str	r2, [r3, #24]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d141      	bne.n	8001af2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a6e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a7a:	d131      	bne.n	8001ae0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a7c:	4b47      	ldr	r3, [pc, #284]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a82:	4a46      	ldr	r2, [pc, #280]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a8c:	4b43      	ldr	r3, [pc, #268]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a94:	4a41      	ldr	r2, [pc, #260]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a9c:	4b40      	ldr	r3, [pc, #256]	@ (8001ba0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2232      	movs	r2, #50	@ 0x32
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ba4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aac:	0c9b      	lsrs	r3, r3, #18
 8001aae:	3301      	adds	r3, #1
 8001ab0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ab2:	e002      	b.n	8001aba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aba:	4b38      	ldr	r3, [pc, #224]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ac6:	d102      	bne.n	8001ace <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f2      	bne.n	8001ab4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ace:	4b33      	ldr	r3, [pc, #204]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ada:	d158      	bne.n	8001b8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e057      	b.n	8001b90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ae6:	4a2d      	ldr	r2, [pc, #180]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001aec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001af0:	e04d      	b.n	8001b8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001af8:	d141      	bne.n	8001b7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001afa:	4b28      	ldr	r3, [pc, #160]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b06:	d131      	bne.n	8001b6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b08:	4b24      	ldr	r3, [pc, #144]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b0e:	4a23      	ldr	r2, [pc, #140]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b18:	4b20      	ldr	r3, [pc, #128]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b20:	4a1e      	ldr	r2, [pc, #120]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2232      	movs	r2, #50	@ 0x32
 8001b2e:	fb02 f303 	mul.w	r3, r2, r3
 8001b32:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b34:	fba2 2303 	umull	r2, r3, r2, r3
 8001b38:	0c9b      	lsrs	r3, r3, #18
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b3e:	e002      	b.n	8001b46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b46:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b52:	d102      	bne.n	8001b5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f2      	bne.n	8001b40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b5a:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b66:	d112      	bne.n	8001b8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e011      	b.n	8001b90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b72:	4a0a      	ldr	r2, [pc, #40]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b7c:	e007      	b.n	8001b8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b7e:	4b07      	ldr	r3, [pc, #28]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b86:	4a05      	ldr	r2, [pc, #20]	@ (8001b9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	40007000 	.word	0x40007000
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	431bde83 	.word	0x431bde83

08001ba8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	4a04      	ldr	r2, [pc, #16]	@ (8001bc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001bb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb6:	6093      	str	r3, [r2, #8]
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40007000 	.word	0x40007000

08001bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e2fe      	b.n	80021d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d075      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001be6:	4b97      	ldr	r3, [pc, #604]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bf0:	4b94      	ldr	r3, [pc, #592]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	2b0c      	cmp	r3, #12
 8001bfe:	d102      	bne.n	8001c06 <HAL_RCC_OscConfig+0x3e>
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d002      	beq.n	8001c0c <HAL_RCC_OscConfig+0x44>
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d10b      	bne.n	8001c24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0c:	4b8d      	ldr	r3, [pc, #564]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d05b      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x108>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d157      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e2d9      	b.n	80021d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c2c:	d106      	bne.n	8001c3c <HAL_RCC_OscConfig+0x74>
 8001c2e:	4b85      	ldr	r3, [pc, #532]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a84      	ldr	r2, [pc, #528]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e01d      	b.n	8001c78 <HAL_RCC_OscConfig+0xb0>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x98>
 8001c46:	4b7f      	ldr	r3, [pc, #508]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a7e      	ldr	r2, [pc, #504]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001c4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b7c      	ldr	r3, [pc, #496]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a7b      	ldr	r2, [pc, #492]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e00b      	b.n	8001c78 <HAL_RCC_OscConfig+0xb0>
 8001c60:	4b78      	ldr	r3, [pc, #480]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a77      	ldr	r2, [pc, #476]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b75      	ldr	r3, [pc, #468]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a74      	ldr	r2, [pc, #464]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001c72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d013      	beq.n	8001ca8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff fc28 	bl	80014d4 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff fc24 	bl	80014d4 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	@ 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e29e      	b.n	80021d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c9a:	4b6a      	ldr	r3, [pc, #424]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0xc0>
 8001ca6:	e014      	b.n	8001cd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fc14 	bl	80014d4 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fc10 	bl	80014d4 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	@ 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e28a      	b.n	80021d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cc2:	4b60      	ldr	r3, [pc, #384]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0xe8>
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d075      	beq.n	8001dca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cde:	4b59      	ldr	r3, [pc, #356]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce8:	4b56      	ldr	r3, [pc, #344]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	2b0c      	cmp	r3, #12
 8001cf6:	d102      	bne.n	8001cfe <HAL_RCC_OscConfig+0x136>
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d002      	beq.n	8001d04 <HAL_RCC_OscConfig+0x13c>
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d11f      	bne.n	8001d44 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d04:	4b4f      	ldr	r3, [pc, #316]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_OscConfig+0x154>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e25d      	b.n	80021d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1c:	4b49      	ldr	r3, [pc, #292]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	061b      	lsls	r3, r3, #24
 8001d2a:	4946      	ldr	r1, [pc, #280]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d30:	4b45      	ldr	r3, [pc, #276]	@ (8001e48 <HAL_RCC_OscConfig+0x280>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fb81 	bl	800143c <HAL_InitTick>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d043      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e249      	b.n	80021d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d023      	beq.n	8001d94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d4c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a3c      	ldr	r2, [pc, #240]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7ff fbbc 	bl	80014d4 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d60:	f7ff fbb8 	bl	80014d4 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e232      	b.n	80021d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d72:	4b34      	ldr	r3, [pc, #208]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7e:	4b31      	ldr	r3, [pc, #196]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	061b      	lsls	r3, r3, #24
 8001d8c:	492d      	ldr	r1, [pc, #180]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]
 8001d92:	e01a      	b.n	8001dca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d94:	4b2b      	ldr	r3, [pc, #172]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a2a      	ldr	r2, [pc, #168]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001d9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff fb98 	bl	80014d4 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da8:	f7ff fb94 	bl	80014d4 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e20e      	b.n	80021d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dba:	4b22      	ldr	r3, [pc, #136]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x1e0>
 8001dc6:	e000      	b.n	8001dca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d041      	beq.n	8001e5a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d01c      	beq.n	8001e18 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dde:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001de4:	4a17      	ldr	r2, [pc, #92]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dee:	f7ff fb71 	bl	80014d4 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df6:	f7ff fb6d 	bl	80014d4 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e1e7      	b.n	80021d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e08:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0ef      	beq.n	8001df6 <HAL_RCC_OscConfig+0x22e>
 8001e16:	e020      	b.n	8001e5a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e18:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e1e:	4a09      	ldr	r2, [pc, #36]	@ (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e28:	f7ff fb54 	bl	80014d4 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e2e:	e00d      	b.n	8001e4c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e30:	f7ff fb50 	bl	80014d4 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d906      	bls.n	8001e4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e1ca      	b.n	80021d8 <HAL_RCC_OscConfig+0x610>
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e4c:	4b8c      	ldr	r3, [pc, #560]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1ea      	bne.n	8001e30 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80a6 	beq.w	8001fb4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e6c:	4b84      	ldr	r3, [pc, #528]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_OscConfig+0x2b4>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <HAL_RCC_OscConfig+0x2b6>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00d      	beq.n	8001e9e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	4b7f      	ldr	r3, [pc, #508]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e86:	4a7e      	ldr	r2, [pc, #504]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e8e:	4b7c      	ldr	r3, [pc, #496]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e9e:	4b79      	ldr	r3, [pc, #484]	@ (8002084 <HAL_RCC_OscConfig+0x4bc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d118      	bne.n	8001edc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eaa:	4b76      	ldr	r3, [pc, #472]	@ (8002084 <HAL_RCC_OscConfig+0x4bc>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a75      	ldr	r2, [pc, #468]	@ (8002084 <HAL_RCC_OscConfig+0x4bc>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb6:	f7ff fb0d 	bl	80014d4 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebe:	f7ff fb09 	bl	80014d4 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e183      	b.n	80021d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed0:	4b6c      	ldr	r3, [pc, #432]	@ (8002084 <HAL_RCC_OscConfig+0x4bc>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d108      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x32e>
 8001ee4:	4b66      	ldr	r3, [pc, #408]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eea:	4a65      	ldr	r2, [pc, #404]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ef4:	e024      	b.n	8001f40 <HAL_RCC_OscConfig+0x378>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b05      	cmp	r3, #5
 8001efc:	d110      	bne.n	8001f20 <HAL_RCC_OscConfig+0x358>
 8001efe:	4b60      	ldr	r3, [pc, #384]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f04:	4a5e      	ldr	r2, [pc, #376]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001f06:	f043 0304 	orr.w	r3, r3, #4
 8001f0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f0e:	4b5c      	ldr	r3, [pc, #368]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f14:	4a5a      	ldr	r2, [pc, #360]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f1e:	e00f      	b.n	8001f40 <HAL_RCC_OscConfig+0x378>
 8001f20:	4b57      	ldr	r3, [pc, #348]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f26:	4a56      	ldr	r2, [pc, #344]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f30:	4b53      	ldr	r3, [pc, #332]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f36:	4a52      	ldr	r2, [pc, #328]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001f38:	f023 0304 	bic.w	r3, r3, #4
 8001f3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d016      	beq.n	8001f76 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f48:	f7ff fac4 	bl	80014d4 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f50:	f7ff fac0 	bl	80014d4 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e138      	b.n	80021d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f66:	4b46      	ldr	r3, [pc, #280]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0ed      	beq.n	8001f50 <HAL_RCC_OscConfig+0x388>
 8001f74:	e015      	b.n	8001fa2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f76:	f7ff faad 	bl	80014d4 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7e:	f7ff faa9 	bl	80014d4 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e121      	b.n	80021d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f94:	4b3a      	ldr	r3, [pc, #232]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1ed      	bne.n	8001f7e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fa2:	7ffb      	ldrb	r3, [r7, #31]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d105      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa8:	4b35      	ldr	r3, [pc, #212]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fac:	4a34      	ldr	r2, [pc, #208]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001fae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fb2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0320 	and.w	r3, r3, #32
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d03c      	beq.n	800203a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01c      	beq.n	8002002 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001fca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fce:	4a2c      	ldr	r2, [pc, #176]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd8:	f7ff fa7c 	bl	80014d4 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fe0:	f7ff fa78 	bl	80014d4 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e0f2      	b.n	80021d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ff2:	4b23      	ldr	r3, [pc, #140]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8001ff4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0ef      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x418>
 8002000:	e01b      	b.n	800203a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002002:	4b1f      	ldr	r3, [pc, #124]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8002004:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002008:	4a1d      	ldr	r2, [pc, #116]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 800200a:	f023 0301 	bic.w	r3, r3, #1
 800200e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002012:	f7ff fa5f 	bl	80014d4 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800201a:	f7ff fa5b 	bl	80014d4 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e0d5      	b.n	80021d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800202c:	4b14      	ldr	r3, [pc, #80]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 800202e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1ef      	bne.n	800201a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 80c9 	beq.w	80021d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002044:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 030c 	and.w	r3, r3, #12
 800204c:	2b0c      	cmp	r3, #12
 800204e:	f000 8083 	beq.w	8002158 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d15e      	bne.n	8002118 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205a:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a08      	ldr	r2, [pc, #32]	@ (8002080 <HAL_RCC_OscConfig+0x4b8>)
 8002060:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002066:	f7ff fa35 	bl	80014d4 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800206c:	e00c      	b.n	8002088 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206e:	f7ff fa31 	bl	80014d4 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d905      	bls.n	8002088 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e0ab      	b.n	80021d8 <HAL_RCC_OscConfig+0x610>
 8002080:	40021000 	.word	0x40021000
 8002084:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002088:	4b55      	ldr	r3, [pc, #340]	@ (80021e0 <HAL_RCC_OscConfig+0x618>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ec      	bne.n	800206e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002094:	4b52      	ldr	r3, [pc, #328]	@ (80021e0 <HAL_RCC_OscConfig+0x618>)
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	4b52      	ldr	r3, [pc, #328]	@ (80021e4 <HAL_RCC_OscConfig+0x61c>)
 800209a:	4013      	ands	r3, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6a11      	ldr	r1, [r2, #32]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020a4:	3a01      	subs	r2, #1
 80020a6:	0112      	lsls	r2, r2, #4
 80020a8:	4311      	orrs	r1, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80020ae:	0212      	lsls	r2, r2, #8
 80020b0:	4311      	orrs	r1, r2
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80020b6:	0852      	lsrs	r2, r2, #1
 80020b8:	3a01      	subs	r2, #1
 80020ba:	0552      	lsls	r2, r2, #21
 80020bc:	4311      	orrs	r1, r2
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020c2:	0852      	lsrs	r2, r2, #1
 80020c4:	3a01      	subs	r2, #1
 80020c6:	0652      	lsls	r2, r2, #25
 80020c8:	4311      	orrs	r1, r2
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80020ce:	06d2      	lsls	r2, r2, #27
 80020d0:	430a      	orrs	r2, r1
 80020d2:	4943      	ldr	r1, [pc, #268]	@ (80021e0 <HAL_RCC_OscConfig+0x618>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d8:	4b41      	ldr	r3, [pc, #260]	@ (80021e0 <HAL_RCC_OscConfig+0x618>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a40      	ldr	r2, [pc, #256]	@ (80021e0 <HAL_RCC_OscConfig+0x618>)
 80020de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020e4:	4b3e      	ldr	r3, [pc, #248]	@ (80021e0 <HAL_RCC_OscConfig+0x618>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4a3d      	ldr	r2, [pc, #244]	@ (80021e0 <HAL_RCC_OscConfig+0x618>)
 80020ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7ff f9f0 	bl	80014d4 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f8:	f7ff f9ec 	bl	80014d4 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e066      	b.n	80021d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800210a:	4b35      	ldr	r3, [pc, #212]	@ (80021e0 <HAL_RCC_OscConfig+0x618>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0x530>
 8002116:	e05e      	b.n	80021d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002118:	4b31      	ldr	r3, [pc, #196]	@ (80021e0 <HAL_RCC_OscConfig+0x618>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a30      	ldr	r2, [pc, #192]	@ (80021e0 <HAL_RCC_OscConfig+0x618>)
 800211e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7ff f9d6 	bl	80014d4 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212c:	f7ff f9d2 	bl	80014d4 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e04c      	b.n	80021d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800213e:	4b28      	ldr	r3, [pc, #160]	@ (80021e0 <HAL_RCC_OscConfig+0x618>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800214a:	4b25      	ldr	r3, [pc, #148]	@ (80021e0 <HAL_RCC_OscConfig+0x618>)
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	4924      	ldr	r1, [pc, #144]	@ (80021e0 <HAL_RCC_OscConfig+0x618>)
 8002150:	4b25      	ldr	r3, [pc, #148]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002152:	4013      	ands	r3, r2
 8002154:	60cb      	str	r3, [r1, #12]
 8002156:	e03e      	b.n	80021d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e039      	b.n	80021d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002164:	4b1e      	ldr	r3, [pc, #120]	@ (80021e0 <HAL_RCC_OscConfig+0x618>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f003 0203 	and.w	r2, r3, #3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	429a      	cmp	r2, r3
 8002176:	d12c      	bne.n	80021d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002182:	3b01      	subs	r3, #1
 8002184:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d123      	bne.n	80021d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002194:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d11b      	bne.n	80021d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d113      	bne.n	80021d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b4:	085b      	lsrs	r3, r3, #1
 80021b6:	3b01      	subs	r3, #1
 80021b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d109      	bne.n	80021d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021c8:	085b      	lsrs	r3, r3, #1
 80021ca:	3b01      	subs	r3, #1
 80021cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3720      	adds	r7, #32
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	019f800c 	.word	0x019f800c
 80021e8:	feeefffc 	.word	0xfeeefffc

080021ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e11e      	b.n	8002442 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002204:	4b91      	ldr	r3, [pc, #580]	@ (800244c <HAL_RCC_ClockConfig+0x260>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d910      	bls.n	8002234 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b8e      	ldr	r3, [pc, #568]	@ (800244c <HAL_RCC_ClockConfig+0x260>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 020f 	bic.w	r2, r3, #15
 800221a:	498c      	ldr	r1, [pc, #560]	@ (800244c <HAL_RCC_ClockConfig+0x260>)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b8a      	ldr	r3, [pc, #552]	@ (800244c <HAL_RCC_ClockConfig+0x260>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e106      	b.n	8002442 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d073      	beq.n	8002328 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d129      	bne.n	800229c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002248:	4b81      	ldr	r3, [pc, #516]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0f4      	b.n	8002442 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002258:	f000 f99e 	bl	8002598 <RCC_GetSysClockFreqFromPLLSource>
 800225c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4a7c      	ldr	r2, [pc, #496]	@ (8002454 <HAL_RCC_ClockConfig+0x268>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d93f      	bls.n	80022e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002266:	4b7a      	ldr	r3, [pc, #488]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d009      	beq.n	8002286 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800227a:	2b00      	cmp	r3, #0
 800227c:	d033      	beq.n	80022e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002282:	2b00      	cmp	r3, #0
 8002284:	d12f      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002286:	4b72      	ldr	r3, [pc, #456]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800228e:	4a70      	ldr	r2, [pc, #448]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 8002290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002294:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002296:	2380      	movs	r3, #128	@ 0x80
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	e024      	b.n	80022e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d107      	bne.n	80022b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d109      	bne.n	80022c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0c6      	b.n	8002442 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022b4:	4b66      	ldr	r3, [pc, #408]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0be      	b.n	8002442 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80022c4:	f000 f8ce 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 80022c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4a61      	ldr	r2, [pc, #388]	@ (8002454 <HAL_RCC_ClockConfig+0x268>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d909      	bls.n	80022e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022d2:	4b5f      	ldr	r3, [pc, #380]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022da:	4a5d      	ldr	r2, [pc, #372]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 80022dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80022e2:	2380      	movs	r3, #128	@ 0x80
 80022e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f023 0203 	bic.w	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	4957      	ldr	r1, [pc, #348]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f8:	f7ff f8ec 	bl	80014d4 <HAL_GetTick>
 80022fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	e00a      	b.n	8002316 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002300:	f7ff f8e8 	bl	80014d4 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800230e:	4293      	cmp	r3, r2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e095      	b.n	8002442 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002316:	4b4e      	ldr	r3, [pc, #312]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 020c 	and.w	r2, r3, #12
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	429a      	cmp	r2, r3
 8002326:	d1eb      	bne.n	8002300 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d023      	beq.n	800237c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002340:	4b43      	ldr	r3, [pc, #268]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	4a42      	ldr	r2, [pc, #264]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 8002346:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800234a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d007      	beq.n	8002368 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002358:	4b3d      	ldr	r3, [pc, #244]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002360:	4a3b      	ldr	r2, [pc, #236]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 8002362:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002366:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002368:	4b39      	ldr	r3, [pc, #228]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	4936      	ldr	r1, [pc, #216]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
 800237a:	e008      	b.n	800238e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	2b80      	cmp	r3, #128	@ 0x80
 8002380:	d105      	bne.n	800238e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002382:	4b33      	ldr	r3, [pc, #204]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	4a32      	ldr	r2, [pc, #200]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 8002388:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800238c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800238e:	4b2f      	ldr	r3, [pc, #188]	@ (800244c <HAL_RCC_ClockConfig+0x260>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d21d      	bcs.n	80023d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239c:	4b2b      	ldr	r3, [pc, #172]	@ (800244c <HAL_RCC_ClockConfig+0x260>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 020f 	bic.w	r2, r3, #15
 80023a4:	4929      	ldr	r1, [pc, #164]	@ (800244c <HAL_RCC_ClockConfig+0x260>)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023ac:	f7ff f892 	bl	80014d4 <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b4:	f7ff f88e 	bl	80014d4 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e03b      	b.n	8002442 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b20      	ldr	r3, [pc, #128]	@ (800244c <HAL_RCC_ClockConfig+0x260>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d1ed      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4917      	ldr	r1, [pc, #92]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d009      	beq.n	8002416 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002402:	4b13      	ldr	r3, [pc, #76]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	490f      	ldr	r1, [pc, #60]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002416:	f000 f825 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 800241a:	4602      	mov	r2, r0
 800241c:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <HAL_RCC_ClockConfig+0x264>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	490c      	ldr	r1, [pc, #48]	@ (8002458 <HAL_RCC_ClockConfig+0x26c>)
 8002428:	5ccb      	ldrb	r3, [r1, r3]
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	fa22 f303 	lsr.w	r3, r2, r3
 8002432:	4a0a      	ldr	r2, [pc, #40]	@ (800245c <HAL_RCC_ClockConfig+0x270>)
 8002434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002436:	4b0a      	ldr	r3, [pc, #40]	@ (8002460 <HAL_RCC_ClockConfig+0x274>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fffe 	bl	800143c <HAL_InitTick>
 8002440:	4603      	mov	r3, r0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40022000 	.word	0x40022000
 8002450:	40021000 	.word	0x40021000
 8002454:	04c4b400 	.word	0x04c4b400
 8002458:	080049d4 	.word	0x080049d4
 800245c:	20000000 	.word	0x20000000
 8002460:	20000004 	.word	0x20000004

08002464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800246a:	4b2c      	ldr	r3, [pc, #176]	@ (800251c <HAL_RCC_GetSysClockFreq+0xb8>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	2b04      	cmp	r3, #4
 8002474:	d102      	bne.n	800247c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002476:	4b2a      	ldr	r3, [pc, #168]	@ (8002520 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	e047      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800247c:	4b27      	ldr	r3, [pc, #156]	@ (800251c <HAL_RCC_GetSysClockFreq+0xb8>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b08      	cmp	r3, #8
 8002486:	d102      	bne.n	800248e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002488:	4b26      	ldr	r3, [pc, #152]	@ (8002524 <HAL_RCC_GetSysClockFreq+0xc0>)
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	e03e      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800248e:	4b23      	ldr	r3, [pc, #140]	@ (800251c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b0c      	cmp	r3, #12
 8002498:	d136      	bne.n	8002508 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800249a:	4b20      	ldr	r3, [pc, #128]	@ (800251c <HAL_RCC_GetSysClockFreq+0xb8>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024a4:	4b1d      	ldr	r3, [pc, #116]	@ (800251c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	3301      	adds	r3, #1
 80024b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d10c      	bne.n	80024d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024b8:	4a1a      	ldr	r2, [pc, #104]	@ (8002524 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	4a16      	ldr	r2, [pc, #88]	@ (800251c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024c2:	68d2      	ldr	r2, [r2, #12]
 80024c4:	0a12      	lsrs	r2, r2, #8
 80024c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	617b      	str	r3, [r7, #20]
      break;
 80024d0:	e00c      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024d2:	4a13      	ldr	r2, [pc, #76]	@ (8002520 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024da:	4a10      	ldr	r2, [pc, #64]	@ (800251c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024dc:	68d2      	ldr	r2, [r2, #12]
 80024de:	0a12      	lsrs	r2, r2, #8
 80024e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024e4:	fb02 f303 	mul.w	r3, r2, r3
 80024e8:	617b      	str	r3, [r7, #20]
      break;
 80024ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024ec:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	0e5b      	lsrs	r3, r3, #25
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	3301      	adds	r3, #1
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	fbb2 f3f3 	udiv	r3, r2, r3
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	e001      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800250c:	693b      	ldr	r3, [r7, #16]
}
 800250e:	4618      	mov	r0, r3
 8002510:	371c      	adds	r7, #28
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	00f42400 	.word	0x00f42400
 8002524:	007a1200 	.word	0x007a1200

08002528 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800252c:	4b03      	ldr	r3, [pc, #12]	@ (800253c <HAL_RCC_GetHCLKFreq+0x14>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000000 	.word	0x20000000

08002540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002544:	f7ff fff0 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002548:	4602      	mov	r2, r0
 800254a:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <HAL_RCC_GetPCLK1Freq+0x24>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	0a1b      	lsrs	r3, r3, #8
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	4904      	ldr	r1, [pc, #16]	@ (8002568 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002556:	5ccb      	ldrb	r3, [r1, r3]
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002560:	4618      	mov	r0, r3
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000
 8002568:	080049e4 	.word	0x080049e4

0800256c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002570:	f7ff ffda 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002574:	4602      	mov	r2, r0
 8002576:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	0adb      	lsrs	r3, r3, #11
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	4904      	ldr	r1, [pc, #16]	@ (8002594 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002582:	5ccb      	ldrb	r3, [r1, r3]
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800258c:	4618      	mov	r0, r3
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000
 8002594:	080049e4 	.word	0x080049e4

08002598 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800259e:	4b1e      	ldr	r3, [pc, #120]	@ (8002618 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002618 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	3301      	adds	r3, #1
 80025b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d10c      	bne.n	80025d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025bc:	4a17      	ldr	r2, [pc, #92]	@ (800261c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	4a14      	ldr	r2, [pc, #80]	@ (8002618 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025c6:	68d2      	ldr	r2, [r2, #12]
 80025c8:	0a12      	lsrs	r2, r2, #8
 80025ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	617b      	str	r3, [r7, #20]
    break;
 80025d4:	e00c      	b.n	80025f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025d6:	4a12      	ldr	r2, [pc, #72]	@ (8002620 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	fbb2 f3f3 	udiv	r3, r2, r3
 80025de:	4a0e      	ldr	r2, [pc, #56]	@ (8002618 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025e0:	68d2      	ldr	r2, [r2, #12]
 80025e2:	0a12      	lsrs	r2, r2, #8
 80025e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025e8:	fb02 f303 	mul.w	r3, r2, r3
 80025ec:	617b      	str	r3, [r7, #20]
    break;
 80025ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025f0:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	0e5b      	lsrs	r3, r3, #25
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	3301      	adds	r3, #1
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800260a:	687b      	ldr	r3, [r7, #4]
}
 800260c:	4618      	mov	r0, r3
 800260e:	371c      	adds	r7, #28
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	40021000 	.word	0x40021000
 800261c:	007a1200 	.word	0x007a1200
 8002620:	00f42400 	.word	0x00f42400

08002624 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800262c:	2300      	movs	r3, #0
 800262e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002630:	2300      	movs	r3, #0
 8002632:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 8098 	beq.w	8002772 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002646:	4b43      	ldr	r3, [pc, #268]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10d      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002652:	4b40      	ldr	r3, [pc, #256]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002656:	4a3f      	ldr	r2, [pc, #252]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800265c:	6593      	str	r3, [r2, #88]	@ 0x58
 800265e:	4b3d      	ldr	r3, [pc, #244]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800266a:	2301      	movs	r3, #1
 800266c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800266e:	4b3a      	ldr	r3, [pc, #232]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a39      	ldr	r2, [pc, #228]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002678:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800267a:	f7fe ff2b 	bl	80014d4 <HAL_GetTick>
 800267e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002680:	e009      	b.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002682:	f7fe ff27 	bl	80014d4 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d902      	bls.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	74fb      	strb	r3, [r7, #19]
        break;
 8002694:	e005      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002696:	4b30      	ldr	r3, [pc, #192]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0ef      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80026a2:	7cfb      	ldrb	r3, [r7, #19]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d159      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d01e      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d019      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026c4:	4b23      	ldr	r3, [pc, #140]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026d0:	4b20      	ldr	r3, [pc, #128]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026f0:	4a18      	ldr	r2, [pc, #96]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d016      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7fe fee7 	bl	80014d4 <HAL_GetTick>
 8002706:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002708:	e00b      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f7fe fee3 	bl	80014d4 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d902      	bls.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	74fb      	strb	r3, [r7, #19]
            break;
 8002720:	e006      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002722:	4b0c      	ldr	r3, [pc, #48]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ec      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002730:	7cfb      	ldrb	r3, [r7, #19]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10b      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002736:	4b07      	ldr	r3, [pc, #28]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002744:	4903      	ldr	r1, [pc, #12]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800274c:	e008      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	74bb      	strb	r3, [r7, #18]
 8002752:	e005      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002754:	40021000 	.word	0x40021000
 8002758:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002760:	7c7b      	ldrb	r3, [r7, #17]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d105      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002766:	4ba7      	ldr	r3, [pc, #668]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276a:	4aa6      	ldr	r2, [pc, #664]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002770:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800277e:	4ba1      	ldr	r3, [pc, #644]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002784:	f023 0203 	bic.w	r2, r3, #3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	499d      	ldr	r1, [pc, #628]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00a      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027a0:	4b98      	ldr	r3, [pc, #608]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a6:	f023 020c 	bic.w	r2, r3, #12
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	4995      	ldr	r1, [pc, #596]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027c2:	4b90      	ldr	r3, [pc, #576]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	498c      	ldr	r1, [pc, #560]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027e4:	4b87      	ldr	r3, [pc, #540]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	4984      	ldr	r1, [pc, #528]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002806:	4b7f      	ldr	r3, [pc, #508]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	497b      	ldr	r1, [pc, #492]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002828:	4b76      	ldr	r3, [pc, #472]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	4973      	ldr	r1, [pc, #460]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800284a:	4b6e      	ldr	r3, [pc, #440]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002850:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	496a      	ldr	r1, [pc, #424]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00a      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800286c:	4b65      	ldr	r3, [pc, #404]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002872:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	4962      	ldr	r1, [pc, #392]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800288e:	4b5d      	ldr	r3, [pc, #372]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002894:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	4959      	ldr	r1, [pc, #356]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028b0:	4b54      	ldr	r3, [pc, #336]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028b6:	f023 0203 	bic.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028be:	4951      	ldr	r1, [pc, #324]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028d2:	4b4c      	ldr	r3, [pc, #304]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e0:	4948      	ldr	r1, [pc, #288]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d015      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028f4:	4b43      	ldr	r3, [pc, #268]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	4940      	ldr	r1, [pc, #256]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002912:	d105      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002914:	4b3b      	ldr	r3, [pc, #236]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4a3a      	ldr	r2, [pc, #232]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800291e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002928:	2b00      	cmp	r3, #0
 800292a:	d015      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800292c:	4b35      	ldr	r3, [pc, #212]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002932:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293a:	4932      	ldr	r1, [pc, #200]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002946:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800294a:	d105      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800294c:	4b2d      	ldr	r3, [pc, #180]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4a2c      	ldr	r2, [pc, #176]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002952:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002956:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d015      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002964:	4b27      	ldr	r3, [pc, #156]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002972:	4924      	ldr	r1, [pc, #144]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002982:	d105      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002984:	4b1f      	ldr	r3, [pc, #124]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4a1e      	ldr	r2, [pc, #120]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800298e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d015      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800299c:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029aa:	4916      	ldr	r1, [pc, #88]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029ba:	d105      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029bc:	4b11      	ldr	r3, [pc, #68]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4a10      	ldr	r2, [pc, #64]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d019      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	4908      	ldr	r1, [pc, #32]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029f2:	d109      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f4:	4b03      	ldr	r3, [pc, #12]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4a02      	ldr	r2, [pc, #8]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029fe:	60d3      	str	r3, [r2, #12]
 8002a00:	e002      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d015      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a14:	4b29      	ldr	r3, [pc, #164]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a22:	4926      	ldr	r1, [pc, #152]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a32:	d105      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a34:	4b21      	ldr	r3, [pc, #132]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a20      	ldr	r2, [pc, #128]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a3e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d015      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a52:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a5a:	4918      	ldr	r1, [pc, #96]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a6a:	d105      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a6c:	4b13      	ldr	r3, [pc, #76]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4a12      	ldr	r2, [pc, #72]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a76:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d015      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a84:	4b0d      	ldr	r3, [pc, #52]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a92:	490a      	ldr	r1, [pc, #40]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002aa2:	d105      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa4:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4a04      	ldr	r2, [pc, #16]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002ab0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000

08002ac0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d001      	beq.n	8002ad8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e054      	b.n	8002b82 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a26      	ldr	r2, [pc, #152]	@ (8002b90 <HAL_TIM_Base_Start_IT+0xd0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d022      	beq.n	8002b40 <HAL_TIM_Base_Start_IT+0x80>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b02:	d01d      	beq.n	8002b40 <HAL_TIM_Base_Start_IT+0x80>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a22      	ldr	r2, [pc, #136]	@ (8002b94 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d018      	beq.n	8002b40 <HAL_TIM_Base_Start_IT+0x80>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a21      	ldr	r2, [pc, #132]	@ (8002b98 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d013      	beq.n	8002b40 <HAL_TIM_Base_Start_IT+0x80>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8002b9c <HAL_TIM_Base_Start_IT+0xdc>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00e      	beq.n	8002b40 <HAL_TIM_Base_Start_IT+0x80>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1e      	ldr	r2, [pc, #120]	@ (8002ba0 <HAL_TIM_Base_Start_IT+0xe0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d009      	beq.n	8002b40 <HAL_TIM_Base_Start_IT+0x80>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a1c      	ldr	r2, [pc, #112]	@ (8002ba4 <HAL_TIM_Base_Start_IT+0xe4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d004      	beq.n	8002b40 <HAL_TIM_Base_Start_IT+0x80>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ba8 <HAL_TIM_Base_Start_IT+0xe8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d115      	bne.n	8002b6c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	4b19      	ldr	r3, [pc, #100]	@ (8002bac <HAL_TIM_Base_Start_IT+0xec>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b06      	cmp	r3, #6
 8002b50:	d015      	beq.n	8002b7e <HAL_TIM_Base_Start_IT+0xbe>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b58:	d011      	beq.n	8002b7e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0201 	orr.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b6a:	e008      	b.n	8002b7e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	e000      	b.n	8002b80 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40012c00 	.word	0x40012c00
 8002b94:	40000400 	.word	0x40000400
 8002b98:	40000800 	.word	0x40000800
 8002b9c:	40000c00 	.word	0x40000c00
 8002ba0:	40013400 	.word	0x40013400
 8002ba4:	40014000 	.word	0x40014000
 8002ba8:	40015000 	.word	0x40015000
 8002bac:	00010007 	.word	0x00010007

08002bb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e049      	b.n	8002c56 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d106      	bne.n	8002bdc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7fe fabc 	bl	8001154 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3304      	adds	r3, #4
 8002bec:	4619      	mov	r1, r3
 8002bee:	4610      	mov	r0, r2
 8002bf0:	f000 fbb0 	bl	8003354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <HAL_TIM_PWM_Start+0x24>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	bf14      	ite	ne
 8002c7c:	2301      	movne	r3, #1
 8002c7e:	2300      	moveq	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	e03c      	b.n	8002cfe <HAL_TIM_PWM_Start+0x9e>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d109      	bne.n	8002c9e <HAL_TIM_PWM_Start+0x3e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	bf14      	ite	ne
 8002c96:	2301      	movne	r3, #1
 8002c98:	2300      	moveq	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	e02f      	b.n	8002cfe <HAL_TIM_PWM_Start+0x9e>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d109      	bne.n	8002cb8 <HAL_TIM_PWM_Start+0x58>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	bf14      	ite	ne
 8002cb0:	2301      	movne	r3, #1
 8002cb2:	2300      	moveq	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	e022      	b.n	8002cfe <HAL_TIM_PWM_Start+0x9e>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2b0c      	cmp	r3, #12
 8002cbc:	d109      	bne.n	8002cd2 <HAL_TIM_PWM_Start+0x72>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	bf14      	ite	ne
 8002cca:	2301      	movne	r3, #1
 8002ccc:	2300      	moveq	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	e015      	b.n	8002cfe <HAL_TIM_PWM_Start+0x9e>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	d109      	bne.n	8002cec <HAL_TIM_PWM_Start+0x8c>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	bf14      	ite	ne
 8002ce4:	2301      	movne	r3, #1
 8002ce6:	2300      	moveq	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	e008      	b.n	8002cfe <HAL_TIM_PWM_Start+0x9e>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	bf14      	ite	ne
 8002cf8:	2301      	movne	r3, #1
 8002cfa:	2300      	moveq	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e0a6      	b.n	8002e54 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d104      	bne.n	8002d16 <HAL_TIM_PWM_Start+0xb6>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d14:	e023      	b.n	8002d5e <HAL_TIM_PWM_Start+0xfe>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d104      	bne.n	8002d26 <HAL_TIM_PWM_Start+0xc6>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d24:	e01b      	b.n	8002d5e <HAL_TIM_PWM_Start+0xfe>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d104      	bne.n	8002d36 <HAL_TIM_PWM_Start+0xd6>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d34:	e013      	b.n	8002d5e <HAL_TIM_PWM_Start+0xfe>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b0c      	cmp	r3, #12
 8002d3a:	d104      	bne.n	8002d46 <HAL_TIM_PWM_Start+0xe6>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d44:	e00b      	b.n	8002d5e <HAL_TIM_PWM_Start+0xfe>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b10      	cmp	r3, #16
 8002d4a:	d104      	bne.n	8002d56 <HAL_TIM_PWM_Start+0xf6>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d54:	e003      	b.n	8002d5e <HAL_TIM_PWM_Start+0xfe>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2201      	movs	r2, #1
 8002d64:	6839      	ldr	r1, [r7, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fed2 	bl	8003b10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a3a      	ldr	r2, [pc, #232]	@ (8002e5c <HAL_TIM_PWM_Start+0x1fc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d018      	beq.n	8002da8 <HAL_TIM_PWM_Start+0x148>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a39      	ldr	r2, [pc, #228]	@ (8002e60 <HAL_TIM_PWM_Start+0x200>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d013      	beq.n	8002da8 <HAL_TIM_PWM_Start+0x148>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a37      	ldr	r2, [pc, #220]	@ (8002e64 <HAL_TIM_PWM_Start+0x204>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00e      	beq.n	8002da8 <HAL_TIM_PWM_Start+0x148>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a36      	ldr	r2, [pc, #216]	@ (8002e68 <HAL_TIM_PWM_Start+0x208>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d009      	beq.n	8002da8 <HAL_TIM_PWM_Start+0x148>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a34      	ldr	r2, [pc, #208]	@ (8002e6c <HAL_TIM_PWM_Start+0x20c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d004      	beq.n	8002da8 <HAL_TIM_PWM_Start+0x148>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a33      	ldr	r2, [pc, #204]	@ (8002e70 <HAL_TIM_PWM_Start+0x210>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d101      	bne.n	8002dac <HAL_TIM_PWM_Start+0x14c>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <HAL_TIM_PWM_Start+0x14e>
 8002dac:	2300      	movs	r3, #0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d007      	beq.n	8002dc2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002dc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a25      	ldr	r2, [pc, #148]	@ (8002e5c <HAL_TIM_PWM_Start+0x1fc>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d022      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x1b2>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd4:	d01d      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x1b2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a26      	ldr	r2, [pc, #152]	@ (8002e74 <HAL_TIM_PWM_Start+0x214>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d018      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x1b2>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a24      	ldr	r2, [pc, #144]	@ (8002e78 <HAL_TIM_PWM_Start+0x218>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d013      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x1b2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a23      	ldr	r2, [pc, #140]	@ (8002e7c <HAL_TIM_PWM_Start+0x21c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d00e      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x1b2>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a19      	ldr	r2, [pc, #100]	@ (8002e60 <HAL_TIM_PWM_Start+0x200>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d009      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x1b2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a18      	ldr	r2, [pc, #96]	@ (8002e64 <HAL_TIM_PWM_Start+0x204>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d004      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x1b2>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a18      	ldr	r2, [pc, #96]	@ (8002e70 <HAL_TIM_PWM_Start+0x210>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d115      	bne.n	8002e3e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	4b19      	ldr	r3, [pc, #100]	@ (8002e80 <HAL_TIM_PWM_Start+0x220>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b06      	cmp	r3, #6
 8002e22:	d015      	beq.n	8002e50 <HAL_TIM_PWM_Start+0x1f0>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e2a:	d011      	beq.n	8002e50 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3c:	e008      	b.n	8002e50 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0201 	orr.w	r2, r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	e000      	b.n	8002e52 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40012c00 	.word	0x40012c00
 8002e60:	40013400 	.word	0x40013400
 8002e64:	40014000 	.word	0x40014000
 8002e68:	40014400 	.word	0x40014400
 8002e6c:	40014800 	.word	0x40014800
 8002e70:	40015000 	.word	0x40015000
 8002e74:	40000400 	.word	0x40000400
 8002e78:	40000800 	.word	0x40000800
 8002e7c:	40000c00 	.word	0x40000c00
 8002e80:	00010007 	.word	0x00010007

08002e84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e097      	b.n	8002fc8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d106      	bne.n	8002eb2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7fe f879 	bl	8000fa4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8002ec8:	f023 0307 	bic.w	r3, r3, #7
 8002ecc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4610      	mov	r0, r2
 8002eda:	f000 fa3b 	bl	8003354 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f06:	f023 0303 	bic.w	r3, r3, #3
 8002f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	4313      	orrs	r3, r2
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002f24:	f023 030c 	bic.w	r3, r3, #12
 8002f28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	4313      	orrs	r3, r2
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	011a      	lsls	r2, r3, #4
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	031b      	lsls	r3, r3, #12
 8002f54:	4313      	orrs	r3, r2
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002f62:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002f6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	4313      	orrs	r3, r2
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fe0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002fe8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ff0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ff8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d110      	bne.n	8003022 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d102      	bne.n	800300c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003006:	7b7b      	ldrb	r3, [r7, #13]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d001      	beq.n	8003010 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e089      	b.n	8003124 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003020:	e031      	b.n	8003086 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b04      	cmp	r3, #4
 8003026:	d110      	bne.n	800304a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003028:	7bbb      	ldrb	r3, [r7, #14]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d102      	bne.n	8003034 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800302e:	7b3b      	ldrb	r3, [r7, #12]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d001      	beq.n	8003038 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e075      	b.n	8003124 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003048:	e01d      	b.n	8003086 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d108      	bne.n	8003062 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003050:	7bbb      	ldrb	r3, [r7, #14]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d105      	bne.n	8003062 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003056:	7b7b      	ldrb	r3, [r7, #13]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d102      	bne.n	8003062 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800305c:	7b3b      	ldrb	r3, [r7, #12]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d001      	beq.n	8003066 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e05e      	b.n	8003124 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2202      	movs	r2, #2
 800306a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2202      	movs	r2, #2
 8003072:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2202      	movs	r2, #2
 800307a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2202      	movs	r2, #2
 8003082:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_TIM_Encoder_Start_IT+0xc4>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2b04      	cmp	r3, #4
 8003090:	d010      	beq.n	80030b4 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003092:	e01f      	b.n	80030d4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2201      	movs	r2, #1
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fd37 	bl	8003b10 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0202 	orr.w	r2, r2, #2
 80030b0:	60da      	str	r2, [r3, #12]
      break;
 80030b2:	e02e      	b.n	8003112 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2201      	movs	r2, #1
 80030ba:	2104      	movs	r1, #4
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fd27 	bl	8003b10 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0204 	orr.w	r2, r2, #4
 80030d0:	60da      	str	r2, [r3, #12]
      break;
 80030d2:	e01e      	b.n	8003112 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2201      	movs	r2, #1
 80030da:	2100      	movs	r1, #0
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fd17 	bl	8003b10 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2201      	movs	r2, #1
 80030e8:	2104      	movs	r1, #4
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 fd10 	bl	8003b10 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0202 	orr.w	r2, r2, #2
 80030fe:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0204 	orr.w	r2, r2, #4
 800310e:	60da      	str	r2, [r3, #12]
      break;
 8003110:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0201 	orr.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003138:	2300      	movs	r3, #0
 800313a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003146:	2302      	movs	r3, #2
 8003148:	e0ff      	b.n	800334a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b14      	cmp	r3, #20
 8003156:	f200 80f0 	bhi.w	800333a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800315a:	a201      	add	r2, pc, #4	@ (adr r2, 8003160 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800315c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003160:	080031b5 	.word	0x080031b5
 8003164:	0800333b 	.word	0x0800333b
 8003168:	0800333b 	.word	0x0800333b
 800316c:	0800333b 	.word	0x0800333b
 8003170:	080031f5 	.word	0x080031f5
 8003174:	0800333b 	.word	0x0800333b
 8003178:	0800333b 	.word	0x0800333b
 800317c:	0800333b 	.word	0x0800333b
 8003180:	08003237 	.word	0x08003237
 8003184:	0800333b 	.word	0x0800333b
 8003188:	0800333b 	.word	0x0800333b
 800318c:	0800333b 	.word	0x0800333b
 8003190:	08003277 	.word	0x08003277
 8003194:	0800333b 	.word	0x0800333b
 8003198:	0800333b 	.word	0x0800333b
 800319c:	0800333b 	.word	0x0800333b
 80031a0:	080032b9 	.word	0x080032b9
 80031a4:	0800333b 	.word	0x0800333b
 80031a8:	0800333b 	.word	0x0800333b
 80031ac:	0800333b 	.word	0x0800333b
 80031b0:	080032f9 	.word	0x080032f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 f97e 	bl	80034bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0208 	orr.w	r2, r2, #8
 80031ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0204 	bic.w	r2, r2, #4
 80031de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6999      	ldr	r1, [r3, #24]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	619a      	str	r2, [r3, #24]
      break;
 80031f2:	e0a5      	b.n	8003340 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68b9      	ldr	r1, [r7, #8]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 f9f8 	bl	80035f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800320e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699a      	ldr	r2, [r3, #24]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800321e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6999      	ldr	r1, [r3, #24]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	021a      	lsls	r2, r3, #8
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	619a      	str	r2, [r3, #24]
      break;
 8003234:	e084      	b.n	8003340 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68b9      	ldr	r1, [r7, #8]
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fa6b 	bl	8003718 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0208 	orr.w	r2, r2, #8
 8003250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69da      	ldr	r2, [r3, #28]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0204 	bic.w	r2, r2, #4
 8003260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	69d9      	ldr	r1, [r3, #28]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	61da      	str	r2, [r3, #28]
      break;
 8003274:	e064      	b.n	8003340 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fadd 	bl	800383c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69da      	ldr	r2, [r3, #28]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69d9      	ldr	r1, [r3, #28]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	021a      	lsls	r2, r3, #8
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	61da      	str	r2, [r3, #28]
      break;
 80032b6:	e043      	b.n	8003340 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fb50 	bl	8003964 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0208 	orr.w	r2, r2, #8
 80032d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0204 	bic.w	r2, r2, #4
 80032e2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80032f6:	e023      	b.n	8003340 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fb9a 	bl	8003a38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003312:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003322:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	021a      	lsls	r2, r3, #8
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003338:	e002      	b.n	8003340 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	75fb      	strb	r3, [r7, #23]
      break;
 800333e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003348:	7dfb      	ldrb	r3, [r7, #23]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop

08003354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a4c      	ldr	r2, [pc, #304]	@ (8003498 <TIM_Base_SetConfig+0x144>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d017      	beq.n	800339c <TIM_Base_SetConfig+0x48>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003372:	d013      	beq.n	800339c <TIM_Base_SetConfig+0x48>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a49      	ldr	r2, [pc, #292]	@ (800349c <TIM_Base_SetConfig+0x148>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00f      	beq.n	800339c <TIM_Base_SetConfig+0x48>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a48      	ldr	r2, [pc, #288]	@ (80034a0 <TIM_Base_SetConfig+0x14c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00b      	beq.n	800339c <TIM_Base_SetConfig+0x48>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a47      	ldr	r2, [pc, #284]	@ (80034a4 <TIM_Base_SetConfig+0x150>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d007      	beq.n	800339c <TIM_Base_SetConfig+0x48>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a46      	ldr	r2, [pc, #280]	@ (80034a8 <TIM_Base_SetConfig+0x154>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d003      	beq.n	800339c <TIM_Base_SetConfig+0x48>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a45      	ldr	r2, [pc, #276]	@ (80034ac <TIM_Base_SetConfig+0x158>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d108      	bne.n	80033ae <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a39      	ldr	r2, [pc, #228]	@ (8003498 <TIM_Base_SetConfig+0x144>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d023      	beq.n	80033fe <TIM_Base_SetConfig+0xaa>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033bc:	d01f      	beq.n	80033fe <TIM_Base_SetConfig+0xaa>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a36      	ldr	r2, [pc, #216]	@ (800349c <TIM_Base_SetConfig+0x148>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d01b      	beq.n	80033fe <TIM_Base_SetConfig+0xaa>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a35      	ldr	r2, [pc, #212]	@ (80034a0 <TIM_Base_SetConfig+0x14c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d017      	beq.n	80033fe <TIM_Base_SetConfig+0xaa>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a34      	ldr	r2, [pc, #208]	@ (80034a4 <TIM_Base_SetConfig+0x150>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d013      	beq.n	80033fe <TIM_Base_SetConfig+0xaa>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a33      	ldr	r2, [pc, #204]	@ (80034a8 <TIM_Base_SetConfig+0x154>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00f      	beq.n	80033fe <TIM_Base_SetConfig+0xaa>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a33      	ldr	r2, [pc, #204]	@ (80034b0 <TIM_Base_SetConfig+0x15c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00b      	beq.n	80033fe <TIM_Base_SetConfig+0xaa>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a32      	ldr	r2, [pc, #200]	@ (80034b4 <TIM_Base_SetConfig+0x160>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d007      	beq.n	80033fe <TIM_Base_SetConfig+0xaa>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a31      	ldr	r2, [pc, #196]	@ (80034b8 <TIM_Base_SetConfig+0x164>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d003      	beq.n	80033fe <TIM_Base_SetConfig+0xaa>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a2c      	ldr	r2, [pc, #176]	@ (80034ac <TIM_Base_SetConfig+0x158>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d108      	bne.n	8003410 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4313      	orrs	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a18      	ldr	r2, [pc, #96]	@ (8003498 <TIM_Base_SetConfig+0x144>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d013      	beq.n	8003464 <TIM_Base_SetConfig+0x110>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a1a      	ldr	r2, [pc, #104]	@ (80034a8 <TIM_Base_SetConfig+0x154>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00f      	beq.n	8003464 <TIM_Base_SetConfig+0x110>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a1a      	ldr	r2, [pc, #104]	@ (80034b0 <TIM_Base_SetConfig+0x15c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00b      	beq.n	8003464 <TIM_Base_SetConfig+0x110>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a19      	ldr	r2, [pc, #100]	@ (80034b4 <TIM_Base_SetConfig+0x160>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d007      	beq.n	8003464 <TIM_Base_SetConfig+0x110>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a18      	ldr	r2, [pc, #96]	@ (80034b8 <TIM_Base_SetConfig+0x164>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d003      	beq.n	8003464 <TIM_Base_SetConfig+0x110>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a13      	ldr	r2, [pc, #76]	@ (80034ac <TIM_Base_SetConfig+0x158>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d103      	bne.n	800346c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b01      	cmp	r3, #1
 800347c:	d105      	bne.n	800348a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f023 0201 	bic.w	r2, r3, #1
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	611a      	str	r2, [r3, #16]
  }
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40012c00 	.word	0x40012c00
 800349c:	40000400 	.word	0x40000400
 80034a0:	40000800 	.word	0x40000800
 80034a4:	40000c00 	.word	0x40000c00
 80034a8:	40013400 	.word	0x40013400
 80034ac:	40015000 	.word	0x40015000
 80034b0:	40014000 	.word	0x40014000
 80034b4:	40014400 	.word	0x40014400
 80034b8:	40014800 	.word	0x40014800

080034bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	f023 0201 	bic.w	r2, r3, #1
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 0303 	bic.w	r3, r3, #3
 80034f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f023 0302 	bic.w	r3, r3, #2
 8003508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a30      	ldr	r2, [pc, #192]	@ (80035d8 <TIM_OC1_SetConfig+0x11c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d013      	beq.n	8003544 <TIM_OC1_SetConfig+0x88>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a2f      	ldr	r2, [pc, #188]	@ (80035dc <TIM_OC1_SetConfig+0x120>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00f      	beq.n	8003544 <TIM_OC1_SetConfig+0x88>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a2e      	ldr	r2, [pc, #184]	@ (80035e0 <TIM_OC1_SetConfig+0x124>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00b      	beq.n	8003544 <TIM_OC1_SetConfig+0x88>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a2d      	ldr	r2, [pc, #180]	@ (80035e4 <TIM_OC1_SetConfig+0x128>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d007      	beq.n	8003544 <TIM_OC1_SetConfig+0x88>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a2c      	ldr	r2, [pc, #176]	@ (80035e8 <TIM_OC1_SetConfig+0x12c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d003      	beq.n	8003544 <TIM_OC1_SetConfig+0x88>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a2b      	ldr	r2, [pc, #172]	@ (80035ec <TIM_OC1_SetConfig+0x130>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d10c      	bne.n	800355e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f023 0308 	bic.w	r3, r3, #8
 800354a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f023 0304 	bic.w	r3, r3, #4
 800355c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a1d      	ldr	r2, [pc, #116]	@ (80035d8 <TIM_OC1_SetConfig+0x11c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <TIM_OC1_SetConfig+0xd2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a1c      	ldr	r2, [pc, #112]	@ (80035dc <TIM_OC1_SetConfig+0x120>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00f      	beq.n	800358e <TIM_OC1_SetConfig+0xd2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a1b      	ldr	r2, [pc, #108]	@ (80035e0 <TIM_OC1_SetConfig+0x124>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00b      	beq.n	800358e <TIM_OC1_SetConfig+0xd2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a1a      	ldr	r2, [pc, #104]	@ (80035e4 <TIM_OC1_SetConfig+0x128>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <TIM_OC1_SetConfig+0xd2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a19      	ldr	r2, [pc, #100]	@ (80035e8 <TIM_OC1_SetConfig+0x12c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d003      	beq.n	800358e <TIM_OC1_SetConfig+0xd2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a18      	ldr	r2, [pc, #96]	@ (80035ec <TIM_OC1_SetConfig+0x130>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d111      	bne.n	80035b2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800359c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	621a      	str	r2, [r3, #32]
}
 80035cc:	bf00      	nop
 80035ce:	371c      	adds	r7, #28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	40012c00 	.word	0x40012c00
 80035dc:	40013400 	.word	0x40013400
 80035e0:	40014000 	.word	0x40014000
 80035e4:	40014400 	.word	0x40014400
 80035e8:	40014800 	.word	0x40014800
 80035ec:	40015000 	.word	0x40015000

080035f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	f023 0210 	bic.w	r2, r3, #16
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800361e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800362a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4313      	orrs	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f023 0320 	bic.w	r3, r3, #32
 800363e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a2c      	ldr	r2, [pc, #176]	@ (8003700 <TIM_OC2_SetConfig+0x110>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d007      	beq.n	8003664 <TIM_OC2_SetConfig+0x74>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a2b      	ldr	r2, [pc, #172]	@ (8003704 <TIM_OC2_SetConfig+0x114>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d003      	beq.n	8003664 <TIM_OC2_SetConfig+0x74>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a2a      	ldr	r2, [pc, #168]	@ (8003708 <TIM_OC2_SetConfig+0x118>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d10d      	bne.n	8003680 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800366a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800367e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a1f      	ldr	r2, [pc, #124]	@ (8003700 <TIM_OC2_SetConfig+0x110>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d013      	beq.n	80036b0 <TIM_OC2_SetConfig+0xc0>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a1e      	ldr	r2, [pc, #120]	@ (8003704 <TIM_OC2_SetConfig+0x114>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00f      	beq.n	80036b0 <TIM_OC2_SetConfig+0xc0>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a1e      	ldr	r2, [pc, #120]	@ (800370c <TIM_OC2_SetConfig+0x11c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00b      	beq.n	80036b0 <TIM_OC2_SetConfig+0xc0>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a1d      	ldr	r2, [pc, #116]	@ (8003710 <TIM_OC2_SetConfig+0x120>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d007      	beq.n	80036b0 <TIM_OC2_SetConfig+0xc0>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003714 <TIM_OC2_SetConfig+0x124>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d003      	beq.n	80036b0 <TIM_OC2_SetConfig+0xc0>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a17      	ldr	r2, [pc, #92]	@ (8003708 <TIM_OC2_SetConfig+0x118>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d113      	bne.n	80036d8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	621a      	str	r2, [r3, #32]
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40012c00 	.word	0x40012c00
 8003704:	40013400 	.word	0x40013400
 8003708:	40015000 	.word	0x40015000
 800370c:	40014000 	.word	0x40014000
 8003710:	40014400 	.word	0x40014400
 8003714:	40014800 	.word	0x40014800

08003718 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800374a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0303 	bic.w	r3, r3, #3
 8003752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a2b      	ldr	r2, [pc, #172]	@ (8003824 <TIM_OC3_SetConfig+0x10c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d007      	beq.n	800378a <TIM_OC3_SetConfig+0x72>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a2a      	ldr	r2, [pc, #168]	@ (8003828 <TIM_OC3_SetConfig+0x110>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d003      	beq.n	800378a <TIM_OC3_SetConfig+0x72>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a29      	ldr	r2, [pc, #164]	@ (800382c <TIM_OC3_SetConfig+0x114>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d10d      	bne.n	80037a6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003790:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	021b      	lsls	r3, r3, #8
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003824 <TIM_OC3_SetConfig+0x10c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <TIM_OC3_SetConfig+0xbe>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003828 <TIM_OC3_SetConfig+0x110>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00f      	beq.n	80037d6 <TIM_OC3_SetConfig+0xbe>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003830 <TIM_OC3_SetConfig+0x118>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00b      	beq.n	80037d6 <TIM_OC3_SetConfig+0xbe>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003834 <TIM_OC3_SetConfig+0x11c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d007      	beq.n	80037d6 <TIM_OC3_SetConfig+0xbe>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003838 <TIM_OC3_SetConfig+0x120>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d003      	beq.n	80037d6 <TIM_OC3_SetConfig+0xbe>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a16      	ldr	r2, [pc, #88]	@ (800382c <TIM_OC3_SetConfig+0x114>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d113      	bne.n	80037fe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	621a      	str	r2, [r3, #32]
}
 8003818:	bf00      	nop
 800381a:	371c      	adds	r7, #28
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40013400 	.word	0x40013400
 800382c:	40015000 	.word	0x40015000
 8003830:	40014000 	.word	0x40014000
 8003834:	40014400 	.word	0x40014400
 8003838:	40014800 	.word	0x40014800

0800383c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800386a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800386e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800388a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	031b      	lsls	r3, r3, #12
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a2c      	ldr	r2, [pc, #176]	@ (800394c <TIM_OC4_SetConfig+0x110>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d007      	beq.n	80038b0 <TIM_OC4_SetConfig+0x74>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a2b      	ldr	r2, [pc, #172]	@ (8003950 <TIM_OC4_SetConfig+0x114>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_OC4_SetConfig+0x74>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003954 <TIM_OC4_SetConfig+0x118>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d10d      	bne.n	80038cc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80038b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	031b      	lsls	r3, r3, #12
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a1f      	ldr	r2, [pc, #124]	@ (800394c <TIM_OC4_SetConfig+0x110>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d013      	beq.n	80038fc <TIM_OC4_SetConfig+0xc0>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003950 <TIM_OC4_SetConfig+0x114>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00f      	beq.n	80038fc <TIM_OC4_SetConfig+0xc0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a1e      	ldr	r2, [pc, #120]	@ (8003958 <TIM_OC4_SetConfig+0x11c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00b      	beq.n	80038fc <TIM_OC4_SetConfig+0xc0>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a1d      	ldr	r2, [pc, #116]	@ (800395c <TIM_OC4_SetConfig+0x120>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d007      	beq.n	80038fc <TIM_OC4_SetConfig+0xc0>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003960 <TIM_OC4_SetConfig+0x124>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_OC4_SetConfig+0xc0>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a17      	ldr	r2, [pc, #92]	@ (8003954 <TIM_OC4_SetConfig+0x118>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d113      	bne.n	8003924 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003902:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800390a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	019b      	lsls	r3, r3, #6
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	019b      	lsls	r3, r3, #6
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	621a      	str	r2, [r3, #32]
}
 800393e:	bf00      	nop
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40012c00 	.word	0x40012c00
 8003950:	40013400 	.word	0x40013400
 8003954:	40015000 	.word	0x40015000
 8003958:	40014000 	.word	0x40014000
 800395c:	40014400 	.word	0x40014400
 8003960:	40014800 	.word	0x40014800

08003964 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80039a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	041b      	lsls	r3, r3, #16
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a19      	ldr	r2, [pc, #100]	@ (8003a20 <TIM_OC5_SetConfig+0xbc>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <TIM_OC5_SetConfig+0x82>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a18      	ldr	r2, [pc, #96]	@ (8003a24 <TIM_OC5_SetConfig+0xc0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00f      	beq.n	80039e6 <TIM_OC5_SetConfig+0x82>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a17      	ldr	r2, [pc, #92]	@ (8003a28 <TIM_OC5_SetConfig+0xc4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00b      	beq.n	80039e6 <TIM_OC5_SetConfig+0x82>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a16      	ldr	r2, [pc, #88]	@ (8003a2c <TIM_OC5_SetConfig+0xc8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <TIM_OC5_SetConfig+0x82>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a15      	ldr	r2, [pc, #84]	@ (8003a30 <TIM_OC5_SetConfig+0xcc>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d003      	beq.n	80039e6 <TIM_OC5_SetConfig+0x82>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a14      	ldr	r2, [pc, #80]	@ (8003a34 <TIM_OC5_SetConfig+0xd0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d109      	bne.n	80039fa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	621a      	str	r2, [r3, #32]
}
 8003a14:	bf00      	nop
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	40012c00 	.word	0x40012c00
 8003a24:	40013400 	.word	0x40013400
 8003a28:	40014000 	.word	0x40014000
 8003a2c:	40014400 	.word	0x40014400
 8003a30:	40014800 	.word	0x40014800
 8003a34:	40015000 	.word	0x40015000

08003a38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	021b      	lsls	r3, r3, #8
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	051b      	lsls	r3, r3, #20
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8003af8 <TIM_OC6_SetConfig+0xc0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d013      	beq.n	8003abc <TIM_OC6_SetConfig+0x84>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a19      	ldr	r2, [pc, #100]	@ (8003afc <TIM_OC6_SetConfig+0xc4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00f      	beq.n	8003abc <TIM_OC6_SetConfig+0x84>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a18      	ldr	r2, [pc, #96]	@ (8003b00 <TIM_OC6_SetConfig+0xc8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00b      	beq.n	8003abc <TIM_OC6_SetConfig+0x84>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a17      	ldr	r2, [pc, #92]	@ (8003b04 <TIM_OC6_SetConfig+0xcc>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d007      	beq.n	8003abc <TIM_OC6_SetConfig+0x84>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a16      	ldr	r2, [pc, #88]	@ (8003b08 <TIM_OC6_SetConfig+0xd0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d003      	beq.n	8003abc <TIM_OC6_SetConfig+0x84>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a15      	ldr	r2, [pc, #84]	@ (8003b0c <TIM_OC6_SetConfig+0xd4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d109      	bne.n	8003ad0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	029b      	lsls	r3, r3, #10
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	621a      	str	r2, [r3, #32]
}
 8003aea:	bf00      	nop
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40012c00 	.word	0x40012c00
 8003afc:	40013400 	.word	0x40013400
 8003b00:	40014000 	.word	0x40014000
 8003b04:	40014400 	.word	0x40014400
 8003b08:	40014800 	.word	0x40014800
 8003b0c:	40015000 	.word	0x40015000

08003b10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f003 031f 	and.w	r3, r3, #31
 8003b22:	2201      	movs	r2, #1
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a1a      	ldr	r2, [r3, #32]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	43db      	mvns	r3, r3
 8003b32:	401a      	ands	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a1a      	ldr	r2, [r3, #32]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f003 031f 	and.w	r3, r3, #31
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	fa01 f303 	lsl.w	r3, r1, r3
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	621a      	str	r2, [r3, #32]
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e074      	b.n	8003c5e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a34      	ldr	r2, [pc, #208]	@ (8003c6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d009      	beq.n	8003bb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a33      	ldr	r2, [pc, #204]	@ (8003c70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d004      	beq.n	8003bb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a31      	ldr	r2, [pc, #196]	@ (8003c74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d108      	bne.n	8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003bb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a21      	ldr	r2, [pc, #132]	@ (8003c6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d022      	beq.n	8003c32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bf4:	d01d      	beq.n	8003c32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d018      	beq.n	8003c32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1d      	ldr	r2, [pc, #116]	@ (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8003c80 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00e      	beq.n	8003c32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a15      	ldr	r2, [pc, #84]	@ (8003c70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d009      	beq.n	8003c32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a18      	ldr	r2, [pc, #96]	@ (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d004      	beq.n	8003c32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a11      	ldr	r2, [pc, #68]	@ (8003c74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d10c      	bne.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40012c00 	.word	0x40012c00
 8003c70:	40013400 	.word	0x40013400
 8003c74:	40015000 	.word	0x40015000
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	40000800 	.word	0x40000800
 8003c80:	40000c00 	.word	0x40000c00
 8003c84:	40014000 	.word	0x40014000

08003c88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e042      	b.n	8003d20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d106      	bne.n	8003cb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7fd fb2b 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2224      	movs	r2, #36	@ 0x24
 8003cb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0201 	bic.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fb24 	bl	8004320 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f825 	bl	8003d28 <UART_SetConfig>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e01b      	b.n	8003d20 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0201 	orr.w	r2, r2, #1
 8003d16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 fba3 	bl	8004464 <UART_CheckIdleState>
 8003d1e:	4603      	mov	r3, r0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d2c:	b08c      	sub	sp, #48	@ 0x30
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	4baa      	ldr	r3, [pc, #680]	@ (8004000 <UART_SetConfig+0x2d8>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	6812      	ldr	r2, [r2, #0]
 8003d5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d60:	430b      	orrs	r3, r1
 8003d62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a9f      	ldr	r2, [pc, #636]	@ (8004004 <UART_SetConfig+0x2dc>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d004      	beq.n	8003d94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d90:	4313      	orrs	r3, r2
 8003d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003d9e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	6812      	ldr	r2, [r2, #0]
 8003da6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003da8:	430b      	orrs	r3, r1
 8003daa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db2:	f023 010f 	bic.w	r1, r3, #15
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a90      	ldr	r2, [pc, #576]	@ (8004008 <UART_SetConfig+0x2e0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d125      	bne.n	8003e18 <UART_SetConfig+0xf0>
 8003dcc:	4b8f      	ldr	r3, [pc, #572]	@ (800400c <UART_SetConfig+0x2e4>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d81a      	bhi.n	8003e10 <UART_SetConfig+0xe8>
 8003dda:	a201      	add	r2, pc, #4	@ (adr r2, 8003de0 <UART_SetConfig+0xb8>)
 8003ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de0:	08003df1 	.word	0x08003df1
 8003de4:	08003e01 	.word	0x08003e01
 8003de8:	08003df9 	.word	0x08003df9
 8003dec:	08003e09 	.word	0x08003e09
 8003df0:	2301      	movs	r3, #1
 8003df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003df6:	e116      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dfe:	e112      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003e00:	2304      	movs	r3, #4
 8003e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e06:	e10e      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003e08:	2308      	movs	r3, #8
 8003e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e0e:	e10a      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003e10:	2310      	movs	r3, #16
 8003e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e16:	e106      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a7c      	ldr	r2, [pc, #496]	@ (8004010 <UART_SetConfig+0x2e8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d138      	bne.n	8003e94 <UART_SetConfig+0x16c>
 8003e22:	4b7a      	ldr	r3, [pc, #488]	@ (800400c <UART_SetConfig+0x2e4>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e28:	f003 030c 	and.w	r3, r3, #12
 8003e2c:	2b0c      	cmp	r3, #12
 8003e2e:	d82d      	bhi.n	8003e8c <UART_SetConfig+0x164>
 8003e30:	a201      	add	r2, pc, #4	@ (adr r2, 8003e38 <UART_SetConfig+0x110>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003e6d 	.word	0x08003e6d
 8003e3c:	08003e8d 	.word	0x08003e8d
 8003e40:	08003e8d 	.word	0x08003e8d
 8003e44:	08003e8d 	.word	0x08003e8d
 8003e48:	08003e7d 	.word	0x08003e7d
 8003e4c:	08003e8d 	.word	0x08003e8d
 8003e50:	08003e8d 	.word	0x08003e8d
 8003e54:	08003e8d 	.word	0x08003e8d
 8003e58:	08003e75 	.word	0x08003e75
 8003e5c:	08003e8d 	.word	0x08003e8d
 8003e60:	08003e8d 	.word	0x08003e8d
 8003e64:	08003e8d 	.word	0x08003e8d
 8003e68:	08003e85 	.word	0x08003e85
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e72:	e0d8      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003e74:	2302      	movs	r3, #2
 8003e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e7a:	e0d4      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003e7c:	2304      	movs	r3, #4
 8003e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e82:	e0d0      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003e84:	2308      	movs	r3, #8
 8003e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e8a:	e0cc      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003e8c:	2310      	movs	r3, #16
 8003e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e92:	e0c8      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a5e      	ldr	r2, [pc, #376]	@ (8004014 <UART_SetConfig+0x2ec>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d125      	bne.n	8003eea <UART_SetConfig+0x1c2>
 8003e9e:	4b5b      	ldr	r3, [pc, #364]	@ (800400c <UART_SetConfig+0x2e4>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ea8:	2b30      	cmp	r3, #48	@ 0x30
 8003eaa:	d016      	beq.n	8003eda <UART_SetConfig+0x1b2>
 8003eac:	2b30      	cmp	r3, #48	@ 0x30
 8003eae:	d818      	bhi.n	8003ee2 <UART_SetConfig+0x1ba>
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d00a      	beq.n	8003eca <UART_SetConfig+0x1a2>
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d814      	bhi.n	8003ee2 <UART_SetConfig+0x1ba>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <UART_SetConfig+0x19a>
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	d008      	beq.n	8003ed2 <UART_SetConfig+0x1aa>
 8003ec0:	e00f      	b.n	8003ee2 <UART_SetConfig+0x1ba>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ec8:	e0ad      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ed0:	e0a9      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003ed2:	2304      	movs	r3, #4
 8003ed4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ed8:	e0a5      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003eda:	2308      	movs	r3, #8
 8003edc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ee0:	e0a1      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003ee2:	2310      	movs	r3, #16
 8003ee4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ee8:	e09d      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a4a      	ldr	r2, [pc, #296]	@ (8004018 <UART_SetConfig+0x2f0>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d125      	bne.n	8003f40 <UART_SetConfig+0x218>
 8003ef4:	4b45      	ldr	r3, [pc, #276]	@ (800400c <UART_SetConfig+0x2e4>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003efe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f00:	d016      	beq.n	8003f30 <UART_SetConfig+0x208>
 8003f02:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f04:	d818      	bhi.n	8003f38 <UART_SetConfig+0x210>
 8003f06:	2b80      	cmp	r3, #128	@ 0x80
 8003f08:	d00a      	beq.n	8003f20 <UART_SetConfig+0x1f8>
 8003f0a:	2b80      	cmp	r3, #128	@ 0x80
 8003f0c:	d814      	bhi.n	8003f38 <UART_SetConfig+0x210>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <UART_SetConfig+0x1f0>
 8003f12:	2b40      	cmp	r3, #64	@ 0x40
 8003f14:	d008      	beq.n	8003f28 <UART_SetConfig+0x200>
 8003f16:	e00f      	b.n	8003f38 <UART_SetConfig+0x210>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f1e:	e082      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003f20:	2302      	movs	r3, #2
 8003f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f26:	e07e      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f2e:	e07a      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003f30:	2308      	movs	r3, #8
 8003f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f36:	e076      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f3e:	e072      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a35      	ldr	r2, [pc, #212]	@ (800401c <UART_SetConfig+0x2f4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d12a      	bne.n	8003fa0 <UART_SetConfig+0x278>
 8003f4a:	4b30      	ldr	r3, [pc, #192]	@ (800400c <UART_SetConfig+0x2e4>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f58:	d01a      	beq.n	8003f90 <UART_SetConfig+0x268>
 8003f5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f5e:	d81b      	bhi.n	8003f98 <UART_SetConfig+0x270>
 8003f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f64:	d00c      	beq.n	8003f80 <UART_SetConfig+0x258>
 8003f66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f6a:	d815      	bhi.n	8003f98 <UART_SetConfig+0x270>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <UART_SetConfig+0x250>
 8003f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f74:	d008      	beq.n	8003f88 <UART_SetConfig+0x260>
 8003f76:	e00f      	b.n	8003f98 <UART_SetConfig+0x270>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f7e:	e052      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003f80:	2302      	movs	r3, #2
 8003f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f86:	e04e      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f8e:	e04a      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003f90:	2308      	movs	r3, #8
 8003f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f96:	e046      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003f98:	2310      	movs	r3, #16
 8003f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f9e:	e042      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a17      	ldr	r2, [pc, #92]	@ (8004004 <UART_SetConfig+0x2dc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d13a      	bne.n	8004020 <UART_SetConfig+0x2f8>
 8003faa:	4b18      	ldr	r3, [pc, #96]	@ (800400c <UART_SetConfig+0x2e4>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003fb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fb8:	d01a      	beq.n	8003ff0 <UART_SetConfig+0x2c8>
 8003fba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fbe:	d81b      	bhi.n	8003ff8 <UART_SetConfig+0x2d0>
 8003fc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fc4:	d00c      	beq.n	8003fe0 <UART_SetConfig+0x2b8>
 8003fc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fca:	d815      	bhi.n	8003ff8 <UART_SetConfig+0x2d0>
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <UART_SetConfig+0x2b0>
 8003fd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fd4:	d008      	beq.n	8003fe8 <UART_SetConfig+0x2c0>
 8003fd6:	e00f      	b.n	8003ff8 <UART_SetConfig+0x2d0>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fde:	e022      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fe6:	e01e      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003fe8:	2304      	movs	r3, #4
 8003fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fee:	e01a      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003ff0:	2308      	movs	r3, #8
 8003ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ff6:	e016      	b.n	8004026 <UART_SetConfig+0x2fe>
 8003ff8:	2310      	movs	r3, #16
 8003ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ffe:	e012      	b.n	8004026 <UART_SetConfig+0x2fe>
 8004000:	cfff69f3 	.word	0xcfff69f3
 8004004:	40008000 	.word	0x40008000
 8004008:	40013800 	.word	0x40013800
 800400c:	40021000 	.word	0x40021000
 8004010:	40004400 	.word	0x40004400
 8004014:	40004800 	.word	0x40004800
 8004018:	40004c00 	.word	0x40004c00
 800401c:	40005000 	.word	0x40005000
 8004020:	2310      	movs	r3, #16
 8004022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4aae      	ldr	r2, [pc, #696]	@ (80042e4 <UART_SetConfig+0x5bc>)
 800402c:	4293      	cmp	r3, r2
 800402e:	f040 8097 	bne.w	8004160 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004032:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004036:	2b08      	cmp	r3, #8
 8004038:	d823      	bhi.n	8004082 <UART_SetConfig+0x35a>
 800403a:	a201      	add	r2, pc, #4	@ (adr r2, 8004040 <UART_SetConfig+0x318>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	08004065 	.word	0x08004065
 8004044:	08004083 	.word	0x08004083
 8004048:	0800406d 	.word	0x0800406d
 800404c:	08004083 	.word	0x08004083
 8004050:	08004073 	.word	0x08004073
 8004054:	08004083 	.word	0x08004083
 8004058:	08004083 	.word	0x08004083
 800405c:	08004083 	.word	0x08004083
 8004060:	0800407b 	.word	0x0800407b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004064:	f7fe fa6c 	bl	8002540 <HAL_RCC_GetPCLK1Freq>
 8004068:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800406a:	e010      	b.n	800408e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800406c:	4b9e      	ldr	r3, [pc, #632]	@ (80042e8 <UART_SetConfig+0x5c0>)
 800406e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004070:	e00d      	b.n	800408e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004072:	f7fe f9f7 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8004076:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004078:	e009      	b.n	800408e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800407a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800407e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004080:	e005      	b.n	800408e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800408c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8130 	beq.w	80042f6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	4a94      	ldr	r2, [pc, #592]	@ (80042ec <UART_SetConfig+0x5c4>)
 800409c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040a0:	461a      	mov	r2, r3
 80040a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	4413      	add	r3, r2
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d305      	bcc.n	80040c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d903      	bls.n	80040ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80040cc:	e113      	b.n	80042f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	2200      	movs	r2, #0
 80040d2:	60bb      	str	r3, [r7, #8]
 80040d4:	60fa      	str	r2, [r7, #12]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040da:	4a84      	ldr	r2, [pc, #528]	@ (80042ec <UART_SetConfig+0x5c4>)
 80040dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2200      	movs	r2, #0
 80040e4:	603b      	str	r3, [r7, #0]
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040f0:	f7fc f892 	bl	8000218 <__aeabi_uldivmod>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4610      	mov	r0, r2
 80040fa:	4619      	mov	r1, r3
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	020b      	lsls	r3, r1, #8
 8004106:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800410a:	0202      	lsls	r2, r0, #8
 800410c:	6979      	ldr	r1, [r7, #20]
 800410e:	6849      	ldr	r1, [r1, #4]
 8004110:	0849      	lsrs	r1, r1, #1
 8004112:	2000      	movs	r0, #0
 8004114:	460c      	mov	r4, r1
 8004116:	4605      	mov	r5, r0
 8004118:	eb12 0804 	adds.w	r8, r2, r4
 800411c:	eb43 0905 	adc.w	r9, r3, r5
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	469a      	mov	sl, r3
 8004128:	4693      	mov	fp, r2
 800412a:	4652      	mov	r2, sl
 800412c:	465b      	mov	r3, fp
 800412e:	4640      	mov	r0, r8
 8004130:	4649      	mov	r1, r9
 8004132:	f7fc f871 	bl	8000218 <__aeabi_uldivmod>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	4613      	mov	r3, r2
 800413c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004144:	d308      	bcc.n	8004158 <UART_SetConfig+0x430>
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800414c:	d204      	bcs.n	8004158 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6a3a      	ldr	r2, [r7, #32]
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	e0ce      	b.n	80042f6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800415e:	e0ca      	b.n	80042f6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004168:	d166      	bne.n	8004238 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800416a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800416e:	2b08      	cmp	r3, #8
 8004170:	d827      	bhi.n	80041c2 <UART_SetConfig+0x49a>
 8004172:	a201      	add	r2, pc, #4	@ (adr r2, 8004178 <UART_SetConfig+0x450>)
 8004174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004178:	0800419d 	.word	0x0800419d
 800417c:	080041a5 	.word	0x080041a5
 8004180:	080041ad 	.word	0x080041ad
 8004184:	080041c3 	.word	0x080041c3
 8004188:	080041b3 	.word	0x080041b3
 800418c:	080041c3 	.word	0x080041c3
 8004190:	080041c3 	.word	0x080041c3
 8004194:	080041c3 	.word	0x080041c3
 8004198:	080041bb 	.word	0x080041bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800419c:	f7fe f9d0 	bl	8002540 <HAL_RCC_GetPCLK1Freq>
 80041a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041a2:	e014      	b.n	80041ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041a4:	f7fe f9e2 	bl	800256c <HAL_RCC_GetPCLK2Freq>
 80041a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041aa:	e010      	b.n	80041ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041ac:	4b4e      	ldr	r3, [pc, #312]	@ (80042e8 <UART_SetConfig+0x5c0>)
 80041ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041b0:	e00d      	b.n	80041ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041b2:	f7fe f957 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 80041b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041b8:	e009      	b.n	80041ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041c0:	e005      	b.n	80041ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80041cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 8090 	beq.w	80042f6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041da:	4a44      	ldr	r2, [pc, #272]	@ (80042ec <UART_SetConfig+0x5c4>)
 80041dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041e0:	461a      	mov	r2, r3
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80041e8:	005a      	lsls	r2, r3, #1
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	085b      	lsrs	r3, r3, #1
 80041f0:	441a      	add	r2, r3
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	2b0f      	cmp	r3, #15
 8004200:	d916      	bls.n	8004230 <UART_SetConfig+0x508>
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004208:	d212      	bcs.n	8004230 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	b29b      	uxth	r3, r3
 800420e:	f023 030f 	bic.w	r3, r3, #15
 8004212:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	085b      	lsrs	r3, r3, #1
 8004218:	b29b      	uxth	r3, r3
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	b29a      	uxth	r2, r3
 8004220:	8bfb      	ldrh	r3, [r7, #30]
 8004222:	4313      	orrs	r3, r2
 8004224:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	8bfa      	ldrh	r2, [r7, #30]
 800422c:	60da      	str	r2, [r3, #12]
 800422e:	e062      	b.n	80042f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004236:	e05e      	b.n	80042f6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004238:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800423c:	2b08      	cmp	r3, #8
 800423e:	d828      	bhi.n	8004292 <UART_SetConfig+0x56a>
 8004240:	a201      	add	r2, pc, #4	@ (adr r2, 8004248 <UART_SetConfig+0x520>)
 8004242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004246:	bf00      	nop
 8004248:	0800426d 	.word	0x0800426d
 800424c:	08004275 	.word	0x08004275
 8004250:	0800427d 	.word	0x0800427d
 8004254:	08004293 	.word	0x08004293
 8004258:	08004283 	.word	0x08004283
 800425c:	08004293 	.word	0x08004293
 8004260:	08004293 	.word	0x08004293
 8004264:	08004293 	.word	0x08004293
 8004268:	0800428b 	.word	0x0800428b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800426c:	f7fe f968 	bl	8002540 <HAL_RCC_GetPCLK1Freq>
 8004270:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004272:	e014      	b.n	800429e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004274:	f7fe f97a 	bl	800256c <HAL_RCC_GetPCLK2Freq>
 8004278:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800427a:	e010      	b.n	800429e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800427c:	4b1a      	ldr	r3, [pc, #104]	@ (80042e8 <UART_SetConfig+0x5c0>)
 800427e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004280:	e00d      	b.n	800429e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004282:	f7fe f8ef 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8004286:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004288:	e009      	b.n	800429e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800428a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800428e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004290:	e005      	b.n	800429e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800429c:	bf00      	nop
    }

    if (pclk != 0U)
 800429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d028      	beq.n	80042f6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a8:	4a10      	ldr	r2, [pc, #64]	@ (80042ec <UART_SetConfig+0x5c4>)
 80042aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042ae:	461a      	mov	r2, r3
 80042b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	085b      	lsrs	r3, r3, #1
 80042bc:	441a      	add	r2, r3
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	2b0f      	cmp	r3, #15
 80042cc:	d910      	bls.n	80042f0 <UART_SetConfig+0x5c8>
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042d4:	d20c      	bcs.n	80042f0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	b29a      	uxth	r2, r3
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	60da      	str	r2, [r3, #12]
 80042e0:	e009      	b.n	80042f6 <UART_SetConfig+0x5ce>
 80042e2:	bf00      	nop
 80042e4:	40008000 	.word	0x40008000
 80042e8:	00f42400 	.word	0x00f42400
 80042ec:	080049ec 	.word	0x080049ec
      }
      else
      {
        ret = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2201      	movs	r2, #1
 8004302:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2200      	movs	r2, #0
 800430a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2200      	movs	r2, #0
 8004310:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004312:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004316:	4618      	mov	r0, r3
 8004318:	3730      	adds	r7, #48	@ 0x30
 800431a:	46bd      	mov	sp, r7
 800431c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004320 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b4:	f003 0310 	and.w	r3, r3, #16
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01a      	beq.n	8004436 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800441e:	d10a      	bne.n	8004436 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	605a      	str	r2, [r3, #4]
  }
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b098      	sub	sp, #96	@ 0x60
 8004468:	af02      	add	r7, sp, #8
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004474:	f7fd f82e 	bl	80014d4 <HAL_GetTick>
 8004478:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b08      	cmp	r3, #8
 8004486:	d12f      	bne.n	80044e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004488:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004490:	2200      	movs	r2, #0
 8004492:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f88e 	bl	80045b8 <UART_WaitOnFlagUntilTimeout>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d022      	beq.n	80044e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044aa:	e853 3f00 	ldrex	r3, [r3]
 80044ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	461a      	mov	r2, r3
 80044be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044c8:	e841 2300 	strex	r3, r2, [r1]
 80044cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e6      	bne.n	80044a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e063      	b.n	80045b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d149      	bne.n	800458a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044fe:	2200      	movs	r2, #0
 8004500:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f857 	bl	80045b8 <UART_WaitOnFlagUntilTimeout>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d03c      	beq.n	800458a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	623b      	str	r3, [r7, #32]
   return(result);
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004524:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800452e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004530:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004534:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800453c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e6      	bne.n	8004510 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3308      	adds	r3, #8
 8004548:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	60fb      	str	r3, [r7, #12]
   return(result);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f023 0301 	bic.w	r3, r3, #1
 8004558:	64bb      	str	r3, [r7, #72]	@ 0x48
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3308      	adds	r3, #8
 8004560:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004562:	61fa      	str	r2, [r7, #28]
 8004564:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	69b9      	ldr	r1, [r7, #24]
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	617b      	str	r3, [r7, #20]
   return(result);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e5      	bne.n	8004542 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e012      	b.n	80045b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3758      	adds	r7, #88	@ 0x58
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	4613      	mov	r3, r2
 80045c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c8:	e04f      	b.n	800466a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045d0:	d04b      	beq.n	800466a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d2:	f7fc ff7f 	bl	80014d4 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d302      	bcc.n	80045e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e04e      	b.n	800468a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d037      	beq.n	800466a <UART_WaitOnFlagUntilTimeout+0xb2>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b80      	cmp	r3, #128	@ 0x80
 80045fe:	d034      	beq.n	800466a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b40      	cmp	r3, #64	@ 0x40
 8004604:	d031      	beq.n	800466a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f003 0308 	and.w	r3, r3, #8
 8004610:	2b08      	cmp	r3, #8
 8004612:	d110      	bne.n	8004636 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2208      	movs	r2, #8
 800461a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f838 	bl	8004692 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2208      	movs	r2, #8
 8004626:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e029      	b.n	800468a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004640:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004644:	d111      	bne.n	800466a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800464e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f81e 	bl	8004692 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2220      	movs	r2, #32
 800465a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e00f      	b.n	800468a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	4013      	ands	r3, r2
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	429a      	cmp	r2, r3
 8004678:	bf0c      	ite	eq
 800467a:	2301      	moveq	r3, #1
 800467c:	2300      	movne	r3, #0
 800467e:	b2db      	uxtb	r3, r3
 8004680:	461a      	mov	r2, r3
 8004682:	79fb      	ldrb	r3, [r7, #7]
 8004684:	429a      	cmp	r2, r3
 8004686:	d0a0      	beq.n	80045ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004692:	b480      	push	{r7}
 8004694:	b095      	sub	sp, #84	@ 0x54
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a2:	e853 3f00 	ldrex	r3, [r3]
 80046a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	461a      	mov	r2, r3
 80046b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80046ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046c0:	e841 2300 	strex	r3, r2, [r1]
 80046c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1e6      	bne.n	800469a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3308      	adds	r3, #8
 80046d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	e853 3f00 	ldrex	r3, [r3]
 80046da:	61fb      	str	r3, [r7, #28]
   return(result);
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046e2:	f023 0301 	bic.w	r3, r3, #1
 80046e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3308      	adds	r3, #8
 80046ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046f8:	e841 2300 	strex	r3, r2, [r1]
 80046fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e3      	bne.n	80046cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004708:	2b01      	cmp	r3, #1
 800470a:	d118      	bne.n	800473e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	60bb      	str	r3, [r7, #8]
   return(result);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f023 0310 	bic.w	r3, r3, #16
 8004720:	647b      	str	r3, [r7, #68]	@ 0x44
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800472a:	61bb      	str	r3, [r7, #24]
 800472c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6979      	ldr	r1, [r7, #20]
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	613b      	str	r3, [r7, #16]
   return(result);
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e6      	bne.n	800470c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004752:	bf00      	nop
 8004754:	3754      	adds	r7, #84	@ 0x54
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800475e:	b480      	push	{r7}
 8004760:	b085      	sub	sp, #20
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_UARTEx_DisableFifoMode+0x16>
 8004770:	2302      	movs	r3, #2
 8004772:	e027      	b.n	80047c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2224      	movs	r2, #36	@ 0x24
 8004780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0201 	bic.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80047a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e02d      	b.n	8004844 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2224      	movs	r2, #36	@ 0x24
 80047f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f84f 	bl	80048c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004860:	2302      	movs	r3, #2
 8004862:	e02d      	b.n	80048c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2224      	movs	r2, #36	@ 0x24
 8004870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0201 	bic.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f811 	bl	80048c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d108      	bne.n	80048ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048e8:	e031      	b.n	800494e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048ea:	2308      	movs	r3, #8
 80048ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048ee:	2308      	movs	r3, #8
 80048f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	0e5b      	lsrs	r3, r3, #25
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	0f5b      	lsrs	r3, r3, #29
 800490a:	b2db      	uxtb	r3, r3
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004912:	7bbb      	ldrb	r3, [r7, #14]
 8004914:	7b3a      	ldrb	r2, [r7, #12]
 8004916:	4911      	ldr	r1, [pc, #68]	@ (800495c <UARTEx_SetNbDataToProcess+0x94>)
 8004918:	5c8a      	ldrb	r2, [r1, r2]
 800491a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800491e:	7b3a      	ldrb	r2, [r7, #12]
 8004920:	490f      	ldr	r1, [pc, #60]	@ (8004960 <UARTEx_SetNbDataToProcess+0x98>)
 8004922:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004924:	fb93 f3f2 	sdiv	r3, r3, r2
 8004928:	b29a      	uxth	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	7b7a      	ldrb	r2, [r7, #13]
 8004934:	4909      	ldr	r1, [pc, #36]	@ (800495c <UARTEx_SetNbDataToProcess+0x94>)
 8004936:	5c8a      	ldrb	r2, [r1, r2]
 8004938:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800493c:	7b7a      	ldrb	r2, [r7, #13]
 800493e:	4908      	ldr	r1, [pc, #32]	@ (8004960 <UARTEx_SetNbDataToProcess+0x98>)
 8004940:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004942:	fb93 f3f2 	sdiv	r3, r3, r2
 8004946:	b29a      	uxth	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800494e:	bf00      	nop
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	08004a04 	.word	0x08004a04
 8004960:	08004a0c 	.word	0x08004a0c

08004964 <memset>:
 8004964:	4402      	add	r2, r0
 8004966:	4603      	mov	r3, r0
 8004968:	4293      	cmp	r3, r2
 800496a:	d100      	bne.n	800496e <memset+0xa>
 800496c:	4770      	bx	lr
 800496e:	f803 1b01 	strb.w	r1, [r3], #1
 8004972:	e7f9      	b.n	8004968 <memset+0x4>

08004974 <__libc_init_array>:
 8004974:	b570      	push	{r4, r5, r6, lr}
 8004976:	4d0d      	ldr	r5, [pc, #52]	@ (80049ac <__libc_init_array+0x38>)
 8004978:	4c0d      	ldr	r4, [pc, #52]	@ (80049b0 <__libc_init_array+0x3c>)
 800497a:	1b64      	subs	r4, r4, r5
 800497c:	10a4      	asrs	r4, r4, #2
 800497e:	2600      	movs	r6, #0
 8004980:	42a6      	cmp	r6, r4
 8004982:	d109      	bne.n	8004998 <__libc_init_array+0x24>
 8004984:	4d0b      	ldr	r5, [pc, #44]	@ (80049b4 <__libc_init_array+0x40>)
 8004986:	4c0c      	ldr	r4, [pc, #48]	@ (80049b8 <__libc_init_array+0x44>)
 8004988:	f000 f818 	bl	80049bc <_init>
 800498c:	1b64      	subs	r4, r4, r5
 800498e:	10a4      	asrs	r4, r4, #2
 8004990:	2600      	movs	r6, #0
 8004992:	42a6      	cmp	r6, r4
 8004994:	d105      	bne.n	80049a2 <__libc_init_array+0x2e>
 8004996:	bd70      	pop	{r4, r5, r6, pc}
 8004998:	f855 3b04 	ldr.w	r3, [r5], #4
 800499c:	4798      	blx	r3
 800499e:	3601      	adds	r6, #1
 80049a0:	e7ee      	b.n	8004980 <__libc_init_array+0xc>
 80049a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a6:	4798      	blx	r3
 80049a8:	3601      	adds	r6, #1
 80049aa:	e7f2      	b.n	8004992 <__libc_init_array+0x1e>
 80049ac:	08004a1c 	.word	0x08004a1c
 80049b0:	08004a1c 	.word	0x08004a1c
 80049b4:	08004a1c 	.word	0x08004a1c
 80049b8:	08004a20 	.word	0x08004a20

080049bc <_init>:
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049be:	bf00      	nop
 80049c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c2:	bc08      	pop	{r3}
 80049c4:	469e      	mov	lr, r3
 80049c6:	4770      	bx	lr

080049c8 <_fini>:
 80049c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ca:	bf00      	nop
 80049cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ce:	bc08      	pop	{r3}
 80049d0:	469e      	mov	lr, r3
 80049d2:	4770      	bx	lr
