
jason_fork_lift_fan_vet6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000664c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080067d8  080067d8  000077d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006860  08006860  000080e8  2**0
                  CONTENTS
  4 .ARM          00000008  08006860  08006860  00007860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006868  08006868  000080e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006868  08006868  00007868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800686c  0800686c  0000786c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e8  20000000  08006870  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000080e8  2**0
                  CONTENTS
 10 .bss          000003cc  200000e8  200000e8  000080e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004b4  200004b4  000080e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000080e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e30e  00000000  00000000  00008118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002282  00000000  00000000  00016426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce8  00000000  00000000  000186a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009fa  00000000  00000000  00019390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000209d0  00000000  00000000  00019d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010c6b  00000000  00000000  0003a75a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc5c9  00000000  00000000  0004b3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011798e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039a0  00000000  00000000  001179d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  0011b374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000e8 	.word	0x200000e8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080067bc 	.word	0x080067bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ec 	.word	0x200000ec
 80001c4:	080067bc 	.word	0x080067bc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000be4:	f000 b96a 	b.w	8000ebc <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	460c      	mov	r4, r1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d14e      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	458c      	cmp	ip, r1
 8000c10:	4686      	mov	lr, r0
 8000c12:	fab2 f282 	clz	r2, r2
 8000c16:	d962      	bls.n	8000cde <__udivmoddi4+0xde>
 8000c18:	b14a      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1a:	f1c2 0320 	rsb	r3, r2, #32
 8000c1e:	4091      	lsls	r1, r2
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c28:	4319      	orrs	r1, r3
 8000c2a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f f68c 	uxth.w	r6, ip
 8000c36:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb04 f106 	mul.w	r1, r4, r6
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c56:	f080 8112 	bcs.w	8000e7e <__udivmoddi4+0x27e>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 810f 	bls.w	8000e7e <__udivmoddi4+0x27e>
 8000c60:	3c02      	subs	r4, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	fa1f f38e 	uxth.w	r3, lr
 8000c6a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f606 	mul.w	r6, r0, r6
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	d90a      	bls.n	8000c94 <__udivmoddi4+0x94>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c86:	f080 80fc 	bcs.w	8000e82 <__udivmoddi4+0x282>
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	f240 80f9 	bls.w	8000e82 <__udivmoddi4+0x282>
 8000c90:	4463      	add	r3, ip
 8000c92:	3802      	subs	r0, #2
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	b11d      	cbz	r5, 8000ca6 <__udivmoddi4+0xa6>
 8000c9e:	40d3      	lsrs	r3, r2
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d905      	bls.n	8000cba <__udivmoddi4+0xba>
 8000cae:	b10d      	cbz	r5, 8000cb4 <__udivmoddi4+0xb4>
 8000cb0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e7f5      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cba:	fab3 f183 	clz	r1, r3
 8000cbe:	2900      	cmp	r1, #0
 8000cc0:	d146      	bne.n	8000d50 <__udivmoddi4+0x150>
 8000cc2:	42a3      	cmp	r3, r4
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xcc>
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	f0c0 80f0 	bcc.w	8000eac <__udivmoddi4+0x2ac>
 8000ccc:	1a86      	subs	r6, r0, r2
 8000cce:	eb64 0303 	sbc.w	r3, r4, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	2d00      	cmp	r5, #0
 8000cd6:	d0e6      	beq.n	8000ca6 <__udivmoddi4+0xa6>
 8000cd8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cdc:	e7e3      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	f040 8090 	bne.w	8000e04 <__udivmoddi4+0x204>
 8000ce4:	eba1 040c 	sub.w	r4, r1, ip
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cfa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb07 f006 	mul.w	r0, r7, r6
 8000d06:	4298      	cmp	r0, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x11c>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x11a>
 8000d14:	4298      	cmp	r0, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2b4>
 8000d1a:	4626      	mov	r6, r4
 8000d1c:	1a1c      	subs	r4, r3, r0
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d26:	fb08 4410 	mls	r4, r8, r0, r4
 8000d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2e:	fb00 f707 	mul.w	r7, r0, r7
 8000d32:	429f      	cmp	r7, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x148>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x146>
 8000d40:	429f      	cmp	r7, r3
 8000d42:	f200 80b0 	bhi.w	8000ea6 <__udivmoddi4+0x2a6>
 8000d46:	4620      	mov	r0, r4
 8000d48:	1bdb      	subs	r3, r3, r7
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	e7a5      	b.n	8000c9c <__udivmoddi4+0x9c>
 8000d50:	f1c1 0620 	rsb	r6, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d60:	fa04 f301 	lsl.w	r3, r4, r1
 8000d64:	ea43 030c 	orr.w	r3, r3, ip
 8000d68:	40f4      	lsrs	r4, r6
 8000d6a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6e:	0c38      	lsrs	r0, r7, #16
 8000d70:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d74:	fbb4 fef0 	udiv	lr, r4, r0
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d80:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d84:	fb0e f90c 	mul.w	r9, lr, ip
 8000d88:	45a1      	cmp	r9, r4
 8000d8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x1a6>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d96:	f080 8084 	bcs.w	8000ea2 <__udivmoddi4+0x2a2>
 8000d9a:	45a1      	cmp	r9, r4
 8000d9c:	f240 8081 	bls.w	8000ea2 <__udivmoddi4+0x2a2>
 8000da0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	eba4 0409 	sub.w	r4, r4, r9
 8000daa:	fa1f f983 	uxth.w	r9, r3
 8000dae:	fbb4 f3f0 	udiv	r3, r4, r0
 8000db2:	fb00 4413 	mls	r4, r0, r3, r4
 8000db6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dba:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x1d2>
 8000dc2:	193c      	adds	r4, r7, r4
 8000dc4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dc8:	d267      	bcs.n	8000e9a <__udivmoddi4+0x29a>
 8000dca:	45a4      	cmp	ip, r4
 8000dcc:	d965      	bls.n	8000e9a <__udivmoddi4+0x29a>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	429c      	cmp	r4, r3
 8000de0:	46ce      	mov	lr, r9
 8000de2:	469c      	mov	ip, r3
 8000de4:	d351      	bcc.n	8000e8a <__udivmoddi4+0x28a>
 8000de6:	d04e      	beq.n	8000e86 <__udivmoddi4+0x286>
 8000de8:	b155      	cbz	r5, 8000e00 <__udivmoddi4+0x200>
 8000dea:	ebb8 030e 	subs.w	r3, r8, lr
 8000dee:	eb64 040c 	sbc.w	r4, r4, ip
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	40cb      	lsrs	r3, r1
 8000df8:	431e      	orrs	r6, r3
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	e9c5 6400 	strd	r6, r4, [r5]
 8000e00:	2100      	movs	r1, #0
 8000e02:	e750      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000e04:	f1c2 0320 	rsb	r3, r2, #32
 8000e08:	fa20 f103 	lsr.w	r1, r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa24 f303 	lsr.w	r3, r4, r3
 8000e14:	4094      	lsls	r4, r2
 8000e16:	430c      	orrs	r4, r1
 8000e18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e1c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e28:	fb08 3110 	mls	r1, r8, r0, r3
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e32:	fb00 f107 	mul.w	r1, r0, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x24c>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e42:	d22c      	bcs.n	8000e9e <__udivmoddi4+0x29e>
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d92a      	bls.n	8000e9e <__udivmoddi4+0x29e>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e54:	fb08 3311 	mls	r3, r8, r1, r3
 8000e58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e5c:	fb01 f307 	mul.w	r3, r1, r7
 8000e60:	42a3      	cmp	r3, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x276>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e6c:	d213      	bcs.n	8000e96 <__udivmoddi4+0x296>
 8000e6e:	42a3      	cmp	r3, r4
 8000e70:	d911      	bls.n	8000e96 <__udivmoddi4+0x296>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4464      	add	r4, ip
 8000e76:	1ae4      	subs	r4, r4, r3
 8000e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e7c:	e739      	b.n	8000cf2 <__udivmoddi4+0xf2>
 8000e7e:	4604      	mov	r4, r0
 8000e80:	e6f0      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e82:	4608      	mov	r0, r1
 8000e84:	e706      	b.n	8000c94 <__udivmoddi4+0x94>
 8000e86:	45c8      	cmp	r8, r9
 8000e88:	d2ae      	bcs.n	8000de8 <__udivmoddi4+0x1e8>
 8000e8a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e8e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e92:	3801      	subs	r0, #1
 8000e94:	e7a8      	b.n	8000de8 <__udivmoddi4+0x1e8>
 8000e96:	4631      	mov	r1, r6
 8000e98:	e7ed      	b.n	8000e76 <__udivmoddi4+0x276>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	e799      	b.n	8000dd2 <__udivmoddi4+0x1d2>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e7d4      	b.n	8000e4c <__udivmoddi4+0x24c>
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1a6>
 8000ea6:	4463      	add	r3, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e74d      	b.n	8000d48 <__udivmoddi4+0x148>
 8000eac:	4606      	mov	r6, r0
 8000eae:	4623      	mov	r3, r4
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e70f      	b.n	8000cd4 <__udivmoddi4+0xd4>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	e730      	b.n	8000d1c <__udivmoddi4+0x11c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <update_encoder>:
  encoder->displacement = 0;
  encoder->velocity = 0;
  encoder->last_counter_value = 0;
}

void update_encoder(EncoderData* encoder) {
 8000ec0:	b5b0      	push	{r4, r5, r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  int current_counter = __HAL_TIM_GET_COUNTER(encoder->htim);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	691b      	ldr	r3, [r3, #16]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed0:	613b      	str	r3, [r7, #16]
  uint32_t duration = HAL_GetTick() - encoder->last_tick;
 8000ed2:	f002 fd4d 	bl	8003970 <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	60fb      	str	r3, [r7, #12]
  int num_pulse = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  if (duration <= 1)  // delay for encode to update, in ms
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	f240 8095 	bls.w	8001016 <update_encoder+0x156>
    return;

  if (current_counter == encoder->last_counter_value) {
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d102      	bne.n	8000efc <update_encoder+0x3c>
    num_pulse = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	e035      	b.n	8000f68 <update_encoder+0xa8>
  } else if (current_counter > encoder->last_counter_value) {
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	dd18      	ble.n	8000f38 <update_encoder+0x78>
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move backward, count down, overflow
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	2b10      	cmp	r3, #16
 8000f14:	d10a      	bne.n	8000f2c <update_encoder+0x6c>
      num_pulse = (__HAL_TIM_GET_AUTORELOAD(encoder->htim) - current_counter + encoder->last_counter_value) * -1;
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	6892      	ldr	r2, [r2, #8]
 8000f26:	1a9b      	subs	r3, r3, r2
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	e01d      	b.n	8000f68 <update_encoder+0xa8>
    } else {  // move forward, count up, no overflow
      num_pulse = current_counter - encoder->last_counter_value;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	e017      	b.n	8000f68 <update_encoder+0xa8>
    }
  } else {
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move up, count up, overflow
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0310 	and.w	r3, r3, #16
 8000f44:	2b10      	cmp	r3, #16
 8000f46:	d105      	bne.n	8000f54 <update_encoder+0x94>
      num_pulse = (encoder->last_counter_value - current_counter) * -1;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	e009      	b.n	8000f68 <update_encoder+0xa8>
    } else {  // move backward, count down, no overflow
      num_pulse = __HAL_TIM_GET_AUTORELOAD(encoder->htim) - encoder->last_counter_value + current_counter;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	6892      	ldr	r2, [r2, #8]
 8000f60:	1a9a      	subs	r2, r3, r2
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4413      	add	r3, r2
 8000f66:	617b      	str	r3, [r7, #20]
    }
  }

  float temp_displacement = (float)num_pulse / encoder->_ppr * 2.0 * M_PI;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	ee07 3a90 	vmov	s15, r3
 8000f6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	8a9b      	ldrh	r3, [r3, #20]
 8000f76:	ee07 3a90 	vmov	s15, r3
 8000f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f7e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f82:	ee16 0a90 	vmov	r0, s13
 8000f86:	f7ff fa83 	bl	8000490 <__aeabi_f2d>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	f7ff f921 	bl	80001d4 <__adddf3>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	a322      	add	r3, pc, #136	@ (adr r3, 8001024 <update_encoder+0x164>)
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	f7ff face 	bl	8000540 <__aeabi_dmul>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	f7ff fdc0 	bl	8000b30 <__aeabi_d2f>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60bb      	str	r3, [r7, #8]
  encoder->last_counter_value = current_counter;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	609a      	str	r2, [r3, #8]
  encoder->displacement += temp_displacement;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	ed93 7a00 	vldr	s14, [r3]
 8000fc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	edc3 7a00 	vstr	s15, [r3]
  encoder->velocity = temp_displacement * 1000.0 / duration;
 8000fce:	68b8      	ldr	r0, [r7, #8]
 8000fd0:	f7ff fa5e 	bl	8000490 <__aeabi_f2d>
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <update_encoder+0x160>)
 8000fda:	f7ff fab1 	bl	8000540 <__aeabi_dmul>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4614      	mov	r4, r2
 8000fe4:	461d      	mov	r5, r3
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f7ff fa30 	bl	800044c <__aeabi_ui2d>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	4629      	mov	r1, r5
 8000ff4:	f7ff fbce 	bl	8000794 <__aeabi_ddiv>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f7ff fd96 	bl	8000b30 <__aeabi_d2f>
 8001004:	4602      	mov	r2, r0
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	605a      	str	r2, [r3, #4]
  encoder->last_tick = HAL_GetTick();
 800100a:	f002 fcb1 	bl	8003970 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	e000      	b.n	8001018 <update_encoder+0x158>
    return;
 8001016:	bf00      	nop
}
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bdb0      	pop	{r4, r5, r7, pc}
 800101e:	bf00      	nop
 8001020:	408f4000 	.word	0x408f4000
 8001024:	54442d18 	.word	0x54442d18
 8001028:	400921fb 	.word	0x400921fb

0800102c <read_current_velocity>:

WheelVelocity read_current_velocity(EncoderData* encoders) {
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b095      	sub	sp, #84	@ 0x54
 8001030:	af00      	add	r7, sp, #0
 8001032:	6178      	str	r0, [r7, #20]
  if (encoders == NULL)
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d107      	bne.n	800104a <read_current_velocity+0x1e>
    return (WheelVelocity){0, 0, 0, 0};
 800103a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	e030      	b.n	80010ac <read_current_velocity+0x80>

  WheelVelocity velocities = {.front_left = 0, .front_right = 0, .rear_left = 0, .rear_right = 0};
 800104a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 8001058:	2300      	movs	r3, #0
 800105a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800105c:	e00d      	b.n	800107a <read_current_velocity+0x4e>
    update_encoder(&(encoders[i]));
 800105e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001060:	4613      	mov	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4413      	add	r3, r2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	461a      	mov	r2, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	4413      	add	r3, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff26 	bl	8000ec0 <update_encoder>
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 8001074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001076:	3301      	adds	r3, #1
 8001078:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800107a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800107c:	2b03      	cmp	r3, #3
 800107e:	ddee      	ble.n	800105e <read_current_velocity+0x32>

  velocities.front_left = encoders[FRONT_LEFT].velocity;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	62fb      	str	r3, [r7, #44]	@ 0x2c
  velocities.front_right = encoders[FRONT_RIGHT].velocity;
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	3318      	adds	r3, #24
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	633b      	str	r3, [r7, #48]	@ 0x30
  velocities.rear_left = encoders[REAR_LEFT].velocity;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3330      	adds	r3, #48	@ 0x30
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	637b      	str	r3, [r7, #52]	@ 0x34
  velocities.rear_right = encoders[REAR_RIGHT].velocity;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3348      	adds	r3, #72	@ 0x48
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	63bb      	str	r3, [r7, #56]	@ 0x38

  return velocities;
 800109e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80010a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80010ac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80010ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80010b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80010b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010b4:	ee06 0a10 	vmov	s12, r0
 80010b8:	ee06 1a90 	vmov	s13, r1
 80010bc:	ee07 2a10 	vmov	s14, r2
 80010c0:	ee07 3a90 	vmov	s15, r3
 80010c4:	eeb0 0a46 	vmov.f32	s0, s12
 80010c8:	eef0 0a66 	vmov.f32	s1, s13
 80010cc:	eeb0 1a47 	vmov.f32	s2, s14
 80010d0:	eef0 1a67 	vmov.f32	s3, s15
 80010d4:	3754      	adds	r7, #84	@ 0x54
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd90      	pop	{r4, r7, pc}
	...

080010dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	@ 0x30
 80010e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	4b53      	ldr	r3, [pc, #332]	@ (8001244 <MX_GPIO_Init+0x168>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a52      	ldr	r2, [pc, #328]	@ (8001244 <MX_GPIO_Init+0x168>)
 80010fc:	f043 0304 	orr.w	r3, r3, #4
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b50      	ldr	r3, [pc, #320]	@ (8001244 <MX_GPIO_Init+0x168>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	4b4c      	ldr	r3, [pc, #304]	@ (8001244 <MX_GPIO_Init+0x168>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a4b      	ldr	r2, [pc, #300]	@ (8001244 <MX_GPIO_Init+0x168>)
 8001118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b49      	ldr	r3, [pc, #292]	@ (8001244 <MX_GPIO_Init+0x168>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b45      	ldr	r3, [pc, #276]	@ (8001244 <MX_GPIO_Init+0x168>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a44      	ldr	r2, [pc, #272]	@ (8001244 <MX_GPIO_Init+0x168>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b42      	ldr	r3, [pc, #264]	@ (8001244 <MX_GPIO_Init+0x168>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b3e      	ldr	r3, [pc, #248]	@ (8001244 <MX_GPIO_Init+0x168>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a3d      	ldr	r2, [pc, #244]	@ (8001244 <MX_GPIO_Init+0x168>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4b3b      	ldr	r3, [pc, #236]	@ (8001244 <MX_GPIO_Init+0x168>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	4b37      	ldr	r3, [pc, #220]	@ (8001244 <MX_GPIO_Init+0x168>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a36      	ldr	r2, [pc, #216]	@ (8001244 <MX_GPIO_Init+0x168>)
 800116c:	f043 0310 	orr.w	r3, r3, #16
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b34      	ldr	r3, [pc, #208]	@ (8001244 <MX_GPIO_Init+0x168>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0310 	and.w	r3, r3, #16
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b30      	ldr	r3, [pc, #192]	@ (8001244 <MX_GPIO_Init+0x168>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	4a2f      	ldr	r2, [pc, #188]	@ (8001244 <MX_GPIO_Init+0x168>)
 8001188:	f043 0308 	orr.w	r3, r3, #8
 800118c:	6313      	str	r3, [r2, #48]	@ 0x30
 800118e:	4b2d      	ldr	r3, [pc, #180]	@ (8001244 <MX_GPIO_Init+0x168>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	2180      	movs	r1, #128	@ 0x80
 800119e:	482a      	ldr	r0, [pc, #168]	@ (8001248 <MX_GPIO_Init+0x16c>)
 80011a0:	f002 fe98 	bl	8003ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, C_IN2_Pin|D_IN1_Pin, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2130      	movs	r1, #48	@ 0x30
 80011a8:	4828      	ldr	r0, [pc, #160]	@ (800124c <MX_GPIO_Init+0x170>)
 80011aa:	f002 fe93 	bl	8003ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_IN2_Pin|A_IN1_Pin|LED_4_Pin|LED_3_Pin
 80011ae:	2200      	movs	r2, #0
 80011b0:	f24f 0103 	movw	r1, #61443	@ 0xf003
 80011b4:	4826      	ldr	r0, [pc, #152]	@ (8001250 <MX_GPIO_Init+0x174>)
 80011b6:	f002 fe8d 	bl	8003ed4 <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, B_IN1_Pin|B_IN2_Pin|A_IN2_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 518c 	mov.w	r1, #4480	@ 0x1180
 80011c0:	4824      	ldr	r0, [pc, #144]	@ (8001254 <MX_GPIO_Init+0x178>)
 80011c2:	f002 fe87 	bl	8003ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : C_IN1_Pin */
  GPIO_InitStruct.Pin = C_IN1_Pin;
 80011c6:	2380      	movs	r3, #128	@ 0x80
 80011c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(C_IN1_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	481a      	ldr	r0, [pc, #104]	@ (8001248 <MX_GPIO_Init+0x16c>)
 80011de:	f002 fcdd 	bl	8003b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : C_IN2_Pin D_IN1_Pin */
  GPIO_InitStruct.Pin = C_IN2_Pin|D_IN1_Pin;
 80011e2:	2330      	movs	r3, #48	@ 0x30
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	4619      	mov	r1, r3
 80011f8:	4814      	ldr	r0, [pc, #80]	@ (800124c <MX_GPIO_Init+0x170>)
 80011fa:	f002 fccf 	bl	8003b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : D_IN2_Pin A_IN1_Pin LED_4_Pin LED_3_Pin
                           LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = D_IN2_Pin|A_IN1_Pin|LED_4_Pin|LED_3_Pin
 80011fe:	f24f 0303 	movw	r3, #61443	@ 0xf003
 8001202:	61fb      	str	r3, [r7, #28]
                          |LED_2_Pin|LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4619      	mov	r1, r3
 8001216:	480e      	ldr	r0, [pc, #56]	@ (8001250 <MX_GPIO_Init+0x174>)
 8001218:	f002 fcc0 	bl	8003b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : B_IN1_Pin B_IN2_Pin A_IN2_Pin */
  GPIO_InitStruct.Pin = B_IN1_Pin|B_IN2_Pin|A_IN2_Pin;
 800121c:	f44f 538c 	mov.w	r3, #4480	@ 0x1180
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	4807      	ldr	r0, [pc, #28]	@ (8001254 <MX_GPIO_Init+0x178>)
 8001236:	f002 fcb1 	bl	8003b9c <HAL_GPIO_Init>

}
 800123a:	bf00      	nop
 800123c:	3730      	adds	r7, #48	@ 0x30
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40020000 	.word	0x40020000
 800124c:	40020800 	.word	0x40020800
 8001250:	40020400 	.word	0x40020400
 8001254:	40021000 	.word	0x40021000

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125e:	f002 fb21 	bl	80038a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001262:	f000 f8c9 	bl	80013f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001266:	f7ff ff39 	bl	80010dc <MX_GPIO_Init>
  MX_TIM1_Init();
 800126a:	f001 fe19 	bl	8002ea0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800126e:	f001 fe6f 	bl	8002f50 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001272:	f001 ff03 	bl	800307c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001276:	f001 ff77 	bl	8003168 <MX_TIM4_Init>
  MX_TIM5_Init();
 800127a:	f001 ffc9 	bl	8003210 <MX_TIM5_Init>
  MX_TIM8_Init();
 800127e:	f002 f81b 	bl	80032b8 <MX_TIM8_Init>
  MX_UART4_Init();
 8001282:	f002 fa11 	bl	80036a8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001286:	f002 fa39 	bl	80036fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800128a:	2100      	movs	r1, #0
 800128c:	484d      	ldr	r0, [pc, #308]	@ (80013c4 <main+0x16c>)
 800128e:	f003 fbad 	bl	80049ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001292:	2100      	movs	r1, #0
 8001294:	484c      	ldr	r0, [pc, #304]	@ (80013c8 <main+0x170>)
 8001296:	f003 fba9 	bl	80049ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800129a:	2104      	movs	r1, #4
 800129c:	484a      	ldr	r0, [pc, #296]	@ (80013c8 <main+0x170>)
 800129e:	f003 fba5 	bl	80049ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012a2:	2108      	movs	r1, #8
 80012a4:	4848      	ldr	r0, [pc, #288]	@ (80013c8 <main+0x170>)
 80012a6:	f003 fba1 	bl	80049ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80012aa:	210c      	movs	r1, #12
 80012ac:	4846      	ldr	r0, [pc, #280]	@ (80013c8 <main+0x170>)
 80012ae:	f003 fb9d 	bl	80049ec <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim1);
 80012b2:	4846      	ldr	r0, [pc, #280]	@ (80013cc <main+0x174>)
 80012b4:	f003 fad0 	bl	8004858 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80012b8:	213c      	movs	r1, #60	@ 0x3c
 80012ba:	4844      	ldr	r0, [pc, #272]	@ (80013cc <main+0x174>)
 80012bc:	f003 fd04 	bl	8004cc8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80012c0:	4843      	ldr	r0, [pc, #268]	@ (80013d0 <main+0x178>)
 80012c2:	f003 fac9 	bl	8004858 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80012c6:	213c      	movs	r1, #60	@ 0x3c
 80012c8:	4841      	ldr	r0, [pc, #260]	@ (80013d0 <main+0x178>)
 80012ca:	f003 fcfd 	bl	8004cc8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80012ce:	4841      	ldr	r0, [pc, #260]	@ (80013d4 <main+0x17c>)
 80012d0:	f003 fac2 	bl	8004858 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 80012d4:	213c      	movs	r1, #60	@ 0x3c
 80012d6:	483f      	ldr	r0, [pc, #252]	@ (80013d4 <main+0x17c>)
 80012d8:	f003 fcf6 	bl	8004cc8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 80012dc:	483e      	ldr	r0, [pc, #248]	@ (80013d8 <main+0x180>)
 80012de:	f003 fabb 	bl	8004858 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 80012e2:	213c      	movs	r1, #60	@ 0x3c
 80012e4:	483c      	ldr	r0, [pc, #240]	@ (80013d8 <main+0x180>)
 80012e6:	f003 fcef 	bl	8004cc8 <HAL_TIM_Encoder_Start_IT>

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80012ea:	2201      	movs	r2, #1
 80012ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012f0:	483a      	ldr	r0, [pc, #232]	@ (80013dc <main+0x184>)
 80012f2:	f002 fdef 	bl	8003ed4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012fc:	4837      	ldr	r0, [pc, #220]	@ (80013dc <main+0x184>)
 80012fe:	f002 fde9 	bl	8003ed4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001308:	4834      	ldr	r0, [pc, #208]	@ (80013dc <main+0x184>)
 800130a:	f002 fde3 	bl	8003ed4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 800130e:	2201      	movs	r2, #1
 8001310:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001314:	4831      	ldr	r0, [pc, #196]	@ (80013dc <main+0x184>)
 8001316:	f002 fddd 	bl	8003ed4 <HAL_GPIO_WritePin>
  // TIM2->CCR1 = 10000 / 4;
  // TIM2->CCR2 = 10000 / 4;
  // TIM2->CCR3 = 10000 / 4;
  // TIM2->CCR4 = 10000 / 4;

  TIM3->CCR1 = 1500;
 800131a:	4b31      	ldr	r3, [pc, #196]	@ (80013e0 <main+0x188>)
 800131c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001320:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_Delay(1000);
 8001322:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001326:	f002 fb2f 	bl	8003988 <HAL_Delay>

  test_base_vel.x_vel = 0;
 800132a:	4b2e      	ldr	r3, [pc, #184]	@ (80013e4 <main+0x18c>)
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
  test_base_vel.y_vel = ROBOT_MAX_Y_VELOCITY / 4;
 8001332:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <main+0x18c>)
 8001334:	4a2c      	ldr	r2, [pc, #176]	@ (80013e8 <main+0x190>)
 8001336:	605a      	str	r2, [r3, #4]
  test_base_vel.z_vel = 0;
 8001338:	4b2a      	ldr	r3, [pc, #168]	@ (80013e4 <main+0x18c>)
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  movement_control(test_base_vel);
 8001340:	4b28      	ldr	r3, [pc, #160]	@ (80013e4 <main+0x18c>)
 8001342:	edd3 6a00 	vldr	s13, [r3]
 8001346:	ed93 7a01 	vldr	s14, [r3, #4]
 800134a:	edd3 7a02 	vldr	s15, [r3, #8]
 800134e:	eeb0 0a66 	vmov.f32	s0, s13
 8001352:	eef0 0a47 	vmov.f32	s1, s14
 8001356:	eeb0 1a67 	vmov.f32	s2, s15
 800135a:	f001 fb05 	bl	8002968 <movement_control>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 800135e:	2001      	movs	r0, #1
 8001360:	f002 fb12 	bl	8003988 <HAL_Delay>
    read_current_velocity(encoders);
 8001364:	4821      	ldr	r0, [pc, #132]	@ (80013ec <main+0x194>)
 8001366:	f7ff fe61 	bl	800102c <read_current_velocity>
#if (TEST == 0)
#else
    if (HAL_GetTick() - time_stamp > 5000) {
 800136a:	f002 fb01 	bl	8003970 <HAL_GetTick>
 800136e:	4603      	mov	r3, r0
 8001370:	4a1f      	ldr	r2, [pc, #124]	@ (80013f0 <main+0x198>)
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	1a9b      	subs	r3, r3, r2
 8001376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800137a:	4293      	cmp	r3, r2
 800137c:	d9ef      	bls.n	800135e <main+0x106>
      time_stamp = HAL_GetTick();
 800137e:	f002 faf7 	bl	8003970 <HAL_GetTick>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	4b1a      	ldr	r3, [pc, #104]	@ (80013f0 <main+0x198>)
 8001388:	601a      	str	r2, [r3, #0]
      // HAL_GPIO_TogglePin(A_IN1_GPIO_Port, A_IN1_Pin);
      // HAL_GPIO_TogglePin(A_IN2_GPIO_Port, A_IN2_Pin);
      // HAL_GPIO_TogglePin(B_IN1_GPIO_Port, B_IN1_Pin);
      // HAL_GPIO_TogglePin(B_IN2_GPIO_Port, B_IN2_Pin);
      uint8_t send_buffer[10];
      send_buffer[0] = send_buffer[1] = 0x55;
 800138a:	2355      	movs	r3, #85	@ 0x55
 800138c:	717b      	strb	r3, [r7, #5]
 800138e:	797b      	ldrb	r3, [r7, #5]
 8001390:	713b      	strb	r3, [r7, #4]
      send_buffer[2] = 0x08;
 8001392:	2308      	movs	r3, #8
 8001394:	71bb      	strb	r3, [r7, #6]
      send_buffer[3] = 0x03;
 8001396:	2303      	movs	r3, #3
 8001398:	71fb      	strb	r3, [r7, #7]
      send_buffer[4] = 0x01;
 800139a:	2301      	movs	r3, #1
 800139c:	723b      	strb	r3, [r7, #8]
      send_buffer[5] = 0xE8;
 800139e:	23e8      	movs	r3, #232	@ 0xe8
 80013a0:	727b      	strb	r3, [r7, #9]
      send_buffer[6] = 0x03;
 80013a2:	2303      	movs	r3, #3
 80013a4:	72bb      	strb	r3, [r7, #10]
      send_buffer[7] = 0x01;
 80013a6:	2301      	movs	r3, #1
 80013a8:	72fb      	strb	r3, [r7, #11]
      send_buffer[8] = 0x20;
 80013aa:	2320      	movs	r3, #32
 80013ac:	733b      	strb	r3, [r7, #12]
      send_buffer[9] = 0x03;
 80013ae:	2303      	movs	r3, #3
 80013b0:	737b      	strb	r3, [r7, #13]
      HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
 80013b2:	1d39      	adds	r1, r7, #4
 80013b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013b8:	220a      	movs	r2, #10
 80013ba:	480e      	ldr	r0, [pc, #56]	@ (80013f4 <main+0x19c>)
 80013bc:	f004 fa9e 	bl	80058fc <HAL_UART_Transmit>
    HAL_Delay(1);
 80013c0:	e7cd      	b.n	800135e <main+0x106>
 80013c2:	bf00      	nop
 80013c4:	200001c8 	.word	0x200001c8
 80013c8:	20000180 	.word	0x20000180
 80013cc:	20000138 	.word	0x20000138
 80013d0:	20000210 	.word	0x20000210
 80013d4:	20000258 	.word	0x20000258
 80013d8:	200002a0 	.word	0x200002a0
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40000400 	.word	0x40000400
 80013e4:	20000108 	.word	0x20000108
 80013e8:	3fd8d4fe 	.word	0x3fd8d4fe
 80013ec:	20000000 	.word	0x20000000
 80013f0:	20000104 	.word	0x20000104
 80013f4:	200002e8 	.word	0x200002e8

080013f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b094      	sub	sp, #80	@ 0x50
 80013fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	2230      	movs	r2, #48	@ 0x30
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f004 fe34 	bl	8006074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	4b27      	ldr	r3, [pc, #156]	@ (80014c0 <SystemClock_Config+0xc8>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	4a26      	ldr	r2, [pc, #152]	@ (80014c0 <SystemClock_Config+0xc8>)
 8001426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800142a:	6413      	str	r3, [r2, #64]	@ 0x40
 800142c:	4b24      	ldr	r3, [pc, #144]	@ (80014c0 <SystemClock_Config+0xc8>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	4b21      	ldr	r3, [pc, #132]	@ (80014c4 <SystemClock_Config+0xcc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a20      	ldr	r2, [pc, #128]	@ (80014c4 <SystemClock_Config+0xcc>)
 8001442:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b1e      	ldr	r3, [pc, #120]	@ (80014c4 <SystemClock_Config+0xcc>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001454:	2301      	movs	r3, #1
 8001456:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001458:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145e:	2302      	movs	r3, #2
 8001460:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001462:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001466:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001468:	2319      	movs	r3, #25
 800146a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800146c:	23a8      	movs	r3, #168	@ 0xa8
 800146e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001470:	2304      	movs	r3, #4
 8001472:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001474:	2304      	movs	r3, #4
 8001476:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001478:	f107 0320 	add.w	r3, r7, #32
 800147c:	4618      	mov	r0, r3
 800147e:	f002 fd43 	bl	8003f08 <HAL_RCC_OscConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001488:	f000 f81e 	bl	80014c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148c:	230f      	movs	r3, #15
 800148e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001490:	2302      	movs	r3, #2
 8001492:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	2101      	movs	r1, #1
 80014a6:	4618      	mov	r0, r3
 80014a8:	f002 ffa6 	bl	80043f8 <HAL_RCC_ClockConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80014b2:	f000 f809 	bl	80014c8 <Error_Handler>
  }
}
 80014b6:	bf00      	nop
 80014b8:	3750      	adds	r7, #80	@ 0x50
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40007000 	.word	0x40007000

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
}
 80014ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <Error_Handler+0x8>
 80014d4:	0000      	movs	r0, r0
	...

080014d8 <base2wheel>:
#include "movement.h"

extern WheelPWM test_pwm;
extern WheelVelocity test_wheel_vel;

WheelVelocity base2wheel(BaseVelocity base_vel) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b094      	sub	sp, #80	@ 0x50
 80014dc:	af00      	add	r7, sp, #0
 80014de:	eef0 6a40 	vmov.f32	s13, s0
 80014e2:	eeb0 7a60 	vmov.f32	s14, s1
 80014e6:	eef0 7a41 	vmov.f32	s15, s2
 80014ea:	edc7 6a05 	vstr	s13, [r7, #20]
 80014ee:	ed87 7a06 	vstr	s14, [r7, #24]
 80014f2:	edc7 7a07 	vstr	s15, [r7, #28]
  float front_left = 0, front_right = 0, rear_left = 0, rear_right = 0;
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	647b      	str	r3, [r7, #68]	@ 0x44
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	643b      	str	r3, [r7, #64]	@ 0x40
  if (base_vel.z_vel == 0) {
 800150e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001512:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151a:	f040 809d 	bne.w	8001658 <base2wheel+0x180>
    front_left = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 800151e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001522:	edd7 7a05 	vldr	s15, [r7, #20]
 8001526:	ee27 7a27 	vmul.f32	s14, s14, s15
 800152a:	edd7 6a06 	vldr	s13, [r7, #24]
 800152e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153a:	ee17 0a90 	vmov	r0, s15
 800153e:	f7fe ffa7 	bl	8000490 <__aeabi_f2d>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	ec43 2b10 	vmov	d0, r2, r3
 800154a:	f004 fe8f 	bl	800626c <sqrt>
 800154e:	ec51 0b10 	vmov	r0, r1, d0
 8001552:	a38b      	add	r3, pc, #556	@ (adr r3, 8001780 <base2wheel+0x2a8>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff f91c 	bl	8000794 <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f7ff fae4 	bl	8000b30 <__aeabi_d2f>
 8001568:	4603      	mov	r3, r0
 800156a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    front_right = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 800156c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001570:	edd7 7a05 	vldr	s15, [r7, #20]
 8001574:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001578:	edd7 6a06 	vldr	s13, [r7, #24]
 800157c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001580:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001588:	ee17 0a90 	vmov	r0, s15
 800158c:	f7fe ff80 	bl	8000490 <__aeabi_f2d>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	ec43 2b10 	vmov	d0, r2, r3
 8001598:	f004 fe68 	bl	800626c <sqrt>
 800159c:	ec51 0b10 	vmov	r0, r1, d0
 80015a0:	a377      	add	r3, pc, #476	@ (adr r3, 8001780 <base2wheel+0x2a8>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7ff f8f5 	bl	8000794 <__aeabi_ddiv>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	f7ff fabd 	bl	8000b30 <__aeabi_d2f>
 80015b6:	4603      	mov	r3, r0
 80015b8:	64bb      	str	r3, [r7, #72]	@ 0x48
    rear_left = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 80015ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80015be:	edd7 7a05 	vldr	s15, [r7, #20]
 80015c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c6:	edd7 6a06 	vldr	s13, [r7, #24]
 80015ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80015ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d6:	ee17 0a90 	vmov	r0, s15
 80015da:	f7fe ff59 	bl	8000490 <__aeabi_f2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	ec43 2b10 	vmov	d0, r2, r3
 80015e6:	f004 fe41 	bl	800626c <sqrt>
 80015ea:	ec51 0b10 	vmov	r0, r1, d0
 80015ee:	a364      	add	r3, pc, #400	@ (adr r3, 8001780 <base2wheel+0x2a8>)
 80015f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f4:	f7ff f8ce 	bl	8000794 <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff fa96 	bl	8000b30 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	647b      	str	r3, [r7, #68]	@ 0x44
    rear_right = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 8001608:	ed97 7a05 	vldr	s14, [r7, #20]
 800160c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001610:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001614:	edd7 6a06 	vldr	s13, [r7, #24]
 8001618:	edd7 7a06 	vldr	s15, [r7, #24]
 800161c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001624:	ee17 0a90 	vmov	r0, s15
 8001628:	f7fe ff32 	bl	8000490 <__aeabi_f2d>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	ec43 2b10 	vmov	d0, r2, r3
 8001634:	f004 fe1a 	bl	800626c <sqrt>
 8001638:	ec51 0b10 	vmov	r0, r1, d0
 800163c:	a350      	add	r3, pc, #320	@ (adr r3, 8001780 <base2wheel+0x2a8>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	f7ff f8a7 	bl	8000794 <__aeabi_ddiv>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f7ff fa6f 	bl	8000b30 <__aeabi_d2f>
 8001652:	4603      	mov	r3, r0
 8001654:	643b      	str	r3, [r7, #64]	@ 0x40
 8001656:	e04d      	b.n	80016f4 <base2wheel+0x21c>
  } else {
    front_left = base_vel.z_vel / RADIUS_WHEEL;
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff18 	bl	8000490 <__aeabi_f2d>
 8001660:	a347      	add	r3, pc, #284	@ (adr r3, 8001780 <base2wheel+0x2a8>)
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	f7ff f895 	bl	8000794 <__aeabi_ddiv>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	f7ff fa5d 	bl	8000b30 <__aeabi_d2f>
 8001676:	4603      	mov	r3, r0
 8001678:	64fb      	str	r3, [r7, #76]	@ 0x4c
    front_right = -base_vel.z_vel / RADIUS_WHEEL;
 800167a:	edd7 7a07 	vldr	s15, [r7, #28]
 800167e:	eef1 7a67 	vneg.f32	s15, s15
 8001682:	ee17 3a90 	vmov	r3, s15
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ff02 	bl	8000490 <__aeabi_f2d>
 800168c:	a33c      	add	r3, pc, #240	@ (adr r3, 8001780 <base2wheel+0x2a8>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	f7ff f87f 	bl	8000794 <__aeabi_ddiv>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	f7ff fa47 	bl	8000b30 <__aeabi_d2f>
 80016a2:	4603      	mov	r3, r0
 80016a4:	64bb      	str	r3, [r7, #72]	@ 0x48
    rear_left = base_vel.z_vel / RADIUS_WHEEL;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe fef1 	bl	8000490 <__aeabi_f2d>
 80016ae:	a334      	add	r3, pc, #208	@ (adr r3, 8001780 <base2wheel+0x2a8>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7ff f86e 	bl	8000794 <__aeabi_ddiv>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f7ff fa36 	bl	8000b30 <__aeabi_d2f>
 80016c4:	4603      	mov	r3, r0
 80016c6:	647b      	str	r3, [r7, #68]	@ 0x44
    rear_right = -base_vel.z_vel / RADIUS_WHEEL;
 80016c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80016cc:	eef1 7a67 	vneg.f32	s15, s15
 80016d0:	ee17 3a90 	vmov	r3, s15
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fedb 	bl	8000490 <__aeabi_f2d>
 80016da:	a329      	add	r3, pc, #164	@ (adr r3, 8001780 <base2wheel+0x2a8>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7ff f858 	bl	8000794 <__aeabi_ddiv>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff fa20 	bl	8000b30 <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	643b      	str	r3, [r7, #64]	@ 0x40
  }
  if (base_vel.x_vel < 0 || base_vel.y_vel < 0) {
 80016f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001700:	d406      	bmi.n	8001710 <base2wheel+0x238>
 8001702:	edd7 7a06 	vldr	s15, [r7, #24]
 8001706:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170e:	d517      	bpl.n	8001740 <base2wheel+0x268>
    front_left = -front_left;
 8001710:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001714:	eef1 7a67 	vneg.f32	s15, s15
 8001718:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    front_right = -front_right;
 800171c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001720:	eef1 7a67 	vneg.f32	s15, s15
 8001724:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    rear_left = -rear_left;
 8001728:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800172c:	eef1 7a67 	vneg.f32	s15, s15
 8001730:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    rear_right = -rear_right;
 8001734:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001738:	eef1 7a67 	vneg.f32	s15, s15
 800173c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  }
  return (WheelVelocity){front_left, front_right, rear_left, rear_right};
 8001740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001742:	633b      	str	r3, [r7, #48]	@ 0x30
 8001744:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001746:	637b      	str	r3, [r7, #52]	@ 0x34
 8001748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800174a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800174c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800174e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001750:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001752:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001754:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001758:	ee06 0a10 	vmov	s12, r0
 800175c:	ee06 1a90 	vmov	s13, r1
 8001760:	ee07 2a10 	vmov	s14, r2
 8001764:	ee07 3a90 	vmov	s15, r3
}
 8001768:	eeb0 0a46 	vmov.f32	s0, s12
 800176c:	eef0 0a66 	vmov.f32	s1, s13
 8001770:	eeb0 1a47 	vmov.f32	s2, s14
 8001774:	eef0 1a67 	vmov.f32	s3, s15
 8001778:	3750      	adds	r7, #80	@ 0x50
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	020c49ba 	.word	0x020c49ba
 8001784:	3f96872b 	.word	0x3f96872b

08001788 <wheel2pwm>:
  // float y_vel = (-wheel_vel.front_left + wheel_vel.front_right + wheel_vel.rear_left - wheel_vel.rear_right) * RADIUS_WHEEL / 4.0;
  // float z_vel = (-wheel_vel.front_left + wheel_vel.front_right - wheel_vel.rear_left + wheel_vel.rear_right) * RADIUS_WHEEL / (4.0 * (LENGTH_CENTER_WHEEL_X + LENGTH_CENTER_WHEEL_Y));
  // return (BaseVelocity){x_vel, y_vel, z_vel};
}

WheelPWM wheel2pwm(WheelVelocity wheel_vel) {
 8001788:	b5b0      	push	{r4, r5, r7, lr}
 800178a:	b08e      	sub	sp, #56	@ 0x38
 800178c:	af00      	add	r7, sp, #0
 800178e:	6178      	str	r0, [r7, #20]
 8001790:	eeb0 6a40 	vmov.f32	s12, s0
 8001794:	eef0 6a60 	vmov.f32	s13, s1
 8001798:	eeb0 7a41 	vmov.f32	s14, s2
 800179c:	eef0 7a61 	vmov.f32	s15, s3
 80017a0:	ed87 6a01 	vstr	s12, [r7, #4]
 80017a4:	edc7 6a02 	vstr	s13, [r7, #8]
 80017a8:	ed87 7a03 	vstr	s14, [r7, #12]
 80017ac:	edc7 7a04 	vstr	s15, [r7, #16]
  int front_left = (int)(wheel_vel.front_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * FL_MOTOR_ARR / 100.0);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fe6c 	bl	8000490 <__aeabi_f2d>
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	4b92      	ldr	r3, [pc, #584]	@ (8001a08 <wheel2pwm+0x280>)
 80017be:	f7fe febf 	bl	8000540 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	a38b      	add	r3, pc, #556	@ (adr r3, 80019f8 <wheel2pwm+0x270>)
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	f7fe ffe0 	bl	8000794 <__aeabi_ddiv>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	a388      	add	r3, pc, #544	@ (adr r3, 8001a00 <wheel2pwm+0x278>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7fe ffd7 	bl	8000794 <__aeabi_ddiv>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	4b86      	ldr	r3, [pc, #536]	@ (8001a0c <wheel2pwm+0x284>)
 80017f4:	f7fe fea4 	bl	8000540 <__aeabi_dmul>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4614      	mov	r4, r2
 80017fe:	461d      	mov	r5, r3
 8001800:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fe20 	bl	800044c <__aeabi_ui2d>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4620      	mov	r0, r4
 8001812:	4629      	mov	r1, r5
 8001814:	f7fe fe94 	bl	8000540 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	4b79      	ldr	r3, [pc, #484]	@ (8001a0c <wheel2pwm+0x284>)
 8001826:	f7fe ffb5 	bl	8000794 <__aeabi_ddiv>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	f7ff f935 	bl	8000aa0 <__aeabi_d2iz>
 8001836:	4603      	mov	r3, r0
 8001838:	637b      	str	r3, [r7, #52]	@ 0x34
  int front_right = (int)(wheel_vel.front_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * FR_MOTOR_ARR / 100.0);
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fe27 	bl	8000490 <__aeabi_f2d>
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	4b70      	ldr	r3, [pc, #448]	@ (8001a08 <wheel2pwm+0x280>)
 8001848:	f7fe fe7a 	bl	8000540 <__aeabi_dmul>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	a368      	add	r3, pc, #416	@ (adr r3, 80019f8 <wheel2pwm+0x270>)
 8001856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185a:	f7fe ff9b 	bl	8000794 <__aeabi_ddiv>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	a366      	add	r3, pc, #408	@ (adr r3, 8001a00 <wheel2pwm+0x278>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe ff92 	bl	8000794 <__aeabi_ddiv>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	4b63      	ldr	r3, [pc, #396]	@ (8001a0c <wheel2pwm+0x284>)
 800187e:	f7fe fe5f 	bl	8000540 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4614      	mov	r4, r2
 8001888:	461d      	mov	r5, r3
 800188a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800188e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fddb 	bl	800044c <__aeabi_ui2d>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f7fe fe4f 	bl	8000540 <__aeabi_dmul>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	4b57      	ldr	r3, [pc, #348]	@ (8001a0c <wheel2pwm+0x284>)
 80018b0:	f7fe ff70 	bl	8000794 <__aeabi_ddiv>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	f7ff f8f0 	bl	8000aa0 <__aeabi_d2iz>
 80018c0:	4603      	mov	r3, r0
 80018c2:	633b      	str	r3, [r7, #48]	@ 0x30
  int rear_left = (int)(wheel_vel.rear_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RL_MOTOR_ARR / 100.0);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fde2 	bl	8000490 <__aeabi_f2d>
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001a08 <wheel2pwm+0x280>)
 80018d2:	f7fe fe35 	bl	8000540 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	a346      	add	r3, pc, #280	@ (adr r3, 80019f8 <wheel2pwm+0x270>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe ff56 	bl	8000794 <__aeabi_ddiv>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	a343      	add	r3, pc, #268	@ (adr r3, 8001a00 <wheel2pwm+0x278>)
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	f7fe ff4d 	bl	8000794 <__aeabi_ddiv>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	4b41      	ldr	r3, [pc, #260]	@ (8001a0c <wheel2pwm+0x284>)
 8001908:	f7fe fe1a 	bl	8000540 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4614      	mov	r4, r2
 8001912:	461d      	mov	r5, r3
 8001914:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fd96 	bl	800044c <__aeabi_ui2d>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4620      	mov	r0, r4
 8001926:	4629      	mov	r1, r5
 8001928:	f7fe fe0a 	bl	8000540 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	4b34      	ldr	r3, [pc, #208]	@ (8001a0c <wheel2pwm+0x284>)
 800193a:	f7fe ff2b 	bl	8000794 <__aeabi_ddiv>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	f7ff f8ab 	bl	8000aa0 <__aeabi_d2iz>
 800194a:	4603      	mov	r3, r0
 800194c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int rear_right = (int)(wheel_vel.rear_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RR_MOTOR_ARR / 100.0);
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fd9d 	bl	8000490 <__aeabi_f2d>
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	4b2b      	ldr	r3, [pc, #172]	@ (8001a08 <wheel2pwm+0x280>)
 800195c:	f7fe fdf0 	bl	8000540 <__aeabi_dmul>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	a323      	add	r3, pc, #140	@ (adr r3, 80019f8 <wheel2pwm+0x270>)
 800196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196e:	f7fe ff11 	bl	8000794 <__aeabi_ddiv>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	a321      	add	r3, pc, #132	@ (adr r3, 8001a00 <wheel2pwm+0x278>)
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	f7fe ff08 	bl	8000794 <__aeabi_ddiv>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	4b1e      	ldr	r3, [pc, #120]	@ (8001a0c <wheel2pwm+0x284>)
 8001992:	f7fe fdd5 	bl	8000540 <__aeabi_dmul>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4614      	mov	r4, r2
 800199c:	461d      	mov	r5, r3
 800199e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fd51 	bl	800044c <__aeabi_ui2d>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4620      	mov	r0, r4
 80019b0:	4629      	mov	r1, r5
 80019b2:	f7fe fdc5 	bl	8000540 <__aeabi_dmul>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <wheel2pwm+0x284>)
 80019c4:	f7fe fee6 	bl	8000794 <__aeabi_ddiv>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff f866 	bl	8000aa0 <__aeabi_d2iz>
 80019d4:	4603      	mov	r3, r0
 80019d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (WheelPWM){front_left, front_right, rear_left, rear_right};
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019ee:	60da      	str	r2, [r3, #12]
}
 80019f0:	6978      	ldr	r0, [r7, #20]
 80019f2:	3738      	adds	r7, #56	@ 0x38
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bdb0      	pop	{r4, r5, r7, pc}
 80019f8:	54442d18 	.word	0x54442d18
 80019fc:	401921fb 	.word	0x401921fb
 8001a00:	c473d1cb 	.word	0xc473d1cb
 8001a04:	40b069b0 	.word	0x40b069b0
 8001a08:	404e0000 	.word	0x404e0000
 8001a0c:	40590000 	.word	0x40590000

08001a10 <wheel_control>:

void wheel_control(Wheel wheel, int speed) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
  if (speed > 10000)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001a22:	4293      	cmp	r3, r2
 8001a24:	dd03      	ble.n	8001a2e <wheel_control+0x1e>
    speed = 10000;
 8001a26:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	e005      	b.n	8001a3a <wheel_control+0x2a>
  else if (speed < -10000)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	4a84      	ldr	r2, [pc, #528]	@ (8001c44 <wheel_control+0x234>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	da01      	bge.n	8001a3a <wheel_control+0x2a>
    speed = -10000;
 8001a36:	4b83      	ldr	r3, [pc, #524]	@ (8001c44 <wheel_control+0x234>)
 8001a38:	603b      	str	r3, [r7, #0]

  switch (wheel) {
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	f200 80cd 	bhi.w	8001bdc <wheel_control+0x1cc>
 8001a42:	a201      	add	r2, pc, #4	@ (adr r2, 8001a48 <wheel_control+0x38>)
 8001a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a48:	08001a59 	.word	0x08001a59
 8001a4c:	08001ab7 	.word	0x08001ab7
 8001a50:	08001b1b 	.word	0x08001b1b
 8001a54:	08001b79 	.word	0x08001b79
    case FRONT_LEFT:
      if (speed < 0) {
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	da0a      	bge.n	8001a74 <wheel_control+0x64>
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = speed;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2180      	movs	r1, #128	@ 0x80
 8001a62:	4879      	ldr	r0, [pc, #484]	@ (8001c48 <wheel_control+0x238>)
 8001a64:	f002 fa36 	bl	8003ed4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_SET);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	2110      	movs	r1, #16
 8001a6c:	4877      	ldr	r0, [pc, #476]	@ (8001c4c <wheel_control+0x23c>)
 8001a6e:	f002 fa31 	bl	8003ed4 <HAL_GPIO_WritePin>
 8001a72:	e017      	b.n	8001aa4 <wheel_control+0x94>
      } else if (speed > 0) {
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	dd0a      	ble.n	8001a90 <wheel_control+0x80>
        // FL_MOTOR_A_CCR = -speed;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_SET);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	2180      	movs	r1, #128	@ 0x80
 8001a7e:	4872      	ldr	r0, [pc, #456]	@ (8001c48 <wheel_control+0x238>)
 8001a80:	f002 fa28 	bl	8003ed4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2110      	movs	r1, #16
 8001a88:	4870      	ldr	r0, [pc, #448]	@ (8001c4c <wheel_control+0x23c>)
 8001a8a:	f002 fa23 	bl	8003ed4 <HAL_GPIO_WritePin>
 8001a8e:	e009      	b.n	8001aa4 <wheel_control+0x94>
      } else {
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2180      	movs	r1, #128	@ 0x80
 8001a94:	486c      	ldr	r0, [pc, #432]	@ (8001c48 <wheel_control+0x238>)
 8001a96:	f002 fa1d 	bl	8003ed4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2110      	movs	r1, #16
 8001a9e:	486b      	ldr	r0, [pc, #428]	@ (8001c4c <wheel_control+0x23c>)
 8001aa0:	f002 fa18 	bl	8003ed4 <HAL_GPIO_WritePin>
      }
      FL_MOTOR_CCR = abs(speed);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001aaa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001aae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ab2:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 8001ab4:	e0c1      	b.n	8001c3a <wheel_control+0x22a>
    case FRONT_RIGHT:
      if (speed > 0) {
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	dd0b      	ble.n	8001ad4 <wheel_control+0xc4>
        // FR_MOTOR_B_CCR = speed;
        // FR_MOTOR_A_CCR = 0;
        HAL_GPIO_WritePin(B_IN1_GPIO_Port, B_IN1_Pin, GPIO_PIN_RESET);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2180      	movs	r1, #128	@ 0x80
 8001ac0:	4863      	ldr	r0, [pc, #396]	@ (8001c50 <wheel_control+0x240>)
 8001ac2:	f002 fa07 	bl	8003ed4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B_IN2_GPIO_Port, B_IN2_Pin, GPIO_PIN_SET);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001acc:	4860      	ldr	r0, [pc, #384]	@ (8001c50 <wheel_control+0x240>)
 8001ace:	f002 fa01 	bl	8003ed4 <HAL_GPIO_WritePin>
 8001ad2:	e019      	b.n	8001b08 <wheel_control+0xf8>
      } else if (speed < 0) {
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	da0b      	bge.n	8001af2 <wheel_control+0xe2>
        // FR_MOTOR_B_CCR = 0;
        // FR_MOTOR_A_CCR = -speed;
        HAL_GPIO_WritePin(B_IN1_GPIO_Port, B_IN1_Pin, GPIO_PIN_SET);
 8001ada:	2201      	movs	r2, #1
 8001adc:	2180      	movs	r1, #128	@ 0x80
 8001ade:	485c      	ldr	r0, [pc, #368]	@ (8001c50 <wheel_control+0x240>)
 8001ae0:	f002 f9f8 	bl	8003ed4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B_IN2_GPIO_Port, B_IN2_Pin, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001aea:	4859      	ldr	r0, [pc, #356]	@ (8001c50 <wheel_control+0x240>)
 8001aec:	f002 f9f2 	bl	8003ed4 <HAL_GPIO_WritePin>
 8001af0:	e00a      	b.n	8001b08 <wheel_control+0xf8>
      } else {
        // FR_MOTOR_A_CCR = 0;
        // FR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(B_IN1_GPIO_Port, B_IN1_Pin, GPIO_PIN_RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2180      	movs	r1, #128	@ 0x80
 8001af6:	4856      	ldr	r0, [pc, #344]	@ (8001c50 <wheel_control+0x240>)
 8001af8:	f002 f9ec 	bl	8003ed4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B_IN2_GPIO_Port, B_IN2_Pin, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b02:	4853      	ldr	r0, [pc, #332]	@ (8001c50 <wheel_control+0x240>)
 8001b04:	f002 f9e6 	bl	8003ed4 <HAL_GPIO_WritePin>
      }
      FR_MOTOR_CCR = abs(speed);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001b0e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001b12:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b16:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8001b18:	e08f      	b.n	8001c3a <wheel_control+0x22a>
    case REAR_LEFT:
      if (speed > 0) {
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	dd0a      	ble.n	8001b36 <wheel_control+0x126>
        // RL_MOTOR_B_CCR = 0;
        // RL_MOTOR_A_CCR = speed;
        HAL_GPIO_WritePin(D_IN1_GPIO_Port, D_IN1_Pin, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2120      	movs	r1, #32
 8001b24:	4849      	ldr	r0, [pc, #292]	@ (8001c4c <wheel_control+0x23c>)
 8001b26:	f002 f9d5 	bl	8003ed4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D_IN2_GPIO_Port, D_IN2_Pin, GPIO_PIN_SET);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	4849      	ldr	r0, [pc, #292]	@ (8001c54 <wheel_control+0x244>)
 8001b30:	f002 f9d0 	bl	8003ed4 <HAL_GPIO_WritePin>
 8001b34:	e017      	b.n	8001b66 <wheel_control+0x156>
      } else if (speed < 0) {
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	da0a      	bge.n	8001b52 <wheel_control+0x142>
        // RL_MOTOR_B_CCR = -speed;
        // RL_MOTOR_A_CCR = 0;
        HAL_GPIO_WritePin(D_IN1_GPIO_Port, D_IN1_Pin, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2120      	movs	r1, #32
 8001b40:	4842      	ldr	r0, [pc, #264]	@ (8001c4c <wheel_control+0x23c>)
 8001b42:	f002 f9c7 	bl	8003ed4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D_IN2_GPIO_Port, D_IN2_Pin, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2101      	movs	r1, #1
 8001b4a:	4842      	ldr	r0, [pc, #264]	@ (8001c54 <wheel_control+0x244>)
 8001b4c:	f002 f9c2 	bl	8003ed4 <HAL_GPIO_WritePin>
 8001b50:	e009      	b.n	8001b66 <wheel_control+0x156>
      } else {
        // RL_MOTOR_A_CCR = 0;
        // RL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(D_IN1_GPIO_Port, D_IN1_Pin, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2120      	movs	r1, #32
 8001b56:	483d      	ldr	r0, [pc, #244]	@ (8001c4c <wheel_control+0x23c>)
 8001b58:	f002 f9bc 	bl	8003ed4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D_IN2_GPIO_Port, D_IN2_Pin, GPIO_PIN_RESET);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2101      	movs	r1, #1
 8001b60:	483c      	ldr	r0, [pc, #240]	@ (8001c54 <wheel_control+0x244>)
 8001b62:	f002 f9b7 	bl	8003ed4 <HAL_GPIO_WritePin>
      }
      RL_MOTOR_CCR = abs(speed);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001b6c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001b70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b74:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
 8001b76:	e060      	b.n	8001c3a <wheel_control+0x22a>
    case REAR_RIGHT:
      if (speed > 0) {
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	dd0b      	ble.n	8001b96 <wheel_control+0x186>
        // RR_MOTOR_A_CCR = speed;
        // RR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(A_IN1_GPIO_Port, A_IN1_Pin, GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2102      	movs	r1, #2
 8001b82:	4834      	ldr	r0, [pc, #208]	@ (8001c54 <wheel_control+0x244>)
 8001b84:	f002 f9a6 	bl	8003ed4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(A_IN2_GPIO_Port, A_IN2_Pin, GPIO_PIN_SET);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b8e:	4830      	ldr	r0, [pc, #192]	@ (8001c50 <wheel_control+0x240>)
 8001b90:	f002 f9a0 	bl	8003ed4 <HAL_GPIO_WritePin>
 8001b94:	e019      	b.n	8001bca <wheel_control+0x1ba>
      } else if (speed < 0) {
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	da0b      	bge.n	8001bb4 <wheel_control+0x1a4>
        // RR_MOTOR_A_CCR = 0;
        // RR_MOTOR_B_CCR = -speed;
        HAL_GPIO_WritePin(A_IN1_GPIO_Port, A_IN1_Pin, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2102      	movs	r1, #2
 8001ba0:	482c      	ldr	r0, [pc, #176]	@ (8001c54 <wheel_control+0x244>)
 8001ba2:	f002 f997 	bl	8003ed4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(A_IN2_GPIO_Port, A_IN2_Pin, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bac:	4828      	ldr	r0, [pc, #160]	@ (8001c50 <wheel_control+0x240>)
 8001bae:	f002 f991 	bl	8003ed4 <HAL_GPIO_WritePin>
 8001bb2:	e00a      	b.n	8001bca <wheel_control+0x1ba>
      } else {
        // RR_MOTOR_A_CCR = 0;
        // RR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(A_IN1_GPIO_Port, A_IN1_Pin, GPIO_PIN_RESET);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	4826      	ldr	r0, [pc, #152]	@ (8001c54 <wheel_control+0x244>)
 8001bba:	f002 f98b 	bl	8003ed4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(A_IN2_GPIO_Port, A_IN2_Pin, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bc4:	4822      	ldr	r0, [pc, #136]	@ (8001c50 <wheel_control+0x240>)
 8001bc6:	f002 f985 	bl	8003ed4 <HAL_GPIO_WritePin>
      }
      RR_MOTOR_CCR = abs(speed);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001bd0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001bd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bd8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8001bda:	e02e      	b.n	8001c3a <wheel_control+0x22a>
    default:
      if (speed < 0) {
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	da0a      	bge.n	8001bf8 <wheel_control+0x1e8>
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = speed;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_RESET);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2180      	movs	r1, #128	@ 0x80
 8001be6:	4818      	ldr	r0, [pc, #96]	@ (8001c48 <wheel_control+0x238>)
 8001be8:	f002 f974 	bl	8003ed4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_SET);
 8001bec:	2201      	movs	r2, #1
 8001bee:	2110      	movs	r1, #16
 8001bf0:	4816      	ldr	r0, [pc, #88]	@ (8001c4c <wheel_control+0x23c>)
 8001bf2:	f002 f96f 	bl	8003ed4 <HAL_GPIO_WritePin>
 8001bf6:	e017      	b.n	8001c28 <wheel_control+0x218>
      } else if (speed > 0) {
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	dd0a      	ble.n	8001c14 <wheel_control+0x204>
        // FL_MOTOR_A_CCR = -speed;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_SET);
 8001bfe:	2201      	movs	r2, #1
 8001c00:	2180      	movs	r1, #128	@ 0x80
 8001c02:	4811      	ldr	r0, [pc, #68]	@ (8001c48 <wheel_control+0x238>)
 8001c04:	f002 f966 	bl	8003ed4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2110      	movs	r1, #16
 8001c0c:	480f      	ldr	r0, [pc, #60]	@ (8001c4c <wheel_control+0x23c>)
 8001c0e:	f002 f961 	bl	8003ed4 <HAL_GPIO_WritePin>
 8001c12:	e009      	b.n	8001c28 <wheel_control+0x218>
      } else {
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_RESET);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2180      	movs	r1, #128	@ 0x80
 8001c18:	480b      	ldr	r0, [pc, #44]	@ (8001c48 <wheel_control+0x238>)
 8001c1a:	f002 f95b 	bl	8003ed4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2110      	movs	r1, #16
 8001c22:	480a      	ldr	r0, [pc, #40]	@ (8001c4c <wheel_control+0x23c>)
 8001c24:	f002 f956 	bl	8003ed4 <HAL_GPIO_WritePin>
      }
      FL_MOTOR_CCR = abs(speed);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001c2e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001c32:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c36:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 8001c38:	bf00      	nop
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	ffffd8f0 	.word	0xffffd8f0
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40020400 	.word	0x40020400

08001c58 <wheels_control>:

void wheels_control(WheelPWM pwm) {
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	463c      	mov	r4, r7
 8001c60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  wheel_control(FRONT_LEFT, pwm.front_left);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	4619      	mov	r1, r3
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f7ff fed1 	bl	8001a10 <wheel_control>
  wheel_control(FRONT_RIGHT, pwm.front_right);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4619      	mov	r1, r3
 8001c72:	2001      	movs	r0, #1
 8001c74:	f7ff fecc 	bl	8001a10 <wheel_control>
  wheel_control(REAR_LEFT, pwm.rear_left);
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	2002      	movs	r0, #2
 8001c7e:	f7ff fec7 	bl	8001a10 <wheel_control>
  wheel_control(REAR_RIGHT, pwm.rear_right);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4619      	mov	r1, r3
 8001c86:	2003      	movs	r0, #3
 8001c88:	f7ff fec2 	bl	8001a10 <wheel_control>
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd90      	pop	{r4, r7, pc}
 8001c94:	0000      	movs	r0, r0
	...

08001c98 <rotate_motor>:

void rotate_motor(BaseVelocity base_vel) {
 8001c98:	b5b0      	push	{r4, r5, r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	eef0 6a40 	vmov.f32	s13, s0
 8001ca2:	eeb0 7a60 	vmov.f32	s14, s1
 8001ca6:	eef0 7a41 	vmov.f32	s15, s2
 8001caa:	edc7 6a01 	vstr	s13, [r7, #4]
 8001cae:	ed87 7a02 	vstr	s14, [r7, #8]
 8001cb2:	edc7 7a03 	vstr	s15, [r7, #12]
  if (base_vel.z_vel != 0) {
 8001cb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cba:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc2:	d075      	beq.n	8001db0 <rotate_motor+0x118>
    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(45), SHORTEST_TIME_ROTATE(1, 45));
 8001cc4:	4bd6      	ldr	r3, [pc, #856]	@ (8002020 <rotate_motor+0x388>)
 8001cc6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cca:	3b2d      	subs	r3, #45	@ 0x2d
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bfb8      	it	lt
 8001cd0:	425b      	neglt	r3, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fbca 	bl	800046c <__aeabi_i2d>
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	4bd1      	ldr	r3, [pc, #836]	@ (8002024 <rotate_motor+0x38c>)
 8001cde:	f7fe fc2f 	bl	8000540 <__aeabi_dmul>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f7fe ff01 	bl	8000af0 <__aeabi_d2uiz>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f44f 712d 	mov.w	r1, #692	@ 0x2b4
 8001cf8:	48c9      	ldr	r0, [pc, #804]	@ (8002020 <rotate_motor+0x388>)
 8001cfa:	f000 fefd 	bl	8002af8 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(-45), SHORTEST_TIME_ROTATE(2, -45));
 8001cfe:	4bc8      	ldr	r3, [pc, #800]	@ (8002020 <rotate_motor+0x388>)
 8001d00:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d04:	332d      	adds	r3, #45	@ 0x2d
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bfb8      	it	lt
 8001d0a:	425b      	neglt	r3, r3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fbad 	bl	800046c <__aeabi_i2d>
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	4bc3      	ldr	r3, [pc, #780]	@ (8002024 <rotate_motor+0x38c>)
 8001d18:	f7fe fc12 	bl	8000540 <__aeabi_dmul>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	f7fe fee4 	bl	8000af0 <__aeabi_d2uiz>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8001d32:	48bd      	ldr	r0, [pc, #756]	@ (8002028 <rotate_motor+0x390>)
 8001d34:	f000 fee0 	bl	8002af8 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(45), SHORTEST_TIME_ROTATE(3, 45));
 8001d38:	4bb9      	ldr	r3, [pc, #740]	@ (8002020 <rotate_motor+0x388>)
 8001d3a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001d3e:	3b2d      	subs	r3, #45	@ 0x2d
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	bfb8      	it	lt
 8001d44:	425b      	neglt	r3, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fb90 	bl	800046c <__aeabi_i2d>
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	4bb4      	ldr	r3, [pc, #720]	@ (8002024 <rotate_motor+0x38c>)
 8001d52:	f7fe fbf5 	bl	8000540 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f7fe fec7 	bl	8000af0 <__aeabi_d2uiz>
 8001d62:	4603      	mov	r3, r0
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	461a      	mov	r2, r3
 8001d68:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 8001d6c:	48af      	ldr	r0, [pc, #700]	@ (800202c <rotate_motor+0x394>)
 8001d6e:	f000 fec3 	bl	8002af8 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(-45), SHORTEST_TIME_ROTATE(4, -45));
 8001d72:	4bab      	ldr	r3, [pc, #684]	@ (8002020 <rotate_motor+0x388>)
 8001d74:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d78:	332d      	adds	r3, #45	@ 0x2d
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	bfb8      	it	lt
 8001d7e:	425b      	neglt	r3, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fb73 	bl	800046c <__aeabi_i2d>
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	4ba6      	ldr	r3, [pc, #664]	@ (8002024 <rotate_motor+0x38c>)
 8001d8c:	f7fe fbd8 	bl	8000540 <__aeabi_dmul>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	f7fe feaa 	bl	8000af0 <__aeabi_d2uiz>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	f240 113b 	movw	r1, #315	@ 0x13b
 8001da6:	48a2      	ldr	r0, [pc, #648]	@ (8002030 <rotate_motor+0x398>)
 8001da8:	f000 fea6 	bl	8002af8 <servo_move>
    return;
 8001dac:	f000 bdc0 	b.w	8002930 <rotate_motor+0xc98>
  }

  float angle = atan2(base_vel.y_vel, base_vel.x_vel) * 180 / M_PI;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fb6c 	bl	8000490 <__aeabi_f2d>
 8001db8:	4604      	mov	r4, r0
 8001dba:	460d      	mov	r5, r1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fb66 	bl	8000490 <__aeabi_f2d>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	ec43 2b11 	vmov	d1, r2, r3
 8001dcc:	ec45 4b10 	vmov	d0, r4, r5
 8001dd0:	f004 f982 	bl	80060d8 <atan2>
 8001dd4:	ec51 0b10 	vmov	r0, r1, d0
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	4b95      	ldr	r3, [pc, #596]	@ (8002034 <rotate_motor+0x39c>)
 8001dde:	f7fe fbaf 	bl	8000540 <__aeabi_dmul>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	a38b      	add	r3, pc, #556	@ (adr r3, 8002018 <rotate_motor+0x380>)
 8001dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df0:	f7fe fcd0 	bl	8000794 <__aeabi_ddiv>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f7fe fe98 	bl	8000b30 <__aeabi_d2f>
 8001e00:	4603      	mov	r3, r0
 8001e02:	617b      	str	r3, [r7, #20]

  if (base_vel.x_vel == 0 && base_vel.y_vel != 0) {  // angle = 90 or 270
 8001e04:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e10:	d17c      	bne.n	8001f0c <rotate_motor+0x274>
 8001e12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e16:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1e:	d075      	beq.n	8001f0c <rotate_motor+0x274>
    servo_move(&(servos[0]), INITIAL_POS, SHORTEST_TIME_ROTATE(1, 90));
 8001e20:	4b7f      	ldr	r3, [pc, #508]	@ (8002020 <rotate_motor+0x388>)
 8001e22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e26:	3b5a      	subs	r3, #90	@ 0x5a
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bfb8      	it	lt
 8001e2c:	425b      	neglt	r3, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb1c 	bl	800046c <__aeabi_i2d>
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	4b7a      	ldr	r3, [pc, #488]	@ (8002024 <rotate_motor+0x38c>)
 8001e3a:	f7fe fb81 	bl	8000540 <__aeabi_dmul>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7fe fe53 	bl	8000af0 <__aeabi_d2uiz>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001e54:	4872      	ldr	r0, [pc, #456]	@ (8002020 <rotate_motor+0x388>)
 8001e56:	f000 fe4f 	bl	8002af8 <servo_move>
    servo_move(&(servos[1]), INITIAL_POS, SHORTEST_TIME_ROTATE(2, 90));
 8001e5a:	4b71      	ldr	r3, [pc, #452]	@ (8002020 <rotate_motor+0x388>)
 8001e5c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e60:	3b5a      	subs	r3, #90	@ 0x5a
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bfb8      	it	lt
 8001e66:	425b      	neglt	r3, r3
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe faff 	bl	800046c <__aeabi_i2d>
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	4b6c      	ldr	r3, [pc, #432]	@ (8002024 <rotate_motor+0x38c>)
 8001e74:	f7fe fb64 	bl	8000540 <__aeabi_dmul>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f7fe fe36 	bl	8000af0 <__aeabi_d2uiz>
 8001e84:	4603      	mov	r3, r0
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001e8e:	4866      	ldr	r0, [pc, #408]	@ (8002028 <rotate_motor+0x390>)
 8001e90:	f000 fe32 	bl	8002af8 <servo_move>
    servo_move(&(servos[2]), INITIAL_POS, SHORTEST_TIME_ROTATE(3, 90));
 8001e94:	4b62      	ldr	r3, [pc, #392]	@ (8002020 <rotate_motor+0x388>)
 8001e96:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001e9a:	3b5a      	subs	r3, #90	@ 0x5a
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bfb8      	it	lt
 8001ea0:	425b      	neglt	r3, r3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fae2 	bl	800046c <__aeabi_i2d>
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	4b5d      	ldr	r3, [pc, #372]	@ (8002024 <rotate_motor+0x38c>)
 8001eae:	f7fe fb47 	bl	8000540 <__aeabi_dmul>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f7fe fe19 	bl	8000af0 <__aeabi_d2uiz>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001ec8:	4859      	ldr	r0, [pc, #356]	@ (8002030 <rotate_motor+0x398>)
 8001eca:	f000 fe15 	bl	8002af8 <servo_move>
    servo_move(&(servos[3]), INITIAL_POS, SHORTEST_TIME_ROTATE(4, 90));
 8001ece:	4b54      	ldr	r3, [pc, #336]	@ (8002020 <rotate_motor+0x388>)
 8001ed0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001ed4:	3b5a      	subs	r3, #90	@ 0x5a
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	bfb8      	it	lt
 8001eda:	425b      	neglt	r3, r3
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fac5 	bl	800046c <__aeabi_i2d>
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	4b4f      	ldr	r3, [pc, #316]	@ (8002024 <rotate_motor+0x38c>)
 8001ee8:	f7fe fb2a 	bl	8000540 <__aeabi_dmul>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f7fe fdfc 	bl	8000af0 <__aeabi_d2uiz>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001f02:	484a      	ldr	r0, [pc, #296]	@ (800202c <rotate_motor+0x394>)
 8001f04:	f000 fdf8 	bl	8002af8 <servo_move>
 8001f08:	f000 bd12 	b.w	8002930 <rotate_motor+0xc98>
  } else if (base_vel.x_vel != 0 && base_vel.y_vel == 0) {  // angle = 0 or 180
 8001f0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f10:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f18:	f000 8092 	beq.w	8002040 <rotate_motor+0x3a8>
 8001f1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f20:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f28:	f040 808a 	bne.w	8002040 <rotate_motor+0x3a8>
    servo_move(&(servos[0]), SERVO_ID1_MIN_POS, SHORTEST_TIME_ROTATE(1, 90));
 8001f2c:	4b3c      	ldr	r3, [pc, #240]	@ (8002020 <rotate_motor+0x388>)
 8001f2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f32:	3b5a      	subs	r3, #90	@ 0x5a
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bfb8      	it	lt
 8001f38:	425b      	neglt	r3, r3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fa96 	bl	800046c <__aeabi_i2d>
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	4b37      	ldr	r3, [pc, #220]	@ (8002024 <rotate_motor+0x38c>)
 8001f46:	f7fe fafb 	bl	8000540 <__aeabi_dmul>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f7fe fdcd 	bl	8000af0 <__aeabi_d2uiz>
 8001f56:	4603      	mov	r3, r0
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	2187      	movs	r1, #135	@ 0x87
 8001f5e:	4830      	ldr	r0, [pc, #192]	@ (8002020 <rotate_motor+0x388>)
 8001f60:	f000 fdca 	bl	8002af8 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_MAX_POS, SHORTEST_TIME_ROTATE(2, 90));
 8001f64:	4b2e      	ldr	r3, [pc, #184]	@ (8002020 <rotate_motor+0x388>)
 8001f66:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001f6a:	3b5a      	subs	r3, #90	@ 0x5a
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bfb8      	it	lt
 8001f70:	425b      	neglt	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fa7a 	bl	800046c <__aeabi_i2d>
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	4b29      	ldr	r3, [pc, #164]	@ (8002024 <rotate_motor+0x38c>)
 8001f7e:	f7fe fadf 	bl	8000540 <__aeabi_dmul>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7fe fdb1 	bl	8000af0 <__aeabi_d2uiz>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	f44f 715a 	mov.w	r1, #872	@ 0x368
 8001f98:	4823      	ldr	r0, [pc, #140]	@ (8002028 <rotate_motor+0x390>)
 8001f9a:	f000 fdad 	bl	8002af8 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_MIN_POS, SHORTEST_TIME_ROTATE(3, 90));
 8001f9e:	4b20      	ldr	r3, [pc, #128]	@ (8002020 <rotate_motor+0x388>)
 8001fa0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001fa4:	3b5a      	subs	r3, #90	@ 0x5a
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bfb8      	it	lt
 8001faa:	425b      	neglt	r3, r3
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fa5d 	bl	800046c <__aeabi_i2d>
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002024 <rotate_motor+0x38c>)
 8001fb8:	f7fe fac2 	bl	8000540 <__aeabi_dmul>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f7fe fd94 	bl	8000af0 <__aeabi_d2uiz>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	2182      	movs	r1, #130	@ 0x82
 8001fd0:	4817      	ldr	r0, [pc, #92]	@ (8002030 <rotate_motor+0x398>)
 8001fd2:	f000 fd91 	bl	8002af8 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_MAX_POS, SHORTEST_TIME_ROTATE(4, 90));
 8001fd6:	4b12      	ldr	r3, [pc, #72]	@ (8002020 <rotate_motor+0x388>)
 8001fd8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001fdc:	3b5a      	subs	r3, #90	@ 0x5a
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	bfb8      	it	lt
 8001fe2:	425b      	neglt	r3, r3
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fa41 	bl	800046c <__aeabi_i2d>
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <rotate_motor+0x38c>)
 8001ff0:	f7fe faa6 	bl	8000540 <__aeabi_dmul>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f7fe fd78 	bl	8000af0 <__aeabi_d2uiz>
 8002000:	4603      	mov	r3, r0
 8002002:	b29b      	uxth	r3, r3
 8002004:	461a      	mov	r2, r3
 8002006:	f44f 715b 	mov.w	r1, #876	@ 0x36c
 800200a:	4808      	ldr	r0, [pc, #32]	@ (800202c <rotate_motor+0x394>)
 800200c:	f000 fd74 	bl	8002af8 <servo_move>
 8002010:	f000 bc8e 	b.w	8002930 <rotate_motor+0xc98>
 8002014:	f3af 8000 	nop.w
 8002018:	54442d18 	.word	0x54442d18
 800201c:	400921fb 	.word	0x400921fb
 8002020:	20000060 	.word	0x20000060
 8002024:	40080000 	.word	0x40080000
 8002028:	20000066 	.word	0x20000066
 800202c:	20000072 	.word	0x20000072
 8002030:	2000006c 	.word	0x2000006c
 8002034:	40668000 	.word	0x40668000
 8002038:	43340000 	.word	0x43340000
 800203c:	42b40000 	.word	0x42b40000
  } else if (base_vel.x_vel < 0 && base_vel.y_vel > 0 || base_vel.x_vel > 0 && base_vel.y_vel < 0) {  // quadrant 2 or 4
 8002040:	edd7 7a01 	vldr	s15, [r7, #4]
 8002044:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204c:	d506      	bpl.n	800205c <rotate_motor+0x3c4>
 800204e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002052:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205a:	dc0f      	bgt.n	800207c <rotate_motor+0x3e4>
 800205c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002060:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002068:	f340 822b 	ble.w	80024c2 <rotate_motor+0x82a>
 800206c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002070:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002078:	f140 8223 	bpl.w	80024c2 <rotate_motor+0x82a>
    if (angle < 0)
 800207c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002080:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002088:	d507      	bpl.n	800209a <rotate_motor+0x402>
      angle += 180;
 800208a:	edd7 7a05 	vldr	s15, [r7, #20]
 800208e:	ed1f 7a16 	vldr	s14, [pc, #-88]	@ 8002038 <rotate_motor+0x3a0>
 8002092:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002096:	edc7 7a05 	vstr	s15, [r7, #20]
    angle -= 90;
 800209a:	edd7 7a05 	vldr	s15, [r7, #20]
 800209e:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 800203c <rotate_motor+0x3a4>
 80020a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020a6:	edc7 7a05 	vstr	s15, [r7, #20]
    angle *= -1;
 80020aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80020ae:	eef1 7a67 	vneg.f32	s15, s15
 80020b2:	edc7 7a05 	vstr	s15, [r7, #20]

    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(1, angle));
 80020b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80020ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c2:	dd22      	ble.n	800210a <rotate_motor+0x472>
 80020c4:	6978      	ldr	r0, [r7, #20]
 80020c6:	f7fe f9e3 	bl	8000490 <__aeabi_f2d>
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	4bcc      	ldr	r3, [pc, #816]	@ (8002400 <rotate_motor+0x768>)
 80020d0:	f7fe fb60 	bl	8000794 <__aeabi_ddiv>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	a3c0      	add	r3, pc, #768	@ (adr r3, 80023e0 <rotate_motor+0x748>)
 80020de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e2:	f7fe fa2d 	bl	8000540 <__aeabi_dmul>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4610      	mov	r0, r2
 80020ec:	4619      	mov	r1, r3
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	4bc4      	ldr	r3, [pc, #784]	@ (8002404 <rotate_motor+0x76c>)
 80020f4:	f7fe f86e 	bl	80001d4 <__adddf3>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4610      	mov	r0, r2
 80020fe:	4619      	mov	r1, r3
 8002100:	f7fe fcf6 	bl	8000af0 <__aeabi_d2uiz>
 8002104:	4603      	mov	r3, r0
 8002106:	b29c      	uxth	r4, r3
 8002108:	e021      	b.n	800214e <rotate_motor+0x4b6>
 800210a:	6978      	ldr	r0, [r7, #20]
 800210c:	f7fe f9c0 	bl	8000490 <__aeabi_f2d>
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	4bba      	ldr	r3, [pc, #744]	@ (8002400 <rotate_motor+0x768>)
 8002116:	f7fe fb3d 	bl	8000794 <__aeabi_ddiv>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	a3b1      	add	r3, pc, #708	@ (adr r3, 80023e8 <rotate_motor+0x750>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	f7fe fa0a 	bl	8000540 <__aeabi_dmul>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	4bb2      	ldr	r3, [pc, #712]	@ (8002404 <rotate_motor+0x76c>)
 800213a:	f7fe f84b 	bl	80001d4 <__adddf3>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	f7fe fcd3 	bl	8000af0 <__aeabi_d2uiz>
 800214a:	4603      	mov	r3, r0
 800214c:	b29c      	uxth	r4, r3
 800214e:	4bae      	ldr	r3, [pc, #696]	@ (8002408 <rotate_motor+0x770>)
 8002150:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002154:	335a      	adds	r3, #90	@ 0x5a
 8002156:	ee07 3a90 	vmov	s15, r3
 800215a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800215e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002162:	eddf 6aaa 	vldr	s13, [pc, #680]	@ 800240c <rotate_motor+0x774>
 8002166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800216a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800216e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002172:	ee17 3a90 	vmov	r3, s15
 8002176:	2b00      	cmp	r3, #0
 8002178:	bfb8      	it	lt
 800217a:	425b      	neglt	r3, r3
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe f975 	bl	800046c <__aeabi_i2d>
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	4ba2      	ldr	r3, [pc, #648]	@ (8002410 <rotate_motor+0x778>)
 8002188:	f7fe f9da 	bl	8000540 <__aeabi_dmul>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	f7fe fcac 	bl	8000af0 <__aeabi_d2uiz>
 8002198:	4603      	mov	r3, r0
 800219a:	b29b      	uxth	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	4621      	mov	r1, r4
 80021a0:	4899      	ldr	r0, [pc, #612]	@ (8002408 <rotate_motor+0x770>)
 80021a2:	f000 fca9 	bl	8002af8 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(2, angle));
 80021a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80021aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b2:	dd22      	ble.n	80021fa <rotate_motor+0x562>
 80021b4:	6978      	ldr	r0, [r7, #20]
 80021b6:	f7fe f96b 	bl	8000490 <__aeabi_f2d>
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	4b90      	ldr	r3, [pc, #576]	@ (8002400 <rotate_motor+0x768>)
 80021c0:	f7fe fae8 	bl	8000794 <__aeabi_ddiv>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	4b90      	ldr	r3, [pc, #576]	@ (8002414 <rotate_motor+0x77c>)
 80021d2:	f7fe f9b5 	bl	8000540 <__aeabi_dmul>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	4b88      	ldr	r3, [pc, #544]	@ (8002404 <rotate_motor+0x76c>)
 80021e4:	f7fd fff6 	bl	80001d4 <__adddf3>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	f7fe fc7e 	bl	8000af0 <__aeabi_d2uiz>
 80021f4:	4603      	mov	r3, r0
 80021f6:	b29c      	uxth	r4, r3
 80021f8:	e021      	b.n	800223e <rotate_motor+0x5a6>
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f7fe f948 	bl	8000490 <__aeabi_f2d>
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	4b7e      	ldr	r3, [pc, #504]	@ (8002400 <rotate_motor+0x768>)
 8002206:	f7fe fac5 	bl	8000794 <__aeabi_ddiv>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4610      	mov	r0, r2
 8002210:	4619      	mov	r1, r3
 8002212:	a377      	add	r3, pc, #476	@ (adr r3, 80023f0 <rotate_motor+0x758>)
 8002214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002218:	f7fe f992 	bl	8000540 <__aeabi_dmul>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4610      	mov	r0, r2
 8002222:	4619      	mov	r1, r3
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	4b76      	ldr	r3, [pc, #472]	@ (8002404 <rotate_motor+0x76c>)
 800222a:	f7fd ffd3 	bl	80001d4 <__adddf3>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	f7fe fc5b 	bl	8000af0 <__aeabi_d2uiz>
 800223a:	4603      	mov	r3, r0
 800223c:	b29c      	uxth	r4, r3
 800223e:	4b72      	ldr	r3, [pc, #456]	@ (8002408 <rotate_motor+0x770>)
 8002240:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002244:	335a      	adds	r3, #90	@ 0x5a
 8002246:	ee07 3a90 	vmov	s15, r3
 800224a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800224e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002252:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800240c <rotate_motor+0x774>
 8002256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800225a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800225e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002262:	ee17 3a90 	vmov	r3, s15
 8002266:	2b00      	cmp	r3, #0
 8002268:	bfb8      	it	lt
 800226a:	425b      	neglt	r3, r3
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe f8fd 	bl	800046c <__aeabi_i2d>
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	4b66      	ldr	r3, [pc, #408]	@ (8002410 <rotate_motor+0x778>)
 8002278:	f7fe f962 	bl	8000540 <__aeabi_dmul>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	f7fe fc34 	bl	8000af0 <__aeabi_d2uiz>
 8002288:	4603      	mov	r3, r0
 800228a:	b29b      	uxth	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	4621      	mov	r1, r4
 8002290:	4861      	ldr	r0, [pc, #388]	@ (8002418 <rotate_motor+0x780>)
 8002292:	f000 fc31 	bl	8002af8 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(3, angle));
 8002296:	edd7 7a05 	vldr	s15, [r7, #20]
 800229a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	dd22      	ble.n	80022ea <rotate_motor+0x652>
 80022a4:	6978      	ldr	r0, [r7, #20]
 80022a6:	f7fe f8f3 	bl	8000490 <__aeabi_f2d>
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	4b54      	ldr	r3, [pc, #336]	@ (8002400 <rotate_motor+0x768>)
 80022b0:	f7fe fa70 	bl	8000794 <__aeabi_ddiv>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	a34c      	add	r3, pc, #304	@ (adr r3, 80023f0 <rotate_motor+0x758>)
 80022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c2:	f7fe f93d 	bl	8000540 <__aeabi_dmul>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4610      	mov	r0, r2
 80022cc:	4619      	mov	r1, r3
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	4b4c      	ldr	r3, [pc, #304]	@ (8002404 <rotate_motor+0x76c>)
 80022d4:	f7fd ff7e 	bl	80001d4 <__adddf3>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	f7fe fc06 	bl	8000af0 <__aeabi_d2uiz>
 80022e4:	4603      	mov	r3, r0
 80022e6:	b29c      	uxth	r4, r3
 80022e8:	e021      	b.n	800232e <rotate_motor+0x696>
 80022ea:	6978      	ldr	r0, [r7, #20]
 80022ec:	f7fe f8d0 	bl	8000490 <__aeabi_f2d>
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	4b42      	ldr	r3, [pc, #264]	@ (8002400 <rotate_motor+0x768>)
 80022f6:	f7fe fa4d 	bl	8000794 <__aeabi_ddiv>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4610      	mov	r0, r2
 8002300:	4619      	mov	r1, r3
 8002302:	a33d      	add	r3, pc, #244	@ (adr r3, 80023f8 <rotate_motor+0x760>)
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	f7fe f91a 	bl	8000540 <__aeabi_dmul>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	4b3a      	ldr	r3, [pc, #232]	@ (8002404 <rotate_motor+0x76c>)
 800231a:	f7fd ff5b 	bl	80001d4 <__adddf3>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4610      	mov	r0, r2
 8002324:	4619      	mov	r1, r3
 8002326:	f7fe fbe3 	bl	8000af0 <__aeabi_d2uiz>
 800232a:	4603      	mov	r3, r0
 800232c:	b29c      	uxth	r4, r3
 800232e:	4b36      	ldr	r3, [pc, #216]	@ (8002408 <rotate_motor+0x770>)
 8002330:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002334:	335a      	adds	r3, #90	@ 0x5a
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800233e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002342:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800240c <rotate_motor+0x774>
 8002346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800234a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800234e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002352:	ee17 3a90 	vmov	r3, s15
 8002356:	2b00      	cmp	r3, #0
 8002358:	bfb8      	it	lt
 800235a:	425b      	neglt	r3, r3
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe f885 	bl	800046c <__aeabi_i2d>
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	4b2a      	ldr	r3, [pc, #168]	@ (8002410 <rotate_motor+0x778>)
 8002368:	f7fe f8ea 	bl	8000540 <__aeabi_dmul>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4610      	mov	r0, r2
 8002372:	4619      	mov	r1, r3
 8002374:	f7fe fbbc 	bl	8000af0 <__aeabi_d2uiz>
 8002378:	4603      	mov	r3, r0
 800237a:	b29b      	uxth	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	4621      	mov	r1, r4
 8002380:	4826      	ldr	r0, [pc, #152]	@ (800241c <rotate_motor+0x784>)
 8002382:	f000 fbb9 	bl	8002af8 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(4, angle));
 8002386:	edd7 7a05 	vldr	s15, [r7, #20]
 800238a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800238e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002392:	dd47      	ble.n	8002424 <rotate_motor+0x78c>
 8002394:	6978      	ldr	r0, [r7, #20]
 8002396:	f7fe f87b 	bl	8000490 <__aeabi_f2d>
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	4b18      	ldr	r3, [pc, #96]	@ (8002400 <rotate_motor+0x768>)
 80023a0:	f7fe f9f8 	bl	8000794 <__aeabi_ddiv>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002420 <rotate_motor+0x788>)
 80023b2:	f7fe f8c5 	bl	8000540 <__aeabi_dmul>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4610      	mov	r0, r2
 80023bc:	4619      	mov	r1, r3
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	4b10      	ldr	r3, [pc, #64]	@ (8002404 <rotate_motor+0x76c>)
 80023c4:	f7fd ff06 	bl	80001d4 <__adddf3>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4610      	mov	r0, r2
 80023ce:	4619      	mov	r1, r3
 80023d0:	f7fe fb8e 	bl	8000af0 <__aeabi_d2uiz>
 80023d4:	4603      	mov	r3, r0
 80023d6:	b29c      	uxth	r4, r3
 80023d8:	e046      	b.n	8002468 <rotate_motor+0x7d0>
 80023da:	bf00      	nop
 80023dc:	f3af 8000 	nop.w
 80023e0:	00000000 	.word	0x00000000
 80023e4:	40781000 	.word	0x40781000
 80023e8:	00000000 	.word	0x00000000
 80023ec:	4076d000 	.word	0x4076d000
 80023f0:	00000000 	.word	0x00000000
 80023f4:	40777000 	.word	0x40777000
 80023f8:	00000000 	.word	0x00000000
 80023fc:	40772000 	.word	0x40772000
 8002400:	40568000 	.word	0x40568000
 8002404:	407f4000 	.word	0x407f4000
 8002408:	20000060 	.word	0x20000060
 800240c:	42b40000 	.word	0x42b40000
 8002410:	40080000 	.word	0x40080000
 8002414:	40774000 	.word	0x40774000
 8002418:	20000066 	.word	0x20000066
 800241c:	2000006c 	.word	0x2000006c
 8002420:	40778000 	.word	0x40778000
 8002424:	6978      	ldr	r0, [r7, #20]
 8002426:	f7fe f833 	bl	8000490 <__aeabi_f2d>
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	4bd4      	ldr	r3, [pc, #848]	@ (8002780 <rotate_motor+0xae8>)
 8002430:	f7fe f9b0 	bl	8000794 <__aeabi_ddiv>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	a3c8      	add	r3, pc, #800	@ (adr r3, 8002760 <rotate_motor+0xac8>)
 800243e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002442:	f7fe f87d 	bl	8000540 <__aeabi_dmul>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4610      	mov	r0, r2
 800244c:	4619      	mov	r1, r3
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	4bcc      	ldr	r3, [pc, #816]	@ (8002784 <rotate_motor+0xaec>)
 8002454:	f7fd febe 	bl	80001d4 <__adddf3>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f7fe fb46 	bl	8000af0 <__aeabi_d2uiz>
 8002464:	4603      	mov	r3, r0
 8002466:	b29c      	uxth	r4, r3
 8002468:	4bc7      	ldr	r3, [pc, #796]	@ (8002788 <rotate_motor+0xaf0>)
 800246a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800246e:	335a      	adds	r3, #90	@ 0x5a
 8002470:	ee07 3a90 	vmov	s15, r3
 8002474:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002478:	edd7 7a05 	vldr	s15, [r7, #20]
 800247c:	eddf 6ac3 	vldr	s13, [pc, #780]	@ 800278c <rotate_motor+0xaf4>
 8002480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800248c:	ee17 3a90 	vmov	r3, s15
 8002490:	2b00      	cmp	r3, #0
 8002492:	bfb8      	it	lt
 8002494:	425b      	neglt	r3, r3
 8002496:	4618      	mov	r0, r3
 8002498:	f7fd ffe8 	bl	800046c <__aeabi_i2d>
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	4bbb      	ldr	r3, [pc, #748]	@ (8002790 <rotate_motor+0xaf8>)
 80024a2:	f7fe f84d 	bl	8000540 <__aeabi_dmul>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	f7fe fb1f 	bl	8000af0 <__aeabi_d2uiz>
 80024b2:	4603      	mov	r3, r0
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	4621      	mov	r1, r4
 80024ba:	48b6      	ldr	r0, [pc, #728]	@ (8002794 <rotate_motor+0xafc>)
 80024bc:	f000 fb1c 	bl	8002af8 <servo_move>
 80024c0:	e236      	b.n	8002930 <rotate_motor+0xc98>
  } else if (base_vel.x_vel < 0 && base_vel.y_vel < 0 || base_vel.x_vel > 0 && base_vel.y_vel > 0) {  // quadrant 1 or 3
 80024c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80024c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ce:	d506      	bpl.n	80024de <rotate_motor+0x846>
 80024d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80024d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024dc:	d40f      	bmi.n	80024fe <rotate_motor+0x866>
 80024de:	edd7 7a01 	vldr	s15, [r7, #4]
 80024e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ea:	f340 8221 	ble.w	8002930 <rotate_motor+0xc98>
 80024ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80024f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fa:	f340 8219 	ble.w	8002930 <rotate_motor+0xc98>
    if (angle < 0)
 80024fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002502:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250a:	d507      	bpl.n	800251c <rotate_motor+0x884>
      angle += 180;
 800250c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002510:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8002798 <rotate_motor+0xb00>
 8002514:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002518:	edc7 7a05 	vstr	s15, [r7, #20]
    angle = 90 - angle;
 800251c:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 800278c <rotate_motor+0xaf4>
 8002520:	edd7 7a05 	vldr	s15, [r7, #20]
 8002524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002528:	edc7 7a05 	vstr	s15, [r7, #20]

    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(1, angle));
 800252c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002530:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002538:	dd22      	ble.n	8002580 <rotate_motor+0x8e8>
 800253a:	6978      	ldr	r0, [r7, #20]
 800253c:	f7fd ffa8 	bl	8000490 <__aeabi_f2d>
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	4b8e      	ldr	r3, [pc, #568]	@ (8002780 <rotate_motor+0xae8>)
 8002546:	f7fe f925 	bl	8000794 <__aeabi_ddiv>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	a385      	add	r3, pc, #532	@ (adr r3, 8002768 <rotate_motor+0xad0>)
 8002554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002558:	f7fd fff2 	bl	8000540 <__aeabi_dmul>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	4b86      	ldr	r3, [pc, #536]	@ (8002784 <rotate_motor+0xaec>)
 800256a:	f7fd fe33 	bl	80001d4 <__adddf3>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4610      	mov	r0, r2
 8002574:	4619      	mov	r1, r3
 8002576:	f7fe fabb 	bl	8000af0 <__aeabi_d2uiz>
 800257a:	4603      	mov	r3, r0
 800257c:	b29c      	uxth	r4, r3
 800257e:	e021      	b.n	80025c4 <rotate_motor+0x92c>
 8002580:	6978      	ldr	r0, [r7, #20]
 8002582:	f7fd ff85 	bl	8000490 <__aeabi_f2d>
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	4b7d      	ldr	r3, [pc, #500]	@ (8002780 <rotate_motor+0xae8>)
 800258c:	f7fe f902 	bl	8000794 <__aeabi_ddiv>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	a375      	add	r3, pc, #468	@ (adr r3, 8002770 <rotate_motor+0xad8>)
 800259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259e:	f7fd ffcf 	bl	8000540 <__aeabi_dmul>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	4b75      	ldr	r3, [pc, #468]	@ (8002784 <rotate_motor+0xaec>)
 80025b0:	f7fd fe10 	bl	80001d4 <__adddf3>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	f7fe fa98 	bl	8000af0 <__aeabi_d2uiz>
 80025c0:	4603      	mov	r3, r0
 80025c2:	b29c      	uxth	r4, r3
 80025c4:	4b70      	ldr	r3, [pc, #448]	@ (8002788 <rotate_motor+0xaf0>)
 80025c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025ca:	335a      	adds	r3, #90	@ 0x5a
 80025cc:	ee07 3a90 	vmov	s15, r3
 80025d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80025d8:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 800278c <rotate_motor+0xaf4>
 80025dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025e8:	ee17 3a90 	vmov	r3, s15
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bfb8      	it	lt
 80025f0:	425b      	neglt	r3, r3
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fd ff3a 	bl	800046c <__aeabi_i2d>
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	4b64      	ldr	r3, [pc, #400]	@ (8002790 <rotate_motor+0xaf8>)
 80025fe:	f7fd ff9f 	bl	8000540 <__aeabi_dmul>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	f7fe fa71 	bl	8000af0 <__aeabi_d2uiz>
 800260e:	4603      	mov	r3, r0
 8002610:	b29b      	uxth	r3, r3
 8002612:	461a      	mov	r2, r3
 8002614:	4621      	mov	r1, r4
 8002616:	485c      	ldr	r0, [pc, #368]	@ (8002788 <rotate_motor+0xaf0>)
 8002618:	f000 fa6e 	bl	8002af8 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(2, angle));
 800261c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002620:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002628:	dd22      	ble.n	8002670 <rotate_motor+0x9d8>
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7fd ff30 	bl	8000490 <__aeabi_f2d>
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	4b52      	ldr	r3, [pc, #328]	@ (8002780 <rotate_motor+0xae8>)
 8002636:	f7fe f8ad 	bl	8000794 <__aeabi_ddiv>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	4b55      	ldr	r3, [pc, #340]	@ (800279c <rotate_motor+0xb04>)
 8002648:	f7fd ff7a 	bl	8000540 <__aeabi_dmul>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4610      	mov	r0, r2
 8002652:	4619      	mov	r1, r3
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	4b4a      	ldr	r3, [pc, #296]	@ (8002784 <rotate_motor+0xaec>)
 800265a:	f7fd fdbb 	bl	80001d4 <__adddf3>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4610      	mov	r0, r2
 8002664:	4619      	mov	r1, r3
 8002666:	f7fe fa43 	bl	8000af0 <__aeabi_d2uiz>
 800266a:	4603      	mov	r3, r0
 800266c:	b29c      	uxth	r4, r3
 800266e:	e021      	b.n	80026b4 <rotate_motor+0xa1c>
 8002670:	6978      	ldr	r0, [r7, #20]
 8002672:	f7fd ff0d 	bl	8000490 <__aeabi_f2d>
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	4b41      	ldr	r3, [pc, #260]	@ (8002780 <rotate_motor+0xae8>)
 800267c:	f7fe f88a 	bl	8000794 <__aeabi_ddiv>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4610      	mov	r0, r2
 8002686:	4619      	mov	r1, r3
 8002688:	a33b      	add	r3, pc, #236	@ (adr r3, 8002778 <rotate_motor+0xae0>)
 800268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268e:	f7fd ff57 	bl	8000540 <__aeabi_dmul>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	4b39      	ldr	r3, [pc, #228]	@ (8002784 <rotate_motor+0xaec>)
 80026a0:	f7fd fd98 	bl	80001d4 <__adddf3>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	f7fe fa20 	bl	8000af0 <__aeabi_d2uiz>
 80026b0:	4603      	mov	r3, r0
 80026b2:	b29c      	uxth	r4, r3
 80026b4:	4b34      	ldr	r3, [pc, #208]	@ (8002788 <rotate_motor+0xaf0>)
 80026b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80026ba:	335a      	adds	r3, #90	@ 0x5a
 80026bc:	ee07 3a90 	vmov	s15, r3
 80026c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80026c8:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800278c <rotate_motor+0xaf4>
 80026cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026d8:	ee17 3a90 	vmov	r3, s15
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bfb8      	it	lt
 80026e0:	425b      	neglt	r3, r3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fd fec2 	bl	800046c <__aeabi_i2d>
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	4b28      	ldr	r3, [pc, #160]	@ (8002790 <rotate_motor+0xaf8>)
 80026ee:	f7fd ff27 	bl	8000540 <__aeabi_dmul>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	f7fe f9f9 	bl	8000af0 <__aeabi_d2uiz>
 80026fe:	4603      	mov	r3, r0
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	4621      	mov	r1, r4
 8002706:	4826      	ldr	r0, [pc, #152]	@ (80027a0 <rotate_motor+0xb08>)
 8002708:	f000 f9f6 	bl	8002af8 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(3, angle));
 800270c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002710:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002718:	dd44      	ble.n	80027a4 <rotate_motor+0xb0c>
 800271a:	6978      	ldr	r0, [r7, #20]
 800271c:	f7fd feb8 	bl	8000490 <__aeabi_f2d>
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	4b16      	ldr	r3, [pc, #88]	@ (8002780 <rotate_motor+0xae8>)
 8002726:	f7fe f835 	bl	8000794 <__aeabi_ddiv>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	a311      	add	r3, pc, #68	@ (adr r3, 8002778 <rotate_motor+0xae0>)
 8002734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002738:	f7fd ff02 	bl	8000540 <__aeabi_dmul>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	4b0e      	ldr	r3, [pc, #56]	@ (8002784 <rotate_motor+0xaec>)
 800274a:	f7fd fd43 	bl	80001d4 <__adddf3>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	f7fe f9cb 	bl	8000af0 <__aeabi_d2uiz>
 800275a:	4603      	mov	r3, r0
 800275c:	b29c      	uxth	r4, r3
 800275e:	e043      	b.n	80027e8 <rotate_motor+0xb50>
 8002760:	00000000 	.word	0x00000000
 8002764:	40775000 	.word	0x40775000
 8002768:	00000000 	.word	0x00000000
 800276c:	40781000 	.word	0x40781000
 8002770:	00000000 	.word	0x00000000
 8002774:	4076d000 	.word	0x4076d000
 8002778:	00000000 	.word	0x00000000
 800277c:	40777000 	.word	0x40777000
 8002780:	40568000 	.word	0x40568000
 8002784:	407f4000 	.word	0x407f4000
 8002788:	20000060 	.word	0x20000060
 800278c:	42b40000 	.word	0x42b40000
 8002790:	40080000 	.word	0x40080000
 8002794:	20000072 	.word	0x20000072
 8002798:	43340000 	.word	0x43340000
 800279c:	40774000 	.word	0x40774000
 80027a0:	20000066 	.word	0x20000066
 80027a4:	6978      	ldr	r0, [r7, #20]
 80027a6:	f7fd fe73 	bl	8000490 <__aeabi_f2d>
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	4b66      	ldr	r3, [pc, #408]	@ (8002948 <rotate_motor+0xcb0>)
 80027b0:	f7fd fff0 	bl	8000794 <__aeabi_ddiv>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	a35e      	add	r3, pc, #376	@ (adr r3, 8002938 <rotate_motor+0xca0>)
 80027be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c2:	f7fd febd 	bl	8000540 <__aeabi_dmul>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4610      	mov	r0, r2
 80027cc:	4619      	mov	r1, r3
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	4b5e      	ldr	r3, [pc, #376]	@ (800294c <rotate_motor+0xcb4>)
 80027d4:	f7fd fcfe 	bl	80001d4 <__adddf3>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	f7fe f986 	bl	8000af0 <__aeabi_d2uiz>
 80027e4:	4603      	mov	r3, r0
 80027e6:	b29c      	uxth	r4, r3
 80027e8:	4b59      	ldr	r3, [pc, #356]	@ (8002950 <rotate_motor+0xcb8>)
 80027ea:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80027ee:	335a      	adds	r3, #90	@ 0x5a
 80027f0:	ee07 3a90 	vmov	s15, r3
 80027f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80027fc:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8002954 <rotate_motor+0xcbc>
 8002800:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002808:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800280c:	ee17 3a90 	vmov	r3, s15
 8002810:	2b00      	cmp	r3, #0
 8002812:	bfb8      	it	lt
 8002814:	425b      	neglt	r3, r3
 8002816:	4618      	mov	r0, r3
 8002818:	f7fd fe28 	bl	800046c <__aeabi_i2d>
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	4b4d      	ldr	r3, [pc, #308]	@ (8002958 <rotate_motor+0xcc0>)
 8002822:	f7fd fe8d 	bl	8000540 <__aeabi_dmul>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4610      	mov	r0, r2
 800282c:	4619      	mov	r1, r3
 800282e:	f7fe f95f 	bl	8000af0 <__aeabi_d2uiz>
 8002832:	4603      	mov	r3, r0
 8002834:	b29b      	uxth	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	4621      	mov	r1, r4
 800283a:	4848      	ldr	r0, [pc, #288]	@ (800295c <rotate_motor+0xcc4>)
 800283c:	f000 f95c 	bl	8002af8 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(4, angle));
 8002840:	edd7 7a05 	vldr	s15, [r7, #20]
 8002844:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284c:	dd22      	ble.n	8002894 <rotate_motor+0xbfc>
 800284e:	6978      	ldr	r0, [r7, #20]
 8002850:	f7fd fe1e 	bl	8000490 <__aeabi_f2d>
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	4b3b      	ldr	r3, [pc, #236]	@ (8002948 <rotate_motor+0xcb0>)
 800285a:	f7fd ff9b 	bl	8000794 <__aeabi_ddiv>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	4b3d      	ldr	r3, [pc, #244]	@ (8002960 <rotate_motor+0xcc8>)
 800286c:	f7fd fe68 	bl	8000540 <__aeabi_dmul>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	4b33      	ldr	r3, [pc, #204]	@ (800294c <rotate_motor+0xcb4>)
 800287e:	f7fd fca9 	bl	80001d4 <__adddf3>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4610      	mov	r0, r2
 8002888:	4619      	mov	r1, r3
 800288a:	f7fe f931 	bl	8000af0 <__aeabi_d2uiz>
 800288e:	4603      	mov	r3, r0
 8002890:	b29c      	uxth	r4, r3
 8002892:	e021      	b.n	80028d8 <rotate_motor+0xc40>
 8002894:	6978      	ldr	r0, [r7, #20]
 8002896:	f7fd fdfb 	bl	8000490 <__aeabi_f2d>
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	4b2a      	ldr	r3, [pc, #168]	@ (8002948 <rotate_motor+0xcb0>)
 80028a0:	f7fd ff78 	bl	8000794 <__aeabi_ddiv>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	a324      	add	r3, pc, #144	@ (adr r3, 8002940 <rotate_motor+0xca8>)
 80028ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b2:	f7fd fe45 	bl	8000540 <__aeabi_dmul>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	4b22      	ldr	r3, [pc, #136]	@ (800294c <rotate_motor+0xcb4>)
 80028c4:	f7fd fc86 	bl	80001d4 <__adddf3>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4610      	mov	r0, r2
 80028ce:	4619      	mov	r1, r3
 80028d0:	f7fe f90e 	bl	8000af0 <__aeabi_d2uiz>
 80028d4:	4603      	mov	r3, r0
 80028d6:	b29c      	uxth	r4, r3
 80028d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002950 <rotate_motor+0xcb8>)
 80028da:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80028de:	335a      	adds	r3, #90	@ 0x5a
 80028e0:	ee07 3a90 	vmov	s15, r3
 80028e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80028ec:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8002954 <rotate_motor+0xcbc>
 80028f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028fc:	ee17 3a90 	vmov	r3, s15
 8002900:	2b00      	cmp	r3, #0
 8002902:	bfb8      	it	lt
 8002904:	425b      	neglt	r3, r3
 8002906:	4618      	mov	r0, r3
 8002908:	f7fd fdb0 	bl	800046c <__aeabi_i2d>
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	4b11      	ldr	r3, [pc, #68]	@ (8002958 <rotate_motor+0xcc0>)
 8002912:	f7fd fe15 	bl	8000540 <__aeabi_dmul>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4610      	mov	r0, r2
 800291c:	4619      	mov	r1, r3
 800291e:	f7fe f8e7 	bl	8000af0 <__aeabi_d2uiz>
 8002922:	4603      	mov	r3, r0
 8002924:	b29b      	uxth	r3, r3
 8002926:	461a      	mov	r2, r3
 8002928:	4621      	mov	r1, r4
 800292a:	480e      	ldr	r0, [pc, #56]	@ (8002964 <rotate_motor+0xccc>)
 800292c:	f000 f8e4 	bl	8002af8 <servo_move>
  }
}
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bdb0      	pop	{r4, r5, r7, pc}
 8002936:	bf00      	nop
 8002938:	00000000 	.word	0x00000000
 800293c:	40772000 	.word	0x40772000
 8002940:	00000000 	.word	0x00000000
 8002944:	40775000 	.word	0x40775000
 8002948:	40568000 	.word	0x40568000
 800294c:	407f4000 	.word	0x407f4000
 8002950:	20000060 	.word	0x20000060
 8002954:	42b40000 	.word	0x42b40000
 8002958:	40080000 	.word	0x40080000
 800295c:	2000006c 	.word	0x2000006c
 8002960:	40778000 	.word	0x40778000
 8002964:	20000072 	.word	0x20000072

08002968 <movement_control>:

void movement_control(BaseVelocity base_vel) {
 8002968:	b580      	push	{r7, lr}
 800296a:	b08c      	sub	sp, #48	@ 0x30
 800296c:	af00      	add	r7, sp, #0
 800296e:	eef0 6a40 	vmov.f32	s13, s0
 8002972:	eeb0 7a60 	vmov.f32	s14, s1
 8002976:	eef0 7a41 	vmov.f32	s15, s2
 800297a:	edc7 6a01 	vstr	s13, [r7, #4]
 800297e:	ed87 7a02 	vstr	s14, [r7, #8]
 8002982:	edc7 7a03 	vstr	s15, [r7, #12]
  if (base_vel.x_vel != 0 && direction_encoder != LEFT_RIGHT || base_vel.y_vel != 0 && direction_encoder != FRONT_BACK) {
 8002986:	edd7 7a01 	vldr	s15, [r7, #4]
 800298a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800298e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002992:	d003      	beq.n	800299c <movement_control+0x34>
 8002994:	4b55      	ldr	r3, [pc, #340]	@ (8002aec <movement_control+0x184>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10a      	bne.n	80029b2 <movement_control+0x4a>
 800299c:	edd7 7a02 	vldr	s15, [r7, #8]
 80029a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a8:	d01f      	beq.n	80029ea <movement_control+0x82>
 80029aa:	4b50      	ldr	r3, [pc, #320]	@ (8002aec <movement_control+0x184>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01b      	beq.n	80029ea <movement_control+0x82>
    rotate_motor(base_vel);
 80029b2:	edd7 6a01 	vldr	s13, [r7, #4]
 80029b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80029ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80029be:	eeb0 0a66 	vmov.f32	s0, s13
 80029c2:	eef0 0a47 	vmov.f32	s1, s14
 80029c6:	eeb0 1a67 	vmov.f32	s2, s15
 80029ca:	f7ff f965 	bl	8001c98 <rotate_motor>
    direction_encoder = base_vel.x_vel != 0 ? LEFT_RIGHT : FRONT_BACK;
 80029ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80029d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029da:	bf14      	ite	ne
 80029dc:	2301      	movne	r3, #1
 80029de:	2300      	moveq	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	4b41      	ldr	r3, [pc, #260]	@ (8002aec <movement_control+0x184>)
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	e01b      	b.n	8002a22 <movement_control+0xba>
  } else if (base_vel.z_vel != 0 && direction_encoder != ROTATE) {
 80029ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80029ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f6:	d014      	beq.n	8002a22 <movement_control+0xba>
 80029f8:	4b3c      	ldr	r3, [pc, #240]	@ (8002aec <movement_control+0x184>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d010      	beq.n	8002a22 <movement_control+0xba>
    rotate_motor(base_vel);
 8002a00:	edd7 6a01 	vldr	s13, [r7, #4]
 8002a04:	ed97 7a02 	vldr	s14, [r7, #8]
 8002a08:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a0c:	eeb0 0a66 	vmov.f32	s0, s13
 8002a10:	eef0 0a47 	vmov.f32	s1, s14
 8002a14:	eeb0 1a67 	vmov.f32	s2, s15
 8002a18:	f7ff f93e 	bl	8001c98 <rotate_motor>
    direction_encoder = ROTATE;
 8002a1c:	4b33      	ldr	r3, [pc, #204]	@ (8002aec <movement_control+0x184>)
 8002a1e:	2202      	movs	r2, #2
 8002a20:	701a      	strb	r2, [r3, #0]
  }

  WheelVelocity target_vel = base2wheel(base_vel);
 8002a22:	edd7 6a01 	vldr	s13, [r7, #4]
 8002a26:	ed97 7a02 	vldr	s14, [r7, #8]
 8002a2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a2e:	eeb0 0a66 	vmov.f32	s0, s13
 8002a32:	eef0 0a47 	vmov.f32	s1, s14
 8002a36:	eeb0 1a67 	vmov.f32	s2, s15
 8002a3a:	f7fe fd4d 	bl	80014d8 <base2wheel>
 8002a3e:	eeb0 6a40 	vmov.f32	s12, s0
 8002a42:	eef0 6a60 	vmov.f32	s13, s1
 8002a46:	eeb0 7a41 	vmov.f32	s14, s2
 8002a4a:	eef0 7a61 	vmov.f32	s15, s3
 8002a4e:	ed87 6a08 	vstr	s12, [r7, #32]
 8002a52:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8002a56:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8002a5a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
  test_wheel_vel.front_left = target_vel.front_left;
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	4a23      	ldr	r2, [pc, #140]	@ (8002af0 <movement_control+0x188>)
 8002a62:	6013      	str	r3, [r2, #0]
  test_wheel_vel.front_right = target_vel.front_right;
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	4a22      	ldr	r2, [pc, #136]	@ (8002af0 <movement_control+0x188>)
 8002a68:	6053      	str	r3, [r2, #4]
  test_wheel_vel.rear_left = target_vel.rear_left;
 8002a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a6c:	4a20      	ldr	r2, [pc, #128]	@ (8002af0 <movement_control+0x188>)
 8002a6e:	6093      	str	r3, [r2, #8]
  test_wheel_vel.rear_right = target_vel.rear_right;
 8002a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a72:	4a1f      	ldr	r2, [pc, #124]	@ (8002af0 <movement_control+0x188>)
 8002a74:	60d3      	str	r3, [r2, #12]
if (direction_encoder == LEFT_RIGHT) {
 8002a76:	4b1d      	ldr	r3, [pc, #116]	@ (8002aec <movement_control+0x184>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d10b      	bne.n	8002a96 <movement_control+0x12e>
  target_vel.front_left *= -1;
 8002a7e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a82:	eef1 7a67 	vneg.f32	s15, s15
 8002a86:	edc7 7a08 	vstr	s15, [r7, #32]
  target_vel.rear_left *= -1;
 8002a8a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002a8e:	eef1 7a67 	vneg.f32	s15, s15
 8002a92:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
}

  WheelPWM target_pwm = wheel2pwm(target_vel);
 8002a96:	f107 0310 	add.w	r3, r7, #16
 8002a9a:	ed97 6a08 	vldr	s12, [r7, #32]
 8002a9e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002aa2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002aa6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002aaa:	eeb0 0a46 	vmov.f32	s0, s12
 8002aae:	eef0 0a66 	vmov.f32	s1, s13
 8002ab2:	eeb0 1a47 	vmov.f32	s2, s14
 8002ab6:	eef0 1a67 	vmov.f32	s3, s15
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fe64 	bl	8001788 <wheel2pwm>
  test_pwm.front_left = target_pwm.front_left;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8002af4 <movement_control+0x18c>)
 8002ac4:	6013      	str	r3, [r2, #0]
  test_pwm.front_right = target_pwm.front_right;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8002af4 <movement_control+0x18c>)
 8002aca:	6053      	str	r3, [r2, #4]
  test_pwm.rear_left = target_pwm.rear_left;
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	4a09      	ldr	r2, [pc, #36]	@ (8002af4 <movement_control+0x18c>)
 8002ad0:	6093      	str	r3, [r2, #8]
  test_pwm.rear_right = target_pwm.rear_right;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	4a07      	ldr	r2, [pc, #28]	@ (8002af4 <movement_control+0x18c>)
 8002ad6:	60d3      	str	r3, [r2, #12]
  wheels_control(target_pwm);
 8002ad8:	f107 0310 	add.w	r3, r7, #16
 8002adc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ade:	f7ff f8bb 	bl	8001c58 <wheels_control>
}
 8002ae2:	bf00      	nop
 8002ae4:	3730      	adds	r7, #48	@ 0x30
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000134 	.word	0x20000134
 8002af0:	20000124 	.word	0x20000124
 8002af4:	20000114 	.word	0x20000114

08002af8 <servo_move>:
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
  HAL_UART_Receive(&huart4, receive_buffer, sizeof(receive_buffer), 0xFFFF);
  target_servo->current_pos = (receive_buffer[8] << 8) + receive_buffer[7];
}

void servo_move(HTD45H_Servo* target_servo, uint16_t target_pos, uint16_t time) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	807b      	strh	r3, [r7, #2]
 8002b04:	4613      	mov	r3, r2
 8002b06:	803b      	strh	r3, [r7, #0]
  uint8_t send_buffer[10];
  send_buffer[0] = send_buffer[1] = FRAME_HEADER;
 8002b08:	2355      	movs	r3, #85	@ 0x55
 8002b0a:	737b      	strb	r3, [r7, #13]
 8002b0c:	7b7b      	ldrb	r3, [r7, #13]
 8002b0e:	733b      	strb	r3, [r7, #12]
  send_buffer[2] = 0x01 * 3 + 5;
 8002b10:	2308      	movs	r3, #8
 8002b12:	73bb      	strb	r3, [r7, #14]
  send_buffer[3] = CMD_SERVO_MOVE;
 8002b14:	2303      	movs	r3, #3
 8002b16:	73fb      	strb	r3, [r7, #15]
  send_buffer[4] = 0x01;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	743b      	strb	r3, [r7, #16]
  send_buffer[5] = GET_LOW_BYTE(time);
 8002b1c:	883b      	ldrh	r3, [r7, #0]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	747b      	strb	r3, [r7, #17]
  send_buffer[6] = GET_HIGH_BYTE(time);
 8002b22:	883b      	ldrh	r3, [r7, #0]
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	74bb      	strb	r3, [r7, #18]
  send_buffer[7] = target_servo->servo_id;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	74fb      	strb	r3, [r7, #19]
  send_buffer[8] = GET_LOW_BYTE(target_pos);
 8002b32:	887b      	ldrh	r3, [r7, #2]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	753b      	strb	r3, [r7, #20]
  send_buffer[9] = GET_HIGH_BYTE(target_pos);
 8002b38:	887b      	ldrh	r3, [r7, #2]
 8002b3a:	0a1b      	lsrs	r3, r3, #8
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	757b      	strb	r3, [r7, #21]
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
 8002b42:	f107 010c 	add.w	r1, r7, #12
 8002b46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b4a:	220a      	movs	r2, #10
 8002b4c:	489a      	ldr	r0, [pc, #616]	@ (8002db8 <servo_move+0x2c0>)
 8002b4e:	f002 fed5 	bl	80058fc <HAL_UART_Transmit>
  target_servo->current_pos = target_pos;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	887a      	ldrh	r2, [r7, #2]
 8002b56:	805a      	strh	r2, [r3, #2]

  switch (target_servo->servo_id) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	f200 810c 	bhi.w	8002d7c <servo_move+0x284>
 8002b64:	a201      	add	r2, pc, #4	@ (adr r2, 8002b6c <servo_move+0x74>)
 8002b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6a:	bf00      	nop
 8002b6c:	08002b7d 	.word	0x08002b7d
 8002b70:	08002bfd 	.word	0x08002bfd
 8002b74:	08002c7d 	.word	0x08002c7d
 8002b78:	08002cfd 	.word	0x08002cfd
    case 1:
      target_servo->current_degree = SERVO_ID1_POS_TO_ANGLE(target_pos);
 8002b7c:	887b      	ldrh	r3, [r7, #2]
 8002b7e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002b82:	d91c      	bls.n	8002bbe <servo_move+0xc6>
 8002b84:	887b      	ldrh	r3, [r7, #2]
 8002b86:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fd fc6e 	bl	800046c <__aeabi_i2d>
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	4b89      	ldr	r3, [pc, #548]	@ (8002dbc <servo_move+0x2c4>)
 8002b96:	f7fd fcd3 	bl	8000540 <__aeabi_dmul>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	a379      	add	r3, pc, #484	@ (adr r3, 8002d88 <servo_move+0x290>)
 8002ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba8:	f7fd fdf4 	bl	8000794 <__aeabi_ddiv>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f7fd ff74 	bl	8000aa0 <__aeabi_d2iz>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	b21b      	sxth	r3, r3
 8002bbc:	e01b      	b.n	8002bf6 <servo_move+0xfe>
 8002bbe:	887b      	ldrh	r3, [r7, #2]
 8002bc0:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fd fc51 	bl	800046c <__aeabi_i2d>
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	4b7c      	ldr	r3, [pc, #496]	@ (8002dc0 <servo_move+0x2c8>)
 8002bd0:	f7fd fcb6 	bl	8000540 <__aeabi_dmul>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	a36c      	add	r3, pc, #432	@ (adr r3, 8002d90 <servo_move+0x298>)
 8002bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be2:	f7fd fdd7 	bl	8000794 <__aeabi_ddiv>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	f7fd ff57 	bl	8000aa0 <__aeabi_d2iz>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	b21b      	sxth	r3, r3
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	8093      	strh	r3, [r2, #4]
      break;
 8002bfa:	e0c0      	b.n	8002d7e <servo_move+0x286>
    case 2:
      target_servo->current_degree = SERVO_ID2_POS_TO_ANGLE(target_pos);
 8002bfc:	887b      	ldrh	r3, [r7, #2]
 8002bfe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002c02:	d91c      	bls.n	8002c3e <servo_move+0x146>
 8002c04:	887b      	ldrh	r3, [r7, #2]
 8002c06:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fc2e 	bl	800046c <__aeabi_i2d>
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	4b69      	ldr	r3, [pc, #420]	@ (8002dbc <servo_move+0x2c4>)
 8002c16:	f7fd fc93 	bl	8000540 <__aeabi_dmul>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	4b67      	ldr	r3, [pc, #412]	@ (8002dc4 <servo_move+0x2cc>)
 8002c28:	f7fd fdb4 	bl	8000794 <__aeabi_ddiv>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4610      	mov	r0, r2
 8002c32:	4619      	mov	r1, r3
 8002c34:	f7fd ff34 	bl	8000aa0 <__aeabi_d2iz>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	b21b      	sxth	r3, r3
 8002c3c:	e01b      	b.n	8002c76 <servo_move+0x17e>
 8002c3e:	887b      	ldrh	r3, [r7, #2]
 8002c40:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fd fc11 	bl	800046c <__aeabi_i2d>
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	4b5c      	ldr	r3, [pc, #368]	@ (8002dc0 <servo_move+0x2c8>)
 8002c50:	f7fd fc76 	bl	8000540 <__aeabi_dmul>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	a34e      	add	r3, pc, #312	@ (adr r3, 8002d98 <servo_move+0x2a0>)
 8002c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c62:	f7fd fd97 	bl	8000794 <__aeabi_ddiv>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f7fd ff17 	bl	8000aa0 <__aeabi_d2iz>
 8002c72:	4603      	mov	r3, r0
 8002c74:	b21b      	sxth	r3, r3
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	8093      	strh	r3, [r2, #4]
      break;
 8002c7a:	e080      	b.n	8002d7e <servo_move+0x286>
    case 3:
      target_servo->current_degree = SERVO_ID3_POS_TO_ANGLE(target_pos);
 8002c7c:	887b      	ldrh	r3, [r7, #2]
 8002c7e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002c82:	d91c      	bls.n	8002cbe <servo_move+0x1c6>
 8002c84:	887b      	ldrh	r3, [r7, #2]
 8002c86:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd fbee 	bl	800046c <__aeabi_i2d>
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	4b49      	ldr	r3, [pc, #292]	@ (8002dbc <servo_move+0x2c4>)
 8002c96:	f7fd fc53 	bl	8000540 <__aeabi_dmul>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	a33f      	add	r3, pc, #252	@ (adr r3, 8002da0 <servo_move+0x2a8>)
 8002ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca8:	f7fd fd74 	bl	8000794 <__aeabi_ddiv>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	f7fd fef4 	bl	8000aa0 <__aeabi_d2iz>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	b21b      	sxth	r3, r3
 8002cbc:	e01b      	b.n	8002cf6 <servo_move+0x1fe>
 8002cbe:	887b      	ldrh	r3, [r7, #2]
 8002cc0:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fd fbd1 	bl	800046c <__aeabi_i2d>
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	4b3c      	ldr	r3, [pc, #240]	@ (8002dc0 <servo_move+0x2c8>)
 8002cd0:	f7fd fc36 	bl	8000540 <__aeabi_dmul>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	a332      	add	r3, pc, #200	@ (adr r3, 8002da8 <servo_move+0x2b0>)
 8002cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce2:	f7fd fd57 	bl	8000794 <__aeabi_ddiv>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4610      	mov	r0, r2
 8002cec:	4619      	mov	r1, r3
 8002cee:	f7fd fed7 	bl	8000aa0 <__aeabi_d2iz>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	b21b      	sxth	r3, r3
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	8093      	strh	r3, [r2, #4]
      break;
 8002cfa:	e040      	b.n	8002d7e <servo_move+0x286>
    case 4:
      target_servo->current_degree = SERVO_ID4_POS_TO_ANGLE(target_pos);
 8002cfc:	887b      	ldrh	r3, [r7, #2]
 8002cfe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002d02:	d91c      	bls.n	8002d3e <servo_move+0x246>
 8002d04:	887b      	ldrh	r3, [r7, #2]
 8002d06:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fd fbae 	bl	800046c <__aeabi_i2d>
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	4b29      	ldr	r3, [pc, #164]	@ (8002dbc <servo_move+0x2c4>)
 8002d16:	f7fd fc13 	bl	8000540 <__aeabi_dmul>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4610      	mov	r0, r2
 8002d20:	4619      	mov	r1, r3
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	4b28      	ldr	r3, [pc, #160]	@ (8002dc8 <servo_move+0x2d0>)
 8002d28:	f7fd fd34 	bl	8000794 <__aeabi_ddiv>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4610      	mov	r0, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	f7fd feb4 	bl	8000aa0 <__aeabi_d2iz>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	b21b      	sxth	r3, r3
 8002d3c:	e01b      	b.n	8002d76 <servo_move+0x27e>
 8002d3e:	887b      	ldrh	r3, [r7, #2]
 8002d40:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fd fb91 	bl	800046c <__aeabi_i2d>
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc0 <servo_move+0x2c8>)
 8002d50:	f7fd fbf6 	bl	8000540 <__aeabi_dmul>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	a314      	add	r3, pc, #80	@ (adr r3, 8002db0 <servo_move+0x2b8>)
 8002d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d62:	f7fd fd17 	bl	8000794 <__aeabi_ddiv>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	f7fd fe97 	bl	8000aa0 <__aeabi_d2iz>
 8002d72:	4603      	mov	r3, r0
 8002d74:	b21b      	sxth	r3, r3
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	8093      	strh	r3, [r2, #4]
      break;
 8002d7a:	e000      	b.n	8002d7e <servo_move+0x286>
    default:
      break;
 8002d7c:	bf00      	nop
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	00000000 	.word	0x00000000
 8002d8c:	40781000 	.word	0x40781000
 8002d90:	00000000 	.word	0x00000000
 8002d94:	c076d000 	.word	0xc076d000
 8002d98:	00000000 	.word	0x00000000
 8002d9c:	c0777000 	.word	0xc0777000
 8002da0:	00000000 	.word	0x00000000
 8002da4:	40777000 	.word	0x40777000
 8002da8:	00000000 	.word	0x00000000
 8002dac:	c0772000 	.word	0xc0772000
 8002db0:	00000000 	.word	0x00000000
 8002db4:	c0775000 	.word	0xc0775000
 8002db8:	200002e8 	.word	0x200002e8
 8002dbc:	40568000 	.word	0x40568000
 8002dc0:	c0568000 	.word	0xc0568000
 8002dc4:	40774000 	.word	0x40774000
 8002dc8:	40778000 	.word	0x40778000

08002dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	607b      	str	r3, [r7, #4]
 8002dd6:	4b10      	ldr	r3, [pc, #64]	@ (8002e18 <HAL_MspInit+0x4c>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dda:	4a0f      	ldr	r2, [pc, #60]	@ (8002e18 <HAL_MspInit+0x4c>)
 8002ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002de2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e18 <HAL_MspInit+0x4c>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	603b      	str	r3, [r7, #0]
 8002df2:	4b09      	ldr	r3, [pc, #36]	@ (8002e18 <HAL_MspInit+0x4c>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	4a08      	ldr	r2, [pc, #32]	@ (8002e18 <HAL_MspInit+0x4c>)
 8002df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dfe:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_MspInit+0x4c>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800

08002e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e20:	bf00      	nop
 8002e22:	e7fd      	b.n	8002e20 <NMI_Handler+0x4>

08002e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e28:	bf00      	nop
 8002e2a:	e7fd      	b.n	8002e28 <HardFault_Handler+0x4>

08002e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e30:	bf00      	nop
 8002e32:	e7fd      	b.n	8002e30 <MemManage_Handler+0x4>

08002e34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e38:	bf00      	nop
 8002e3a:	e7fd      	b.n	8002e38 <BusFault_Handler+0x4>

08002e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e40:	bf00      	nop
 8002e42:	e7fd      	b.n	8002e40 <UsageFault_Handler+0x4>

08002e44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e72:	f000 fd69 	bl	8003948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e80:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <SystemInit+0x20>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e86:	4a05      	ldr	r2, [pc, #20]	@ (8002e9c <SystemInit+0x20>)
 8002e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08c      	sub	sp, #48	@ 0x30
 8002ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ea6:	f107 030c 	add.w	r3, r7, #12
 8002eaa:	2224      	movs	r2, #36	@ 0x24
 8002eac:	2100      	movs	r1, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f003 f8e0 	bl	8006074 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb4:	1d3b      	adds	r3, r7, #4
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ebc:	4b22      	ldr	r3, [pc, #136]	@ (8002f48 <MX_TIM1_Init+0xa8>)
 8002ebe:	4a23      	ldr	r2, [pc, #140]	@ (8002f4c <MX_TIM1_Init+0xac>)
 8002ec0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ec2:	4b21      	ldr	r3, [pc, #132]	@ (8002f48 <MX_TIM1_Init+0xa8>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f48 <MX_TIM1_Init+0xa8>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002ece:	4b1e      	ldr	r3, [pc, #120]	@ (8002f48 <MX_TIM1_Init+0xa8>)
 8002ed0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ed4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f48 <MX_TIM1_Init+0xa8>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002edc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f48 <MX_TIM1_Init+0xa8>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee2:	4b19      	ldr	r3, [pc, #100]	@ (8002f48 <MX_TIM1_Init+0xa8>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002eec:	2300      	movs	r3, #0
 8002eee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8002ef8:	2305      	movs	r3, #5
 8002efa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002efc:	2300      	movs	r3, #0
 8002efe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f00:	2301      	movs	r3, #1
 8002f02:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f04:	2300      	movs	r3, #0
 8002f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8002f08:	2305      	movs	r3, #5
 8002f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002f0c:	f107 030c 	add.w	r3, r7, #12
 8002f10:	4619      	mov	r1, r3
 8002f12:	480d      	ldr	r0, [pc, #52]	@ (8002f48 <MX_TIM1_Init+0xa8>)
 8002f14:	f001 fe32 	bl	8004b7c <HAL_TIM_Encoder_Init>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002f1e:	f7fe fad3 	bl	80014c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f22:	2300      	movs	r3, #0
 8002f24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f2a:	1d3b      	adds	r3, r7, #4
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4806      	ldr	r0, [pc, #24]	@ (8002f48 <MX_TIM1_Init+0xa8>)
 8002f30:	f002 fc18 	bl	8005764 <HAL_TIMEx_MasterConfigSynchronization>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002f3a:	f7fe fac5 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002f3e:	bf00      	nop
 8002f40:	3730      	adds	r7, #48	@ 0x30
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000138 	.word	0x20000138
 8002f4c:	40010000 	.word	0x40010000

08002f50 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08e      	sub	sp, #56	@ 0x38
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f64:	f107 0320 	add.w	r3, r7, #32
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f6e:	1d3b      	adds	r3, r7, #4
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
 8002f7c:	615a      	str	r2, [r3, #20]
 8002f7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f80:	4b3d      	ldr	r3, [pc, #244]	@ (8003078 <MX_TIM2_Init+0x128>)
 8002f82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 8002f88:	4b3b      	ldr	r3, [pc, #236]	@ (8003078 <MX_TIM2_Init+0x128>)
 8002f8a:	2229      	movs	r2, #41	@ 0x29
 8002f8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f8e:	4b3a      	ldr	r3, [pc, #232]	@ (8003078 <MX_TIM2_Init+0x128>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8002f94:	4b38      	ldr	r3, [pc, #224]	@ (8003078 <MX_TIM2_Init+0x128>)
 8002f96:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002f9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f9c:	4b36      	ldr	r3, [pc, #216]	@ (8003078 <MX_TIM2_Init+0x128>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fa2:	4b35      	ldr	r3, [pc, #212]	@ (8003078 <MX_TIM2_Init+0x128>)
 8002fa4:	2280      	movs	r2, #128	@ 0x80
 8002fa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fa8:	4833      	ldr	r0, [pc, #204]	@ (8003078 <MX_TIM2_Init+0x128>)
 8002faa:	f001 fc05 	bl	80047b8 <HAL_TIM_Base_Init>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002fb4:	f7fe fa88 	bl	80014c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002fbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	482c      	ldr	r0, [pc, #176]	@ (8003078 <MX_TIM2_Init+0x128>)
 8002fc6:	f001 ffef 	bl	8004fa8 <HAL_TIM_ConfigClockSource>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002fd0:	f7fe fa7a 	bl	80014c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002fd4:	4828      	ldr	r0, [pc, #160]	@ (8003078 <MX_TIM2_Init+0x128>)
 8002fd6:	f001 fcaf 	bl	8004938 <HAL_TIM_PWM_Init>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002fe0:	f7fe fa72 	bl	80014c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002fec:	f107 0320 	add.w	r3, r7, #32
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4821      	ldr	r0, [pc, #132]	@ (8003078 <MX_TIM2_Init+0x128>)
 8002ff4:	f002 fbb6 	bl	8005764 <HAL_TIMEx_MasterConfigSynchronization>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002ffe:	f7fe fa63 	bl	80014c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003002:	2360      	movs	r3, #96	@ 0x60
 8003004:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003012:	1d3b      	adds	r3, r7, #4
 8003014:	2200      	movs	r2, #0
 8003016:	4619      	mov	r1, r3
 8003018:	4817      	ldr	r0, [pc, #92]	@ (8003078 <MX_TIM2_Init+0x128>)
 800301a:	f001 ff03 	bl	8004e24 <HAL_TIM_PWM_ConfigChannel>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003024:	f7fe fa50 	bl	80014c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003028:	1d3b      	adds	r3, r7, #4
 800302a:	2204      	movs	r2, #4
 800302c:	4619      	mov	r1, r3
 800302e:	4812      	ldr	r0, [pc, #72]	@ (8003078 <MX_TIM2_Init+0x128>)
 8003030:	f001 fef8 	bl	8004e24 <HAL_TIM_PWM_ConfigChannel>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800303a:	f7fe fa45 	bl	80014c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800303e:	1d3b      	adds	r3, r7, #4
 8003040:	2208      	movs	r2, #8
 8003042:	4619      	mov	r1, r3
 8003044:	480c      	ldr	r0, [pc, #48]	@ (8003078 <MX_TIM2_Init+0x128>)
 8003046:	f001 feed 	bl	8004e24 <HAL_TIM_PWM_ConfigChannel>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8003050:	f7fe fa3a 	bl	80014c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003054:	1d3b      	adds	r3, r7, #4
 8003056:	220c      	movs	r2, #12
 8003058:	4619      	mov	r1, r3
 800305a:	4807      	ldr	r0, [pc, #28]	@ (8003078 <MX_TIM2_Init+0x128>)
 800305c:	f001 fee2 	bl	8004e24 <HAL_TIM_PWM_ConfigChannel>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8003066:	f7fe fa2f 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800306a:	4803      	ldr	r0, [pc, #12]	@ (8003078 <MX_TIM2_Init+0x128>)
 800306c:	f000 fa9e 	bl	80035ac <HAL_TIM_MspPostInit>

}
 8003070:	bf00      	nop
 8003072:	3738      	adds	r7, #56	@ 0x38
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20000180 	.word	0x20000180

0800307c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08e      	sub	sp, #56	@ 0x38
 8003080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003082:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	609a      	str	r2, [r3, #8]
 800308e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003090:	f107 0320 	add.w	r3, r7, #32
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	611a      	str	r2, [r3, #16]
 80030a8:	615a      	str	r2, [r3, #20]
 80030aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003160 <MX_TIM3_Init+0xe4>)
 80030ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003164 <MX_TIM3_Init+0xe8>)
 80030b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 80030b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003160 <MX_TIM3_Init+0xe4>)
 80030b4:	2229      	movs	r2, #41	@ 0x29
 80030b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030b8:	4b29      	ldr	r3, [pc, #164]	@ (8003160 <MX_TIM3_Init+0xe4>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80030be:	4b28      	ldr	r3, [pc, #160]	@ (8003160 <MX_TIM3_Init+0xe4>)
 80030c0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80030c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030c6:	4b26      	ldr	r3, [pc, #152]	@ (8003160 <MX_TIM3_Init+0xe4>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030cc:	4b24      	ldr	r3, [pc, #144]	@ (8003160 <MX_TIM3_Init+0xe4>)
 80030ce:	2280      	movs	r2, #128	@ 0x80
 80030d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030d2:	4823      	ldr	r0, [pc, #140]	@ (8003160 <MX_TIM3_Init+0xe4>)
 80030d4:	f001 fb70 	bl	80047b8 <HAL_TIM_Base_Init>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80030de:	f7fe f9f3 	bl	80014c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030ec:	4619      	mov	r1, r3
 80030ee:	481c      	ldr	r0, [pc, #112]	@ (8003160 <MX_TIM3_Init+0xe4>)
 80030f0:	f001 ff5a 	bl	8004fa8 <HAL_TIM_ConfigClockSource>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80030fa:	f7fe f9e5 	bl	80014c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80030fe:	4818      	ldr	r0, [pc, #96]	@ (8003160 <MX_TIM3_Init+0xe4>)
 8003100:	f001 fc1a 	bl	8004938 <HAL_TIM_PWM_Init>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800310a:	f7fe f9dd 	bl	80014c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800310e:	2300      	movs	r3, #0
 8003110:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003112:	2300      	movs	r3, #0
 8003114:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003116:	f107 0320 	add.w	r3, r7, #32
 800311a:	4619      	mov	r1, r3
 800311c:	4810      	ldr	r0, [pc, #64]	@ (8003160 <MX_TIM3_Init+0xe4>)
 800311e:	f002 fb21 	bl	8005764 <HAL_TIMEx_MasterConfigSynchronization>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003128:	f7fe f9ce 	bl	80014c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800312c:	2360      	movs	r3, #96	@ 0x60
 800312e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800313c:	1d3b      	adds	r3, r7, #4
 800313e:	2200      	movs	r2, #0
 8003140:	4619      	mov	r1, r3
 8003142:	4807      	ldr	r0, [pc, #28]	@ (8003160 <MX_TIM3_Init+0xe4>)
 8003144:	f001 fe6e 	bl	8004e24 <HAL_TIM_PWM_ConfigChannel>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800314e:	f7fe f9bb 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003152:	4803      	ldr	r0, [pc, #12]	@ (8003160 <MX_TIM3_Init+0xe4>)
 8003154:	f000 fa2a 	bl	80035ac <HAL_TIM_MspPostInit>

}
 8003158:	bf00      	nop
 800315a:	3738      	adds	r7, #56	@ 0x38
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	200001c8 	.word	0x200001c8
 8003164:	40000400 	.word	0x40000400

08003168 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08c      	sub	sp, #48	@ 0x30
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800316e:	f107 030c 	add.w	r3, r7, #12
 8003172:	2224      	movs	r2, #36	@ 0x24
 8003174:	2100      	movs	r1, #0
 8003176:	4618      	mov	r0, r3
 8003178:	f002 ff7c 	bl	8006074 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800317c:	1d3b      	adds	r3, r7, #4
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003184:	4b20      	ldr	r3, [pc, #128]	@ (8003208 <MX_TIM4_Init+0xa0>)
 8003186:	4a21      	ldr	r2, [pc, #132]	@ (800320c <MX_TIM4_Init+0xa4>)
 8003188:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800318a:	4b1f      	ldr	r3, [pc, #124]	@ (8003208 <MX_TIM4_Init+0xa0>)
 800318c:	2200      	movs	r2, #0
 800318e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003190:	4b1d      	ldr	r3, [pc, #116]	@ (8003208 <MX_TIM4_Init+0xa0>)
 8003192:	2200      	movs	r2, #0
 8003194:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003196:	4b1c      	ldr	r3, [pc, #112]	@ (8003208 <MX_TIM4_Init+0xa0>)
 8003198:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800319c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800319e:	4b1a      	ldr	r3, [pc, #104]	@ (8003208 <MX_TIM4_Init+0xa0>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031a4:	4b18      	ldr	r3, [pc, #96]	@ (8003208 <MX_TIM4_Init+0xa0>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80031aa:	2303      	movs	r3, #3
 80031ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80031b2:	2301      	movs	r3, #1
 80031b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80031ba:	2305      	movs	r3, #5
 80031bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80031be:	2300      	movs	r3, #0
 80031c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80031c2:	2301      	movs	r3, #1
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80031c6:	2300      	movs	r3, #0
 80031c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 80031ca:	2305      	movs	r3, #5
 80031cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80031ce:	f107 030c 	add.w	r3, r7, #12
 80031d2:	4619      	mov	r1, r3
 80031d4:	480c      	ldr	r0, [pc, #48]	@ (8003208 <MX_TIM4_Init+0xa0>)
 80031d6:	f001 fcd1 	bl	8004b7c <HAL_TIM_Encoder_Init>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80031e0:	f7fe f972 	bl	80014c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031e4:	2300      	movs	r3, #0
 80031e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80031ec:	1d3b      	adds	r3, r7, #4
 80031ee:	4619      	mov	r1, r3
 80031f0:	4805      	ldr	r0, [pc, #20]	@ (8003208 <MX_TIM4_Init+0xa0>)
 80031f2:	f002 fab7 	bl	8005764 <HAL_TIMEx_MasterConfigSynchronization>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80031fc:	f7fe f964 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003200:	bf00      	nop
 8003202:	3730      	adds	r7, #48	@ 0x30
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	20000210 	.word	0x20000210
 800320c:	40000800 	.word	0x40000800

08003210 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08c      	sub	sp, #48	@ 0x30
 8003214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003216:	f107 030c 	add.w	r3, r7, #12
 800321a:	2224      	movs	r2, #36	@ 0x24
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f002 ff28 	bl	8006074 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003224:	1d3b      	adds	r3, r7, #4
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800322c:	4b20      	ldr	r3, [pc, #128]	@ (80032b0 <MX_TIM5_Init+0xa0>)
 800322e:	4a21      	ldr	r2, [pc, #132]	@ (80032b4 <MX_TIM5_Init+0xa4>)
 8003230:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003232:	4b1f      	ldr	r3, [pc, #124]	@ (80032b0 <MX_TIM5_Init+0xa0>)
 8003234:	2200      	movs	r2, #0
 8003236:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003238:	4b1d      	ldr	r3, [pc, #116]	@ (80032b0 <MX_TIM5_Init+0xa0>)
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800323e:	4b1c      	ldr	r3, [pc, #112]	@ (80032b0 <MX_TIM5_Init+0xa0>)
 8003240:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003244:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003246:	4b1a      	ldr	r3, [pc, #104]	@ (80032b0 <MX_TIM5_Init+0xa0>)
 8003248:	2200      	movs	r2, #0
 800324a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800324c:	4b18      	ldr	r3, [pc, #96]	@ (80032b0 <MX_TIM5_Init+0xa0>)
 800324e:	2200      	movs	r2, #0
 8003250:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003252:	2303      	movs	r3, #3
 8003254:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800325a:	2301      	movs	r3, #1
 800325c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800325e:	2300      	movs	r3, #0
 8003260:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8003262:	2305      	movs	r3, #5
 8003264:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003266:	2300      	movs	r3, #0
 8003268:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800326a:	2301      	movs	r3, #1
 800326c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800326e:	2300      	movs	r3, #0
 8003270:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8003272:	2305      	movs	r3, #5
 8003274:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003276:	f107 030c 	add.w	r3, r7, #12
 800327a:	4619      	mov	r1, r3
 800327c:	480c      	ldr	r0, [pc, #48]	@ (80032b0 <MX_TIM5_Init+0xa0>)
 800327e:	f001 fc7d 	bl	8004b7c <HAL_TIM_Encoder_Init>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003288:	f7fe f91e 	bl	80014c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800328c:	2300      	movs	r3, #0
 800328e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003290:	2300      	movs	r3, #0
 8003292:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003294:	1d3b      	adds	r3, r7, #4
 8003296:	4619      	mov	r1, r3
 8003298:	4805      	ldr	r0, [pc, #20]	@ (80032b0 <MX_TIM5_Init+0xa0>)
 800329a:	f002 fa63 	bl	8005764 <HAL_TIMEx_MasterConfigSynchronization>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80032a4:	f7fe f910 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80032a8:	bf00      	nop
 80032aa:	3730      	adds	r7, #48	@ 0x30
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20000258 	.word	0x20000258
 80032b4:	40000c00 	.word	0x40000c00

080032b8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08c      	sub	sp, #48	@ 0x30
 80032bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80032be:	f107 030c 	add.w	r3, r7, #12
 80032c2:	2224      	movs	r2, #36	@ 0x24
 80032c4:	2100      	movs	r1, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f002 fed4 	bl	8006074 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032cc:	1d3b      	adds	r3, r7, #4
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80032d4:	4b22      	ldr	r3, [pc, #136]	@ (8003360 <MX_TIM8_Init+0xa8>)
 80032d6:	4a23      	ldr	r2, [pc, #140]	@ (8003364 <MX_TIM8_Init+0xac>)
 80032d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80032da:	4b21      	ldr	r3, [pc, #132]	@ (8003360 <MX_TIM8_Init+0xa8>)
 80032dc:	2200      	movs	r2, #0
 80032de:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003360 <MX_TIM8_Init+0xa8>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80032e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003360 <MX_TIM8_Init+0xa8>)
 80032e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032ec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003360 <MX_TIM8_Init+0xa8>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80032f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003360 <MX_TIM8_Init+0xa8>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032fa:	4b19      	ldr	r3, [pc, #100]	@ (8003360 <MX_TIM8_Init+0xa8>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003300:	2303      	movs	r3, #3
 8003302:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003304:	2300      	movs	r3, #0
 8003306:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003308:	2301      	movs	r3, #1
 800330a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800330c:	2300      	movs	r3, #0
 800330e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003314:	2300      	movs	r3, #0
 8003316:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003318:	2301      	movs	r3, #1
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800331c:	2300      	movs	r3, #0
 800331e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003324:	f107 030c 	add.w	r3, r7, #12
 8003328:	4619      	mov	r1, r3
 800332a:	480d      	ldr	r0, [pc, #52]	@ (8003360 <MX_TIM8_Init+0xa8>)
 800332c:	f001 fc26 	bl	8004b7c <HAL_TIM_Encoder_Init>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8003336:	f7fe f8c7 	bl	80014c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800333a:	2300      	movs	r3, #0
 800333c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800333e:	2300      	movs	r3, #0
 8003340:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003342:	1d3b      	adds	r3, r7, #4
 8003344:	4619      	mov	r1, r3
 8003346:	4806      	ldr	r0, [pc, #24]	@ (8003360 <MX_TIM8_Init+0xa8>)
 8003348:	f002 fa0c 	bl	8005764 <HAL_TIMEx_MasterConfigSynchronization>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8003352:	f7fe f8b9 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003356:	bf00      	nop
 8003358:	3730      	adds	r7, #48	@ 0x30
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	200002a0 	.word	0x200002a0
 8003364:	40010400 	.word	0x40010400

08003368 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b090      	sub	sp, #64	@ 0x40
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003370:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a65      	ldr	r2, [pc, #404]	@ (800351c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d12d      	bne.n	80033e6 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800338e:	4b64      	ldr	r3, [pc, #400]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003392:	4a63      	ldr	r2, [pc, #396]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	6453      	str	r3, [r2, #68]	@ 0x44
 800339a:	4b61      	ldr	r3, [pc, #388]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033aa:	4b5d      	ldr	r3, [pc, #372]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ae:	4a5c      	ldr	r2, [pc, #368]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80033b0:	f043 0310 	orr.w	r3, r3, #16
 80033b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033b6:	4b5a      	ldr	r3, [pc, #360]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	627b      	str	r3, [r7, #36]	@ 0x24
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80033c2:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80033c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c8:	2302      	movs	r3, #2
 80033ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d0:	2300      	movs	r3, #0
 80033d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80033d4:	2301      	movs	r3, #1
 80033d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033dc:	4619      	mov	r1, r3
 80033de:	4851      	ldr	r0, [pc, #324]	@ (8003524 <HAL_TIM_Encoder_MspInit+0x1bc>)
 80033e0:	f000 fbdc 	bl	8003b9c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80033e4:	e095      	b.n	8003512 <HAL_TIM_Encoder_MspInit+0x1aa>
  else if(tim_encoderHandle->Instance==TIM4)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a4f      	ldr	r2, [pc, #316]	@ (8003528 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d12d      	bne.n	800344c <HAL_TIM_Encoder_MspInit+0xe4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033f0:	2300      	movs	r3, #0
 80033f2:	623b      	str	r3, [r7, #32]
 80033f4:	4b4a      	ldr	r3, [pc, #296]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80033f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f8:	4a49      	ldr	r2, [pc, #292]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80033fa:	f043 0304 	orr.w	r3, r3, #4
 80033fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003400:	4b47      	ldr	r3, [pc, #284]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	623b      	str	r3, [r7, #32]
 800340a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800340c:	2300      	movs	r3, #0
 800340e:	61fb      	str	r3, [r7, #28]
 8003410:	4b43      	ldr	r3, [pc, #268]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003414:	4a42      	ldr	r2, [pc, #264]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003416:	f043 0308 	orr.w	r3, r3, #8
 800341a:	6313      	str	r3, [r2, #48]	@ 0x30
 800341c:	4b40      	ldr	r3, [pc, #256]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	61fb      	str	r3, [r7, #28]
 8003426:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003428:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800342c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342e:	2302      	movs	r3, #2
 8003430:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003432:	2300      	movs	r3, #0
 8003434:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003436:	2300      	movs	r3, #0
 8003438:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800343a:	2302      	movs	r3, #2
 800343c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800343e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003442:	4619      	mov	r1, r3
 8003444:	4839      	ldr	r0, [pc, #228]	@ (800352c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003446:	f000 fba9 	bl	8003b9c <HAL_GPIO_Init>
}
 800344a:	e062      	b.n	8003512 <HAL_TIM_Encoder_MspInit+0x1aa>
  else if(tim_encoderHandle->Instance==TIM5)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a37      	ldr	r2, [pc, #220]	@ (8003530 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d12c      	bne.n	80034b0 <HAL_TIM_Encoder_MspInit+0x148>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	4b31      	ldr	r3, [pc, #196]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	4a30      	ldr	r2, [pc, #192]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003460:	f043 0308 	orr.w	r3, r3, #8
 8003464:	6413      	str	r3, [r2, #64]	@ 0x40
 8003466:	4b2e      	ldr	r3, [pc, #184]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	61bb      	str	r3, [r7, #24]
 8003470:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	4b2a      	ldr	r3, [pc, #168]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347a:	4a29      	ldr	r2, [pc, #164]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6313      	str	r3, [r2, #48]	@ 0x30
 8003482:	4b27      	ldr	r3, [pc, #156]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800348e:	2303      	movs	r3, #3
 8003490:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003492:	2302      	movs	r3, #2
 8003494:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003496:	2300      	movs	r3, #0
 8003498:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349a:	2300      	movs	r3, #0
 800349c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800349e:	2302      	movs	r3, #2
 80034a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034a6:	4619      	mov	r1, r3
 80034a8:	4822      	ldr	r0, [pc, #136]	@ (8003534 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80034aa:	f000 fb77 	bl	8003b9c <HAL_GPIO_Init>
}
 80034ae:	e030      	b.n	8003512 <HAL_TIM_Encoder_MspInit+0x1aa>
  else if(tim_encoderHandle->Instance==TIM8)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a20      	ldr	r2, [pc, #128]	@ (8003538 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d12b      	bne.n	8003512 <HAL_TIM_Encoder_MspInit+0x1aa>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	4b18      	ldr	r3, [pc, #96]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80034c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c2:	4a17      	ldr	r2, [pc, #92]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80034c4:	f043 0302 	orr.w	r3, r3, #2
 80034c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80034ca:	4b15      	ldr	r3, [pc, #84]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80034cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	613b      	str	r3, [r7, #16]
 80034d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	4b11      	ldr	r3, [pc, #68]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	4a10      	ldr	r2, [pc, #64]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80034e0:	f043 0304 	orr.w	r3, r3, #4
 80034e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034f2:	23c0      	movs	r3, #192	@ 0xc0
 80034f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f6:	2302      	movs	r3, #2
 80034f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fe:	2300      	movs	r3, #0
 8003500:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003502:	2303      	movs	r3, #3
 8003504:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003506:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800350a:	4619      	mov	r1, r3
 800350c:	480b      	ldr	r0, [pc, #44]	@ (800353c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800350e:	f000 fb45 	bl	8003b9c <HAL_GPIO_Init>
}
 8003512:	bf00      	nop
 8003514:	3740      	adds	r7, #64	@ 0x40
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40010000 	.word	0x40010000
 8003520:	40023800 	.word	0x40023800
 8003524:	40021000 	.word	0x40021000
 8003528:	40000800 	.word	0x40000800
 800352c:	40020c00 	.word	0x40020c00
 8003530:	40000c00 	.word	0x40000c00
 8003534:	40020000 	.word	0x40020000
 8003538:	40010400 	.word	0x40010400
 800353c:	40020800 	.word	0x40020800

08003540 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003550:	d10e      	bne.n	8003570 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	4b13      	ldr	r3, [pc, #76]	@ (80035a4 <HAL_TIM_Base_MspInit+0x64>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	4a12      	ldr	r2, [pc, #72]	@ (80035a4 <HAL_TIM_Base_MspInit+0x64>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	6413      	str	r3, [r2, #64]	@ 0x40
 8003562:	4b10      	ldr	r3, [pc, #64]	@ (80035a4 <HAL_TIM_Base_MspInit+0x64>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800356e:	e012      	b.n	8003596 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a0c      	ldr	r2, [pc, #48]	@ (80035a8 <HAL_TIM_Base_MspInit+0x68>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d10d      	bne.n	8003596 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	4b09      	ldr	r3, [pc, #36]	@ (80035a4 <HAL_TIM_Base_MspInit+0x64>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003582:	4a08      	ldr	r2, [pc, #32]	@ (80035a4 <HAL_TIM_Base_MspInit+0x64>)
 8003584:	f043 0302 	orr.w	r3, r3, #2
 8003588:	6413      	str	r3, [r2, #64]	@ 0x40
 800358a:	4b06      	ldr	r3, [pc, #24]	@ (80035a4 <HAL_TIM_Base_MspInit+0x64>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	68bb      	ldr	r3, [r7, #8]
}
 8003596:	bf00      	nop
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40000400 	.word	0x40000400

080035ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08a      	sub	sp, #40	@ 0x28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b4:	f107 0314 	add.w	r3, r7, #20
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	60da      	str	r2, [r3, #12]
 80035c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035cc:	d13c      	bne.n	8003648 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	4b31      	ldr	r3, [pc, #196]	@ (8003698 <HAL_TIM_MspPostInit+0xec>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	4a30      	ldr	r2, [pc, #192]	@ (8003698 <HAL_TIM_MspPostInit+0xec>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80035de:	4b2e      	ldr	r3, [pc, #184]	@ (8003698 <HAL_TIM_MspPostInit+0xec>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003698 <HAL_TIM_MspPostInit+0xec>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f2:	4a29      	ldr	r2, [pc, #164]	@ (8003698 <HAL_TIM_MspPostInit+0xec>)
 80035f4:	f043 0302 	orr.w	r3, r3, #2
 80035f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035fa:	4b27      	ldr	r3, [pc, #156]	@ (8003698 <HAL_TIM_MspPostInit+0xec>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8003606:	232c      	movs	r3, #44	@ 0x2c
 8003608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360a:	2302      	movs	r3, #2
 800360c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003612:	2300      	movs	r3, #0
 8003614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003616:	2301      	movs	r3, #1
 8003618:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361a:	f107 0314 	add.w	r3, r7, #20
 800361e:	4619      	mov	r1, r3
 8003620:	481e      	ldr	r0, [pc, #120]	@ (800369c <HAL_TIM_MspPostInit+0xf0>)
 8003622:	f000 fabb 	bl	8003b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003626:	2308      	movs	r3, #8
 8003628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362a:	2302      	movs	r3, #2
 800362c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003632:	2300      	movs	r3, #0
 8003634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003636:	2301      	movs	r3, #1
 8003638:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800363a:	f107 0314 	add.w	r3, r7, #20
 800363e:	4619      	mov	r1, r3
 8003640:	4817      	ldr	r0, [pc, #92]	@ (80036a0 <HAL_TIM_MspPostInit+0xf4>)
 8003642:	f000 faab 	bl	8003b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003646:	e022      	b.n	800368e <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM3)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a15      	ldr	r2, [pc, #84]	@ (80036a4 <HAL_TIM_MspPostInit+0xf8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d11d      	bne.n	800368e <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	4b10      	ldr	r3, [pc, #64]	@ (8003698 <HAL_TIM_MspPostInit+0xec>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	4a0f      	ldr	r2, [pc, #60]	@ (8003698 <HAL_TIM_MspPostInit+0xec>)
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	6313      	str	r3, [r2, #48]	@ 0x30
 8003662:	4b0d      	ldr	r3, [pc, #52]	@ (8003698 <HAL_TIM_MspPostInit+0xec>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	60bb      	str	r3, [r7, #8]
 800366c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800366e:	2340      	movs	r3, #64	@ 0x40
 8003670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003672:	2302      	movs	r3, #2
 8003674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367a:	2300      	movs	r3, #0
 800367c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800367e:	2302      	movs	r3, #2
 8003680:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003682:	f107 0314 	add.w	r3, r7, #20
 8003686:	4619      	mov	r1, r3
 8003688:	4804      	ldr	r0, [pc, #16]	@ (800369c <HAL_TIM_MspPostInit+0xf0>)
 800368a:	f000 fa87 	bl	8003b9c <HAL_GPIO_Init>
}
 800368e:	bf00      	nop
 8003690:	3728      	adds	r7, #40	@ 0x28
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800
 800369c:	40020000 	.word	0x40020000
 80036a0:	40020400 	.word	0x40020400
 80036a4:	40000400 	.word	0x40000400

080036a8 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80036ac:	4b11      	ldr	r3, [pc, #68]	@ (80036f4 <MX_UART4_Init+0x4c>)
 80036ae:	4a12      	ldr	r2, [pc, #72]	@ (80036f8 <MX_UART4_Init+0x50>)
 80036b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80036b2:	4b10      	ldr	r3, [pc, #64]	@ (80036f4 <MX_UART4_Init+0x4c>)
 80036b4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80036b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80036ba:	4b0e      	ldr	r3, [pc, #56]	@ (80036f4 <MX_UART4_Init+0x4c>)
 80036bc:	2200      	movs	r2, #0
 80036be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80036c0:	4b0c      	ldr	r3, [pc, #48]	@ (80036f4 <MX_UART4_Init+0x4c>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80036c6:	4b0b      	ldr	r3, [pc, #44]	@ (80036f4 <MX_UART4_Init+0x4c>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80036cc:	4b09      	ldr	r3, [pc, #36]	@ (80036f4 <MX_UART4_Init+0x4c>)
 80036ce:	220c      	movs	r2, #12
 80036d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036d2:	4b08      	ldr	r3, [pc, #32]	@ (80036f4 <MX_UART4_Init+0x4c>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80036d8:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <MX_UART4_Init+0x4c>)
 80036da:	2200      	movs	r2, #0
 80036dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80036de:	4805      	ldr	r0, [pc, #20]	@ (80036f4 <MX_UART4_Init+0x4c>)
 80036e0:	f002 f8bc 	bl	800585c <HAL_UART_Init>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80036ea:	f7fd feed 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	200002e8 	.word	0x200002e8
 80036f8:	40004c00 	.word	0x40004c00

080036fc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003700:	4b11      	ldr	r3, [pc, #68]	@ (8003748 <MX_USART1_UART_Init+0x4c>)
 8003702:	4a12      	ldr	r2, [pc, #72]	@ (800374c <MX_USART1_UART_Init+0x50>)
 8003704:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003706:	4b10      	ldr	r3, [pc, #64]	@ (8003748 <MX_USART1_UART_Init+0x4c>)
 8003708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800370c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800370e:	4b0e      	ldr	r3, [pc, #56]	@ (8003748 <MX_USART1_UART_Init+0x4c>)
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003714:	4b0c      	ldr	r3, [pc, #48]	@ (8003748 <MX_USART1_UART_Init+0x4c>)
 8003716:	2200      	movs	r2, #0
 8003718:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800371a:	4b0b      	ldr	r3, [pc, #44]	@ (8003748 <MX_USART1_UART_Init+0x4c>)
 800371c:	2200      	movs	r2, #0
 800371e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003720:	4b09      	ldr	r3, [pc, #36]	@ (8003748 <MX_USART1_UART_Init+0x4c>)
 8003722:	220c      	movs	r2, #12
 8003724:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003726:	4b08      	ldr	r3, [pc, #32]	@ (8003748 <MX_USART1_UART_Init+0x4c>)
 8003728:	2200      	movs	r2, #0
 800372a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800372c:	4b06      	ldr	r3, [pc, #24]	@ (8003748 <MX_USART1_UART_Init+0x4c>)
 800372e:	2200      	movs	r2, #0
 8003730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003732:	4805      	ldr	r0, [pc, #20]	@ (8003748 <MX_USART1_UART_Init+0x4c>)
 8003734:	f002 f892 	bl	800585c <HAL_UART_Init>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800373e:	f7fd fec3 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003742:	bf00      	nop
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000330 	.word	0x20000330
 800374c:	40011000 	.word	0x40011000

08003750 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08c      	sub	sp, #48	@ 0x30
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003758:	f107 031c 	add.w	r3, r7, #28
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a33      	ldr	r2, [pc, #204]	@ (800383c <HAL_UART_MspInit+0xec>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d12d      	bne.n	80037ce <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	4b32      	ldr	r3, [pc, #200]	@ (8003840 <HAL_UART_MspInit+0xf0>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377a:	4a31      	ldr	r2, [pc, #196]	@ (8003840 <HAL_UART_MspInit+0xf0>)
 800377c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003780:	6413      	str	r3, [r2, #64]	@ 0x40
 8003782:	4b2f      	ldr	r3, [pc, #188]	@ (8003840 <HAL_UART_MspInit+0xf0>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	4b2b      	ldr	r3, [pc, #172]	@ (8003840 <HAL_UART_MspInit+0xf0>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003796:	4a2a      	ldr	r2, [pc, #168]	@ (8003840 <HAL_UART_MspInit+0xf0>)
 8003798:	f043 0304 	orr.w	r3, r3, #4
 800379c:	6313      	str	r3, [r2, #48]	@ 0x30
 800379e:	4b28      	ldr	r3, [pc, #160]	@ (8003840 <HAL_UART_MspInit+0xf0>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80037aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80037ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b0:	2302      	movs	r3, #2
 80037b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b8:	2303      	movs	r3, #3
 80037ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80037bc:	2308      	movs	r3, #8
 80037be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037c0:	f107 031c 	add.w	r3, r7, #28
 80037c4:	4619      	mov	r1, r3
 80037c6:	481f      	ldr	r0, [pc, #124]	@ (8003844 <HAL_UART_MspInit+0xf4>)
 80037c8:	f000 f9e8 	bl	8003b9c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80037cc:	e031      	b.n	8003832 <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003848 <HAL_UART_MspInit+0xf8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d12c      	bne.n	8003832 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80037d8:	2300      	movs	r3, #0
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	4b18      	ldr	r3, [pc, #96]	@ (8003840 <HAL_UART_MspInit+0xf0>)
 80037de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e0:	4a17      	ldr	r2, [pc, #92]	@ (8003840 <HAL_UART_MspInit+0xf0>)
 80037e2:	f043 0310 	orr.w	r3, r3, #16
 80037e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80037e8:	4b15      	ldr	r3, [pc, #84]	@ (8003840 <HAL_UART_MspInit+0xf0>)
 80037ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	4b11      	ldr	r3, [pc, #68]	@ (8003840 <HAL_UART_MspInit+0xf0>)
 80037fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fc:	4a10      	ldr	r2, [pc, #64]	@ (8003840 <HAL_UART_MspInit+0xf0>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6313      	str	r3, [r2, #48]	@ 0x30
 8003804:	4b0e      	ldr	r3, [pc, #56]	@ (8003840 <HAL_UART_MspInit+0xf0>)
 8003806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003810:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003816:	2302      	movs	r3, #2
 8003818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381a:	2300      	movs	r3, #0
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800381e:	2303      	movs	r3, #3
 8003820:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003822:	2307      	movs	r3, #7
 8003824:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003826:	f107 031c 	add.w	r3, r7, #28
 800382a:	4619      	mov	r1, r3
 800382c:	4807      	ldr	r0, [pc, #28]	@ (800384c <HAL_UART_MspInit+0xfc>)
 800382e:	f000 f9b5 	bl	8003b9c <HAL_GPIO_Init>
}
 8003832:	bf00      	nop
 8003834:	3730      	adds	r7, #48	@ 0x30
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40004c00 	.word	0x40004c00
 8003840:	40023800 	.word	0x40023800
 8003844:	40020800 	.word	0x40020800
 8003848:	40011000 	.word	0x40011000
 800384c:	40020000 	.word	0x40020000

08003850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003850:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003888 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003854:	f7ff fb12 	bl	8002e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003858:	480c      	ldr	r0, [pc, #48]	@ (800388c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800385a:	490d      	ldr	r1, [pc, #52]	@ (8003890 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800385c:	4a0d      	ldr	r2, [pc, #52]	@ (8003894 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800385e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003860:	e002      	b.n	8003868 <LoopCopyDataInit>

08003862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003866:	3304      	adds	r3, #4

08003868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800386a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800386c:	d3f9      	bcc.n	8003862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800386e:	4a0a      	ldr	r2, [pc, #40]	@ (8003898 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003870:	4c0a      	ldr	r4, [pc, #40]	@ (800389c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003874:	e001      	b.n	800387a <LoopFillZerobss>

08003876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003878:	3204      	adds	r2, #4

0800387a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800387a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800387c:	d3fb      	bcc.n	8003876 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800387e:	f002 fc07 	bl	8006090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003882:	f7fd fce9 	bl	8001258 <main>
  bx  lr    
 8003886:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003888:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800388c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003890:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8003894:	08006870 	.word	0x08006870
  ldr r2, =_sbss
 8003898:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 800389c:	200004b4 	.word	0x200004b4

080038a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038a0:	e7fe      	b.n	80038a0 <ADC_IRQHandler>
	...

080038a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038a8:	4b0e      	ldr	r3, [pc, #56]	@ (80038e4 <HAL_Init+0x40>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a0d      	ldr	r2, [pc, #52]	@ (80038e4 <HAL_Init+0x40>)
 80038ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038b4:	4b0b      	ldr	r3, [pc, #44]	@ (80038e4 <HAL_Init+0x40>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a0a      	ldr	r2, [pc, #40]	@ (80038e4 <HAL_Init+0x40>)
 80038ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038c0:	4b08      	ldr	r3, [pc, #32]	@ (80038e4 <HAL_Init+0x40>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a07      	ldr	r2, [pc, #28]	@ (80038e4 <HAL_Init+0x40>)
 80038c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038cc:	2003      	movs	r0, #3
 80038ce:	f000 f931 	bl	8003b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038d2:	200f      	movs	r0, #15
 80038d4:	f000 f808 	bl	80038e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038d8:	f7ff fa78 	bl	8002dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40023c00 	.word	0x40023c00

080038e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038f0:	4b12      	ldr	r3, [pc, #72]	@ (800393c <HAL_InitTick+0x54>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4b12      	ldr	r3, [pc, #72]	@ (8003940 <HAL_InitTick+0x58>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	4619      	mov	r1, r3
 80038fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003902:	fbb2 f3f3 	udiv	r3, r2, r3
 8003906:	4618      	mov	r0, r3
 8003908:	f000 f93b 	bl	8003b82 <HAL_SYSTICK_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e00e      	b.n	8003934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b0f      	cmp	r3, #15
 800391a:	d80a      	bhi.n	8003932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800391c:	2200      	movs	r2, #0
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003924:	f000 f911 	bl	8003b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003928:	4a06      	ldr	r2, [pc, #24]	@ (8003944 <HAL_InitTick+0x5c>)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	e000      	b.n	8003934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	20000078 	.word	0x20000078
 8003940:	20000080 	.word	0x20000080
 8003944:	2000007c 	.word	0x2000007c

08003948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800394c:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <HAL_IncTick+0x20>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	4b06      	ldr	r3, [pc, #24]	@ (800396c <HAL_IncTick+0x24>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4413      	add	r3, r2
 8003958:	4a04      	ldr	r2, [pc, #16]	@ (800396c <HAL_IncTick+0x24>)
 800395a:	6013      	str	r3, [r2, #0]
}
 800395c:	bf00      	nop
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	20000080 	.word	0x20000080
 800396c:	20000378 	.word	0x20000378

08003970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return uwTick;
 8003974:	4b03      	ldr	r3, [pc, #12]	@ (8003984 <HAL_GetTick+0x14>)
 8003976:	681b      	ldr	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	20000378 	.word	0x20000378

08003988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003990:	f7ff ffee 	bl	8003970 <HAL_GetTick>
 8003994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039a0:	d005      	beq.n	80039ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039a2:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <HAL_Delay+0x44>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4413      	add	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039ae:	bf00      	nop
 80039b0:	f7ff ffde 	bl	8003970 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d8f7      	bhi.n	80039b0 <HAL_Delay+0x28>
  {
  }
}
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000080 	.word	0x20000080

080039d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039ec:	4013      	ands	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a02:	4a04      	ldr	r2, [pc, #16]	@ (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	60d3      	str	r3, [r2, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a1c:	4b04      	ldr	r3, [pc, #16]	@ (8003a30 <__NVIC_GetPriorityGrouping+0x18>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	f003 0307 	and.w	r3, r3, #7
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	6039      	str	r1, [r7, #0]
 8003a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	db0a      	blt.n	8003a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	490c      	ldr	r1, [pc, #48]	@ (8003a80 <__NVIC_SetPriority+0x4c>)
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	0112      	lsls	r2, r2, #4
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	440b      	add	r3, r1
 8003a58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a5c:	e00a      	b.n	8003a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	4908      	ldr	r1, [pc, #32]	@ (8003a84 <__NVIC_SetPriority+0x50>)
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	3b04      	subs	r3, #4
 8003a6c:	0112      	lsls	r2, r2, #4
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	440b      	add	r3, r1
 8003a72:	761a      	strb	r2, [r3, #24]
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	e000e100 	.word	0xe000e100
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b089      	sub	sp, #36	@ 0x24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f1c3 0307 	rsb	r3, r3, #7
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	bf28      	it	cs
 8003aa6:	2304      	movcs	r3, #4
 8003aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3304      	adds	r3, #4
 8003aae:	2b06      	cmp	r3, #6
 8003ab0:	d902      	bls.n	8003ab8 <NVIC_EncodePriority+0x30>
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3b03      	subs	r3, #3
 8003ab6:	e000      	b.n	8003aba <NVIC_EncodePriority+0x32>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003abc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43da      	mvns	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	401a      	ands	r2, r3
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ad0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ada:	43d9      	mvns	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae0:	4313      	orrs	r3, r2
         );
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3724      	adds	r7, #36	@ 0x24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b00:	d301      	bcc.n	8003b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b02:	2301      	movs	r3, #1
 8003b04:	e00f      	b.n	8003b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b06:	4a0a      	ldr	r2, [pc, #40]	@ (8003b30 <SysTick_Config+0x40>)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b0e:	210f      	movs	r1, #15
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b14:	f7ff ff8e 	bl	8003a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b18:	4b05      	ldr	r3, [pc, #20]	@ (8003b30 <SysTick_Config+0x40>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b1e:	4b04      	ldr	r3, [pc, #16]	@ (8003b30 <SysTick_Config+0x40>)
 8003b20:	2207      	movs	r2, #7
 8003b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	e000e010 	.word	0xe000e010

08003b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff ff47 	bl	80039d0 <__NVIC_SetPriorityGrouping>
}
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b086      	sub	sp, #24
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	4603      	mov	r3, r0
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b5c:	f7ff ff5c 	bl	8003a18 <__NVIC_GetPriorityGrouping>
 8003b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	6978      	ldr	r0, [r7, #20]
 8003b68:	f7ff ff8e 	bl	8003a88 <NVIC_EncodePriority>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b72:	4611      	mov	r1, r2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff ff5d 	bl	8003a34 <__NVIC_SetPriority>
}
 8003b7a:	bf00      	nop
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff ffb0 	bl	8003af0 <SysTick_Config>
 8003b90:	4603      	mov	r3, r0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b089      	sub	sp, #36	@ 0x24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
 8003bb6:	e16b      	b.n	8003e90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bb8:	2201      	movs	r2, #1
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	f040 815a 	bne.w	8003e8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d005      	beq.n	8003bee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d130      	bne.n	8003c50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4013      	ands	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c24:	2201      	movs	r2, #1
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4013      	ands	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	091b      	lsrs	r3, r3, #4
 8003c3a:	f003 0201 	and.w	r2, r3, #1
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 0303 	and.w	r3, r3, #3
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d017      	beq.n	8003c8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	2203      	movs	r2, #3
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4013      	ands	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d123      	bne.n	8003ce0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	08da      	lsrs	r2, r3, #3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3208      	adds	r2, #8
 8003ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	220f      	movs	r2, #15
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	08da      	lsrs	r2, r3, #3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3208      	adds	r2, #8
 8003cda:	69b9      	ldr	r1, [r7, #24]
 8003cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	2203      	movs	r2, #3
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 0203 	and.w	r2, r3, #3
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 80b4 	beq.w	8003e8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	4b60      	ldr	r3, [pc, #384]	@ (8003ea8 <HAL_GPIO_Init+0x30c>)
 8003d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2a:	4a5f      	ldr	r2, [pc, #380]	@ (8003ea8 <HAL_GPIO_Init+0x30c>)
 8003d2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d32:	4b5d      	ldr	r3, [pc, #372]	@ (8003ea8 <HAL_GPIO_Init+0x30c>)
 8003d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d3e:	4a5b      	ldr	r2, [pc, #364]	@ (8003eac <HAL_GPIO_Init+0x310>)
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	089b      	lsrs	r3, r3, #2
 8003d44:	3302      	adds	r3, #2
 8003d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	220f      	movs	r2, #15
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a52      	ldr	r2, [pc, #328]	@ (8003eb0 <HAL_GPIO_Init+0x314>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d02b      	beq.n	8003dc2 <HAL_GPIO_Init+0x226>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a51      	ldr	r2, [pc, #324]	@ (8003eb4 <HAL_GPIO_Init+0x318>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d025      	beq.n	8003dbe <HAL_GPIO_Init+0x222>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a50      	ldr	r2, [pc, #320]	@ (8003eb8 <HAL_GPIO_Init+0x31c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d01f      	beq.n	8003dba <HAL_GPIO_Init+0x21e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a4f      	ldr	r2, [pc, #316]	@ (8003ebc <HAL_GPIO_Init+0x320>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d019      	beq.n	8003db6 <HAL_GPIO_Init+0x21a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a4e      	ldr	r2, [pc, #312]	@ (8003ec0 <HAL_GPIO_Init+0x324>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <HAL_GPIO_Init+0x216>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a4d      	ldr	r2, [pc, #308]	@ (8003ec4 <HAL_GPIO_Init+0x328>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00d      	beq.n	8003dae <HAL_GPIO_Init+0x212>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a4c      	ldr	r2, [pc, #304]	@ (8003ec8 <HAL_GPIO_Init+0x32c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d007      	beq.n	8003daa <HAL_GPIO_Init+0x20e>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a4b      	ldr	r2, [pc, #300]	@ (8003ecc <HAL_GPIO_Init+0x330>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d101      	bne.n	8003da6 <HAL_GPIO_Init+0x20a>
 8003da2:	2307      	movs	r3, #7
 8003da4:	e00e      	b.n	8003dc4 <HAL_GPIO_Init+0x228>
 8003da6:	2308      	movs	r3, #8
 8003da8:	e00c      	b.n	8003dc4 <HAL_GPIO_Init+0x228>
 8003daa:	2306      	movs	r3, #6
 8003dac:	e00a      	b.n	8003dc4 <HAL_GPIO_Init+0x228>
 8003dae:	2305      	movs	r3, #5
 8003db0:	e008      	b.n	8003dc4 <HAL_GPIO_Init+0x228>
 8003db2:	2304      	movs	r3, #4
 8003db4:	e006      	b.n	8003dc4 <HAL_GPIO_Init+0x228>
 8003db6:	2303      	movs	r3, #3
 8003db8:	e004      	b.n	8003dc4 <HAL_GPIO_Init+0x228>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e002      	b.n	8003dc4 <HAL_GPIO_Init+0x228>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <HAL_GPIO_Init+0x228>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	69fa      	ldr	r2, [r7, #28]
 8003dc6:	f002 0203 	and.w	r2, r2, #3
 8003dca:	0092      	lsls	r2, r2, #2
 8003dcc:	4093      	lsls	r3, r2
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dd4:	4935      	ldr	r1, [pc, #212]	@ (8003eac <HAL_GPIO_Init+0x310>)
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	089b      	lsrs	r3, r3, #2
 8003dda:	3302      	adds	r3, #2
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003de2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed0 <HAL_GPIO_Init+0x334>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	43db      	mvns	r3, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4013      	ands	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e06:	4a32      	ldr	r2, [pc, #200]	@ (8003ed0 <HAL_GPIO_Init+0x334>)
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e0c:	4b30      	ldr	r3, [pc, #192]	@ (8003ed0 <HAL_GPIO_Init+0x334>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e30:	4a27      	ldr	r2, [pc, #156]	@ (8003ed0 <HAL_GPIO_Init+0x334>)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e36:	4b26      	ldr	r3, [pc, #152]	@ (8003ed0 <HAL_GPIO_Init+0x334>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4013      	ands	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ed0 <HAL_GPIO_Init+0x334>)
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e60:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed0 <HAL_GPIO_Init+0x334>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e84:	4a12      	ldr	r2, [pc, #72]	@ (8003ed0 <HAL_GPIO_Init+0x334>)
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	61fb      	str	r3, [r7, #28]
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	2b0f      	cmp	r3, #15
 8003e94:	f67f ae90 	bls.w	8003bb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e98:	bf00      	nop
 8003e9a:	bf00      	nop
 8003e9c:	3724      	adds	r7, #36	@ 0x24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	40013800 	.word	0x40013800
 8003eb0:	40020000 	.word	0x40020000
 8003eb4:	40020400 	.word	0x40020400
 8003eb8:	40020800 	.word	0x40020800
 8003ebc:	40020c00 	.word	0x40020c00
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40021400 	.word	0x40021400
 8003ec8:	40021800 	.word	0x40021800
 8003ecc:	40021c00 	.word	0x40021c00
 8003ed0:	40013c00 	.word	0x40013c00

08003ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	807b      	strh	r3, [r7, #2]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ee4:	787b      	ldrb	r3, [r7, #1]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eea:	887a      	ldrh	r2, [r7, #2]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ef0:	e003      	b.n	8003efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ef2:	887b      	ldrh	r3, [r7, #2]
 8003ef4:	041a      	lsls	r2, r3, #16
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	619a      	str	r2, [r3, #24]
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e267      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d075      	beq.n	8004012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f26:	4b88      	ldr	r3, [pc, #544]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d00c      	beq.n	8003f4c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f32:	4b85      	ldr	r3, [pc, #532]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d112      	bne.n	8003f64 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f3e:	4b82      	ldr	r3, [pc, #520]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f4a:	d10b      	bne.n	8003f64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4c:	4b7e      	ldr	r3, [pc, #504]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d05b      	beq.n	8004010 <HAL_RCC_OscConfig+0x108>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d157      	bne.n	8004010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e242      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f6c:	d106      	bne.n	8003f7c <HAL_RCC_OscConfig+0x74>
 8003f6e:	4b76      	ldr	r3, [pc, #472]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a75      	ldr	r2, [pc, #468]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e01d      	b.n	8003fb8 <HAL_RCC_OscConfig+0xb0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f84:	d10c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x98>
 8003f86:	4b70      	ldr	r3, [pc, #448]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a6f      	ldr	r2, [pc, #444]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	4b6d      	ldr	r3, [pc, #436]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a6c      	ldr	r2, [pc, #432]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	e00b      	b.n	8003fb8 <HAL_RCC_OscConfig+0xb0>
 8003fa0:	4b69      	ldr	r3, [pc, #420]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a68      	ldr	r2, [pc, #416]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	4b66      	ldr	r3, [pc, #408]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a65      	ldr	r2, [pc, #404]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d013      	beq.n	8003fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7ff fcd6 	bl	8003970 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc8:	f7ff fcd2 	bl	8003970 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	@ 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e207      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fda:	4b5b      	ldr	r3, [pc, #364]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0xc0>
 8003fe6:	e014      	b.n	8004012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7ff fcc2 	bl	8003970 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7ff fcbe 	bl	8003970 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	@ 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e1f3      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004002:	4b51      	ldr	r3, [pc, #324]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0xe8>
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d063      	beq.n	80040e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800401e:	4b4a      	ldr	r3, [pc, #296]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00b      	beq.n	8004042 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800402a:	4b47      	ldr	r3, [pc, #284]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004032:	2b08      	cmp	r3, #8
 8004034:	d11c      	bne.n	8004070 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004036:	4b44      	ldr	r3, [pc, #272]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d116      	bne.n	8004070 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004042:	4b41      	ldr	r3, [pc, #260]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_RCC_OscConfig+0x152>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d001      	beq.n	800405a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e1c7      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405a:	4b3b      	ldr	r3, [pc, #236]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4937      	ldr	r1, [pc, #220]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 800406a:	4313      	orrs	r3, r2
 800406c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406e:	e03a      	b.n	80040e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d020      	beq.n	80040ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004078:	4b34      	ldr	r3, [pc, #208]	@ (800414c <HAL_RCC_OscConfig+0x244>)
 800407a:	2201      	movs	r2, #1
 800407c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407e:	f7ff fc77 	bl	8003970 <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004086:	f7ff fc73 	bl	8003970 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e1a8      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004098:	4b2b      	ldr	r3, [pc, #172]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0f0      	beq.n	8004086 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a4:	4b28      	ldr	r3, [pc, #160]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4925      	ldr	r1, [pc, #148]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	600b      	str	r3, [r1, #0]
 80040b8:	e015      	b.n	80040e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ba:	4b24      	ldr	r3, [pc, #144]	@ (800414c <HAL_RCC_OscConfig+0x244>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7ff fc56 	bl	8003970 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c8:	f7ff fc52 	bl	8003970 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e187      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040da:	4b1b      	ldr	r3, [pc, #108]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d036      	beq.n	8004160 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d016      	beq.n	8004128 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fa:	4b15      	ldr	r3, [pc, #84]	@ (8004150 <HAL_RCC_OscConfig+0x248>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004100:	f7ff fc36 	bl	8003970 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004108:	f7ff fc32 	bl	8003970 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e167      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411a:	4b0b      	ldr	r3, [pc, #44]	@ (8004148 <HAL_RCC_OscConfig+0x240>)
 800411c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0x200>
 8004126:	e01b      	b.n	8004160 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004128:	4b09      	ldr	r3, [pc, #36]	@ (8004150 <HAL_RCC_OscConfig+0x248>)
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412e:	f7ff fc1f 	bl	8003970 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004134:	e00e      	b.n	8004154 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004136:	f7ff fc1b 	bl	8003970 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d907      	bls.n	8004154 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e150      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
 8004148:	40023800 	.word	0x40023800
 800414c:	42470000 	.word	0x42470000
 8004150:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004154:	4b88      	ldr	r3, [pc, #544]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 8004156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1ea      	bne.n	8004136 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 8097 	beq.w	800429c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416e:	2300      	movs	r3, #0
 8004170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004172:	4b81      	ldr	r3, [pc, #516]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10f      	bne.n	800419e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	4b7d      	ldr	r3, [pc, #500]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004186:	4a7c      	ldr	r2, [pc, #496]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 8004188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800418c:	6413      	str	r3, [r2, #64]	@ 0x40
 800418e:	4b7a      	ldr	r3, [pc, #488]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800419a:	2301      	movs	r3, #1
 800419c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419e:	4b77      	ldr	r3, [pc, #476]	@ (800437c <HAL_RCC_OscConfig+0x474>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d118      	bne.n	80041dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041aa:	4b74      	ldr	r3, [pc, #464]	@ (800437c <HAL_RCC_OscConfig+0x474>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a73      	ldr	r2, [pc, #460]	@ (800437c <HAL_RCC_OscConfig+0x474>)
 80041b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b6:	f7ff fbdb 	bl	8003970 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041be:	f7ff fbd7 	bl	8003970 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e10c      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d0:	4b6a      	ldr	r3, [pc, #424]	@ (800437c <HAL_RCC_OscConfig+0x474>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d106      	bne.n	80041f2 <HAL_RCC_OscConfig+0x2ea>
 80041e4:	4b64      	ldr	r3, [pc, #400]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e8:	4a63      	ldr	r2, [pc, #396]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80041f0:	e01c      	b.n	800422c <HAL_RCC_OscConfig+0x324>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b05      	cmp	r3, #5
 80041f8:	d10c      	bne.n	8004214 <HAL_RCC_OscConfig+0x30c>
 80041fa:	4b5f      	ldr	r3, [pc, #380]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041fe:	4a5e      	ldr	r2, [pc, #376]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 8004200:	f043 0304 	orr.w	r3, r3, #4
 8004204:	6713      	str	r3, [r2, #112]	@ 0x70
 8004206:	4b5c      	ldr	r3, [pc, #368]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800420a:	4a5b      	ldr	r2, [pc, #364]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	6713      	str	r3, [r2, #112]	@ 0x70
 8004212:	e00b      	b.n	800422c <HAL_RCC_OscConfig+0x324>
 8004214:	4b58      	ldr	r3, [pc, #352]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004218:	4a57      	ldr	r2, [pc, #348]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 800421a:	f023 0301 	bic.w	r3, r3, #1
 800421e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004220:	4b55      	ldr	r3, [pc, #340]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004224:	4a54      	ldr	r2, [pc, #336]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 8004226:	f023 0304 	bic.w	r3, r3, #4
 800422a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d015      	beq.n	8004260 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004234:	f7ff fb9c 	bl	8003970 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423a:	e00a      	b.n	8004252 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800423c:	f7ff fb98 	bl	8003970 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e0cb      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004252:	4b49      	ldr	r3, [pc, #292]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0ee      	beq.n	800423c <HAL_RCC_OscConfig+0x334>
 800425e:	e014      	b.n	800428a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004260:	f7ff fb86 	bl	8003970 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004266:	e00a      	b.n	800427e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004268:	f7ff fb82 	bl	8003970 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e0b5      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800427e:	4b3e      	ldr	r3, [pc, #248]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1ee      	bne.n	8004268 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800428a:	7dfb      	ldrb	r3, [r7, #23]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d105      	bne.n	800429c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004290:	4b39      	ldr	r3, [pc, #228]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 8004292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004294:	4a38      	ldr	r2, [pc, #224]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 8004296:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800429a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80a1 	beq.w	80043e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042a6:	4b34      	ldr	r3, [pc, #208]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d05c      	beq.n	800436c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d141      	bne.n	800433e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ba:	4b31      	ldr	r3, [pc, #196]	@ (8004380 <HAL_RCC_OscConfig+0x478>)
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7ff fb56 	bl	8003970 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c8:	f7ff fb52 	bl	8003970 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e087      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042da:	4b27      	ldr	r3, [pc, #156]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69da      	ldr	r2, [r3, #28]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	019b      	lsls	r3, r3, #6
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fc:	085b      	lsrs	r3, r3, #1
 80042fe:	3b01      	subs	r3, #1
 8004300:	041b      	lsls	r3, r3, #16
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004308:	061b      	lsls	r3, r3, #24
 800430a:	491b      	ldr	r1, [pc, #108]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 800430c:	4313      	orrs	r3, r2
 800430e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004310:	4b1b      	ldr	r3, [pc, #108]	@ (8004380 <HAL_RCC_OscConfig+0x478>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004316:	f7ff fb2b 	bl	8003970 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800431e:	f7ff fb27 	bl	8003970 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e05c      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004330:	4b11      	ldr	r3, [pc, #68]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x416>
 800433c:	e054      	b.n	80043e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433e:	4b10      	ldr	r3, [pc, #64]	@ (8004380 <HAL_RCC_OscConfig+0x478>)
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7ff fb14 	bl	8003970 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434c:	f7ff fb10 	bl	8003970 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e045      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435e:	4b06      	ldr	r3, [pc, #24]	@ (8004378 <HAL_RCC_OscConfig+0x470>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x444>
 800436a:	e03d      	b.n	80043e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d107      	bne.n	8004384 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e038      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
 8004378:	40023800 	.word	0x40023800
 800437c:	40007000 	.word	0x40007000
 8004380:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004384:	4b1b      	ldr	r3, [pc, #108]	@ (80043f4 <HAL_RCC_OscConfig+0x4ec>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d028      	beq.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800439c:	429a      	cmp	r2, r3
 800439e:	d121      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d11a      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80043b4:	4013      	ands	r3, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043bc:	4293      	cmp	r3, r2
 80043be:	d111      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	3b01      	subs	r3, #1
 80043ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d107      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40023800 	.word	0x40023800

080043f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0cc      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800440c:	4b68      	ldr	r3, [pc, #416]	@ (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d90c      	bls.n	8004434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b65      	ldr	r3, [pc, #404]	@ (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004422:	4b63      	ldr	r3, [pc, #396]	@ (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0b8      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d020      	beq.n	8004482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800444c:	4b59      	ldr	r3, [pc, #356]	@ (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	4a58      	ldr	r2, [pc, #352]	@ (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004456:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004464:	4b53      	ldr	r3, [pc, #332]	@ (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	4a52      	ldr	r2, [pc, #328]	@ (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800446e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004470:	4b50      	ldr	r3, [pc, #320]	@ (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	494d      	ldr	r1, [pc, #308]	@ (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d044      	beq.n	8004518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d107      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004496:	4b47      	ldr	r3, [pc, #284]	@ (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d119      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e07f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d003      	beq.n	80044b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d107      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b6:	4b3f      	ldr	r3, [pc, #252]	@ (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e06f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c6:	4b3b      	ldr	r3, [pc, #236]	@ (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e067      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044d6:	4b37      	ldr	r3, [pc, #220]	@ (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f023 0203 	bic.w	r2, r3, #3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4934      	ldr	r1, [pc, #208]	@ (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044e8:	f7ff fa42 	bl	8003970 <HAL_GetTick>
 80044ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ee:	e00a      	b.n	8004506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f0:	f7ff fa3e 	bl	8003970 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e04f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004506:	4b2b      	ldr	r3, [pc, #172]	@ (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 020c 	and.w	r2, r3, #12
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	429a      	cmp	r2, r3
 8004516:	d1eb      	bne.n	80044f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004518:	4b25      	ldr	r3, [pc, #148]	@ (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d20c      	bcs.n	8004540 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004526:	4b22      	ldr	r3, [pc, #136]	@ (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800452e:	4b20      	ldr	r3, [pc, #128]	@ (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d001      	beq.n	8004540 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e032      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800454c:	4b19      	ldr	r3, [pc, #100]	@ (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4916      	ldr	r1, [pc, #88]	@ (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	4313      	orrs	r3, r2
 800455c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800456a:	4b12      	ldr	r3, [pc, #72]	@ (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	490e      	ldr	r1, [pc, #56]	@ (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	4313      	orrs	r3, r2
 800457c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800457e:	f000 f821 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 8004582:	4602      	mov	r2, r0
 8004584:	4b0b      	ldr	r3, [pc, #44]	@ (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	490a      	ldr	r1, [pc, #40]	@ (80045b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004590:	5ccb      	ldrb	r3, [r1, r3]
 8004592:	fa22 f303 	lsr.w	r3, r2, r3
 8004596:	4a09      	ldr	r2, [pc, #36]	@ (80045bc <HAL_RCC_ClockConfig+0x1c4>)
 8004598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800459a:	4b09      	ldr	r3, [pc, #36]	@ (80045c0 <HAL_RCC_ClockConfig+0x1c8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff f9a2 	bl	80038e8 <HAL_InitTick>

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40023c00 	.word	0x40023c00
 80045b4:	40023800 	.word	0x40023800
 80045b8:	080067d8 	.word	0x080067d8
 80045bc:	20000078 	.word	0x20000078
 80045c0:	2000007c 	.word	0x2000007c

080045c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045c8:	b090      	sub	sp, #64	@ 0x40
 80045ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045dc:	4b59      	ldr	r3, [pc, #356]	@ (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 030c 	and.w	r3, r3, #12
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d00d      	beq.n	8004604 <HAL_RCC_GetSysClockFreq+0x40>
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	f200 80a1 	bhi.w	8004730 <HAL_RCC_GetSysClockFreq+0x16c>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_RCC_GetSysClockFreq+0x34>
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d003      	beq.n	80045fe <HAL_RCC_GetSysClockFreq+0x3a>
 80045f6:	e09b      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045f8:	4b53      	ldr	r3, [pc, #332]	@ (8004748 <HAL_RCC_GetSysClockFreq+0x184>)
 80045fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045fc:	e09b      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045fe:	4b53      	ldr	r3, [pc, #332]	@ (800474c <HAL_RCC_GetSysClockFreq+0x188>)
 8004600:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004602:	e098      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004604:	4b4f      	ldr	r3, [pc, #316]	@ (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800460c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800460e:	4b4d      	ldr	r3, [pc, #308]	@ (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d028      	beq.n	800466c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800461a:	4b4a      	ldr	r3, [pc, #296]	@ (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	099b      	lsrs	r3, r3, #6
 8004620:	2200      	movs	r2, #0
 8004622:	623b      	str	r3, [r7, #32]
 8004624:	627a      	str	r2, [r7, #36]	@ 0x24
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800462c:	2100      	movs	r1, #0
 800462e:	4b47      	ldr	r3, [pc, #284]	@ (800474c <HAL_RCC_GetSysClockFreq+0x188>)
 8004630:	fb03 f201 	mul.w	r2, r3, r1
 8004634:	2300      	movs	r3, #0
 8004636:	fb00 f303 	mul.w	r3, r0, r3
 800463a:	4413      	add	r3, r2
 800463c:	4a43      	ldr	r2, [pc, #268]	@ (800474c <HAL_RCC_GetSysClockFreq+0x188>)
 800463e:	fba0 1202 	umull	r1, r2, r0, r2
 8004642:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004644:	460a      	mov	r2, r1
 8004646:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004648:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800464a:	4413      	add	r3, r2
 800464c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800464e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004650:	2200      	movs	r2, #0
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	61fa      	str	r2, [r7, #28]
 8004656:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800465a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800465e:	f7fc fab7 	bl	8000bd0 <__aeabi_uldivmod>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	4613      	mov	r3, r2
 8004668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800466a:	e053      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800466c:	4b35      	ldr	r3, [pc, #212]	@ (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	099b      	lsrs	r3, r3, #6
 8004672:	2200      	movs	r2, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	617a      	str	r2, [r7, #20]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800467e:	f04f 0b00 	mov.w	fp, #0
 8004682:	4652      	mov	r2, sl
 8004684:	465b      	mov	r3, fp
 8004686:	f04f 0000 	mov.w	r0, #0
 800468a:	f04f 0100 	mov.w	r1, #0
 800468e:	0159      	lsls	r1, r3, #5
 8004690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004694:	0150      	lsls	r0, r2, #5
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	ebb2 080a 	subs.w	r8, r2, sl
 800469e:	eb63 090b 	sbc.w	r9, r3, fp
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046b6:	ebb2 0408 	subs.w	r4, r2, r8
 80046ba:	eb63 0509 	sbc.w	r5, r3, r9
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	00eb      	lsls	r3, r5, #3
 80046c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046cc:	00e2      	lsls	r2, r4, #3
 80046ce:	4614      	mov	r4, r2
 80046d0:	461d      	mov	r5, r3
 80046d2:	eb14 030a 	adds.w	r3, r4, sl
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	eb45 030b 	adc.w	r3, r5, fp
 80046dc:	607b      	str	r3, [r7, #4]
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046ea:	4629      	mov	r1, r5
 80046ec:	028b      	lsls	r3, r1, #10
 80046ee:	4621      	mov	r1, r4
 80046f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046f4:	4621      	mov	r1, r4
 80046f6:	028a      	lsls	r2, r1, #10
 80046f8:	4610      	mov	r0, r2
 80046fa:	4619      	mov	r1, r3
 80046fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046fe:	2200      	movs	r2, #0
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	60fa      	str	r2, [r7, #12]
 8004704:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004708:	f7fc fa62 	bl	8000bd0 <__aeabi_uldivmod>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4613      	mov	r3, r2
 8004712:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004714:	4b0b      	ldr	r3, [pc, #44]	@ (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	0c1b      	lsrs	r3, r3, #16
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	3301      	adds	r3, #1
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004724:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004728:	fbb2 f3f3 	udiv	r3, r2, r3
 800472c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800472e:	e002      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004730:	4b05      	ldr	r3, [pc, #20]	@ (8004748 <HAL_RCC_GetSysClockFreq+0x184>)
 8004732:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004738:	4618      	mov	r0, r3
 800473a:	3740      	adds	r7, #64	@ 0x40
 800473c:	46bd      	mov	sp, r7
 800473e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800
 8004748:	00f42400 	.word	0x00f42400
 800474c:	017d7840 	.word	0x017d7840

08004750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004754:	4b03      	ldr	r3, [pc, #12]	@ (8004764 <HAL_RCC_GetHCLKFreq+0x14>)
 8004756:	681b      	ldr	r3, [r3, #0]
}
 8004758:	4618      	mov	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000078 	.word	0x20000078

08004768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800476c:	f7ff fff0 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 8004770:	4602      	mov	r2, r0
 8004772:	4b05      	ldr	r3, [pc, #20]	@ (8004788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	0a9b      	lsrs	r3, r3, #10
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	4903      	ldr	r1, [pc, #12]	@ (800478c <HAL_RCC_GetPCLK1Freq+0x24>)
 800477e:	5ccb      	ldrb	r3, [r1, r3]
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004784:	4618      	mov	r0, r3
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40023800 	.word	0x40023800
 800478c:	080067e8 	.word	0x080067e8

08004790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004794:	f7ff ffdc 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 8004798:	4602      	mov	r2, r0
 800479a:	4b05      	ldr	r3, [pc, #20]	@ (80047b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	0b5b      	lsrs	r3, r3, #13
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	4903      	ldr	r1, [pc, #12]	@ (80047b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047a6:	5ccb      	ldrb	r3, [r1, r3]
 80047a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40023800 	.word	0x40023800
 80047b4:	080067e8 	.word	0x080067e8

080047b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e041      	b.n	800484e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fe feae 	bl	8003540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f000 fc9e 	bl	8005138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b01      	cmp	r3, #1
 800486a:	d001      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e04e      	b.n	800490e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0201 	orr.w	r2, r2, #1
 8004886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a23      	ldr	r2, [pc, #140]	@ (800491c <HAL_TIM_Base_Start_IT+0xc4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d022      	beq.n	80048d8 <HAL_TIM_Base_Start_IT+0x80>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800489a:	d01d      	beq.n	80048d8 <HAL_TIM_Base_Start_IT+0x80>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004920 <HAL_TIM_Base_Start_IT+0xc8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d018      	beq.n	80048d8 <HAL_TIM_Base_Start_IT+0x80>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004924 <HAL_TIM_Base_Start_IT+0xcc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d013      	beq.n	80048d8 <HAL_TIM_Base_Start_IT+0x80>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004928 <HAL_TIM_Base_Start_IT+0xd0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d00e      	beq.n	80048d8 <HAL_TIM_Base_Start_IT+0x80>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1b      	ldr	r2, [pc, #108]	@ (800492c <HAL_TIM_Base_Start_IT+0xd4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d009      	beq.n	80048d8 <HAL_TIM_Base_Start_IT+0x80>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a19      	ldr	r2, [pc, #100]	@ (8004930 <HAL_TIM_Base_Start_IT+0xd8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d004      	beq.n	80048d8 <HAL_TIM_Base_Start_IT+0x80>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a18      	ldr	r2, [pc, #96]	@ (8004934 <HAL_TIM_Base_Start_IT+0xdc>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d111      	bne.n	80048fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b06      	cmp	r3, #6
 80048e8:	d010      	beq.n	800490c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0201 	orr.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fa:	e007      	b.n	800490c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40010000 	.word	0x40010000
 8004920:	40000400 	.word	0x40000400
 8004924:	40000800 	.word	0x40000800
 8004928:	40000c00 	.word	0x40000c00
 800492c:	40010400 	.word	0x40010400
 8004930:	40014000 	.word	0x40014000
 8004934:	40001800 	.word	0x40001800

08004938 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e041      	b.n	80049ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f839 	bl	80049d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3304      	adds	r3, #4
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f000 fbde 	bl	8005138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
	...

080049ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d109      	bne.n	8004a10 <HAL_TIM_PWM_Start+0x24>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	bf14      	ite	ne
 8004a08:	2301      	movne	r3, #1
 8004a0a:	2300      	moveq	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	e022      	b.n	8004a56 <HAL_TIM_PWM_Start+0x6a>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d109      	bne.n	8004a2a <HAL_TIM_PWM_Start+0x3e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	bf14      	ite	ne
 8004a22:	2301      	movne	r3, #1
 8004a24:	2300      	moveq	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	e015      	b.n	8004a56 <HAL_TIM_PWM_Start+0x6a>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d109      	bne.n	8004a44 <HAL_TIM_PWM_Start+0x58>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	bf14      	ite	ne
 8004a3c:	2301      	movne	r3, #1
 8004a3e:	2300      	moveq	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	e008      	b.n	8004a56 <HAL_TIM_PWM_Start+0x6a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	bf14      	ite	ne
 8004a50:	2301      	movne	r3, #1
 8004a52:	2300      	moveq	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e07c      	b.n	8004b58 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <HAL_TIM_PWM_Start+0x82>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a6c:	e013      	b.n	8004a96 <HAL_TIM_PWM_Start+0xaa>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d104      	bne.n	8004a7e <HAL_TIM_PWM_Start+0x92>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a7c:	e00b      	b.n	8004a96 <HAL_TIM_PWM_Start+0xaa>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d104      	bne.n	8004a8e <HAL_TIM_PWM_Start+0xa2>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a8c:	e003      	b.n	8004a96 <HAL_TIM_PWM_Start+0xaa>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2202      	movs	r2, #2
 8004a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	6839      	ldr	r1, [r7, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fe3a 	bl	8005718 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a2d      	ldr	r2, [pc, #180]	@ (8004b60 <HAL_TIM_PWM_Start+0x174>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d004      	beq.n	8004ab8 <HAL_TIM_PWM_Start+0xcc>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8004b64 <HAL_TIM_PWM_Start+0x178>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d101      	bne.n	8004abc <HAL_TIM_PWM_Start+0xd0>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e000      	b.n	8004abe <HAL_TIM_PWM_Start+0xd2>
 8004abc:	2300      	movs	r3, #0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d007      	beq.n	8004ad2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ad0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a22      	ldr	r2, [pc, #136]	@ (8004b60 <HAL_TIM_PWM_Start+0x174>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d022      	beq.n	8004b22 <HAL_TIM_PWM_Start+0x136>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae4:	d01d      	beq.n	8004b22 <HAL_TIM_PWM_Start+0x136>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1f      	ldr	r2, [pc, #124]	@ (8004b68 <HAL_TIM_PWM_Start+0x17c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d018      	beq.n	8004b22 <HAL_TIM_PWM_Start+0x136>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b6c <HAL_TIM_PWM_Start+0x180>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d013      	beq.n	8004b22 <HAL_TIM_PWM_Start+0x136>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a1c      	ldr	r2, [pc, #112]	@ (8004b70 <HAL_TIM_PWM_Start+0x184>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00e      	beq.n	8004b22 <HAL_TIM_PWM_Start+0x136>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a16      	ldr	r2, [pc, #88]	@ (8004b64 <HAL_TIM_PWM_Start+0x178>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d009      	beq.n	8004b22 <HAL_TIM_PWM_Start+0x136>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a18      	ldr	r2, [pc, #96]	@ (8004b74 <HAL_TIM_PWM_Start+0x188>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d004      	beq.n	8004b22 <HAL_TIM_PWM_Start+0x136>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a16      	ldr	r2, [pc, #88]	@ (8004b78 <HAL_TIM_PWM_Start+0x18c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d111      	bne.n	8004b46 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b06      	cmp	r3, #6
 8004b32:	d010      	beq.n	8004b56 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0201 	orr.w	r2, r2, #1
 8004b42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b44:	e007      	b.n	8004b56 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f042 0201 	orr.w	r2, r2, #1
 8004b54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40010000 	.word	0x40010000
 8004b64:	40010400 	.word	0x40010400
 8004b68:	40000400 	.word	0x40000400
 8004b6c:	40000800 	.word	0x40000800
 8004b70:	40000c00 	.word	0x40000c00
 8004b74:	40014000 	.word	0x40014000
 8004b78:	40001800 	.word	0x40001800

08004b7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e097      	b.n	8004cc0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d106      	bne.n	8004baa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7fe fbdf 	bl	8003368 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2202      	movs	r2, #2
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bc0:	f023 0307 	bic.w	r3, r3, #7
 8004bc4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	f000 fab1 	bl	8005138 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bfe:	f023 0303 	bic.w	r3, r3, #3
 8004c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	021b      	lsls	r3, r3, #8
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004c1c:	f023 030c 	bic.w	r3, r3, #12
 8004c20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	021b      	lsls	r3, r3, #8
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	011a      	lsls	r2, r3, #4
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	031b      	lsls	r3, r3, #12
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004c5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004c62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3718      	adds	r7, #24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cd8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ce0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ce8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004cf0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d110      	bne.n	8004d1a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d102      	bne.n	8004d04 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cfe:	7b7b      	ldrb	r3, [r7, #13]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d001      	beq.n	8004d08 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e089      	b.n	8004e1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d18:	e031      	b.n	8004d7e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d110      	bne.n	8004d42 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d20:	7bbb      	ldrb	r3, [r7, #14]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d102      	bne.n	8004d2c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d26:	7b3b      	ldrb	r3, [r7, #12]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d001      	beq.n	8004d30 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e075      	b.n	8004e1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d40:	e01d      	b.n	8004d7e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d108      	bne.n	8004d5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d48:	7bbb      	ldrb	r3, [r7, #14]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d105      	bne.n	8004d5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d4e:	7b7b      	ldrb	r3, [r7, #13]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d102      	bne.n	8004d5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d54:	7b3b      	ldrb	r3, [r7, #12]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d001      	beq.n	8004d5e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e05e      	b.n	8004e1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2202      	movs	r2, #2
 8004d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2202      	movs	r2, #2
 8004d6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2202      	movs	r2, #2
 8004d7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <HAL_TIM_Encoder_Start_IT+0xc4>
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d010      	beq.n	8004dac <HAL_TIM_Encoder_Start_IT+0xe4>
 8004d8a:	e01f      	b.n	8004dcc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2201      	movs	r2, #1
 8004d92:	2100      	movs	r1, #0
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fcbf 	bl	8005718 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0202 	orr.w	r2, r2, #2
 8004da8:	60da      	str	r2, [r3, #12]
      break;
 8004daa:	e02e      	b.n	8004e0a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2201      	movs	r2, #1
 8004db2:	2104      	movs	r1, #4
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fcaf 	bl	8005718 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0204 	orr.w	r2, r2, #4
 8004dc8:	60da      	str	r2, [r3, #12]
      break;
 8004dca:	e01e      	b.n	8004e0a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fc9f 	bl	8005718 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2201      	movs	r2, #1
 8004de0:	2104      	movs	r1, #4
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fc98 	bl	8005718 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0202 	orr.w	r2, r2, #2
 8004df6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0204 	orr.w	r2, r2, #4
 8004e06:	60da      	str	r2, [r3, #12]
      break;
 8004e08:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0201 	orr.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d101      	bne.n	8004e42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e0ae      	b.n	8004fa0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b0c      	cmp	r3, #12
 8004e4e:	f200 809f 	bhi.w	8004f90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e52:	a201      	add	r2, pc, #4	@ (adr r2, 8004e58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e58:	08004e8d 	.word	0x08004e8d
 8004e5c:	08004f91 	.word	0x08004f91
 8004e60:	08004f91 	.word	0x08004f91
 8004e64:	08004f91 	.word	0x08004f91
 8004e68:	08004ecd 	.word	0x08004ecd
 8004e6c:	08004f91 	.word	0x08004f91
 8004e70:	08004f91 	.word	0x08004f91
 8004e74:	08004f91 	.word	0x08004f91
 8004e78:	08004f0f 	.word	0x08004f0f
 8004e7c:	08004f91 	.word	0x08004f91
 8004e80:	08004f91 	.word	0x08004f91
 8004e84:	08004f91 	.word	0x08004f91
 8004e88:	08004f4f 	.word	0x08004f4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 f9f6 	bl	8005284 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699a      	ldr	r2, [r3, #24]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0208 	orr.w	r2, r2, #8
 8004ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0204 	bic.w	r2, r2, #4
 8004eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6999      	ldr	r1, [r3, #24]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	691a      	ldr	r2, [r3, #16]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	619a      	str	r2, [r3, #24]
      break;
 8004eca:	e064      	b.n	8004f96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fa46 	bl	8005364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6999      	ldr	r1, [r3, #24]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	021a      	lsls	r2, r3, #8
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	619a      	str	r2, [r3, #24]
      break;
 8004f0c:	e043      	b.n	8004f96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68b9      	ldr	r1, [r7, #8]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fa9b 	bl	8005450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69da      	ldr	r2, [r3, #28]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 0208 	orr.w	r2, r2, #8
 8004f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69da      	ldr	r2, [r3, #28]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0204 	bic.w	r2, r2, #4
 8004f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69d9      	ldr	r1, [r3, #28]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	61da      	str	r2, [r3, #28]
      break;
 8004f4c:	e023      	b.n	8004f96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68b9      	ldr	r1, [r7, #8]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 faef 	bl	8005538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69da      	ldr	r2, [r3, #28]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69d9      	ldr	r1, [r3, #28]
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	021a      	lsls	r2, r3, #8
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	61da      	str	r2, [r3, #28]
      break;
 8004f8e:	e002      	b.n	8004f96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	75fb      	strb	r3, [r7, #23]
      break;
 8004f94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <HAL_TIM_ConfigClockSource+0x1c>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e0b4      	b.n	800512e <HAL_TIM_ConfigClockSource+0x186>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ffc:	d03e      	beq.n	800507c <HAL_TIM_ConfigClockSource+0xd4>
 8004ffe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005002:	f200 8087 	bhi.w	8005114 <HAL_TIM_ConfigClockSource+0x16c>
 8005006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800500a:	f000 8086 	beq.w	800511a <HAL_TIM_ConfigClockSource+0x172>
 800500e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005012:	d87f      	bhi.n	8005114 <HAL_TIM_ConfigClockSource+0x16c>
 8005014:	2b70      	cmp	r3, #112	@ 0x70
 8005016:	d01a      	beq.n	800504e <HAL_TIM_ConfigClockSource+0xa6>
 8005018:	2b70      	cmp	r3, #112	@ 0x70
 800501a:	d87b      	bhi.n	8005114 <HAL_TIM_ConfigClockSource+0x16c>
 800501c:	2b60      	cmp	r3, #96	@ 0x60
 800501e:	d050      	beq.n	80050c2 <HAL_TIM_ConfigClockSource+0x11a>
 8005020:	2b60      	cmp	r3, #96	@ 0x60
 8005022:	d877      	bhi.n	8005114 <HAL_TIM_ConfigClockSource+0x16c>
 8005024:	2b50      	cmp	r3, #80	@ 0x50
 8005026:	d03c      	beq.n	80050a2 <HAL_TIM_ConfigClockSource+0xfa>
 8005028:	2b50      	cmp	r3, #80	@ 0x50
 800502a:	d873      	bhi.n	8005114 <HAL_TIM_ConfigClockSource+0x16c>
 800502c:	2b40      	cmp	r3, #64	@ 0x40
 800502e:	d058      	beq.n	80050e2 <HAL_TIM_ConfigClockSource+0x13a>
 8005030:	2b40      	cmp	r3, #64	@ 0x40
 8005032:	d86f      	bhi.n	8005114 <HAL_TIM_ConfigClockSource+0x16c>
 8005034:	2b30      	cmp	r3, #48	@ 0x30
 8005036:	d064      	beq.n	8005102 <HAL_TIM_ConfigClockSource+0x15a>
 8005038:	2b30      	cmp	r3, #48	@ 0x30
 800503a:	d86b      	bhi.n	8005114 <HAL_TIM_ConfigClockSource+0x16c>
 800503c:	2b20      	cmp	r3, #32
 800503e:	d060      	beq.n	8005102 <HAL_TIM_ConfigClockSource+0x15a>
 8005040:	2b20      	cmp	r3, #32
 8005042:	d867      	bhi.n	8005114 <HAL_TIM_ConfigClockSource+0x16c>
 8005044:	2b00      	cmp	r3, #0
 8005046:	d05c      	beq.n	8005102 <HAL_TIM_ConfigClockSource+0x15a>
 8005048:	2b10      	cmp	r3, #16
 800504a:	d05a      	beq.n	8005102 <HAL_TIM_ConfigClockSource+0x15a>
 800504c:	e062      	b.n	8005114 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800505e:	f000 fb3b 	bl	80056d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005070:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	609a      	str	r2, [r3, #8]
      break;
 800507a:	e04f      	b.n	800511c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800508c:	f000 fb24 	bl	80056d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800509e:	609a      	str	r2, [r3, #8]
      break;
 80050a0:	e03c      	b.n	800511c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ae:	461a      	mov	r2, r3
 80050b0:	f000 fa98 	bl	80055e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2150      	movs	r1, #80	@ 0x50
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 faf1 	bl	80056a2 <TIM_ITRx_SetConfig>
      break;
 80050c0:	e02c      	b.n	800511c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ce:	461a      	mov	r2, r3
 80050d0:	f000 fab7 	bl	8005642 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2160      	movs	r1, #96	@ 0x60
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fae1 	bl	80056a2 <TIM_ITRx_SetConfig>
      break;
 80050e0:	e01c      	b.n	800511c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ee:	461a      	mov	r2, r3
 80050f0:	f000 fa78 	bl	80055e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2140      	movs	r1, #64	@ 0x40
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fad1 	bl	80056a2 <TIM_ITRx_SetConfig>
      break;
 8005100:	e00c      	b.n	800511c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4619      	mov	r1, r3
 800510c:	4610      	mov	r0, r2
 800510e:	f000 fac8 	bl	80056a2 <TIM_ITRx_SetConfig>
      break;
 8005112:	e003      	b.n	800511c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	73fb      	strb	r3, [r7, #15]
      break;
 8005118:	e000      	b.n	800511c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800511a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800512c:	7bfb      	ldrb	r3, [r7, #15]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
	...

08005138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a43      	ldr	r2, [pc, #268]	@ (8005258 <TIM_Base_SetConfig+0x120>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d013      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005156:	d00f      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a40      	ldr	r2, [pc, #256]	@ (800525c <TIM_Base_SetConfig+0x124>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d00b      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a3f      	ldr	r2, [pc, #252]	@ (8005260 <TIM_Base_SetConfig+0x128>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d007      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a3e      	ldr	r2, [pc, #248]	@ (8005264 <TIM_Base_SetConfig+0x12c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d003      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a3d      	ldr	r2, [pc, #244]	@ (8005268 <TIM_Base_SetConfig+0x130>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d108      	bne.n	800518a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800517e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a32      	ldr	r2, [pc, #200]	@ (8005258 <TIM_Base_SetConfig+0x120>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d02b      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005198:	d027      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a2f      	ldr	r2, [pc, #188]	@ (800525c <TIM_Base_SetConfig+0x124>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d023      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a2e      	ldr	r2, [pc, #184]	@ (8005260 <TIM_Base_SetConfig+0x128>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d01f      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005264 <TIM_Base_SetConfig+0x12c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d01b      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005268 <TIM_Base_SetConfig+0x130>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d017      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a2b      	ldr	r2, [pc, #172]	@ (800526c <TIM_Base_SetConfig+0x134>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005270 <TIM_Base_SetConfig+0x138>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00f      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a29      	ldr	r2, [pc, #164]	@ (8005274 <TIM_Base_SetConfig+0x13c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00b      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a28      	ldr	r2, [pc, #160]	@ (8005278 <TIM_Base_SetConfig+0x140>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d007      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a27      	ldr	r2, [pc, #156]	@ (800527c <TIM_Base_SetConfig+0x144>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d003      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a26      	ldr	r2, [pc, #152]	@ (8005280 <TIM_Base_SetConfig+0x148>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d108      	bne.n	80051fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a0e      	ldr	r2, [pc, #56]	@ (8005258 <TIM_Base_SetConfig+0x120>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d003      	beq.n	800522a <TIM_Base_SetConfig+0xf2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a10      	ldr	r2, [pc, #64]	@ (8005268 <TIM_Base_SetConfig+0x130>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d103      	bne.n	8005232 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f043 0204 	orr.w	r2, r3, #4
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	601a      	str	r2, [r3, #0]
}
 800524a:	bf00      	nop
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40010000 	.word	0x40010000
 800525c:	40000400 	.word	0x40000400
 8005260:	40000800 	.word	0x40000800
 8005264:	40000c00 	.word	0x40000c00
 8005268:	40010400 	.word	0x40010400
 800526c:	40014000 	.word	0x40014000
 8005270:	40014400 	.word	0x40014400
 8005274:	40014800 	.word	0x40014800
 8005278:	40001800 	.word	0x40001800
 800527c:	40001c00 	.word	0x40001c00
 8005280:	40002000 	.word	0x40002000

08005284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	f023 0201 	bic.w	r2, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 0303 	bic.w	r3, r3, #3
 80052ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f023 0302 	bic.w	r3, r3, #2
 80052cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a20      	ldr	r2, [pc, #128]	@ (800535c <TIM_OC1_SetConfig+0xd8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d003      	beq.n	80052e8 <TIM_OC1_SetConfig+0x64>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a1f      	ldr	r2, [pc, #124]	@ (8005360 <TIM_OC1_SetConfig+0xdc>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d10c      	bne.n	8005302 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f023 0308 	bic.w	r3, r3, #8
 80052ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f023 0304 	bic.w	r3, r3, #4
 8005300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a15      	ldr	r2, [pc, #84]	@ (800535c <TIM_OC1_SetConfig+0xd8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d003      	beq.n	8005312 <TIM_OC1_SetConfig+0x8e>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a14      	ldr	r2, [pc, #80]	@ (8005360 <TIM_OC1_SetConfig+0xdc>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d111      	bne.n	8005336 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	621a      	str	r2, [r3, #32]
}
 8005350:	bf00      	nop
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	40010000 	.word	0x40010000
 8005360:	40010400 	.word	0x40010400

08005364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	f023 0210 	bic.w	r2, r3, #16
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800539a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f023 0320 	bic.w	r3, r3, #32
 80053ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a22      	ldr	r2, [pc, #136]	@ (8005448 <TIM_OC2_SetConfig+0xe4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d003      	beq.n	80053cc <TIM_OC2_SetConfig+0x68>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a21      	ldr	r2, [pc, #132]	@ (800544c <TIM_OC2_SetConfig+0xe8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d10d      	bne.n	80053e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a17      	ldr	r2, [pc, #92]	@ (8005448 <TIM_OC2_SetConfig+0xe4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d003      	beq.n	80053f8 <TIM_OC2_SetConfig+0x94>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a16      	ldr	r2, [pc, #88]	@ (800544c <TIM_OC2_SetConfig+0xe8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d113      	bne.n	8005420 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4313      	orrs	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40010000 	.word	0x40010000
 800544c:	40010400 	.word	0x40010400

08005450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800547e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0303 	bic.w	r3, r3, #3
 8005486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	021b      	lsls	r3, r3, #8
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a21      	ldr	r2, [pc, #132]	@ (8005530 <TIM_OC3_SetConfig+0xe0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d003      	beq.n	80054b6 <TIM_OC3_SetConfig+0x66>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a20      	ldr	r2, [pc, #128]	@ (8005534 <TIM_OC3_SetConfig+0xe4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d10d      	bne.n	80054d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a16      	ldr	r2, [pc, #88]	@ (8005530 <TIM_OC3_SetConfig+0xe0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d003      	beq.n	80054e2 <TIM_OC3_SetConfig+0x92>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a15      	ldr	r2, [pc, #84]	@ (8005534 <TIM_OC3_SetConfig+0xe4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d113      	bne.n	800550a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	621a      	str	r2, [r3, #32]
}
 8005524:	bf00      	nop
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	40010000 	.word	0x40010000
 8005534:	40010400 	.word	0x40010400

08005538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800556e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	031b      	lsls	r3, r3, #12
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a12      	ldr	r2, [pc, #72]	@ (80055dc <TIM_OC4_SetConfig+0xa4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d003      	beq.n	80055a0 <TIM_OC4_SetConfig+0x68>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a11      	ldr	r2, [pc, #68]	@ (80055e0 <TIM_OC4_SetConfig+0xa8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d109      	bne.n	80055b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	019b      	lsls	r3, r3, #6
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	621a      	str	r2, [r3, #32]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40010000 	.word	0x40010000
 80055e0:	40010400 	.word	0x40010400

080055e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f023 0201 	bic.w	r2, r3, #1
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800560e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f023 030a 	bic.w	r3, r3, #10
 8005620:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005642:	b480      	push	{r7}
 8005644:	b087      	sub	sp, #28
 8005646:	af00      	add	r7, sp, #0
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	60b9      	str	r1, [r7, #8]
 800564c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	f023 0210 	bic.w	r2, r3, #16
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800566c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	031b      	lsls	r3, r3, #12
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800567e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4313      	orrs	r3, r2
 80056c0:	f043 0307 	orr.w	r3, r3, #7
 80056c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	609a      	str	r2, [r3, #8]
}
 80056cc:	bf00      	nop
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	021a      	lsls	r2, r3, #8
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4313      	orrs	r3, r2
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	609a      	str	r2, [r3, #8]
}
 800570c:	bf00      	nop
 800570e:	371c      	adds	r7, #28
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f003 031f 	and.w	r3, r3, #31
 800572a:	2201      	movs	r2, #1
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a1a      	ldr	r2, [r3, #32]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	43db      	mvns	r3, r3
 800573a:	401a      	ands	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a1a      	ldr	r2, [r3, #32]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	fa01 f303 	lsl.w	r3, r1, r3
 8005750:	431a      	orrs	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	621a      	str	r2, [r3, #32]
}
 8005756:	bf00      	nop
 8005758:	371c      	adds	r7, #28
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
	...

08005764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005778:	2302      	movs	r3, #2
 800577a:	e05a      	b.n	8005832 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a21      	ldr	r2, [pc, #132]	@ (8005840 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d022      	beq.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057c8:	d01d      	beq.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005844 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d018      	beq.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005848 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d013      	beq.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a1a      	ldr	r2, [pc, #104]	@ (800584c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00e      	beq.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a18      	ldr	r2, [pc, #96]	@ (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d009      	beq.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a17      	ldr	r2, [pc, #92]	@ (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d004      	beq.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a15      	ldr	r2, [pc, #84]	@ (8005858 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d10c      	bne.n	8005820 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800580c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	4313      	orrs	r3, r2
 8005816:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40010000 	.word	0x40010000
 8005844:	40000400 	.word	0x40000400
 8005848:	40000800 	.word	0x40000800
 800584c:	40000c00 	.word	0x40000c00
 8005850:	40010400 	.word	0x40010400
 8005854:	40014000 	.word	0x40014000
 8005858:	40001800 	.word	0x40001800

0800585c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e042      	b.n	80058f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fd ff64 	bl	8003750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2224      	movs	r2, #36	@ 0x24
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800589e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f973 	bl	8005b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	695a      	ldr	r2, [r3, #20]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2220      	movs	r2, #32
 80058e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2220      	movs	r2, #32
 80058e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08a      	sub	sp, #40	@ 0x28
 8005900:	af02      	add	r7, sp, #8
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	4613      	mov	r3, r2
 800590a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800590c:	2300      	movs	r3, #0
 800590e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b20      	cmp	r3, #32
 800591a:	d175      	bne.n	8005a08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <HAL_UART_Transmit+0x2c>
 8005922:	88fb      	ldrh	r3, [r7, #6]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e06e      	b.n	8005a0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2221      	movs	r2, #33	@ 0x21
 8005936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800593a:	f7fe f819 	bl	8003970 <HAL_GetTick>
 800593e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	88fa      	ldrh	r2, [r7, #6]
 8005944:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	88fa      	ldrh	r2, [r7, #6]
 800594a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005954:	d108      	bne.n	8005968 <HAL_UART_Transmit+0x6c>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d104      	bne.n	8005968 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800595e:	2300      	movs	r3, #0
 8005960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	61bb      	str	r3, [r7, #24]
 8005966:	e003      	b.n	8005970 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800596c:	2300      	movs	r3, #0
 800596e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005970:	e02e      	b.n	80059d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2200      	movs	r2, #0
 800597a:	2180      	movs	r1, #128	@ 0x80
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 f848 	bl	8005a12 <UART_WaitOnFlagUntilTimeout>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d005      	beq.n	8005994 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e03a      	b.n	8005a0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10b      	bne.n	80059b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	3302      	adds	r3, #2
 80059ae:	61bb      	str	r3, [r7, #24]
 80059b0:	e007      	b.n	80059c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	781a      	ldrb	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	3301      	adds	r3, #1
 80059c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1cb      	bne.n	8005972 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2200      	movs	r2, #0
 80059e2:	2140      	movs	r1, #64	@ 0x40
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 f814 	bl	8005a12 <UART_WaitOnFlagUntilTimeout>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d005      	beq.n	80059fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e006      	b.n	8005a0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	e000      	b.n	8005a0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a08:	2302      	movs	r3, #2
  }
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3720      	adds	r7, #32
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b086      	sub	sp, #24
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	603b      	str	r3, [r7, #0]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a22:	e03b      	b.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a2a:	d037      	beq.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a2c:	f7fd ffa0 	bl	8003970 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	6a3a      	ldr	r2, [r7, #32]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d302      	bcc.n	8005a42 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e03a      	b.n	8005abc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d023      	beq.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b80      	cmp	r3, #128	@ 0x80
 8005a58:	d020      	beq.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b40      	cmp	r3, #64	@ 0x40
 8005a5e:	d01d      	beq.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0308 	and.w	r3, r3, #8
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d116      	bne.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f81d 	bl	8005ac4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2208      	movs	r2, #8
 8005a8e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e00f      	b.n	8005abc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	bf0c      	ite	eq
 8005aac:	2301      	moveq	r3, #1
 8005aae:	2300      	movne	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	79fb      	ldrb	r3, [r7, #7]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d0b4      	beq.n	8005a24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b095      	sub	sp, #84	@ 0x54
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	330c      	adds	r3, #12
 8005ad2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ade:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	330c      	adds	r3, #12
 8005aea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005aec:	643a      	str	r2, [r7, #64]	@ 0x40
 8005aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005af2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e5      	bne.n	8005acc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3314      	adds	r3, #20
 8005b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	e853 3f00 	ldrex	r3, [r3]
 8005b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f023 0301 	bic.w	r3, r3, #1
 8005b16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3314      	adds	r3, #20
 8005b1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b28:	e841 2300 	strex	r3, r2, [r1]
 8005b2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e5      	bne.n	8005b00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d119      	bne.n	8005b70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	330c      	adds	r3, #12
 8005b42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f023 0310 	bic.w	r3, r3, #16
 8005b52:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	330c      	adds	r3, #12
 8005b5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b5c:	61ba      	str	r2, [r7, #24]
 8005b5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6979      	ldr	r1, [r7, #20]
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	613b      	str	r3, [r7, #16]
   return(result);
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e5      	bne.n	8005b3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b7e:	bf00      	nop
 8005b80:	3754      	adds	r7, #84	@ 0x54
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
	...

08005b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b90:	b0c0      	sub	sp, #256	@ 0x100
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba8:	68d9      	ldr	r1, [r3, #12]
 8005baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	ea40 0301 	orr.w	r3, r0, r1
 8005bb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005be4:	f021 010c 	bic.w	r1, r1, #12
 8005be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005bf2:	430b      	orrs	r3, r1
 8005bf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c06:	6999      	ldr	r1, [r3, #24]
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	ea40 0301 	orr.w	r3, r0, r1
 8005c12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	4b8f      	ldr	r3, [pc, #572]	@ (8005e58 <UART_SetConfig+0x2cc>)
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d005      	beq.n	8005c2c <UART_SetConfig+0xa0>
 8005c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	4b8d      	ldr	r3, [pc, #564]	@ (8005e5c <UART_SetConfig+0x2d0>)
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d104      	bne.n	8005c36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c2c:	f7fe fdb0 	bl	8004790 <HAL_RCC_GetPCLK2Freq>
 8005c30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c34:	e003      	b.n	8005c3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c36:	f7fe fd97 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 8005c3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c48:	f040 810c 	bne.w	8005e64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c50:	2200      	movs	r2, #0
 8005c52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c5e:	4622      	mov	r2, r4
 8005c60:	462b      	mov	r3, r5
 8005c62:	1891      	adds	r1, r2, r2
 8005c64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c66:	415b      	adcs	r3, r3
 8005c68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c6e:	4621      	mov	r1, r4
 8005c70:	eb12 0801 	adds.w	r8, r2, r1
 8005c74:	4629      	mov	r1, r5
 8005c76:	eb43 0901 	adc.w	r9, r3, r1
 8005c7a:	f04f 0200 	mov.w	r2, #0
 8005c7e:	f04f 0300 	mov.w	r3, #0
 8005c82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c8e:	4690      	mov	r8, r2
 8005c90:	4699      	mov	r9, r3
 8005c92:	4623      	mov	r3, r4
 8005c94:	eb18 0303 	adds.w	r3, r8, r3
 8005c98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c9c:	462b      	mov	r3, r5
 8005c9e:	eb49 0303 	adc.w	r3, r9, r3
 8005ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cb2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005cb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005cba:	460b      	mov	r3, r1
 8005cbc:	18db      	adds	r3, r3, r3
 8005cbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	eb42 0303 	adc.w	r3, r2, r3
 8005cc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ccc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005cd0:	f7fa ff7e 	bl	8000bd0 <__aeabi_uldivmod>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4b61      	ldr	r3, [pc, #388]	@ (8005e60 <UART_SetConfig+0x2d4>)
 8005cda:	fba3 2302 	umull	r2, r3, r3, r2
 8005cde:	095b      	lsrs	r3, r3, #5
 8005ce0:	011c      	lsls	r4, r3, #4
 8005ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005cec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005cf0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005cf4:	4642      	mov	r2, r8
 8005cf6:	464b      	mov	r3, r9
 8005cf8:	1891      	adds	r1, r2, r2
 8005cfa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005cfc:	415b      	adcs	r3, r3
 8005cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d04:	4641      	mov	r1, r8
 8005d06:	eb12 0a01 	adds.w	sl, r2, r1
 8005d0a:	4649      	mov	r1, r9
 8005d0c:	eb43 0b01 	adc.w	fp, r3, r1
 8005d10:	f04f 0200 	mov.w	r2, #0
 8005d14:	f04f 0300 	mov.w	r3, #0
 8005d18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d24:	4692      	mov	sl, r2
 8005d26:	469b      	mov	fp, r3
 8005d28:	4643      	mov	r3, r8
 8005d2a:	eb1a 0303 	adds.w	r3, sl, r3
 8005d2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d32:	464b      	mov	r3, r9
 8005d34:	eb4b 0303 	adc.w	r3, fp, r3
 8005d38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d50:	460b      	mov	r3, r1
 8005d52:	18db      	adds	r3, r3, r3
 8005d54:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d56:	4613      	mov	r3, r2
 8005d58:	eb42 0303 	adc.w	r3, r2, r3
 8005d5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d66:	f7fa ff33 	bl	8000bd0 <__aeabi_uldivmod>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	4611      	mov	r1, r2
 8005d70:	4b3b      	ldr	r3, [pc, #236]	@ (8005e60 <UART_SetConfig+0x2d4>)
 8005d72:	fba3 2301 	umull	r2, r3, r3, r1
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	2264      	movs	r2, #100	@ 0x64
 8005d7a:	fb02 f303 	mul.w	r3, r2, r3
 8005d7e:	1acb      	subs	r3, r1, r3
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d86:	4b36      	ldr	r3, [pc, #216]	@ (8005e60 <UART_SetConfig+0x2d4>)
 8005d88:	fba3 2302 	umull	r2, r3, r3, r2
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d94:	441c      	add	r4, r3
 8005d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005da0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005da4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005da8:	4642      	mov	r2, r8
 8005daa:	464b      	mov	r3, r9
 8005dac:	1891      	adds	r1, r2, r2
 8005dae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005db0:	415b      	adcs	r3, r3
 8005db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005db4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005db8:	4641      	mov	r1, r8
 8005dba:	1851      	adds	r1, r2, r1
 8005dbc:	6339      	str	r1, [r7, #48]	@ 0x30
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	414b      	adcs	r3, r1
 8005dc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005dd0:	4659      	mov	r1, fp
 8005dd2:	00cb      	lsls	r3, r1, #3
 8005dd4:	4651      	mov	r1, sl
 8005dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dda:	4651      	mov	r1, sl
 8005ddc:	00ca      	lsls	r2, r1, #3
 8005dde:	4610      	mov	r0, r2
 8005de0:	4619      	mov	r1, r3
 8005de2:	4603      	mov	r3, r0
 8005de4:	4642      	mov	r2, r8
 8005de6:	189b      	adds	r3, r3, r2
 8005de8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dec:	464b      	mov	r3, r9
 8005dee:	460a      	mov	r2, r1
 8005df0:	eb42 0303 	adc.w	r3, r2, r3
 8005df4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	18db      	adds	r3, r3, r3
 8005e10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e12:	4613      	mov	r3, r2
 8005e14:	eb42 0303 	adc.w	r3, r2, r3
 8005e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e22:	f7fa fed5 	bl	8000bd0 <__aeabi_uldivmod>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e60 <UART_SetConfig+0x2d4>)
 8005e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e30:	095b      	lsrs	r3, r3, #5
 8005e32:	2164      	movs	r1, #100	@ 0x64
 8005e34:	fb01 f303 	mul.w	r3, r1, r3
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	3332      	adds	r3, #50	@ 0x32
 8005e3e:	4a08      	ldr	r2, [pc, #32]	@ (8005e60 <UART_SetConfig+0x2d4>)
 8005e40:	fba2 2303 	umull	r2, r3, r2, r3
 8005e44:	095b      	lsrs	r3, r3, #5
 8005e46:	f003 0207 	and.w	r2, r3, #7
 8005e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4422      	add	r2, r4
 8005e52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e54:	e106      	b.n	8006064 <UART_SetConfig+0x4d8>
 8005e56:	bf00      	nop
 8005e58:	40011000 	.word	0x40011000
 8005e5c:	40011400 	.word	0x40011400
 8005e60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e76:	4642      	mov	r2, r8
 8005e78:	464b      	mov	r3, r9
 8005e7a:	1891      	adds	r1, r2, r2
 8005e7c:	6239      	str	r1, [r7, #32]
 8005e7e:	415b      	adcs	r3, r3
 8005e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e86:	4641      	mov	r1, r8
 8005e88:	1854      	adds	r4, r2, r1
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	eb43 0501 	adc.w	r5, r3, r1
 8005e90:	f04f 0200 	mov.w	r2, #0
 8005e94:	f04f 0300 	mov.w	r3, #0
 8005e98:	00eb      	lsls	r3, r5, #3
 8005e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e9e:	00e2      	lsls	r2, r4, #3
 8005ea0:	4614      	mov	r4, r2
 8005ea2:	461d      	mov	r5, r3
 8005ea4:	4643      	mov	r3, r8
 8005ea6:	18e3      	adds	r3, r4, r3
 8005ea8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005eac:	464b      	mov	r3, r9
 8005eae:	eb45 0303 	adc.w	r3, r5, r3
 8005eb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ec2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ec6:	f04f 0200 	mov.w	r2, #0
 8005eca:	f04f 0300 	mov.w	r3, #0
 8005ece:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ed2:	4629      	mov	r1, r5
 8005ed4:	008b      	lsls	r3, r1, #2
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005edc:	4621      	mov	r1, r4
 8005ede:	008a      	lsls	r2, r1, #2
 8005ee0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ee4:	f7fa fe74 	bl	8000bd0 <__aeabi_uldivmod>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4b60      	ldr	r3, [pc, #384]	@ (8006070 <UART_SetConfig+0x4e4>)
 8005eee:	fba3 2302 	umull	r2, r3, r3, r2
 8005ef2:	095b      	lsrs	r3, r3, #5
 8005ef4:	011c      	lsls	r4, r3, #4
 8005ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f08:	4642      	mov	r2, r8
 8005f0a:	464b      	mov	r3, r9
 8005f0c:	1891      	adds	r1, r2, r2
 8005f0e:	61b9      	str	r1, [r7, #24]
 8005f10:	415b      	adcs	r3, r3
 8005f12:	61fb      	str	r3, [r7, #28]
 8005f14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f18:	4641      	mov	r1, r8
 8005f1a:	1851      	adds	r1, r2, r1
 8005f1c:	6139      	str	r1, [r7, #16]
 8005f1e:	4649      	mov	r1, r9
 8005f20:	414b      	adcs	r3, r1
 8005f22:	617b      	str	r3, [r7, #20]
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f30:	4659      	mov	r1, fp
 8005f32:	00cb      	lsls	r3, r1, #3
 8005f34:	4651      	mov	r1, sl
 8005f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f3a:	4651      	mov	r1, sl
 8005f3c:	00ca      	lsls	r2, r1, #3
 8005f3e:	4610      	mov	r0, r2
 8005f40:	4619      	mov	r1, r3
 8005f42:	4603      	mov	r3, r0
 8005f44:	4642      	mov	r2, r8
 8005f46:	189b      	adds	r3, r3, r2
 8005f48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f4c:	464b      	mov	r3, r9
 8005f4e:	460a      	mov	r2, r1
 8005f50:	eb42 0303 	adc.w	r3, r2, r3
 8005f54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f64:	f04f 0200 	mov.w	r2, #0
 8005f68:	f04f 0300 	mov.w	r3, #0
 8005f6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f70:	4649      	mov	r1, r9
 8005f72:	008b      	lsls	r3, r1, #2
 8005f74:	4641      	mov	r1, r8
 8005f76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f7a:	4641      	mov	r1, r8
 8005f7c:	008a      	lsls	r2, r1, #2
 8005f7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005f82:	f7fa fe25 	bl	8000bd0 <__aeabi_uldivmod>
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	4b38      	ldr	r3, [pc, #224]	@ (8006070 <UART_SetConfig+0x4e4>)
 8005f8e:	fba3 2301 	umull	r2, r3, r3, r1
 8005f92:	095b      	lsrs	r3, r3, #5
 8005f94:	2264      	movs	r2, #100	@ 0x64
 8005f96:	fb02 f303 	mul.w	r3, r2, r3
 8005f9a:	1acb      	subs	r3, r1, r3
 8005f9c:	011b      	lsls	r3, r3, #4
 8005f9e:	3332      	adds	r3, #50	@ 0x32
 8005fa0:	4a33      	ldr	r2, [pc, #204]	@ (8006070 <UART_SetConfig+0x4e4>)
 8005fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fac:	441c      	add	r4, r3
 8005fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fb6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005fb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	1891      	adds	r1, r2, r2
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	415b      	adcs	r3, r3
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fcc:	4641      	mov	r1, r8
 8005fce:	1851      	adds	r1, r2, r1
 8005fd0:	6039      	str	r1, [r7, #0]
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	414b      	adcs	r3, r1
 8005fd6:	607b      	str	r3, [r7, #4]
 8005fd8:	f04f 0200 	mov.w	r2, #0
 8005fdc:	f04f 0300 	mov.w	r3, #0
 8005fe0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fe4:	4659      	mov	r1, fp
 8005fe6:	00cb      	lsls	r3, r1, #3
 8005fe8:	4651      	mov	r1, sl
 8005fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fee:	4651      	mov	r1, sl
 8005ff0:	00ca      	lsls	r2, r1, #3
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	4642      	mov	r2, r8
 8005ffa:	189b      	adds	r3, r3, r2
 8005ffc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ffe:	464b      	mov	r3, r9
 8006000:	460a      	mov	r2, r1
 8006002:	eb42 0303 	adc.w	r3, r2, r3
 8006006:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	663b      	str	r3, [r7, #96]	@ 0x60
 8006012:	667a      	str	r2, [r7, #100]	@ 0x64
 8006014:	f04f 0200 	mov.w	r2, #0
 8006018:	f04f 0300 	mov.w	r3, #0
 800601c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006020:	4649      	mov	r1, r9
 8006022:	008b      	lsls	r3, r1, #2
 8006024:	4641      	mov	r1, r8
 8006026:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800602a:	4641      	mov	r1, r8
 800602c:	008a      	lsls	r2, r1, #2
 800602e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006032:	f7fa fdcd 	bl	8000bd0 <__aeabi_uldivmod>
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	4b0d      	ldr	r3, [pc, #52]	@ (8006070 <UART_SetConfig+0x4e4>)
 800603c:	fba3 1302 	umull	r1, r3, r3, r2
 8006040:	095b      	lsrs	r3, r3, #5
 8006042:	2164      	movs	r1, #100	@ 0x64
 8006044:	fb01 f303 	mul.w	r3, r1, r3
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	3332      	adds	r3, #50	@ 0x32
 800604e:	4a08      	ldr	r2, [pc, #32]	@ (8006070 <UART_SetConfig+0x4e4>)
 8006050:	fba2 2303 	umull	r2, r3, r2, r3
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	f003 020f 	and.w	r2, r3, #15
 800605a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4422      	add	r2, r4
 8006062:	609a      	str	r2, [r3, #8]
}
 8006064:	bf00      	nop
 8006066:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800606a:	46bd      	mov	sp, r7
 800606c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006070:	51eb851f 	.word	0x51eb851f

08006074 <memset>:
 8006074:	4402      	add	r2, r0
 8006076:	4603      	mov	r3, r0
 8006078:	4293      	cmp	r3, r2
 800607a:	d100      	bne.n	800607e <memset+0xa>
 800607c:	4770      	bx	lr
 800607e:	f803 1b01 	strb.w	r1, [r3], #1
 8006082:	e7f9      	b.n	8006078 <memset+0x4>

08006084 <__errno>:
 8006084:	4b01      	ldr	r3, [pc, #4]	@ (800608c <__errno+0x8>)
 8006086:	6818      	ldr	r0, [r3, #0]
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	20000084 	.word	0x20000084

08006090 <__libc_init_array>:
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	4d0d      	ldr	r5, [pc, #52]	@ (80060c8 <__libc_init_array+0x38>)
 8006094:	4c0d      	ldr	r4, [pc, #52]	@ (80060cc <__libc_init_array+0x3c>)
 8006096:	1b64      	subs	r4, r4, r5
 8006098:	10a4      	asrs	r4, r4, #2
 800609a:	2600      	movs	r6, #0
 800609c:	42a6      	cmp	r6, r4
 800609e:	d109      	bne.n	80060b4 <__libc_init_array+0x24>
 80060a0:	4d0b      	ldr	r5, [pc, #44]	@ (80060d0 <__libc_init_array+0x40>)
 80060a2:	4c0c      	ldr	r4, [pc, #48]	@ (80060d4 <__libc_init_array+0x44>)
 80060a4:	f000 fb8a 	bl	80067bc <_init>
 80060a8:	1b64      	subs	r4, r4, r5
 80060aa:	10a4      	asrs	r4, r4, #2
 80060ac:	2600      	movs	r6, #0
 80060ae:	42a6      	cmp	r6, r4
 80060b0:	d105      	bne.n	80060be <__libc_init_array+0x2e>
 80060b2:	bd70      	pop	{r4, r5, r6, pc}
 80060b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060b8:	4798      	blx	r3
 80060ba:	3601      	adds	r6, #1
 80060bc:	e7ee      	b.n	800609c <__libc_init_array+0xc>
 80060be:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c2:	4798      	blx	r3
 80060c4:	3601      	adds	r6, #1
 80060c6:	e7f2      	b.n	80060ae <__libc_init_array+0x1e>
 80060c8:	08006868 	.word	0x08006868
 80060cc:	08006868 	.word	0x08006868
 80060d0:	08006868 	.word	0x08006868
 80060d4:	0800686c 	.word	0x0800686c

080060d8 <atan2>:
 80060d8:	f000 b802 	b.w	80060e0 <__ieee754_atan2>
 80060dc:	0000      	movs	r0, r0
	...

080060e0 <__ieee754_atan2>:
 80060e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060e4:	ec57 6b11 	vmov	r6, r7, d1
 80060e8:	4273      	negs	r3, r6
 80060ea:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8006268 <__ieee754_atan2+0x188>
 80060ee:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80060f2:	4333      	orrs	r3, r6
 80060f4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80060f8:	4543      	cmp	r3, r8
 80060fa:	ec51 0b10 	vmov	r0, r1, d0
 80060fe:	4635      	mov	r5, r6
 8006100:	d809      	bhi.n	8006116 <__ieee754_atan2+0x36>
 8006102:	4244      	negs	r4, r0
 8006104:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006108:	4304      	orrs	r4, r0
 800610a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800610e:	4544      	cmp	r4, r8
 8006110:	468e      	mov	lr, r1
 8006112:	4681      	mov	r9, r0
 8006114:	d907      	bls.n	8006126 <__ieee754_atan2+0x46>
 8006116:	4632      	mov	r2, r6
 8006118:	463b      	mov	r3, r7
 800611a:	f7fa f85b 	bl	80001d4 <__adddf3>
 800611e:	ec41 0b10 	vmov	d0, r0, r1
 8006122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006126:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800612a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800612e:	4334      	orrs	r4, r6
 8006130:	d103      	bne.n	800613a <__ieee754_atan2+0x5a>
 8006132:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006136:	f000 b8c7 	b.w	80062c8 <atan>
 800613a:	17bc      	asrs	r4, r7, #30
 800613c:	f004 0402 	and.w	r4, r4, #2
 8006140:	ea53 0909 	orrs.w	r9, r3, r9
 8006144:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006148:	d107      	bne.n	800615a <__ieee754_atan2+0x7a>
 800614a:	2c02      	cmp	r4, #2
 800614c:	d05f      	beq.n	800620e <__ieee754_atan2+0x12e>
 800614e:	2c03      	cmp	r4, #3
 8006150:	d1e5      	bne.n	800611e <__ieee754_atan2+0x3e>
 8006152:	a141      	add	r1, pc, #260	@ (adr r1, 8006258 <__ieee754_atan2+0x178>)
 8006154:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006158:	e7e1      	b.n	800611e <__ieee754_atan2+0x3e>
 800615a:	4315      	orrs	r5, r2
 800615c:	d106      	bne.n	800616c <__ieee754_atan2+0x8c>
 800615e:	f1be 0f00 	cmp.w	lr, #0
 8006162:	da5f      	bge.n	8006224 <__ieee754_atan2+0x144>
 8006164:	a13e      	add	r1, pc, #248	@ (adr r1, 8006260 <__ieee754_atan2+0x180>)
 8006166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800616a:	e7d8      	b.n	800611e <__ieee754_atan2+0x3e>
 800616c:	4542      	cmp	r2, r8
 800616e:	d10f      	bne.n	8006190 <__ieee754_atan2+0xb0>
 8006170:	4293      	cmp	r3, r2
 8006172:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8006176:	d107      	bne.n	8006188 <__ieee754_atan2+0xa8>
 8006178:	2c02      	cmp	r4, #2
 800617a:	d84c      	bhi.n	8006216 <__ieee754_atan2+0x136>
 800617c:	4b34      	ldr	r3, [pc, #208]	@ (8006250 <__ieee754_atan2+0x170>)
 800617e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006182:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006186:	e7ca      	b.n	800611e <__ieee754_atan2+0x3e>
 8006188:	2c02      	cmp	r4, #2
 800618a:	d848      	bhi.n	800621e <__ieee754_atan2+0x13e>
 800618c:	4b31      	ldr	r3, [pc, #196]	@ (8006254 <__ieee754_atan2+0x174>)
 800618e:	e7f6      	b.n	800617e <__ieee754_atan2+0x9e>
 8006190:	4543      	cmp	r3, r8
 8006192:	d0e4      	beq.n	800615e <__ieee754_atan2+0x7e>
 8006194:	1a9b      	subs	r3, r3, r2
 8006196:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800619a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800619e:	da1e      	bge.n	80061de <__ieee754_atan2+0xfe>
 80061a0:	2f00      	cmp	r7, #0
 80061a2:	da01      	bge.n	80061a8 <__ieee754_atan2+0xc8>
 80061a4:	323c      	adds	r2, #60	@ 0x3c
 80061a6:	db1e      	blt.n	80061e6 <__ieee754_atan2+0x106>
 80061a8:	4632      	mov	r2, r6
 80061aa:	463b      	mov	r3, r7
 80061ac:	f7fa faf2 	bl	8000794 <__aeabi_ddiv>
 80061b0:	ec41 0b10 	vmov	d0, r0, r1
 80061b4:	f000 fa20 	bl	80065f8 <fabs>
 80061b8:	f000 f886 	bl	80062c8 <atan>
 80061bc:	ec51 0b10 	vmov	r0, r1, d0
 80061c0:	2c01      	cmp	r4, #1
 80061c2:	d013      	beq.n	80061ec <__ieee754_atan2+0x10c>
 80061c4:	2c02      	cmp	r4, #2
 80061c6:	d015      	beq.n	80061f4 <__ieee754_atan2+0x114>
 80061c8:	2c00      	cmp	r4, #0
 80061ca:	d0a8      	beq.n	800611e <__ieee754_atan2+0x3e>
 80061cc:	a318      	add	r3, pc, #96	@ (adr r3, 8006230 <__ieee754_atan2+0x150>)
 80061ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d2:	f7f9 fffd 	bl	80001d0 <__aeabi_dsub>
 80061d6:	a318      	add	r3, pc, #96	@ (adr r3, 8006238 <__ieee754_atan2+0x158>)
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	e014      	b.n	8006208 <__ieee754_atan2+0x128>
 80061de:	a118      	add	r1, pc, #96	@ (adr r1, 8006240 <__ieee754_atan2+0x160>)
 80061e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061e4:	e7ec      	b.n	80061c0 <__ieee754_atan2+0xe0>
 80061e6:	2000      	movs	r0, #0
 80061e8:	2100      	movs	r1, #0
 80061ea:	e7e9      	b.n	80061c0 <__ieee754_atan2+0xe0>
 80061ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80061f0:	4619      	mov	r1, r3
 80061f2:	e794      	b.n	800611e <__ieee754_atan2+0x3e>
 80061f4:	a30e      	add	r3, pc, #56	@ (adr r3, 8006230 <__ieee754_atan2+0x150>)
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	f7f9 ffe9 	bl	80001d0 <__aeabi_dsub>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	a10d      	add	r1, pc, #52	@ (adr r1, 8006238 <__ieee754_atan2+0x158>)
 8006204:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006208:	f7f9 ffe2 	bl	80001d0 <__aeabi_dsub>
 800620c:	e787      	b.n	800611e <__ieee754_atan2+0x3e>
 800620e:	a10a      	add	r1, pc, #40	@ (adr r1, 8006238 <__ieee754_atan2+0x158>)
 8006210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006214:	e783      	b.n	800611e <__ieee754_atan2+0x3e>
 8006216:	a10c      	add	r1, pc, #48	@ (adr r1, 8006248 <__ieee754_atan2+0x168>)
 8006218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800621c:	e77f      	b.n	800611e <__ieee754_atan2+0x3e>
 800621e:	2000      	movs	r0, #0
 8006220:	2100      	movs	r1, #0
 8006222:	e77c      	b.n	800611e <__ieee754_atan2+0x3e>
 8006224:	a106      	add	r1, pc, #24	@ (adr r1, 8006240 <__ieee754_atan2+0x160>)
 8006226:	e9d1 0100 	ldrd	r0, r1, [r1]
 800622a:	e778      	b.n	800611e <__ieee754_atan2+0x3e>
 800622c:	f3af 8000 	nop.w
 8006230:	33145c07 	.word	0x33145c07
 8006234:	3ca1a626 	.word	0x3ca1a626
 8006238:	54442d18 	.word	0x54442d18
 800623c:	400921fb 	.word	0x400921fb
 8006240:	54442d18 	.word	0x54442d18
 8006244:	3ff921fb 	.word	0x3ff921fb
 8006248:	54442d18 	.word	0x54442d18
 800624c:	3fe921fb 	.word	0x3fe921fb
 8006250:	08006808 	.word	0x08006808
 8006254:	080067f0 	.word	0x080067f0
 8006258:	54442d18 	.word	0x54442d18
 800625c:	c00921fb 	.word	0xc00921fb
 8006260:	54442d18 	.word	0x54442d18
 8006264:	bff921fb 	.word	0xbff921fb
 8006268:	7ff00000 	.word	0x7ff00000

0800626c <sqrt>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	ed2d 8b02 	vpush	{d8}
 8006272:	ec55 4b10 	vmov	r4, r5, d0
 8006276:	f000 f9c7 	bl	8006608 <__ieee754_sqrt>
 800627a:	4622      	mov	r2, r4
 800627c:	462b      	mov	r3, r5
 800627e:	4620      	mov	r0, r4
 8006280:	4629      	mov	r1, r5
 8006282:	eeb0 8a40 	vmov.f32	s16, s0
 8006286:	eef0 8a60 	vmov.f32	s17, s1
 800628a:	f7fa fbf3 	bl	8000a74 <__aeabi_dcmpun>
 800628e:	b990      	cbnz	r0, 80062b6 <sqrt+0x4a>
 8006290:	2200      	movs	r2, #0
 8006292:	2300      	movs	r3, #0
 8006294:	4620      	mov	r0, r4
 8006296:	4629      	mov	r1, r5
 8006298:	f7fa fbc4 	bl	8000a24 <__aeabi_dcmplt>
 800629c:	b158      	cbz	r0, 80062b6 <sqrt+0x4a>
 800629e:	f7ff fef1 	bl	8006084 <__errno>
 80062a2:	2321      	movs	r3, #33	@ 0x21
 80062a4:	6003      	str	r3, [r0, #0]
 80062a6:	2200      	movs	r2, #0
 80062a8:	2300      	movs	r3, #0
 80062aa:	4610      	mov	r0, r2
 80062ac:	4619      	mov	r1, r3
 80062ae:	f7fa fa71 	bl	8000794 <__aeabi_ddiv>
 80062b2:	ec41 0b18 	vmov	d8, r0, r1
 80062b6:	eeb0 0a48 	vmov.f32	s0, s16
 80062ba:	eef0 0a68 	vmov.f32	s1, s17
 80062be:	ecbd 8b02 	vpop	{d8}
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
 80062c4:	0000      	movs	r0, r0
	...

080062c8 <atan>:
 80062c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	ec55 4b10 	vmov	r4, r5, d0
 80062d0:	4bbf      	ldr	r3, [pc, #764]	@ (80065d0 <atan+0x308>)
 80062d2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80062d6:	429e      	cmp	r6, r3
 80062d8:	46ab      	mov	fp, r5
 80062da:	d918      	bls.n	800630e <atan+0x46>
 80062dc:	4bbd      	ldr	r3, [pc, #756]	@ (80065d4 <atan+0x30c>)
 80062de:	429e      	cmp	r6, r3
 80062e0:	d801      	bhi.n	80062e6 <atan+0x1e>
 80062e2:	d109      	bne.n	80062f8 <atan+0x30>
 80062e4:	b144      	cbz	r4, 80062f8 <atan+0x30>
 80062e6:	4622      	mov	r2, r4
 80062e8:	462b      	mov	r3, r5
 80062ea:	4620      	mov	r0, r4
 80062ec:	4629      	mov	r1, r5
 80062ee:	f7f9 ff71 	bl	80001d4 <__adddf3>
 80062f2:	4604      	mov	r4, r0
 80062f4:	460d      	mov	r5, r1
 80062f6:	e006      	b.n	8006306 <atan+0x3e>
 80062f8:	f1bb 0f00 	cmp.w	fp, #0
 80062fc:	f340 812b 	ble.w	8006556 <atan+0x28e>
 8006300:	a597      	add	r5, pc, #604	@ (adr r5, 8006560 <atan+0x298>)
 8006302:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006306:	ec45 4b10 	vmov	d0, r4, r5
 800630a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800630e:	4bb2      	ldr	r3, [pc, #712]	@ (80065d8 <atan+0x310>)
 8006310:	429e      	cmp	r6, r3
 8006312:	d813      	bhi.n	800633c <atan+0x74>
 8006314:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006318:	429e      	cmp	r6, r3
 800631a:	d80c      	bhi.n	8006336 <atan+0x6e>
 800631c:	a392      	add	r3, pc, #584	@ (adr r3, 8006568 <atan+0x2a0>)
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	4620      	mov	r0, r4
 8006324:	4629      	mov	r1, r5
 8006326:	f7f9 ff55 	bl	80001d4 <__adddf3>
 800632a:	4bac      	ldr	r3, [pc, #688]	@ (80065dc <atan+0x314>)
 800632c:	2200      	movs	r2, #0
 800632e:	f7fa fb97 	bl	8000a60 <__aeabi_dcmpgt>
 8006332:	2800      	cmp	r0, #0
 8006334:	d1e7      	bne.n	8006306 <atan+0x3e>
 8006336:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800633a:	e029      	b.n	8006390 <atan+0xc8>
 800633c:	f000 f95c 	bl	80065f8 <fabs>
 8006340:	4ba7      	ldr	r3, [pc, #668]	@ (80065e0 <atan+0x318>)
 8006342:	429e      	cmp	r6, r3
 8006344:	ec55 4b10 	vmov	r4, r5, d0
 8006348:	f200 80bc 	bhi.w	80064c4 <atan+0x1fc>
 800634c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8006350:	429e      	cmp	r6, r3
 8006352:	f200 809e 	bhi.w	8006492 <atan+0x1ca>
 8006356:	4622      	mov	r2, r4
 8006358:	462b      	mov	r3, r5
 800635a:	4620      	mov	r0, r4
 800635c:	4629      	mov	r1, r5
 800635e:	f7f9 ff39 	bl	80001d4 <__adddf3>
 8006362:	4b9e      	ldr	r3, [pc, #632]	@ (80065dc <atan+0x314>)
 8006364:	2200      	movs	r2, #0
 8006366:	f7f9 ff33 	bl	80001d0 <__aeabi_dsub>
 800636a:	2200      	movs	r2, #0
 800636c:	4606      	mov	r6, r0
 800636e:	460f      	mov	r7, r1
 8006370:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006374:	4620      	mov	r0, r4
 8006376:	4629      	mov	r1, r5
 8006378:	f7f9 ff2c 	bl	80001d4 <__adddf3>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4630      	mov	r0, r6
 8006382:	4639      	mov	r1, r7
 8006384:	f7fa fa06 	bl	8000794 <__aeabi_ddiv>
 8006388:	f04f 0a00 	mov.w	sl, #0
 800638c:	4604      	mov	r4, r0
 800638e:	460d      	mov	r5, r1
 8006390:	4622      	mov	r2, r4
 8006392:	462b      	mov	r3, r5
 8006394:	4620      	mov	r0, r4
 8006396:	4629      	mov	r1, r5
 8006398:	f7fa f8d2 	bl	8000540 <__aeabi_dmul>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4680      	mov	r8, r0
 80063a2:	4689      	mov	r9, r1
 80063a4:	f7fa f8cc 	bl	8000540 <__aeabi_dmul>
 80063a8:	a371      	add	r3, pc, #452	@ (adr r3, 8006570 <atan+0x2a8>)
 80063aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ae:	4606      	mov	r6, r0
 80063b0:	460f      	mov	r7, r1
 80063b2:	f7fa f8c5 	bl	8000540 <__aeabi_dmul>
 80063b6:	a370      	add	r3, pc, #448	@ (adr r3, 8006578 <atan+0x2b0>)
 80063b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063bc:	f7f9 ff0a 	bl	80001d4 <__adddf3>
 80063c0:	4632      	mov	r2, r6
 80063c2:	463b      	mov	r3, r7
 80063c4:	f7fa f8bc 	bl	8000540 <__aeabi_dmul>
 80063c8:	a36d      	add	r3, pc, #436	@ (adr r3, 8006580 <atan+0x2b8>)
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	f7f9 ff01 	bl	80001d4 <__adddf3>
 80063d2:	4632      	mov	r2, r6
 80063d4:	463b      	mov	r3, r7
 80063d6:	f7fa f8b3 	bl	8000540 <__aeabi_dmul>
 80063da:	a36b      	add	r3, pc, #428	@ (adr r3, 8006588 <atan+0x2c0>)
 80063dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e0:	f7f9 fef8 	bl	80001d4 <__adddf3>
 80063e4:	4632      	mov	r2, r6
 80063e6:	463b      	mov	r3, r7
 80063e8:	f7fa f8aa 	bl	8000540 <__aeabi_dmul>
 80063ec:	a368      	add	r3, pc, #416	@ (adr r3, 8006590 <atan+0x2c8>)
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	f7f9 feef 	bl	80001d4 <__adddf3>
 80063f6:	4632      	mov	r2, r6
 80063f8:	463b      	mov	r3, r7
 80063fa:	f7fa f8a1 	bl	8000540 <__aeabi_dmul>
 80063fe:	a366      	add	r3, pc, #408	@ (adr r3, 8006598 <atan+0x2d0>)
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	f7f9 fee6 	bl	80001d4 <__adddf3>
 8006408:	4642      	mov	r2, r8
 800640a:	464b      	mov	r3, r9
 800640c:	f7fa f898 	bl	8000540 <__aeabi_dmul>
 8006410:	a363      	add	r3, pc, #396	@ (adr r3, 80065a0 <atan+0x2d8>)
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	4680      	mov	r8, r0
 8006418:	4689      	mov	r9, r1
 800641a:	4630      	mov	r0, r6
 800641c:	4639      	mov	r1, r7
 800641e:	f7fa f88f 	bl	8000540 <__aeabi_dmul>
 8006422:	a361      	add	r3, pc, #388	@ (adr r3, 80065a8 <atan+0x2e0>)
 8006424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006428:	f7f9 fed2 	bl	80001d0 <__aeabi_dsub>
 800642c:	4632      	mov	r2, r6
 800642e:	463b      	mov	r3, r7
 8006430:	f7fa f886 	bl	8000540 <__aeabi_dmul>
 8006434:	a35e      	add	r3, pc, #376	@ (adr r3, 80065b0 <atan+0x2e8>)
 8006436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643a:	f7f9 fec9 	bl	80001d0 <__aeabi_dsub>
 800643e:	4632      	mov	r2, r6
 8006440:	463b      	mov	r3, r7
 8006442:	f7fa f87d 	bl	8000540 <__aeabi_dmul>
 8006446:	a35c      	add	r3, pc, #368	@ (adr r3, 80065b8 <atan+0x2f0>)
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	f7f9 fec0 	bl	80001d0 <__aeabi_dsub>
 8006450:	4632      	mov	r2, r6
 8006452:	463b      	mov	r3, r7
 8006454:	f7fa f874 	bl	8000540 <__aeabi_dmul>
 8006458:	a359      	add	r3, pc, #356	@ (adr r3, 80065c0 <atan+0x2f8>)
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	f7f9 feb7 	bl	80001d0 <__aeabi_dsub>
 8006462:	4632      	mov	r2, r6
 8006464:	463b      	mov	r3, r7
 8006466:	f7fa f86b 	bl	8000540 <__aeabi_dmul>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	4640      	mov	r0, r8
 8006470:	4649      	mov	r1, r9
 8006472:	f7f9 feaf 	bl	80001d4 <__adddf3>
 8006476:	4622      	mov	r2, r4
 8006478:	462b      	mov	r3, r5
 800647a:	f7fa f861 	bl	8000540 <__aeabi_dmul>
 800647e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	d148      	bne.n	800651a <atan+0x252>
 8006488:	4620      	mov	r0, r4
 800648a:	4629      	mov	r1, r5
 800648c:	f7f9 fea0 	bl	80001d0 <__aeabi_dsub>
 8006490:	e72f      	b.n	80062f2 <atan+0x2a>
 8006492:	4b52      	ldr	r3, [pc, #328]	@ (80065dc <atan+0x314>)
 8006494:	2200      	movs	r2, #0
 8006496:	4620      	mov	r0, r4
 8006498:	4629      	mov	r1, r5
 800649a:	f7f9 fe99 	bl	80001d0 <__aeabi_dsub>
 800649e:	4b4f      	ldr	r3, [pc, #316]	@ (80065dc <atan+0x314>)
 80064a0:	4606      	mov	r6, r0
 80064a2:	460f      	mov	r7, r1
 80064a4:	2200      	movs	r2, #0
 80064a6:	4620      	mov	r0, r4
 80064a8:	4629      	mov	r1, r5
 80064aa:	f7f9 fe93 	bl	80001d4 <__adddf3>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	4630      	mov	r0, r6
 80064b4:	4639      	mov	r1, r7
 80064b6:	f7fa f96d 	bl	8000794 <__aeabi_ddiv>
 80064ba:	f04f 0a01 	mov.w	sl, #1
 80064be:	4604      	mov	r4, r0
 80064c0:	460d      	mov	r5, r1
 80064c2:	e765      	b.n	8006390 <atan+0xc8>
 80064c4:	4b47      	ldr	r3, [pc, #284]	@ (80065e4 <atan+0x31c>)
 80064c6:	429e      	cmp	r6, r3
 80064c8:	d21c      	bcs.n	8006504 <atan+0x23c>
 80064ca:	4b47      	ldr	r3, [pc, #284]	@ (80065e8 <atan+0x320>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	4620      	mov	r0, r4
 80064d0:	4629      	mov	r1, r5
 80064d2:	f7f9 fe7d 	bl	80001d0 <__aeabi_dsub>
 80064d6:	4b44      	ldr	r3, [pc, #272]	@ (80065e8 <atan+0x320>)
 80064d8:	4606      	mov	r6, r0
 80064da:	460f      	mov	r7, r1
 80064dc:	2200      	movs	r2, #0
 80064de:	4620      	mov	r0, r4
 80064e0:	4629      	mov	r1, r5
 80064e2:	f7fa f82d 	bl	8000540 <__aeabi_dmul>
 80064e6:	4b3d      	ldr	r3, [pc, #244]	@ (80065dc <atan+0x314>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	f7f9 fe73 	bl	80001d4 <__adddf3>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4630      	mov	r0, r6
 80064f4:	4639      	mov	r1, r7
 80064f6:	f7fa f94d 	bl	8000794 <__aeabi_ddiv>
 80064fa:	f04f 0a02 	mov.w	sl, #2
 80064fe:	4604      	mov	r4, r0
 8006500:	460d      	mov	r5, r1
 8006502:	e745      	b.n	8006390 <atan+0xc8>
 8006504:	4622      	mov	r2, r4
 8006506:	462b      	mov	r3, r5
 8006508:	4938      	ldr	r1, [pc, #224]	@ (80065ec <atan+0x324>)
 800650a:	2000      	movs	r0, #0
 800650c:	f7fa f942 	bl	8000794 <__aeabi_ddiv>
 8006510:	f04f 0a03 	mov.w	sl, #3
 8006514:	4604      	mov	r4, r0
 8006516:	460d      	mov	r5, r1
 8006518:	e73a      	b.n	8006390 <atan+0xc8>
 800651a:	4b35      	ldr	r3, [pc, #212]	@ (80065f0 <atan+0x328>)
 800651c:	4e35      	ldr	r6, [pc, #212]	@ (80065f4 <atan+0x32c>)
 800651e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006526:	f7f9 fe53 	bl	80001d0 <__aeabi_dsub>
 800652a:	4622      	mov	r2, r4
 800652c:	462b      	mov	r3, r5
 800652e:	f7f9 fe4f 	bl	80001d0 <__aeabi_dsub>
 8006532:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800653e:	f7f9 fe47 	bl	80001d0 <__aeabi_dsub>
 8006542:	f1bb 0f00 	cmp.w	fp, #0
 8006546:	4604      	mov	r4, r0
 8006548:	460d      	mov	r5, r1
 800654a:	f6bf aedc 	bge.w	8006306 <atan+0x3e>
 800654e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006552:	461d      	mov	r5, r3
 8006554:	e6d7      	b.n	8006306 <atan+0x3e>
 8006556:	a51c      	add	r5, pc, #112	@ (adr r5, 80065c8 <atan+0x300>)
 8006558:	e9d5 4500 	ldrd	r4, r5, [r5]
 800655c:	e6d3      	b.n	8006306 <atan+0x3e>
 800655e:	bf00      	nop
 8006560:	54442d18 	.word	0x54442d18
 8006564:	3ff921fb 	.word	0x3ff921fb
 8006568:	8800759c 	.word	0x8800759c
 800656c:	7e37e43c 	.word	0x7e37e43c
 8006570:	e322da11 	.word	0xe322da11
 8006574:	3f90ad3a 	.word	0x3f90ad3a
 8006578:	24760deb 	.word	0x24760deb
 800657c:	3fa97b4b 	.word	0x3fa97b4b
 8006580:	a0d03d51 	.word	0xa0d03d51
 8006584:	3fb10d66 	.word	0x3fb10d66
 8006588:	c54c206e 	.word	0xc54c206e
 800658c:	3fb745cd 	.word	0x3fb745cd
 8006590:	920083ff 	.word	0x920083ff
 8006594:	3fc24924 	.word	0x3fc24924
 8006598:	5555550d 	.word	0x5555550d
 800659c:	3fd55555 	.word	0x3fd55555
 80065a0:	2c6a6c2f 	.word	0x2c6a6c2f
 80065a4:	bfa2b444 	.word	0xbfa2b444
 80065a8:	52defd9a 	.word	0x52defd9a
 80065ac:	3fadde2d 	.word	0x3fadde2d
 80065b0:	af749a6d 	.word	0xaf749a6d
 80065b4:	3fb3b0f2 	.word	0x3fb3b0f2
 80065b8:	fe231671 	.word	0xfe231671
 80065bc:	3fbc71c6 	.word	0x3fbc71c6
 80065c0:	9998ebc4 	.word	0x9998ebc4
 80065c4:	3fc99999 	.word	0x3fc99999
 80065c8:	54442d18 	.word	0x54442d18
 80065cc:	bff921fb 	.word	0xbff921fb
 80065d0:	440fffff 	.word	0x440fffff
 80065d4:	7ff00000 	.word	0x7ff00000
 80065d8:	3fdbffff 	.word	0x3fdbffff
 80065dc:	3ff00000 	.word	0x3ff00000
 80065e0:	3ff2ffff 	.word	0x3ff2ffff
 80065e4:	40038000 	.word	0x40038000
 80065e8:	3ff80000 	.word	0x3ff80000
 80065ec:	bff00000 	.word	0xbff00000
 80065f0:	08006820 	.word	0x08006820
 80065f4:	08006840 	.word	0x08006840

080065f8 <fabs>:
 80065f8:	ec51 0b10 	vmov	r0, r1, d0
 80065fc:	4602      	mov	r2, r0
 80065fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006602:	ec43 2b10 	vmov	d0, r2, r3
 8006606:	4770      	bx	lr

08006608 <__ieee754_sqrt>:
 8006608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	4a68      	ldr	r2, [pc, #416]	@ (80067b0 <__ieee754_sqrt+0x1a8>)
 800660e:	ec55 4b10 	vmov	r4, r5, d0
 8006612:	43aa      	bics	r2, r5
 8006614:	462b      	mov	r3, r5
 8006616:	4621      	mov	r1, r4
 8006618:	d110      	bne.n	800663c <__ieee754_sqrt+0x34>
 800661a:	4622      	mov	r2, r4
 800661c:	4620      	mov	r0, r4
 800661e:	4629      	mov	r1, r5
 8006620:	f7f9 ff8e 	bl	8000540 <__aeabi_dmul>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4620      	mov	r0, r4
 800662a:	4629      	mov	r1, r5
 800662c:	f7f9 fdd2 	bl	80001d4 <__adddf3>
 8006630:	4604      	mov	r4, r0
 8006632:	460d      	mov	r5, r1
 8006634:	ec45 4b10 	vmov	d0, r4, r5
 8006638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663c:	2d00      	cmp	r5, #0
 800663e:	dc0e      	bgt.n	800665e <__ieee754_sqrt+0x56>
 8006640:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006644:	4322      	orrs	r2, r4
 8006646:	d0f5      	beq.n	8006634 <__ieee754_sqrt+0x2c>
 8006648:	b19d      	cbz	r5, 8006672 <__ieee754_sqrt+0x6a>
 800664a:	4622      	mov	r2, r4
 800664c:	4620      	mov	r0, r4
 800664e:	4629      	mov	r1, r5
 8006650:	f7f9 fdbe 	bl	80001d0 <__aeabi_dsub>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	f7fa f89c 	bl	8000794 <__aeabi_ddiv>
 800665c:	e7e8      	b.n	8006630 <__ieee754_sqrt+0x28>
 800665e:	152a      	asrs	r2, r5, #20
 8006660:	d115      	bne.n	800668e <__ieee754_sqrt+0x86>
 8006662:	2000      	movs	r0, #0
 8006664:	e009      	b.n	800667a <__ieee754_sqrt+0x72>
 8006666:	0acb      	lsrs	r3, r1, #11
 8006668:	3a15      	subs	r2, #21
 800666a:	0549      	lsls	r1, r1, #21
 800666c:	2b00      	cmp	r3, #0
 800666e:	d0fa      	beq.n	8006666 <__ieee754_sqrt+0x5e>
 8006670:	e7f7      	b.n	8006662 <__ieee754_sqrt+0x5a>
 8006672:	462a      	mov	r2, r5
 8006674:	e7fa      	b.n	800666c <__ieee754_sqrt+0x64>
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	3001      	adds	r0, #1
 800667a:	02dc      	lsls	r4, r3, #11
 800667c:	d5fb      	bpl.n	8006676 <__ieee754_sqrt+0x6e>
 800667e:	1e44      	subs	r4, r0, #1
 8006680:	1b12      	subs	r2, r2, r4
 8006682:	f1c0 0420 	rsb	r4, r0, #32
 8006686:	fa21 f404 	lsr.w	r4, r1, r4
 800668a:	4323      	orrs	r3, r4
 800668c:	4081      	lsls	r1, r0
 800668e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006692:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800669a:	07d2      	lsls	r2, r2, #31
 800669c:	bf5c      	itt	pl
 800669e:	005b      	lslpl	r3, r3, #1
 80066a0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80066a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80066a8:	bf58      	it	pl
 80066aa:	0049      	lslpl	r1, r1, #1
 80066ac:	2600      	movs	r6, #0
 80066ae:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80066b2:	106d      	asrs	r5, r5, #1
 80066b4:	0049      	lsls	r1, r1, #1
 80066b6:	2016      	movs	r0, #22
 80066b8:	4632      	mov	r2, r6
 80066ba:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80066be:	1917      	adds	r7, r2, r4
 80066c0:	429f      	cmp	r7, r3
 80066c2:	bfde      	ittt	le
 80066c4:	193a      	addle	r2, r7, r4
 80066c6:	1bdb      	suble	r3, r3, r7
 80066c8:	1936      	addle	r6, r6, r4
 80066ca:	0fcf      	lsrs	r7, r1, #31
 80066cc:	3801      	subs	r0, #1
 80066ce:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80066d2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80066d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80066da:	d1f0      	bne.n	80066be <__ieee754_sqrt+0xb6>
 80066dc:	4604      	mov	r4, r0
 80066de:	2720      	movs	r7, #32
 80066e0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80066e4:	429a      	cmp	r2, r3
 80066e6:	eb00 0e0c 	add.w	lr, r0, ip
 80066ea:	db02      	blt.n	80066f2 <__ieee754_sqrt+0xea>
 80066ec:	d113      	bne.n	8006716 <__ieee754_sqrt+0x10e>
 80066ee:	458e      	cmp	lr, r1
 80066f0:	d811      	bhi.n	8006716 <__ieee754_sqrt+0x10e>
 80066f2:	f1be 0f00 	cmp.w	lr, #0
 80066f6:	eb0e 000c 	add.w	r0, lr, ip
 80066fa:	da42      	bge.n	8006782 <__ieee754_sqrt+0x17a>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	db40      	blt.n	8006782 <__ieee754_sqrt+0x17a>
 8006700:	f102 0801 	add.w	r8, r2, #1
 8006704:	1a9b      	subs	r3, r3, r2
 8006706:	458e      	cmp	lr, r1
 8006708:	bf88      	it	hi
 800670a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800670e:	eba1 010e 	sub.w	r1, r1, lr
 8006712:	4464      	add	r4, ip
 8006714:	4642      	mov	r2, r8
 8006716:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800671a:	3f01      	subs	r7, #1
 800671c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006720:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006724:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006728:	d1dc      	bne.n	80066e4 <__ieee754_sqrt+0xdc>
 800672a:	4319      	orrs	r1, r3
 800672c:	d01b      	beq.n	8006766 <__ieee754_sqrt+0x15e>
 800672e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80067b4 <__ieee754_sqrt+0x1ac>
 8006732:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80067b8 <__ieee754_sqrt+0x1b0>
 8006736:	e9da 0100 	ldrd	r0, r1, [sl]
 800673a:	e9db 2300 	ldrd	r2, r3, [fp]
 800673e:	f7f9 fd47 	bl	80001d0 <__aeabi_dsub>
 8006742:	e9da 8900 	ldrd	r8, r9, [sl]
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	4640      	mov	r0, r8
 800674c:	4649      	mov	r1, r9
 800674e:	f7fa f973 	bl	8000a38 <__aeabi_dcmple>
 8006752:	b140      	cbz	r0, 8006766 <__ieee754_sqrt+0x15e>
 8006754:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8006758:	e9da 0100 	ldrd	r0, r1, [sl]
 800675c:	e9db 2300 	ldrd	r2, r3, [fp]
 8006760:	d111      	bne.n	8006786 <__ieee754_sqrt+0x17e>
 8006762:	3601      	adds	r6, #1
 8006764:	463c      	mov	r4, r7
 8006766:	1072      	asrs	r2, r6, #1
 8006768:	0863      	lsrs	r3, r4, #1
 800676a:	07f1      	lsls	r1, r6, #31
 800676c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006770:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006774:	bf48      	it	mi
 8006776:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800677a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800677e:	4618      	mov	r0, r3
 8006780:	e756      	b.n	8006630 <__ieee754_sqrt+0x28>
 8006782:	4690      	mov	r8, r2
 8006784:	e7be      	b.n	8006704 <__ieee754_sqrt+0xfc>
 8006786:	f7f9 fd25 	bl	80001d4 <__adddf3>
 800678a:	e9da 8900 	ldrd	r8, r9, [sl]
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	4640      	mov	r0, r8
 8006794:	4649      	mov	r1, r9
 8006796:	f7fa f945 	bl	8000a24 <__aeabi_dcmplt>
 800679a:	b120      	cbz	r0, 80067a6 <__ieee754_sqrt+0x19e>
 800679c:	1ca0      	adds	r0, r4, #2
 800679e:	bf08      	it	eq
 80067a0:	3601      	addeq	r6, #1
 80067a2:	3402      	adds	r4, #2
 80067a4:	e7df      	b.n	8006766 <__ieee754_sqrt+0x15e>
 80067a6:	1c63      	adds	r3, r4, #1
 80067a8:	f023 0401 	bic.w	r4, r3, #1
 80067ac:	e7db      	b.n	8006766 <__ieee754_sqrt+0x15e>
 80067ae:	bf00      	nop
 80067b0:	7ff00000 	.word	0x7ff00000
 80067b4:	200000e0 	.word	0x200000e0
 80067b8:	200000d8 	.word	0x200000d8

080067bc <_init>:
 80067bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067be:	bf00      	nop
 80067c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c2:	bc08      	pop	{r3}
 80067c4:	469e      	mov	lr, r3
 80067c6:	4770      	bx	lr

080067c8 <_fini>:
 80067c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ca:	bf00      	nop
 80067cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ce:	bc08      	pop	{r3}
 80067d0:	469e      	mov	lr, r3
 80067d2:	4770      	bx	lr
