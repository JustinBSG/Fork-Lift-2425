
jason_fork_lift_fan_vet6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08007268  08007268  00008268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007414  08007414  000090c8  2**0
                  CONTENTS
  4 .ARM          00000008  08007414  08007414  00008414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800741c  0800741c  000090c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800741c  0800741c  0000841c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007420  08007420  00008420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c8  20000000  08007424  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000090c8  2**0
                  CONTENTS
 10 .bss          000004e4  200000c8  200000c8  000090c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005ac  200005ac  000090c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000090c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001192b  00000000  00000000  000090f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000290b  00000000  00000000  0001aa23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001070  00000000  00000000  0001d330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cd2  00000000  00000000  0001e3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003eb7  00000000  00000000  0001f072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000151d2  00000000  00000000  00022f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1213  00000000  00000000  000380fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010930e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ea4  00000000  00000000  00109354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  0010e1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007250 	.word	0x08007250

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	08007250 	.word	0x08007250

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ad0:	f000 b96a 	b.w	8000da8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	460c      	mov	r4, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14e      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000af8:	4694      	mov	ip, r2
 8000afa:	458c      	cmp	ip, r1
 8000afc:	4686      	mov	lr, r0
 8000afe:	fab2 f282 	clz	r2, r2
 8000b02:	d962      	bls.n	8000bca <__udivmoddi4+0xde>
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b14:	4319      	orrs	r1, r3
 8000b16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f f68c 	uxth.w	r6, ip
 8000b22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb04 f106 	mul.w	r1, r4, r6
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b42:	f080 8112 	bcs.w	8000d6a <__udivmoddi4+0x27e>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 810f 	bls.w	8000d6a <__udivmoddi4+0x27e>
 8000b4c:	3c02      	subs	r4, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a59      	subs	r1, r3, r1
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb00 f606 	mul.w	r6, r0, r6
 8000b66:	429e      	cmp	r6, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x94>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b72:	f080 80fc 	bcs.w	8000d6e <__udivmoddi4+0x282>
 8000b76:	429e      	cmp	r6, r3
 8000b78:	f240 80f9 	bls.w	8000d6e <__udivmoddi4+0x282>
 8000b7c:	4463      	add	r3, ip
 8000b7e:	3802      	subs	r0, #2
 8000b80:	1b9b      	subs	r3, r3, r6
 8000b82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b86:	2100      	movs	r1, #0
 8000b88:	b11d      	cbz	r5, 8000b92 <__udivmoddi4+0xa6>
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d905      	bls.n	8000ba6 <__udivmoddi4+0xba>
 8000b9a:	b10d      	cbz	r5, 8000ba0 <__udivmoddi4+0xb4>
 8000b9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e7f5      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000ba6:	fab3 f183 	clz	r1, r3
 8000baa:	2900      	cmp	r1, #0
 8000bac:	d146      	bne.n	8000c3c <__udivmoddi4+0x150>
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xcc>
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	f0c0 80f0 	bcc.w	8000d98 <__udivmoddi4+0x2ac>
 8000bb8:	1a86      	subs	r6, r0, r2
 8000bba:	eb64 0303 	sbc.w	r3, r4, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d0e6      	beq.n	8000b92 <__udivmoddi4+0xa6>
 8000bc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc8:	e7e3      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	f040 8090 	bne.w	8000cf0 <__udivmoddi4+0x204>
 8000bd0:	eba1 040c 	sub.w	r4, r1, ip
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	fa1f f78c 	uxth.w	r7, ip
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bee:	fb07 f006 	mul.w	r0, r7, r6
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x11c>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x11a>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f200 80cd 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000c06:	4626      	mov	r6, r4
 8000c08:	1a1c      	subs	r4, r3, r0
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c12:	fb08 4410 	mls	r4, r8, r0, r4
 8000c16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1a:	fb00 f707 	mul.w	r7, r0, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x148>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x146>
 8000c2c:	429f      	cmp	r7, r3
 8000c2e:	f200 80b0 	bhi.w	8000d92 <__udivmoddi4+0x2a6>
 8000c32:	4620      	mov	r0, r4
 8000c34:	1bdb      	subs	r3, r3, r7
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	e7a5      	b.n	8000b88 <__udivmoddi4+0x9c>
 8000c3c:	f1c1 0620 	rsb	r6, r1, #32
 8000c40:	408b      	lsls	r3, r1
 8000c42:	fa22 f706 	lsr.w	r7, r2, r6
 8000c46:	431f      	orrs	r7, r3
 8000c48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c50:	ea43 030c 	orr.w	r3, r3, ip
 8000c54:	40f4      	lsrs	r4, r6
 8000c56:	fa00 f801 	lsl.w	r8, r0, r1
 8000c5a:	0c38      	lsrs	r0, r7, #16
 8000c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c60:	fbb4 fef0 	udiv	lr, r4, r0
 8000c64:	fa1f fc87 	uxth.w	ip, r7
 8000c68:	fb00 441e 	mls	r4, r0, lr, r4
 8000c6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c70:	fb0e f90c 	mul.w	r9, lr, ip
 8000c74:	45a1      	cmp	r9, r4
 8000c76:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x1a6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c82:	f080 8084 	bcs.w	8000d8e <__udivmoddi4+0x2a2>
 8000c86:	45a1      	cmp	r9, r4
 8000c88:	f240 8081 	bls.w	8000d8e <__udivmoddi4+0x2a2>
 8000c8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	eba4 0409 	sub.w	r4, r4, r9
 8000c96:	fa1f f983 	uxth.w	r9, r3
 8000c9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ca2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x1d2>
 8000cae:	193c      	adds	r4, r7, r4
 8000cb0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000cb4:	d267      	bcs.n	8000d86 <__udivmoddi4+0x29a>
 8000cb6:	45a4      	cmp	ip, r4
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0x29a>
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cc6:	eba4 040c 	sub.w	r4, r4, ip
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	46ce      	mov	lr, r9
 8000cce:	469c      	mov	ip, r3
 8000cd0:	d351      	bcc.n	8000d76 <__udivmoddi4+0x28a>
 8000cd2:	d04e      	beq.n	8000d72 <__udivmoddi4+0x286>
 8000cd4:	b155      	cbz	r5, 8000cec <__udivmoddi4+0x200>
 8000cd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cda:	eb64 040c 	sbc.w	r4, r4, ip
 8000cde:	fa04 f606 	lsl.w	r6, r4, r6
 8000ce2:	40cb      	lsrs	r3, r1
 8000ce4:	431e      	orrs	r6, r3
 8000ce6:	40cc      	lsrs	r4, r1
 8000ce8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	e750      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000d00:	4094      	lsls	r4, r2
 8000d02:	430c      	orrs	r4, r1
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3110 	mls	r1, r8, r0, r3
 8000d18:	0c23      	lsrs	r3, r4, #16
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f107 	mul.w	r1, r0, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x24c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d2e:	d22c      	bcs.n	8000d8a <__udivmoddi4+0x29e>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d92a      	bls.n	8000d8a <__udivmoddi4+0x29e>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d40:	fb08 3311 	mls	r3, r8, r1, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb01 f307 	mul.w	r3, r1, r7
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x276>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d58:	d213      	bcs.n	8000d82 <__udivmoddi4+0x296>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d911      	bls.n	8000d82 <__udivmoddi4+0x296>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	1ae4      	subs	r4, r4, r3
 8000d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d68:	e739      	b.n	8000bde <__udivmoddi4+0xf2>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	e6f0      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e706      	b.n	8000b80 <__udivmoddi4+0x94>
 8000d72:	45c8      	cmp	r8, r9
 8000d74:	d2ae      	bcs.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7a8      	b.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d82:	4631      	mov	r1, r6
 8000d84:	e7ed      	b.n	8000d62 <__udivmoddi4+0x276>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e799      	b.n	8000cbe <__udivmoddi4+0x1d2>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e7d4      	b.n	8000d38 <__udivmoddi4+0x24c>
 8000d8e:	46d6      	mov	lr, sl
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1a6>
 8000d92:	4463      	add	r3, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e74d      	b.n	8000c34 <__udivmoddi4+0x148>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e70f      	b.n	8000bc0 <__udivmoddi4+0xd4>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	e730      	b.n	8000c08 <__udivmoddi4+0x11c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <parse_controller_data>:

char controller_buffer[41] = "";

ControllerState controller_state = {.r1 = false, .r2 = false, .r3 = false, .l1 = false, .l2 = false, .l3 = false, .cross = false, .circle = false, .triangle = false, .square = false, .up = false, .down = false, .left = false, .right = false, .l_stick_x = 0, .l_stick_y = 0, .r_stick_x = 0, .r_stick_y = 0, .l2_pressure = 0, .r2_pressure = 0, .ps_button = false, .share_button = false, .options_button = false};

uint8_t parse_controller_data(const char* input, ControllerState* data) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b098      	sub	sp, #96	@ 0x60
 8000db0:	af08      	add	r7, sp, #32
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  if (input == NULL || data == NULL) {
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d002      	beq.n	8000dc2 <parse_controller_data+0x16>
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d104      	bne.n	8000dcc <parse_controller_data+0x20>
    printf("Invalid input or data pointer\n");
 8000dc2:	4887      	ldr	r0, [pc, #540]	@ (8000fe0 <parse_controller_data+0x234>)
 8000dc4:	f005 fab2 	bl	800632c <puts>
    return 1;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e105      	b.n	8000fd8 <parse_controller_data+0x22c>
  int buttons_value;
  char l_stick_x_str[5], l_stick_y_str[5], r_stick_x_str[5], r_stick_y_str[5];
  int l2_pressure, r2_pressure;
  int misc_buttons;

  int parse_num = sscanf(input, "c:%1x,%03x,%4s,%4s,%4s,%4s,%d,%d,%1x", &dpad_value, &buttons_value, l_stick_y_str, l_stick_x_str, r_stick_y_str, r_stick_x_str, &l2_pressure, &r2_pressure, &misc_buttons);
 8000dcc:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000dd0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	9306      	str	r3, [sp, #24]
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	9305      	str	r3, [sp, #20]
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	9304      	str	r3, [sp, #16]
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	9303      	str	r3, [sp, #12]
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	9302      	str	r3, [sp, #8]
 8000df2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4978      	ldr	r1, [pc, #480]	@ (8000fe4 <parse_controller_data+0x238>)
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f005 f884 	bl	8005f10 <siscanf>
 8000e08:	63f8      	str	r0, [r7, #60]	@ 0x3c

  if (parse_num != 9) {
 8000e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e0c:	2b09      	cmp	r3, #9
 8000e0e:	d004      	beq.n	8000e1a <parse_controller_data+0x6e>
    printf("Error parsing input string\n");
 8000e10:	4875      	ldr	r0, [pc, #468]	@ (8000fe8 <parse_controller_data+0x23c>)
 8000e12:	f005 fa8b 	bl	800632c <puts>
    return 2;
 8000e16:	2302      	movs	r3, #2
 8000e18:	e0de      	b.n	8000fd8 <parse_controller_data+0x22c>
  }

  data->up = dpad_value & 0x1;
 8000e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	bf14      	ite	ne
 8000e24:	2301      	movne	r3, #1
 8000e26:	2300      	moveq	r3, #0
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	729a      	strb	r2, [r3, #10]
  data->down = dpad_value & 0x2;
 8000e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	bf14      	ite	ne
 8000e38:	2301      	movne	r3, #1
 8000e3a:	2300      	moveq	r3, #0
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	72da      	strb	r2, [r3, #11]
  data->right = dpad_value & 0x4;
 8000e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	bf14      	ite	ne
 8000e4c:	2301      	movne	r3, #1
 8000e4e:	2300      	moveq	r3, #0
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	735a      	strb	r2, [r3, #13]
  data->left = dpad_value & 0x8;
 8000e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e58:	f003 0308 	and.w	r3, r3, #8
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	bf14      	ite	ne
 8000e60:	2301      	movne	r3, #1
 8000e62:	2300      	moveq	r3, #0
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	731a      	strb	r2, [r3, #12]

  data->cross = buttons_value & 0x001;
 8000e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	bf14      	ite	ne
 8000e74:	2301      	movne	r3, #1
 8000e76:	2300      	moveq	r3, #0
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	719a      	strb	r2, [r3, #6]
  data->circle = buttons_value & 0x002;
 8000e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	bf14      	ite	ne
 8000e88:	2301      	movne	r3, #1
 8000e8a:	2300      	moveq	r3, #0
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	71da      	strb	r2, [r3, #7]
  data->square = buttons_value & 0x004;
 8000e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	bf14      	ite	ne
 8000e9c:	2301      	movne	r3, #1
 8000e9e:	2300      	moveq	r3, #0
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	725a      	strb	r2, [r3, #9]
  data->triangle = buttons_value & 0x008;
 8000ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ea8:	f003 0308 	and.w	r3, r3, #8
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	bf14      	ite	ne
 8000eb0:	2301      	movne	r3, #1
 8000eb2:	2300      	moveq	r3, #0
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	721a      	strb	r2, [r3, #8]
  data->l1 = buttons_value & 0x010;
 8000eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ebc:	f003 0310 	and.w	r3, r3, #16
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	bf14      	ite	ne
 8000ec4:	2301      	movne	r3, #1
 8000ec6:	2300      	moveq	r3, #0
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	70da      	strb	r2, [r3, #3]
  data->r1 = buttons_value & 0x020;
 8000ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ed0:	f003 0320 	and.w	r3, r3, #32
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	bf14      	ite	ne
 8000ed8:	2301      	movne	r3, #1
 8000eda:	2300      	moveq	r3, #0
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	701a      	strb	r2, [r3, #0]
  data->l2 = buttons_value & 0x040;
 8000ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	bf14      	ite	ne
 8000eec:	2301      	movne	r3, #1
 8000eee:	2300      	moveq	r3, #0
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	711a      	strb	r2, [r3, #4]
  data->r2 = buttons_value & 0x080;
 8000ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	bf14      	ite	ne
 8000f00:	2301      	movne	r3, #1
 8000f02:	2300      	moveq	r3, #0
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	705a      	strb	r2, [r3, #1]
  data->l3 = buttons_value & 0x100;
 8000f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bf14      	ite	ne
 8000f14:	2301      	movne	r3, #1
 8000f16:	2300      	moveq	r3, #0
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	715a      	strb	r2, [r3, #5]
  data->r3 = buttons_value & 0x200;
 8000f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	bf14      	ite	ne
 8000f28:	2301      	movne	r3, #1
 8000f2a:	2300      	moveq	r3, #0
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	709a      	strb	r2, [r3, #2]

  data->l_stick_y = (int8_t)strtol(l_stick_y_str, NULL, 10);
 8000f32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f36:	220a      	movs	r2, #10
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f005 f978 	bl	8006230 <strtol>
 8000f40:	4603      	mov	r3, r0
 8000f42:	b25a      	sxtb	r2, r3
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	73da      	strb	r2, [r3, #15]
  data->l_stick_x = (int8_t)strtol(l_stick_x_str, NULL, 10);
 8000f48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f4c:	220a      	movs	r2, #10
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f005 f96d 	bl	8006230 <strtol>
 8000f56:	4603      	mov	r3, r0
 8000f58:	b25a      	sxtb	r2, r3
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	739a      	strb	r2, [r3, #14]
  data->r_stick_y = (int8_t)strtol(r_stick_y_str, NULL, 10);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	220a      	movs	r2, #10
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f005 f962 	bl	8006230 <strtol>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	b25a      	sxtb	r2, r3
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	745a      	strb	r2, [r3, #17]
  data->r_stick_x = (int8_t)strtol(r_stick_x_str, NULL, 10);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	220a      	movs	r2, #10
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f005 f957 	bl	8006230 <strtol>
 8000f82:	4603      	mov	r3, r0
 8000f84:	b25a      	sxtb	r2, r3
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	741a      	strb	r2, [r3, #16]

  data->l2_pressure = (uint16_t)l2_pressure;
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	825a      	strh	r2, [r3, #18]
  data->r2_pressure = (uint16_t)r2_pressure;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	829a      	strh	r2, [r3, #20]

  data->ps_button = misc_buttons & 0x1;
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	bf14      	ite	ne
 8000fa4:	2301      	movne	r3, #1
 8000fa6:	2300      	moveq	r3, #0
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	759a      	strb	r2, [r3, #22]
  data->share_button = misc_buttons & 0x2;
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf14      	ite	ne
 8000fb8:	2301      	movne	r3, #1
 8000fba:	2300      	moveq	r3, #0
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	75da      	strb	r2, [r3, #23]
  data->options_button = misc_buttons & 0x4;
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	bf14      	ite	ne
 8000fcc:	2301      	movne	r3, #1
 8000fce:	2300      	moveq	r3, #0
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	761a      	strb	r2, [r3, #24]

  return 0;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3740      	adds	r7, #64	@ 0x40
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	08007268 	.word	0x08007268
 8000fe4:	08007288 	.word	0x08007288
 8000fe8:	080072b0 	.word	0x080072b0
 8000fec:	00000000 	.word	0x00000000

08000ff0 <update_encoder>:
  encoder->displacement = 0;
  encoder->velocity = 0;
  encoder->last_counter_value = 0;
}

void update_encoder(EncoderData* encoder) {
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  int current_counter = __HAL_TIM_GET_COUNTER(encoder->htim);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001000:	613b      	str	r3, [r7, #16]
  uint32_t duration = HAL_GetTick() - encoder->last_tick;
 8001002:	f001 fbd3 	bl	80027ac <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	60fb      	str	r3, [r7, #12]
  int num_pulse = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  if (duration <= 1)  // delay for encode to update, in ms
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b01      	cmp	r3, #1
 8001018:	f240 8095 	bls.w	8001146 <update_encoder+0x156>
    return;

  if (current_counter == encoder->last_counter_value) {
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	429a      	cmp	r2, r3
 8001024:	d102      	bne.n	800102c <update_encoder+0x3c>
    num_pulse = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	e035      	b.n	8001098 <update_encoder+0xa8>
  } else if (current_counter > encoder->last_counter_value) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	429a      	cmp	r2, r3
 8001034:	dd18      	ble.n	8001068 <update_encoder+0x78>
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move backward, count down, overflow
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0310 	and.w	r3, r3, #16
 8001042:	2b10      	cmp	r3, #16
 8001044:	d10a      	bne.n	800105c <update_encoder+0x6c>
      num_pulse = (__HAL_TIM_GET_AUTORELOAD(encoder->htim) - current_counter + encoder->last_counter_value) * -1;
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	6892      	ldr	r2, [r2, #8]
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	e01d      	b.n	8001098 <update_encoder+0xa8>
    } else {  // move forward, count up, no overflow
      num_pulse = current_counter - encoder->last_counter_value;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	e017      	b.n	8001098 <update_encoder+0xa8>
    }
  } else {
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move up, count up, overflow
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0310 	and.w	r3, r3, #16
 8001074:	2b10      	cmp	r3, #16
 8001076:	d105      	bne.n	8001084 <update_encoder+0x94>
      num_pulse = (encoder->last_counter_value - current_counter) * -1;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	e009      	b.n	8001098 <update_encoder+0xa8>
    } else {  // move backward, count down, no overflow
      num_pulse = __HAL_TIM_GET_AUTORELOAD(encoder->htim) - encoder->last_counter_value + current_counter;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	6892      	ldr	r2, [r2, #8]
 8001090:	1a9a      	subs	r2, r3, r2
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4413      	add	r3, r2
 8001096:	617b      	str	r3, [r7, #20]
    }
  }

  float temp_displacement = (float)num_pulse / encoder->_ppr * 2.0 * M_PI;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	ee07 3a90 	vmov	s15, r3
 800109e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	8a9b      	ldrh	r3, [r3, #20]
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010b2:	ee16 0a90 	vmov	r0, s13
 80010b6:	f7ff fa47 	bl	8000548 <__aeabi_f2d>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	f7ff f8e5 	bl	800028c <__adddf3>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	a322      	add	r3, pc, #136	@ (adr r3, 8001154 <update_encoder+0x164>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff fa92 	bl	80005f8 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fc9e 	bl	8000a1c <__aeabi_d2f>
 80010e0:	4603      	mov	r3, r0
 80010e2:	60bb      	str	r3, [r7, #8]
  encoder->last_counter_value = current_counter;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	609a      	str	r2, [r3, #8]
  encoder->displacement += temp_displacement;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	ed93 7a00 	vldr	s14, [r3]
 80010f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80010f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	edc3 7a00 	vstr	s15, [r3]
  encoder->velocity = temp_displacement * 1000.0 / duration;
 80010fe:	68b8      	ldr	r0, [r7, #8]
 8001100:	f7ff fa22 	bl	8000548 <__aeabi_f2d>
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <update_encoder+0x160>)
 800110a:	f7ff fa75 	bl	80005f8 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4614      	mov	r4, r2
 8001114:	461d      	mov	r5, r3
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f7ff f9f4 	bl	8000504 <__aeabi_ui2d>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	f7ff fb92 	bl	800084c <__aeabi_ddiv>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fc74 	bl	8000a1c <__aeabi_d2f>
 8001134:	4602      	mov	r2, r0
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	605a      	str	r2, [r3, #4]
  encoder->last_tick = HAL_GetTick();
 800113a:	f001 fb37 	bl	80027ac <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	e000      	b.n	8001148 <update_encoder+0x158>
    return;
 8001146:	bf00      	nop
}
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bdb0      	pop	{r4, r5, r7, pc}
 800114e:	bf00      	nop
 8001150:	408f4000 	.word	0x408f4000
 8001154:	54442d18 	.word	0x54442d18
 8001158:	400921fb 	.word	0x400921fb

0800115c <read_current_velocity>:

WheelVelocity read_current_velocity(EncoderData* encoders) {
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b095      	sub	sp, #84	@ 0x54
 8001160:	af00      	add	r7, sp, #0
 8001162:	6178      	str	r0, [r7, #20]
  if (encoders == NULL)
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d107      	bne.n	800117a <read_current_velocity+0x1e>
    return (WheelVelocity){0, 0, 0, 0};
 800116a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	e030      	b.n	80011dc <read_current_velocity+0x80>

  WheelVelocity velocities = {.front_left = 0, .front_right = 0, .rear_left = 0, .rear_right = 0};
 800117a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 8001188:	2300      	movs	r3, #0
 800118a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800118c:	e00d      	b.n	80011aa <read_current_velocity+0x4e>
    update_encoder(&(encoders[i]));
 800118e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	461a      	mov	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	4413      	add	r3, r2
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff26 	bl	8000ff0 <update_encoder>
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 80011a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011a6:	3301      	adds	r3, #1
 80011a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80011aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	ddee      	ble.n	800118e <read_current_velocity+0x32>

  velocities.front_left = encoders[FRONT_LEFT].velocity;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  velocities.front_right = encoders[FRONT_RIGHT].velocity;
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3318      	adds	r3, #24
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	633b      	str	r3, [r7, #48]	@ 0x30
  velocities.rear_left = encoders[REAR_LEFT].velocity;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3330      	adds	r3, #48	@ 0x30
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	637b      	str	r3, [r7, #52]	@ 0x34
  velocities.rear_right = encoders[REAR_RIGHT].velocity;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	3348      	adds	r3, #72	@ 0x48
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	63bb      	str	r3, [r7, #56]	@ 0x38

  return velocities;
 80011ce:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80011d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80011dc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80011de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80011e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80011e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011e4:	ee06 0a10 	vmov	s12, r0
 80011e8:	ee06 1a90 	vmov	s13, r1
 80011ec:	ee07 2a10 	vmov	s14, r2
 80011f0:	ee07 3a90 	vmov	s15, r3
 80011f4:	eeb0 0a46 	vmov.f32	s0, s12
 80011f8:	eef0 0a66 	vmov.f32	s1, s13
 80011fc:	eeb0 1a47 	vmov.f32	s2, s14
 8001200:	eef0 1a67 	vmov.f32	s3, s15
 8001204:	3754      	adds	r7, #84	@ 0x54
 8001206:	46bd      	mov	sp, r7
 8001208:	bd90      	pop	{r4, r7, pc}
	...

0800120c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08c      	sub	sp, #48	@ 0x30
 8001210:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
 8001226:	4b53      	ldr	r3, [pc, #332]	@ (8001374 <MX_GPIO_Init+0x168>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a52      	ldr	r2, [pc, #328]	@ (8001374 <MX_GPIO_Init+0x168>)
 800122c:	f043 0310 	orr.w	r3, r3, #16
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b50      	ldr	r3, [pc, #320]	@ (8001374 <MX_GPIO_Init+0x168>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0310 	and.w	r3, r3, #16
 800123a:	61bb      	str	r3, [r7, #24]
 800123c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	4b4c      	ldr	r3, [pc, #304]	@ (8001374 <MX_GPIO_Init+0x168>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a4b      	ldr	r2, [pc, #300]	@ (8001374 <MX_GPIO_Init+0x168>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b49      	ldr	r3, [pc, #292]	@ (8001374 <MX_GPIO_Init+0x168>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b45      	ldr	r3, [pc, #276]	@ (8001374 <MX_GPIO_Init+0x168>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	4a44      	ldr	r2, [pc, #272]	@ (8001374 <MX_GPIO_Init+0x168>)
 8001264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001268:	6313      	str	r3, [r2, #48]	@ 0x30
 800126a:	4b42      	ldr	r3, [pc, #264]	@ (8001374 <MX_GPIO_Init+0x168>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b3e      	ldr	r3, [pc, #248]	@ (8001374 <MX_GPIO_Init+0x168>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a3d      	ldr	r2, [pc, #244]	@ (8001374 <MX_GPIO_Init+0x168>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b3b      	ldr	r3, [pc, #236]	@ (8001374 <MX_GPIO_Init+0x168>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	4b37      	ldr	r3, [pc, #220]	@ (8001374 <MX_GPIO_Init+0x168>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a36      	ldr	r2, [pc, #216]	@ (8001374 <MX_GPIO_Init+0x168>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b34      	ldr	r3, [pc, #208]	@ (8001374 <MX_GPIO_Init+0x168>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b30      	ldr	r3, [pc, #192]	@ (8001374 <MX_GPIO_Init+0x168>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001374 <MX_GPIO_Init+0x168>)
 80012b8:	f043 0308 	orr.w	r3, r3, #8
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b2d      	ldr	r3, [pc, #180]	@ (8001374 <MX_GPIO_Init+0x168>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	21c0      	movs	r1, #192	@ 0xc0
 80012ce:	482a      	ldr	r0, [pc, #168]	@ (8001378 <MX_GPIO_Init+0x16c>)
 80012d0:	f001 fd1e 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, C_IN2_Pin|D_IN1_Pin, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2130      	movs	r1, #48	@ 0x30
 80012d8:	4828      	ldr	r0, [pc, #160]	@ (800137c <MX_GPIO_Init+0x170>)
 80012da:	f001 fd19 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_IN2_Pin|A_IN1_Pin|C_IN1_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f242 0103 	movw	r1, #8195	@ 0x2003
 80012e4:	4826      	ldr	r0, [pc, #152]	@ (8001380 <MX_GPIO_Init+0x174>)
 80012e6:	f001 fd13 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, B_IN1_Pin|B_IN2_Pin|A_IN2_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 518c 	mov.w	r1, #4480	@ 0x1180
 80012f0:	4824      	ldr	r0, [pc, #144]	@ (8001384 <MX_GPIO_Init+0x178>)
 80012f2:	f001 fd0d 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 80012f6:	23c0      	movs	r3, #192	@ 0xc0
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	4619      	mov	r1, r3
 800130c:	481a      	ldr	r0, [pc, #104]	@ (8001378 <MX_GPIO_Init+0x16c>)
 800130e:	f001 fb63 	bl	80029d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_IN2_Pin D_IN1_Pin */
  GPIO_InitStruct.Pin = C_IN2_Pin|D_IN1_Pin;
 8001312:	2330      	movs	r3, #48	@ 0x30
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4814      	ldr	r0, [pc, #80]	@ (800137c <MX_GPIO_Init+0x170>)
 800132a:	f001 fb55 	bl	80029d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_IN2_Pin A_IN1_Pin C_IN1_Pin */
  GPIO_InitStruct.Pin = D_IN2_Pin|A_IN1_Pin|C_IN1_Pin;
 800132e:	f242 0303 	movw	r3, #8195	@ 0x2003
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	4619      	mov	r1, r3
 8001346:	480e      	ldr	r0, [pc, #56]	@ (8001380 <MX_GPIO_Init+0x174>)
 8001348:	f001 fb46 	bl	80029d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_IN1_Pin B_IN2_Pin A_IN2_Pin */
  GPIO_InitStruct.Pin = B_IN1_Pin|B_IN2_Pin|A_IN2_Pin;
 800134c:	f44f 538c 	mov.w	r3, #4480	@ 0x1180
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	4807      	ldr	r0, [pc, #28]	@ (8001384 <MX_GPIO_Init+0x178>)
 8001366:	f001 fb37 	bl	80029d8 <HAL_GPIO_Init>

}
 800136a:	bf00      	nop
 800136c:	3730      	adds	r7, #48	@ 0x30
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40020000 	.word	0x40020000
 800137c:	40020800 	.word	0x40020800
 8001380:	40020400 	.word	0x40020400
 8001384:	40021000 	.word	0x40021000

08001388 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800138c:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <MX_I2C2_Init+0x50>)
 800138e:	4a13      	ldr	r2, [pc, #76]	@ (80013dc <MX_I2C2_Init+0x54>)
 8001390:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001392:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <MX_I2C2_Init+0x50>)
 8001394:	4a12      	ldr	r2, [pc, #72]	@ (80013e0 <MX_I2C2_Init+0x58>)
 8001396:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001398:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <MX_I2C2_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800139e:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <MX_I2C2_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <MX_I2C2_Init+0x50>)
 80013a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013aa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013ac:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <MX_I2C2_Init+0x50>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013b2:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <MX_I2C2_Init+0x50>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b8:	4b07      	ldr	r3, [pc, #28]	@ (80013d8 <MX_I2C2_Init+0x50>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013be:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <MX_I2C2_Init+0x50>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013c4:	4804      	ldr	r0, [pc, #16]	@ (80013d8 <MX_I2C2_Init+0x50>)
 80013c6:	f001 fcbd 	bl	8002d44 <HAL_I2C_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013d0:	f000 f9a6 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	2000012c 	.word	0x2000012c
 80013dc:	40005800 	.word	0x40005800
 80013e0:	000186a0 	.word	0x000186a0

080013e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	@ 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a19      	ldr	r2, [pc, #100]	@ (8001468 <HAL_I2C_MspInit+0x84>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d12c      	bne.n	8001460 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	4b18      	ldr	r3, [pc, #96]	@ (800146c <HAL_I2C_MspInit+0x88>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a17      	ldr	r2, [pc, #92]	@ (800146c <HAL_I2C_MspInit+0x88>)
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b15      	ldr	r3, [pc, #84]	@ (800146c <HAL_I2C_MspInit+0x88>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001422:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001428:	2312      	movs	r3, #18
 800142a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001434:	2304      	movs	r3, #4
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	480c      	ldr	r0, [pc, #48]	@ (8001470 <HAL_I2C_MspInit+0x8c>)
 8001440:	f001 faca 	bl	80029d8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <HAL_I2C_MspInit+0x88>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	4a07      	ldr	r2, [pc, #28]	@ (800146c <HAL_I2C_MspInit+0x88>)
 800144e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001452:	6413      	str	r3, [r2, #64]	@ 0x40
 8001454:	4b05      	ldr	r3, [pc, #20]	@ (800146c <HAL_I2C_MspInit+0x88>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001458:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001460:	bf00      	nop
 8001462:	3728      	adds	r7, #40	@ 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40005800 	.word	0x40005800
 800146c:	40023800 	.word	0x40023800
 8001470:	40020400 	.word	0x40020400

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001478:	f001 f932 	bl	80026e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147c:	f000 f8e8 	bl	8001650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001480:	f7ff fec4 	bl	800120c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001484:	f000 fab4 	bl	80019f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001488:	f000 fb0a 	bl	8001aa0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800148c:	f000 fb9e 	bl	8001bcc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001490:	f000 fc28 	bl	8001ce4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001494:	f000 fc7a 	bl	8001d8c <MX_TIM5_Init>
  MX_TIM8_Init();
 8001498:	f000 fccc 	bl	8001e34 <MX_TIM8_Init>
  MX_UART4_Init();
 800149c:	f001 f822 	bl	80024e4 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80014a0:	f001 f84a 	bl	8002538 <MX_USART1_UART_Init>
  MX_TIM9_Init();
 80014a4:	f000 fd1e 	bl	8001ee4 <MX_TIM9_Init>
  MX_TIM12_Init();
 80014a8:	f000 fd7e 	bl	8001fa8 <MX_TIM12_Init>
  MX_I2C2_Init();
 80014ac:	f7ff ff6c 	bl	8001388 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80014b0:	2100      	movs	r1, #0
 80014b2:	4855      	ldr	r0, [pc, #340]	@ (8001608 <main+0x194>)
 80014b4:	f003 f9dc 	bl	8004870 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80014b8:	2104      	movs	r1, #4
 80014ba:	4853      	ldr	r0, [pc, #332]	@ (8001608 <main+0x194>)
 80014bc:	f003 f9d8 	bl	8004870 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80014c0:	2108      	movs	r1, #8
 80014c2:	4851      	ldr	r0, [pc, #324]	@ (8001608 <main+0x194>)
 80014c4:	f003 f9d4 	bl	8004870 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80014c8:	210c      	movs	r1, #12
 80014ca:	484f      	ldr	r0, [pc, #316]	@ (8001608 <main+0x194>)
 80014cc:	f003 f9d0 	bl	8004870 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80014d0:	2100      	movs	r1, #0
 80014d2:	484e      	ldr	r0, [pc, #312]	@ (800160c <main+0x198>)
 80014d4:	f003 f9cc 	bl	8004870 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80014d8:	2104      	movs	r1, #4
 80014da:	484c      	ldr	r0, [pc, #304]	@ (800160c <main+0x198>)
 80014dc:	f003 f9c8 	bl	8004870 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80014e0:	2108      	movs	r1, #8
 80014e2:	484a      	ldr	r0, [pc, #296]	@ (800160c <main+0x198>)
 80014e4:	f003 f9c4 	bl	8004870 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80014e8:	210c      	movs	r1, #12
 80014ea:	4848      	ldr	r0, [pc, #288]	@ (800160c <main+0x198>)
 80014ec:	f003 f9c0 	bl	8004870 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80014f0:	2100      	movs	r1, #0
 80014f2:	4847      	ldr	r0, [pc, #284]	@ (8001610 <main+0x19c>)
 80014f4:	f003 f9bc 	bl	8004870 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80014f8:	2100      	movs	r1, #0
 80014fa:	4846      	ldr	r0, [pc, #280]	@ (8001614 <main+0x1a0>)
 80014fc:	f003 f9b8 	bl	8004870 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim1);
 8001500:	4845      	ldr	r0, [pc, #276]	@ (8001618 <main+0x1a4>)
 8001502:	f003 f8eb 	bl	80046dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001506:	213c      	movs	r1, #60	@ 0x3c
 8001508:	4843      	ldr	r0, [pc, #268]	@ (8001618 <main+0x1a4>)
 800150a:	f003 fb1f 	bl	8004b4c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800150e:	4843      	ldr	r0, [pc, #268]	@ (800161c <main+0x1a8>)
 8001510:	f003 f8e4 	bl	80046dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001514:	213c      	movs	r1, #60	@ 0x3c
 8001516:	4841      	ldr	r0, [pc, #260]	@ (800161c <main+0x1a8>)
 8001518:	f003 fb18 	bl	8004b4c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800151c:	4840      	ldr	r0, [pc, #256]	@ (8001620 <main+0x1ac>)
 800151e:	f003 f8dd 	bl	80046dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8001522:	213c      	movs	r1, #60	@ 0x3c
 8001524:	483e      	ldr	r0, [pc, #248]	@ (8001620 <main+0x1ac>)
 8001526:	f003 fb11 	bl	8004b4c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 800152a:	483e      	ldr	r0, [pc, #248]	@ (8001624 <main+0x1b0>)
 800152c:	f003 f8d6 	bl	80046dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8001530:	213c      	movs	r1, #60	@ 0x3c
 8001532:	483c      	ldr	r0, [pc, #240]	@ (8001624 <main+0x1b0>)
 8001534:	f003 fb0a 	bl	8004b4c <HAL_TIM_Encoder_Start_IT>

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2140      	movs	r1, #64	@ 0x40
 800153c:	483a      	ldr	r0, [pc, #232]	@ (8001628 <main+0x1b4>)
 800153e:	f001 fbe7 	bl	8002d10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2180      	movs	r1, #128	@ 0x80
 8001546:	4838      	ldr	r0, [pc, #224]	@ (8001628 <main+0x1b4>)
 8001548:	f001 fbe2 	bl	8002d10 <HAL_GPIO_WritePin>
  // HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
  // HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);

  hmc5883l_init();
 800154c:	f000 f9fa 	bl	8001944 <hmc5883l_init>
  HAL_Delay(10);
 8001550:	200a      	movs	r0, #10
 8001552:	f001 f937 	bl	80027c4 <HAL_Delay>

  hmc5883l_read(HMC5883L_REG_ADDR_IDA, &(test_buffer[0]));
 8001556:	4935      	ldr	r1, [pc, #212]	@ (800162c <main+0x1b8>)
 8001558:	200a      	movs	r0, #10
 800155a:	f000 fa2f 	bl	80019bc <hmc5883l_read>
  hmc5883l_read(HMC5883L_REG_ADDR_IDB, &(test_buffer[1]));
 800155e:	4934      	ldr	r1, [pc, #208]	@ (8001630 <main+0x1bc>)
 8001560:	200b      	movs	r0, #11
 8001562:	f000 fa2b 	bl	80019bc <hmc5883l_read>
  hmc5883l_read(HMC5883L_REG_ADDR_IDC, &(test_buffer[2]));
 8001566:	4933      	ldr	r1, [pc, #204]	@ (8001634 <main+0x1c0>)
 8001568:	200c      	movs	r0, #12
 800156a:	f000 fa27 	bl	80019bc <hmc5883l_read>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 800156e:	2001      	movs	r0, #1
 8001570:	f001 f928 	bl	80027c4 <HAL_Delay>
    read_current_velocity(encoders);
 8001574:	4830      	ldr	r0, [pc, #192]	@ (8001638 <main+0x1c4>)
 8001576:	f7ff fdf1 	bl	800115c <read_current_velocity>
        fan_operation(turn_on_fan);
      }
      prev_turn_on_fan = controller_state.triangle;
    }
#else
    HAL_UART_Receive(&huart1, controller_buffer, sizeof(controller_buffer), 0xFFFF);
 800157a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800157e:	2229      	movs	r2, #41	@ 0x29
 8001580:	492e      	ldr	r1, [pc, #184]	@ (800163c <main+0x1c8>)
 8001582:	482f      	ldr	r0, [pc, #188]	@ (8001640 <main+0x1cc>)
 8001584:	f004 f8fc 	bl	8005780 <HAL_UART_Receive>
    parse_controller_data(controller_buffer, &controller_state);
 8001588:	492e      	ldr	r1, [pc, #184]	@ (8001644 <main+0x1d0>)
 800158a:	482c      	ldr	r0, [pc, #176]	@ (800163c <main+0x1c8>)
 800158c:	f7ff fc0e 	bl	8000dac <parse_controller_data>
    if (controller_state.options_button && !prev_turn_on) {  // turn on/off the robot
 8001590:	4b2c      	ldr	r3, [pc, #176]	@ (8001644 <main+0x1d0>)
 8001592:	7e1b      	ldrb	r3, [r3, #24]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d031      	beq.n	80015fc <main+0x188>
 8001598:	4b2b      	ldr	r3, [pc, #172]	@ (8001648 <main+0x1d4>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	f083 0301 	eor.w	r3, r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d02a      	beq.n	80015fc <main+0x188>
      turn_on = !turn_on;
 80015a6:	4b29      	ldr	r3, [pc, #164]	@ (800164c <main+0x1d8>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	bf14      	ite	ne
 80015ae:	2301      	movne	r3, #1
 80015b0:	2300      	moveq	r3, #0
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f083 0301 	eor.w	r3, r3, #1
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b22      	ldr	r3, [pc, #136]	@ (800164c <main+0x1d8>)
 80015c2:	701a      	strb	r2, [r3, #0]
      // HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, turn_on ? GPIO_PIN_RESET : GPIO_PIN_SET);
      if (!turn_on) {
 80015c4:	4b21      	ldr	r3, [pc, #132]	@ (800164c <main+0x1d8>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	f083 0301 	eor.w	r3, r3, #1
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00a      	beq.n	80015e8 <main+0x174>
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2140      	movs	r1, #64	@ 0x40
 80015d6:	4814      	ldr	r0, [pc, #80]	@ (8001628 <main+0x1b4>)
 80015d8:	f001 fb9a 	bl	8002d10 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	2180      	movs	r1, #128	@ 0x80
 80015e0:	4811      	ldr	r0, [pc, #68]	@ (8001628 <main+0x1b4>)
 80015e2:	f001 fb95 	bl	8002d10 <HAL_GPIO_WritePin>
 80015e6:	e009      	b.n	80015fc <main+0x188>
      } else {
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2140      	movs	r1, #64	@ 0x40
 80015ec:	480e      	ldr	r0, [pc, #56]	@ (8001628 <main+0x1b4>)
 80015ee:	f001 fb8f 	bl	8002d10 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80015f2:	2201      	movs	r2, #1
 80015f4:	2180      	movs	r1, #128	@ 0x80
 80015f6:	480c      	ldr	r0, [pc, #48]	@ (8001628 <main+0x1b4>)
 80015f8:	f001 fb8a 	bl	8002d10 <HAL_GPIO_WritePin>
      }
    }
    prev_turn_on = controller_state.options_button;
 80015fc:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <main+0x1d0>)
 80015fe:	7e1a      	ldrb	r2, [r3, #24]
 8001600:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <main+0x1d4>)
 8001602:	701a      	strb	r2, [r3, #0]
    HAL_Delay(1);
 8001604:	e7b3      	b.n	800156e <main+0xfa>
 8001606:	bf00      	nop
 8001608:	2000021c 	.word	0x2000021c
 800160c:	200001d4 	.word	0x200001d4
 8001610:	2000033c 	.word	0x2000033c
 8001614:	20000384 	.word	0x20000384
 8001618:	2000018c 	.word	0x2000018c
 800161c:	20000264 	.word	0x20000264
 8001620:	200002ac 	.word	0x200002ac
 8001624:	200002f4 	.word	0x200002f4
 8001628:	40020000 	.word	0x40020000
 800162c:	20000180 	.word	0x20000180
 8001630:	20000181 	.word	0x20000181
 8001634:	20000182 	.word	0x20000182
 8001638:	20000000 	.word	0x20000000
 800163c:	200000e4 	.word	0x200000e4
 8001640:	20000414 	.word	0x20000414
 8001644:	20000110 	.word	0x20000110
 8001648:	20000184 	.word	0x20000184
 800164c:	20000183 	.word	0x20000183

08001650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b094      	sub	sp, #80	@ 0x50
 8001654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001656:	f107 0320 	add.w	r3, r7, #32
 800165a:	2230      	movs	r2, #48	@ 0x30
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f004 fe6c 	bl	800633c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	4b27      	ldr	r3, [pc, #156]	@ (8001718 <SystemClock_Config+0xc8>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	4a26      	ldr	r2, [pc, #152]	@ (8001718 <SystemClock_Config+0xc8>)
 800167e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001682:	6413      	str	r3, [r2, #64]	@ 0x40
 8001684:	4b24      	ldr	r3, [pc, #144]	@ (8001718 <SystemClock_Config+0xc8>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	4b21      	ldr	r3, [pc, #132]	@ (800171c <SystemClock_Config+0xcc>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a20      	ldr	r2, [pc, #128]	@ (800171c <SystemClock_Config+0xcc>)
 800169a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b1e      	ldr	r3, [pc, #120]	@ (800171c <SystemClock_Config+0xcc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016ac:	2301      	movs	r3, #1
 80016ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b6:	2302      	movs	r3, #2
 80016b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80016c0:	2319      	movs	r3, #25
 80016c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016c4:	23a8      	movs	r3, #168	@ 0xa8
 80016c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016c8:	2304      	movs	r3, #4
 80016ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016cc:	2304      	movs	r3, #4
 80016ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d0:	f107 0320 	add.w	r3, r7, #32
 80016d4:	4618      	mov	r0, r3
 80016d6:	f002 fb59 	bl	8003d8c <HAL_RCC_OscConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016e0:	f000 f81e 	bl	8001720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e4:	230f      	movs	r3, #15
 80016e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e8:	2302      	movs	r3, #2
 80016ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	2101      	movs	r1, #1
 80016fe:	4618      	mov	r0, r3
 8001700:	f002 fdbc 	bl	800427c <HAL_RCC_ClockConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800170a:	f000 f809 	bl	8001720 <Error_Handler>
  }
}
 800170e:	bf00      	nop
 8001710:	3750      	adds	r7, #80	@ 0x50
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800
 800171c:	40007000 	.word	0x40007000

08001720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001724:	b672      	cpsid	i
}
 8001726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <Error_Handler+0x8>

0800172c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <HAL_MspInit+0x4c>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173a:	4a0f      	ldr	r2, [pc, #60]	@ (8001778 <HAL_MspInit+0x4c>)
 800173c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001740:	6453      	str	r3, [r2, #68]	@ 0x44
 8001742:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <HAL_MspInit+0x4c>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001746:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	603b      	str	r3, [r7, #0]
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <HAL_MspInit+0x4c>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	4a08      	ldr	r2, [pc, #32]	@ (8001778 <HAL_MspInit+0x4c>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800175c:	6413      	str	r3, [r2, #64]	@ 0x40
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_MspInit+0x4c>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <NMI_Handler+0x4>

08001784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <HardFault_Handler+0x4>

0800178c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <MemManage_Handler+0x4>

08001794 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d2:	f000 ffd7 	bl	8002784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}

080017da <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	e00a      	b.n	8001802 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ec:	f3af 8000 	nop.w
 80017f0:	4601      	mov	r1, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	60ba      	str	r2, [r7, #8]
 80017f8:	b2ca      	uxtb	r2, r1
 80017fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	3301      	adds	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	429a      	cmp	r2, r3
 8001808:	dbf0      	blt.n	80017ec <_read+0x12>
  }

  return len;
 800180a:	687b      	ldr	r3, [r7, #4]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	e009      	b.n	800183a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	60ba      	str	r2, [r7, #8]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3301      	adds	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	429a      	cmp	r2, r3
 8001840:	dbf1      	blt.n	8001826 <_write+0x12>
  }
  return len;
 8001842:	687b      	ldr	r3, [r7, #4]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_close>:

int _close(int file)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001854:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001874:	605a      	str	r2, [r3, #4]
  return 0;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_isatty>:

int _isatty(int file)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800188c:	2301      	movs	r3, #1
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800189a:	b480      	push	{r7}
 800189c:	b085      	sub	sp, #20
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018bc:	4a14      	ldr	r2, [pc, #80]	@ (8001910 <_sbrk+0x5c>)
 80018be:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <_sbrk+0x60>)
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <_sbrk+0x64>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	@ (800191c <_sbrk+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d207      	bcs.n	80018f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e4:	f004 fd78 	bl	80063d8 <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	220c      	movs	r2, #12
 80018ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018f2:	e009      	b.n	8001908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f4:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fa:	4b07      	ldr	r3, [pc, #28]	@ (8001918 <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <_sbrk+0x64>)
 8001904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20020000 	.word	0x20020000
 8001914:	00000400 	.word	0x00000400
 8001918:	20000188 	.word	0x20000188
 800191c:	200005b0 	.word	0x200005b0

08001920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <SystemInit+0x20>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800192a:	4a05      	ldr	r2, [pc, #20]	@ (8001940 <SystemInit+0x20>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <hmc5883l_init>:
  .y_max = 0,
  .z_min = 0,
  .z_max = 0,
};

void hmc5883l_init(void) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
  uint8_t data[3] = {0x70, 0xA0, 0x00};
 800194a:	4a0e      	ldr	r2, [pc, #56]	@ (8001984 <hmc5883l_init+0x40>)
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	4611      	mov	r1, r2
 8001952:	8019      	strh	r1, [r3, #0]
 8001954:	3302      	adds	r3, #2
 8001956:	0c12      	lsrs	r2, r2, #16
 8001958:	701a      	strb	r2, [r3, #0]
  hmc5883l_write(HMC5883L_REG_ADDR_CONFA, &(data[0]));
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	4619      	mov	r1, r3
 800195e:	2000      	movs	r0, #0
 8001960:	f000 f812 	bl	8001988 <hmc5883l_write>
  hmc5883l_write(HMC5883L_REG_ADDR_CONFB, &(data[1]));
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	3301      	adds	r3, #1
 8001968:	4619      	mov	r1, r3
 800196a:	2001      	movs	r0, #1
 800196c:	f000 f80c 	bl	8001988 <hmc5883l_write>
  hmc5883l_write(HMC5883L_REG_ADDR_MODE, &(data[2]));
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	3302      	adds	r3, #2
 8001974:	4619      	mov	r1, r3
 8001976:	2002      	movs	r0, #2
 8001978:	f000 f806 	bl	8001988 <hmc5883l_write>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	080072cc 	.word	0x080072cc

08001988 <hmc5883l_write>:

void hmc5883l_write(uint8_t reg, uint8_t* data) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af04      	add	r7, sp, #16
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, reg, 1, data, 1, HAL_MAX_DELAY);
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	b29a      	uxth	r2, r3
 8001998:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800199c:	9302      	str	r3, [sp, #8]
 800199e:	2301      	movs	r3, #1
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2301      	movs	r3, #1
 80019a8:	213c      	movs	r1, #60	@ 0x3c
 80019aa:	4803      	ldr	r0, [pc, #12]	@ (80019b8 <hmc5883l_write+0x30>)
 80019ac:	f001 fb0e 	bl	8002fcc <HAL_I2C_Mem_Write>
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	2000012c 	.word	0x2000012c

080019bc <hmc5883l_read>:

void hmc5883l_read(uint8_t reg, uint8_t* data) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af04      	add	r7, sp, #16
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c2, HMC5883L_ADDR << 1, reg, 1, data, 1, HAL_MAX_DELAY);
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019d0:	9302      	str	r3, [sp, #8]
 80019d2:	2301      	movs	r3, #1
 80019d4:	9301      	str	r3, [sp, #4]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2301      	movs	r3, #1
 80019dc:	213c      	movs	r1, #60	@ 0x3c
 80019de:	4803      	ldr	r0, [pc, #12]	@ (80019ec <hmc5883l_read+0x30>)
 80019e0:	f001 fbee 	bl	80031c0 <HAL_I2C_Mem_Read>
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	2000012c 	.word	0x2000012c

080019f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08c      	sub	sp, #48	@ 0x30
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	2224      	movs	r2, #36	@ 0x24
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f004 fc9c 	bl	800633c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a0c:	4b22      	ldr	r3, [pc, #136]	@ (8001a98 <MX_TIM1_Init+0xa8>)
 8001a0e:	4a23      	ldr	r2, [pc, #140]	@ (8001a9c <MX_TIM1_Init+0xac>)
 8001a10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a12:	4b21      	ldr	r3, [pc, #132]	@ (8001a98 <MX_TIM1_Init+0xa8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a18:	4b1f      	ldr	r3, [pc, #124]	@ (8001a98 <MX_TIM1_Init+0xa8>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a98 <MX_TIM1_Init+0xa8>)
 8001a20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a26:	4b1c      	ldr	r3, [pc, #112]	@ (8001a98 <MX_TIM1_Init+0xa8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <MX_TIM1_Init+0xa8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a32:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <MX_TIM1_Init+0xa8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a40:	2301      	movs	r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8001a48:	2305      	movs	r3, #5
 8001a4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a50:	2301      	movs	r3, #1
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8001a58:	2305      	movs	r3, #5
 8001a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	4619      	mov	r1, r3
 8001a62:	480d      	ldr	r0, [pc, #52]	@ (8001a98 <MX_TIM1_Init+0xa8>)
 8001a64:	f002 ffcc 	bl	8004a00 <HAL_TIM_Encoder_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001a6e:	f7ff fe57 	bl	8001720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4806      	ldr	r0, [pc, #24]	@ (8001a98 <MX_TIM1_Init+0xa8>)
 8001a80:	f003 fdb2 	bl	80055e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001a8a:	f7ff fe49 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	3730      	adds	r7, #48	@ 0x30
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000018c 	.word	0x2000018c
 8001a9c:	40010000 	.word	0x40010000

08001aa0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08e      	sub	sp, #56	@ 0x38
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aa6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab4:	f107 0320 	add.w	r3, r7, #32
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
 8001acc:	615a      	str	r2, [r3, #20]
 8001ace:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ad0:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc8 <MX_TIM2_Init+0x128>)
 8001ad2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ad6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 8001ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc8 <MX_TIM2_Init+0x128>)
 8001ada:	2229      	movs	r2, #41	@ 0x29
 8001adc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ade:	4b3a      	ldr	r3, [pc, #232]	@ (8001bc8 <MX_TIM2_Init+0x128>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001ae4:	4b38      	ldr	r3, [pc, #224]	@ (8001bc8 <MX_TIM2_Init+0x128>)
 8001ae6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001aea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aec:	4b36      	ldr	r3, [pc, #216]	@ (8001bc8 <MX_TIM2_Init+0x128>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001af2:	4b35      	ldr	r3, [pc, #212]	@ (8001bc8 <MX_TIM2_Init+0x128>)
 8001af4:	2280      	movs	r2, #128	@ 0x80
 8001af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001af8:	4833      	ldr	r0, [pc, #204]	@ (8001bc8 <MX_TIM2_Init+0x128>)
 8001afa:	f002 fd9f 	bl	800463c <HAL_TIM_Base_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001b04:	f7ff fe0c 	bl	8001720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b12:	4619      	mov	r1, r3
 8001b14:	482c      	ldr	r0, [pc, #176]	@ (8001bc8 <MX_TIM2_Init+0x128>)
 8001b16:	f003 f989 	bl	8004e2c <HAL_TIM_ConfigClockSource>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001b20:	f7ff fdfe 	bl	8001720 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b24:	4828      	ldr	r0, [pc, #160]	@ (8001bc8 <MX_TIM2_Init+0x128>)
 8001b26:	f002 fe49 	bl	80047bc <HAL_TIM_PWM_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001b30:	f7ff fdf6 	bl	8001720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b3c:	f107 0320 	add.w	r3, r7, #32
 8001b40:	4619      	mov	r1, r3
 8001b42:	4821      	ldr	r0, [pc, #132]	@ (8001bc8 <MX_TIM2_Init+0x128>)
 8001b44:	f003 fd50 	bl	80055e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001b4e:	f7ff fde7 	bl	8001720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b52:	2360      	movs	r3, #96	@ 0x60
 8001b54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2200      	movs	r2, #0
 8001b66:	4619      	mov	r1, r3
 8001b68:	4817      	ldr	r0, [pc, #92]	@ (8001bc8 <MX_TIM2_Init+0x128>)
 8001b6a:	f003 f89d 	bl	8004ca8 <HAL_TIM_PWM_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001b74:	f7ff fdd4 	bl	8001720 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4812      	ldr	r0, [pc, #72]	@ (8001bc8 <MX_TIM2_Init+0x128>)
 8001b80:	f003 f892 	bl	8004ca8 <HAL_TIM_PWM_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001b8a:	f7ff fdc9 	bl	8001720 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	2208      	movs	r2, #8
 8001b92:	4619      	mov	r1, r3
 8001b94:	480c      	ldr	r0, [pc, #48]	@ (8001bc8 <MX_TIM2_Init+0x128>)
 8001b96:	f003 f887 	bl	8004ca8 <HAL_TIM_PWM_ConfigChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001ba0:	f7ff fdbe 	bl	8001720 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4807      	ldr	r0, [pc, #28]	@ (8001bc8 <MX_TIM2_Init+0x128>)
 8001bac:	f003 f87c 	bl	8004ca8 <HAL_TIM_PWM_ConfigChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001bb6:	f7ff fdb3 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bba:	4803      	ldr	r0, [pc, #12]	@ (8001bc8 <MX_TIM2_Init+0x128>)
 8001bbc:	f000 fba4 	bl	8002308 <HAL_TIM_MspPostInit>

}
 8001bc0:	bf00      	nop
 8001bc2:	3738      	adds	r7, #56	@ 0x38
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	200001d4 	.word	0x200001d4

08001bcc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08e      	sub	sp, #56	@ 0x38
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be0:	f107 0320 	add.w	r3, r7, #32
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
 8001bf8:	615a      	str	r2, [r3, #20]
 8001bfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bfc:	4b37      	ldr	r3, [pc, #220]	@ (8001cdc <MX_TIM3_Init+0x110>)
 8001bfe:	4a38      	ldr	r2, [pc, #224]	@ (8001ce0 <MX_TIM3_Init+0x114>)
 8001c00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 8001c02:	4b36      	ldr	r3, [pc, #216]	@ (8001cdc <MX_TIM3_Init+0x110>)
 8001c04:	2229      	movs	r2, #41	@ 0x29
 8001c06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c08:	4b34      	ldr	r3, [pc, #208]	@ (8001cdc <MX_TIM3_Init+0x110>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001c0e:	4b33      	ldr	r3, [pc, #204]	@ (8001cdc <MX_TIM3_Init+0x110>)
 8001c10:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c16:	4b31      	ldr	r3, [pc, #196]	@ (8001cdc <MX_TIM3_Init+0x110>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cdc <MX_TIM3_Init+0x110>)
 8001c1e:	2280      	movs	r2, #128	@ 0x80
 8001c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c22:	482e      	ldr	r0, [pc, #184]	@ (8001cdc <MX_TIM3_Init+0x110>)
 8001c24:	f002 fd0a 	bl	800463c <HAL_TIM_Base_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001c2e:	f7ff fd77 	bl	8001720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4827      	ldr	r0, [pc, #156]	@ (8001cdc <MX_TIM3_Init+0x110>)
 8001c40:	f003 f8f4 	bl	8004e2c <HAL_TIM_ConfigClockSource>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001c4a:	f7ff fd69 	bl	8001720 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c4e:	4823      	ldr	r0, [pc, #140]	@ (8001cdc <MX_TIM3_Init+0x110>)
 8001c50:	f002 fdb4 	bl	80047bc <HAL_TIM_PWM_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c5a:	f7ff fd61 	bl	8001720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c66:	f107 0320 	add.w	r3, r7, #32
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	481b      	ldr	r0, [pc, #108]	@ (8001cdc <MX_TIM3_Init+0x110>)
 8001c6e:	f003 fcbb 	bl	80055e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001c78:	f7ff fd52 	bl	8001720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c7c:	2360      	movs	r3, #96	@ 0x60
 8001c7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	2204      	movs	r2, #4
 8001c90:	4619      	mov	r1, r3
 8001c92:	4812      	ldr	r0, [pc, #72]	@ (8001cdc <MX_TIM3_Init+0x110>)
 8001c94:	f003 f808 	bl	8004ca8 <HAL_TIM_PWM_ConfigChannel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001c9e:	f7ff fd3f 	bl	8001720 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	480c      	ldr	r0, [pc, #48]	@ (8001cdc <MX_TIM3_Init+0x110>)
 8001caa:	f002 fffd 	bl	8004ca8 <HAL_TIM_PWM_ConfigChannel>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001cb4:	f7ff fd34 	bl	8001720 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	220c      	movs	r2, #12
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4807      	ldr	r0, [pc, #28]	@ (8001cdc <MX_TIM3_Init+0x110>)
 8001cc0:	f002 fff2 	bl	8004ca8 <HAL_TIM_PWM_ConfigChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001cca:	f7ff fd29 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cce:	4803      	ldr	r0, [pc, #12]	@ (8001cdc <MX_TIM3_Init+0x110>)
 8001cd0:	f000 fb1a 	bl	8002308 <HAL_TIM_MspPostInit>

}
 8001cd4:	bf00      	nop
 8001cd6:	3738      	adds	r7, #56	@ 0x38
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	2000021c 	.word	0x2000021c
 8001ce0:	40000400 	.word	0x40000400

08001ce4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	@ 0x30
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cea:	f107 030c 	add.w	r3, r7, #12
 8001cee:	2224      	movs	r2, #36	@ 0x24
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f004 fb22 	bl	800633c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d00:	4b20      	ldr	r3, [pc, #128]	@ (8001d84 <MX_TIM4_Init+0xa0>)
 8001d02:	4a21      	ldr	r2, [pc, #132]	@ (8001d88 <MX_TIM4_Init+0xa4>)
 8001d04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d06:	4b1f      	ldr	r3, [pc, #124]	@ (8001d84 <MX_TIM4_Init+0xa0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d84 <MX_TIM4_Init+0xa0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d12:	4b1c      	ldr	r3, [pc, #112]	@ (8001d84 <MX_TIM4_Init+0xa0>)
 8001d14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <MX_TIM4_Init+0xa0>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d20:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <MX_TIM4_Init+0xa0>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d26:	2303      	movs	r3, #3
 8001d28:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8001d36:	2305      	movs	r3, #5
 8001d38:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8001d46:	2305      	movs	r3, #5
 8001d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	4619      	mov	r1, r3
 8001d50:	480c      	ldr	r0, [pc, #48]	@ (8001d84 <MX_TIM4_Init+0xa0>)
 8001d52:	f002 fe55 	bl	8004a00 <HAL_TIM_Encoder_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001d5c:	f7ff fce0 	bl	8001720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d60:	2300      	movs	r3, #0
 8001d62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <MX_TIM4_Init+0xa0>)
 8001d6e:	f003 fc3b 	bl	80055e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001d78:	f7ff fcd2 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	3730      	adds	r7, #48	@ 0x30
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000264 	.word	0x20000264
 8001d88:	40000800 	.word	0x40000800

08001d8c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08c      	sub	sp, #48	@ 0x30
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	2224      	movs	r2, #36	@ 0x24
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 face 	bl	800633c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001da8:	4b20      	ldr	r3, [pc, #128]	@ (8001e2c <MX_TIM5_Init+0xa0>)
 8001daa:	4a21      	ldr	r2, [pc, #132]	@ (8001e30 <MX_TIM5_Init+0xa4>)
 8001dac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001dae:	4b1f      	ldr	r3, [pc, #124]	@ (8001e2c <MX_TIM5_Init+0xa0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e2c <MX_TIM5_Init+0xa0>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001dba:	4b1c      	ldr	r3, [pc, #112]	@ (8001e2c <MX_TIM5_Init+0xa0>)
 8001dbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dc0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e2c <MX_TIM5_Init+0xa0>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc8:	4b18      	ldr	r3, [pc, #96]	@ (8001e2c <MX_TIM5_Init+0xa0>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8001dde:	2305      	movs	r3, #5
 8001de0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001de6:	2301      	movs	r3, #1
 8001de8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8001dee:	2305      	movs	r3, #5
 8001df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	4619      	mov	r1, r3
 8001df8:	480c      	ldr	r0, [pc, #48]	@ (8001e2c <MX_TIM5_Init+0xa0>)
 8001dfa:	f002 fe01 	bl	8004a00 <HAL_TIM_Encoder_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001e04:	f7ff fc8c 	bl	8001720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	4619      	mov	r1, r3
 8001e14:	4805      	ldr	r0, [pc, #20]	@ (8001e2c <MX_TIM5_Init+0xa0>)
 8001e16:	f003 fbe7 	bl	80055e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001e20:	f7ff fc7e 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e24:	bf00      	nop
 8001e26:	3730      	adds	r7, #48	@ 0x30
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	200002ac 	.word	0x200002ac
 8001e30:	40000c00 	.word	0x40000c00

08001e34 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08c      	sub	sp, #48	@ 0x30
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e3a:	f107 030c 	add.w	r3, r7, #12
 8001e3e:	2224      	movs	r2, #36	@ 0x24
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f004 fa7a 	bl	800633c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e50:	4b22      	ldr	r3, [pc, #136]	@ (8001edc <MX_TIM8_Init+0xa8>)
 8001e52:	4a23      	ldr	r2, [pc, #140]	@ (8001ee0 <MX_TIM8_Init+0xac>)
 8001e54:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001e56:	4b21      	ldr	r3, [pc, #132]	@ (8001edc <MX_TIM8_Init+0xa8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001edc <MX_TIM8_Init+0xa8>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001e62:	4b1e      	ldr	r3, [pc, #120]	@ (8001edc <MX_TIM8_Init+0xa8>)
 8001e64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e68:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001edc <MX_TIM8_Init+0xa8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e70:	4b1a      	ldr	r3, [pc, #104]	@ (8001edc <MX_TIM8_Init+0xa8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e76:	4b19      	ldr	r3, [pc, #100]	@ (8001edc <MX_TIM8_Init+0xa8>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e84:	2301      	movs	r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e94:	2301      	movs	r3, #1
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	480d      	ldr	r0, [pc, #52]	@ (8001edc <MX_TIM8_Init+0xa8>)
 8001ea8:	f002 fdaa 	bl	8004a00 <HAL_TIM_Encoder_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001eb2:	f7ff fc35 	bl	8001720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4806      	ldr	r0, [pc, #24]	@ (8001edc <MX_TIM8_Init+0xa8>)
 8001ec4:	f003 fb90 	bl	80055e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001ece:	f7ff fc27 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	3730      	adds	r7, #48	@ 0x30
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200002f4 	.word	0x200002f4
 8001ee0:	40010400 	.word	0x40010400

08001ee4 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08c      	sub	sp, #48	@ 0x30
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eea:	f107 0320 	add.w	r3, r7, #32
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
 8001ef6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
 8001f04:	611a      	str	r2, [r3, #16]
 8001f06:	615a      	str	r2, [r3, #20]
 8001f08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001f0a:	4b25      	ldr	r3, [pc, #148]	@ (8001fa0 <MX_TIM9_Init+0xbc>)
 8001f0c:	4a25      	ldr	r2, [pc, #148]	@ (8001fa4 <MX_TIM9_Init+0xc0>)
 8001f0e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 42-1;
 8001f10:	4b23      	ldr	r3, [pc, #140]	@ (8001fa0 <MX_TIM9_Init+0xbc>)
 8001f12:	2229      	movs	r2, #41	@ 0x29
 8001f14:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f16:	4b22      	ldr	r3, [pc, #136]	@ (8001fa0 <MX_TIM9_Init+0xbc>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 8001f1c:	4b20      	ldr	r3, [pc, #128]	@ (8001fa0 <MX_TIM9_Init+0xbc>)
 8001f1e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001f22:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f24:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa0 <MX_TIM9_Init+0xbc>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa0 <MX_TIM9_Init+0xbc>)
 8001f2c:	2280      	movs	r2, #128	@ 0x80
 8001f2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001f30:	481b      	ldr	r0, [pc, #108]	@ (8001fa0 <MX_TIM9_Init+0xbc>)
 8001f32:	f002 fb83 	bl	800463c <HAL_TIM_Base_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001f3c:	f7ff fbf0 	bl	8001720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f44:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001f46:	f107 0320 	add.w	r3, r7, #32
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4814      	ldr	r0, [pc, #80]	@ (8001fa0 <MX_TIM9_Init+0xbc>)
 8001f4e:	f002 ff6d 	bl	8004e2c <HAL_TIM_ConfigClockSource>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001f58:	f7ff fbe2 	bl	8001720 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001f5c:	4810      	ldr	r0, [pc, #64]	@ (8001fa0 <MX_TIM9_Init+0xbc>)
 8001f5e:	f002 fc2d 	bl	80047bc <HAL_TIM_PWM_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001f68:	f7ff fbda 	bl	8001720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f6c:	2360      	movs	r3, #96	@ 0x60
 8001f6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	2200      	movs	r2, #0
 8001f80:	4619      	mov	r1, r3
 8001f82:	4807      	ldr	r0, [pc, #28]	@ (8001fa0 <MX_TIM9_Init+0xbc>)
 8001f84:	f002 fe90 	bl	8004ca8 <HAL_TIM_PWM_ConfigChannel>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001f8e:	f7ff fbc7 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001f92:	4803      	ldr	r0, [pc, #12]	@ (8001fa0 <MX_TIM9_Init+0xbc>)
 8001f94:	f000 f9b8 	bl	8002308 <HAL_TIM_MspPostInit>

}
 8001f98:	bf00      	nop
 8001f9a:	3730      	adds	r7, #48	@ 0x30
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	2000033c 	.word	0x2000033c
 8001fa4:	40014000 	.word	0x40014000

08001fa8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08c      	sub	sp, #48	@ 0x30
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fae:	f107 0320 	add.w	r3, r7, #32
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	611a      	str	r2, [r3, #16]
 8001fca:	615a      	str	r2, [r3, #20]
 8001fcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001fce:	4b25      	ldr	r3, [pc, #148]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8001fd0:	4a25      	ldr	r2, [pc, #148]	@ (8002068 <MX_TIM12_Init+0xc0>)
 8001fd2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 42-1;
 8001fd4:	4b23      	ldr	r3, [pc, #140]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8001fd6:	2229      	movs	r2, #41	@ 0x29
 8001fd8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fda:	4b22      	ldr	r3, [pc, #136]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 8001fe0:	4b20      	ldr	r3, [pc, #128]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8001fe2:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001fe6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fee:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8001ff0:	2280      	movs	r2, #128	@ 0x80
 8001ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001ff4:	481b      	ldr	r0, [pc, #108]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8001ff6:	f002 fb21 	bl	800463c <HAL_TIM_Base_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002000:	f7ff fb8e 	bl	8001720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002004:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002008:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800200a:	f107 0320 	add.w	r3, r7, #32
 800200e:	4619      	mov	r1, r3
 8002010:	4814      	ldr	r0, [pc, #80]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8002012:	f002 ff0b 	bl	8004e2c <HAL_TIM_ConfigClockSource>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800201c:	f7ff fb80 	bl	8001720 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002020:	4810      	ldr	r0, [pc, #64]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8002022:	f002 fbcb 	bl	80047bc <HAL_TIM_PWM_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800202c:	f7ff fb78 	bl	8001720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002030:	2360      	movs	r3, #96	@ 0x60
 8002032:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	2200      	movs	r2, #0
 8002044:	4619      	mov	r1, r3
 8002046:	4807      	ldr	r0, [pc, #28]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8002048:	f002 fe2e 	bl	8004ca8 <HAL_TIM_PWM_ConfigChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8002052:	f7ff fb65 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002056:	4803      	ldr	r0, [pc, #12]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8002058:	f000 f956 	bl	8002308 <HAL_TIM_MspPostInit>

}
 800205c:	bf00      	nop
 800205e:	3730      	adds	r7, #48	@ 0x30
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000384 	.word	0x20000384
 8002068:	40001800 	.word	0x40001800

0800206c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b090      	sub	sp, #64	@ 0x40
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a65      	ldr	r2, [pc, #404]	@ (8002220 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d12d      	bne.n	80020ea <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002092:	4b64      	ldr	r3, [pc, #400]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002096:	4a63      	ldr	r2, [pc, #396]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6453      	str	r3, [r2, #68]	@ 0x44
 800209e:	4b61      	ldr	r3, [pc, #388]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80020ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b2:	4a5c      	ldr	r2, [pc, #368]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80020b4:	f043 0310 	orr.w	r3, r3, #16
 80020b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80020c6:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80020ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d4:	2300      	movs	r3, #0
 80020d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020d8:	2301      	movs	r3, #1
 80020da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020e0:	4619      	mov	r1, r3
 80020e2:	4851      	ldr	r0, [pc, #324]	@ (8002228 <HAL_TIM_Encoder_MspInit+0x1bc>)
 80020e4:	f000 fc78 	bl	80029d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80020e8:	e095      	b.n	8002216 <HAL_TIM_Encoder_MspInit+0x1aa>
  else if(tim_encoderHandle->Instance==TIM4)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a4f      	ldr	r2, [pc, #316]	@ (800222c <HAL_TIM_Encoder_MspInit+0x1c0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d12d      	bne.n	8002150 <HAL_TIM_Encoder_MspInit+0xe4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020f4:	2300      	movs	r3, #0
 80020f6:	623b      	str	r3, [r7, #32]
 80020f8:	4b4a      	ldr	r3, [pc, #296]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fc:	4a49      	ldr	r2, [pc, #292]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80020fe:	f043 0304 	orr.w	r3, r3, #4
 8002102:	6413      	str	r3, [r2, #64]	@ 0x40
 8002104:	4b47      	ldr	r3, [pc, #284]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	623b      	str	r3, [r7, #32]
 800210e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
 8002114:	4b43      	ldr	r3, [pc, #268]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002118:	4a42      	ldr	r2, [pc, #264]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 800211a:	f043 0308 	orr.w	r3, r3, #8
 800211e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002120:	4b40      	ldr	r3, [pc, #256]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800212c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002130:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800213e:	2302      	movs	r3, #2
 8002140:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002142:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002146:	4619      	mov	r1, r3
 8002148:	4839      	ldr	r0, [pc, #228]	@ (8002230 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800214a:	f000 fc45 	bl	80029d8 <HAL_GPIO_Init>
}
 800214e:	e062      	b.n	8002216 <HAL_TIM_Encoder_MspInit+0x1aa>
  else if(tim_encoderHandle->Instance==TIM5)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a37      	ldr	r2, [pc, #220]	@ (8002234 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d12c      	bne.n	80021b4 <HAL_TIM_Encoder_MspInit+0x148>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	4b31      	ldr	r3, [pc, #196]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	4a30      	ldr	r2, [pc, #192]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002164:	f043 0308 	orr.w	r3, r3, #8
 8002168:	6413      	str	r3, [r2, #64]	@ 0x40
 800216a:	4b2e      	ldr	r3, [pc, #184]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	61bb      	str	r3, [r7, #24]
 8002174:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	4b2a      	ldr	r3, [pc, #168]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	4a29      	ldr	r2, [pc, #164]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6313      	str	r3, [r2, #48]	@ 0x30
 8002186:	4b27      	ldr	r3, [pc, #156]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002192:	2303      	movs	r3, #3
 8002194:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021a2:	2302      	movs	r3, #2
 80021a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021aa:	4619      	mov	r1, r3
 80021ac:	4822      	ldr	r0, [pc, #136]	@ (8002238 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80021ae:	f000 fc13 	bl	80029d8 <HAL_GPIO_Init>
}
 80021b2:	e030      	b.n	8002216 <HAL_TIM_Encoder_MspInit+0x1aa>
  else if(tim_encoderHandle->Instance==TIM8)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a20      	ldr	r2, [pc, #128]	@ (800223c <HAL_TIM_Encoder_MspInit+0x1d0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d12b      	bne.n	8002216 <HAL_TIM_Encoder_MspInit+0x1aa>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	4b18      	ldr	r3, [pc, #96]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c6:	4a17      	ldr	r2, [pc, #92]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ce:	4b15      	ldr	r3, [pc, #84]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	4b11      	ldr	r3, [pc, #68]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	4a10      	ldr	r2, [pc, #64]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80021e4:	f043 0304 	orr.w	r3, r3, #4
 80021e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021f6:	23c0      	movs	r3, #192	@ 0xc0
 80021f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002202:	2300      	movs	r3, #0
 8002204:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002206:	2303      	movs	r3, #3
 8002208:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800220e:	4619      	mov	r1, r3
 8002210:	480b      	ldr	r0, [pc, #44]	@ (8002240 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002212:	f000 fbe1 	bl	80029d8 <HAL_GPIO_Init>
}
 8002216:	bf00      	nop
 8002218:	3740      	adds	r7, #64	@ 0x40
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40010000 	.word	0x40010000
 8002224:	40023800 	.word	0x40023800
 8002228:	40021000 	.word	0x40021000
 800222c:	40000800 	.word	0x40000800
 8002230:	40020c00 	.word	0x40020c00
 8002234:	40000c00 	.word	0x40000c00
 8002238:	40020000 	.word	0x40020000
 800223c:	40010400 	.word	0x40010400
 8002240:	40020800 	.word	0x40020800

08002244 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002254:	d10e      	bne.n	8002274 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	4b27      	ldr	r3, [pc, #156]	@ (80022f8 <HAL_TIM_Base_MspInit+0xb4>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	4a26      	ldr	r2, [pc, #152]	@ (80022f8 <HAL_TIM_Base_MspInit+0xb4>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6413      	str	r3, [r2, #64]	@ 0x40
 8002266:	4b24      	ldr	r3, [pc, #144]	@ (80022f8 <HAL_TIM_Base_MspInit+0xb4>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002272:	e03a      	b.n	80022ea <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a20      	ldr	r2, [pc, #128]	@ (80022fc <HAL_TIM_Base_MspInit+0xb8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d10e      	bne.n	800229c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	4b1d      	ldr	r3, [pc, #116]	@ (80022f8 <HAL_TIM_Base_MspInit+0xb4>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	4a1c      	ldr	r2, [pc, #112]	@ (80022f8 <HAL_TIM_Base_MspInit+0xb4>)
 8002288:	f043 0302 	orr.w	r3, r3, #2
 800228c:	6413      	str	r3, [r2, #64]	@ 0x40
 800228e:	4b1a      	ldr	r3, [pc, #104]	@ (80022f8 <HAL_TIM_Base_MspInit+0xb4>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]
}
 800229a:	e026      	b.n	80022ea <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM9)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a17      	ldr	r2, [pc, #92]	@ (8002300 <HAL_TIM_Base_MspInit+0xbc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d10e      	bne.n	80022c4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	4b13      	ldr	r3, [pc, #76]	@ (80022f8 <HAL_TIM_Base_MspInit+0xb4>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ae:	4a12      	ldr	r2, [pc, #72]	@ (80022f8 <HAL_TIM_Base_MspInit+0xb4>)
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022b6:	4b10      	ldr	r3, [pc, #64]	@ (80022f8 <HAL_TIM_Base_MspInit+0xb4>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
}
 80022c2:	e012      	b.n	80022ea <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM12)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002304 <HAL_TIM_Base_MspInit+0xc0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d10d      	bne.n	80022ea <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	4b09      	ldr	r3, [pc, #36]	@ (80022f8 <HAL_TIM_Base_MspInit+0xb4>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	4a08      	ldr	r2, [pc, #32]	@ (80022f8 <HAL_TIM_Base_MspInit+0xb4>)
 80022d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022de:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <HAL_TIM_Base_MspInit+0xb4>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
}
 80022ea:	bf00      	nop
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40000400 	.word	0x40000400
 8002300:	40014000 	.word	0x40014000
 8002304:	40001800 	.word	0x40001800

08002308 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08e      	sub	sp, #56	@ 0x38
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002328:	d13c      	bne.n	80023a4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
 800232e:	4b65      	ldr	r3, [pc, #404]	@ (80024c4 <HAL_TIM_MspPostInit+0x1bc>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	4a64      	ldr	r2, [pc, #400]	@ (80024c4 <HAL_TIM_MspPostInit+0x1bc>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6313      	str	r3, [r2, #48]	@ 0x30
 800233a:	4b62      	ldr	r3, [pc, #392]	@ (80024c4 <HAL_TIM_MspPostInit+0x1bc>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	623b      	str	r3, [r7, #32]
 8002344:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	4b5e      	ldr	r3, [pc, #376]	@ (80024c4 <HAL_TIM_MspPostInit+0x1bc>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	4a5d      	ldr	r2, [pc, #372]	@ (80024c4 <HAL_TIM_MspPostInit+0x1bc>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	6313      	str	r3, [r2, #48]	@ 0x30
 8002356:	4b5b      	ldr	r3, [pc, #364]	@ (80024c4 <HAL_TIM_MspPostInit+0x1bc>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	61fb      	str	r3, [r7, #28]
 8002360:	69fb      	ldr	r3, [r7, #28]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8002362:	232c      	movs	r3, #44	@ 0x2c
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236e:	2300      	movs	r3, #0
 8002370:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002372:	2301      	movs	r3, #1
 8002374:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800237a:	4619      	mov	r1, r3
 800237c:	4852      	ldr	r0, [pc, #328]	@ (80024c8 <HAL_TIM_MspPostInit+0x1c0>)
 800237e:	f000 fb2b 	bl	80029d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002382:	2308      	movs	r3, #8
 8002384:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002392:	2301      	movs	r3, #1
 8002394:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002396:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800239a:	4619      	mov	r1, r3
 800239c:	484b      	ldr	r0, [pc, #300]	@ (80024cc <HAL_TIM_MspPostInit+0x1c4>)
 800239e:	f000 fb1b 	bl	80029d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80023a2:	e08a      	b.n	80024ba <HAL_TIM_MspPostInit+0x1b2>
  else if(timHandle->Instance==TIM3)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a49      	ldr	r2, [pc, #292]	@ (80024d0 <HAL_TIM_MspPostInit+0x1c8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d13d      	bne.n	800242a <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	4b44      	ldr	r3, [pc, #272]	@ (80024c4 <HAL_TIM_MspPostInit+0x1bc>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	4a43      	ldr	r2, [pc, #268]	@ (80024c4 <HAL_TIM_MspPostInit+0x1bc>)
 80023b8:	f043 0304 	orr.w	r3, r3, #4
 80023bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023be:	4b41      	ldr	r3, [pc, #260]	@ (80024c4 <HAL_TIM_MspPostInit+0x1bc>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	4b3d      	ldr	r3, [pc, #244]	@ (80024c4 <HAL_TIM_MspPostInit+0x1bc>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	4a3c      	ldr	r2, [pc, #240]	@ (80024c4 <HAL_TIM_MspPostInit+0x1bc>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023da:	4b3a      	ldr	r3, [pc, #232]	@ (80024c4 <HAL_TIM_MspPostInit+0x1bc>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ec:	2302      	movs	r3, #2
 80023ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f4:	2300      	movs	r3, #0
 80023f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023f8:	2302      	movs	r3, #2
 80023fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002400:	4619      	mov	r1, r3
 8002402:	4834      	ldr	r0, [pc, #208]	@ (80024d4 <HAL_TIM_MspPostInit+0x1cc>)
 8002404:	f000 fae8 	bl	80029d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002408:	2320      	movs	r3, #32
 800240a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002414:	2300      	movs	r3, #0
 8002416:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002418:	2302      	movs	r3, #2
 800241a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002420:	4619      	mov	r1, r3
 8002422:	482a      	ldr	r0, [pc, #168]	@ (80024cc <HAL_TIM_MspPostInit+0x1c4>)
 8002424:	f000 fad8 	bl	80029d8 <HAL_GPIO_Init>
}
 8002428:	e047      	b.n	80024ba <HAL_TIM_MspPostInit+0x1b2>
  else if(timHandle->Instance==TIM9)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a2a      	ldr	r2, [pc, #168]	@ (80024d8 <HAL_TIM_MspPostInit+0x1d0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d11e      	bne.n	8002472 <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	4b22      	ldr	r3, [pc, #136]	@ (80024c4 <HAL_TIM_MspPostInit+0x1bc>)
 800243a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243c:	4a21      	ldr	r2, [pc, #132]	@ (80024c4 <HAL_TIM_MspPostInit+0x1bc>)
 800243e:	f043 0310 	orr.w	r3, r3, #16
 8002442:	6313      	str	r3, [r2, #48]	@ 0x30
 8002444:	4b1f      	ldr	r3, [pc, #124]	@ (80024c4 <HAL_TIM_MspPostInit+0x1bc>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002450:	2320      	movs	r3, #32
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002460:	2303      	movs	r3, #3
 8002462:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002468:	4619      	mov	r1, r3
 800246a:	481c      	ldr	r0, [pc, #112]	@ (80024dc <HAL_TIM_MspPostInit+0x1d4>)
 800246c:	f000 fab4 	bl	80029d8 <HAL_GPIO_Init>
}
 8002470:	e023      	b.n	80024ba <HAL_TIM_MspPostInit+0x1b2>
  else if(timHandle->Instance==TIM12)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1a      	ldr	r2, [pc, #104]	@ (80024e0 <HAL_TIM_MspPostInit+0x1d8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d11e      	bne.n	80024ba <HAL_TIM_MspPostInit+0x1b2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	4b10      	ldr	r3, [pc, #64]	@ (80024c4 <HAL_TIM_MspPostInit+0x1bc>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002484:	4a0f      	ldr	r2, [pc, #60]	@ (80024c4 <HAL_TIM_MspPostInit+0x1bc>)
 8002486:	f043 0302 	orr.w	r3, r3, #2
 800248a:	6313      	str	r3, [r2, #48]	@ 0x30
 800248c:	4b0d      	ldr	r3, [pc, #52]	@ (80024c4 <HAL_TIM_MspPostInit+0x1bc>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002498:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2300      	movs	r3, #0
 80024a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80024aa:	2309      	movs	r3, #9
 80024ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024b2:	4619      	mov	r1, r3
 80024b4:	4805      	ldr	r0, [pc, #20]	@ (80024cc <HAL_TIM_MspPostInit+0x1c4>)
 80024b6:	f000 fa8f 	bl	80029d8 <HAL_GPIO_Init>
}
 80024ba:	bf00      	nop
 80024bc:	3738      	adds	r7, #56	@ 0x38
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40020000 	.word	0x40020000
 80024cc:	40020400 	.word	0x40020400
 80024d0:	40000400 	.word	0x40000400
 80024d4:	40020800 	.word	0x40020800
 80024d8:	40014000 	.word	0x40014000
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40001800 	.word	0x40001800

080024e4 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80024e8:	4b11      	ldr	r3, [pc, #68]	@ (8002530 <MX_UART4_Init+0x4c>)
 80024ea:	4a12      	ldr	r2, [pc, #72]	@ (8002534 <MX_UART4_Init+0x50>)
 80024ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80024ee:	4b10      	ldr	r3, [pc, #64]	@ (8002530 <MX_UART4_Init+0x4c>)
 80024f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80024f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80024f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002530 <MX_UART4_Init+0x4c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80024fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002530 <MX_UART4_Init+0x4c>)
 80024fe:	2200      	movs	r2, #0
 8002500:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002502:	4b0b      	ldr	r3, [pc, #44]	@ (8002530 <MX_UART4_Init+0x4c>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002508:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <MX_UART4_Init+0x4c>)
 800250a:	220c      	movs	r2, #12
 800250c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800250e:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <MX_UART4_Init+0x4c>)
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002514:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <MX_UART4_Init+0x4c>)
 8002516:	2200      	movs	r2, #0
 8002518:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800251a:	4805      	ldr	r0, [pc, #20]	@ (8002530 <MX_UART4_Init+0x4c>)
 800251c:	f003 f8e0 	bl	80056e0 <HAL_UART_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002526:	f7ff f8fb 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	200003cc 	.word	0x200003cc
 8002534:	40004c00 	.word	0x40004c00

08002538 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800253c:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <MX_USART1_UART_Init+0x4c>)
 800253e:	4a12      	ldr	r2, [pc, #72]	@ (8002588 <MX_USART1_UART_Init+0x50>)
 8002540:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002542:	4b10      	ldr	r3, [pc, #64]	@ (8002584 <MX_USART1_UART_Init+0x4c>)
 8002544:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002548:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800254a:	4b0e      	ldr	r3, [pc, #56]	@ (8002584 <MX_USART1_UART_Init+0x4c>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002550:	4b0c      	ldr	r3, [pc, #48]	@ (8002584 <MX_USART1_UART_Init+0x4c>)
 8002552:	2200      	movs	r2, #0
 8002554:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002556:	4b0b      	ldr	r3, [pc, #44]	@ (8002584 <MX_USART1_UART_Init+0x4c>)
 8002558:	2200      	movs	r2, #0
 800255a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800255c:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <MX_USART1_UART_Init+0x4c>)
 800255e:	220c      	movs	r2, #12
 8002560:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002562:	4b08      	ldr	r3, [pc, #32]	@ (8002584 <MX_USART1_UART_Init+0x4c>)
 8002564:	2200      	movs	r2, #0
 8002566:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002568:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <MX_USART1_UART_Init+0x4c>)
 800256a:	2200      	movs	r2, #0
 800256c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800256e:	4805      	ldr	r0, [pc, #20]	@ (8002584 <MX_USART1_UART_Init+0x4c>)
 8002570:	f003 f8b6 	bl	80056e0 <HAL_UART_Init>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800257a:	f7ff f8d1 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000414 	.word	0x20000414
 8002588:	40011000 	.word	0x40011000

0800258c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08c      	sub	sp, #48	@ 0x30
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 031c 	add.w	r3, r7, #28
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a33      	ldr	r2, [pc, #204]	@ (8002678 <HAL_UART_MspInit+0xec>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d12d      	bne.n	800260a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	61bb      	str	r3, [r7, #24]
 80025b2:	4b32      	ldr	r3, [pc, #200]	@ (800267c <HAL_UART_MspInit+0xf0>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	4a31      	ldr	r2, [pc, #196]	@ (800267c <HAL_UART_MspInit+0xf0>)
 80025b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80025bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025be:	4b2f      	ldr	r3, [pc, #188]	@ (800267c <HAL_UART_MspInit+0xf0>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025c6:	61bb      	str	r3, [r7, #24]
 80025c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	4b2b      	ldr	r3, [pc, #172]	@ (800267c <HAL_UART_MspInit+0xf0>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	4a2a      	ldr	r2, [pc, #168]	@ (800267c <HAL_UART_MspInit+0xf0>)
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025da:	4b28      	ldr	r3, [pc, #160]	@ (800267c <HAL_UART_MspInit+0xf0>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025e6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80025ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ec:	2302      	movs	r3, #2
 80025ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f4:	2303      	movs	r3, #3
 80025f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80025f8:	2308      	movs	r3, #8
 80025fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025fc:	f107 031c 	add.w	r3, r7, #28
 8002600:	4619      	mov	r1, r3
 8002602:	481f      	ldr	r0, [pc, #124]	@ (8002680 <HAL_UART_MspInit+0xf4>)
 8002604:	f000 f9e8 	bl	80029d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002608:	e031      	b.n	800266e <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1d      	ldr	r2, [pc, #116]	@ (8002684 <HAL_UART_MspInit+0xf8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d12c      	bne.n	800266e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002614:	2300      	movs	r3, #0
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	4b18      	ldr	r3, [pc, #96]	@ (800267c <HAL_UART_MspInit+0xf0>)
 800261a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261c:	4a17      	ldr	r2, [pc, #92]	@ (800267c <HAL_UART_MspInit+0xf0>)
 800261e:	f043 0310 	orr.w	r3, r3, #16
 8002622:	6453      	str	r3, [r2, #68]	@ 0x44
 8002624:	4b15      	ldr	r3, [pc, #84]	@ (800267c <HAL_UART_MspInit+0xf0>)
 8002626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	4b11      	ldr	r3, [pc, #68]	@ (800267c <HAL_UART_MspInit+0xf0>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002638:	4a10      	ldr	r2, [pc, #64]	@ (800267c <HAL_UART_MspInit+0xf0>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002640:	4b0e      	ldr	r3, [pc, #56]	@ (800267c <HAL_UART_MspInit+0xf0>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800264c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265a:	2303      	movs	r3, #3
 800265c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800265e:	2307      	movs	r3, #7
 8002660:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002662:	f107 031c 	add.w	r3, r7, #28
 8002666:	4619      	mov	r1, r3
 8002668:	4807      	ldr	r0, [pc, #28]	@ (8002688 <HAL_UART_MspInit+0xfc>)
 800266a:	f000 f9b5 	bl	80029d8 <HAL_GPIO_Init>
}
 800266e:	bf00      	nop
 8002670:	3730      	adds	r7, #48	@ 0x30
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40004c00 	.word	0x40004c00
 800267c:	40023800 	.word	0x40023800
 8002680:	40020800 	.word	0x40020800
 8002684:	40011000 	.word	0x40011000
 8002688:	40020000 	.word	0x40020000

0800268c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800268c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002690:	f7ff f946 	bl	8001920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002694:	480c      	ldr	r0, [pc, #48]	@ (80026c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002696:	490d      	ldr	r1, [pc, #52]	@ (80026cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002698:	4a0d      	ldr	r2, [pc, #52]	@ (80026d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800269c:	e002      	b.n	80026a4 <LoopCopyDataInit>

0800269e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800269e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026a2:	3304      	adds	r3, #4

080026a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a8:	d3f9      	bcc.n	800269e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026aa:	4a0a      	ldr	r2, [pc, #40]	@ (80026d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026ac:	4c0a      	ldr	r4, [pc, #40]	@ (80026d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026b0:	e001      	b.n	80026b6 <LoopFillZerobss>

080026b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b4:	3204      	adds	r2, #4

080026b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b8:	d3fb      	bcc.n	80026b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ba:	f003 fe93 	bl	80063e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026be:	f7fe fed9 	bl	8001474 <main>
  bx  lr    
 80026c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026cc:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 80026d0:	08007424 	.word	0x08007424
  ldr r2, =_sbss
 80026d4:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 80026d8:	200005ac 	.word	0x200005ac

080026dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026dc:	e7fe      	b.n	80026dc <ADC_IRQHandler>
	...

080026e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <HAL_Init+0x40>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002720 <HAL_Init+0x40>)
 80026ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002720 <HAL_Init+0x40>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002720 <HAL_Init+0x40>)
 80026f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026fc:	4b08      	ldr	r3, [pc, #32]	@ (8002720 <HAL_Init+0x40>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a07      	ldr	r2, [pc, #28]	@ (8002720 <HAL_Init+0x40>)
 8002702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002708:	2003      	movs	r0, #3
 800270a:	f000 f931 	bl	8002970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800270e:	200f      	movs	r0, #15
 8002710:	f000 f808 	bl	8002724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002714:	f7ff f80a 	bl	800172c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40023c00 	.word	0x40023c00

08002724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800272c:	4b12      	ldr	r3, [pc, #72]	@ (8002778 <HAL_InitTick+0x54>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b12      	ldr	r3, [pc, #72]	@ (800277c <HAL_InitTick+0x58>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800273a:	fbb3 f3f1 	udiv	r3, r3, r1
 800273e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f93b 	bl	80029be <HAL_SYSTICK_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e00e      	b.n	8002770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b0f      	cmp	r3, #15
 8002756:	d80a      	bhi.n	800276e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002758:	2200      	movs	r2, #0
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002760:	f000 f911 	bl	8002986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002764:	4a06      	ldr	r2, [pc, #24]	@ (8002780 <HAL_InitTick+0x5c>)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	e000      	b.n	8002770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000060 	.word	0x20000060
 800277c:	20000068 	.word	0x20000068
 8002780:	20000064 	.word	0x20000064

08002784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002788:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <HAL_IncTick+0x20>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <HAL_IncTick+0x24>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4413      	add	r3, r2
 8002794:	4a04      	ldr	r2, [pc, #16]	@ (80027a8 <HAL_IncTick+0x24>)
 8002796:	6013      	str	r3, [r2, #0]
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	20000068 	.word	0x20000068
 80027a8:	2000045c 	.word	0x2000045c

080027ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return uwTick;
 80027b0:	4b03      	ldr	r3, [pc, #12]	@ (80027c0 <HAL_GetTick+0x14>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	2000045c 	.word	0x2000045c

080027c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027cc:	f7ff ffee 	bl	80027ac <HAL_GetTick>
 80027d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027dc:	d005      	beq.n	80027ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027de:	4b0a      	ldr	r3, [pc, #40]	@ (8002808 <HAL_Delay+0x44>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027ea:	bf00      	nop
 80027ec:	f7ff ffde 	bl	80027ac <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d8f7      	bhi.n	80027ec <HAL_Delay+0x28>
  {
  }
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000068 	.word	0x20000068

0800280c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800281c:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002828:	4013      	ands	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002834:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800283c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283e:	4a04      	ldr	r2, [pc, #16]	@ (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	60d3      	str	r3, [r2, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002858:	4b04      	ldr	r3, [pc, #16]	@ (800286c <__NVIC_GetPriorityGrouping+0x18>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	f003 0307 	and.w	r3, r3, #7
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	6039      	str	r1, [r7, #0]
 800287a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002880:	2b00      	cmp	r3, #0
 8002882:	db0a      	blt.n	800289a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	b2da      	uxtb	r2, r3
 8002888:	490c      	ldr	r1, [pc, #48]	@ (80028bc <__NVIC_SetPriority+0x4c>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	0112      	lsls	r2, r2, #4
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	440b      	add	r3, r1
 8002894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002898:	e00a      	b.n	80028b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4908      	ldr	r1, [pc, #32]	@ (80028c0 <__NVIC_SetPriority+0x50>)
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	3b04      	subs	r3, #4
 80028a8:	0112      	lsls	r2, r2, #4
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	440b      	add	r3, r1
 80028ae:	761a      	strb	r2, [r3, #24]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000e100 	.word	0xe000e100
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b089      	sub	sp, #36	@ 0x24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f1c3 0307 	rsb	r3, r3, #7
 80028de:	2b04      	cmp	r3, #4
 80028e0:	bf28      	it	cs
 80028e2:	2304      	movcs	r3, #4
 80028e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3304      	adds	r3, #4
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d902      	bls.n	80028f4 <NVIC_EncodePriority+0x30>
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3b03      	subs	r3, #3
 80028f2:	e000      	b.n	80028f6 <NVIC_EncodePriority+0x32>
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43da      	mvns	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	401a      	ands	r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800290c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
 8002916:	43d9      	mvns	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800291c:	4313      	orrs	r3, r2
         );
}
 800291e:	4618      	mov	r0, r3
 8002920:	3724      	adds	r7, #36	@ 0x24
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3b01      	subs	r3, #1
 8002938:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800293c:	d301      	bcc.n	8002942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800293e:	2301      	movs	r3, #1
 8002940:	e00f      	b.n	8002962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002942:	4a0a      	ldr	r2, [pc, #40]	@ (800296c <SysTick_Config+0x40>)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800294a:	210f      	movs	r1, #15
 800294c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002950:	f7ff ff8e 	bl	8002870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002954:	4b05      	ldr	r3, [pc, #20]	@ (800296c <SysTick_Config+0x40>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295a:	4b04      	ldr	r3, [pc, #16]	@ (800296c <SysTick_Config+0x40>)
 800295c:	2207      	movs	r2, #7
 800295e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	e000e010 	.word	0xe000e010

08002970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ff47 	bl	800280c <__NVIC_SetPriorityGrouping>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002986:	b580      	push	{r7, lr}
 8002988:	b086      	sub	sp, #24
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002998:	f7ff ff5c 	bl	8002854 <__NVIC_GetPriorityGrouping>
 800299c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	6978      	ldr	r0, [r7, #20]
 80029a4:	f7ff ff8e 	bl	80028c4 <NVIC_EncodePriority>
 80029a8:	4602      	mov	r2, r0
 80029aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff5d 	bl	8002870 <__NVIC_SetPriority>
}
 80029b6:	bf00      	nop
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ffb0 	bl	800292c <SysTick_Config>
 80029cc:	4603      	mov	r3, r0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	@ 0x24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	e16b      	b.n	8002ccc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029f4:	2201      	movs	r2, #1
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4013      	ands	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	f040 815a 	bne.w	8002cc6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d005      	beq.n	8002a2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d130      	bne.n	8002a8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	2203      	movs	r2, #3
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a60:	2201      	movs	r2, #1
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 0201 	and.w	r2, r3, #1
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d017      	beq.n	8002ac8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d123      	bne.n	8002b1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	08da      	lsrs	r2, r3, #3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3208      	adds	r2, #8
 8002adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	220f      	movs	r2, #15
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	08da      	lsrs	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3208      	adds	r2, #8
 8002b16:	69b9      	ldr	r1, [r7, #24]
 8002b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2203      	movs	r2, #3
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0203 	and.w	r2, r3, #3
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80b4 	beq.w	8002cc6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	4b60      	ldr	r3, [pc, #384]	@ (8002ce4 <HAL_GPIO_Init+0x30c>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b66:	4a5f      	ldr	r2, [pc, #380]	@ (8002ce4 <HAL_GPIO_Init+0x30c>)
 8002b68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b6e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ce4 <HAL_GPIO_Init+0x30c>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b7a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ce8 <HAL_GPIO_Init+0x310>)
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	089b      	lsrs	r3, r3, #2
 8002b80:	3302      	adds	r3, #2
 8002b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	220f      	movs	r2, #15
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a52      	ldr	r2, [pc, #328]	@ (8002cec <HAL_GPIO_Init+0x314>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d02b      	beq.n	8002bfe <HAL_GPIO_Init+0x226>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a51      	ldr	r2, [pc, #324]	@ (8002cf0 <HAL_GPIO_Init+0x318>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d025      	beq.n	8002bfa <HAL_GPIO_Init+0x222>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a50      	ldr	r2, [pc, #320]	@ (8002cf4 <HAL_GPIO_Init+0x31c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d01f      	beq.n	8002bf6 <HAL_GPIO_Init+0x21e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a4f      	ldr	r2, [pc, #316]	@ (8002cf8 <HAL_GPIO_Init+0x320>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d019      	beq.n	8002bf2 <HAL_GPIO_Init+0x21a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4e      	ldr	r2, [pc, #312]	@ (8002cfc <HAL_GPIO_Init+0x324>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d013      	beq.n	8002bee <HAL_GPIO_Init+0x216>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4d      	ldr	r2, [pc, #308]	@ (8002d00 <HAL_GPIO_Init+0x328>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00d      	beq.n	8002bea <HAL_GPIO_Init+0x212>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a4c      	ldr	r2, [pc, #304]	@ (8002d04 <HAL_GPIO_Init+0x32c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d007      	beq.n	8002be6 <HAL_GPIO_Init+0x20e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a4b      	ldr	r2, [pc, #300]	@ (8002d08 <HAL_GPIO_Init+0x330>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d101      	bne.n	8002be2 <HAL_GPIO_Init+0x20a>
 8002bde:	2307      	movs	r3, #7
 8002be0:	e00e      	b.n	8002c00 <HAL_GPIO_Init+0x228>
 8002be2:	2308      	movs	r3, #8
 8002be4:	e00c      	b.n	8002c00 <HAL_GPIO_Init+0x228>
 8002be6:	2306      	movs	r3, #6
 8002be8:	e00a      	b.n	8002c00 <HAL_GPIO_Init+0x228>
 8002bea:	2305      	movs	r3, #5
 8002bec:	e008      	b.n	8002c00 <HAL_GPIO_Init+0x228>
 8002bee:	2304      	movs	r3, #4
 8002bf0:	e006      	b.n	8002c00 <HAL_GPIO_Init+0x228>
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e004      	b.n	8002c00 <HAL_GPIO_Init+0x228>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e002      	b.n	8002c00 <HAL_GPIO_Init+0x228>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <HAL_GPIO_Init+0x228>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	f002 0203 	and.w	r2, r2, #3
 8002c06:	0092      	lsls	r2, r2, #2
 8002c08:	4093      	lsls	r3, r2
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c10:	4935      	ldr	r1, [pc, #212]	@ (8002ce8 <HAL_GPIO_Init+0x310>)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	3302      	adds	r3, #2
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d0c <HAL_GPIO_Init+0x334>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c42:	4a32      	ldr	r2, [pc, #200]	@ (8002d0c <HAL_GPIO_Init+0x334>)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c48:	4b30      	ldr	r3, [pc, #192]	@ (8002d0c <HAL_GPIO_Init+0x334>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c6c:	4a27      	ldr	r2, [pc, #156]	@ (8002d0c <HAL_GPIO_Init+0x334>)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c72:	4b26      	ldr	r3, [pc, #152]	@ (8002d0c <HAL_GPIO_Init+0x334>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c96:	4a1d      	ldr	r2, [pc, #116]	@ (8002d0c <HAL_GPIO_Init+0x334>)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d0c <HAL_GPIO_Init+0x334>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cc0:	4a12      	ldr	r2, [pc, #72]	@ (8002d0c <HAL_GPIO_Init+0x334>)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	61fb      	str	r3, [r7, #28]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	2b0f      	cmp	r3, #15
 8002cd0:	f67f ae90 	bls.w	80029f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	bf00      	nop
 8002cd8:	3724      	adds	r7, #36	@ 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40013800 	.word	0x40013800
 8002cec:	40020000 	.word	0x40020000
 8002cf0:	40020400 	.word	0x40020400
 8002cf4:	40020800 	.word	0x40020800
 8002cf8:	40020c00 	.word	0x40020c00
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40021400 	.word	0x40021400
 8002d04:	40021800 	.word	0x40021800
 8002d08:	40021c00 	.word	0x40021c00
 8002d0c:	40013c00 	.word	0x40013c00

08002d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	807b      	strh	r3, [r7, #2]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d20:	787b      	ldrb	r3, [r7, #1]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d26:	887a      	ldrh	r2, [r7, #2]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d2c:	e003      	b.n	8002d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d2e:	887b      	ldrh	r3, [r7, #2]
 8002d30:	041a      	lsls	r2, r3, #16
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	619a      	str	r2, [r3, #24]
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e12b      	b.n	8002fae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fe fb3a 	bl	80013e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2224      	movs	r2, #36	@ 0x24
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0201 	bic.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002da6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002da8:	f001 fc20 	bl	80045ec <HAL_RCC_GetPCLK1Freq>
 8002dac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4a81      	ldr	r2, [pc, #516]	@ (8002fb8 <HAL_I2C_Init+0x274>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d807      	bhi.n	8002dc8 <HAL_I2C_Init+0x84>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4a80      	ldr	r2, [pc, #512]	@ (8002fbc <HAL_I2C_Init+0x278>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	bf94      	ite	ls
 8002dc0:	2301      	movls	r3, #1
 8002dc2:	2300      	movhi	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	e006      	b.n	8002dd6 <HAL_I2C_Init+0x92>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4a7d      	ldr	r2, [pc, #500]	@ (8002fc0 <HAL_I2C_Init+0x27c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	bf94      	ite	ls
 8002dd0:	2301      	movls	r3, #1
 8002dd2:	2300      	movhi	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e0e7      	b.n	8002fae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4a78      	ldr	r2, [pc, #480]	@ (8002fc4 <HAL_I2C_Init+0x280>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	0c9b      	lsrs	r3, r3, #18
 8002de8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4a6a      	ldr	r2, [pc, #424]	@ (8002fb8 <HAL_I2C_Init+0x274>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d802      	bhi.n	8002e18 <HAL_I2C_Init+0xd4>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	3301      	adds	r3, #1
 8002e16:	e009      	b.n	8002e2c <HAL_I2C_Init+0xe8>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	4a69      	ldr	r2, [pc, #420]	@ (8002fc8 <HAL_I2C_Init+0x284>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	099b      	lsrs	r3, r3, #6
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	430b      	orrs	r3, r1
 8002e32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	495c      	ldr	r1, [pc, #368]	@ (8002fb8 <HAL_I2C_Init+0x274>)
 8002e48:	428b      	cmp	r3, r1
 8002e4a:	d819      	bhi.n	8002e80 <HAL_I2C_Init+0x13c>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1e59      	subs	r1, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e5a:	1c59      	adds	r1, r3, #1
 8002e5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e60:	400b      	ands	r3, r1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_I2C_Init+0x138>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1e59      	subs	r1, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7a:	e051      	b.n	8002f20 <HAL_I2C_Init+0x1dc>
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	e04f      	b.n	8002f20 <HAL_I2C_Init+0x1dc>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d111      	bne.n	8002eac <HAL_I2C_Init+0x168>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1e58      	subs	r0, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	440b      	add	r3, r1
 8002e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	e012      	b.n	8002ed2 <HAL_I2C_Init+0x18e>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1e58      	subs	r0, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6859      	ldr	r1, [r3, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	0099      	lsls	r1, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Init+0x196>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e022      	b.n	8002f20 <HAL_I2C_Init+0x1dc>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10e      	bne.n	8002f00 <HAL_I2C_Init+0x1bc>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1e58      	subs	r0, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6859      	ldr	r1, [r3, #4]
 8002eea:	460b      	mov	r3, r1
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	440b      	add	r3, r1
 8002ef0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002efe:	e00f      	b.n	8002f20 <HAL_I2C_Init+0x1dc>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1e58      	subs	r0, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	0099      	lsls	r1, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f16:	3301      	adds	r3, #1
 8002f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	6809      	ldr	r1, [r1, #0]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6911      	ldr	r1, [r2, #16]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68d2      	ldr	r2, [r2, #12]
 8002f5a:	4311      	orrs	r1, r2
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	000186a0 	.word	0x000186a0
 8002fbc:	001e847f 	.word	0x001e847f
 8002fc0:	003d08ff 	.word	0x003d08ff
 8002fc4:	431bde83 	.word	0x431bde83
 8002fc8:	10624dd3 	.word	0x10624dd3

08002fcc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	4608      	mov	r0, r1
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4603      	mov	r3, r0
 8002fdc:	817b      	strh	r3, [r7, #10]
 8002fde:	460b      	mov	r3, r1
 8002fe0:	813b      	strh	r3, [r7, #8]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fe6:	f7ff fbe1 	bl	80027ac <HAL_GetTick>
 8002fea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	f040 80d9 	bne.w	80031ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	2319      	movs	r3, #25
 8003000:	2201      	movs	r2, #1
 8003002:	496d      	ldr	r1, [pc, #436]	@ (80031b8 <HAL_I2C_Mem_Write+0x1ec>)
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fc8b 	bl	8003920 <I2C_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003010:	2302      	movs	r3, #2
 8003012:	e0cc      	b.n	80031ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_I2C_Mem_Write+0x56>
 800301e:	2302      	movs	r3, #2
 8003020:	e0c5      	b.n	80031ae <HAL_I2C_Mem_Write+0x1e2>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b01      	cmp	r3, #1
 8003036:	d007      	beq.n	8003048 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003056:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2221      	movs	r2, #33	@ 0x21
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2240      	movs	r2, #64	@ 0x40
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a3a      	ldr	r2, [r7, #32]
 8003072:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003078:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4a4d      	ldr	r2, [pc, #308]	@ (80031bc <HAL_I2C_Mem_Write+0x1f0>)
 8003088:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800308a:	88f8      	ldrh	r0, [r7, #6]
 800308c:	893a      	ldrh	r2, [r7, #8]
 800308e:	8979      	ldrh	r1, [r7, #10]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	9301      	str	r3, [sp, #4]
 8003094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	4603      	mov	r3, r0
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fac2 	bl	8003624 <I2C_RequestMemoryWrite>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d052      	beq.n	800314c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e081      	b.n	80031ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 fd50 	bl	8003b54 <I2C_WaitOnTXEFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00d      	beq.n	80030d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d107      	bne.n	80030d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e06b      	b.n	80031ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030da:	781a      	ldrb	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b04      	cmp	r3, #4
 8003112:	d11b      	bne.n	800314c <HAL_I2C_Mem_Write+0x180>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003118:	2b00      	cmp	r3, #0
 800311a:	d017      	beq.n	800314c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003120:	781a      	ldrb	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1aa      	bne.n	80030aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 fd43 	bl	8003be4 <I2C_WaitOnBTFFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00d      	beq.n	8003180 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	2b04      	cmp	r3, #4
 800316a:	d107      	bne.n	800317c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800317a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e016      	b.n	80031ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800318e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	e000      	b.n	80031ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031ac:	2302      	movs	r3, #2
  }
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	00100002 	.word	0x00100002
 80031bc:	ffff0000 	.word	0xffff0000

080031c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08c      	sub	sp, #48	@ 0x30
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	4608      	mov	r0, r1
 80031ca:	4611      	mov	r1, r2
 80031cc:	461a      	mov	r2, r3
 80031ce:	4603      	mov	r3, r0
 80031d0:	817b      	strh	r3, [r7, #10]
 80031d2:	460b      	mov	r3, r1
 80031d4:	813b      	strh	r3, [r7, #8]
 80031d6:	4613      	mov	r3, r2
 80031d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031da:	f7ff fae7 	bl	80027ac <HAL_GetTick>
 80031de:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	f040 8214 	bne.w	8003616 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	2319      	movs	r3, #25
 80031f4:	2201      	movs	r2, #1
 80031f6:	497b      	ldr	r1, [pc, #492]	@ (80033e4 <HAL_I2C_Mem_Read+0x224>)
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 fb91 	bl	8003920 <I2C_WaitOnFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003204:	2302      	movs	r3, #2
 8003206:	e207      	b.n	8003618 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_I2C_Mem_Read+0x56>
 8003212:	2302      	movs	r3, #2
 8003214:	e200      	b.n	8003618 <HAL_I2C_Mem_Read+0x458>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b01      	cmp	r3, #1
 800322a:	d007      	beq.n	800323c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800324a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2222      	movs	r2, #34	@ 0x22
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2240      	movs	r2, #64	@ 0x40
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003266:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800326c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4a5b      	ldr	r2, [pc, #364]	@ (80033e8 <HAL_I2C_Mem_Read+0x228>)
 800327c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800327e:	88f8      	ldrh	r0, [r7, #6]
 8003280:	893a      	ldrh	r2, [r7, #8]
 8003282:	8979      	ldrh	r1, [r7, #10]
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	9301      	str	r3, [sp, #4]
 8003288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	4603      	mov	r3, r0
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 fa5e 	bl	8003750 <I2C_RequestMemoryRead>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e1bc      	b.n	8003618 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d113      	bne.n	80032ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a6:	2300      	movs	r3, #0
 80032a8:	623b      	str	r3, [r7, #32]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	623b      	str	r3, [r7, #32]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	623b      	str	r3, [r7, #32]
 80032ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	e190      	b.n	80035f0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d11b      	bne.n	800330e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	e170      	b.n	80035f0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003312:	2b02      	cmp	r3, #2
 8003314:	d11b      	bne.n	800334e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003324:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003334:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003336:	2300      	movs	r3, #0
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	61bb      	str	r3, [r7, #24]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	61bb      	str	r3, [r7, #24]
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	e150      	b.n	80035f0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003364:	e144      	b.n	80035f0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336a:	2b03      	cmp	r3, #3
 800336c:	f200 80f1 	bhi.w	8003552 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003374:	2b01      	cmp	r3, #1
 8003376:	d123      	bne.n	80033c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800337a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 fc79 	bl	8003c74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e145      	b.n	8003618 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691a      	ldr	r2, [r3, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033be:	e117      	b.n	80035f0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d14e      	bne.n	8003466 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ce:	2200      	movs	r2, #0
 80033d0:	4906      	ldr	r1, [pc, #24]	@ (80033ec <HAL_I2C_Mem_Read+0x22c>)
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 faa4 	bl	8003920 <I2C_WaitOnFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d008      	beq.n	80033f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e11a      	b.n	8003618 <HAL_I2C_Mem_Read+0x458>
 80033e2:	bf00      	nop
 80033e4:	00100002 	.word	0x00100002
 80033e8:	ffff0000 	.word	0xffff0000
 80033ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003464:	e0c4      	b.n	80035f0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800346c:	2200      	movs	r2, #0
 800346e:	496c      	ldr	r1, [pc, #432]	@ (8003620 <HAL_I2C_Mem_Read+0x460>)
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 fa55 	bl	8003920 <I2C_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0cb      	b.n	8003618 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800348e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691a      	ldr	r2, [r3, #16]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c8:	2200      	movs	r2, #0
 80034ca:	4955      	ldr	r1, [pc, #340]	@ (8003620 <HAL_I2C_Mem_Read+0x460>)
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 fa27 	bl	8003920 <I2C_WaitOnFlagUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e09d      	b.n	8003618 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003550:	e04e      	b.n	80035f0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003554:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 fb8c 	bl	8003c74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e058      	b.n	8003618 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d124      	bne.n	80035f0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d107      	bne.n	80035be <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035bc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f47f aeb6 	bne.w	8003366 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	e000      	b.n	8003618 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003616:	2302      	movs	r3, #2
  }
}
 8003618:	4618      	mov	r0, r3
 800361a:	3728      	adds	r7, #40	@ 0x28
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	00010004 	.word	0x00010004

08003624 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	4608      	mov	r0, r1
 800362e:	4611      	mov	r1, r2
 8003630:	461a      	mov	r2, r3
 8003632:	4603      	mov	r3, r0
 8003634:	817b      	strh	r3, [r7, #10]
 8003636:	460b      	mov	r3, r1
 8003638:	813b      	strh	r3, [r7, #8]
 800363a:	4613      	mov	r3, r2
 800363c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800364c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	2200      	movs	r2, #0
 8003656:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f960 	bl	8003920 <I2C_WaitOnFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00d      	beq.n	8003682 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003670:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003674:	d103      	bne.n	800367e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800367c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e05f      	b.n	8003742 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003682:	897b      	ldrh	r3, [r7, #10]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	461a      	mov	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003690:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	6a3a      	ldr	r2, [r7, #32]
 8003696:	492d      	ldr	r1, [pc, #180]	@ (800374c <I2C_RequestMemoryWrite+0x128>)
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f9bb 	bl	8003a14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e04c      	b.n	8003742 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c0:	6a39      	ldr	r1, [r7, #32]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 fa46 	bl	8003b54 <I2C_WaitOnTXEFlagUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00d      	beq.n	80036ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d107      	bne.n	80036e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e02b      	b.n	8003742 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d105      	bne.n	80036fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036f0:	893b      	ldrh	r3, [r7, #8]
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	611a      	str	r2, [r3, #16]
 80036fa:	e021      	b.n	8003740 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036fc:	893b      	ldrh	r3, [r7, #8]
 80036fe:	0a1b      	lsrs	r3, r3, #8
 8003700:	b29b      	uxth	r3, r3
 8003702:	b2da      	uxtb	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800370a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800370c:	6a39      	ldr	r1, [r7, #32]
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 fa20 	bl	8003b54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00d      	beq.n	8003736 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	2b04      	cmp	r3, #4
 8003720:	d107      	bne.n	8003732 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003730:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e005      	b.n	8003742 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003736:	893b      	ldrh	r3, [r7, #8]
 8003738:	b2da      	uxtb	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	00010002 	.word	0x00010002

08003750 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af02      	add	r7, sp, #8
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	4608      	mov	r0, r1
 800375a:	4611      	mov	r1, r2
 800375c:	461a      	mov	r2, r3
 800375e:	4603      	mov	r3, r0
 8003760:	817b      	strh	r3, [r7, #10]
 8003762:	460b      	mov	r3, r1
 8003764:	813b      	strh	r3, [r7, #8]
 8003766:	4613      	mov	r3, r2
 8003768:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003778:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003788:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	2200      	movs	r2, #0
 8003792:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f8c2 	bl	8003920 <I2C_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00d      	beq.n	80037be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037b0:	d103      	bne.n	80037ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e0aa      	b.n	8003914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037be:	897b      	ldrh	r3, [r7, #10]
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	461a      	mov	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d0:	6a3a      	ldr	r2, [r7, #32]
 80037d2:	4952      	ldr	r1, [pc, #328]	@ (800391c <I2C_RequestMemoryRead+0x1cc>)
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f91d 	bl	8003a14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e097      	b.n	8003914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037fc:	6a39      	ldr	r1, [r7, #32]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f9a8 	bl	8003b54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00d      	beq.n	8003826 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	2b04      	cmp	r3, #4
 8003810:	d107      	bne.n	8003822 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003820:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e076      	b.n	8003914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d105      	bne.n	8003838 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800382c:	893b      	ldrh	r3, [r7, #8]
 800382e:	b2da      	uxtb	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	611a      	str	r2, [r3, #16]
 8003836:	e021      	b.n	800387c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003838:	893b      	ldrh	r3, [r7, #8]
 800383a:	0a1b      	lsrs	r3, r3, #8
 800383c:	b29b      	uxth	r3, r3
 800383e:	b2da      	uxtb	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003848:	6a39      	ldr	r1, [r7, #32]
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f982 	bl	8003b54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00d      	beq.n	8003872 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385a:	2b04      	cmp	r3, #4
 800385c:	d107      	bne.n	800386e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800386c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e050      	b.n	8003914 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003872:	893b      	ldrh	r3, [r7, #8]
 8003874:	b2da      	uxtb	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800387c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800387e:	6a39      	ldr	r1, [r7, #32]
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f967 	bl	8003b54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00d      	beq.n	80038a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003890:	2b04      	cmp	r3, #4
 8003892:	d107      	bne.n	80038a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e035      	b.n	8003914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	2200      	movs	r2, #0
 80038c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 f82b 	bl	8003920 <I2C_WaitOnFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00d      	beq.n	80038ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038de:	d103      	bne.n	80038e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e013      	b.n	8003914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038ec:	897b      	ldrh	r3, [r7, #10]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	6a3a      	ldr	r2, [r7, #32]
 8003900:	4906      	ldr	r1, [pc, #24]	@ (800391c <I2C_RequestMemoryRead+0x1cc>)
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f886 	bl	8003a14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	00010002 	.word	0x00010002

08003920 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	4613      	mov	r3, r2
 800392e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003930:	e048      	b.n	80039c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003938:	d044      	beq.n	80039c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393a:	f7fe ff37 	bl	80027ac <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d302      	bcc.n	8003950 <I2C_WaitOnFlagUntilTimeout+0x30>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d139      	bne.n	80039c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	0c1b      	lsrs	r3, r3, #16
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b01      	cmp	r3, #1
 8003958:	d10d      	bne.n	8003976 <I2C_WaitOnFlagUntilTimeout+0x56>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	43da      	mvns	r2, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	4013      	ands	r3, r2
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	e00c      	b.n	8003990 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	43da      	mvns	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	4013      	ands	r3, r2
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	bf0c      	ite	eq
 8003988:	2301      	moveq	r3, #1
 800398a:	2300      	movne	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	461a      	mov	r2, r3
 8003990:	79fb      	ldrb	r3, [r7, #7]
 8003992:	429a      	cmp	r2, r3
 8003994:	d116      	bne.n	80039c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b0:	f043 0220 	orr.w	r2, r3, #32
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e023      	b.n	8003a0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	0c1b      	lsrs	r3, r3, #16
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d10d      	bne.n	80039ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	43da      	mvns	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	4013      	ands	r3, r2
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	e00c      	b.n	8003a04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	43da      	mvns	r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	4013      	ands	r3, r2
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	bf0c      	ite	eq
 80039fc:	2301      	moveq	r3, #1
 80039fe:	2300      	movne	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	461a      	mov	r2, r3
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d093      	beq.n	8003932 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a22:	e071      	b.n	8003b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a32:	d123      	bne.n	8003a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	f043 0204 	orr.w	r2, r3, #4
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e067      	b.n	8003b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a82:	d041      	beq.n	8003b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a84:	f7fe fe92 	bl	80027ac <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d302      	bcc.n	8003a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d136      	bne.n	8003b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	0c1b      	lsrs	r3, r3, #16
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d10c      	bne.n	8003abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	bf14      	ite	ne
 8003ab6:	2301      	movne	r3, #1
 8003ab8:	2300      	moveq	r3, #0
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	e00b      	b.n	8003ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	43da      	mvns	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bf14      	ite	ne
 8003ad0:	2301      	movne	r3, #1
 8003ad2:	2300      	moveq	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d016      	beq.n	8003b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	f043 0220 	orr.w	r2, r3, #32
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e021      	b.n	8003b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	0c1b      	lsrs	r3, r3, #16
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d10c      	bne.n	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	43da      	mvns	r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bf14      	ite	ne
 8003b24:	2301      	movne	r3, #1
 8003b26:	2300      	moveq	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	e00b      	b.n	8003b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	43da      	mvns	r2, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4013      	ands	r3, r2
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	bf14      	ite	ne
 8003b3e:	2301      	movne	r3, #1
 8003b40:	2300      	moveq	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f47f af6d 	bne.w	8003a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b60:	e034      	b.n	8003bcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 f8e3 	bl	8003d2e <I2C_IsAcknowledgeFailed>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e034      	b.n	8003bdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b78:	d028      	beq.n	8003bcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7a:	f7fe fe17 	bl	80027ac <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d302      	bcc.n	8003b90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d11d      	bne.n	8003bcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b9a:	2b80      	cmp	r3, #128	@ 0x80
 8003b9c:	d016      	beq.n	8003bcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	f043 0220 	orr.w	r2, r3, #32
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e007      	b.n	8003bdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd6:	2b80      	cmp	r3, #128	@ 0x80
 8003bd8:	d1c3      	bne.n	8003b62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bf0:	e034      	b.n	8003c5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f89b 	bl	8003d2e <I2C_IsAcknowledgeFailed>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e034      	b.n	8003c6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c08:	d028      	beq.n	8003c5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0a:	f7fe fdcf 	bl	80027ac <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d302      	bcc.n	8003c20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d11d      	bne.n	8003c5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d016      	beq.n	8003c5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c48:	f043 0220 	orr.w	r2, r3, #32
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e007      	b.n	8003c6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d1c3      	bne.n	8003bf2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c80:	e049      	b.n	8003d16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	2b10      	cmp	r3, #16
 8003c8e:	d119      	bne.n	8003cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0210 	mvn.w	r2, #16
 8003c98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e030      	b.n	8003d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc4:	f7fe fd72 	bl	80027ac <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d302      	bcc.n	8003cda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d11d      	bne.n	8003d16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce4:	2b40      	cmp	r3, #64	@ 0x40
 8003ce6:	d016      	beq.n	8003d16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d02:	f043 0220 	orr.w	r2, r3, #32
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e007      	b.n	8003d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d20:	2b40      	cmp	r3, #64	@ 0x40
 8003d22:	d1ae      	bne.n	8003c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d44:	d11b      	bne.n	8003d7e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d4e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6a:	f043 0204 	orr.w	r2, r3, #4
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e267      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d075      	beq.n	8003e96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003daa:	4b88      	ldr	r3, [pc, #544]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d00c      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003db6:	4b85      	ldr	r3, [pc, #532]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d112      	bne.n	8003de8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dc2:	4b82      	ldr	r3, [pc, #520]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dce:	d10b      	bne.n	8003de8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd0:	4b7e      	ldr	r3, [pc, #504]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d05b      	beq.n	8003e94 <HAL_RCC_OscConfig+0x108>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d157      	bne.n	8003e94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e242      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003df0:	d106      	bne.n	8003e00 <HAL_RCC_OscConfig+0x74>
 8003df2:	4b76      	ldr	r3, [pc, #472]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a75      	ldr	r2, [pc, #468]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	e01d      	b.n	8003e3c <HAL_RCC_OscConfig+0xb0>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCC_OscConfig+0x98>
 8003e0a:	4b70      	ldr	r3, [pc, #448]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a6f      	ldr	r2, [pc, #444]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003e10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	4b6d      	ldr	r3, [pc, #436]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a6c      	ldr	r2, [pc, #432]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e00b      	b.n	8003e3c <HAL_RCC_OscConfig+0xb0>
 8003e24:	4b69      	ldr	r3, [pc, #420]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a68      	ldr	r2, [pc, #416]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	4b66      	ldr	r3, [pc, #408]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a65      	ldr	r2, [pc, #404]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003e36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d013      	beq.n	8003e6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e44:	f7fe fcb2 	bl	80027ac <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e4c:	f7fe fcae 	bl	80027ac <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b64      	cmp	r3, #100	@ 0x64
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e207      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5e:	4b5b      	ldr	r3, [pc, #364]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0xc0>
 8003e6a:	e014      	b.n	8003e96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6c:	f7fe fc9e 	bl	80027ac <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e74:	f7fe fc9a 	bl	80027ac <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b64      	cmp	r3, #100	@ 0x64
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e1f3      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e86:	4b51      	ldr	r3, [pc, #324]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0xe8>
 8003e92:	e000      	b.n	8003e96 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d063      	beq.n	8003f6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ea2:	4b4a      	ldr	r3, [pc, #296]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 030c 	and.w	r3, r3, #12
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00b      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eae:	4b47      	ldr	r3, [pc, #284]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d11c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eba:	4b44      	ldr	r3, [pc, #272]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d116      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec6:	4b41      	ldr	r3, [pc, #260]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <HAL_RCC_OscConfig+0x152>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d001      	beq.n	8003ede <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e1c7      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ede:	4b3b      	ldr	r3, [pc, #236]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4937      	ldr	r1, [pc, #220]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ef2:	e03a      	b.n	8003f6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d020      	beq.n	8003f3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003efc:	4b34      	ldr	r3, [pc, #208]	@ (8003fd0 <HAL_RCC_OscConfig+0x244>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f02:	f7fe fc53 	bl	80027ac <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f0a:	f7fe fc4f 	bl	80027ac <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e1a8      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0f0      	beq.n	8003f0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f28:	4b28      	ldr	r3, [pc, #160]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	4925      	ldr	r1, [pc, #148]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	600b      	str	r3, [r1, #0]
 8003f3c:	e015      	b.n	8003f6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f3e:	4b24      	ldr	r3, [pc, #144]	@ (8003fd0 <HAL_RCC_OscConfig+0x244>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fe fc32 	bl	80027ac <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f4c:	f7fe fc2e 	bl	80027ac <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e187      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d036      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d016      	beq.n	8003fac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f7e:	4b15      	ldr	r3, [pc, #84]	@ (8003fd4 <HAL_RCC_OscConfig+0x248>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f84:	f7fe fc12 	bl	80027ac <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f8c:	f7fe fc0e 	bl	80027ac <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e167      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0f0      	beq.n	8003f8c <HAL_RCC_OscConfig+0x200>
 8003faa:	e01b      	b.n	8003fe4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fac:	4b09      	ldr	r3, [pc, #36]	@ (8003fd4 <HAL_RCC_OscConfig+0x248>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb2:	f7fe fbfb 	bl	80027ac <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb8:	e00e      	b.n	8003fd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fba:	f7fe fbf7 	bl	80027ac <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d907      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e150      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	42470000 	.word	0x42470000
 8003fd4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fd8:	4b88      	ldr	r3, [pc, #544]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 8003fda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1ea      	bne.n	8003fba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 8097 	beq.w	8004120 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ff6:	4b81      	ldr	r3, [pc, #516]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10f      	bne.n	8004022 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	4b7d      	ldr	r3, [pc, #500]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 8004008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400a:	4a7c      	ldr	r2, [pc, #496]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 800400c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004010:	6413      	str	r3, [r2, #64]	@ 0x40
 8004012:	4b7a      	ldr	r3, [pc, #488]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 8004014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800401a:	60bb      	str	r3, [r7, #8]
 800401c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800401e:	2301      	movs	r3, #1
 8004020:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004022:	4b77      	ldr	r3, [pc, #476]	@ (8004200 <HAL_RCC_OscConfig+0x474>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d118      	bne.n	8004060 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800402e:	4b74      	ldr	r3, [pc, #464]	@ (8004200 <HAL_RCC_OscConfig+0x474>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a73      	ldr	r2, [pc, #460]	@ (8004200 <HAL_RCC_OscConfig+0x474>)
 8004034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403a:	f7fe fbb7 	bl	80027ac <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004042:	f7fe fbb3 	bl	80027ac <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e10c      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004054:	4b6a      	ldr	r3, [pc, #424]	@ (8004200 <HAL_RCC_OscConfig+0x474>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d106      	bne.n	8004076 <HAL_RCC_OscConfig+0x2ea>
 8004068:	4b64      	ldr	r3, [pc, #400]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 800406a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406c:	4a63      	ldr	r2, [pc, #396]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	6713      	str	r3, [r2, #112]	@ 0x70
 8004074:	e01c      	b.n	80040b0 <HAL_RCC_OscConfig+0x324>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b05      	cmp	r3, #5
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0x30c>
 800407e:	4b5f      	ldr	r3, [pc, #380]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004082:	4a5e      	ldr	r2, [pc, #376]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 8004084:	f043 0304 	orr.w	r3, r3, #4
 8004088:	6713      	str	r3, [r2, #112]	@ 0x70
 800408a:	4b5c      	ldr	r3, [pc, #368]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 800408c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408e:	4a5b      	ldr	r2, [pc, #364]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 8004090:	f043 0301 	orr.w	r3, r3, #1
 8004094:	6713      	str	r3, [r2, #112]	@ 0x70
 8004096:	e00b      	b.n	80040b0 <HAL_RCC_OscConfig+0x324>
 8004098:	4b58      	ldr	r3, [pc, #352]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 800409a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800409c:	4a57      	ldr	r2, [pc, #348]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 800409e:	f023 0301 	bic.w	r3, r3, #1
 80040a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040a4:	4b55      	ldr	r3, [pc, #340]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 80040a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a8:	4a54      	ldr	r2, [pc, #336]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 80040aa:	f023 0304 	bic.w	r3, r3, #4
 80040ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d015      	beq.n	80040e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b8:	f7fe fb78 	bl	80027ac <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040be:	e00a      	b.n	80040d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c0:	f7fe fb74 	bl	80027ac <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e0cb      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d6:	4b49      	ldr	r3, [pc, #292]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0ee      	beq.n	80040c0 <HAL_RCC_OscConfig+0x334>
 80040e2:	e014      	b.n	800410e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e4:	f7fe fb62 	bl	80027ac <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ea:	e00a      	b.n	8004102 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ec:	f7fe fb5e 	bl	80027ac <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e0b5      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004102:	4b3e      	ldr	r3, [pc, #248]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 8004104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1ee      	bne.n	80040ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800410e:	7dfb      	ldrb	r3, [r7, #23]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d105      	bne.n	8004120 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004114:	4b39      	ldr	r3, [pc, #228]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 8004116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004118:	4a38      	ldr	r2, [pc, #224]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 800411a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800411e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80a1 	beq.w	800426c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800412a:	4b34      	ldr	r3, [pc, #208]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	2b08      	cmp	r3, #8
 8004134:	d05c      	beq.n	80041f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d141      	bne.n	80041c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413e:	4b31      	ldr	r3, [pc, #196]	@ (8004204 <HAL_RCC_OscConfig+0x478>)
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004144:	f7fe fb32 	bl	80027ac <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414c:	f7fe fb2e 	bl	80027ac <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e087      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415e:	4b27      	ldr	r3, [pc, #156]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	019b      	lsls	r3, r3, #6
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004180:	085b      	lsrs	r3, r3, #1
 8004182:	3b01      	subs	r3, #1
 8004184:	041b      	lsls	r3, r3, #16
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418c:	061b      	lsls	r3, r3, #24
 800418e:	491b      	ldr	r1, [pc, #108]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 8004190:	4313      	orrs	r3, r2
 8004192:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004194:	4b1b      	ldr	r3, [pc, #108]	@ (8004204 <HAL_RCC_OscConfig+0x478>)
 8004196:	2201      	movs	r2, #1
 8004198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419a:	f7fe fb07 	bl	80027ac <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a2:	f7fe fb03 	bl	80027ac <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e05c      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b4:	4b11      	ldr	r3, [pc, #68]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0f0      	beq.n	80041a2 <HAL_RCC_OscConfig+0x416>
 80041c0:	e054      	b.n	800426c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c2:	4b10      	ldr	r3, [pc, #64]	@ (8004204 <HAL_RCC_OscConfig+0x478>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c8:	f7fe faf0 	bl	80027ac <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d0:	f7fe faec 	bl	80027ac <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e045      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e2:	4b06      	ldr	r3, [pc, #24]	@ (80041fc <HAL_RCC_OscConfig+0x470>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1f0      	bne.n	80041d0 <HAL_RCC_OscConfig+0x444>
 80041ee:	e03d      	b.n	800426c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d107      	bne.n	8004208 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e038      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
 80041fc:	40023800 	.word	0x40023800
 8004200:	40007000 	.word	0x40007000
 8004204:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004208:	4b1b      	ldr	r3, [pc, #108]	@ (8004278 <HAL_RCC_OscConfig+0x4ec>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d028      	beq.n	8004268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d121      	bne.n	8004268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800422e:	429a      	cmp	r2, r3
 8004230:	d11a      	bne.n	8004268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004238:	4013      	ands	r3, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800423e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004240:	4293      	cmp	r3, r2
 8004242:	d111      	bne.n	8004268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424e:	085b      	lsrs	r3, r3, #1
 8004250:	3b01      	subs	r3, #1
 8004252:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004254:	429a      	cmp	r2, r3
 8004256:	d107      	bne.n	8004268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004262:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d001      	beq.n	800426c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40023800 	.word	0x40023800

0800427c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0cc      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004290:	4b68      	ldr	r3, [pc, #416]	@ (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d90c      	bls.n	80042b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429e:	4b65      	ldr	r3, [pc, #404]	@ (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a6:	4b63      	ldr	r3, [pc, #396]	@ (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d001      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0b8      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d020      	beq.n	8004306 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042d0:	4b59      	ldr	r3, [pc, #356]	@ (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	4a58      	ldr	r2, [pc, #352]	@ (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042e8:	4b53      	ldr	r3, [pc, #332]	@ (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	4a52      	ldr	r2, [pc, #328]	@ (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f4:	4b50      	ldr	r3, [pc, #320]	@ (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	494d      	ldr	r1, [pc, #308]	@ (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	4313      	orrs	r3, r2
 8004304:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d044      	beq.n	800439c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d107      	bne.n	800432a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	4b47      	ldr	r3, [pc, #284]	@ (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d119      	bne.n	800435a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e07f      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d003      	beq.n	800433a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004336:	2b03      	cmp	r3, #3
 8004338:	d107      	bne.n	800434a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433a:	4b3f      	ldr	r3, [pc, #252]	@ (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e06f      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800434a:	4b3b      	ldr	r3, [pc, #236]	@ (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e067      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800435a:	4b37      	ldr	r3, [pc, #220]	@ (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f023 0203 	bic.w	r2, r3, #3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	4934      	ldr	r1, [pc, #208]	@ (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 8004368:	4313      	orrs	r3, r2
 800436a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800436c:	f7fe fa1e 	bl	80027ac <HAL_GetTick>
 8004370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004372:	e00a      	b.n	800438a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004374:	f7fe fa1a 	bl	80027ac <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e04f      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438a:	4b2b      	ldr	r3, [pc, #172]	@ (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 020c 	and.w	r2, r3, #12
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	429a      	cmp	r2, r3
 800439a:	d1eb      	bne.n	8004374 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800439c:	4b25      	ldr	r3, [pc, #148]	@ (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d20c      	bcs.n	80043c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043aa:	4b22      	ldr	r3, [pc, #136]	@ (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b2:	4b20      	ldr	r3, [pc, #128]	@ (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d001      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e032      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d0:	4b19      	ldr	r3, [pc, #100]	@ (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	4916      	ldr	r1, [pc, #88]	@ (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d009      	beq.n	8004402 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ee:	4b12      	ldr	r3, [pc, #72]	@ (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	490e      	ldr	r1, [pc, #56]	@ (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004402:	f000 f821 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8004406:	4602      	mov	r2, r0
 8004408:	4b0b      	ldr	r3, [pc, #44]	@ (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	091b      	lsrs	r3, r3, #4
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	490a      	ldr	r1, [pc, #40]	@ (800443c <HAL_RCC_ClockConfig+0x1c0>)
 8004414:	5ccb      	ldrb	r3, [r1, r3]
 8004416:	fa22 f303 	lsr.w	r3, r2, r3
 800441a:	4a09      	ldr	r2, [pc, #36]	@ (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 800441c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800441e:	4b09      	ldr	r3, [pc, #36]	@ (8004444 <HAL_RCC_ClockConfig+0x1c8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7fe f97e 	bl	8002724 <HAL_InitTick>

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40023c00 	.word	0x40023c00
 8004438:	40023800 	.word	0x40023800
 800443c:	080072dc 	.word	0x080072dc
 8004440:	20000060 	.word	0x20000060
 8004444:	20000064 	.word	0x20000064

08004448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800444c:	b090      	sub	sp, #64	@ 0x40
 800444e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004460:	4b59      	ldr	r3, [pc, #356]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 030c 	and.w	r3, r3, #12
 8004468:	2b08      	cmp	r3, #8
 800446a:	d00d      	beq.n	8004488 <HAL_RCC_GetSysClockFreq+0x40>
 800446c:	2b08      	cmp	r3, #8
 800446e:	f200 80a1 	bhi.w	80045b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <HAL_RCC_GetSysClockFreq+0x34>
 8004476:	2b04      	cmp	r3, #4
 8004478:	d003      	beq.n	8004482 <HAL_RCC_GetSysClockFreq+0x3a>
 800447a:	e09b      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800447c:	4b53      	ldr	r3, [pc, #332]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x184>)
 800447e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004480:	e09b      	b.n	80045ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004482:	4b53      	ldr	r3, [pc, #332]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004484:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004486:	e098      	b.n	80045ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004488:	4b4f      	ldr	r3, [pc, #316]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004490:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004492:	4b4d      	ldr	r3, [pc, #308]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d028      	beq.n	80044f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800449e:	4b4a      	ldr	r3, [pc, #296]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	099b      	lsrs	r3, r3, #6
 80044a4:	2200      	movs	r2, #0
 80044a6:	623b      	str	r3, [r7, #32]
 80044a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044b0:	2100      	movs	r1, #0
 80044b2:	4b47      	ldr	r3, [pc, #284]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80044b4:	fb03 f201 	mul.w	r2, r3, r1
 80044b8:	2300      	movs	r3, #0
 80044ba:	fb00 f303 	mul.w	r3, r0, r3
 80044be:	4413      	add	r3, r2
 80044c0:	4a43      	ldr	r2, [pc, #268]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80044c2:	fba0 1202 	umull	r1, r2, r0, r2
 80044c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044c8:	460a      	mov	r2, r1
 80044ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80044cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044ce:	4413      	add	r3, r2
 80044d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044d4:	2200      	movs	r2, #0
 80044d6:	61bb      	str	r3, [r7, #24]
 80044d8:	61fa      	str	r2, [r7, #28]
 80044da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80044e2:	f7fc faeb 	bl	8000abc <__aeabi_uldivmod>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4613      	mov	r3, r2
 80044ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044ee:	e053      	b.n	8004598 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f0:	4b35      	ldr	r3, [pc, #212]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	099b      	lsrs	r3, r3, #6
 80044f6:	2200      	movs	r2, #0
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	617a      	str	r2, [r7, #20]
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004502:	f04f 0b00 	mov.w	fp, #0
 8004506:	4652      	mov	r2, sl
 8004508:	465b      	mov	r3, fp
 800450a:	f04f 0000 	mov.w	r0, #0
 800450e:	f04f 0100 	mov.w	r1, #0
 8004512:	0159      	lsls	r1, r3, #5
 8004514:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004518:	0150      	lsls	r0, r2, #5
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	ebb2 080a 	subs.w	r8, r2, sl
 8004522:	eb63 090b 	sbc.w	r9, r3, fp
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004532:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004536:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800453a:	ebb2 0408 	subs.w	r4, r2, r8
 800453e:	eb63 0509 	sbc.w	r5, r3, r9
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	00eb      	lsls	r3, r5, #3
 800454c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004550:	00e2      	lsls	r2, r4, #3
 8004552:	4614      	mov	r4, r2
 8004554:	461d      	mov	r5, r3
 8004556:	eb14 030a 	adds.w	r3, r4, sl
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	eb45 030b 	adc.w	r3, r5, fp
 8004560:	607b      	str	r3, [r7, #4]
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800456e:	4629      	mov	r1, r5
 8004570:	028b      	lsls	r3, r1, #10
 8004572:	4621      	mov	r1, r4
 8004574:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004578:	4621      	mov	r1, r4
 800457a:	028a      	lsls	r2, r1, #10
 800457c:	4610      	mov	r0, r2
 800457e:	4619      	mov	r1, r3
 8004580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004582:	2200      	movs	r2, #0
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	60fa      	str	r2, [r7, #12]
 8004588:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800458c:	f7fc fa96 	bl	8000abc <__aeabi_uldivmod>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4613      	mov	r3, r2
 8004596:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004598:	4b0b      	ldr	r3, [pc, #44]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	3301      	adds	r3, #1
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80045a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045b2:	e002      	b.n	80045ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045b4:	4b05      	ldr	r3, [pc, #20]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x184>)
 80045b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3740      	adds	r7, #64	@ 0x40
 80045c0:	46bd      	mov	sp, r7
 80045c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045c6:	bf00      	nop
 80045c8:	40023800 	.word	0x40023800
 80045cc:	00f42400 	.word	0x00f42400
 80045d0:	017d7840 	.word	0x017d7840

080045d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d8:	4b03      	ldr	r3, [pc, #12]	@ (80045e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045da:	681b      	ldr	r3, [r3, #0]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	20000060 	.word	0x20000060

080045ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045f0:	f7ff fff0 	bl	80045d4 <HAL_RCC_GetHCLKFreq>
 80045f4:	4602      	mov	r2, r0
 80045f6:	4b05      	ldr	r3, [pc, #20]	@ (800460c <HAL_RCC_GetPCLK1Freq+0x20>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	0a9b      	lsrs	r3, r3, #10
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	4903      	ldr	r1, [pc, #12]	@ (8004610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004602:	5ccb      	ldrb	r3, [r1, r3]
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004608:	4618      	mov	r0, r3
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40023800 	.word	0x40023800
 8004610:	080072ec 	.word	0x080072ec

08004614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004618:	f7ff ffdc 	bl	80045d4 <HAL_RCC_GetHCLKFreq>
 800461c:	4602      	mov	r2, r0
 800461e:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	0b5b      	lsrs	r3, r3, #13
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	4903      	ldr	r1, [pc, #12]	@ (8004638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800462a:	5ccb      	ldrb	r3, [r1, r3]
 800462c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004630:	4618      	mov	r0, r3
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40023800 	.word	0x40023800
 8004638:	080072ec 	.word	0x080072ec

0800463c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e041      	b.n	80046d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7fd fdee 	bl	8002244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3304      	adds	r3, #4
 8004678:	4619      	mov	r1, r3
 800467a:	4610      	mov	r0, r2
 800467c:	f000 fc9e 	bl	8004fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d001      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e04e      	b.n	8004792 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a23      	ldr	r2, [pc, #140]	@ (80047a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d022      	beq.n	800475c <HAL_TIM_Base_Start_IT+0x80>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800471e:	d01d      	beq.n	800475c <HAL_TIM_Base_Start_IT+0x80>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1f      	ldr	r2, [pc, #124]	@ (80047a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d018      	beq.n	800475c <HAL_TIM_Base_Start_IT+0x80>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1e      	ldr	r2, [pc, #120]	@ (80047a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d013      	beq.n	800475c <HAL_TIM_Base_Start_IT+0x80>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a1c      	ldr	r2, [pc, #112]	@ (80047ac <HAL_TIM_Base_Start_IT+0xd0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00e      	beq.n	800475c <HAL_TIM_Base_Start_IT+0x80>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a1b      	ldr	r2, [pc, #108]	@ (80047b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d009      	beq.n	800475c <HAL_TIM_Base_Start_IT+0x80>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a19      	ldr	r2, [pc, #100]	@ (80047b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d004      	beq.n	800475c <HAL_TIM_Base_Start_IT+0x80>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a18      	ldr	r2, [pc, #96]	@ (80047b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d111      	bne.n	8004780 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b06      	cmp	r3, #6
 800476c:	d010      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0201 	orr.w	r2, r2, #1
 800477c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477e:	e007      	b.n	8004790 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0201 	orr.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40010000 	.word	0x40010000
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40000800 	.word	0x40000800
 80047ac:	40000c00 	.word	0x40000c00
 80047b0:	40010400 	.word	0x40010400
 80047b4:	40014000 	.word	0x40014000
 80047b8:	40001800 	.word	0x40001800

080047bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e041      	b.n	8004852 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f839 	bl	800485a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3304      	adds	r3, #4
 80047f8:	4619      	mov	r1, r3
 80047fa:	4610      	mov	r0, r2
 80047fc:	f000 fbde 	bl	8004fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
	...

08004870 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d109      	bne.n	8004894 <HAL_TIM_PWM_Start+0x24>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b01      	cmp	r3, #1
 800488a:	bf14      	ite	ne
 800488c:	2301      	movne	r3, #1
 800488e:	2300      	moveq	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	e022      	b.n	80048da <HAL_TIM_PWM_Start+0x6a>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2b04      	cmp	r3, #4
 8004898:	d109      	bne.n	80048ae <HAL_TIM_PWM_Start+0x3e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	bf14      	ite	ne
 80048a6:	2301      	movne	r3, #1
 80048a8:	2300      	moveq	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	e015      	b.n	80048da <HAL_TIM_PWM_Start+0x6a>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d109      	bne.n	80048c8 <HAL_TIM_PWM_Start+0x58>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b01      	cmp	r3, #1
 80048be:	bf14      	ite	ne
 80048c0:	2301      	movne	r3, #1
 80048c2:	2300      	moveq	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	e008      	b.n	80048da <HAL_TIM_PWM_Start+0x6a>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	bf14      	ite	ne
 80048d4:	2301      	movne	r3, #1
 80048d6:	2300      	moveq	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e07c      	b.n	80049dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d104      	bne.n	80048f2 <HAL_TIM_PWM_Start+0x82>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048f0:	e013      	b.n	800491a <HAL_TIM_PWM_Start+0xaa>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d104      	bne.n	8004902 <HAL_TIM_PWM_Start+0x92>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004900:	e00b      	b.n	800491a <HAL_TIM_PWM_Start+0xaa>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b08      	cmp	r3, #8
 8004906:	d104      	bne.n	8004912 <HAL_TIM_PWM_Start+0xa2>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004910:	e003      	b.n	800491a <HAL_TIM_PWM_Start+0xaa>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2201      	movs	r2, #1
 8004920:	6839      	ldr	r1, [r7, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fe3a 	bl	800559c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a2d      	ldr	r2, [pc, #180]	@ (80049e4 <HAL_TIM_PWM_Start+0x174>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d004      	beq.n	800493c <HAL_TIM_PWM_Start+0xcc>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a2c      	ldr	r2, [pc, #176]	@ (80049e8 <HAL_TIM_PWM_Start+0x178>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d101      	bne.n	8004940 <HAL_TIM_PWM_Start+0xd0>
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <HAL_TIM_PWM_Start+0xd2>
 8004940:	2300      	movs	r3, #0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d007      	beq.n	8004956 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004954:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a22      	ldr	r2, [pc, #136]	@ (80049e4 <HAL_TIM_PWM_Start+0x174>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d022      	beq.n	80049a6 <HAL_TIM_PWM_Start+0x136>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004968:	d01d      	beq.n	80049a6 <HAL_TIM_PWM_Start+0x136>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a1f      	ldr	r2, [pc, #124]	@ (80049ec <HAL_TIM_PWM_Start+0x17c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d018      	beq.n	80049a6 <HAL_TIM_PWM_Start+0x136>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1d      	ldr	r2, [pc, #116]	@ (80049f0 <HAL_TIM_PWM_Start+0x180>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d013      	beq.n	80049a6 <HAL_TIM_PWM_Start+0x136>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1c      	ldr	r2, [pc, #112]	@ (80049f4 <HAL_TIM_PWM_Start+0x184>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00e      	beq.n	80049a6 <HAL_TIM_PWM_Start+0x136>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a16      	ldr	r2, [pc, #88]	@ (80049e8 <HAL_TIM_PWM_Start+0x178>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d009      	beq.n	80049a6 <HAL_TIM_PWM_Start+0x136>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a18      	ldr	r2, [pc, #96]	@ (80049f8 <HAL_TIM_PWM_Start+0x188>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d004      	beq.n	80049a6 <HAL_TIM_PWM_Start+0x136>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a16      	ldr	r2, [pc, #88]	@ (80049fc <HAL_TIM_PWM_Start+0x18c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d111      	bne.n	80049ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b06      	cmp	r3, #6
 80049b6:	d010      	beq.n	80049da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c8:	e007      	b.n	80049da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0201 	orr.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40010000 	.word	0x40010000
 80049e8:	40010400 	.word	0x40010400
 80049ec:	40000400 	.word	0x40000400
 80049f0:	40000800 	.word	0x40000800
 80049f4:	40000c00 	.word	0x40000c00
 80049f8:	40014000 	.word	0x40014000
 80049fc:	40001800 	.word	0x40001800

08004a00 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e097      	b.n	8004b44 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d106      	bne.n	8004a2e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7fd fb1f 	bl	800206c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2202      	movs	r2, #2
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a44:	f023 0307 	bic.w	r3, r3, #7
 8004a48:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3304      	adds	r3, #4
 8004a52:	4619      	mov	r1, r3
 8004a54:	4610      	mov	r0, r2
 8004a56:	f000 fab1 	bl	8004fbc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a82:	f023 0303 	bic.w	r3, r3, #3
 8004a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	021b      	lsls	r3, r3, #8
 8004a92:	4313      	orrs	r3, r2
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004aa0:	f023 030c 	bic.w	r3, r3, #12
 8004aa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004aac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ab0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	4313      	orrs	r3, r2
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	011a      	lsls	r2, r3, #4
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	031b      	lsls	r3, r3, #12
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004ade:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004ae6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	4313      	orrs	r3, r2
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004b74:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d110      	bne.n	8004b9e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d102      	bne.n	8004b88 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b82:	7b7b      	ldrb	r3, [r7, #13]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d001      	beq.n	8004b8c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e089      	b.n	8004ca0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b9c:	e031      	b.n	8004c02 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d110      	bne.n	8004bc6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ba4:	7bbb      	ldrb	r3, [r7, #14]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d102      	bne.n	8004bb0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004baa:	7b3b      	ldrb	r3, [r7, #12]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d001      	beq.n	8004bb4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e075      	b.n	8004ca0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bc4:	e01d      	b.n	8004c02 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d108      	bne.n	8004bde <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004bcc:	7bbb      	ldrb	r3, [r7, #14]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d105      	bne.n	8004bde <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004bd2:	7b7b      	ldrb	r3, [r7, #13]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d102      	bne.n	8004bde <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004bd8:	7b3b      	ldrb	r3, [r7, #12]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d001      	beq.n	8004be2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e05e      	b.n	8004ca0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2202      	movs	r2, #2
 8004be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2202      	movs	r2, #2
 8004bee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d010      	beq.n	8004c30 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004c0e:	e01f      	b.n	8004c50 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2201      	movs	r2, #1
 8004c16:	2100      	movs	r1, #0
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fcbf 	bl	800559c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0202 	orr.w	r2, r2, #2
 8004c2c:	60da      	str	r2, [r3, #12]
      break;
 8004c2e:	e02e      	b.n	8004c8e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2201      	movs	r2, #1
 8004c36:	2104      	movs	r1, #4
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fcaf 	bl	800559c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 0204 	orr.w	r2, r2, #4
 8004c4c:	60da      	str	r2, [r3, #12]
      break;
 8004c4e:	e01e      	b.n	8004c8e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2201      	movs	r2, #1
 8004c56:	2100      	movs	r1, #0
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fc9f 	bl	800559c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2201      	movs	r2, #1
 8004c64:	2104      	movs	r1, #4
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fc98 	bl	800559c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0202 	orr.w	r2, r2, #2
 8004c7a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0204 	orr.w	r2, r2, #4
 8004c8a:	60da      	str	r2, [r3, #12]
      break;
 8004c8c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f042 0201 	orr.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e0ae      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b0c      	cmp	r3, #12
 8004cd2:	f200 809f 	bhi.w	8004e14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cdc:	08004d11 	.word	0x08004d11
 8004ce0:	08004e15 	.word	0x08004e15
 8004ce4:	08004e15 	.word	0x08004e15
 8004ce8:	08004e15 	.word	0x08004e15
 8004cec:	08004d51 	.word	0x08004d51
 8004cf0:	08004e15 	.word	0x08004e15
 8004cf4:	08004e15 	.word	0x08004e15
 8004cf8:	08004e15 	.word	0x08004e15
 8004cfc:	08004d93 	.word	0x08004d93
 8004d00:	08004e15 	.word	0x08004e15
 8004d04:	08004e15 	.word	0x08004e15
 8004d08:	08004e15 	.word	0x08004e15
 8004d0c:	08004dd3 	.word	0x08004dd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 f9f6 	bl	8005108 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699a      	ldr	r2, [r3, #24]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0208 	orr.w	r2, r2, #8
 8004d2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699a      	ldr	r2, [r3, #24]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0204 	bic.w	r2, r2, #4
 8004d3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6999      	ldr	r1, [r3, #24]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	691a      	ldr	r2, [r3, #16]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	619a      	str	r2, [r3, #24]
      break;
 8004d4e:	e064      	b.n	8004e1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fa46 	bl	80051e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6999      	ldr	r1, [r3, #24]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	021a      	lsls	r2, r3, #8
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	619a      	str	r2, [r3, #24]
      break;
 8004d90:	e043      	b.n	8004e1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68b9      	ldr	r1, [r7, #8]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fa9b 	bl	80052d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69da      	ldr	r2, [r3, #28]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 0208 	orr.w	r2, r2, #8
 8004dac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69da      	ldr	r2, [r3, #28]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0204 	bic.w	r2, r2, #4
 8004dbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69d9      	ldr	r1, [r3, #28]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	61da      	str	r2, [r3, #28]
      break;
 8004dd0:	e023      	b.n	8004e1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68b9      	ldr	r1, [r7, #8]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 faef 	bl	80053bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69da      	ldr	r2, [r3, #28]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69d9      	ldr	r1, [r3, #28]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	021a      	lsls	r2, r3, #8
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	61da      	str	r2, [r3, #28]
      break;
 8004e12:	e002      	b.n	8004e1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	75fb      	strb	r3, [r7, #23]
      break;
 8004e18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d101      	bne.n	8004e48 <HAL_TIM_ConfigClockSource+0x1c>
 8004e44:	2302      	movs	r3, #2
 8004e46:	e0b4      	b.n	8004fb2 <HAL_TIM_ConfigClockSource+0x186>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e80:	d03e      	beq.n	8004f00 <HAL_TIM_ConfigClockSource+0xd4>
 8004e82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e86:	f200 8087 	bhi.w	8004f98 <HAL_TIM_ConfigClockSource+0x16c>
 8004e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e8e:	f000 8086 	beq.w	8004f9e <HAL_TIM_ConfigClockSource+0x172>
 8004e92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e96:	d87f      	bhi.n	8004f98 <HAL_TIM_ConfigClockSource+0x16c>
 8004e98:	2b70      	cmp	r3, #112	@ 0x70
 8004e9a:	d01a      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0xa6>
 8004e9c:	2b70      	cmp	r3, #112	@ 0x70
 8004e9e:	d87b      	bhi.n	8004f98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea0:	2b60      	cmp	r3, #96	@ 0x60
 8004ea2:	d050      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0x11a>
 8004ea4:	2b60      	cmp	r3, #96	@ 0x60
 8004ea6:	d877      	bhi.n	8004f98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea8:	2b50      	cmp	r3, #80	@ 0x50
 8004eaa:	d03c      	beq.n	8004f26 <HAL_TIM_ConfigClockSource+0xfa>
 8004eac:	2b50      	cmp	r3, #80	@ 0x50
 8004eae:	d873      	bhi.n	8004f98 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb0:	2b40      	cmp	r3, #64	@ 0x40
 8004eb2:	d058      	beq.n	8004f66 <HAL_TIM_ConfigClockSource+0x13a>
 8004eb4:	2b40      	cmp	r3, #64	@ 0x40
 8004eb6:	d86f      	bhi.n	8004f98 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb8:	2b30      	cmp	r3, #48	@ 0x30
 8004eba:	d064      	beq.n	8004f86 <HAL_TIM_ConfigClockSource+0x15a>
 8004ebc:	2b30      	cmp	r3, #48	@ 0x30
 8004ebe:	d86b      	bhi.n	8004f98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec0:	2b20      	cmp	r3, #32
 8004ec2:	d060      	beq.n	8004f86 <HAL_TIM_ConfigClockSource+0x15a>
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	d867      	bhi.n	8004f98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d05c      	beq.n	8004f86 <HAL_TIM_ConfigClockSource+0x15a>
 8004ecc:	2b10      	cmp	r3, #16
 8004ece:	d05a      	beq.n	8004f86 <HAL_TIM_ConfigClockSource+0x15a>
 8004ed0:	e062      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ee2:	f000 fb3b 	bl	800555c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ef4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	609a      	str	r2, [r3, #8]
      break;
 8004efe:	e04f      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f10:	f000 fb24 	bl	800555c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f22:	609a      	str	r2, [r3, #8]
      break;
 8004f24:	e03c      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f32:	461a      	mov	r2, r3
 8004f34:	f000 fa98 	bl	8005468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2150      	movs	r1, #80	@ 0x50
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 faf1 	bl	8005526 <TIM_ITRx_SetConfig>
      break;
 8004f44:	e02c      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f52:	461a      	mov	r2, r3
 8004f54:	f000 fab7 	bl	80054c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2160      	movs	r1, #96	@ 0x60
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fae1 	bl	8005526 <TIM_ITRx_SetConfig>
      break;
 8004f64:	e01c      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f72:	461a      	mov	r2, r3
 8004f74:	f000 fa78 	bl	8005468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2140      	movs	r1, #64	@ 0x40
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fad1 	bl	8005526 <TIM_ITRx_SetConfig>
      break;
 8004f84:	e00c      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4610      	mov	r0, r2
 8004f92:	f000 fac8 	bl	8005526 <TIM_ITRx_SetConfig>
      break;
 8004f96:	e003      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f9c:	e000      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a43      	ldr	r2, [pc, #268]	@ (80050dc <TIM_Base_SetConfig+0x120>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d013      	beq.n	8004ffc <TIM_Base_SetConfig+0x40>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fda:	d00f      	beq.n	8004ffc <TIM_Base_SetConfig+0x40>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a40      	ldr	r2, [pc, #256]	@ (80050e0 <TIM_Base_SetConfig+0x124>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00b      	beq.n	8004ffc <TIM_Base_SetConfig+0x40>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a3f      	ldr	r2, [pc, #252]	@ (80050e4 <TIM_Base_SetConfig+0x128>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d007      	beq.n	8004ffc <TIM_Base_SetConfig+0x40>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a3e      	ldr	r2, [pc, #248]	@ (80050e8 <TIM_Base_SetConfig+0x12c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d003      	beq.n	8004ffc <TIM_Base_SetConfig+0x40>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a3d      	ldr	r2, [pc, #244]	@ (80050ec <TIM_Base_SetConfig+0x130>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d108      	bne.n	800500e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a32      	ldr	r2, [pc, #200]	@ (80050dc <TIM_Base_SetConfig+0x120>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d02b      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800501c:	d027      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2f      	ldr	r2, [pc, #188]	@ (80050e0 <TIM_Base_SetConfig+0x124>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d023      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2e      	ldr	r2, [pc, #184]	@ (80050e4 <TIM_Base_SetConfig+0x128>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d01f      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2d      	ldr	r2, [pc, #180]	@ (80050e8 <TIM_Base_SetConfig+0x12c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d01b      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a2c      	ldr	r2, [pc, #176]	@ (80050ec <TIM_Base_SetConfig+0x130>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d017      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a2b      	ldr	r2, [pc, #172]	@ (80050f0 <TIM_Base_SetConfig+0x134>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d013      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a2a      	ldr	r2, [pc, #168]	@ (80050f4 <TIM_Base_SetConfig+0x138>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00f      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a29      	ldr	r2, [pc, #164]	@ (80050f8 <TIM_Base_SetConfig+0x13c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00b      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a28      	ldr	r2, [pc, #160]	@ (80050fc <TIM_Base_SetConfig+0x140>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d007      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a27      	ldr	r2, [pc, #156]	@ (8005100 <TIM_Base_SetConfig+0x144>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d003      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a26      	ldr	r2, [pc, #152]	@ (8005104 <TIM_Base_SetConfig+0x148>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d108      	bne.n	8005080 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a0e      	ldr	r2, [pc, #56]	@ (80050dc <TIM_Base_SetConfig+0x120>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d003      	beq.n	80050ae <TIM_Base_SetConfig+0xf2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a10      	ldr	r2, [pc, #64]	@ (80050ec <TIM_Base_SetConfig+0x130>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d103      	bne.n	80050b6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f043 0204 	orr.w	r2, r3, #4
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	601a      	str	r2, [r3, #0]
}
 80050ce:	bf00      	nop
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40010000 	.word	0x40010000
 80050e0:	40000400 	.word	0x40000400
 80050e4:	40000800 	.word	0x40000800
 80050e8:	40000c00 	.word	0x40000c00
 80050ec:	40010400 	.word	0x40010400
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40014400 	.word	0x40014400
 80050f8:	40014800 	.word	0x40014800
 80050fc:	40001800 	.word	0x40001800
 8005100:	40001c00 	.word	0x40001c00
 8005104:	40002000 	.word	0x40002000

08005108 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	f023 0201 	bic.w	r2, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0303 	bic.w	r3, r3, #3
 800513e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f023 0302 	bic.w	r3, r3, #2
 8005150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a20      	ldr	r2, [pc, #128]	@ (80051e0 <TIM_OC1_SetConfig+0xd8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d003      	beq.n	800516c <TIM_OC1_SetConfig+0x64>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a1f      	ldr	r2, [pc, #124]	@ (80051e4 <TIM_OC1_SetConfig+0xdc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d10c      	bne.n	8005186 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f023 0308 	bic.w	r3, r3, #8
 8005172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f023 0304 	bic.w	r3, r3, #4
 8005184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a15      	ldr	r2, [pc, #84]	@ (80051e0 <TIM_OC1_SetConfig+0xd8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d003      	beq.n	8005196 <TIM_OC1_SetConfig+0x8e>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a14      	ldr	r2, [pc, #80]	@ (80051e4 <TIM_OC1_SetConfig+0xdc>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d111      	bne.n	80051ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800519c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	621a      	str	r2, [r3, #32]
}
 80051d4:	bf00      	nop
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	40010000 	.word	0x40010000
 80051e4:	40010400 	.word	0x40010400

080051e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f023 0210 	bic.w	r2, r3, #16
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800521e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	021b      	lsls	r3, r3, #8
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4313      	orrs	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f023 0320 	bic.w	r3, r3, #32
 8005232:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a22      	ldr	r2, [pc, #136]	@ (80052cc <TIM_OC2_SetConfig+0xe4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d003      	beq.n	8005250 <TIM_OC2_SetConfig+0x68>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a21      	ldr	r2, [pc, #132]	@ (80052d0 <TIM_OC2_SetConfig+0xe8>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d10d      	bne.n	800526c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	4313      	orrs	r3, r2
 8005262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800526a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a17      	ldr	r2, [pc, #92]	@ (80052cc <TIM_OC2_SetConfig+0xe4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d003      	beq.n	800527c <TIM_OC2_SetConfig+0x94>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a16      	ldr	r2, [pc, #88]	@ (80052d0 <TIM_OC2_SetConfig+0xe8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d113      	bne.n	80052a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005282:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800528a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	621a      	str	r2, [r3, #32]
}
 80052be:	bf00      	nop
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40010000 	.word	0x40010000
 80052d0:	40010400 	.word	0x40010400

080052d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0303 	bic.w	r3, r3, #3
 800530a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800531c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	021b      	lsls	r3, r3, #8
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a21      	ldr	r2, [pc, #132]	@ (80053b4 <TIM_OC3_SetConfig+0xe0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d003      	beq.n	800533a <TIM_OC3_SetConfig+0x66>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a20      	ldr	r2, [pc, #128]	@ (80053b8 <TIM_OC3_SetConfig+0xe4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d10d      	bne.n	8005356 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005340:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	021b      	lsls	r3, r3, #8
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a16      	ldr	r2, [pc, #88]	@ (80053b4 <TIM_OC3_SetConfig+0xe0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d003      	beq.n	8005366 <TIM_OC3_SetConfig+0x92>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a15      	ldr	r2, [pc, #84]	@ (80053b8 <TIM_OC3_SetConfig+0xe4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d113      	bne.n	800538e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800536c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	4313      	orrs	r3, r2
 800538c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	621a      	str	r2, [r3, #32]
}
 80053a8:	bf00      	nop
 80053aa:	371c      	adds	r7, #28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	40010000 	.word	0x40010000
 80053b8:	40010400 	.word	0x40010400

080053bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005406:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	031b      	lsls	r3, r3, #12
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a12      	ldr	r2, [pc, #72]	@ (8005460 <TIM_OC4_SetConfig+0xa4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d003      	beq.n	8005424 <TIM_OC4_SetConfig+0x68>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a11      	ldr	r2, [pc, #68]	@ (8005464 <TIM_OC4_SetConfig+0xa8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d109      	bne.n	8005438 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800542a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	019b      	lsls	r3, r3, #6
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	4313      	orrs	r3, r2
 8005436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40010000 	.word	0x40010000
 8005464:	40010400 	.word	0x40010400

08005468 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f023 0201 	bic.w	r2, r3, #1
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f023 030a 	bic.w	r3, r3, #10
 80054a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	621a      	str	r2, [r3, #32]
}
 80054ba:	bf00      	nop
 80054bc:	371c      	adds	r7, #28
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b087      	sub	sp, #28
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	f023 0210 	bic.w	r2, r3, #16
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	031b      	lsls	r3, r3, #12
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005502:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	4313      	orrs	r3, r2
 800550c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	621a      	str	r2, [r3, #32]
}
 800551a:	bf00      	nop
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005526:	b480      	push	{r7}
 8005528:	b085      	sub	sp, #20
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	f043 0307 	orr.w	r3, r3, #7
 8005548:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	609a      	str	r2, [r3, #8]
}
 8005550:	bf00      	nop
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005576:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	021a      	lsls	r2, r3, #8
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	431a      	orrs	r2, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4313      	orrs	r3, r2
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	4313      	orrs	r3, r2
 8005588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	609a      	str	r2, [r3, #8]
}
 8005590:	bf00      	nop
 8005592:	371c      	adds	r7, #28
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f003 031f 	and.w	r3, r3, #31
 80055ae:	2201      	movs	r2, #1
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a1a      	ldr	r2, [r3, #32]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	43db      	mvns	r3, r3
 80055be:	401a      	ands	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a1a      	ldr	r2, [r3, #32]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 031f 	and.w	r3, r3, #31
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	fa01 f303 	lsl.w	r3, r1, r3
 80055d4:	431a      	orrs	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	621a      	str	r2, [r3, #32]
}
 80055da:	bf00      	nop
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
	...

080055e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e05a      	b.n	80056b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005626:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a21      	ldr	r2, [pc, #132]	@ (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d022      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800564c:	d01d      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1d      	ldr	r2, [pc, #116]	@ (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d018      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a1b      	ldr	r2, [pc, #108]	@ (80056cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d013      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a1a      	ldr	r2, [pc, #104]	@ (80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00e      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a18      	ldr	r2, [pc, #96]	@ (80056d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d009      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a17      	ldr	r2, [pc, #92]	@ (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d004      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a15      	ldr	r2, [pc, #84]	@ (80056dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d10c      	bne.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005690:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	4313      	orrs	r3, r2
 800569a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40010000 	.word	0x40010000
 80056c8:	40000400 	.word	0x40000400
 80056cc:	40000800 	.word	0x40000800
 80056d0:	40000c00 	.word	0x40000c00
 80056d4:	40010400 	.word	0x40010400
 80056d8:	40014000 	.word	0x40014000
 80056dc:	40001800 	.word	0x40001800

080056e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e042      	b.n	8005778 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fc ff40 	bl	800258c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2224      	movs	r2, #36	@ 0x24
 8005710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005722:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f97f 	bl	8005a28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005738:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695a      	ldr	r2, [r3, #20]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005748:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005758:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2220      	movs	r2, #32
 800576c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08a      	sub	sp, #40	@ 0x28
 8005784:	af02      	add	r7, sp, #8
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	603b      	str	r3, [r7, #0]
 800578c:	4613      	mov	r3, r2
 800578e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b20      	cmp	r3, #32
 800579e:	f040 8081 	bne.w	80058a4 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_UART_Receive+0x2e>
 80057a8:	88fb      	ldrh	r3, [r7, #6]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e079      	b.n	80058a6 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2222      	movs	r2, #34	@ 0x22
 80057bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057c6:	f7fc fff1 	bl	80027ac <HAL_GetTick>
 80057ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	88fa      	ldrh	r2, [r7, #6]
 80057d0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	88fa      	ldrh	r2, [r7, #6]
 80057d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057e0:	d108      	bne.n	80057f4 <HAL_UART_Receive+0x74>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d104      	bne.n	80057f4 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	61bb      	str	r3, [r7, #24]
 80057f2:	e003      	b.n	80057fc <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057f8:	2300      	movs	r3, #0
 80057fa:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80057fc:	e047      	b.n	800588e <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2200      	movs	r2, #0
 8005806:	2120      	movs	r1, #32
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 f850 	bl	80058ae <UART_WaitOnFlagUntilTimeout>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d005      	beq.n	8005820 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e042      	b.n	80058a6 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10c      	bne.n	8005840 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	b29b      	uxth	r3, r3
 800582e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005832:	b29a      	uxth	r2, r3
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	3302      	adds	r3, #2
 800583c:	61bb      	str	r3, [r7, #24]
 800583e:	e01f      	b.n	8005880 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005848:	d007      	beq.n	800585a <HAL_UART_Receive+0xda>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10a      	bne.n	8005868 <HAL_UART_Receive+0xe8>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d106      	bne.n	8005868 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	b2da      	uxtb	r2, r3
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	701a      	strb	r2, [r3, #0]
 8005866:	e008      	b.n	800587a <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	b2db      	uxtb	r3, r3
 8005870:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005874:	b2da      	uxtb	r2, r3
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	3301      	adds	r3, #1
 800587e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005884:	b29b      	uxth	r3, r3
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005892:	b29b      	uxth	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1b2      	bne.n	80057fe <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e000      	b.n	80058a6 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80058a4:	2302      	movs	r3, #2
  }
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3720      	adds	r7, #32
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b086      	sub	sp, #24
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	60f8      	str	r0, [r7, #12]
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	603b      	str	r3, [r7, #0]
 80058ba:	4613      	mov	r3, r2
 80058bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058be:	e03b      	b.n	8005938 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058c6:	d037      	beq.n	8005938 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c8:	f7fc ff70 	bl	80027ac <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	6a3a      	ldr	r2, [r7, #32]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d302      	bcc.n	80058de <UART_WaitOnFlagUntilTimeout+0x30>
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e03a      	b.n	8005958 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d023      	beq.n	8005938 <UART_WaitOnFlagUntilTimeout+0x8a>
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b80      	cmp	r3, #128	@ 0x80
 80058f4:	d020      	beq.n	8005938 <UART_WaitOnFlagUntilTimeout+0x8a>
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b40      	cmp	r3, #64	@ 0x40
 80058fa:	d01d      	beq.n	8005938 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b08      	cmp	r3, #8
 8005908:	d116      	bne.n	8005938 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800590a:	2300      	movs	r3, #0
 800590c:	617b      	str	r3, [r7, #20]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 f81d 	bl	8005960 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2208      	movs	r2, #8
 800592a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e00f      	b.n	8005958 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	4013      	ands	r3, r2
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	429a      	cmp	r2, r3
 8005946:	bf0c      	ite	eq
 8005948:	2301      	moveq	r3, #1
 800594a:	2300      	movne	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	429a      	cmp	r2, r3
 8005954:	d0b4      	beq.n	80058c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005960:	b480      	push	{r7}
 8005962:	b095      	sub	sp, #84	@ 0x54
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005972:	e853 3f00 	ldrex	r3, [r3]
 8005976:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800597e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	330c      	adds	r3, #12
 8005986:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005988:	643a      	str	r2, [r7, #64]	@ 0x40
 800598a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800598e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005990:	e841 2300 	strex	r3, r2, [r1]
 8005994:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1e5      	bne.n	8005968 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3314      	adds	r3, #20
 80059a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	e853 3f00 	ldrex	r3, [r3]
 80059aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f023 0301 	bic.w	r3, r3, #1
 80059b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3314      	adds	r3, #20
 80059ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059c4:	e841 2300 	strex	r3, r2, [r1]
 80059c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1e5      	bne.n	800599c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d119      	bne.n	8005a0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	330c      	adds	r3, #12
 80059de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f023 0310 	bic.w	r3, r3, #16
 80059ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	330c      	adds	r3, #12
 80059f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059f8:	61ba      	str	r2, [r7, #24]
 80059fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6979      	ldr	r1, [r7, #20]
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	613b      	str	r3, [r7, #16]
   return(result);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e5      	bne.n	80059d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a1a:	bf00      	nop
 8005a1c:	3754      	adds	r7, #84	@ 0x54
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
	...

08005a28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a2c:	b0c0      	sub	sp, #256	@ 0x100
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a44:	68d9      	ldr	r1, [r3, #12]
 8005a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	ea40 0301 	orr.w	r3, r0, r1
 8005a50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a80:	f021 010c 	bic.w	r1, r1, #12
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a8e:	430b      	orrs	r3, r1
 8005a90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa2:	6999      	ldr	r1, [r3, #24]
 8005aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	ea40 0301 	orr.w	r3, r0, r1
 8005aae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	4b8f      	ldr	r3, [pc, #572]	@ (8005cf4 <UART_SetConfig+0x2cc>)
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d005      	beq.n	8005ac8 <UART_SetConfig+0xa0>
 8005abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	4b8d      	ldr	r3, [pc, #564]	@ (8005cf8 <UART_SetConfig+0x2d0>)
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d104      	bne.n	8005ad2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ac8:	f7fe fda4 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
 8005acc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005ad0:	e003      	b.n	8005ada <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ad2:	f7fe fd8b 	bl	80045ec <HAL_RCC_GetPCLK1Freq>
 8005ad6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ae4:	f040 810c 	bne.w	8005d00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aec:	2200      	movs	r2, #0
 8005aee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005af2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005af6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005afa:	4622      	mov	r2, r4
 8005afc:	462b      	mov	r3, r5
 8005afe:	1891      	adds	r1, r2, r2
 8005b00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b02:	415b      	adcs	r3, r3
 8005b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b0a:	4621      	mov	r1, r4
 8005b0c:	eb12 0801 	adds.w	r8, r2, r1
 8005b10:	4629      	mov	r1, r5
 8005b12:	eb43 0901 	adc.w	r9, r3, r1
 8005b16:	f04f 0200 	mov.w	r2, #0
 8005b1a:	f04f 0300 	mov.w	r3, #0
 8005b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b2a:	4690      	mov	r8, r2
 8005b2c:	4699      	mov	r9, r3
 8005b2e:	4623      	mov	r3, r4
 8005b30:	eb18 0303 	adds.w	r3, r8, r3
 8005b34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b38:	462b      	mov	r3, r5
 8005b3a:	eb49 0303 	adc.w	r3, r9, r3
 8005b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b56:	460b      	mov	r3, r1
 8005b58:	18db      	adds	r3, r3, r3
 8005b5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	eb42 0303 	adc.w	r3, r2, r3
 8005b62:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b6c:	f7fa ffa6 	bl	8000abc <__aeabi_uldivmod>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4b61      	ldr	r3, [pc, #388]	@ (8005cfc <UART_SetConfig+0x2d4>)
 8005b76:	fba3 2302 	umull	r2, r3, r3, r2
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	011c      	lsls	r4, r3, #4
 8005b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b82:	2200      	movs	r2, #0
 8005b84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b90:	4642      	mov	r2, r8
 8005b92:	464b      	mov	r3, r9
 8005b94:	1891      	adds	r1, r2, r2
 8005b96:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b98:	415b      	adcs	r3, r3
 8005b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ba0:	4641      	mov	r1, r8
 8005ba2:	eb12 0a01 	adds.w	sl, r2, r1
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	eb43 0b01 	adc.w	fp, r3, r1
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bc0:	4692      	mov	sl, r2
 8005bc2:	469b      	mov	fp, r3
 8005bc4:	4643      	mov	r3, r8
 8005bc6:	eb1a 0303 	adds.w	r3, sl, r3
 8005bca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bce:	464b      	mov	r3, r9
 8005bd0:	eb4b 0303 	adc.w	r3, fp, r3
 8005bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005be4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005be8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005bec:	460b      	mov	r3, r1
 8005bee:	18db      	adds	r3, r3, r3
 8005bf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	eb42 0303 	adc.w	r3, r2, r3
 8005bf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005bfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c02:	f7fa ff5b 	bl	8000abc <__aeabi_uldivmod>
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8005cfc <UART_SetConfig+0x2d4>)
 8005c0e:	fba3 2301 	umull	r2, r3, r3, r1
 8005c12:	095b      	lsrs	r3, r3, #5
 8005c14:	2264      	movs	r2, #100	@ 0x64
 8005c16:	fb02 f303 	mul.w	r3, r2, r3
 8005c1a:	1acb      	subs	r3, r1, r3
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c22:	4b36      	ldr	r3, [pc, #216]	@ (8005cfc <UART_SetConfig+0x2d4>)
 8005c24:	fba3 2302 	umull	r2, r3, r3, r2
 8005c28:	095b      	lsrs	r3, r3, #5
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c30:	441c      	add	r4, r3
 8005c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c44:	4642      	mov	r2, r8
 8005c46:	464b      	mov	r3, r9
 8005c48:	1891      	adds	r1, r2, r2
 8005c4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c4c:	415b      	adcs	r3, r3
 8005c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c54:	4641      	mov	r1, r8
 8005c56:	1851      	adds	r1, r2, r1
 8005c58:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c5a:	4649      	mov	r1, r9
 8005c5c:	414b      	adcs	r3, r1
 8005c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c60:	f04f 0200 	mov.w	r2, #0
 8005c64:	f04f 0300 	mov.w	r3, #0
 8005c68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c6c:	4659      	mov	r1, fp
 8005c6e:	00cb      	lsls	r3, r1, #3
 8005c70:	4651      	mov	r1, sl
 8005c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c76:	4651      	mov	r1, sl
 8005c78:	00ca      	lsls	r2, r1, #3
 8005c7a:	4610      	mov	r0, r2
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4603      	mov	r3, r0
 8005c80:	4642      	mov	r2, r8
 8005c82:	189b      	adds	r3, r3, r2
 8005c84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c88:	464b      	mov	r3, r9
 8005c8a:	460a      	mov	r2, r1
 8005c8c:	eb42 0303 	adc.w	r3, r2, r3
 8005c90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ca0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ca4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ca8:	460b      	mov	r3, r1
 8005caa:	18db      	adds	r3, r3, r3
 8005cac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cae:	4613      	mov	r3, r2
 8005cb0:	eb42 0303 	adc.w	r3, r2, r3
 8005cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005cba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005cbe:	f7fa fefd 	bl	8000abc <__aeabi_uldivmod>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005cfc <UART_SetConfig+0x2d4>)
 8005cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ccc:	095b      	lsrs	r3, r3, #5
 8005cce:	2164      	movs	r1, #100	@ 0x64
 8005cd0:	fb01 f303 	mul.w	r3, r1, r3
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	3332      	adds	r3, #50	@ 0x32
 8005cda:	4a08      	ldr	r2, [pc, #32]	@ (8005cfc <UART_SetConfig+0x2d4>)
 8005cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	f003 0207 	and.w	r2, r3, #7
 8005ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4422      	add	r2, r4
 8005cee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cf0:	e106      	b.n	8005f00 <UART_SetConfig+0x4d8>
 8005cf2:	bf00      	nop
 8005cf4:	40011000 	.word	0x40011000
 8005cf8:	40011400 	.word	0x40011400
 8005cfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d04:	2200      	movs	r2, #0
 8005d06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d12:	4642      	mov	r2, r8
 8005d14:	464b      	mov	r3, r9
 8005d16:	1891      	adds	r1, r2, r2
 8005d18:	6239      	str	r1, [r7, #32]
 8005d1a:	415b      	adcs	r3, r3
 8005d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d22:	4641      	mov	r1, r8
 8005d24:	1854      	adds	r4, r2, r1
 8005d26:	4649      	mov	r1, r9
 8005d28:	eb43 0501 	adc.w	r5, r3, r1
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	f04f 0300 	mov.w	r3, #0
 8005d34:	00eb      	lsls	r3, r5, #3
 8005d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d3a:	00e2      	lsls	r2, r4, #3
 8005d3c:	4614      	mov	r4, r2
 8005d3e:	461d      	mov	r5, r3
 8005d40:	4643      	mov	r3, r8
 8005d42:	18e3      	adds	r3, r4, r3
 8005d44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d48:	464b      	mov	r3, r9
 8005d4a:	eb45 0303 	adc.w	r3, r5, r3
 8005d4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d62:	f04f 0200 	mov.w	r2, #0
 8005d66:	f04f 0300 	mov.w	r3, #0
 8005d6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d6e:	4629      	mov	r1, r5
 8005d70:	008b      	lsls	r3, r1, #2
 8005d72:	4621      	mov	r1, r4
 8005d74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d78:	4621      	mov	r1, r4
 8005d7a:	008a      	lsls	r2, r1, #2
 8005d7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d80:	f7fa fe9c 	bl	8000abc <__aeabi_uldivmod>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	4b60      	ldr	r3, [pc, #384]	@ (8005f0c <UART_SetConfig+0x4e4>)
 8005d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d8e:	095b      	lsrs	r3, r3, #5
 8005d90:	011c      	lsls	r4, r3, #4
 8005d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d96:	2200      	movs	r2, #0
 8005d98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005da0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005da4:	4642      	mov	r2, r8
 8005da6:	464b      	mov	r3, r9
 8005da8:	1891      	adds	r1, r2, r2
 8005daa:	61b9      	str	r1, [r7, #24]
 8005dac:	415b      	adcs	r3, r3
 8005dae:	61fb      	str	r3, [r7, #28]
 8005db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005db4:	4641      	mov	r1, r8
 8005db6:	1851      	adds	r1, r2, r1
 8005db8:	6139      	str	r1, [r7, #16]
 8005dba:	4649      	mov	r1, r9
 8005dbc:	414b      	adcs	r3, r1
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	f04f 0200 	mov.w	r2, #0
 8005dc4:	f04f 0300 	mov.w	r3, #0
 8005dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dcc:	4659      	mov	r1, fp
 8005dce:	00cb      	lsls	r3, r1, #3
 8005dd0:	4651      	mov	r1, sl
 8005dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dd6:	4651      	mov	r1, sl
 8005dd8:	00ca      	lsls	r2, r1, #3
 8005dda:	4610      	mov	r0, r2
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4603      	mov	r3, r0
 8005de0:	4642      	mov	r2, r8
 8005de2:	189b      	adds	r3, r3, r2
 8005de4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005de8:	464b      	mov	r3, r9
 8005dea:	460a      	mov	r2, r1
 8005dec:	eb42 0303 	adc.w	r3, r2, r3
 8005df0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005dfe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	f04f 0300 	mov.w	r3, #0
 8005e08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e0c:	4649      	mov	r1, r9
 8005e0e:	008b      	lsls	r3, r1, #2
 8005e10:	4641      	mov	r1, r8
 8005e12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e16:	4641      	mov	r1, r8
 8005e18:	008a      	lsls	r2, r1, #2
 8005e1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e1e:	f7fa fe4d 	bl	8000abc <__aeabi_uldivmod>
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	4611      	mov	r1, r2
 8005e28:	4b38      	ldr	r3, [pc, #224]	@ (8005f0c <UART_SetConfig+0x4e4>)
 8005e2a:	fba3 2301 	umull	r2, r3, r3, r1
 8005e2e:	095b      	lsrs	r3, r3, #5
 8005e30:	2264      	movs	r2, #100	@ 0x64
 8005e32:	fb02 f303 	mul.w	r3, r2, r3
 8005e36:	1acb      	subs	r3, r1, r3
 8005e38:	011b      	lsls	r3, r3, #4
 8005e3a:	3332      	adds	r3, #50	@ 0x32
 8005e3c:	4a33      	ldr	r2, [pc, #204]	@ (8005f0c <UART_SetConfig+0x4e4>)
 8005e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e42:	095b      	lsrs	r3, r3, #5
 8005e44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e48:	441c      	add	r4, r3
 8005e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e4e:	2200      	movs	r2, #0
 8005e50:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e52:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e58:	4642      	mov	r2, r8
 8005e5a:	464b      	mov	r3, r9
 8005e5c:	1891      	adds	r1, r2, r2
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	415b      	adcs	r3, r3
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e68:	4641      	mov	r1, r8
 8005e6a:	1851      	adds	r1, r2, r1
 8005e6c:	6039      	str	r1, [r7, #0]
 8005e6e:	4649      	mov	r1, r9
 8005e70:	414b      	adcs	r3, r1
 8005e72:	607b      	str	r3, [r7, #4]
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	f04f 0300 	mov.w	r3, #0
 8005e7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e80:	4659      	mov	r1, fp
 8005e82:	00cb      	lsls	r3, r1, #3
 8005e84:	4651      	mov	r1, sl
 8005e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e8a:	4651      	mov	r1, sl
 8005e8c:	00ca      	lsls	r2, r1, #3
 8005e8e:	4610      	mov	r0, r2
 8005e90:	4619      	mov	r1, r3
 8005e92:	4603      	mov	r3, r0
 8005e94:	4642      	mov	r2, r8
 8005e96:	189b      	adds	r3, r3, r2
 8005e98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e9a:	464b      	mov	r3, r9
 8005e9c:	460a      	mov	r2, r1
 8005e9e:	eb42 0303 	adc.w	r3, r2, r3
 8005ea2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	663b      	str	r3, [r7, #96]	@ 0x60
 8005eae:	667a      	str	r2, [r7, #100]	@ 0x64
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	f04f 0300 	mov.w	r3, #0
 8005eb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	008b      	lsls	r3, r1, #2
 8005ec0:	4641      	mov	r1, r8
 8005ec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ec6:	4641      	mov	r1, r8
 8005ec8:	008a      	lsls	r2, r1, #2
 8005eca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005ece:	f7fa fdf5 	bl	8000abc <__aeabi_uldivmod>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f0c <UART_SetConfig+0x4e4>)
 8005ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8005edc:	095b      	lsrs	r3, r3, #5
 8005ede:	2164      	movs	r1, #100	@ 0x64
 8005ee0:	fb01 f303 	mul.w	r3, r1, r3
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	3332      	adds	r3, #50	@ 0x32
 8005eea:	4a08      	ldr	r2, [pc, #32]	@ (8005f0c <UART_SetConfig+0x4e4>)
 8005eec:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef0:	095b      	lsrs	r3, r3, #5
 8005ef2:	f003 020f 	and.w	r2, r3, #15
 8005ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4422      	add	r2, r4
 8005efe:	609a      	str	r2, [r3, #8]
}
 8005f00:	bf00      	nop
 8005f02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f06:	46bd      	mov	sp, r7
 8005f08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f0c:	51eb851f 	.word	0x51eb851f

08005f10 <siscanf>:
 8005f10:	b40e      	push	{r1, r2, r3}
 8005f12:	b530      	push	{r4, r5, lr}
 8005f14:	b09c      	sub	sp, #112	@ 0x70
 8005f16:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005f18:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005f1c:	f854 5b04 	ldr.w	r5, [r4], #4
 8005f20:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005f24:	9002      	str	r0, [sp, #8]
 8005f26:	9006      	str	r0, [sp, #24]
 8005f28:	f7fa f952 	bl	80001d0 <strlen>
 8005f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f5c <siscanf+0x4c>)
 8005f2e:	9003      	str	r0, [sp, #12]
 8005f30:	9007      	str	r0, [sp, #28]
 8005f32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f34:	480a      	ldr	r0, [pc, #40]	@ (8005f60 <siscanf+0x50>)
 8005f36:	9401      	str	r4, [sp, #4]
 8005f38:	2300      	movs	r3, #0
 8005f3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005f3c:	9314      	str	r3, [sp, #80]	@ 0x50
 8005f3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005f42:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f46:	462a      	mov	r2, r5
 8005f48:	4623      	mov	r3, r4
 8005f4a:	a902      	add	r1, sp, #8
 8005f4c:	6800      	ldr	r0, [r0, #0]
 8005f4e:	f000 fb13 	bl	8006578 <__ssvfiscanf_r>
 8005f52:	b01c      	add	sp, #112	@ 0x70
 8005f54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f58:	b003      	add	sp, #12
 8005f5a:	4770      	bx	lr
 8005f5c:	08005f87 	.word	0x08005f87
 8005f60:	20000078 	.word	0x20000078

08005f64 <__sread>:
 8005f64:	b510      	push	{r4, lr}
 8005f66:	460c      	mov	r4, r1
 8005f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f6c:	f000 fa10 	bl	8006390 <_read_r>
 8005f70:	2800      	cmp	r0, #0
 8005f72:	bfab      	itete	ge
 8005f74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f76:	89a3      	ldrhlt	r3, [r4, #12]
 8005f78:	181b      	addge	r3, r3, r0
 8005f7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f7e:	bfac      	ite	ge
 8005f80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f82:	81a3      	strhlt	r3, [r4, #12]
 8005f84:	bd10      	pop	{r4, pc}

08005f86 <__seofread>:
 8005f86:	2000      	movs	r0, #0
 8005f88:	4770      	bx	lr

08005f8a <__swrite>:
 8005f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f8e:	461f      	mov	r7, r3
 8005f90:	898b      	ldrh	r3, [r1, #12]
 8005f92:	05db      	lsls	r3, r3, #23
 8005f94:	4605      	mov	r5, r0
 8005f96:	460c      	mov	r4, r1
 8005f98:	4616      	mov	r6, r2
 8005f9a:	d505      	bpl.n	8005fa8 <__swrite+0x1e>
 8005f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f000 f9e2 	bl	800636c <_lseek_r>
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fb2:	81a3      	strh	r3, [r4, #12]
 8005fb4:	4632      	mov	r2, r6
 8005fb6:	463b      	mov	r3, r7
 8005fb8:	4628      	mov	r0, r5
 8005fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fbe:	f000 b9f9 	b.w	80063b4 <_write_r>

08005fc2 <__sseek>:
 8005fc2:	b510      	push	{r4, lr}
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fca:	f000 f9cf 	bl	800636c <_lseek_r>
 8005fce:	1c43      	adds	r3, r0, #1
 8005fd0:	89a3      	ldrh	r3, [r4, #12]
 8005fd2:	bf15      	itete	ne
 8005fd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005fd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005fda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005fde:	81a3      	strheq	r3, [r4, #12]
 8005fe0:	bf18      	it	ne
 8005fe2:	81a3      	strhne	r3, [r4, #12]
 8005fe4:	bd10      	pop	{r4, pc}

08005fe6 <__sclose>:
 8005fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fea:	f000 b9af 	b.w	800634c <_close_r>
	...

08005ff0 <std>:
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	b510      	push	{r4, lr}
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	e9c0 3300 	strd	r3, r3, [r0]
 8005ffa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ffe:	6083      	str	r3, [r0, #8]
 8006000:	8181      	strh	r1, [r0, #12]
 8006002:	6643      	str	r3, [r0, #100]	@ 0x64
 8006004:	81c2      	strh	r2, [r0, #14]
 8006006:	6183      	str	r3, [r0, #24]
 8006008:	4619      	mov	r1, r3
 800600a:	2208      	movs	r2, #8
 800600c:	305c      	adds	r0, #92	@ 0x5c
 800600e:	f000 f995 	bl	800633c <memset>
 8006012:	4b0d      	ldr	r3, [pc, #52]	@ (8006048 <std+0x58>)
 8006014:	6263      	str	r3, [r4, #36]	@ 0x24
 8006016:	4b0d      	ldr	r3, [pc, #52]	@ (800604c <std+0x5c>)
 8006018:	62a3      	str	r3, [r4, #40]	@ 0x28
 800601a:	4b0d      	ldr	r3, [pc, #52]	@ (8006050 <std+0x60>)
 800601c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800601e:	4b0d      	ldr	r3, [pc, #52]	@ (8006054 <std+0x64>)
 8006020:	6323      	str	r3, [r4, #48]	@ 0x30
 8006022:	4b0d      	ldr	r3, [pc, #52]	@ (8006058 <std+0x68>)
 8006024:	6224      	str	r4, [r4, #32]
 8006026:	429c      	cmp	r4, r3
 8006028:	d006      	beq.n	8006038 <std+0x48>
 800602a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800602e:	4294      	cmp	r4, r2
 8006030:	d002      	beq.n	8006038 <std+0x48>
 8006032:	33d0      	adds	r3, #208	@ 0xd0
 8006034:	429c      	cmp	r4, r3
 8006036:	d105      	bne.n	8006044 <std+0x54>
 8006038:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800603c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006040:	f000 b9f4 	b.w	800642c <__retarget_lock_init_recursive>
 8006044:	bd10      	pop	{r4, pc}
 8006046:	bf00      	nop
 8006048:	08005f65 	.word	0x08005f65
 800604c:	08005f8b 	.word	0x08005f8b
 8006050:	08005fc3 	.word	0x08005fc3
 8006054:	08005fe7 	.word	0x08005fe7
 8006058:	20000460 	.word	0x20000460

0800605c <stdio_exit_handler>:
 800605c:	4a02      	ldr	r2, [pc, #8]	@ (8006068 <stdio_exit_handler+0xc>)
 800605e:	4903      	ldr	r1, [pc, #12]	@ (800606c <stdio_exit_handler+0x10>)
 8006060:	4803      	ldr	r0, [pc, #12]	@ (8006070 <stdio_exit_handler+0x14>)
 8006062:	f000 b8ef 	b.w	8006244 <_fwalk_sglue>
 8006066:	bf00      	nop
 8006068:	2000006c 	.word	0x2000006c
 800606c:	08006dbd 	.word	0x08006dbd
 8006070:	2000007c 	.word	0x2000007c

08006074 <cleanup_stdio>:
 8006074:	6841      	ldr	r1, [r0, #4]
 8006076:	4b0c      	ldr	r3, [pc, #48]	@ (80060a8 <cleanup_stdio+0x34>)
 8006078:	4299      	cmp	r1, r3
 800607a:	b510      	push	{r4, lr}
 800607c:	4604      	mov	r4, r0
 800607e:	d001      	beq.n	8006084 <cleanup_stdio+0x10>
 8006080:	f000 fe9c 	bl	8006dbc <_fflush_r>
 8006084:	68a1      	ldr	r1, [r4, #8]
 8006086:	4b09      	ldr	r3, [pc, #36]	@ (80060ac <cleanup_stdio+0x38>)
 8006088:	4299      	cmp	r1, r3
 800608a:	d002      	beq.n	8006092 <cleanup_stdio+0x1e>
 800608c:	4620      	mov	r0, r4
 800608e:	f000 fe95 	bl	8006dbc <_fflush_r>
 8006092:	68e1      	ldr	r1, [r4, #12]
 8006094:	4b06      	ldr	r3, [pc, #24]	@ (80060b0 <cleanup_stdio+0x3c>)
 8006096:	4299      	cmp	r1, r3
 8006098:	d004      	beq.n	80060a4 <cleanup_stdio+0x30>
 800609a:	4620      	mov	r0, r4
 800609c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060a0:	f000 be8c 	b.w	8006dbc <_fflush_r>
 80060a4:	bd10      	pop	{r4, pc}
 80060a6:	bf00      	nop
 80060a8:	20000460 	.word	0x20000460
 80060ac:	200004c8 	.word	0x200004c8
 80060b0:	20000530 	.word	0x20000530

080060b4 <global_stdio_init.part.0>:
 80060b4:	b510      	push	{r4, lr}
 80060b6:	4b0b      	ldr	r3, [pc, #44]	@ (80060e4 <global_stdio_init.part.0+0x30>)
 80060b8:	4c0b      	ldr	r4, [pc, #44]	@ (80060e8 <global_stdio_init.part.0+0x34>)
 80060ba:	4a0c      	ldr	r2, [pc, #48]	@ (80060ec <global_stdio_init.part.0+0x38>)
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	4620      	mov	r0, r4
 80060c0:	2200      	movs	r2, #0
 80060c2:	2104      	movs	r1, #4
 80060c4:	f7ff ff94 	bl	8005ff0 <std>
 80060c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80060cc:	2201      	movs	r2, #1
 80060ce:	2109      	movs	r1, #9
 80060d0:	f7ff ff8e 	bl	8005ff0 <std>
 80060d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80060d8:	2202      	movs	r2, #2
 80060da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060de:	2112      	movs	r1, #18
 80060e0:	f7ff bf86 	b.w	8005ff0 <std>
 80060e4:	20000598 	.word	0x20000598
 80060e8:	20000460 	.word	0x20000460
 80060ec:	0800605d 	.word	0x0800605d

080060f0 <__sfp_lock_acquire>:
 80060f0:	4801      	ldr	r0, [pc, #4]	@ (80060f8 <__sfp_lock_acquire+0x8>)
 80060f2:	f000 b99c 	b.w	800642e <__retarget_lock_acquire_recursive>
 80060f6:	bf00      	nop
 80060f8:	200005a1 	.word	0x200005a1

080060fc <__sfp_lock_release>:
 80060fc:	4801      	ldr	r0, [pc, #4]	@ (8006104 <__sfp_lock_release+0x8>)
 80060fe:	f000 b997 	b.w	8006430 <__retarget_lock_release_recursive>
 8006102:	bf00      	nop
 8006104:	200005a1 	.word	0x200005a1

08006108 <__sinit>:
 8006108:	b510      	push	{r4, lr}
 800610a:	4604      	mov	r4, r0
 800610c:	f7ff fff0 	bl	80060f0 <__sfp_lock_acquire>
 8006110:	6a23      	ldr	r3, [r4, #32]
 8006112:	b11b      	cbz	r3, 800611c <__sinit+0x14>
 8006114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006118:	f7ff bff0 	b.w	80060fc <__sfp_lock_release>
 800611c:	4b04      	ldr	r3, [pc, #16]	@ (8006130 <__sinit+0x28>)
 800611e:	6223      	str	r3, [r4, #32]
 8006120:	4b04      	ldr	r3, [pc, #16]	@ (8006134 <__sinit+0x2c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1f5      	bne.n	8006114 <__sinit+0xc>
 8006128:	f7ff ffc4 	bl	80060b4 <global_stdio_init.part.0>
 800612c:	e7f2      	b.n	8006114 <__sinit+0xc>
 800612e:	bf00      	nop
 8006130:	08006075 	.word	0x08006075
 8006134:	20000598 	.word	0x20000598

08006138 <_strtol_l.constprop.0>:
 8006138:	2b24      	cmp	r3, #36	@ 0x24
 800613a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800613e:	4686      	mov	lr, r0
 8006140:	4690      	mov	r8, r2
 8006142:	d801      	bhi.n	8006148 <_strtol_l.constprop.0+0x10>
 8006144:	2b01      	cmp	r3, #1
 8006146:	d106      	bne.n	8006156 <_strtol_l.constprop.0+0x1e>
 8006148:	f000 f946 	bl	80063d8 <__errno>
 800614c:	2316      	movs	r3, #22
 800614e:	6003      	str	r3, [r0, #0]
 8006150:	2000      	movs	r0, #0
 8006152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006156:	4834      	ldr	r0, [pc, #208]	@ (8006228 <_strtol_l.constprop.0+0xf0>)
 8006158:	460d      	mov	r5, r1
 800615a:	462a      	mov	r2, r5
 800615c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006160:	5d06      	ldrb	r6, [r0, r4]
 8006162:	f016 0608 	ands.w	r6, r6, #8
 8006166:	d1f8      	bne.n	800615a <_strtol_l.constprop.0+0x22>
 8006168:	2c2d      	cmp	r4, #45	@ 0x2d
 800616a:	d12d      	bne.n	80061c8 <_strtol_l.constprop.0+0x90>
 800616c:	782c      	ldrb	r4, [r5, #0]
 800616e:	2601      	movs	r6, #1
 8006170:	1c95      	adds	r5, r2, #2
 8006172:	f033 0210 	bics.w	r2, r3, #16
 8006176:	d109      	bne.n	800618c <_strtol_l.constprop.0+0x54>
 8006178:	2c30      	cmp	r4, #48	@ 0x30
 800617a:	d12a      	bne.n	80061d2 <_strtol_l.constprop.0+0x9a>
 800617c:	782a      	ldrb	r2, [r5, #0]
 800617e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006182:	2a58      	cmp	r2, #88	@ 0x58
 8006184:	d125      	bne.n	80061d2 <_strtol_l.constprop.0+0x9a>
 8006186:	786c      	ldrb	r4, [r5, #1]
 8006188:	2310      	movs	r3, #16
 800618a:	3502      	adds	r5, #2
 800618c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006190:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8006194:	2200      	movs	r2, #0
 8006196:	fbbc f9f3 	udiv	r9, ip, r3
 800619a:	4610      	mov	r0, r2
 800619c:	fb03 ca19 	mls	sl, r3, r9, ip
 80061a0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80061a4:	2f09      	cmp	r7, #9
 80061a6:	d81b      	bhi.n	80061e0 <_strtol_l.constprop.0+0xa8>
 80061a8:	463c      	mov	r4, r7
 80061aa:	42a3      	cmp	r3, r4
 80061ac:	dd27      	ble.n	80061fe <_strtol_l.constprop.0+0xc6>
 80061ae:	1c57      	adds	r7, r2, #1
 80061b0:	d007      	beq.n	80061c2 <_strtol_l.constprop.0+0x8a>
 80061b2:	4581      	cmp	r9, r0
 80061b4:	d320      	bcc.n	80061f8 <_strtol_l.constprop.0+0xc0>
 80061b6:	d101      	bne.n	80061bc <_strtol_l.constprop.0+0x84>
 80061b8:	45a2      	cmp	sl, r4
 80061ba:	db1d      	blt.n	80061f8 <_strtol_l.constprop.0+0xc0>
 80061bc:	fb00 4003 	mla	r0, r0, r3, r4
 80061c0:	2201      	movs	r2, #1
 80061c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061c6:	e7eb      	b.n	80061a0 <_strtol_l.constprop.0+0x68>
 80061c8:	2c2b      	cmp	r4, #43	@ 0x2b
 80061ca:	bf04      	itt	eq
 80061cc:	782c      	ldrbeq	r4, [r5, #0]
 80061ce:	1c95      	addeq	r5, r2, #2
 80061d0:	e7cf      	b.n	8006172 <_strtol_l.constprop.0+0x3a>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1da      	bne.n	800618c <_strtol_l.constprop.0+0x54>
 80061d6:	2c30      	cmp	r4, #48	@ 0x30
 80061d8:	bf0c      	ite	eq
 80061da:	2308      	moveq	r3, #8
 80061dc:	230a      	movne	r3, #10
 80061de:	e7d5      	b.n	800618c <_strtol_l.constprop.0+0x54>
 80061e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80061e4:	2f19      	cmp	r7, #25
 80061e6:	d801      	bhi.n	80061ec <_strtol_l.constprop.0+0xb4>
 80061e8:	3c37      	subs	r4, #55	@ 0x37
 80061ea:	e7de      	b.n	80061aa <_strtol_l.constprop.0+0x72>
 80061ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80061f0:	2f19      	cmp	r7, #25
 80061f2:	d804      	bhi.n	80061fe <_strtol_l.constprop.0+0xc6>
 80061f4:	3c57      	subs	r4, #87	@ 0x57
 80061f6:	e7d8      	b.n	80061aa <_strtol_l.constprop.0+0x72>
 80061f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80061fc:	e7e1      	b.n	80061c2 <_strtol_l.constprop.0+0x8a>
 80061fe:	1c53      	adds	r3, r2, #1
 8006200:	d108      	bne.n	8006214 <_strtol_l.constprop.0+0xdc>
 8006202:	2322      	movs	r3, #34	@ 0x22
 8006204:	f8ce 3000 	str.w	r3, [lr]
 8006208:	4660      	mov	r0, ip
 800620a:	f1b8 0f00 	cmp.w	r8, #0
 800620e:	d0a0      	beq.n	8006152 <_strtol_l.constprop.0+0x1a>
 8006210:	1e69      	subs	r1, r5, #1
 8006212:	e006      	b.n	8006222 <_strtol_l.constprop.0+0xea>
 8006214:	b106      	cbz	r6, 8006218 <_strtol_l.constprop.0+0xe0>
 8006216:	4240      	negs	r0, r0
 8006218:	f1b8 0f00 	cmp.w	r8, #0
 800621c:	d099      	beq.n	8006152 <_strtol_l.constprop.0+0x1a>
 800621e:	2a00      	cmp	r2, #0
 8006220:	d1f6      	bne.n	8006210 <_strtol_l.constprop.0+0xd8>
 8006222:	f8c8 1000 	str.w	r1, [r8]
 8006226:	e794      	b.n	8006152 <_strtol_l.constprop.0+0x1a>
 8006228:	080072f5 	.word	0x080072f5

0800622c <_strtol_r>:
 800622c:	f7ff bf84 	b.w	8006138 <_strtol_l.constprop.0>

08006230 <strtol>:
 8006230:	4613      	mov	r3, r2
 8006232:	460a      	mov	r2, r1
 8006234:	4601      	mov	r1, r0
 8006236:	4802      	ldr	r0, [pc, #8]	@ (8006240 <strtol+0x10>)
 8006238:	6800      	ldr	r0, [r0, #0]
 800623a:	f7ff bf7d 	b.w	8006138 <_strtol_l.constprop.0>
 800623e:	bf00      	nop
 8006240:	20000078 	.word	0x20000078

08006244 <_fwalk_sglue>:
 8006244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006248:	4607      	mov	r7, r0
 800624a:	4688      	mov	r8, r1
 800624c:	4614      	mov	r4, r2
 800624e:	2600      	movs	r6, #0
 8006250:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006254:	f1b9 0901 	subs.w	r9, r9, #1
 8006258:	d505      	bpl.n	8006266 <_fwalk_sglue+0x22>
 800625a:	6824      	ldr	r4, [r4, #0]
 800625c:	2c00      	cmp	r4, #0
 800625e:	d1f7      	bne.n	8006250 <_fwalk_sglue+0xc>
 8006260:	4630      	mov	r0, r6
 8006262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006266:	89ab      	ldrh	r3, [r5, #12]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d907      	bls.n	800627c <_fwalk_sglue+0x38>
 800626c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006270:	3301      	adds	r3, #1
 8006272:	d003      	beq.n	800627c <_fwalk_sglue+0x38>
 8006274:	4629      	mov	r1, r5
 8006276:	4638      	mov	r0, r7
 8006278:	47c0      	blx	r8
 800627a:	4306      	orrs	r6, r0
 800627c:	3568      	adds	r5, #104	@ 0x68
 800627e:	e7e9      	b.n	8006254 <_fwalk_sglue+0x10>

08006280 <_puts_r>:
 8006280:	6a03      	ldr	r3, [r0, #32]
 8006282:	b570      	push	{r4, r5, r6, lr}
 8006284:	6884      	ldr	r4, [r0, #8]
 8006286:	4605      	mov	r5, r0
 8006288:	460e      	mov	r6, r1
 800628a:	b90b      	cbnz	r3, 8006290 <_puts_r+0x10>
 800628c:	f7ff ff3c 	bl	8006108 <__sinit>
 8006290:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006292:	07db      	lsls	r3, r3, #31
 8006294:	d405      	bmi.n	80062a2 <_puts_r+0x22>
 8006296:	89a3      	ldrh	r3, [r4, #12]
 8006298:	0598      	lsls	r0, r3, #22
 800629a:	d402      	bmi.n	80062a2 <_puts_r+0x22>
 800629c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800629e:	f000 f8c6 	bl	800642e <__retarget_lock_acquire_recursive>
 80062a2:	89a3      	ldrh	r3, [r4, #12]
 80062a4:	0719      	lsls	r1, r3, #28
 80062a6:	d502      	bpl.n	80062ae <_puts_r+0x2e>
 80062a8:	6923      	ldr	r3, [r4, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d135      	bne.n	800631a <_puts_r+0x9a>
 80062ae:	4621      	mov	r1, r4
 80062b0:	4628      	mov	r0, r5
 80062b2:	f000 fecd 	bl	8007050 <__swsetup_r>
 80062b6:	b380      	cbz	r0, 800631a <_puts_r+0x9a>
 80062b8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80062bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062be:	07da      	lsls	r2, r3, #31
 80062c0:	d405      	bmi.n	80062ce <_puts_r+0x4e>
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	059b      	lsls	r3, r3, #22
 80062c6:	d402      	bmi.n	80062ce <_puts_r+0x4e>
 80062c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062ca:	f000 f8b1 	bl	8006430 <__retarget_lock_release_recursive>
 80062ce:	4628      	mov	r0, r5
 80062d0:	bd70      	pop	{r4, r5, r6, pc}
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	da04      	bge.n	80062e0 <_puts_r+0x60>
 80062d6:	69a2      	ldr	r2, [r4, #24]
 80062d8:	429a      	cmp	r2, r3
 80062da:	dc17      	bgt.n	800630c <_puts_r+0x8c>
 80062dc:	290a      	cmp	r1, #10
 80062de:	d015      	beq.n	800630c <_puts_r+0x8c>
 80062e0:	6823      	ldr	r3, [r4, #0]
 80062e2:	1c5a      	adds	r2, r3, #1
 80062e4:	6022      	str	r2, [r4, #0]
 80062e6:	7019      	strb	r1, [r3, #0]
 80062e8:	68a3      	ldr	r3, [r4, #8]
 80062ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062ee:	3b01      	subs	r3, #1
 80062f0:	60a3      	str	r3, [r4, #8]
 80062f2:	2900      	cmp	r1, #0
 80062f4:	d1ed      	bne.n	80062d2 <_puts_r+0x52>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	da11      	bge.n	800631e <_puts_r+0x9e>
 80062fa:	4622      	mov	r2, r4
 80062fc:	210a      	movs	r1, #10
 80062fe:	4628      	mov	r0, r5
 8006300:	f000 fe68 	bl	8006fd4 <__swbuf_r>
 8006304:	3001      	adds	r0, #1
 8006306:	d0d7      	beq.n	80062b8 <_puts_r+0x38>
 8006308:	250a      	movs	r5, #10
 800630a:	e7d7      	b.n	80062bc <_puts_r+0x3c>
 800630c:	4622      	mov	r2, r4
 800630e:	4628      	mov	r0, r5
 8006310:	f000 fe60 	bl	8006fd4 <__swbuf_r>
 8006314:	3001      	adds	r0, #1
 8006316:	d1e7      	bne.n	80062e8 <_puts_r+0x68>
 8006318:	e7ce      	b.n	80062b8 <_puts_r+0x38>
 800631a:	3e01      	subs	r6, #1
 800631c:	e7e4      	b.n	80062e8 <_puts_r+0x68>
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	1c5a      	adds	r2, r3, #1
 8006322:	6022      	str	r2, [r4, #0]
 8006324:	220a      	movs	r2, #10
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	e7ee      	b.n	8006308 <_puts_r+0x88>
	...

0800632c <puts>:
 800632c:	4b02      	ldr	r3, [pc, #8]	@ (8006338 <puts+0xc>)
 800632e:	4601      	mov	r1, r0
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	f7ff bfa5 	b.w	8006280 <_puts_r>
 8006336:	bf00      	nop
 8006338:	20000078 	.word	0x20000078

0800633c <memset>:
 800633c:	4402      	add	r2, r0
 800633e:	4603      	mov	r3, r0
 8006340:	4293      	cmp	r3, r2
 8006342:	d100      	bne.n	8006346 <memset+0xa>
 8006344:	4770      	bx	lr
 8006346:	f803 1b01 	strb.w	r1, [r3], #1
 800634a:	e7f9      	b.n	8006340 <memset+0x4>

0800634c <_close_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4d06      	ldr	r5, [pc, #24]	@ (8006368 <_close_r+0x1c>)
 8006350:	2300      	movs	r3, #0
 8006352:	4604      	mov	r4, r0
 8006354:	4608      	mov	r0, r1
 8006356:	602b      	str	r3, [r5, #0]
 8006358:	f7fb fa78 	bl	800184c <_close>
 800635c:	1c43      	adds	r3, r0, #1
 800635e:	d102      	bne.n	8006366 <_close_r+0x1a>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	b103      	cbz	r3, 8006366 <_close_r+0x1a>
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	bd38      	pop	{r3, r4, r5, pc}
 8006368:	2000059c 	.word	0x2000059c

0800636c <_lseek_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	4d07      	ldr	r5, [pc, #28]	@ (800638c <_lseek_r+0x20>)
 8006370:	4604      	mov	r4, r0
 8006372:	4608      	mov	r0, r1
 8006374:	4611      	mov	r1, r2
 8006376:	2200      	movs	r2, #0
 8006378:	602a      	str	r2, [r5, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	f7fb fa8d 	bl	800189a <_lseek>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d102      	bne.n	800638a <_lseek_r+0x1e>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	b103      	cbz	r3, 800638a <_lseek_r+0x1e>
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	2000059c 	.word	0x2000059c

08006390 <_read_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4d07      	ldr	r5, [pc, #28]	@ (80063b0 <_read_r+0x20>)
 8006394:	4604      	mov	r4, r0
 8006396:	4608      	mov	r0, r1
 8006398:	4611      	mov	r1, r2
 800639a:	2200      	movs	r2, #0
 800639c:	602a      	str	r2, [r5, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	f7fb fa1b 	bl	80017da <_read>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	d102      	bne.n	80063ae <_read_r+0x1e>
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	b103      	cbz	r3, 80063ae <_read_r+0x1e>
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	bd38      	pop	{r3, r4, r5, pc}
 80063b0:	2000059c 	.word	0x2000059c

080063b4 <_write_r>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	4d07      	ldr	r5, [pc, #28]	@ (80063d4 <_write_r+0x20>)
 80063b8:	4604      	mov	r4, r0
 80063ba:	4608      	mov	r0, r1
 80063bc:	4611      	mov	r1, r2
 80063be:	2200      	movs	r2, #0
 80063c0:	602a      	str	r2, [r5, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	f7fb fa26 	bl	8001814 <_write>
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	d102      	bne.n	80063d2 <_write_r+0x1e>
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	b103      	cbz	r3, 80063d2 <_write_r+0x1e>
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	bd38      	pop	{r3, r4, r5, pc}
 80063d4:	2000059c 	.word	0x2000059c

080063d8 <__errno>:
 80063d8:	4b01      	ldr	r3, [pc, #4]	@ (80063e0 <__errno+0x8>)
 80063da:	6818      	ldr	r0, [r3, #0]
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	20000078 	.word	0x20000078

080063e4 <__libc_init_array>:
 80063e4:	b570      	push	{r4, r5, r6, lr}
 80063e6:	4d0d      	ldr	r5, [pc, #52]	@ (800641c <__libc_init_array+0x38>)
 80063e8:	4c0d      	ldr	r4, [pc, #52]	@ (8006420 <__libc_init_array+0x3c>)
 80063ea:	1b64      	subs	r4, r4, r5
 80063ec:	10a4      	asrs	r4, r4, #2
 80063ee:	2600      	movs	r6, #0
 80063f0:	42a6      	cmp	r6, r4
 80063f2:	d109      	bne.n	8006408 <__libc_init_array+0x24>
 80063f4:	4d0b      	ldr	r5, [pc, #44]	@ (8006424 <__libc_init_array+0x40>)
 80063f6:	4c0c      	ldr	r4, [pc, #48]	@ (8006428 <__libc_init_array+0x44>)
 80063f8:	f000 ff2a 	bl	8007250 <_init>
 80063fc:	1b64      	subs	r4, r4, r5
 80063fe:	10a4      	asrs	r4, r4, #2
 8006400:	2600      	movs	r6, #0
 8006402:	42a6      	cmp	r6, r4
 8006404:	d105      	bne.n	8006412 <__libc_init_array+0x2e>
 8006406:	bd70      	pop	{r4, r5, r6, pc}
 8006408:	f855 3b04 	ldr.w	r3, [r5], #4
 800640c:	4798      	blx	r3
 800640e:	3601      	adds	r6, #1
 8006410:	e7ee      	b.n	80063f0 <__libc_init_array+0xc>
 8006412:	f855 3b04 	ldr.w	r3, [r5], #4
 8006416:	4798      	blx	r3
 8006418:	3601      	adds	r6, #1
 800641a:	e7f2      	b.n	8006402 <__libc_init_array+0x1e>
 800641c:	0800741c 	.word	0x0800741c
 8006420:	0800741c 	.word	0x0800741c
 8006424:	0800741c 	.word	0x0800741c
 8006428:	08007420 	.word	0x08007420

0800642c <__retarget_lock_init_recursive>:
 800642c:	4770      	bx	lr

0800642e <__retarget_lock_acquire_recursive>:
 800642e:	4770      	bx	lr

08006430 <__retarget_lock_release_recursive>:
 8006430:	4770      	bx	lr
	...

08006434 <_free_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	4605      	mov	r5, r0
 8006438:	2900      	cmp	r1, #0
 800643a:	d041      	beq.n	80064c0 <_free_r+0x8c>
 800643c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006440:	1f0c      	subs	r4, r1, #4
 8006442:	2b00      	cmp	r3, #0
 8006444:	bfb8      	it	lt
 8006446:	18e4      	addlt	r4, r4, r3
 8006448:	f000 fce0 	bl	8006e0c <__malloc_lock>
 800644c:	4a1d      	ldr	r2, [pc, #116]	@ (80064c4 <_free_r+0x90>)
 800644e:	6813      	ldr	r3, [r2, #0]
 8006450:	b933      	cbnz	r3, 8006460 <_free_r+0x2c>
 8006452:	6063      	str	r3, [r4, #4]
 8006454:	6014      	str	r4, [r2, #0]
 8006456:	4628      	mov	r0, r5
 8006458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800645c:	f000 bcdc 	b.w	8006e18 <__malloc_unlock>
 8006460:	42a3      	cmp	r3, r4
 8006462:	d908      	bls.n	8006476 <_free_r+0x42>
 8006464:	6820      	ldr	r0, [r4, #0]
 8006466:	1821      	adds	r1, r4, r0
 8006468:	428b      	cmp	r3, r1
 800646a:	bf01      	itttt	eq
 800646c:	6819      	ldreq	r1, [r3, #0]
 800646e:	685b      	ldreq	r3, [r3, #4]
 8006470:	1809      	addeq	r1, r1, r0
 8006472:	6021      	streq	r1, [r4, #0]
 8006474:	e7ed      	b.n	8006452 <_free_r+0x1e>
 8006476:	461a      	mov	r2, r3
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	b10b      	cbz	r3, 8006480 <_free_r+0x4c>
 800647c:	42a3      	cmp	r3, r4
 800647e:	d9fa      	bls.n	8006476 <_free_r+0x42>
 8006480:	6811      	ldr	r1, [r2, #0]
 8006482:	1850      	adds	r0, r2, r1
 8006484:	42a0      	cmp	r0, r4
 8006486:	d10b      	bne.n	80064a0 <_free_r+0x6c>
 8006488:	6820      	ldr	r0, [r4, #0]
 800648a:	4401      	add	r1, r0
 800648c:	1850      	adds	r0, r2, r1
 800648e:	4283      	cmp	r3, r0
 8006490:	6011      	str	r1, [r2, #0]
 8006492:	d1e0      	bne.n	8006456 <_free_r+0x22>
 8006494:	6818      	ldr	r0, [r3, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	6053      	str	r3, [r2, #4]
 800649a:	4408      	add	r0, r1
 800649c:	6010      	str	r0, [r2, #0]
 800649e:	e7da      	b.n	8006456 <_free_r+0x22>
 80064a0:	d902      	bls.n	80064a8 <_free_r+0x74>
 80064a2:	230c      	movs	r3, #12
 80064a4:	602b      	str	r3, [r5, #0]
 80064a6:	e7d6      	b.n	8006456 <_free_r+0x22>
 80064a8:	6820      	ldr	r0, [r4, #0]
 80064aa:	1821      	adds	r1, r4, r0
 80064ac:	428b      	cmp	r3, r1
 80064ae:	bf04      	itt	eq
 80064b0:	6819      	ldreq	r1, [r3, #0]
 80064b2:	685b      	ldreq	r3, [r3, #4]
 80064b4:	6063      	str	r3, [r4, #4]
 80064b6:	bf04      	itt	eq
 80064b8:	1809      	addeq	r1, r1, r0
 80064ba:	6021      	streq	r1, [r4, #0]
 80064bc:	6054      	str	r4, [r2, #4]
 80064be:	e7ca      	b.n	8006456 <_free_r+0x22>
 80064c0:	bd38      	pop	{r3, r4, r5, pc}
 80064c2:	bf00      	nop
 80064c4:	200005a8 	.word	0x200005a8

080064c8 <_sungetc_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	1c4b      	adds	r3, r1, #1
 80064cc:	4614      	mov	r4, r2
 80064ce:	d103      	bne.n	80064d8 <_sungetc_r+0x10>
 80064d0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80064d4:	4628      	mov	r0, r5
 80064d6:	bd38      	pop	{r3, r4, r5, pc}
 80064d8:	8993      	ldrh	r3, [r2, #12]
 80064da:	f023 0320 	bic.w	r3, r3, #32
 80064de:	8193      	strh	r3, [r2, #12]
 80064e0:	6853      	ldr	r3, [r2, #4]
 80064e2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80064e4:	b2cd      	uxtb	r5, r1
 80064e6:	b18a      	cbz	r2, 800650c <_sungetc_r+0x44>
 80064e8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80064ea:	429a      	cmp	r2, r3
 80064ec:	dd08      	ble.n	8006500 <_sungetc_r+0x38>
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	1e5a      	subs	r2, r3, #1
 80064f2:	6022      	str	r2, [r4, #0]
 80064f4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80064f8:	6863      	ldr	r3, [r4, #4]
 80064fa:	3301      	adds	r3, #1
 80064fc:	6063      	str	r3, [r4, #4]
 80064fe:	e7e9      	b.n	80064d4 <_sungetc_r+0xc>
 8006500:	4621      	mov	r1, r4
 8006502:	f000 fc8f 	bl	8006e24 <__submore>
 8006506:	2800      	cmp	r0, #0
 8006508:	d0f1      	beq.n	80064ee <_sungetc_r+0x26>
 800650a:	e7e1      	b.n	80064d0 <_sungetc_r+0x8>
 800650c:	6921      	ldr	r1, [r4, #16]
 800650e:	6822      	ldr	r2, [r4, #0]
 8006510:	b141      	cbz	r1, 8006524 <_sungetc_r+0x5c>
 8006512:	4291      	cmp	r1, r2
 8006514:	d206      	bcs.n	8006524 <_sungetc_r+0x5c>
 8006516:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800651a:	42a9      	cmp	r1, r5
 800651c:	d102      	bne.n	8006524 <_sungetc_r+0x5c>
 800651e:	3a01      	subs	r2, #1
 8006520:	6022      	str	r2, [r4, #0]
 8006522:	e7ea      	b.n	80064fa <_sungetc_r+0x32>
 8006524:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8006528:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800652c:	6363      	str	r3, [r4, #52]	@ 0x34
 800652e:	2303      	movs	r3, #3
 8006530:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006532:	4623      	mov	r3, r4
 8006534:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	2301      	movs	r3, #1
 800653c:	e7de      	b.n	80064fc <_sungetc_r+0x34>

0800653e <__ssrefill_r>:
 800653e:	b510      	push	{r4, lr}
 8006540:	460c      	mov	r4, r1
 8006542:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006544:	b169      	cbz	r1, 8006562 <__ssrefill_r+0x24>
 8006546:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800654a:	4299      	cmp	r1, r3
 800654c:	d001      	beq.n	8006552 <__ssrefill_r+0x14>
 800654e:	f7ff ff71 	bl	8006434 <_free_r>
 8006552:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006554:	6063      	str	r3, [r4, #4]
 8006556:	2000      	movs	r0, #0
 8006558:	6360      	str	r0, [r4, #52]	@ 0x34
 800655a:	b113      	cbz	r3, 8006562 <__ssrefill_r+0x24>
 800655c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800655e:	6023      	str	r3, [r4, #0]
 8006560:	bd10      	pop	{r4, pc}
 8006562:	6923      	ldr	r3, [r4, #16]
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	2300      	movs	r3, #0
 8006568:	6063      	str	r3, [r4, #4]
 800656a:	89a3      	ldrh	r3, [r4, #12]
 800656c:	f043 0320 	orr.w	r3, r3, #32
 8006570:	81a3      	strh	r3, [r4, #12]
 8006572:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006576:	e7f3      	b.n	8006560 <__ssrefill_r+0x22>

08006578 <__ssvfiscanf_r>:
 8006578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800657c:	460c      	mov	r4, r1
 800657e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8006582:	2100      	movs	r1, #0
 8006584:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8006588:	49a5      	ldr	r1, [pc, #660]	@ (8006820 <__ssvfiscanf_r+0x2a8>)
 800658a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800658c:	f10d 0804 	add.w	r8, sp, #4
 8006590:	49a4      	ldr	r1, [pc, #656]	@ (8006824 <__ssvfiscanf_r+0x2ac>)
 8006592:	4fa5      	ldr	r7, [pc, #660]	@ (8006828 <__ssvfiscanf_r+0x2b0>)
 8006594:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8006598:	4606      	mov	r6, r0
 800659a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	7813      	ldrb	r3, [r2, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 8158 	beq.w	8006856 <__ssvfiscanf_r+0x2de>
 80065a6:	5cf9      	ldrb	r1, [r7, r3]
 80065a8:	f011 0108 	ands.w	r1, r1, #8
 80065ac:	f102 0501 	add.w	r5, r2, #1
 80065b0:	d019      	beq.n	80065e6 <__ssvfiscanf_r+0x6e>
 80065b2:	6863      	ldr	r3, [r4, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	dd0f      	ble.n	80065d8 <__ssvfiscanf_r+0x60>
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	781a      	ldrb	r2, [r3, #0]
 80065bc:	5cba      	ldrb	r2, [r7, r2]
 80065be:	0712      	lsls	r2, r2, #28
 80065c0:	d401      	bmi.n	80065c6 <__ssvfiscanf_r+0x4e>
 80065c2:	462a      	mov	r2, r5
 80065c4:	e7eb      	b.n	800659e <__ssvfiscanf_r+0x26>
 80065c6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80065c8:	3201      	adds	r2, #1
 80065ca:	9245      	str	r2, [sp, #276]	@ 0x114
 80065cc:	6862      	ldr	r2, [r4, #4]
 80065ce:	3301      	adds	r3, #1
 80065d0:	3a01      	subs	r2, #1
 80065d2:	6062      	str	r2, [r4, #4]
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	e7ec      	b.n	80065b2 <__ssvfiscanf_r+0x3a>
 80065d8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80065da:	4621      	mov	r1, r4
 80065dc:	4630      	mov	r0, r6
 80065de:	4798      	blx	r3
 80065e0:	2800      	cmp	r0, #0
 80065e2:	d0e9      	beq.n	80065b8 <__ssvfiscanf_r+0x40>
 80065e4:	e7ed      	b.n	80065c2 <__ssvfiscanf_r+0x4a>
 80065e6:	2b25      	cmp	r3, #37	@ 0x25
 80065e8:	d012      	beq.n	8006610 <__ssvfiscanf_r+0x98>
 80065ea:	4699      	mov	r9, r3
 80065ec:	6863      	ldr	r3, [r4, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f340 8093 	ble.w	800671a <__ssvfiscanf_r+0x1a2>
 80065f4:	6822      	ldr	r2, [r4, #0]
 80065f6:	7813      	ldrb	r3, [r2, #0]
 80065f8:	454b      	cmp	r3, r9
 80065fa:	f040 812c 	bne.w	8006856 <__ssvfiscanf_r+0x2de>
 80065fe:	6863      	ldr	r3, [r4, #4]
 8006600:	3b01      	subs	r3, #1
 8006602:	6063      	str	r3, [r4, #4]
 8006604:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8006606:	3201      	adds	r2, #1
 8006608:	3301      	adds	r3, #1
 800660a:	6022      	str	r2, [r4, #0]
 800660c:	9345      	str	r3, [sp, #276]	@ 0x114
 800660e:	e7d8      	b.n	80065c2 <__ssvfiscanf_r+0x4a>
 8006610:	9141      	str	r1, [sp, #260]	@ 0x104
 8006612:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006614:	7853      	ldrb	r3, [r2, #1]
 8006616:	2b2a      	cmp	r3, #42	@ 0x2a
 8006618:	bf02      	ittt	eq
 800661a:	2310      	moveq	r3, #16
 800661c:	1c95      	addeq	r5, r2, #2
 800661e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8006620:	220a      	movs	r2, #10
 8006622:	46a9      	mov	r9, r5
 8006624:	f819 1b01 	ldrb.w	r1, [r9], #1
 8006628:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800662c:	2b09      	cmp	r3, #9
 800662e:	d91e      	bls.n	800666e <__ssvfiscanf_r+0xf6>
 8006630:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800682c <__ssvfiscanf_r+0x2b4>
 8006634:	2203      	movs	r2, #3
 8006636:	4650      	mov	r0, sl
 8006638:	f7f9 fdd2 	bl	80001e0 <memchr>
 800663c:	b138      	cbz	r0, 800664e <__ssvfiscanf_r+0xd6>
 800663e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006640:	eba0 000a 	sub.w	r0, r0, sl
 8006644:	2301      	movs	r3, #1
 8006646:	4083      	lsls	r3, r0
 8006648:	4313      	orrs	r3, r2
 800664a:	9341      	str	r3, [sp, #260]	@ 0x104
 800664c:	464d      	mov	r5, r9
 800664e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006652:	2b78      	cmp	r3, #120	@ 0x78
 8006654:	d806      	bhi.n	8006664 <__ssvfiscanf_r+0xec>
 8006656:	2b57      	cmp	r3, #87	@ 0x57
 8006658:	d810      	bhi.n	800667c <__ssvfiscanf_r+0x104>
 800665a:	2b25      	cmp	r3, #37	@ 0x25
 800665c:	d0c5      	beq.n	80065ea <__ssvfiscanf_r+0x72>
 800665e:	d857      	bhi.n	8006710 <__ssvfiscanf_r+0x198>
 8006660:	2b00      	cmp	r3, #0
 8006662:	d065      	beq.n	8006730 <__ssvfiscanf_r+0x1b8>
 8006664:	2303      	movs	r3, #3
 8006666:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006668:	230a      	movs	r3, #10
 800666a:	9342      	str	r3, [sp, #264]	@ 0x108
 800666c:	e078      	b.n	8006760 <__ssvfiscanf_r+0x1e8>
 800666e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006670:	fb02 1103 	mla	r1, r2, r3, r1
 8006674:	3930      	subs	r1, #48	@ 0x30
 8006676:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006678:	464d      	mov	r5, r9
 800667a:	e7d2      	b.n	8006622 <__ssvfiscanf_r+0xaa>
 800667c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006680:	2a20      	cmp	r2, #32
 8006682:	d8ef      	bhi.n	8006664 <__ssvfiscanf_r+0xec>
 8006684:	a101      	add	r1, pc, #4	@ (adr r1, 800668c <__ssvfiscanf_r+0x114>)
 8006686:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800668a:	bf00      	nop
 800668c:	0800673f 	.word	0x0800673f
 8006690:	08006665 	.word	0x08006665
 8006694:	08006665 	.word	0x08006665
 8006698:	08006799 	.word	0x08006799
 800669c:	08006665 	.word	0x08006665
 80066a0:	08006665 	.word	0x08006665
 80066a4:	08006665 	.word	0x08006665
 80066a8:	08006665 	.word	0x08006665
 80066ac:	08006665 	.word	0x08006665
 80066b0:	08006665 	.word	0x08006665
 80066b4:	08006665 	.word	0x08006665
 80066b8:	080067af 	.word	0x080067af
 80066bc:	08006795 	.word	0x08006795
 80066c0:	08006717 	.word	0x08006717
 80066c4:	08006717 	.word	0x08006717
 80066c8:	08006717 	.word	0x08006717
 80066cc:	08006665 	.word	0x08006665
 80066d0:	08006751 	.word	0x08006751
 80066d4:	08006665 	.word	0x08006665
 80066d8:	08006665 	.word	0x08006665
 80066dc:	08006665 	.word	0x08006665
 80066e0:	08006665 	.word	0x08006665
 80066e4:	080067bf 	.word	0x080067bf
 80066e8:	08006759 	.word	0x08006759
 80066ec:	08006737 	.word	0x08006737
 80066f0:	08006665 	.word	0x08006665
 80066f4:	08006665 	.word	0x08006665
 80066f8:	080067bb 	.word	0x080067bb
 80066fc:	08006665 	.word	0x08006665
 8006700:	08006795 	.word	0x08006795
 8006704:	08006665 	.word	0x08006665
 8006708:	08006665 	.word	0x08006665
 800670c:	0800673f 	.word	0x0800673f
 8006710:	3b45      	subs	r3, #69	@ 0x45
 8006712:	2b02      	cmp	r3, #2
 8006714:	d8a6      	bhi.n	8006664 <__ssvfiscanf_r+0xec>
 8006716:	2305      	movs	r3, #5
 8006718:	e021      	b.n	800675e <__ssvfiscanf_r+0x1e6>
 800671a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800671c:	4621      	mov	r1, r4
 800671e:	4630      	mov	r0, r6
 8006720:	4798      	blx	r3
 8006722:	2800      	cmp	r0, #0
 8006724:	f43f af66 	beq.w	80065f4 <__ssvfiscanf_r+0x7c>
 8006728:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800672a:	2800      	cmp	r0, #0
 800672c:	f040 808b 	bne.w	8006846 <__ssvfiscanf_r+0x2ce>
 8006730:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006734:	e08b      	b.n	800684e <__ssvfiscanf_r+0x2d6>
 8006736:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006738:	f042 0220 	orr.w	r2, r2, #32
 800673c:	9241      	str	r2, [sp, #260]	@ 0x104
 800673e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006740:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006744:	9241      	str	r2, [sp, #260]	@ 0x104
 8006746:	2210      	movs	r2, #16
 8006748:	2b6e      	cmp	r3, #110	@ 0x6e
 800674a:	9242      	str	r2, [sp, #264]	@ 0x108
 800674c:	d902      	bls.n	8006754 <__ssvfiscanf_r+0x1dc>
 800674e:	e005      	b.n	800675c <__ssvfiscanf_r+0x1e4>
 8006750:	2300      	movs	r3, #0
 8006752:	9342      	str	r3, [sp, #264]	@ 0x108
 8006754:	2303      	movs	r3, #3
 8006756:	e002      	b.n	800675e <__ssvfiscanf_r+0x1e6>
 8006758:	2308      	movs	r3, #8
 800675a:	9342      	str	r3, [sp, #264]	@ 0x108
 800675c:	2304      	movs	r3, #4
 800675e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006760:	6863      	ldr	r3, [r4, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	dd39      	ble.n	80067da <__ssvfiscanf_r+0x262>
 8006766:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006768:	0659      	lsls	r1, r3, #25
 800676a:	d404      	bmi.n	8006776 <__ssvfiscanf_r+0x1fe>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	781a      	ldrb	r2, [r3, #0]
 8006770:	5cba      	ldrb	r2, [r7, r2]
 8006772:	0712      	lsls	r2, r2, #28
 8006774:	d438      	bmi.n	80067e8 <__ssvfiscanf_r+0x270>
 8006776:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8006778:	2b02      	cmp	r3, #2
 800677a:	dc47      	bgt.n	800680c <__ssvfiscanf_r+0x294>
 800677c:	466b      	mov	r3, sp
 800677e:	4622      	mov	r2, r4
 8006780:	a941      	add	r1, sp, #260	@ 0x104
 8006782:	4630      	mov	r0, r6
 8006784:	f000 f90e 	bl	80069a4 <_scanf_chars>
 8006788:	2801      	cmp	r0, #1
 800678a:	d064      	beq.n	8006856 <__ssvfiscanf_r+0x2de>
 800678c:	2802      	cmp	r0, #2
 800678e:	f47f af18 	bne.w	80065c2 <__ssvfiscanf_r+0x4a>
 8006792:	e7c9      	b.n	8006728 <__ssvfiscanf_r+0x1b0>
 8006794:	220a      	movs	r2, #10
 8006796:	e7d7      	b.n	8006748 <__ssvfiscanf_r+0x1d0>
 8006798:	4629      	mov	r1, r5
 800679a:	4640      	mov	r0, r8
 800679c:	f000 fa50 	bl	8006c40 <__sccl>
 80067a0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80067a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067a6:	9341      	str	r3, [sp, #260]	@ 0x104
 80067a8:	4605      	mov	r5, r0
 80067aa:	2301      	movs	r3, #1
 80067ac:	e7d7      	b.n	800675e <__ssvfiscanf_r+0x1e6>
 80067ae:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80067b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067b4:	9341      	str	r3, [sp, #260]	@ 0x104
 80067b6:	2300      	movs	r3, #0
 80067b8:	e7d1      	b.n	800675e <__ssvfiscanf_r+0x1e6>
 80067ba:	2302      	movs	r3, #2
 80067bc:	e7cf      	b.n	800675e <__ssvfiscanf_r+0x1e6>
 80067be:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80067c0:	06c3      	lsls	r3, r0, #27
 80067c2:	f53f aefe 	bmi.w	80065c2 <__ssvfiscanf_r+0x4a>
 80067c6:	9b00      	ldr	r3, [sp, #0]
 80067c8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80067ca:	1d19      	adds	r1, r3, #4
 80067cc:	9100      	str	r1, [sp, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	07c0      	lsls	r0, r0, #31
 80067d2:	bf4c      	ite	mi
 80067d4:	801a      	strhmi	r2, [r3, #0]
 80067d6:	601a      	strpl	r2, [r3, #0]
 80067d8:	e6f3      	b.n	80065c2 <__ssvfiscanf_r+0x4a>
 80067da:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80067dc:	4621      	mov	r1, r4
 80067de:	4630      	mov	r0, r6
 80067e0:	4798      	blx	r3
 80067e2:	2800      	cmp	r0, #0
 80067e4:	d0bf      	beq.n	8006766 <__ssvfiscanf_r+0x1ee>
 80067e6:	e79f      	b.n	8006728 <__ssvfiscanf_r+0x1b0>
 80067e8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80067ea:	3201      	adds	r2, #1
 80067ec:	9245      	str	r2, [sp, #276]	@ 0x114
 80067ee:	6862      	ldr	r2, [r4, #4]
 80067f0:	3a01      	subs	r2, #1
 80067f2:	2a00      	cmp	r2, #0
 80067f4:	6062      	str	r2, [r4, #4]
 80067f6:	dd02      	ble.n	80067fe <__ssvfiscanf_r+0x286>
 80067f8:	3301      	adds	r3, #1
 80067fa:	6023      	str	r3, [r4, #0]
 80067fc:	e7b6      	b.n	800676c <__ssvfiscanf_r+0x1f4>
 80067fe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006800:	4621      	mov	r1, r4
 8006802:	4630      	mov	r0, r6
 8006804:	4798      	blx	r3
 8006806:	2800      	cmp	r0, #0
 8006808:	d0b0      	beq.n	800676c <__ssvfiscanf_r+0x1f4>
 800680a:	e78d      	b.n	8006728 <__ssvfiscanf_r+0x1b0>
 800680c:	2b04      	cmp	r3, #4
 800680e:	dc0f      	bgt.n	8006830 <__ssvfiscanf_r+0x2b8>
 8006810:	466b      	mov	r3, sp
 8006812:	4622      	mov	r2, r4
 8006814:	a941      	add	r1, sp, #260	@ 0x104
 8006816:	4630      	mov	r0, r6
 8006818:	f000 f91e 	bl	8006a58 <_scanf_i>
 800681c:	e7b4      	b.n	8006788 <__ssvfiscanf_r+0x210>
 800681e:	bf00      	nop
 8006820:	080064c9 	.word	0x080064c9
 8006824:	0800653f 	.word	0x0800653f
 8006828:	080072f5 	.word	0x080072f5
 800682c:	080073f5 	.word	0x080073f5
 8006830:	4b0a      	ldr	r3, [pc, #40]	@ (800685c <__ssvfiscanf_r+0x2e4>)
 8006832:	2b00      	cmp	r3, #0
 8006834:	f43f aec5 	beq.w	80065c2 <__ssvfiscanf_r+0x4a>
 8006838:	466b      	mov	r3, sp
 800683a:	4622      	mov	r2, r4
 800683c:	a941      	add	r1, sp, #260	@ 0x104
 800683e:	4630      	mov	r0, r6
 8006840:	f3af 8000 	nop.w
 8006844:	e7a0      	b.n	8006788 <__ssvfiscanf_r+0x210>
 8006846:	89a3      	ldrh	r3, [r4, #12]
 8006848:	065b      	lsls	r3, r3, #25
 800684a:	f53f af71 	bmi.w	8006730 <__ssvfiscanf_r+0x1b8>
 800684e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8006852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006856:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006858:	e7f9      	b.n	800684e <__ssvfiscanf_r+0x2d6>
 800685a:	bf00      	nop
 800685c:	00000000 	.word	0x00000000

08006860 <sbrk_aligned>:
 8006860:	b570      	push	{r4, r5, r6, lr}
 8006862:	4e0f      	ldr	r6, [pc, #60]	@ (80068a0 <sbrk_aligned+0x40>)
 8006864:	460c      	mov	r4, r1
 8006866:	6831      	ldr	r1, [r6, #0]
 8006868:	4605      	mov	r5, r0
 800686a:	b911      	cbnz	r1, 8006872 <sbrk_aligned+0x12>
 800686c:	f000 fcca 	bl	8007204 <_sbrk_r>
 8006870:	6030      	str	r0, [r6, #0]
 8006872:	4621      	mov	r1, r4
 8006874:	4628      	mov	r0, r5
 8006876:	f000 fcc5 	bl	8007204 <_sbrk_r>
 800687a:	1c43      	adds	r3, r0, #1
 800687c:	d103      	bne.n	8006886 <sbrk_aligned+0x26>
 800687e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006882:	4620      	mov	r0, r4
 8006884:	bd70      	pop	{r4, r5, r6, pc}
 8006886:	1cc4      	adds	r4, r0, #3
 8006888:	f024 0403 	bic.w	r4, r4, #3
 800688c:	42a0      	cmp	r0, r4
 800688e:	d0f8      	beq.n	8006882 <sbrk_aligned+0x22>
 8006890:	1a21      	subs	r1, r4, r0
 8006892:	4628      	mov	r0, r5
 8006894:	f000 fcb6 	bl	8007204 <_sbrk_r>
 8006898:	3001      	adds	r0, #1
 800689a:	d1f2      	bne.n	8006882 <sbrk_aligned+0x22>
 800689c:	e7ef      	b.n	800687e <sbrk_aligned+0x1e>
 800689e:	bf00      	nop
 80068a0:	200005a4 	.word	0x200005a4

080068a4 <_malloc_r>:
 80068a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068a8:	1ccd      	adds	r5, r1, #3
 80068aa:	f025 0503 	bic.w	r5, r5, #3
 80068ae:	3508      	adds	r5, #8
 80068b0:	2d0c      	cmp	r5, #12
 80068b2:	bf38      	it	cc
 80068b4:	250c      	movcc	r5, #12
 80068b6:	2d00      	cmp	r5, #0
 80068b8:	4606      	mov	r6, r0
 80068ba:	db01      	blt.n	80068c0 <_malloc_r+0x1c>
 80068bc:	42a9      	cmp	r1, r5
 80068be:	d904      	bls.n	80068ca <_malloc_r+0x26>
 80068c0:	230c      	movs	r3, #12
 80068c2:	6033      	str	r3, [r6, #0]
 80068c4:	2000      	movs	r0, #0
 80068c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069a0 <_malloc_r+0xfc>
 80068ce:	f000 fa9d 	bl	8006e0c <__malloc_lock>
 80068d2:	f8d8 3000 	ldr.w	r3, [r8]
 80068d6:	461c      	mov	r4, r3
 80068d8:	bb44      	cbnz	r4, 800692c <_malloc_r+0x88>
 80068da:	4629      	mov	r1, r5
 80068dc:	4630      	mov	r0, r6
 80068de:	f7ff ffbf 	bl	8006860 <sbrk_aligned>
 80068e2:	1c43      	adds	r3, r0, #1
 80068e4:	4604      	mov	r4, r0
 80068e6:	d158      	bne.n	800699a <_malloc_r+0xf6>
 80068e8:	f8d8 4000 	ldr.w	r4, [r8]
 80068ec:	4627      	mov	r7, r4
 80068ee:	2f00      	cmp	r7, #0
 80068f0:	d143      	bne.n	800697a <_malloc_r+0xd6>
 80068f2:	2c00      	cmp	r4, #0
 80068f4:	d04b      	beq.n	800698e <_malloc_r+0xea>
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	4639      	mov	r1, r7
 80068fa:	4630      	mov	r0, r6
 80068fc:	eb04 0903 	add.w	r9, r4, r3
 8006900:	f000 fc80 	bl	8007204 <_sbrk_r>
 8006904:	4581      	cmp	r9, r0
 8006906:	d142      	bne.n	800698e <_malloc_r+0xea>
 8006908:	6821      	ldr	r1, [r4, #0]
 800690a:	1a6d      	subs	r5, r5, r1
 800690c:	4629      	mov	r1, r5
 800690e:	4630      	mov	r0, r6
 8006910:	f7ff ffa6 	bl	8006860 <sbrk_aligned>
 8006914:	3001      	adds	r0, #1
 8006916:	d03a      	beq.n	800698e <_malloc_r+0xea>
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	442b      	add	r3, r5
 800691c:	6023      	str	r3, [r4, #0]
 800691e:	f8d8 3000 	ldr.w	r3, [r8]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	bb62      	cbnz	r2, 8006980 <_malloc_r+0xdc>
 8006926:	f8c8 7000 	str.w	r7, [r8]
 800692a:	e00f      	b.n	800694c <_malloc_r+0xa8>
 800692c:	6822      	ldr	r2, [r4, #0]
 800692e:	1b52      	subs	r2, r2, r5
 8006930:	d420      	bmi.n	8006974 <_malloc_r+0xd0>
 8006932:	2a0b      	cmp	r2, #11
 8006934:	d917      	bls.n	8006966 <_malloc_r+0xc2>
 8006936:	1961      	adds	r1, r4, r5
 8006938:	42a3      	cmp	r3, r4
 800693a:	6025      	str	r5, [r4, #0]
 800693c:	bf18      	it	ne
 800693e:	6059      	strne	r1, [r3, #4]
 8006940:	6863      	ldr	r3, [r4, #4]
 8006942:	bf08      	it	eq
 8006944:	f8c8 1000 	streq.w	r1, [r8]
 8006948:	5162      	str	r2, [r4, r5]
 800694a:	604b      	str	r3, [r1, #4]
 800694c:	4630      	mov	r0, r6
 800694e:	f000 fa63 	bl	8006e18 <__malloc_unlock>
 8006952:	f104 000b 	add.w	r0, r4, #11
 8006956:	1d23      	adds	r3, r4, #4
 8006958:	f020 0007 	bic.w	r0, r0, #7
 800695c:	1ac2      	subs	r2, r0, r3
 800695e:	bf1c      	itt	ne
 8006960:	1a1b      	subne	r3, r3, r0
 8006962:	50a3      	strne	r3, [r4, r2]
 8006964:	e7af      	b.n	80068c6 <_malloc_r+0x22>
 8006966:	6862      	ldr	r2, [r4, #4]
 8006968:	42a3      	cmp	r3, r4
 800696a:	bf0c      	ite	eq
 800696c:	f8c8 2000 	streq.w	r2, [r8]
 8006970:	605a      	strne	r2, [r3, #4]
 8006972:	e7eb      	b.n	800694c <_malloc_r+0xa8>
 8006974:	4623      	mov	r3, r4
 8006976:	6864      	ldr	r4, [r4, #4]
 8006978:	e7ae      	b.n	80068d8 <_malloc_r+0x34>
 800697a:	463c      	mov	r4, r7
 800697c:	687f      	ldr	r7, [r7, #4]
 800697e:	e7b6      	b.n	80068ee <_malloc_r+0x4a>
 8006980:	461a      	mov	r2, r3
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	42a3      	cmp	r3, r4
 8006986:	d1fb      	bne.n	8006980 <_malloc_r+0xdc>
 8006988:	2300      	movs	r3, #0
 800698a:	6053      	str	r3, [r2, #4]
 800698c:	e7de      	b.n	800694c <_malloc_r+0xa8>
 800698e:	230c      	movs	r3, #12
 8006990:	6033      	str	r3, [r6, #0]
 8006992:	4630      	mov	r0, r6
 8006994:	f000 fa40 	bl	8006e18 <__malloc_unlock>
 8006998:	e794      	b.n	80068c4 <_malloc_r+0x20>
 800699a:	6005      	str	r5, [r0, #0]
 800699c:	e7d6      	b.n	800694c <_malloc_r+0xa8>
 800699e:	bf00      	nop
 80069a0:	200005a8 	.word	0x200005a8

080069a4 <_scanf_chars>:
 80069a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069a8:	4615      	mov	r5, r2
 80069aa:	688a      	ldr	r2, [r1, #8]
 80069ac:	4680      	mov	r8, r0
 80069ae:	460c      	mov	r4, r1
 80069b0:	b932      	cbnz	r2, 80069c0 <_scanf_chars+0x1c>
 80069b2:	698a      	ldr	r2, [r1, #24]
 80069b4:	2a00      	cmp	r2, #0
 80069b6:	bf14      	ite	ne
 80069b8:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 80069bc:	2201      	moveq	r2, #1
 80069be:	608a      	str	r2, [r1, #8]
 80069c0:	6822      	ldr	r2, [r4, #0]
 80069c2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006a54 <_scanf_chars+0xb0>
 80069c6:	06d1      	lsls	r1, r2, #27
 80069c8:	bf5f      	itttt	pl
 80069ca:	681a      	ldrpl	r2, [r3, #0]
 80069cc:	1d11      	addpl	r1, r2, #4
 80069ce:	6019      	strpl	r1, [r3, #0]
 80069d0:	6816      	ldrpl	r6, [r2, #0]
 80069d2:	2700      	movs	r7, #0
 80069d4:	69a0      	ldr	r0, [r4, #24]
 80069d6:	b188      	cbz	r0, 80069fc <_scanf_chars+0x58>
 80069d8:	2801      	cmp	r0, #1
 80069da:	d107      	bne.n	80069ec <_scanf_chars+0x48>
 80069dc:	682b      	ldr	r3, [r5, #0]
 80069de:	781a      	ldrb	r2, [r3, #0]
 80069e0:	6963      	ldr	r3, [r4, #20]
 80069e2:	5c9b      	ldrb	r3, [r3, r2]
 80069e4:	b953      	cbnz	r3, 80069fc <_scanf_chars+0x58>
 80069e6:	2f00      	cmp	r7, #0
 80069e8:	d031      	beq.n	8006a4e <_scanf_chars+0xaa>
 80069ea:	e022      	b.n	8006a32 <_scanf_chars+0x8e>
 80069ec:	2802      	cmp	r0, #2
 80069ee:	d120      	bne.n	8006a32 <_scanf_chars+0x8e>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80069f8:	071b      	lsls	r3, r3, #28
 80069fa:	d41a      	bmi.n	8006a32 <_scanf_chars+0x8e>
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	06da      	lsls	r2, r3, #27
 8006a00:	bf5e      	ittt	pl
 8006a02:	682b      	ldrpl	r3, [r5, #0]
 8006a04:	781b      	ldrbpl	r3, [r3, #0]
 8006a06:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006a0a:	682a      	ldr	r2, [r5, #0]
 8006a0c:	686b      	ldr	r3, [r5, #4]
 8006a0e:	3201      	adds	r2, #1
 8006a10:	602a      	str	r2, [r5, #0]
 8006a12:	68a2      	ldr	r2, [r4, #8]
 8006a14:	3b01      	subs	r3, #1
 8006a16:	3a01      	subs	r2, #1
 8006a18:	606b      	str	r3, [r5, #4]
 8006a1a:	3701      	adds	r7, #1
 8006a1c:	60a2      	str	r2, [r4, #8]
 8006a1e:	b142      	cbz	r2, 8006a32 <_scanf_chars+0x8e>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	dcd7      	bgt.n	80069d4 <_scanf_chars+0x30>
 8006a24:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006a28:	4629      	mov	r1, r5
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	4798      	blx	r3
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	d0d0      	beq.n	80069d4 <_scanf_chars+0x30>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	f013 0310 	ands.w	r3, r3, #16
 8006a38:	d105      	bne.n	8006a46 <_scanf_chars+0xa2>
 8006a3a:	68e2      	ldr	r2, [r4, #12]
 8006a3c:	3201      	adds	r2, #1
 8006a3e:	60e2      	str	r2, [r4, #12]
 8006a40:	69a2      	ldr	r2, [r4, #24]
 8006a42:	b102      	cbz	r2, 8006a46 <_scanf_chars+0xa2>
 8006a44:	7033      	strb	r3, [r6, #0]
 8006a46:	6923      	ldr	r3, [r4, #16]
 8006a48:	443b      	add	r3, r7
 8006a4a:	6123      	str	r3, [r4, #16]
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a52:	bf00      	nop
 8006a54:	080072f5 	.word	0x080072f5

08006a58 <_scanf_i>:
 8006a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5c:	4698      	mov	r8, r3
 8006a5e:	4b74      	ldr	r3, [pc, #464]	@ (8006c30 <_scanf_i+0x1d8>)
 8006a60:	460c      	mov	r4, r1
 8006a62:	4682      	mov	sl, r0
 8006a64:	4616      	mov	r6, r2
 8006a66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	ab03      	add	r3, sp, #12
 8006a6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006a72:	4b70      	ldr	r3, [pc, #448]	@ (8006c34 <_scanf_i+0x1dc>)
 8006a74:	69a1      	ldr	r1, [r4, #24]
 8006a76:	4a70      	ldr	r2, [pc, #448]	@ (8006c38 <_scanf_i+0x1e0>)
 8006a78:	2903      	cmp	r1, #3
 8006a7a:	bf08      	it	eq
 8006a7c:	461a      	moveq	r2, r3
 8006a7e:	68a3      	ldr	r3, [r4, #8]
 8006a80:	9201      	str	r2, [sp, #4]
 8006a82:	1e5a      	subs	r2, r3, #1
 8006a84:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006a88:	bf88      	it	hi
 8006a8a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006a8e:	4627      	mov	r7, r4
 8006a90:	bf82      	ittt	hi
 8006a92:	eb03 0905 	addhi.w	r9, r3, r5
 8006a96:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006a9a:	60a3      	strhi	r3, [r4, #8]
 8006a9c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006aa0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8006aa4:	bf98      	it	ls
 8006aa6:	f04f 0900 	movls.w	r9, #0
 8006aaa:	6023      	str	r3, [r4, #0]
 8006aac:	463d      	mov	r5, r7
 8006aae:	f04f 0b00 	mov.w	fp, #0
 8006ab2:	6831      	ldr	r1, [r6, #0]
 8006ab4:	ab03      	add	r3, sp, #12
 8006ab6:	7809      	ldrb	r1, [r1, #0]
 8006ab8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006abc:	2202      	movs	r2, #2
 8006abe:	f7f9 fb8f 	bl	80001e0 <memchr>
 8006ac2:	b328      	cbz	r0, 8006b10 <_scanf_i+0xb8>
 8006ac4:	f1bb 0f01 	cmp.w	fp, #1
 8006ac8:	d159      	bne.n	8006b7e <_scanf_i+0x126>
 8006aca:	6862      	ldr	r2, [r4, #4]
 8006acc:	b92a      	cbnz	r2, 8006ada <_scanf_i+0x82>
 8006ace:	6822      	ldr	r2, [r4, #0]
 8006ad0:	2108      	movs	r1, #8
 8006ad2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ad6:	6061      	str	r1, [r4, #4]
 8006ad8:	6022      	str	r2, [r4, #0]
 8006ada:	6822      	ldr	r2, [r4, #0]
 8006adc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8006ae0:	6022      	str	r2, [r4, #0]
 8006ae2:	68a2      	ldr	r2, [r4, #8]
 8006ae4:	1e51      	subs	r1, r2, #1
 8006ae6:	60a1      	str	r1, [r4, #8]
 8006ae8:	b192      	cbz	r2, 8006b10 <_scanf_i+0xb8>
 8006aea:	6832      	ldr	r2, [r6, #0]
 8006aec:	1c51      	adds	r1, r2, #1
 8006aee:	6031      	str	r1, [r6, #0]
 8006af0:	7812      	ldrb	r2, [r2, #0]
 8006af2:	f805 2b01 	strb.w	r2, [r5], #1
 8006af6:	6872      	ldr	r2, [r6, #4]
 8006af8:	3a01      	subs	r2, #1
 8006afa:	2a00      	cmp	r2, #0
 8006afc:	6072      	str	r2, [r6, #4]
 8006afe:	dc07      	bgt.n	8006b10 <_scanf_i+0xb8>
 8006b00:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006b04:	4631      	mov	r1, r6
 8006b06:	4650      	mov	r0, sl
 8006b08:	4790      	blx	r2
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	f040 8085 	bne.w	8006c1a <_scanf_i+0x1c2>
 8006b10:	f10b 0b01 	add.w	fp, fp, #1
 8006b14:	f1bb 0f03 	cmp.w	fp, #3
 8006b18:	d1cb      	bne.n	8006ab2 <_scanf_i+0x5a>
 8006b1a:	6863      	ldr	r3, [r4, #4]
 8006b1c:	b90b      	cbnz	r3, 8006b22 <_scanf_i+0xca>
 8006b1e:	230a      	movs	r3, #10
 8006b20:	6063      	str	r3, [r4, #4]
 8006b22:	6863      	ldr	r3, [r4, #4]
 8006b24:	4945      	ldr	r1, [pc, #276]	@ (8006c3c <_scanf_i+0x1e4>)
 8006b26:	6960      	ldr	r0, [r4, #20]
 8006b28:	1ac9      	subs	r1, r1, r3
 8006b2a:	f000 f889 	bl	8006c40 <__sccl>
 8006b2e:	f04f 0b00 	mov.w	fp, #0
 8006b32:	68a3      	ldr	r3, [r4, #8]
 8006b34:	6822      	ldr	r2, [r4, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d03d      	beq.n	8006bb6 <_scanf_i+0x15e>
 8006b3a:	6831      	ldr	r1, [r6, #0]
 8006b3c:	6960      	ldr	r0, [r4, #20]
 8006b3e:	f891 c000 	ldrb.w	ip, [r1]
 8006b42:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006b46:	2800      	cmp	r0, #0
 8006b48:	d035      	beq.n	8006bb6 <_scanf_i+0x15e>
 8006b4a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8006b4e:	d124      	bne.n	8006b9a <_scanf_i+0x142>
 8006b50:	0510      	lsls	r0, r2, #20
 8006b52:	d522      	bpl.n	8006b9a <_scanf_i+0x142>
 8006b54:	f10b 0b01 	add.w	fp, fp, #1
 8006b58:	f1b9 0f00 	cmp.w	r9, #0
 8006b5c:	d003      	beq.n	8006b66 <_scanf_i+0x10e>
 8006b5e:	3301      	adds	r3, #1
 8006b60:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8006b64:	60a3      	str	r3, [r4, #8]
 8006b66:	6873      	ldr	r3, [r6, #4]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	6073      	str	r3, [r6, #4]
 8006b6e:	dd1b      	ble.n	8006ba8 <_scanf_i+0x150>
 8006b70:	6833      	ldr	r3, [r6, #0]
 8006b72:	3301      	adds	r3, #1
 8006b74:	6033      	str	r3, [r6, #0]
 8006b76:	68a3      	ldr	r3, [r4, #8]
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	60a3      	str	r3, [r4, #8]
 8006b7c:	e7d9      	b.n	8006b32 <_scanf_i+0xda>
 8006b7e:	f1bb 0f02 	cmp.w	fp, #2
 8006b82:	d1ae      	bne.n	8006ae2 <_scanf_i+0x8a>
 8006b84:	6822      	ldr	r2, [r4, #0]
 8006b86:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8006b8a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006b8e:	d1bf      	bne.n	8006b10 <_scanf_i+0xb8>
 8006b90:	2110      	movs	r1, #16
 8006b92:	6061      	str	r1, [r4, #4]
 8006b94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b98:	e7a2      	b.n	8006ae0 <_scanf_i+0x88>
 8006b9a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8006b9e:	6022      	str	r2, [r4, #0]
 8006ba0:	780b      	ldrb	r3, [r1, #0]
 8006ba2:	f805 3b01 	strb.w	r3, [r5], #1
 8006ba6:	e7de      	b.n	8006b66 <_scanf_i+0x10e>
 8006ba8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006bac:	4631      	mov	r1, r6
 8006bae:	4650      	mov	r0, sl
 8006bb0:	4798      	blx	r3
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	d0df      	beq.n	8006b76 <_scanf_i+0x11e>
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	05d9      	lsls	r1, r3, #23
 8006bba:	d50d      	bpl.n	8006bd8 <_scanf_i+0x180>
 8006bbc:	42bd      	cmp	r5, r7
 8006bbe:	d909      	bls.n	8006bd4 <_scanf_i+0x17c>
 8006bc0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006bc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006bc8:	4632      	mov	r2, r6
 8006bca:	4650      	mov	r0, sl
 8006bcc:	4798      	blx	r3
 8006bce:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8006bd2:	464d      	mov	r5, r9
 8006bd4:	42bd      	cmp	r5, r7
 8006bd6:	d028      	beq.n	8006c2a <_scanf_i+0x1d2>
 8006bd8:	6822      	ldr	r2, [r4, #0]
 8006bda:	f012 0210 	ands.w	r2, r2, #16
 8006bde:	d113      	bne.n	8006c08 <_scanf_i+0x1b0>
 8006be0:	702a      	strb	r2, [r5, #0]
 8006be2:	6863      	ldr	r3, [r4, #4]
 8006be4:	9e01      	ldr	r6, [sp, #4]
 8006be6:	4639      	mov	r1, r7
 8006be8:	4650      	mov	r0, sl
 8006bea:	47b0      	blx	r6
 8006bec:	f8d8 3000 	ldr.w	r3, [r8]
 8006bf0:	6821      	ldr	r1, [r4, #0]
 8006bf2:	1d1a      	adds	r2, r3, #4
 8006bf4:	f8c8 2000 	str.w	r2, [r8]
 8006bf8:	f011 0f20 	tst.w	r1, #32
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	d00f      	beq.n	8006c20 <_scanf_i+0x1c8>
 8006c00:	6018      	str	r0, [r3, #0]
 8006c02:	68e3      	ldr	r3, [r4, #12]
 8006c04:	3301      	adds	r3, #1
 8006c06:	60e3      	str	r3, [r4, #12]
 8006c08:	6923      	ldr	r3, [r4, #16]
 8006c0a:	1bed      	subs	r5, r5, r7
 8006c0c:	445d      	add	r5, fp
 8006c0e:	442b      	add	r3, r5
 8006c10:	6123      	str	r3, [r4, #16]
 8006c12:	2000      	movs	r0, #0
 8006c14:	b007      	add	sp, #28
 8006c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c1a:	f04f 0b00 	mov.w	fp, #0
 8006c1e:	e7ca      	b.n	8006bb6 <_scanf_i+0x15e>
 8006c20:	07ca      	lsls	r2, r1, #31
 8006c22:	bf4c      	ite	mi
 8006c24:	8018      	strhmi	r0, [r3, #0]
 8006c26:	6018      	strpl	r0, [r3, #0]
 8006c28:	e7eb      	b.n	8006c02 <_scanf_i+0x1aa>
 8006c2a:	2001      	movs	r0, #1
 8006c2c:	e7f2      	b.n	8006c14 <_scanf_i+0x1bc>
 8006c2e:	bf00      	nop
 8006c30:	080072d0 	.word	0x080072d0
 8006c34:	0800622d 	.word	0x0800622d
 8006c38:	08006fd1 	.word	0x08006fd1
 8006c3c:	08007409 	.word	0x08007409

08006c40 <__sccl>:
 8006c40:	b570      	push	{r4, r5, r6, lr}
 8006c42:	780b      	ldrb	r3, [r1, #0]
 8006c44:	4604      	mov	r4, r0
 8006c46:	2b5e      	cmp	r3, #94	@ 0x5e
 8006c48:	bf0b      	itete	eq
 8006c4a:	784b      	ldrbeq	r3, [r1, #1]
 8006c4c:	1c4a      	addne	r2, r1, #1
 8006c4e:	1c8a      	addeq	r2, r1, #2
 8006c50:	2100      	movne	r1, #0
 8006c52:	bf08      	it	eq
 8006c54:	2101      	moveq	r1, #1
 8006c56:	3801      	subs	r0, #1
 8006c58:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8006c5c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006c60:	42a8      	cmp	r0, r5
 8006c62:	d1fb      	bne.n	8006c5c <__sccl+0x1c>
 8006c64:	b90b      	cbnz	r3, 8006c6a <__sccl+0x2a>
 8006c66:	1e50      	subs	r0, r2, #1
 8006c68:	bd70      	pop	{r4, r5, r6, pc}
 8006c6a:	f081 0101 	eor.w	r1, r1, #1
 8006c6e:	54e1      	strb	r1, [r4, r3]
 8006c70:	4610      	mov	r0, r2
 8006c72:	4602      	mov	r2, r0
 8006c74:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006c78:	2d2d      	cmp	r5, #45	@ 0x2d
 8006c7a:	d005      	beq.n	8006c88 <__sccl+0x48>
 8006c7c:	2d5d      	cmp	r5, #93	@ 0x5d
 8006c7e:	d016      	beq.n	8006cae <__sccl+0x6e>
 8006c80:	2d00      	cmp	r5, #0
 8006c82:	d0f1      	beq.n	8006c68 <__sccl+0x28>
 8006c84:	462b      	mov	r3, r5
 8006c86:	e7f2      	b.n	8006c6e <__sccl+0x2e>
 8006c88:	7846      	ldrb	r6, [r0, #1]
 8006c8a:	2e5d      	cmp	r6, #93	@ 0x5d
 8006c8c:	d0fa      	beq.n	8006c84 <__sccl+0x44>
 8006c8e:	42b3      	cmp	r3, r6
 8006c90:	dcf8      	bgt.n	8006c84 <__sccl+0x44>
 8006c92:	3002      	adds	r0, #2
 8006c94:	461a      	mov	r2, r3
 8006c96:	3201      	adds	r2, #1
 8006c98:	4296      	cmp	r6, r2
 8006c9a:	54a1      	strb	r1, [r4, r2]
 8006c9c:	dcfb      	bgt.n	8006c96 <__sccl+0x56>
 8006c9e:	1af2      	subs	r2, r6, r3
 8006ca0:	3a01      	subs	r2, #1
 8006ca2:	1c5d      	adds	r5, r3, #1
 8006ca4:	42b3      	cmp	r3, r6
 8006ca6:	bfa8      	it	ge
 8006ca8:	2200      	movge	r2, #0
 8006caa:	18ab      	adds	r3, r5, r2
 8006cac:	e7e1      	b.n	8006c72 <__sccl+0x32>
 8006cae:	4610      	mov	r0, r2
 8006cb0:	e7da      	b.n	8006c68 <__sccl+0x28>
	...

08006cb4 <__sflush_r>:
 8006cb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cbc:	0716      	lsls	r6, r2, #28
 8006cbe:	4605      	mov	r5, r0
 8006cc0:	460c      	mov	r4, r1
 8006cc2:	d454      	bmi.n	8006d6e <__sflush_r+0xba>
 8006cc4:	684b      	ldr	r3, [r1, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	dc02      	bgt.n	8006cd0 <__sflush_r+0x1c>
 8006cca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	dd48      	ble.n	8006d62 <__sflush_r+0xae>
 8006cd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cd2:	2e00      	cmp	r6, #0
 8006cd4:	d045      	beq.n	8006d62 <__sflush_r+0xae>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006cdc:	682f      	ldr	r7, [r5, #0]
 8006cde:	6a21      	ldr	r1, [r4, #32]
 8006ce0:	602b      	str	r3, [r5, #0]
 8006ce2:	d030      	beq.n	8006d46 <__sflush_r+0x92>
 8006ce4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ce6:	89a3      	ldrh	r3, [r4, #12]
 8006ce8:	0759      	lsls	r1, r3, #29
 8006cea:	d505      	bpl.n	8006cf8 <__sflush_r+0x44>
 8006cec:	6863      	ldr	r3, [r4, #4]
 8006cee:	1ad2      	subs	r2, r2, r3
 8006cf0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006cf2:	b10b      	cbz	r3, 8006cf8 <__sflush_r+0x44>
 8006cf4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006cf6:	1ad2      	subs	r2, r2, r3
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cfc:	6a21      	ldr	r1, [r4, #32]
 8006cfe:	4628      	mov	r0, r5
 8006d00:	47b0      	blx	r6
 8006d02:	1c43      	adds	r3, r0, #1
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	d106      	bne.n	8006d16 <__sflush_r+0x62>
 8006d08:	6829      	ldr	r1, [r5, #0]
 8006d0a:	291d      	cmp	r1, #29
 8006d0c:	d82b      	bhi.n	8006d66 <__sflush_r+0xb2>
 8006d0e:	4a2a      	ldr	r2, [pc, #168]	@ (8006db8 <__sflush_r+0x104>)
 8006d10:	410a      	asrs	r2, r1
 8006d12:	07d6      	lsls	r6, r2, #31
 8006d14:	d427      	bmi.n	8006d66 <__sflush_r+0xb2>
 8006d16:	2200      	movs	r2, #0
 8006d18:	6062      	str	r2, [r4, #4]
 8006d1a:	04d9      	lsls	r1, r3, #19
 8006d1c:	6922      	ldr	r2, [r4, #16]
 8006d1e:	6022      	str	r2, [r4, #0]
 8006d20:	d504      	bpl.n	8006d2c <__sflush_r+0x78>
 8006d22:	1c42      	adds	r2, r0, #1
 8006d24:	d101      	bne.n	8006d2a <__sflush_r+0x76>
 8006d26:	682b      	ldr	r3, [r5, #0]
 8006d28:	b903      	cbnz	r3, 8006d2c <__sflush_r+0x78>
 8006d2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d2e:	602f      	str	r7, [r5, #0]
 8006d30:	b1b9      	cbz	r1, 8006d62 <__sflush_r+0xae>
 8006d32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d36:	4299      	cmp	r1, r3
 8006d38:	d002      	beq.n	8006d40 <__sflush_r+0x8c>
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	f7ff fb7a 	bl	8006434 <_free_r>
 8006d40:	2300      	movs	r3, #0
 8006d42:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d44:	e00d      	b.n	8006d62 <__sflush_r+0xae>
 8006d46:	2301      	movs	r3, #1
 8006d48:	4628      	mov	r0, r5
 8006d4a:	47b0      	blx	r6
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	1c50      	adds	r0, r2, #1
 8006d50:	d1c9      	bne.n	8006ce6 <__sflush_r+0x32>
 8006d52:	682b      	ldr	r3, [r5, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0c6      	beq.n	8006ce6 <__sflush_r+0x32>
 8006d58:	2b1d      	cmp	r3, #29
 8006d5a:	d001      	beq.n	8006d60 <__sflush_r+0xac>
 8006d5c:	2b16      	cmp	r3, #22
 8006d5e:	d11e      	bne.n	8006d9e <__sflush_r+0xea>
 8006d60:	602f      	str	r7, [r5, #0]
 8006d62:	2000      	movs	r0, #0
 8006d64:	e022      	b.n	8006dac <__sflush_r+0xf8>
 8006d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d6a:	b21b      	sxth	r3, r3
 8006d6c:	e01b      	b.n	8006da6 <__sflush_r+0xf2>
 8006d6e:	690f      	ldr	r7, [r1, #16]
 8006d70:	2f00      	cmp	r7, #0
 8006d72:	d0f6      	beq.n	8006d62 <__sflush_r+0xae>
 8006d74:	0793      	lsls	r3, r2, #30
 8006d76:	680e      	ldr	r6, [r1, #0]
 8006d78:	bf08      	it	eq
 8006d7a:	694b      	ldreq	r3, [r1, #20]
 8006d7c:	600f      	str	r7, [r1, #0]
 8006d7e:	bf18      	it	ne
 8006d80:	2300      	movne	r3, #0
 8006d82:	eba6 0807 	sub.w	r8, r6, r7
 8006d86:	608b      	str	r3, [r1, #8]
 8006d88:	f1b8 0f00 	cmp.w	r8, #0
 8006d8c:	dde9      	ble.n	8006d62 <__sflush_r+0xae>
 8006d8e:	6a21      	ldr	r1, [r4, #32]
 8006d90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006d92:	4643      	mov	r3, r8
 8006d94:	463a      	mov	r2, r7
 8006d96:	4628      	mov	r0, r5
 8006d98:	47b0      	blx	r6
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	dc08      	bgt.n	8006db0 <__sflush_r+0xfc>
 8006d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006da2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006da6:	81a3      	strh	r3, [r4, #12]
 8006da8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db0:	4407      	add	r7, r0
 8006db2:	eba8 0800 	sub.w	r8, r8, r0
 8006db6:	e7e7      	b.n	8006d88 <__sflush_r+0xd4>
 8006db8:	dfbffffe 	.word	0xdfbffffe

08006dbc <_fflush_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	690b      	ldr	r3, [r1, #16]
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	b913      	cbnz	r3, 8006dcc <_fflush_r+0x10>
 8006dc6:	2500      	movs	r5, #0
 8006dc8:	4628      	mov	r0, r5
 8006dca:	bd38      	pop	{r3, r4, r5, pc}
 8006dcc:	b118      	cbz	r0, 8006dd6 <_fflush_r+0x1a>
 8006dce:	6a03      	ldr	r3, [r0, #32]
 8006dd0:	b90b      	cbnz	r3, 8006dd6 <_fflush_r+0x1a>
 8006dd2:	f7ff f999 	bl	8006108 <__sinit>
 8006dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0f3      	beq.n	8006dc6 <_fflush_r+0xa>
 8006dde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006de0:	07d0      	lsls	r0, r2, #31
 8006de2:	d404      	bmi.n	8006dee <_fflush_r+0x32>
 8006de4:	0599      	lsls	r1, r3, #22
 8006de6:	d402      	bmi.n	8006dee <_fflush_r+0x32>
 8006de8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dea:	f7ff fb20 	bl	800642e <__retarget_lock_acquire_recursive>
 8006dee:	4628      	mov	r0, r5
 8006df0:	4621      	mov	r1, r4
 8006df2:	f7ff ff5f 	bl	8006cb4 <__sflush_r>
 8006df6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006df8:	07da      	lsls	r2, r3, #31
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	d4e4      	bmi.n	8006dc8 <_fflush_r+0xc>
 8006dfe:	89a3      	ldrh	r3, [r4, #12]
 8006e00:	059b      	lsls	r3, r3, #22
 8006e02:	d4e1      	bmi.n	8006dc8 <_fflush_r+0xc>
 8006e04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e06:	f7ff fb13 	bl	8006430 <__retarget_lock_release_recursive>
 8006e0a:	e7dd      	b.n	8006dc8 <_fflush_r+0xc>

08006e0c <__malloc_lock>:
 8006e0c:	4801      	ldr	r0, [pc, #4]	@ (8006e14 <__malloc_lock+0x8>)
 8006e0e:	f7ff bb0e 	b.w	800642e <__retarget_lock_acquire_recursive>
 8006e12:	bf00      	nop
 8006e14:	200005a0 	.word	0x200005a0

08006e18 <__malloc_unlock>:
 8006e18:	4801      	ldr	r0, [pc, #4]	@ (8006e20 <__malloc_unlock+0x8>)
 8006e1a:	f7ff bb09 	b.w	8006430 <__retarget_lock_release_recursive>
 8006e1e:	bf00      	nop
 8006e20:	200005a0 	.word	0x200005a0

08006e24 <__submore>:
 8006e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e28:	460c      	mov	r4, r1
 8006e2a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006e2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e30:	4299      	cmp	r1, r3
 8006e32:	d11d      	bne.n	8006e70 <__submore+0x4c>
 8006e34:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006e38:	f7ff fd34 	bl	80068a4 <_malloc_r>
 8006e3c:	b918      	cbnz	r0, 8006e46 <__submore+0x22>
 8006e3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e4a:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006e4c:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8006e50:	6360      	str	r0, [r4, #52]	@ 0x34
 8006e52:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8006e56:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006e5a:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8006e5e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006e62:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8006e66:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8006e6a:	6020      	str	r0, [r4, #0]
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	e7e8      	b.n	8006e42 <__submore+0x1e>
 8006e70:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8006e72:	0077      	lsls	r7, r6, #1
 8006e74:	463a      	mov	r2, r7
 8006e76:	f000 f80f 	bl	8006e98 <_realloc_r>
 8006e7a:	4605      	mov	r5, r0
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d0de      	beq.n	8006e3e <__submore+0x1a>
 8006e80:	eb00 0806 	add.w	r8, r0, r6
 8006e84:	4601      	mov	r1, r0
 8006e86:	4632      	mov	r2, r6
 8006e88:	4640      	mov	r0, r8
 8006e8a:	f000 f9cb 	bl	8007224 <memcpy>
 8006e8e:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8006e92:	f8c4 8000 	str.w	r8, [r4]
 8006e96:	e7e9      	b.n	8006e6c <__submore+0x48>

08006e98 <_realloc_r>:
 8006e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e9c:	4680      	mov	r8, r0
 8006e9e:	4615      	mov	r5, r2
 8006ea0:	460c      	mov	r4, r1
 8006ea2:	b921      	cbnz	r1, 8006eae <_realloc_r+0x16>
 8006ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	f7ff bcfb 	b.w	80068a4 <_malloc_r>
 8006eae:	b92a      	cbnz	r2, 8006ebc <_realloc_r+0x24>
 8006eb0:	f7ff fac0 	bl	8006434 <_free_r>
 8006eb4:	2400      	movs	r4, #0
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ebc:	f000 f9c0 	bl	8007240 <_malloc_usable_size_r>
 8006ec0:	4285      	cmp	r5, r0
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	d802      	bhi.n	8006ecc <_realloc_r+0x34>
 8006ec6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006eca:	d8f4      	bhi.n	8006eb6 <_realloc_r+0x1e>
 8006ecc:	4629      	mov	r1, r5
 8006ece:	4640      	mov	r0, r8
 8006ed0:	f7ff fce8 	bl	80068a4 <_malloc_r>
 8006ed4:	4607      	mov	r7, r0
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d0ec      	beq.n	8006eb4 <_realloc_r+0x1c>
 8006eda:	42b5      	cmp	r5, r6
 8006edc:	462a      	mov	r2, r5
 8006ede:	4621      	mov	r1, r4
 8006ee0:	bf28      	it	cs
 8006ee2:	4632      	movcs	r2, r6
 8006ee4:	f000 f99e 	bl	8007224 <memcpy>
 8006ee8:	4621      	mov	r1, r4
 8006eea:	4640      	mov	r0, r8
 8006eec:	f7ff faa2 	bl	8006434 <_free_r>
 8006ef0:	463c      	mov	r4, r7
 8006ef2:	e7e0      	b.n	8006eb6 <_realloc_r+0x1e>

08006ef4 <_strtoul_l.constprop.0>:
 8006ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ef8:	4e34      	ldr	r6, [pc, #208]	@ (8006fcc <_strtoul_l.constprop.0+0xd8>)
 8006efa:	4686      	mov	lr, r0
 8006efc:	460d      	mov	r5, r1
 8006efe:	4628      	mov	r0, r5
 8006f00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f04:	5d37      	ldrb	r7, [r6, r4]
 8006f06:	f017 0708 	ands.w	r7, r7, #8
 8006f0a:	d1f8      	bne.n	8006efe <_strtoul_l.constprop.0+0xa>
 8006f0c:	2c2d      	cmp	r4, #45	@ 0x2d
 8006f0e:	d12f      	bne.n	8006f70 <_strtoul_l.constprop.0+0x7c>
 8006f10:	782c      	ldrb	r4, [r5, #0]
 8006f12:	2701      	movs	r7, #1
 8006f14:	1c85      	adds	r5, r0, #2
 8006f16:	f033 0010 	bics.w	r0, r3, #16
 8006f1a:	d109      	bne.n	8006f30 <_strtoul_l.constprop.0+0x3c>
 8006f1c:	2c30      	cmp	r4, #48	@ 0x30
 8006f1e:	d12c      	bne.n	8006f7a <_strtoul_l.constprop.0+0x86>
 8006f20:	7828      	ldrb	r0, [r5, #0]
 8006f22:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006f26:	2858      	cmp	r0, #88	@ 0x58
 8006f28:	d127      	bne.n	8006f7a <_strtoul_l.constprop.0+0x86>
 8006f2a:	786c      	ldrb	r4, [r5, #1]
 8006f2c:	2310      	movs	r3, #16
 8006f2e:	3502      	adds	r5, #2
 8006f30:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8006f34:	2600      	movs	r6, #0
 8006f36:	fbb8 f8f3 	udiv	r8, r8, r3
 8006f3a:	fb03 f908 	mul.w	r9, r3, r8
 8006f3e:	ea6f 0909 	mvn.w	r9, r9
 8006f42:	4630      	mov	r0, r6
 8006f44:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8006f48:	f1bc 0f09 	cmp.w	ip, #9
 8006f4c:	d81c      	bhi.n	8006f88 <_strtoul_l.constprop.0+0x94>
 8006f4e:	4664      	mov	r4, ip
 8006f50:	42a3      	cmp	r3, r4
 8006f52:	dd2a      	ble.n	8006faa <_strtoul_l.constprop.0+0xb6>
 8006f54:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8006f58:	d007      	beq.n	8006f6a <_strtoul_l.constprop.0+0x76>
 8006f5a:	4580      	cmp	r8, r0
 8006f5c:	d322      	bcc.n	8006fa4 <_strtoul_l.constprop.0+0xb0>
 8006f5e:	d101      	bne.n	8006f64 <_strtoul_l.constprop.0+0x70>
 8006f60:	45a1      	cmp	r9, r4
 8006f62:	db1f      	blt.n	8006fa4 <_strtoul_l.constprop.0+0xb0>
 8006f64:	fb00 4003 	mla	r0, r0, r3, r4
 8006f68:	2601      	movs	r6, #1
 8006f6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f6e:	e7e9      	b.n	8006f44 <_strtoul_l.constprop.0+0x50>
 8006f70:	2c2b      	cmp	r4, #43	@ 0x2b
 8006f72:	bf04      	itt	eq
 8006f74:	782c      	ldrbeq	r4, [r5, #0]
 8006f76:	1c85      	addeq	r5, r0, #2
 8006f78:	e7cd      	b.n	8006f16 <_strtoul_l.constprop.0+0x22>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1d8      	bne.n	8006f30 <_strtoul_l.constprop.0+0x3c>
 8006f7e:	2c30      	cmp	r4, #48	@ 0x30
 8006f80:	bf0c      	ite	eq
 8006f82:	2308      	moveq	r3, #8
 8006f84:	230a      	movne	r3, #10
 8006f86:	e7d3      	b.n	8006f30 <_strtoul_l.constprop.0+0x3c>
 8006f88:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8006f8c:	f1bc 0f19 	cmp.w	ip, #25
 8006f90:	d801      	bhi.n	8006f96 <_strtoul_l.constprop.0+0xa2>
 8006f92:	3c37      	subs	r4, #55	@ 0x37
 8006f94:	e7dc      	b.n	8006f50 <_strtoul_l.constprop.0+0x5c>
 8006f96:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8006f9a:	f1bc 0f19 	cmp.w	ip, #25
 8006f9e:	d804      	bhi.n	8006faa <_strtoul_l.constprop.0+0xb6>
 8006fa0:	3c57      	subs	r4, #87	@ 0x57
 8006fa2:	e7d5      	b.n	8006f50 <_strtoul_l.constprop.0+0x5c>
 8006fa4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8006fa8:	e7df      	b.n	8006f6a <_strtoul_l.constprop.0+0x76>
 8006faa:	1c73      	adds	r3, r6, #1
 8006fac:	d106      	bne.n	8006fbc <_strtoul_l.constprop.0+0xc8>
 8006fae:	2322      	movs	r3, #34	@ 0x22
 8006fb0:	f8ce 3000 	str.w	r3, [lr]
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	b932      	cbnz	r2, 8006fc6 <_strtoul_l.constprop.0+0xd2>
 8006fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fbc:	b107      	cbz	r7, 8006fc0 <_strtoul_l.constprop.0+0xcc>
 8006fbe:	4240      	negs	r0, r0
 8006fc0:	2a00      	cmp	r2, #0
 8006fc2:	d0f9      	beq.n	8006fb8 <_strtoul_l.constprop.0+0xc4>
 8006fc4:	b106      	cbz	r6, 8006fc8 <_strtoul_l.constprop.0+0xd4>
 8006fc6:	1e69      	subs	r1, r5, #1
 8006fc8:	6011      	str	r1, [r2, #0]
 8006fca:	e7f5      	b.n	8006fb8 <_strtoul_l.constprop.0+0xc4>
 8006fcc:	080072f5 	.word	0x080072f5

08006fd0 <_strtoul_r>:
 8006fd0:	f7ff bf90 	b.w	8006ef4 <_strtoul_l.constprop.0>

08006fd4 <__swbuf_r>:
 8006fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd6:	460e      	mov	r6, r1
 8006fd8:	4614      	mov	r4, r2
 8006fda:	4605      	mov	r5, r0
 8006fdc:	b118      	cbz	r0, 8006fe6 <__swbuf_r+0x12>
 8006fde:	6a03      	ldr	r3, [r0, #32]
 8006fe0:	b90b      	cbnz	r3, 8006fe6 <__swbuf_r+0x12>
 8006fe2:	f7ff f891 	bl	8006108 <__sinit>
 8006fe6:	69a3      	ldr	r3, [r4, #24]
 8006fe8:	60a3      	str	r3, [r4, #8]
 8006fea:	89a3      	ldrh	r3, [r4, #12]
 8006fec:	071a      	lsls	r2, r3, #28
 8006fee:	d501      	bpl.n	8006ff4 <__swbuf_r+0x20>
 8006ff0:	6923      	ldr	r3, [r4, #16]
 8006ff2:	b943      	cbnz	r3, 8007006 <__swbuf_r+0x32>
 8006ff4:	4621      	mov	r1, r4
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f000 f82a 	bl	8007050 <__swsetup_r>
 8006ffc:	b118      	cbz	r0, 8007006 <__swbuf_r+0x32>
 8006ffe:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007002:	4638      	mov	r0, r7
 8007004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	6922      	ldr	r2, [r4, #16]
 800700a:	1a98      	subs	r0, r3, r2
 800700c:	6963      	ldr	r3, [r4, #20]
 800700e:	b2f6      	uxtb	r6, r6
 8007010:	4283      	cmp	r3, r0
 8007012:	4637      	mov	r7, r6
 8007014:	dc05      	bgt.n	8007022 <__swbuf_r+0x4e>
 8007016:	4621      	mov	r1, r4
 8007018:	4628      	mov	r0, r5
 800701a:	f7ff fecf 	bl	8006dbc <_fflush_r>
 800701e:	2800      	cmp	r0, #0
 8007020:	d1ed      	bne.n	8006ffe <__swbuf_r+0x2a>
 8007022:	68a3      	ldr	r3, [r4, #8]
 8007024:	3b01      	subs	r3, #1
 8007026:	60a3      	str	r3, [r4, #8]
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	1c5a      	adds	r2, r3, #1
 800702c:	6022      	str	r2, [r4, #0]
 800702e:	701e      	strb	r6, [r3, #0]
 8007030:	6962      	ldr	r2, [r4, #20]
 8007032:	1c43      	adds	r3, r0, #1
 8007034:	429a      	cmp	r2, r3
 8007036:	d004      	beq.n	8007042 <__swbuf_r+0x6e>
 8007038:	89a3      	ldrh	r3, [r4, #12]
 800703a:	07db      	lsls	r3, r3, #31
 800703c:	d5e1      	bpl.n	8007002 <__swbuf_r+0x2e>
 800703e:	2e0a      	cmp	r6, #10
 8007040:	d1df      	bne.n	8007002 <__swbuf_r+0x2e>
 8007042:	4621      	mov	r1, r4
 8007044:	4628      	mov	r0, r5
 8007046:	f7ff feb9 	bl	8006dbc <_fflush_r>
 800704a:	2800      	cmp	r0, #0
 800704c:	d0d9      	beq.n	8007002 <__swbuf_r+0x2e>
 800704e:	e7d6      	b.n	8006ffe <__swbuf_r+0x2a>

08007050 <__swsetup_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4b29      	ldr	r3, [pc, #164]	@ (80070f8 <__swsetup_r+0xa8>)
 8007054:	4605      	mov	r5, r0
 8007056:	6818      	ldr	r0, [r3, #0]
 8007058:	460c      	mov	r4, r1
 800705a:	b118      	cbz	r0, 8007064 <__swsetup_r+0x14>
 800705c:	6a03      	ldr	r3, [r0, #32]
 800705e:	b90b      	cbnz	r3, 8007064 <__swsetup_r+0x14>
 8007060:	f7ff f852 	bl	8006108 <__sinit>
 8007064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007068:	0719      	lsls	r1, r3, #28
 800706a:	d422      	bmi.n	80070b2 <__swsetup_r+0x62>
 800706c:	06da      	lsls	r2, r3, #27
 800706e:	d407      	bmi.n	8007080 <__swsetup_r+0x30>
 8007070:	2209      	movs	r2, #9
 8007072:	602a      	str	r2, [r5, #0]
 8007074:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007078:	81a3      	strh	r3, [r4, #12]
 800707a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800707e:	e033      	b.n	80070e8 <__swsetup_r+0x98>
 8007080:	0758      	lsls	r0, r3, #29
 8007082:	d512      	bpl.n	80070aa <__swsetup_r+0x5a>
 8007084:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007086:	b141      	cbz	r1, 800709a <__swsetup_r+0x4a>
 8007088:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800708c:	4299      	cmp	r1, r3
 800708e:	d002      	beq.n	8007096 <__swsetup_r+0x46>
 8007090:	4628      	mov	r0, r5
 8007092:	f7ff f9cf 	bl	8006434 <_free_r>
 8007096:	2300      	movs	r3, #0
 8007098:	6363      	str	r3, [r4, #52]	@ 0x34
 800709a:	89a3      	ldrh	r3, [r4, #12]
 800709c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80070a0:	81a3      	strh	r3, [r4, #12]
 80070a2:	2300      	movs	r3, #0
 80070a4:	6063      	str	r3, [r4, #4]
 80070a6:	6923      	ldr	r3, [r4, #16]
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	89a3      	ldrh	r3, [r4, #12]
 80070ac:	f043 0308 	orr.w	r3, r3, #8
 80070b0:	81a3      	strh	r3, [r4, #12]
 80070b2:	6923      	ldr	r3, [r4, #16]
 80070b4:	b94b      	cbnz	r3, 80070ca <__swsetup_r+0x7a>
 80070b6:	89a3      	ldrh	r3, [r4, #12]
 80070b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80070bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070c0:	d003      	beq.n	80070ca <__swsetup_r+0x7a>
 80070c2:	4621      	mov	r1, r4
 80070c4:	4628      	mov	r0, r5
 80070c6:	f000 f83f 	bl	8007148 <__smakebuf_r>
 80070ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ce:	f013 0201 	ands.w	r2, r3, #1
 80070d2:	d00a      	beq.n	80070ea <__swsetup_r+0x9a>
 80070d4:	2200      	movs	r2, #0
 80070d6:	60a2      	str	r2, [r4, #8]
 80070d8:	6962      	ldr	r2, [r4, #20]
 80070da:	4252      	negs	r2, r2
 80070dc:	61a2      	str	r2, [r4, #24]
 80070de:	6922      	ldr	r2, [r4, #16]
 80070e0:	b942      	cbnz	r2, 80070f4 <__swsetup_r+0xa4>
 80070e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80070e6:	d1c5      	bne.n	8007074 <__swsetup_r+0x24>
 80070e8:	bd38      	pop	{r3, r4, r5, pc}
 80070ea:	0799      	lsls	r1, r3, #30
 80070ec:	bf58      	it	pl
 80070ee:	6962      	ldrpl	r2, [r4, #20]
 80070f0:	60a2      	str	r2, [r4, #8]
 80070f2:	e7f4      	b.n	80070de <__swsetup_r+0x8e>
 80070f4:	2000      	movs	r0, #0
 80070f6:	e7f7      	b.n	80070e8 <__swsetup_r+0x98>
 80070f8:	20000078 	.word	0x20000078

080070fc <__swhatbuf_r>:
 80070fc:	b570      	push	{r4, r5, r6, lr}
 80070fe:	460c      	mov	r4, r1
 8007100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007104:	2900      	cmp	r1, #0
 8007106:	b096      	sub	sp, #88	@ 0x58
 8007108:	4615      	mov	r5, r2
 800710a:	461e      	mov	r6, r3
 800710c:	da0d      	bge.n	800712a <__swhatbuf_r+0x2e>
 800710e:	89a3      	ldrh	r3, [r4, #12]
 8007110:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007114:	f04f 0100 	mov.w	r1, #0
 8007118:	bf14      	ite	ne
 800711a:	2340      	movne	r3, #64	@ 0x40
 800711c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007120:	2000      	movs	r0, #0
 8007122:	6031      	str	r1, [r6, #0]
 8007124:	602b      	str	r3, [r5, #0]
 8007126:	b016      	add	sp, #88	@ 0x58
 8007128:	bd70      	pop	{r4, r5, r6, pc}
 800712a:	466a      	mov	r2, sp
 800712c:	f000 f848 	bl	80071c0 <_fstat_r>
 8007130:	2800      	cmp	r0, #0
 8007132:	dbec      	blt.n	800710e <__swhatbuf_r+0x12>
 8007134:	9901      	ldr	r1, [sp, #4]
 8007136:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800713a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800713e:	4259      	negs	r1, r3
 8007140:	4159      	adcs	r1, r3
 8007142:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007146:	e7eb      	b.n	8007120 <__swhatbuf_r+0x24>

08007148 <__smakebuf_r>:
 8007148:	898b      	ldrh	r3, [r1, #12]
 800714a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800714c:	079d      	lsls	r5, r3, #30
 800714e:	4606      	mov	r6, r0
 8007150:	460c      	mov	r4, r1
 8007152:	d507      	bpl.n	8007164 <__smakebuf_r+0x1c>
 8007154:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007158:	6023      	str	r3, [r4, #0]
 800715a:	6123      	str	r3, [r4, #16]
 800715c:	2301      	movs	r3, #1
 800715e:	6163      	str	r3, [r4, #20]
 8007160:	b003      	add	sp, #12
 8007162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007164:	ab01      	add	r3, sp, #4
 8007166:	466a      	mov	r2, sp
 8007168:	f7ff ffc8 	bl	80070fc <__swhatbuf_r>
 800716c:	9f00      	ldr	r7, [sp, #0]
 800716e:	4605      	mov	r5, r0
 8007170:	4639      	mov	r1, r7
 8007172:	4630      	mov	r0, r6
 8007174:	f7ff fb96 	bl	80068a4 <_malloc_r>
 8007178:	b948      	cbnz	r0, 800718e <__smakebuf_r+0x46>
 800717a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800717e:	059a      	lsls	r2, r3, #22
 8007180:	d4ee      	bmi.n	8007160 <__smakebuf_r+0x18>
 8007182:	f023 0303 	bic.w	r3, r3, #3
 8007186:	f043 0302 	orr.w	r3, r3, #2
 800718a:	81a3      	strh	r3, [r4, #12]
 800718c:	e7e2      	b.n	8007154 <__smakebuf_r+0xc>
 800718e:	89a3      	ldrh	r3, [r4, #12]
 8007190:	6020      	str	r0, [r4, #0]
 8007192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007196:	81a3      	strh	r3, [r4, #12]
 8007198:	9b01      	ldr	r3, [sp, #4]
 800719a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800719e:	b15b      	cbz	r3, 80071b8 <__smakebuf_r+0x70>
 80071a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071a4:	4630      	mov	r0, r6
 80071a6:	f000 f81d 	bl	80071e4 <_isatty_r>
 80071aa:	b128      	cbz	r0, 80071b8 <__smakebuf_r+0x70>
 80071ac:	89a3      	ldrh	r3, [r4, #12]
 80071ae:	f023 0303 	bic.w	r3, r3, #3
 80071b2:	f043 0301 	orr.w	r3, r3, #1
 80071b6:	81a3      	strh	r3, [r4, #12]
 80071b8:	89a3      	ldrh	r3, [r4, #12]
 80071ba:	431d      	orrs	r5, r3
 80071bc:	81a5      	strh	r5, [r4, #12]
 80071be:	e7cf      	b.n	8007160 <__smakebuf_r+0x18>

080071c0 <_fstat_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4d07      	ldr	r5, [pc, #28]	@ (80071e0 <_fstat_r+0x20>)
 80071c4:	2300      	movs	r3, #0
 80071c6:	4604      	mov	r4, r0
 80071c8:	4608      	mov	r0, r1
 80071ca:	4611      	mov	r1, r2
 80071cc:	602b      	str	r3, [r5, #0]
 80071ce:	f7fa fb49 	bl	8001864 <_fstat>
 80071d2:	1c43      	adds	r3, r0, #1
 80071d4:	d102      	bne.n	80071dc <_fstat_r+0x1c>
 80071d6:	682b      	ldr	r3, [r5, #0]
 80071d8:	b103      	cbz	r3, 80071dc <_fstat_r+0x1c>
 80071da:	6023      	str	r3, [r4, #0]
 80071dc:	bd38      	pop	{r3, r4, r5, pc}
 80071de:	bf00      	nop
 80071e0:	2000059c 	.word	0x2000059c

080071e4 <_isatty_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4d06      	ldr	r5, [pc, #24]	@ (8007200 <_isatty_r+0x1c>)
 80071e8:	2300      	movs	r3, #0
 80071ea:	4604      	mov	r4, r0
 80071ec:	4608      	mov	r0, r1
 80071ee:	602b      	str	r3, [r5, #0]
 80071f0:	f7fa fb48 	bl	8001884 <_isatty>
 80071f4:	1c43      	adds	r3, r0, #1
 80071f6:	d102      	bne.n	80071fe <_isatty_r+0x1a>
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	b103      	cbz	r3, 80071fe <_isatty_r+0x1a>
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	bd38      	pop	{r3, r4, r5, pc}
 8007200:	2000059c 	.word	0x2000059c

08007204 <_sbrk_r>:
 8007204:	b538      	push	{r3, r4, r5, lr}
 8007206:	4d06      	ldr	r5, [pc, #24]	@ (8007220 <_sbrk_r+0x1c>)
 8007208:	2300      	movs	r3, #0
 800720a:	4604      	mov	r4, r0
 800720c:	4608      	mov	r0, r1
 800720e:	602b      	str	r3, [r5, #0]
 8007210:	f7fa fb50 	bl	80018b4 <_sbrk>
 8007214:	1c43      	adds	r3, r0, #1
 8007216:	d102      	bne.n	800721e <_sbrk_r+0x1a>
 8007218:	682b      	ldr	r3, [r5, #0]
 800721a:	b103      	cbz	r3, 800721e <_sbrk_r+0x1a>
 800721c:	6023      	str	r3, [r4, #0]
 800721e:	bd38      	pop	{r3, r4, r5, pc}
 8007220:	2000059c 	.word	0x2000059c

08007224 <memcpy>:
 8007224:	440a      	add	r2, r1
 8007226:	4291      	cmp	r1, r2
 8007228:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800722c:	d100      	bne.n	8007230 <memcpy+0xc>
 800722e:	4770      	bx	lr
 8007230:	b510      	push	{r4, lr}
 8007232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800723a:	4291      	cmp	r1, r2
 800723c:	d1f9      	bne.n	8007232 <memcpy+0xe>
 800723e:	bd10      	pop	{r4, pc}

08007240 <_malloc_usable_size_r>:
 8007240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007244:	1f18      	subs	r0, r3, #4
 8007246:	2b00      	cmp	r3, #0
 8007248:	bfbc      	itt	lt
 800724a:	580b      	ldrlt	r3, [r1, r0]
 800724c:	18c0      	addlt	r0, r0, r3
 800724e:	4770      	bx	lr

08007250 <_init>:
 8007250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007252:	bf00      	nop
 8007254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007256:	bc08      	pop	{r3}
 8007258:	469e      	mov	lr, r3
 800725a:	4770      	bx	lr

0800725c <_fini>:
 800725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725e:	bf00      	nop
 8007260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007262:	bc08      	pop	{r3}
 8007264:	469e      	mov	lr, r3
 8007266:	4770      	bx	lr
