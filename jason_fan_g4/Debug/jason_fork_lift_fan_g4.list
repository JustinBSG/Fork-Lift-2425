
jason_fork_lift_fan_g4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004344  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800451c  0800451c  0000551c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800455c  0800455c  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  0800455c  0800455c  0000555c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004564  08004564  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004564  08004564  00005564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004568  08004568  00005568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800456c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000010  0800457c  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  0800457c  000061f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d61  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000249b  00000000  00000000  00017da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  0001a240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c76  00000000  00000000  0001b238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002390  00000000  00000000  0001beae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132a5  00000000  00000000  0001e23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9be0  00000000  00000000  000314e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b0c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004330  00000000  00000000  0010b108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0010f438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004504 	.word	0x08004504

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08004504 	.word	0x08004504

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	@ 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800051e:	4b3e      	ldr	r3, [pc, #248]	@ (8000618 <MX_GPIO_Init+0x110>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a3d      	ldr	r2, [pc, #244]	@ (8000618 <MX_GPIO_Init+0x110>)
 8000524:	f043 0310 	orr.w	r3, r3, #16
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b3b      	ldr	r3, [pc, #236]	@ (8000618 <MX_GPIO_Init+0x110>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0310 	and.w	r3, r3, #16
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	4b38      	ldr	r3, [pc, #224]	@ (8000618 <MX_GPIO_Init+0x110>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a37      	ldr	r2, [pc, #220]	@ (8000618 <MX_GPIO_Init+0x110>)
 800053c:	f043 0304 	orr.w	r3, r3, #4
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b35      	ldr	r3, [pc, #212]	@ (8000618 <MX_GPIO_Init+0x110>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054e:	4b32      	ldr	r3, [pc, #200]	@ (8000618 <MX_GPIO_Init+0x110>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000552:	4a31      	ldr	r2, [pc, #196]	@ (8000618 <MX_GPIO_Init+0x110>)
 8000554:	f043 0320 	orr.w	r3, r3, #32
 8000558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055a:	4b2f      	ldr	r3, [pc, #188]	@ (8000618 <MX_GPIO_Init+0x110>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	f003 0320 	and.w	r3, r3, #32
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b2c      	ldr	r3, [pc, #176]	@ (8000618 <MX_GPIO_Init+0x110>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	4a2b      	ldr	r2, [pc, #172]	@ (8000618 <MX_GPIO_Init+0x110>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000572:	4b29      	ldr	r3, [pc, #164]	@ (8000618 <MX_GPIO_Init+0x110>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b26      	ldr	r3, [pc, #152]	@ (8000618 <MX_GPIO_Init+0x110>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000582:	4a25      	ldr	r2, [pc, #148]	@ (8000618 <MX_GPIO_Init+0x110>)
 8000584:	f043 0302 	orr.w	r3, r3, #2
 8000588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058a:	4b23      	ldr	r3, [pc, #140]	@ (8000618 <MX_GPIO_Init+0x110>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, C_IN2_Pin|D_IN1_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2130      	movs	r1, #48	@ 0x30
 800059a:	4820      	ldr	r0, [pc, #128]	@ (800061c <MX_GPIO_Init+0x114>)
 800059c:	f000 ff22 	bl	80013e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_IN2_Pin|A_IN1_Pin|C_IN1_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f242 0103 	movw	r1, #8195	@ 0x2003
 80005a6:	481e      	ldr	r0, [pc, #120]	@ (8000620 <MX_GPIO_Init+0x118>)
 80005a8:	f000 ff1c 	bl	80013e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, B_IN1_Pin|B_IN2_Pin|A_IN2_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 518c 	mov.w	r1, #4480	@ 0x1180
 80005b2:	481c      	ldr	r0, [pc, #112]	@ (8000624 <MX_GPIO_Init+0x11c>)
 80005b4:	f000 ff16 	bl	80013e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C_IN2_Pin D_IN1_Pin */
  GPIO_InitStruct.Pin = C_IN2_Pin|D_IN1_Pin;
 80005b8:	2330      	movs	r3, #48	@ 0x30
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2300      	movs	r3, #0
 80005c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4619      	mov	r1, r3
 80005ce:	4813      	ldr	r0, [pc, #76]	@ (800061c <MX_GPIO_Init+0x114>)
 80005d0:	f000 fd86 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_IN2_Pin A_IN1_Pin C_IN1_Pin */
  GPIO_InitStruct.Pin = D_IN2_Pin|A_IN1_Pin|C_IN1_Pin;
 80005d4:	f242 0303 	movw	r3, #8195	@ 0x2003
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2300      	movs	r3, #0
 80005e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	480c      	ldr	r0, [pc, #48]	@ (8000620 <MX_GPIO_Init+0x118>)
 80005ee:	f000 fd77 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_IN1_Pin B_IN2_Pin A_IN2_Pin */
  GPIO_InitStruct.Pin = B_IN1_Pin|B_IN2_Pin|A_IN2_Pin;
 80005f2:	f44f 538c 	mov.w	r3, #4480	@ 0x1180
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	2300      	movs	r3, #0
 8000602:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	@ (8000624 <MX_GPIO_Init+0x11c>)
 800060c:	f000 fd68 	bl	80010e0 <HAL_GPIO_Init>

}
 8000610:	bf00      	nop
 8000612:	3728      	adds	r7, #40	@ 0x28
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40021000 	.word	0x40021000
 800061c:	48000800 	.word	0x48000800
 8000620:	48000400 	.word	0x48000400
 8000624:	48001000 	.word	0x48001000

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 fbe1 	bl	8000df2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f832 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f7ff ff68 	bl	8000508 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000638:	f000 f8e4 	bl	8000804 <MX_TIM2_Init>
  MX_TIM3_Init();
 800063c:	f000 f97a 	bl	8000934 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000640:	f000 fac8 	bl	8000bd4 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8000644:	f000 fa7a 	bl	8000b3c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000648:	2100      	movs	r1, #0
 800064a:	480f      	ldr	r0, [pc, #60]	@ (8000688 <main+0x60>)
 800064c:	f001 ffca 	bl	80025e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000650:	2104      	movs	r1, #4
 8000652:	480d      	ldr	r0, [pc, #52]	@ (8000688 <main+0x60>)
 8000654:	f001 ffc6 	bl	80025e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000658:	2108      	movs	r1, #8
 800065a:	480b      	ldr	r0, [pc, #44]	@ (8000688 <main+0x60>)
 800065c:	f001 ffc2 	bl	80025e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000660:	210c      	movs	r1, #12
 8000662:	4809      	ldr	r0, [pc, #36]	@ (8000688 <main+0x60>)
 8000664:	f001 ffbe 	bl	80025e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000668:	2100      	movs	r1, #0
 800066a:	4808      	ldr	r0, [pc, #32]	@ (800068c <main+0x64>)
 800066c:	f001 ffba 	bl	80025e4 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 8000670:	2001      	movs	r0, #1
 8000672:	f000 fc2f 	bl	8000ed4 <HAL_Delay>

    // test fan
    // TIM3->CCR1 = 1500; // 2.475V // PE2

    // test communication
    HAL_UART_Transmit(&huart4, &testing, 1, HAL_MAX_DELAY);
 8000676:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800067a:	2201      	movs	r2, #1
 800067c:	4904      	ldr	r1, [pc, #16]	@ (8000690 <main+0x68>)
 800067e:	4805      	ldr	r0, [pc, #20]	@ (8000694 <main+0x6c>)
 8000680:	f003 f868 	bl	8003754 <HAL_UART_Transmit>
    HAL_Delay(1);
 8000684:	bf00      	nop
 8000686:	e7f3      	b.n	8000670 <main+0x48>
 8000688:	2000002c 	.word	0x2000002c
 800068c:	20000078 	.word	0x20000078
 8000690:	20000000 	.word	0x20000000
 8000694:	200000c4 	.word	0x200000c4

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0318 	add.w	r3, r7, #24
 80006a2:	2238      	movs	r2, #56	@ 0x38
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 ff00 	bl	80044ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006be:	f000 fea9 	bl	8001414 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d0:	2303      	movs	r3, #3
 80006d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80006d8:	2314      	movs	r3, #20
 80006da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0318 	add.w	r3, r7, #24
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 ff45 	bl	800157c <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80006f8:	f000 f818 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2303      	movs	r3, #3
 8000702:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2102      	movs	r1, #2
 8000714:	4618      	mov	r0, r3
 8000716:	f001 fa43 	bl	8001ba0 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000720:	f000 f804 	bl	800072c <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3750      	adds	r7, #80	@ 0x50
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <Error_Handler+0x8>

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <HAL_MspInit+0x44>)
 8000740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000742:	4a0e      	ldr	r2, [pc, #56]	@ (800077c <HAL_MspInit+0x44>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6613      	str	r3, [r2, #96]	@ 0x60
 800074a:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <HAL_MspInit+0x44>)
 800074c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <HAL_MspInit+0x44>)
 8000758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800075a:	4a08      	ldr	r2, [pc, #32]	@ (800077c <HAL_MspInit+0x44>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000760:	6593      	str	r3, [r2, #88]	@ 0x58
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <HAL_MspInit+0x44>)
 8000764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800076e:	f000 fef5 	bl	800155c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40021000 	.word	0x40021000

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <NMI_Handler+0x4>

08000788 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <HardFault_Handler+0x4>

08000790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <MemManage_Handler+0x4>

08000798 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d6:	f000 fb5f 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <SystemInit+0x20>)
 80007e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ea:	4a05      	ldr	r2, [pc, #20]	@ (8000800 <SystemInit+0x20>)
 80007ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08e      	sub	sp, #56	@ 0x38
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000824:	463b      	mov	r3, r7
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
 8000832:	615a      	str	r2, [r3, #20]
 8000834:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000836:	4b3e      	ldr	r3, [pc, #248]	@ (8000930 <MX_TIM2_Init+0x12c>)
 8000838:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800083c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 800083e:	4b3c      	ldr	r3, [pc, #240]	@ (8000930 <MX_TIM2_Init+0x12c>)
 8000840:	224f      	movs	r2, #79	@ 0x4f
 8000842:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000844:	4b3a      	ldr	r3, [pc, #232]	@ (8000930 <MX_TIM2_Init+0x12c>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800084a:	4b39      	ldr	r3, [pc, #228]	@ (8000930 <MX_TIM2_Init+0x12c>)
 800084c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000850:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000852:	4b37      	ldr	r3, [pc, #220]	@ (8000930 <MX_TIM2_Init+0x12c>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000858:	4b35      	ldr	r3, [pc, #212]	@ (8000930 <MX_TIM2_Init+0x12c>)
 800085a:	2280      	movs	r2, #128	@ 0x80
 800085c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800085e:	4834      	ldr	r0, [pc, #208]	@ (8000930 <MX_TIM2_Init+0x12c>)
 8000860:	f001 fe08 	bl	8002474 <HAL_TIM_Base_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800086a:	f7ff ff5f 	bl	800072c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800086e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000872:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000874:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000878:	4619      	mov	r1, r3
 800087a:	482d      	ldr	r0, [pc, #180]	@ (8000930 <MX_TIM2_Init+0x12c>)
 800087c:	f002 f8d8 	bl	8002a30 <HAL_TIM_ConfigClockSource>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000886:	f7ff ff51 	bl	800072c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800088a:	4829      	ldr	r0, [pc, #164]	@ (8000930 <MX_TIM2_Init+0x12c>)
 800088c:	f001 fe49 	bl	8002522 <HAL_TIM_PWM_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000896:	f7ff ff49 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4821      	ldr	r0, [pc, #132]	@ (8000930 <MX_TIM2_Init+0x12c>)
 80008aa:	f002 fe6d 	bl	8003588 <HAL_TIMEx_MasterConfigSynchronization>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008b4:	f7ff ff3a 	bl	800072c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b8:	2360      	movs	r3, #96	@ 0x60
 80008ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008c8:	463b      	mov	r3, r7
 80008ca:	2200      	movs	r2, #0
 80008cc:	4619      	mov	r1, r3
 80008ce:	4818      	ldr	r0, [pc, #96]	@ (8000930 <MX_TIM2_Init+0x12c>)
 80008d0:	f001 ff9a 	bl	8002808 <HAL_TIM_PWM_ConfigChannel>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80008da:	f7ff ff27 	bl	800072c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	2204      	movs	r2, #4
 80008e2:	4619      	mov	r1, r3
 80008e4:	4812      	ldr	r0, [pc, #72]	@ (8000930 <MX_TIM2_Init+0x12c>)
 80008e6:	f001 ff8f 	bl	8002808 <HAL_TIM_PWM_ConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80008f0:	f7ff ff1c 	bl	800072c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	2208      	movs	r2, #8
 80008f8:	4619      	mov	r1, r3
 80008fa:	480d      	ldr	r0, [pc, #52]	@ (8000930 <MX_TIM2_Init+0x12c>)
 80008fc:	f001 ff84 	bl	8002808 <HAL_TIM_PWM_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000906:	f7ff ff11 	bl	800072c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800090a:	463b      	mov	r3, r7
 800090c:	220c      	movs	r2, #12
 800090e:	4619      	mov	r1, r3
 8000910:	4807      	ldr	r0, [pc, #28]	@ (8000930 <MX_TIM2_Init+0x12c>)
 8000912:	f001 ff79 	bl	8002808 <HAL_TIM_PWM_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 800091c:	f7ff ff06 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000920:	4803      	ldr	r0, [pc, #12]	@ (8000930 <MX_TIM2_Init+0x12c>)
 8000922:	f000 f8b1 	bl	8000a88 <HAL_TIM_MspPostInit>

}
 8000926:	bf00      	nop
 8000928:	3738      	adds	r7, #56	@ 0x38
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000002c 	.word	0x2000002c

08000934 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08e      	sub	sp, #56	@ 0x38
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000954:	463b      	mov	r3, r7
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
 8000962:	615a      	str	r2, [r3, #20]
 8000964:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000966:	4b2d      	ldr	r3, [pc, #180]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 8000968:	4a2d      	ldr	r2, [pc, #180]	@ (8000a20 <MX_TIM3_Init+0xec>)
 800096a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 800096c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 800096e:	224f      	movs	r2, #79	@ 0x4f
 8000970:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b2a      	ldr	r3, [pc, #168]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000978:	4b28      	ldr	r3, [pc, #160]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 800097a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800097e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000980:	4b26      	ldr	r3, [pc, #152]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000986:	4b25      	ldr	r3, [pc, #148]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 8000988:	2280      	movs	r2, #128	@ 0x80
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800098c:	4823      	ldr	r0, [pc, #140]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 800098e:	f001 fd71 	bl	8002474 <HAL_TIM_Base_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000998:	f7ff fec8 	bl	800072c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009a6:	4619      	mov	r1, r3
 80009a8:	481c      	ldr	r0, [pc, #112]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 80009aa:	f002 f841 	bl	8002a30 <HAL_TIM_ConfigClockSource>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80009b4:	f7ff feba 	bl	800072c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009b8:	4818      	ldr	r0, [pc, #96]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 80009ba:	f001 fdb2 	bl	8002522 <HAL_TIM_PWM_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80009c4:	f7ff feb2 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4811      	ldr	r0, [pc, #68]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 80009d8:	f002 fdd6 	bl	8003588 <HAL_TIMEx_MasterConfigSynchronization>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009e2:	f7ff fea3 	bl	800072c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e6:	2360      	movs	r3, #96	@ 0x60
 80009e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	4619      	mov	r1, r3
 80009fc:	4807      	ldr	r0, [pc, #28]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 80009fe:	f001 ff03 	bl	8002808 <HAL_TIM_PWM_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000a08:	f7ff fe90 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a0c:	4803      	ldr	r0, [pc, #12]	@ (8000a1c <MX_TIM3_Init+0xe8>)
 8000a0e:	f000 f83b 	bl	8000a88 <HAL_TIM_MspPostInit>

}
 8000a12:	bf00      	nop
 8000a14:	3738      	adds	r7, #56	@ 0x38
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000078 	.word	0x20000078
 8000a20:	40000400 	.word	0x40000400

08000a24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a34:	d10c      	bne.n	8000a50 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a36:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <HAL_TIM_Base_MspInit+0x5c>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3a:	4a11      	ldr	r2, [pc, #68]	@ (8000a80 <HAL_TIM_Base_MspInit+0x5c>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <HAL_TIM_Base_MspInit+0x5c>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a4e:	e010      	b.n	8000a72 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a0b      	ldr	r2, [pc, #44]	@ (8000a84 <HAL_TIM_Base_MspInit+0x60>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d10b      	bne.n	8000a72 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <HAL_TIM_Base_MspInit+0x5c>)
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a5e:	4a08      	ldr	r2, [pc, #32]	@ (8000a80 <HAL_TIM_Base_MspInit+0x5c>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a66:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <HAL_TIM_Base_MspInit+0x5c>)
 8000a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
}
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40000400 	.word	0x40000400

08000a88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	@ 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000aa8:	d11d      	bne.n	8000ae6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b21      	ldr	r3, [pc, #132]	@ (8000b30 <HAL_TIM_MspPostInit+0xa8>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aae:	4a20      	ldr	r2, [pc, #128]	@ (8000b30 <HAL_TIM_MspPostInit+0xa8>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b30 <HAL_TIM_MspPostInit+0xa8>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae0:	f000 fafe 	bl	80010e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ae4:	e020      	b.n	8000b28 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a12      	ldr	r2, [pc, #72]	@ (8000b34 <HAL_TIM_MspPostInit+0xac>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d11b      	bne.n	8000b28 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <HAL_TIM_MspPostInit+0xa8>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af4:	4a0e      	ldr	r2, [pc, #56]	@ (8000b30 <HAL_TIM_MspPostInit+0xa8>)
 8000af6:	f043 0310 	orr.w	r3, r3, #16
 8000afa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <HAL_TIM_MspPostInit+0xa8>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b00:	f003 0310 	and.w	r3, r3, #16
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <HAL_TIM_MspPostInit+0xb0>)
 8000b24:	f000 fadc 	bl	80010e0 <HAL_GPIO_Init>
}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	@ 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40000400 	.word	0x40000400
 8000b38:	48001000 	.word	0x48001000

08000b3c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b40:	4b22      	ldr	r3, [pc, #136]	@ (8000bcc <MX_UART4_Init+0x90>)
 8000b42:	4a23      	ldr	r2, [pc, #140]	@ (8000bd0 <MX_UART4_Init+0x94>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b46:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <MX_UART4_Init+0x90>)
 8000b48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b4c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bcc <MX_UART4_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b1d      	ldr	r3, [pc, #116]	@ (8000bcc <MX_UART4_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bcc <MX_UART4_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b1a      	ldr	r3, [pc, #104]	@ (8000bcc <MX_UART4_Init+0x90>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <MX_UART4_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <MX_UART4_Init+0x90>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b72:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <MX_UART4_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b78:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <MX_UART4_Init+0x90>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <MX_UART4_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b84:	4811      	ldr	r0, [pc, #68]	@ (8000bcc <MX_UART4_Init+0x90>)
 8000b86:	f002 fd95 	bl	80036b4 <HAL_UART_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000b90:	f7ff fdcc 	bl	800072c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b94:	2100      	movs	r1, #0
 8000b96:	480d      	ldr	r0, [pc, #52]	@ (8000bcc <MX_UART4_Init+0x90>)
 8000b98:	f003 fbbe 	bl	8004318 <HAL_UARTEx_SetTxFifoThreshold>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000ba2:	f7ff fdc3 	bl	800072c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4808      	ldr	r0, [pc, #32]	@ (8000bcc <MX_UART4_Init+0x90>)
 8000baa:	f003 fbf3 	bl	8004394 <HAL_UARTEx_SetRxFifoThreshold>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000bb4:	f7ff fdba 	bl	800072c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	@ (8000bcc <MX_UART4_Init+0x90>)
 8000bba:	f003 fb74 	bl	80042a6 <HAL_UARTEx_DisableFifoMode>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000bc4:	f7ff fdb2 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200000c4 	.word	0x200000c4
 8000bd0:	40004c00 	.word	0x40004c00

08000bd4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd8:	4b22      	ldr	r3, [pc, #136]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000bda:	4a23      	ldr	r2, [pc, #140]	@ (8000c68 <MX_USART1_UART_Init+0x94>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000bde:	4b21      	ldr	r3, [pc, #132]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000be0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000be4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b17      	ldr	r3, [pc, #92]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0a:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c10:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c16:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c1c:	4811      	ldr	r0, [pc, #68]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000c1e:	f002 fd49 	bl	80036b4 <HAL_UART_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c28:	f7ff fd80 	bl	800072c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	480d      	ldr	r0, [pc, #52]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000c30:	f003 fb72 	bl	8004318 <HAL_UARTEx_SetTxFifoThreshold>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c3a:	f7ff fd77 	bl	800072c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4808      	ldr	r0, [pc, #32]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000c42:	f003 fba7 	bl	8004394 <HAL_UARTEx_SetRxFifoThreshold>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c4c:	f7ff fd6e 	bl	800072c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c50:	4804      	ldr	r0, [pc, #16]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000c52:	f003 fb28 	bl	80042a6 <HAL_UARTEx_DisableFifoMode>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c5c:	f7ff fd66 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000158 	.word	0x20000158
 8000c68:	40013800 	.word	0x40013800

08000c6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b0a0      	sub	sp, #128	@ 0x80
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c84:	f107 0318 	add.w	r3, r7, #24
 8000c88:	2254      	movs	r2, #84	@ 0x54
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f003 fc0d 	bl	80044ac <memset>
  if(uartHandle->Instance==UART4)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a3e      	ldr	r2, [pc, #248]	@ (8000d90 <HAL_UART_MspInit+0x124>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d137      	bne.n	8000d0c <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c9c:	2308      	movs	r3, #8
 8000c9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca4:	f107 0318 	add.w	r3, r7, #24
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f001 f995 	bl	8001fd8 <HAL_RCCEx_PeriphCLKConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cb4:	f7ff fd3a 	bl	800072c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000cb8:	4b36      	ldr	r3, [pc, #216]	@ (8000d94 <HAL_UART_MspInit+0x128>)
 8000cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cbc:	4a35      	ldr	r2, [pc, #212]	@ (8000d94 <HAL_UART_MspInit+0x128>)
 8000cbe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000cc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cc4:	4b33      	ldr	r3, [pc, #204]	@ (8000d94 <HAL_UART_MspInit+0x128>)
 8000cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd0:	4b30      	ldr	r3, [pc, #192]	@ (8000d94 <HAL_UART_MspInit+0x128>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd4:	4a2f      	ldr	r2, [pc, #188]	@ (8000d94 <HAL_UART_MspInit+0x128>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cdc:	4b2d      	ldr	r3, [pc, #180]	@ (8000d94 <HAL_UART_MspInit+0x128>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ce8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000cec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000cfa:	2305      	movs	r3, #5
 8000cfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfe:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d02:	4619      	mov	r1, r3
 8000d04:	4824      	ldr	r0, [pc, #144]	@ (8000d98 <HAL_UART_MspInit+0x12c>)
 8000d06:	f000 f9eb 	bl	80010e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d0a:	e03c      	b.n	8000d86 <HAL_UART_MspInit+0x11a>
  else if(uartHandle->Instance==USART1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a22      	ldr	r2, [pc, #136]	@ (8000d9c <HAL_UART_MspInit+0x130>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d137      	bne.n	8000d86 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d16:	2301      	movs	r3, #1
 8000d18:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d1e:	f107 0318 	add.w	r3, r7, #24
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 f958 	bl	8001fd8 <HAL_RCCEx_PeriphCLKConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000d2e:	f7ff fcfd 	bl	800072c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d32:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <HAL_UART_MspInit+0x128>)
 8000d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d36:	4a17      	ldr	r2, [pc, #92]	@ (8000d94 <HAL_UART_MspInit+0x128>)
 8000d38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d3e:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <HAL_UART_MspInit+0x128>)
 8000d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_UART_MspInit+0x128>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4e:	4a11      	ldr	r2, [pc, #68]	@ (8000d94 <HAL_UART_MspInit+0x128>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d56:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <HAL_UART_MspInit+0x128>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d62:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d66:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d74:	2307      	movs	r3, #7
 8000d76:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d82:	f000 f9ad 	bl	80010e0 <HAL_GPIO_Init>
}
 8000d86:	bf00      	nop
 8000d88:	3780      	adds	r7, #128	@ 0x80
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40004c00 	.word	0x40004c00
 8000d94:	40021000 	.word	0x40021000
 8000d98:	48000800 	.word	0x48000800
 8000d9c:	40013800 	.word	0x40013800

08000da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000da0:	480d      	ldr	r0, [pc, #52]	@ (8000dd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000da2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da4:	f7ff fd1c 	bl	80007e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	@ (8000de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	@ (8000de4 <LoopForever+0xe>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dec <LoopForever+0x16>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dce:	f003 fb75 	bl	80044bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dd2:	f7ff fc29 	bl	8000628 <main>

08000dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd6:	e7fe      	b.n	8000dd6 <LoopForever>
  ldr   r0, =_estack
 8000dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000de4:	0800456c 	.word	0x0800456c
  ldr r2, =_sbss
 8000de8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000dec:	200001f0 	.word	0x200001f0

08000df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC1_2_IRQHandler>

08000df2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 f93d 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e02:	200f      	movs	r0, #15
 8000e04:	f000 f80e 	bl	8000e24 <HAL_InitTick>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d002      	beq.n	8000e14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	71fb      	strb	r3, [r7, #7]
 8000e12:	e001      	b.n	8000e18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e14:	f7ff fc90 	bl	8000738 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e18:	79fb      	ldrb	r3, [r7, #7]

}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e30:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <HAL_InitTick+0x68>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d022      	beq.n	8000e7e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e38:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <HAL_InitTick+0x6c>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <HAL_InitTick+0x68>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e44:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 f93a 	bl	80010c6 <HAL_SYSTICK_Config>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d10f      	bne.n	8000e78 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b0f      	cmp	r3, #15
 8000e5c:	d809      	bhi.n	8000e72 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e66:	f000 f914 	bl	8001092 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <HAL_InitTick+0x70>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	e007      	b.n	8000e82 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	e004      	b.n	8000e82 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	73fb      	strb	r3, [r7, #15]
 8000e7c:	e001      	b.n	8000e82 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	2000000c 	.word	0x2000000c
 8000e90:	20000004 	.word	0x20000004
 8000e94:	20000008 	.word	0x20000008

08000e98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e9c:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <HAL_IncTick+0x1c>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <HAL_IncTick+0x20>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a03      	ldr	r2, [pc, #12]	@ (8000eb4 <HAL_IncTick+0x1c>)
 8000ea8:	6013      	str	r3, [r2, #0]
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	200001ec 	.word	0x200001ec
 8000eb8:	2000000c 	.word	0x2000000c

08000ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	@ (8000ed0 <HAL_GetTick+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	200001ec 	.word	0x200001ec

08000ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000edc:	f7ff ffee 	bl	8000ebc <HAL_GetTick>
 8000ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000eec:	d004      	beq.n	8000ef8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eee:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <HAL_Delay+0x40>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ef8:	bf00      	nop
 8000efa:	f7ff ffdf 	bl	8000ebc <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d8f7      	bhi.n	8000efa <HAL_Delay+0x26>
  {
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000000c 	.word	0x2000000c

08000f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f28:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4a:	4a04      	ldr	r2, [pc, #16]	@ (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	60d3      	str	r3, [r2, #12]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f64:	4b04      	ldr	r3, [pc, #16]	@ (8000f78 <__NVIC_GetPriorityGrouping+0x18>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	f003 0307 	and.w	r3, r3, #7
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	@ (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	@ (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	@ 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	@ 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800105c:	f7ff ff8e 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	@ (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff47 	bl	8000f18 <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010a0:	f7ff ff5e 	bl	8000f60 <__NVIC_GetPriorityGrouping>
 80010a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	68b9      	ldr	r1, [r7, #8]
 80010aa:	6978      	ldr	r0, [r7, #20]
 80010ac:	f7ff ff90 	bl	8000fd0 <NVIC_EncodePriority>
 80010b0:	4602      	mov	r2, r0
 80010b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff5f 	bl	8000f7c <__NVIC_SetPriority>
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffb2 	bl	8001038 <SysTick_Config>
 80010d4:	4603      	mov	r3, r0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010ee:	e15a      	b.n	80013a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	2101      	movs	r1, #1
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	4013      	ands	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 814c 	beq.w	80013a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b01      	cmp	r3, #1
 8001112:	d005      	beq.n	8001120 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800111c:	2b02      	cmp	r3, #2
 800111e:	d130      	bne.n	8001182 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68da      	ldr	r2, [r3, #12]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001156:	2201      	movs	r2, #1
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	091b      	lsrs	r3, r3, #4
 800116c:	f003 0201 	and.w	r2, r3, #1
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	2b03      	cmp	r3, #3
 800118c:	d017      	beq.n	80011be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d123      	bne.n	8001212 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3208      	adds	r2, #8
 80011d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	220f      	movs	r2, #15
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	691a      	ldr	r2, [r3, #16]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	08da      	lsrs	r2, r3, #3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3208      	adds	r2, #8
 800120c:	6939      	ldr	r1, [r7, #16]
 800120e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0203 	and.w	r2, r3, #3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 80a6 	beq.w	80013a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001254:	4b5b      	ldr	r3, [pc, #364]	@ (80013c4 <HAL_GPIO_Init+0x2e4>)
 8001256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001258:	4a5a      	ldr	r2, [pc, #360]	@ (80013c4 <HAL_GPIO_Init+0x2e4>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001260:	4b58      	ldr	r3, [pc, #352]	@ (80013c4 <HAL_GPIO_Init+0x2e4>)
 8001262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800126c:	4a56      	ldr	r2, [pc, #344]	@ (80013c8 <HAL_GPIO_Init+0x2e8>)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	220f      	movs	r2, #15
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001296:	d01f      	beq.n	80012d8 <HAL_GPIO_Init+0x1f8>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a4c      	ldr	r2, [pc, #304]	@ (80013cc <HAL_GPIO_Init+0x2ec>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d019      	beq.n	80012d4 <HAL_GPIO_Init+0x1f4>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a4b      	ldr	r2, [pc, #300]	@ (80013d0 <HAL_GPIO_Init+0x2f0>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d013      	beq.n	80012d0 <HAL_GPIO_Init+0x1f0>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a4a      	ldr	r2, [pc, #296]	@ (80013d4 <HAL_GPIO_Init+0x2f4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d00d      	beq.n	80012cc <HAL_GPIO_Init+0x1ec>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a49      	ldr	r2, [pc, #292]	@ (80013d8 <HAL_GPIO_Init+0x2f8>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d007      	beq.n	80012c8 <HAL_GPIO_Init+0x1e8>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a48      	ldr	r2, [pc, #288]	@ (80013dc <HAL_GPIO_Init+0x2fc>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d101      	bne.n	80012c4 <HAL_GPIO_Init+0x1e4>
 80012c0:	2305      	movs	r3, #5
 80012c2:	e00a      	b.n	80012da <HAL_GPIO_Init+0x1fa>
 80012c4:	2306      	movs	r3, #6
 80012c6:	e008      	b.n	80012da <HAL_GPIO_Init+0x1fa>
 80012c8:	2304      	movs	r3, #4
 80012ca:	e006      	b.n	80012da <HAL_GPIO_Init+0x1fa>
 80012cc:	2303      	movs	r3, #3
 80012ce:	e004      	b.n	80012da <HAL_GPIO_Init+0x1fa>
 80012d0:	2302      	movs	r3, #2
 80012d2:	e002      	b.n	80012da <HAL_GPIO_Init+0x1fa>
 80012d4:	2301      	movs	r3, #1
 80012d6:	e000      	b.n	80012da <HAL_GPIO_Init+0x1fa>
 80012d8:	2300      	movs	r3, #0
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	f002 0203 	and.w	r2, r2, #3
 80012e0:	0092      	lsls	r2, r2, #2
 80012e2:	4093      	lsls	r3, r2
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ea:	4937      	ldr	r1, [pc, #220]	@ (80013c8 <HAL_GPIO_Init+0x2e8>)
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3302      	adds	r3, #2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012f8:	4b39      	ldr	r3, [pc, #228]	@ (80013e0 <HAL_GPIO_Init+0x300>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43db      	mvns	r3, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800131c:	4a30      	ldr	r2, [pc, #192]	@ (80013e0 <HAL_GPIO_Init+0x300>)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001322:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <HAL_GPIO_Init+0x300>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001346:	4a26      	ldr	r2, [pc, #152]	@ (80013e0 <HAL_GPIO_Init+0x300>)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800134c:	4b24      	ldr	r3, [pc, #144]	@ (80013e0 <HAL_GPIO_Init+0x300>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	43db      	mvns	r3, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001370:	4a1b      	ldr	r2, [pc, #108]	@ (80013e0 <HAL_GPIO_Init+0x300>)
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001376:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <HAL_GPIO_Init+0x300>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800139a:	4a11      	ldr	r2, [pc, #68]	@ (80013e0 <HAL_GPIO_Init+0x300>)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	3301      	adds	r3, #1
 80013a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	fa22 f303 	lsr.w	r3, r2, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f47f ae9d 	bne.w	80010f0 <HAL_GPIO_Init+0x10>
  }
}
 80013b6:	bf00      	nop
 80013b8:	bf00      	nop
 80013ba:	371c      	adds	r7, #28
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010000 	.word	0x40010000
 80013cc:	48000400 	.word	0x48000400
 80013d0:	48000800 	.word	0x48000800
 80013d4:	48000c00 	.word	0x48000c00
 80013d8:	48001000 	.word	0x48001000
 80013dc:	48001400 	.word	0x48001400
 80013e0:	40010400 	.word	0x40010400

080013e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
 80013f0:	4613      	mov	r3, r2
 80013f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013f4:	787b      	ldrb	r3, [r7, #1]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013fa:	887a      	ldrh	r2, [r7, #2]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001400:	e002      	b.n	8001408 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d141      	bne.n	80014a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001422:	4b4b      	ldr	r3, [pc, #300]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800142a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800142e:	d131      	bne.n	8001494 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001430:	4b47      	ldr	r3, [pc, #284]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001436:	4a46      	ldr	r2, [pc, #280]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800143c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001440:	4b43      	ldr	r3, [pc, #268]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001448:	4a41      	ldr	r2, [pc, #260]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800144e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001450:	4b40      	ldr	r3, [pc, #256]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2232      	movs	r2, #50	@ 0x32
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	4a3f      	ldr	r2, [pc, #252]	@ (8001558 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800145c:	fba2 2303 	umull	r2, r3, r2, r3
 8001460:	0c9b      	lsrs	r3, r3, #18
 8001462:	3301      	adds	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001466:	e002      	b.n	800146e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3b01      	subs	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800146e:	4b38      	ldr	r3, [pc, #224]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800147a:	d102      	bne.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f2      	bne.n	8001468 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001482:	4b33      	ldr	r3, [pc, #204]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800148a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800148e:	d158      	bne.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e057      	b.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001494:	4b2e      	ldr	r3, [pc, #184]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800149a:	4a2d      	ldr	r2, [pc, #180]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800149c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014a4:	e04d      	b.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014ac:	d141      	bne.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ae:	4b28      	ldr	r3, [pc, #160]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ba:	d131      	bne.n	8001520 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014bc:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014c2:	4a23      	ldr	r2, [pc, #140]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014cc:	4b20      	ldr	r3, [pc, #128]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2232      	movs	r2, #50	@ 0x32
 80014e2:	fb02 f303 	mul.w	r3, r2, r3
 80014e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001558 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	0c9b      	lsrs	r3, r3, #18
 80014ee:	3301      	adds	r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f2:	e002      	b.n	80014fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001506:	d102      	bne.n	800150e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f2      	bne.n	80014f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800150e:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800151a:	d112      	bne.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e011      	b.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001520:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001522:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001526:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800152c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001530:	e007      	b.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001532:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800153a:	4a05      	ldr	r2, [pc, #20]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800153c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001540:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	40007000 	.word	0x40007000
 8001554:	20000004 	.word	0x20000004
 8001558:	431bde83 	.word	0x431bde83

0800155c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001560:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001566:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800156a:	6093      	str	r3, [r2, #8]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40007000 	.word	0x40007000

0800157c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e2fe      	b.n	8001b8c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d075      	beq.n	8001686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800159a:	4b97      	ldr	r3, [pc, #604]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015a4:	4b94      	ldr	r3, [pc, #592]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	2b0c      	cmp	r3, #12
 80015b2:	d102      	bne.n	80015ba <HAL_RCC_OscConfig+0x3e>
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d002      	beq.n	80015c0 <HAL_RCC_OscConfig+0x44>
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d10b      	bne.n	80015d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c0:	4b8d      	ldr	r3, [pc, #564]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d05b      	beq.n	8001684 <HAL_RCC_OscConfig+0x108>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d157      	bne.n	8001684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e2d9      	b.n	8001b8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015e0:	d106      	bne.n	80015f0 <HAL_RCC_OscConfig+0x74>
 80015e2:	4b85      	ldr	r3, [pc, #532]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a84      	ldr	r2, [pc, #528]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 80015e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e01d      	b.n	800162c <HAL_RCC_OscConfig+0xb0>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x98>
 80015fa:	4b7f      	ldr	r3, [pc, #508]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a7e      	ldr	r2, [pc, #504]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 8001600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b7c      	ldr	r3, [pc, #496]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a7b      	ldr	r2, [pc, #492]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 800160c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e00b      	b.n	800162c <HAL_RCC_OscConfig+0xb0>
 8001614:	4b78      	ldr	r3, [pc, #480]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a77      	ldr	r2, [pc, #476]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 800161a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b75      	ldr	r3, [pc, #468]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a74      	ldr	r2, [pc, #464]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 8001626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800162a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d013      	beq.n	800165c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fc42 	bl	8000ebc <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fc3e 	bl	8000ebc <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	@ 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e29e      	b.n	8001b8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164e:	4b6a      	ldr	r3, [pc, #424]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0xc0>
 800165a:	e014      	b.n	8001686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fc2e 	bl	8000ebc <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff fc2a 	bl	8000ebc <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	@ 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e28a      	b.n	8001b8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001676:	4b60      	ldr	r3, [pc, #384]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0xe8>
 8001682:	e000      	b.n	8001686 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d075      	beq.n	800177e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001692:	4b59      	ldr	r3, [pc, #356]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800169c:	4b56      	ldr	r3, [pc, #344]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	2b0c      	cmp	r3, #12
 80016aa:	d102      	bne.n	80016b2 <HAL_RCC_OscConfig+0x136>
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d002      	beq.n	80016b8 <HAL_RCC_OscConfig+0x13c>
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d11f      	bne.n	80016f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b8:	4b4f      	ldr	r3, [pc, #316]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_OscConfig+0x154>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e25d      	b.n	8001b8c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d0:	4b49      	ldr	r3, [pc, #292]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	061b      	lsls	r3, r3, #24
 80016de:	4946      	ldr	r1, [pc, #280]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016e4:	4b45      	ldr	r3, [pc, #276]	@ (80017fc <HAL_RCC_OscConfig+0x280>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fb9b 	bl	8000e24 <HAL_InitTick>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d043      	beq.n	800177c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e249      	b.n	8001b8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d023      	beq.n	8001748 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001700:	4b3d      	ldr	r3, [pc, #244]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a3c      	ldr	r2, [pc, #240]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 8001706:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800170a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff fbd6 	bl	8000ebc <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001714:	f7ff fbd2 	bl	8000ebc <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e232      	b.n	8001b8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001726:	4b34      	ldr	r3, [pc, #208]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001732:	4b31      	ldr	r3, [pc, #196]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	061b      	lsls	r3, r3, #24
 8001740:	492d      	ldr	r1, [pc, #180]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 8001742:	4313      	orrs	r3, r2
 8001744:	604b      	str	r3, [r1, #4]
 8001746:	e01a      	b.n	800177e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001748:	4b2b      	ldr	r3, [pc, #172]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a2a      	ldr	r2, [pc, #168]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 800174e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fbb2 	bl	8000ebc <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175c:	f7ff fbae 	bl	8000ebc <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e20e      	b.n	8001b8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800176e:	4b22      	ldr	r3, [pc, #136]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x1e0>
 800177a:	e000      	b.n	800177e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800177c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b00      	cmp	r3, #0
 8001788:	d041      	beq.n	800180e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d01c      	beq.n	80017cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001792:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 8001794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001798:	4a17      	ldr	r2, [pc, #92]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a2:	f7ff fb8b 	bl	8000ebc <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017aa:	f7ff fb87 	bl	8000ebc <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e1e7      	b.n	8001b8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017bc:	4b0e      	ldr	r3, [pc, #56]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 80017be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0ef      	beq.n	80017aa <HAL_RCC_OscConfig+0x22e>
 80017ca:	e020      	b.n	800180e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017cc:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 80017ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017d2:	4a09      	ldr	r2, [pc, #36]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017dc:	f7ff fb6e 	bl	8000ebc <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e2:	e00d      	b.n	8001800 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e4:	f7ff fb6a 	bl	8000ebc <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d906      	bls.n	8001800 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e1ca      	b.n	8001b8c <HAL_RCC_OscConfig+0x610>
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000
 80017fc:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001800:	4b8c      	ldr	r3, [pc, #560]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 8001802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1ea      	bne.n	80017e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80a6 	beq.w	8001968 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181c:	2300      	movs	r3, #0
 800181e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001820:	4b84      	ldr	r3, [pc, #528]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 8001822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_RCC_OscConfig+0x2b4>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x2b6>
 8001830:	2300      	movs	r3, #0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00d      	beq.n	8001852 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4b7f      	ldr	r3, [pc, #508]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183a:	4a7e      	ldr	r2, [pc, #504]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001840:	6593      	str	r3, [r2, #88]	@ 0x58
 8001842:	4b7c      	ldr	r3, [pc, #496]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800184e:	2301      	movs	r3, #1
 8001850:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001852:	4b79      	ldr	r3, [pc, #484]	@ (8001a38 <HAL_RCC_OscConfig+0x4bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800185a:	2b00      	cmp	r3, #0
 800185c:	d118      	bne.n	8001890 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800185e:	4b76      	ldr	r3, [pc, #472]	@ (8001a38 <HAL_RCC_OscConfig+0x4bc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a75      	ldr	r2, [pc, #468]	@ (8001a38 <HAL_RCC_OscConfig+0x4bc>)
 8001864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186a:	f7ff fb27 	bl	8000ebc <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001872:	f7ff fb23 	bl	8000ebc <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e183      	b.n	8001b8c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001884:	4b6c      	ldr	r3, [pc, #432]	@ (8001a38 <HAL_RCC_OscConfig+0x4bc>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d108      	bne.n	80018aa <HAL_RCC_OscConfig+0x32e>
 8001898:	4b66      	ldr	r3, [pc, #408]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 800189a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800189e:	4a65      	ldr	r2, [pc, #404]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018a8:	e024      	b.n	80018f4 <HAL_RCC_OscConfig+0x378>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b05      	cmp	r3, #5
 80018b0:	d110      	bne.n	80018d4 <HAL_RCC_OscConfig+0x358>
 80018b2:	4b60      	ldr	r3, [pc, #384]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 80018b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b8:	4a5e      	ldr	r2, [pc, #376]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 80018c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018c8:	4a5a      	ldr	r2, [pc, #360]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018d2:	e00f      	b.n	80018f4 <HAL_RCC_OscConfig+0x378>
 80018d4:	4b57      	ldr	r3, [pc, #348]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 80018d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018da:	4a56      	ldr	r2, [pc, #344]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018e4:	4b53      	ldr	r3, [pc, #332]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 80018e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ea:	4a52      	ldr	r2, [pc, #328]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 80018ec:	f023 0304 	bic.w	r3, r3, #4
 80018f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d016      	beq.n	800192a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff fade 	bl	8000ebc <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001902:	e00a      	b.n	800191a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001904:	f7ff fada 	bl	8000ebc <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e138      	b.n	8001b8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800191a:	4b46      	ldr	r3, [pc, #280]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 800191c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0ed      	beq.n	8001904 <HAL_RCC_OscConfig+0x388>
 8001928:	e015      	b.n	8001956 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192a:	f7ff fac7 	bl	8000ebc <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001930:	e00a      	b.n	8001948 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001932:	f7ff fac3 	bl	8000ebc <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001940:	4293      	cmp	r3, r2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e121      	b.n	8001b8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001948:	4b3a      	ldr	r3, [pc, #232]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 800194a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1ed      	bne.n	8001932 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001956:	7ffb      	ldrb	r3, [r7, #31]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195c:	4b35      	ldr	r3, [pc, #212]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 800195e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001960:	4a34      	ldr	r2, [pc, #208]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 8001962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001966:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0320 	and.w	r3, r3, #32
 8001970:	2b00      	cmp	r3, #0
 8001972:	d03c      	beq.n	80019ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d01c      	beq.n	80019b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800197c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 800197e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001982:	4a2c      	ldr	r2, [pc, #176]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198c:	f7ff fa96 	bl	8000ebc <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001994:	f7ff fa92 	bl	8000ebc <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e0f2      	b.n	8001b8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019a6:	4b23      	ldr	r3, [pc, #140]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 80019a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0ef      	beq.n	8001994 <HAL_RCC_OscConfig+0x418>
 80019b4:	e01b      	b.n	80019ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 80019b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c6:	f7ff fa79 	bl	8000ebc <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ce:	f7ff fa75 	bl	8000ebc <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e0d5      	b.n	8001b8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019e0:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 80019e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1ef      	bne.n	80019ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 80c9 	beq.w	8001b8a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 030c 	and.w	r3, r3, #12
 8001a00:	2b0c      	cmp	r3, #12
 8001a02:	f000 8083 	beq.w	8001b0c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d15e      	bne.n	8001acc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0e:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a08      	ldr	r2, [pc, #32]	@ (8001a34 <HAL_RCC_OscConfig+0x4b8>)
 8001a14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fa4f 	bl	8000ebc <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a20:	e00c      	b.n	8001a3c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff fa4b 	bl	8000ebc <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d905      	bls.n	8001a3c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e0ab      	b.n	8001b8c <HAL_RCC_OscConfig+0x610>
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3c:	4b55      	ldr	r3, [pc, #340]	@ (8001b94 <HAL_RCC_OscConfig+0x618>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1ec      	bne.n	8001a22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a48:	4b52      	ldr	r3, [pc, #328]	@ (8001b94 <HAL_RCC_OscConfig+0x618>)
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	4b52      	ldr	r3, [pc, #328]	@ (8001b98 <HAL_RCC_OscConfig+0x61c>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6a11      	ldr	r1, [r2, #32]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a58:	3a01      	subs	r2, #1
 8001a5a:	0112      	lsls	r2, r2, #4
 8001a5c:	4311      	orrs	r1, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001a62:	0212      	lsls	r2, r2, #8
 8001a64:	4311      	orrs	r1, r2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a6a:	0852      	lsrs	r2, r2, #1
 8001a6c:	3a01      	subs	r2, #1
 8001a6e:	0552      	lsls	r2, r2, #21
 8001a70:	4311      	orrs	r1, r2
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a76:	0852      	lsrs	r2, r2, #1
 8001a78:	3a01      	subs	r2, #1
 8001a7a:	0652      	lsls	r2, r2, #25
 8001a7c:	4311      	orrs	r1, r2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a82:	06d2      	lsls	r2, r2, #27
 8001a84:	430a      	orrs	r2, r1
 8001a86:	4943      	ldr	r1, [pc, #268]	@ (8001b94 <HAL_RCC_OscConfig+0x618>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a8c:	4b41      	ldr	r3, [pc, #260]	@ (8001b94 <HAL_RCC_OscConfig+0x618>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a40      	ldr	r2, [pc, #256]	@ (8001b94 <HAL_RCC_OscConfig+0x618>)
 8001a92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a98:	4b3e      	ldr	r3, [pc, #248]	@ (8001b94 <HAL_RCC_OscConfig+0x618>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4a3d      	ldr	r2, [pc, #244]	@ (8001b94 <HAL_RCC_OscConfig+0x618>)
 8001a9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aa2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fa0a 	bl	8000ebc <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aac:	f7ff fa06 	bl	8000ebc <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e066      	b.n	8001b8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abe:	4b35      	ldr	r3, [pc, #212]	@ (8001b94 <HAL_RCC_OscConfig+0x618>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x530>
 8001aca:	e05e      	b.n	8001b8a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001acc:	4b31      	ldr	r3, [pc, #196]	@ (8001b94 <HAL_RCC_OscConfig+0x618>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a30      	ldr	r2, [pc, #192]	@ (8001b94 <HAL_RCC_OscConfig+0x618>)
 8001ad2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f9f0 	bl	8000ebc <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f9ec 	bl	8000ebc <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e04c      	b.n	8001b8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af2:	4b28      	ldr	r3, [pc, #160]	@ (8001b94 <HAL_RCC_OscConfig+0x618>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001afe:	4b25      	ldr	r3, [pc, #148]	@ (8001b94 <HAL_RCC_OscConfig+0x618>)
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	4924      	ldr	r1, [pc, #144]	@ (8001b94 <HAL_RCC_OscConfig+0x618>)
 8001b04:	4b25      	ldr	r3, [pc, #148]	@ (8001b9c <HAL_RCC_OscConfig+0x620>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	60cb      	str	r3, [r1, #12]
 8001b0a:	e03e      	b.n	8001b8a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e039      	b.n	8001b8c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b18:	4b1e      	ldr	r3, [pc, #120]	@ (8001b94 <HAL_RCC_OscConfig+0x618>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f003 0203 	and.w	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d12c      	bne.n	8001b86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b36:	3b01      	subs	r3, #1
 8001b38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d123      	bne.n	8001b86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b48:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d11b      	bne.n	8001b86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b58:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d113      	bne.n	8001b86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b68:	085b      	lsrs	r3, r3, #1
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d109      	bne.n	8001b86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b7c:	085b      	lsrs	r3, r3, #1
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d001      	beq.n	8001b8a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021000 	.word	0x40021000
 8001b98:	019f800c 	.word	0x019f800c
 8001b9c:	feeefffc 	.word	0xfeeefffc

08001ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e11e      	b.n	8001df6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b91      	ldr	r3, [pc, #580]	@ (8001e00 <HAL_RCC_ClockConfig+0x260>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d910      	bls.n	8001be8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b8e      	ldr	r3, [pc, #568]	@ (8001e00 <HAL_RCC_ClockConfig+0x260>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 020f 	bic.w	r2, r3, #15
 8001bce:	498c      	ldr	r1, [pc, #560]	@ (8001e00 <HAL_RCC_ClockConfig+0x260>)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b8a      	ldr	r3, [pc, #552]	@ (8001e00 <HAL_RCC_ClockConfig+0x260>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e106      	b.n	8001df6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d073      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d129      	bne.n	8001c50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfc:	4b81      	ldr	r3, [pc, #516]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0f4      	b.n	8001df6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c0c:	f000 f99e 	bl	8001f4c <RCC_GetSysClockFreqFromPLLSource>
 8001c10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4a7c      	ldr	r2, [pc, #496]	@ (8001e08 <HAL_RCC_ClockConfig+0x268>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d93f      	bls.n	8001c9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c1a:	4b7a      	ldr	r3, [pc, #488]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d009      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d033      	beq.n	8001c9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d12f      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c3a:	4b72      	ldr	r3, [pc, #456]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c42:	4a70      	ldr	r2, [pc, #448]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c4a:	2380      	movs	r3, #128	@ 0x80
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	e024      	b.n	8001c9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d107      	bne.n	8001c68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c58:	4b6a      	ldr	r3, [pc, #424]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d109      	bne.n	8001c78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0c6      	b.n	8001df6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c68:	4b66      	ldr	r3, [pc, #408]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0be      	b.n	8001df6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c78:	f000 f8ce 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8001c7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4a61      	ldr	r2, [pc, #388]	@ (8001e08 <HAL_RCC_ClockConfig+0x268>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d909      	bls.n	8001c9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c86:	4b5f      	ldr	r3, [pc, #380]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c8e:	4a5d      	ldr	r2, [pc, #372]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c96:	2380      	movs	r3, #128	@ 0x80
 8001c98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c9a:	4b5a      	ldr	r3, [pc, #360]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f023 0203 	bic.w	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4957      	ldr	r1, [pc, #348]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cac:	f7ff f906 	bl	8000ebc <HAL_GetTick>
 8001cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb4:	f7ff f902 	bl	8000ebc <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e095      	b.n	8001df6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	4b4e      	ldr	r3, [pc, #312]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 020c 	and.w	r2, r3, #12
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d1eb      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d023      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cf4:	4b43      	ldr	r3, [pc, #268]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	4a42      	ldr	r2, [pc, #264]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001cfa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cfe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d007      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d0c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001d14:	4a3b      	ldr	r2, [pc, #236]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001d16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d1c:	4b39      	ldr	r3, [pc, #228]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	4936      	ldr	r1, [pc, #216]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	608b      	str	r3, [r1, #8]
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b80      	cmp	r3, #128	@ 0x80
 8001d34:	d105      	bne.n	8001d42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d36:	4b33      	ldr	r3, [pc, #204]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	4a32      	ldr	r2, [pc, #200]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001d3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d42:	4b2f      	ldr	r3, [pc, #188]	@ (8001e00 <HAL_RCC_ClockConfig+0x260>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d21d      	bcs.n	8001d8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d50:	4b2b      	ldr	r3, [pc, #172]	@ (8001e00 <HAL_RCC_ClockConfig+0x260>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f023 020f 	bic.w	r2, r3, #15
 8001d58:	4929      	ldr	r1, [pc, #164]	@ (8001e00 <HAL_RCC_ClockConfig+0x260>)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d60:	f7ff f8ac 	bl	8000ebc <HAL_GetTick>
 8001d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d68:	f7ff f8a8 	bl	8000ebc <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e03b      	b.n	8001df6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b20      	ldr	r3, [pc, #128]	@ (8001e00 <HAL_RCC_ClockConfig+0x260>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d1ed      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d98:	4b1a      	ldr	r3, [pc, #104]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4917      	ldr	r1, [pc, #92]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d009      	beq.n	8001dca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001db6:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	490f      	ldr	r1, [pc, #60]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dca:	f000 f825 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <HAL_RCC_ClockConfig+0x264>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	490c      	ldr	r1, [pc, #48]	@ (8001e0c <HAL_RCC_ClockConfig+0x26c>)
 8001ddc:	5ccb      	ldrb	r3, [r1, r3]
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	fa22 f303 	lsr.w	r3, r2, r3
 8001de6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e10 <HAL_RCC_ClockConfig+0x270>)
 8001de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001dea:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <HAL_RCC_ClockConfig+0x274>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f818 	bl	8000e24 <HAL_InitTick>
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40022000 	.word	0x40022000
 8001e04:	40021000 	.word	0x40021000
 8001e08:	04c4b400 	.word	0x04c4b400
 8001e0c:	0800451c 	.word	0x0800451c
 8001e10:	20000004 	.word	0x20000004
 8001e14:	20000008 	.word	0x20000008

08001e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d102      	bne.n	8001e30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	e047      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e30:	4b27      	ldr	r3, [pc, #156]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d102      	bne.n	8001e42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e3c:	4b26      	ldr	r3, [pc, #152]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	e03e      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e42:	4b23      	ldr	r3, [pc, #140]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	d136      	bne.n	8001ebc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e58:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	3301      	adds	r3, #1
 8001e64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d10c      	bne.n	8001e86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e6c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e74:	4a16      	ldr	r2, [pc, #88]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e76:	68d2      	ldr	r2, [r2, #12]
 8001e78:	0a12      	lsrs	r2, r2, #8
 8001e7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	617b      	str	r3, [r7, #20]
      break;
 8001e84:	e00c      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e86:	4a13      	ldr	r2, [pc, #76]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8e:	4a10      	ldr	r2, [pc, #64]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e90:	68d2      	ldr	r2, [r2, #12]
 8001e92:	0a12      	lsrs	r2, r2, #8
 8001e94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e98:	fb02 f303 	mul.w	r3, r2, r3
 8001e9c:	617b      	str	r3, [r7, #20]
      break;
 8001e9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0e5b      	lsrs	r3, r3, #25
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	3301      	adds	r3, #1
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	e001      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ec0:	693b      	ldr	r3, [r7, #16]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	00f42400 	.word	0x00f42400
 8001ed8:	007a1200 	.word	0x007a1200

08001edc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	@ (8001ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000004 	.word	0x20000004

08001ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ef8:	f7ff fff0 	bl	8001edc <HAL_RCC_GetHCLKFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	4904      	ldr	r1, [pc, #16]	@ (8001f1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	0800452c 	.word	0x0800452c

08001f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f24:	f7ff ffda 	bl	8001edc <HAL_RCC_GetHCLKFreq>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	0adb      	lsrs	r3, r3, #11
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	4904      	ldr	r1, [pc, #16]	@ (8001f48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f36:	5ccb      	ldrb	r3, [r1, r3]
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000
 8001f48:	0800452c 	.word	0x0800452c

08001f4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f52:	4b1e      	ldr	r3, [pc, #120]	@ (8001fcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	3301      	adds	r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d10c      	bne.n	8001f8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f70:	4a17      	ldr	r2, [pc, #92]	@ (8001fd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f78:	4a14      	ldr	r2, [pc, #80]	@ (8001fcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f7a:	68d2      	ldr	r2, [r2, #12]
 8001f7c:	0a12      	lsrs	r2, r2, #8
 8001f7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f82:	fb02 f303 	mul.w	r3, r2, r3
 8001f86:	617b      	str	r3, [r7, #20]
    break;
 8001f88:	e00c      	b.n	8001fa4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f8a:	4a12      	ldr	r2, [pc, #72]	@ (8001fd4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f92:	4a0e      	ldr	r2, [pc, #56]	@ (8001fcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f94:	68d2      	ldr	r2, [r2, #12]
 8001f96:	0a12      	lsrs	r2, r2, #8
 8001f98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f9c:	fb02 f303 	mul.w	r3, r2, r3
 8001fa0:	617b      	str	r3, [r7, #20]
    break;
 8001fa2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fa4:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	0e5b      	lsrs	r3, r3, #25
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	3301      	adds	r3, #1
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001fbe:	687b      	ldr	r3, [r7, #4]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	371c      	adds	r7, #28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	007a1200 	.word	0x007a1200
 8001fd4:	00f42400 	.word	0x00f42400

08001fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8098 	beq.w	8002126 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffa:	4b43      	ldr	r3, [pc, #268]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10d      	bne.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	4b40      	ldr	r3, [pc, #256]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200a:	4a3f      	ldr	r2, [pc, #252]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002010:	6593      	str	r3, [r2, #88]	@ 0x58
 8002012:	4b3d      	ldr	r3, [pc, #244]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800201e:	2301      	movs	r3, #1
 8002020:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002022:	4b3a      	ldr	r3, [pc, #232]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a39      	ldr	r2, [pc, #228]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800202c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800202e:	f7fe ff45 	bl	8000ebc <HAL_GetTick>
 8002032:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002034:	e009      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002036:	f7fe ff41 	bl	8000ebc <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d902      	bls.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	74fb      	strb	r3, [r7, #19]
        break;
 8002048:	e005      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800204a:	4b30      	ldr	r3, [pc, #192]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0ef      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002056:	7cfb      	ldrb	r3, [r7, #19]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d159      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800205c:	4b2a      	ldr	r3, [pc, #168]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002066:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d01e      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	429a      	cmp	r2, r3
 8002076:	d019      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002078:	4b23      	ldr	r3, [pc, #140]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002082:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002084:	4b20      	ldr	r3, [pc, #128]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208a:	4a1f      	ldr	r2, [pc, #124]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800208c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002094:	4b1c      	ldr	r3, [pc, #112]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209a:	4a1b      	ldr	r2, [pc, #108]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800209c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020a4:	4a18      	ldr	r2, [pc, #96]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d016      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b6:	f7fe ff01 	bl	8000ebc <HAL_GetTick>
 80020ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020bc:	e00b      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020be:	f7fe fefd 	bl	8000ebc <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d902      	bls.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	74fb      	strb	r3, [r7, #19]
            break;
 80020d4:	e006      	b.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0ec      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80020e4:	7cfb      	ldrb	r3, [r7, #19]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10b      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020ea:	4b07      	ldr	r3, [pc, #28]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020f8:	4903      	ldr	r1, [pc, #12]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002100:	e008      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002102:	7cfb      	ldrb	r3, [r7, #19]
 8002104:	74bb      	strb	r3, [r7, #18]
 8002106:	e005      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002108:	40021000 	.word	0x40021000
 800210c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002110:	7cfb      	ldrb	r3, [r7, #19]
 8002112:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002114:	7c7b      	ldrb	r3, [r7, #17]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d105      	bne.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211a:	4ba7      	ldr	r3, [pc, #668]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211e:	4aa6      	ldr	r2, [pc, #664]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002120:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002124:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002132:	4ba1      	ldr	r3, [pc, #644]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002138:	f023 0203 	bic.w	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	499d      	ldr	r1, [pc, #628]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002154:	4b98      	ldr	r3, [pc, #608]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215a:	f023 020c 	bic.w	r2, r3, #12
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	4995      	ldr	r1, [pc, #596]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002176:	4b90      	ldr	r3, [pc, #576]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	498c      	ldr	r1, [pc, #560]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002198:	4b87      	ldr	r3, [pc, #540]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800219e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	4984      	ldr	r1, [pc, #528]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021ba:	4b7f      	ldr	r3, [pc, #508]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	497b      	ldr	r1, [pc, #492]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021dc:	4b76      	ldr	r3, [pc, #472]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	4973      	ldr	r1, [pc, #460]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021fe:	4b6e      	ldr	r3, [pc, #440]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002204:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	496a      	ldr	r1, [pc, #424]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002220:	4b65      	ldr	r3, [pc, #404]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002226:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	4962      	ldr	r1, [pc, #392]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002242:	4b5d      	ldr	r3, [pc, #372]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002248:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002250:	4959      	ldr	r1, [pc, #356]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002264:	4b54      	ldr	r3, [pc, #336]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002266:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800226a:	f023 0203 	bic.w	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002272:	4951      	ldr	r1, [pc, #324]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002286:	4b4c      	ldr	r3, [pc, #304]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002294:	4948      	ldr	r1, [pc, #288]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d015      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022a8:	4b43      	ldr	r3, [pc, #268]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	4940      	ldr	r1, [pc, #256]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022c6:	d105      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c8:	4b3b      	ldr	r3, [pc, #236]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4a3a      	ldr	r2, [pc, #232]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022d2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d015      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022e0:	4b35      	ldr	r3, [pc, #212]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ee:	4932      	ldr	r1, [pc, #200]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022fe:	d105      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002300:	4b2d      	ldr	r3, [pc, #180]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4a2c      	ldr	r2, [pc, #176]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800230a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d015      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002318:	4b27      	ldr	r3, [pc, #156]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002326:	4924      	ldr	r1, [pc, #144]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002332:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002336:	d105      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002338:	4b1f      	ldr	r3, [pc, #124]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4a1e      	ldr	r2, [pc, #120]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800233e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002342:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d015      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002350:	4b19      	ldr	r3, [pc, #100]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002356:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235e:	4916      	ldr	r1, [pc, #88]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800236a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800236e:	d105      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002370:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4a10      	ldr	r2, [pc, #64]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002376:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800237a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d019      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002388:	4b0b      	ldr	r3, [pc, #44]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800238e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	4908      	ldr	r1, [pc, #32]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023a6:	d109      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a8:	4b03      	ldr	r3, [pc, #12]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4a02      	ldr	r2, [pc, #8]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023b2:	60d3      	str	r3, [r2, #12]
 80023b4:	e002      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d015      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023c8:	4b29      	ldr	r3, [pc, #164]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	4926      	ldr	r1, [pc, #152]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023e6:	d105      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023e8:	4b21      	ldr	r3, [pc, #132]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4a20      	ldr	r2, [pc, #128]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d015      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002400:	4b1b      	ldr	r3, [pc, #108]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002406:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800240e:	4918      	ldr	r1, [pc, #96]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800241a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800241e:	d105      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002420:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4a12      	ldr	r2, [pc, #72]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800242a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d015      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002438:	4b0d      	ldr	r3, [pc, #52]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800243a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800243e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002446:	490a      	ldr	r1, [pc, #40]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002452:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002456:	d105      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002458:	4b05      	ldr	r3, [pc, #20]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4a04      	ldr	r2, [pc, #16]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800245e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002462:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002464:	7cbb      	ldrb	r3, [r7, #18]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000

08002474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e049      	b.n	800251a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7fe fac2 	bl	8000a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3304      	adds	r3, #4
 80024b0:	4619      	mov	r1, r3
 80024b2:	4610      	mov	r0, r2
 80024b4:	f000 fbc8 	bl	8002c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e049      	b.n	80025c8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d106      	bne.n	800254e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f841 	bl	80025d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2202      	movs	r2, #2
 8002552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3304      	adds	r3, #4
 800255e:	4619      	mov	r1, r3
 8002560:	4610      	mov	r0, r2
 8002562:	f000 fb71 	bl	8002c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d109      	bne.n	8002608 <HAL_TIM_PWM_Start+0x24>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	bf14      	ite	ne
 8002600:	2301      	movne	r3, #1
 8002602:	2300      	moveq	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	e03c      	b.n	8002682 <HAL_TIM_PWM_Start+0x9e>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	2b04      	cmp	r3, #4
 800260c:	d109      	bne.n	8002622 <HAL_TIM_PWM_Start+0x3e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b01      	cmp	r3, #1
 8002618:	bf14      	ite	ne
 800261a:	2301      	movne	r3, #1
 800261c:	2300      	moveq	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	e02f      	b.n	8002682 <HAL_TIM_PWM_Start+0x9e>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b08      	cmp	r3, #8
 8002626:	d109      	bne.n	800263c <HAL_TIM_PWM_Start+0x58>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b01      	cmp	r3, #1
 8002632:	bf14      	ite	ne
 8002634:	2301      	movne	r3, #1
 8002636:	2300      	moveq	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	e022      	b.n	8002682 <HAL_TIM_PWM_Start+0x9e>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	2b0c      	cmp	r3, #12
 8002640:	d109      	bne.n	8002656 <HAL_TIM_PWM_Start+0x72>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	bf14      	ite	ne
 800264e:	2301      	movne	r3, #1
 8002650:	2300      	moveq	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	e015      	b.n	8002682 <HAL_TIM_PWM_Start+0x9e>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b10      	cmp	r3, #16
 800265a:	d109      	bne.n	8002670 <HAL_TIM_PWM_Start+0x8c>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	bf14      	ite	ne
 8002668:	2301      	movne	r3, #1
 800266a:	2300      	moveq	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	e008      	b.n	8002682 <HAL_TIM_PWM_Start+0x9e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	bf14      	ite	ne
 800267c:	2301      	movne	r3, #1
 800267e:	2300      	moveq	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e0a6      	b.n	80027d8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d104      	bne.n	800269a <HAL_TIM_PWM_Start+0xb6>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002698:	e023      	b.n	80026e2 <HAL_TIM_PWM_Start+0xfe>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b04      	cmp	r3, #4
 800269e:	d104      	bne.n	80026aa <HAL_TIM_PWM_Start+0xc6>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026a8:	e01b      	b.n	80026e2 <HAL_TIM_PWM_Start+0xfe>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d104      	bne.n	80026ba <HAL_TIM_PWM_Start+0xd6>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2202      	movs	r2, #2
 80026b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026b8:	e013      	b.n	80026e2 <HAL_TIM_PWM_Start+0xfe>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b0c      	cmp	r3, #12
 80026be:	d104      	bne.n	80026ca <HAL_TIM_PWM_Start+0xe6>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80026c8:	e00b      	b.n	80026e2 <HAL_TIM_PWM_Start+0xfe>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b10      	cmp	r3, #16
 80026ce:	d104      	bne.n	80026da <HAL_TIM_PWM_Start+0xf6>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2202      	movs	r2, #2
 80026d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026d8:	e003      	b.n	80026e2 <HAL_TIM_PWM_Start+0xfe>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2202      	movs	r2, #2
 80026de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2201      	movs	r2, #1
 80026e8:	6839      	ldr	r1, [r7, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 ff26 	bl	800353c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a3a      	ldr	r2, [pc, #232]	@ (80027e0 <HAL_TIM_PWM_Start+0x1fc>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d018      	beq.n	800272c <HAL_TIM_PWM_Start+0x148>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a39      	ldr	r2, [pc, #228]	@ (80027e4 <HAL_TIM_PWM_Start+0x200>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d013      	beq.n	800272c <HAL_TIM_PWM_Start+0x148>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a37      	ldr	r2, [pc, #220]	@ (80027e8 <HAL_TIM_PWM_Start+0x204>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00e      	beq.n	800272c <HAL_TIM_PWM_Start+0x148>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a36      	ldr	r2, [pc, #216]	@ (80027ec <HAL_TIM_PWM_Start+0x208>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d009      	beq.n	800272c <HAL_TIM_PWM_Start+0x148>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a34      	ldr	r2, [pc, #208]	@ (80027f0 <HAL_TIM_PWM_Start+0x20c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d004      	beq.n	800272c <HAL_TIM_PWM_Start+0x148>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a33      	ldr	r2, [pc, #204]	@ (80027f4 <HAL_TIM_PWM_Start+0x210>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d101      	bne.n	8002730 <HAL_TIM_PWM_Start+0x14c>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <HAL_TIM_PWM_Start+0x14e>
 8002730:	2300      	movs	r3, #0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002744:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a25      	ldr	r2, [pc, #148]	@ (80027e0 <HAL_TIM_PWM_Start+0x1fc>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d022      	beq.n	8002796 <HAL_TIM_PWM_Start+0x1b2>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002758:	d01d      	beq.n	8002796 <HAL_TIM_PWM_Start+0x1b2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a26      	ldr	r2, [pc, #152]	@ (80027f8 <HAL_TIM_PWM_Start+0x214>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d018      	beq.n	8002796 <HAL_TIM_PWM_Start+0x1b2>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a24      	ldr	r2, [pc, #144]	@ (80027fc <HAL_TIM_PWM_Start+0x218>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d013      	beq.n	8002796 <HAL_TIM_PWM_Start+0x1b2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a23      	ldr	r2, [pc, #140]	@ (8002800 <HAL_TIM_PWM_Start+0x21c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d00e      	beq.n	8002796 <HAL_TIM_PWM_Start+0x1b2>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a19      	ldr	r2, [pc, #100]	@ (80027e4 <HAL_TIM_PWM_Start+0x200>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d009      	beq.n	8002796 <HAL_TIM_PWM_Start+0x1b2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a18      	ldr	r2, [pc, #96]	@ (80027e8 <HAL_TIM_PWM_Start+0x204>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d004      	beq.n	8002796 <HAL_TIM_PWM_Start+0x1b2>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a18      	ldr	r2, [pc, #96]	@ (80027f4 <HAL_TIM_PWM_Start+0x210>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d115      	bne.n	80027c2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	4b19      	ldr	r3, [pc, #100]	@ (8002804 <HAL_TIM_PWM_Start+0x220>)
 800279e:	4013      	ands	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b06      	cmp	r3, #6
 80027a6:	d015      	beq.n	80027d4 <HAL_TIM_PWM_Start+0x1f0>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ae:	d011      	beq.n	80027d4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c0:	e008      	b.n	80027d4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	e000      	b.n	80027d6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40012c00 	.word	0x40012c00
 80027e4:	40013400 	.word	0x40013400
 80027e8:	40014000 	.word	0x40014000
 80027ec:	40014400 	.word	0x40014400
 80027f0:	40014800 	.word	0x40014800
 80027f4:	40015000 	.word	0x40015000
 80027f8:	40000400 	.word	0x40000400
 80027fc:	40000800 	.word	0x40000800
 8002800:	40000c00 	.word	0x40000c00
 8002804:	00010007 	.word	0x00010007

08002808 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002822:	2302      	movs	r3, #2
 8002824:	e0ff      	b.n	8002a26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b14      	cmp	r3, #20
 8002832:	f200 80f0 	bhi.w	8002a16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002836:	a201      	add	r2, pc, #4	@ (adr r2, 800283c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283c:	08002891 	.word	0x08002891
 8002840:	08002a17 	.word	0x08002a17
 8002844:	08002a17 	.word	0x08002a17
 8002848:	08002a17 	.word	0x08002a17
 800284c:	080028d1 	.word	0x080028d1
 8002850:	08002a17 	.word	0x08002a17
 8002854:	08002a17 	.word	0x08002a17
 8002858:	08002a17 	.word	0x08002a17
 800285c:	08002913 	.word	0x08002913
 8002860:	08002a17 	.word	0x08002a17
 8002864:	08002a17 	.word	0x08002a17
 8002868:	08002a17 	.word	0x08002a17
 800286c:	08002953 	.word	0x08002953
 8002870:	08002a17 	.word	0x08002a17
 8002874:	08002a17 	.word	0x08002a17
 8002878:	08002a17 	.word	0x08002a17
 800287c:	08002995 	.word	0x08002995
 8002880:	08002a17 	.word	0x08002a17
 8002884:	08002a17 	.word	0x08002a17
 8002888:	08002a17 	.word	0x08002a17
 800288c:	080029d5 	.word	0x080029d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fa8a 	bl	8002db0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	699a      	ldr	r2, [r3, #24]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0208 	orr.w	r2, r2, #8
 80028aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0204 	bic.w	r2, r2, #4
 80028ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6999      	ldr	r1, [r3, #24]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	619a      	str	r2, [r3, #24]
      break;
 80028ce:	e0a5      	b.n	8002a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fb04 	bl	8002ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699a      	ldr	r2, [r3, #24]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6999      	ldr	r1, [r3, #24]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	021a      	lsls	r2, r3, #8
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	619a      	str	r2, [r3, #24]
      break;
 8002910:	e084      	b.n	8002a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68b9      	ldr	r1, [r7, #8]
 8002918:	4618      	mov	r0, r3
 800291a:	f000 fb77 	bl	800300c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69da      	ldr	r2, [r3, #28]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0208 	orr.w	r2, r2, #8
 800292c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69da      	ldr	r2, [r3, #28]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0204 	bic.w	r2, r2, #4
 800293c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	69d9      	ldr	r1, [r3, #28]
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	61da      	str	r2, [r3, #28]
      break;
 8002950:	e064      	b.n	8002a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	4618      	mov	r0, r3
 800295a:	f000 fbe9 	bl	8003130 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	69da      	ldr	r2, [r3, #28]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800296c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	69da      	ldr	r2, [r3, #28]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800297c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	69d9      	ldr	r1, [r3, #28]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	021a      	lsls	r2, r3, #8
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	61da      	str	r2, [r3, #28]
      break;
 8002992:	e043      	b.n	8002a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fc5c 	bl	8003258 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0208 	orr.w	r2, r2, #8
 80029ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0204 	bic.w	r2, r2, #4
 80029be:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	691a      	ldr	r2, [r3, #16]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80029d2:	e023      	b.n	8002a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 fca6 	bl	800332c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029fe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	021a      	lsls	r2, r3, #8
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002a14:	e002      	b.n	8002a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	75fb      	strb	r3, [r7, #23]
      break;
 8002a1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop

08002a30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_TIM_ConfigClockSource+0x1c>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e0ee      	b.n	8002c2a <HAL_TIM_ConfigClockSource+0x1fa>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002a6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a6b      	ldr	r2, [pc, #428]	@ (8002c34 <HAL_TIM_ConfigClockSource+0x204>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	f000 80b9 	beq.w	8002bfe <HAL_TIM_ConfigClockSource+0x1ce>
 8002a8c:	4a69      	ldr	r2, [pc, #420]	@ (8002c34 <HAL_TIM_ConfigClockSource+0x204>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	f200 80be 	bhi.w	8002c10 <HAL_TIM_ConfigClockSource+0x1e0>
 8002a94:	4a68      	ldr	r2, [pc, #416]	@ (8002c38 <HAL_TIM_ConfigClockSource+0x208>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	f000 80b1 	beq.w	8002bfe <HAL_TIM_ConfigClockSource+0x1ce>
 8002a9c:	4a66      	ldr	r2, [pc, #408]	@ (8002c38 <HAL_TIM_ConfigClockSource+0x208>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	f200 80b6 	bhi.w	8002c10 <HAL_TIM_ConfigClockSource+0x1e0>
 8002aa4:	4a65      	ldr	r2, [pc, #404]	@ (8002c3c <HAL_TIM_ConfigClockSource+0x20c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	f000 80a9 	beq.w	8002bfe <HAL_TIM_ConfigClockSource+0x1ce>
 8002aac:	4a63      	ldr	r2, [pc, #396]	@ (8002c3c <HAL_TIM_ConfigClockSource+0x20c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	f200 80ae 	bhi.w	8002c10 <HAL_TIM_ConfigClockSource+0x1e0>
 8002ab4:	4a62      	ldr	r2, [pc, #392]	@ (8002c40 <HAL_TIM_ConfigClockSource+0x210>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	f000 80a1 	beq.w	8002bfe <HAL_TIM_ConfigClockSource+0x1ce>
 8002abc:	4a60      	ldr	r2, [pc, #384]	@ (8002c40 <HAL_TIM_ConfigClockSource+0x210>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	f200 80a6 	bhi.w	8002c10 <HAL_TIM_ConfigClockSource+0x1e0>
 8002ac4:	4a5f      	ldr	r2, [pc, #380]	@ (8002c44 <HAL_TIM_ConfigClockSource+0x214>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	f000 8099 	beq.w	8002bfe <HAL_TIM_ConfigClockSource+0x1ce>
 8002acc:	4a5d      	ldr	r2, [pc, #372]	@ (8002c44 <HAL_TIM_ConfigClockSource+0x214>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	f200 809e 	bhi.w	8002c10 <HAL_TIM_ConfigClockSource+0x1e0>
 8002ad4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002ad8:	f000 8091 	beq.w	8002bfe <HAL_TIM_ConfigClockSource+0x1ce>
 8002adc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002ae0:	f200 8096 	bhi.w	8002c10 <HAL_TIM_ConfigClockSource+0x1e0>
 8002ae4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ae8:	f000 8089 	beq.w	8002bfe <HAL_TIM_ConfigClockSource+0x1ce>
 8002aec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002af0:	f200 808e 	bhi.w	8002c10 <HAL_TIM_ConfigClockSource+0x1e0>
 8002af4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002af8:	d03e      	beq.n	8002b78 <HAL_TIM_ConfigClockSource+0x148>
 8002afa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002afe:	f200 8087 	bhi.w	8002c10 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b06:	f000 8086 	beq.w	8002c16 <HAL_TIM_ConfigClockSource+0x1e6>
 8002b0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b0e:	d87f      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b10:	2b70      	cmp	r3, #112	@ 0x70
 8002b12:	d01a      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x11a>
 8002b14:	2b70      	cmp	r3, #112	@ 0x70
 8002b16:	d87b      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b18:	2b60      	cmp	r3, #96	@ 0x60
 8002b1a:	d050      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x18e>
 8002b1c:	2b60      	cmp	r3, #96	@ 0x60
 8002b1e:	d877      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b20:	2b50      	cmp	r3, #80	@ 0x50
 8002b22:	d03c      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0x16e>
 8002b24:	2b50      	cmp	r3, #80	@ 0x50
 8002b26:	d873      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b28:	2b40      	cmp	r3, #64	@ 0x40
 8002b2a:	d058      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0x1ae>
 8002b2c:	2b40      	cmp	r3, #64	@ 0x40
 8002b2e:	d86f      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b30:	2b30      	cmp	r3, #48	@ 0x30
 8002b32:	d064      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x1ce>
 8002b34:	2b30      	cmp	r3, #48	@ 0x30
 8002b36:	d86b      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d060      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x1ce>
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d867      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x1e0>
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d05c      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x1ce>
 8002b44:	2b10      	cmp	r3, #16
 8002b46:	d05a      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x1ce>
 8002b48:	e062      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b5a:	f000 fccf 	bl	80034fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	609a      	str	r2, [r3, #8]
      break;
 8002b76:	e04f      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b88:	f000 fcb8 	bl	80034fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b9a:	609a      	str	r2, [r3, #8]
      break;
 8002b9c:	e03c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002baa:	461a      	mov	r2, r3
 8002bac:	f000 fc2a 	bl	8003404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2150      	movs	r1, #80	@ 0x50
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 fc83 	bl	80034c2 <TIM_ITRx_SetConfig>
      break;
 8002bbc:	e02c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f000 fc49 	bl	8003462 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2160      	movs	r1, #96	@ 0x60
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fc73 	bl	80034c2 <TIM_ITRx_SetConfig>
      break;
 8002bdc:	e01c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bea:	461a      	mov	r2, r3
 8002bec:	f000 fc0a 	bl	8003404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2140      	movs	r1, #64	@ 0x40
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fc63 	bl	80034c2 <TIM_ITRx_SetConfig>
      break;
 8002bfc:	e00c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4619      	mov	r1, r3
 8002c08:	4610      	mov	r0, r2
 8002c0a:	f000 fc5a 	bl	80034c2 <TIM_ITRx_SetConfig>
      break;
 8002c0e:	e003      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
      break;
 8002c14:	e000      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8002c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	00100070 	.word	0x00100070
 8002c38:	00100050 	.word	0x00100050
 8002c3c:	00100040 	.word	0x00100040
 8002c40:	00100030 	.word	0x00100030
 8002c44:	00100020 	.word	0x00100020

08002c48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a4c      	ldr	r2, [pc, #304]	@ (8002d8c <TIM_Base_SetConfig+0x144>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d017      	beq.n	8002c90 <TIM_Base_SetConfig+0x48>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c66:	d013      	beq.n	8002c90 <TIM_Base_SetConfig+0x48>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a49      	ldr	r2, [pc, #292]	@ (8002d90 <TIM_Base_SetConfig+0x148>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00f      	beq.n	8002c90 <TIM_Base_SetConfig+0x48>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a48      	ldr	r2, [pc, #288]	@ (8002d94 <TIM_Base_SetConfig+0x14c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d00b      	beq.n	8002c90 <TIM_Base_SetConfig+0x48>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a47      	ldr	r2, [pc, #284]	@ (8002d98 <TIM_Base_SetConfig+0x150>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d007      	beq.n	8002c90 <TIM_Base_SetConfig+0x48>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a46      	ldr	r2, [pc, #280]	@ (8002d9c <TIM_Base_SetConfig+0x154>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d003      	beq.n	8002c90 <TIM_Base_SetConfig+0x48>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a45      	ldr	r2, [pc, #276]	@ (8002da0 <TIM_Base_SetConfig+0x158>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d108      	bne.n	8002ca2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a39      	ldr	r2, [pc, #228]	@ (8002d8c <TIM_Base_SetConfig+0x144>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d023      	beq.n	8002cf2 <TIM_Base_SetConfig+0xaa>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cb0:	d01f      	beq.n	8002cf2 <TIM_Base_SetConfig+0xaa>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a36      	ldr	r2, [pc, #216]	@ (8002d90 <TIM_Base_SetConfig+0x148>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01b      	beq.n	8002cf2 <TIM_Base_SetConfig+0xaa>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a35      	ldr	r2, [pc, #212]	@ (8002d94 <TIM_Base_SetConfig+0x14c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d017      	beq.n	8002cf2 <TIM_Base_SetConfig+0xaa>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a34      	ldr	r2, [pc, #208]	@ (8002d98 <TIM_Base_SetConfig+0x150>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d013      	beq.n	8002cf2 <TIM_Base_SetConfig+0xaa>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a33      	ldr	r2, [pc, #204]	@ (8002d9c <TIM_Base_SetConfig+0x154>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00f      	beq.n	8002cf2 <TIM_Base_SetConfig+0xaa>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a33      	ldr	r2, [pc, #204]	@ (8002da4 <TIM_Base_SetConfig+0x15c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00b      	beq.n	8002cf2 <TIM_Base_SetConfig+0xaa>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a32      	ldr	r2, [pc, #200]	@ (8002da8 <TIM_Base_SetConfig+0x160>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d007      	beq.n	8002cf2 <TIM_Base_SetConfig+0xaa>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a31      	ldr	r2, [pc, #196]	@ (8002dac <TIM_Base_SetConfig+0x164>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d003      	beq.n	8002cf2 <TIM_Base_SetConfig+0xaa>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a2c      	ldr	r2, [pc, #176]	@ (8002da0 <TIM_Base_SetConfig+0x158>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d108      	bne.n	8002d04 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a18      	ldr	r2, [pc, #96]	@ (8002d8c <TIM_Base_SetConfig+0x144>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d013      	beq.n	8002d58 <TIM_Base_SetConfig+0x110>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a1a      	ldr	r2, [pc, #104]	@ (8002d9c <TIM_Base_SetConfig+0x154>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00f      	beq.n	8002d58 <TIM_Base_SetConfig+0x110>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8002da4 <TIM_Base_SetConfig+0x15c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00b      	beq.n	8002d58 <TIM_Base_SetConfig+0x110>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a19      	ldr	r2, [pc, #100]	@ (8002da8 <TIM_Base_SetConfig+0x160>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d007      	beq.n	8002d58 <TIM_Base_SetConfig+0x110>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a18      	ldr	r2, [pc, #96]	@ (8002dac <TIM_Base_SetConfig+0x164>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d003      	beq.n	8002d58 <TIM_Base_SetConfig+0x110>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a13      	ldr	r2, [pc, #76]	@ (8002da0 <TIM_Base_SetConfig+0x158>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d103      	bne.n	8002d60 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	691a      	ldr	r2, [r3, #16]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d105      	bne.n	8002d7e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f023 0201 	bic.w	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	611a      	str	r2, [r3, #16]
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40012c00 	.word	0x40012c00
 8002d90:	40000400 	.word	0x40000400
 8002d94:	40000800 	.word	0x40000800
 8002d98:	40000c00 	.word	0x40000c00
 8002d9c:	40013400 	.word	0x40013400
 8002da0:	40015000 	.word	0x40015000
 8002da4:	40014000 	.word	0x40014000
 8002da8:	40014400 	.word	0x40014400
 8002dac:	40014800 	.word	0x40014800

08002db0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	f023 0201 	bic.w	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f023 0303 	bic.w	r3, r3, #3
 8002dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f023 0302 	bic.w	r3, r3, #2
 8002dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a30      	ldr	r2, [pc, #192]	@ (8002ecc <TIM_OC1_SetConfig+0x11c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d013      	beq.n	8002e38 <TIM_OC1_SetConfig+0x88>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a2f      	ldr	r2, [pc, #188]	@ (8002ed0 <TIM_OC1_SetConfig+0x120>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00f      	beq.n	8002e38 <TIM_OC1_SetConfig+0x88>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a2e      	ldr	r2, [pc, #184]	@ (8002ed4 <TIM_OC1_SetConfig+0x124>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00b      	beq.n	8002e38 <TIM_OC1_SetConfig+0x88>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a2d      	ldr	r2, [pc, #180]	@ (8002ed8 <TIM_OC1_SetConfig+0x128>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d007      	beq.n	8002e38 <TIM_OC1_SetConfig+0x88>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8002edc <TIM_OC1_SetConfig+0x12c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d003      	beq.n	8002e38 <TIM_OC1_SetConfig+0x88>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a2b      	ldr	r2, [pc, #172]	@ (8002ee0 <TIM_OC1_SetConfig+0x130>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d10c      	bne.n	8002e52 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f023 0308 	bic.w	r3, r3, #8
 8002e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f023 0304 	bic.w	r3, r3, #4
 8002e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a1d      	ldr	r2, [pc, #116]	@ (8002ecc <TIM_OC1_SetConfig+0x11c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <TIM_OC1_SetConfig+0xd2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed0 <TIM_OC1_SetConfig+0x120>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00f      	beq.n	8002e82 <TIM_OC1_SetConfig+0xd2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a1b      	ldr	r2, [pc, #108]	@ (8002ed4 <TIM_OC1_SetConfig+0x124>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00b      	beq.n	8002e82 <TIM_OC1_SetConfig+0xd2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ed8 <TIM_OC1_SetConfig+0x128>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d007      	beq.n	8002e82 <TIM_OC1_SetConfig+0xd2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a19      	ldr	r2, [pc, #100]	@ (8002edc <TIM_OC1_SetConfig+0x12c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d003      	beq.n	8002e82 <TIM_OC1_SetConfig+0xd2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a18      	ldr	r2, [pc, #96]	@ (8002ee0 <TIM_OC1_SetConfig+0x130>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d111      	bne.n	8002ea6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	621a      	str	r2, [r3, #32]
}
 8002ec0:	bf00      	nop
 8002ec2:	371c      	adds	r7, #28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	40012c00 	.word	0x40012c00
 8002ed0:	40013400 	.word	0x40013400
 8002ed4:	40014000 	.word	0x40014000
 8002ed8:	40014400 	.word	0x40014400
 8002edc:	40014800 	.word	0x40014800
 8002ee0:	40015000 	.word	0x40015000

08002ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	f023 0210 	bic.w	r2, r3, #16
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	021b      	lsls	r3, r3, #8
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f023 0320 	bic.w	r3, r3, #32
 8002f32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a2c      	ldr	r2, [pc, #176]	@ (8002ff4 <TIM_OC2_SetConfig+0x110>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d007      	beq.n	8002f58 <TIM_OC2_SetConfig+0x74>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a2b      	ldr	r2, [pc, #172]	@ (8002ff8 <TIM_OC2_SetConfig+0x114>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d003      	beq.n	8002f58 <TIM_OC2_SetConfig+0x74>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a2a      	ldr	r2, [pc, #168]	@ (8002ffc <TIM_OC2_SetConfig+0x118>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d10d      	bne.n	8002f74 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff4 <TIM_OC2_SetConfig+0x110>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d013      	beq.n	8002fa4 <TIM_OC2_SetConfig+0xc0>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ff8 <TIM_OC2_SetConfig+0x114>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00f      	beq.n	8002fa4 <TIM_OC2_SetConfig+0xc0>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a1e      	ldr	r2, [pc, #120]	@ (8003000 <TIM_OC2_SetConfig+0x11c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d00b      	beq.n	8002fa4 <TIM_OC2_SetConfig+0xc0>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8003004 <TIM_OC2_SetConfig+0x120>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d007      	beq.n	8002fa4 <TIM_OC2_SetConfig+0xc0>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a1c      	ldr	r2, [pc, #112]	@ (8003008 <TIM_OC2_SetConfig+0x124>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d003      	beq.n	8002fa4 <TIM_OC2_SetConfig+0xc0>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a17      	ldr	r2, [pc, #92]	@ (8002ffc <TIM_OC2_SetConfig+0x118>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d113      	bne.n	8002fcc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002faa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	621a      	str	r2, [r3, #32]
}
 8002fe6:	bf00      	nop
 8002fe8:	371c      	adds	r7, #28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40012c00 	.word	0x40012c00
 8002ff8:	40013400 	.word	0x40013400
 8002ffc:	40015000 	.word	0x40015000
 8003000:	40014000 	.word	0x40014000
 8003004:	40014400 	.word	0x40014400
 8003008:	40014800 	.word	0x40014800

0800300c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800303a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800303e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0303 	bic.w	r3, r3, #3
 8003046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	4313      	orrs	r3, r2
 8003064:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a2b      	ldr	r2, [pc, #172]	@ (8003118 <TIM_OC3_SetConfig+0x10c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d007      	beq.n	800307e <TIM_OC3_SetConfig+0x72>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a2a      	ldr	r2, [pc, #168]	@ (800311c <TIM_OC3_SetConfig+0x110>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d003      	beq.n	800307e <TIM_OC3_SetConfig+0x72>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a29      	ldr	r2, [pc, #164]	@ (8003120 <TIM_OC3_SetConfig+0x114>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10d      	bne.n	800309a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003084:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	021b      	lsls	r3, r3, #8
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a1e      	ldr	r2, [pc, #120]	@ (8003118 <TIM_OC3_SetConfig+0x10c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d013      	beq.n	80030ca <TIM_OC3_SetConfig+0xbe>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a1d      	ldr	r2, [pc, #116]	@ (800311c <TIM_OC3_SetConfig+0x110>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00f      	beq.n	80030ca <TIM_OC3_SetConfig+0xbe>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003124 <TIM_OC3_SetConfig+0x118>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00b      	beq.n	80030ca <TIM_OC3_SetConfig+0xbe>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003128 <TIM_OC3_SetConfig+0x11c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d007      	beq.n	80030ca <TIM_OC3_SetConfig+0xbe>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a1b      	ldr	r2, [pc, #108]	@ (800312c <TIM_OC3_SetConfig+0x120>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d003      	beq.n	80030ca <TIM_OC3_SetConfig+0xbe>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a16      	ldr	r2, [pc, #88]	@ (8003120 <TIM_OC3_SetConfig+0x114>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d113      	bne.n	80030f2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	621a      	str	r2, [r3, #32]
}
 800310c:	bf00      	nop
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	40012c00 	.word	0x40012c00
 800311c:	40013400 	.word	0x40013400
 8003120:	40015000 	.word	0x40015000
 8003124:	40014000 	.word	0x40014000
 8003128:	40014400 	.word	0x40014400
 800312c:	40014800 	.word	0x40014800

08003130 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800315e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800316a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800317e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	031b      	lsls	r3, r3, #12
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a2c      	ldr	r2, [pc, #176]	@ (8003240 <TIM_OC4_SetConfig+0x110>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d007      	beq.n	80031a4 <TIM_OC4_SetConfig+0x74>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a2b      	ldr	r2, [pc, #172]	@ (8003244 <TIM_OC4_SetConfig+0x114>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d003      	beq.n	80031a4 <TIM_OC4_SetConfig+0x74>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a2a      	ldr	r2, [pc, #168]	@ (8003248 <TIM_OC4_SetConfig+0x118>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d10d      	bne.n	80031c0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80031aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	031b      	lsls	r3, r3, #12
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003240 <TIM_OC4_SetConfig+0x110>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d013      	beq.n	80031f0 <TIM_OC4_SetConfig+0xc0>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003244 <TIM_OC4_SetConfig+0x114>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00f      	beq.n	80031f0 <TIM_OC4_SetConfig+0xc0>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a1e      	ldr	r2, [pc, #120]	@ (800324c <TIM_OC4_SetConfig+0x11c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00b      	beq.n	80031f0 <TIM_OC4_SetConfig+0xc0>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a1d      	ldr	r2, [pc, #116]	@ (8003250 <TIM_OC4_SetConfig+0x120>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d007      	beq.n	80031f0 <TIM_OC4_SetConfig+0xc0>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003254 <TIM_OC4_SetConfig+0x124>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d003      	beq.n	80031f0 <TIM_OC4_SetConfig+0xc0>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a17      	ldr	r2, [pc, #92]	@ (8003248 <TIM_OC4_SetConfig+0x118>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d113      	bne.n	8003218 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031f6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80031fe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	019b      	lsls	r3, r3, #6
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	019b      	lsls	r3, r3, #6
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	621a      	str	r2, [r3, #32]
}
 8003232:	bf00      	nop
 8003234:	371c      	adds	r7, #28
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40012c00 	.word	0x40012c00
 8003244:	40013400 	.word	0x40013400
 8003248:	40015000 	.word	0x40015000
 800324c:	40014000 	.word	0x40014000
 8003250:	40014400 	.word	0x40014400
 8003254:	40014800 	.word	0x40014800

08003258 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800327e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800328a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800329c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	041b      	lsls	r3, r3, #16
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a19      	ldr	r2, [pc, #100]	@ (8003314 <TIM_OC5_SetConfig+0xbc>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <TIM_OC5_SetConfig+0x82>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a18      	ldr	r2, [pc, #96]	@ (8003318 <TIM_OC5_SetConfig+0xc0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00f      	beq.n	80032da <TIM_OC5_SetConfig+0x82>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a17      	ldr	r2, [pc, #92]	@ (800331c <TIM_OC5_SetConfig+0xc4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00b      	beq.n	80032da <TIM_OC5_SetConfig+0x82>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a16      	ldr	r2, [pc, #88]	@ (8003320 <TIM_OC5_SetConfig+0xc8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <TIM_OC5_SetConfig+0x82>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a15      	ldr	r2, [pc, #84]	@ (8003324 <TIM_OC5_SetConfig+0xcc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d003      	beq.n	80032da <TIM_OC5_SetConfig+0x82>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a14      	ldr	r2, [pc, #80]	@ (8003328 <TIM_OC5_SetConfig+0xd0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d109      	bne.n	80032ee <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	621a      	str	r2, [r3, #32]
}
 8003308:	bf00      	nop
 800330a:	371c      	adds	r7, #28
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	40012c00 	.word	0x40012c00
 8003318:	40013400 	.word	0x40013400
 800331c:	40014000 	.word	0x40014000
 8003320:	40014400 	.word	0x40014400
 8003324:	40014800 	.word	0x40014800
 8003328:	40015000 	.word	0x40015000

0800332c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800335a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800335e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003372:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	051b      	lsls	r3, r3, #20
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a1a      	ldr	r2, [pc, #104]	@ (80033ec <TIM_OC6_SetConfig+0xc0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d013      	beq.n	80033b0 <TIM_OC6_SetConfig+0x84>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a19      	ldr	r2, [pc, #100]	@ (80033f0 <TIM_OC6_SetConfig+0xc4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00f      	beq.n	80033b0 <TIM_OC6_SetConfig+0x84>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a18      	ldr	r2, [pc, #96]	@ (80033f4 <TIM_OC6_SetConfig+0xc8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00b      	beq.n	80033b0 <TIM_OC6_SetConfig+0x84>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a17      	ldr	r2, [pc, #92]	@ (80033f8 <TIM_OC6_SetConfig+0xcc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d007      	beq.n	80033b0 <TIM_OC6_SetConfig+0x84>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a16      	ldr	r2, [pc, #88]	@ (80033fc <TIM_OC6_SetConfig+0xd0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d003      	beq.n	80033b0 <TIM_OC6_SetConfig+0x84>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a15      	ldr	r2, [pc, #84]	@ (8003400 <TIM_OC6_SetConfig+0xd4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d109      	bne.n	80033c4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	029b      	lsls	r3, r3, #10
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	621a      	str	r2, [r3, #32]
}
 80033de:	bf00      	nop
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40012c00 	.word	0x40012c00
 80033f0:	40013400 	.word	0x40013400
 80033f4:	40014000 	.word	0x40014000
 80033f8:	40014400 	.word	0x40014400
 80033fc:	40014800 	.word	0x40014800
 8003400:	40015000 	.word	0x40015000

08003404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	f023 0201 	bic.w	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800342e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f023 030a 	bic.w	r3, r3, #10
 8003440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	621a      	str	r2, [r3, #32]
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003462:	b480      	push	{r7}
 8003464:	b087      	sub	sp, #28
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f023 0210 	bic.w	r2, r3, #16
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800348c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	031b      	lsls	r3, r3, #12
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800349e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	621a      	str	r2, [r3, #32]
}
 80034b6:	bf00      	nop
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b085      	sub	sp, #20
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80034d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f043 0307 	orr.w	r3, r3, #7
 80034e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	609a      	str	r2, [r3, #8]
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	021a      	lsls	r2, r3, #8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	431a      	orrs	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4313      	orrs	r3, r2
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	609a      	str	r2, [r3, #8]
}
 8003530:	bf00      	nop
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	2201      	movs	r2, #1
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a1a      	ldr	r2, [r3, #32]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	43db      	mvns	r3, r3
 800355e:	401a      	ands	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a1a      	ldr	r2, [r3, #32]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f003 031f 	and.w	r3, r3, #31
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	fa01 f303 	lsl.w	r3, r1, r3
 8003574:	431a      	orrs	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	621a      	str	r2, [r3, #32]
}
 800357a:	bf00      	nop
 800357c:	371c      	adds	r7, #28
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800359c:	2302      	movs	r3, #2
 800359e:	e074      	b.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a34      	ldr	r2, [pc, #208]	@ (8003698 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d009      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a33      	ldr	r2, [pc, #204]	@ (800369c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d004      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a31      	ldr	r2, [pc, #196]	@ (80036a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d108      	bne.n	80035f0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80035e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80035f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a21      	ldr	r2, [pc, #132]	@ (8003698 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d022      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003620:	d01d      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1f      	ldr	r2, [pc, #124]	@ (80036a4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d018      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1d      	ldr	r2, [pc, #116]	@ (80036a8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d013      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1c      	ldr	r2, [pc, #112]	@ (80036ac <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d00e      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a15      	ldr	r2, [pc, #84]	@ (800369c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d009      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a18      	ldr	r2, [pc, #96]	@ (80036b0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d004      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a11      	ldr	r2, [pc, #68]	@ (80036a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d10c      	bne.n	8003678 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003664:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	4313      	orrs	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40012c00 	.word	0x40012c00
 800369c:	40013400 	.word	0x40013400
 80036a0:	40015000 	.word	0x40015000
 80036a4:	40000400 	.word	0x40000400
 80036a8:	40000800 	.word	0x40000800
 80036ac:	40000c00 	.word	0x40000c00
 80036b0:	40014000 	.word	0x40014000

080036b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e042      	b.n	800374c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d106      	bne.n	80036de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7fd fac7 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2224      	movs	r2, #36	@ 0x24
 80036e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fbb2 	bl	8003e68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f8b3 	bl	8003870 <UART_SetConfig>
 800370a:	4603      	mov	r3, r0
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e01b      	b.n	800374c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003722:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003732:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 fc31 	bl	8003fac <UART_CheckIdleState>
 800374a:	4603      	mov	r3, r0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08a      	sub	sp, #40	@ 0x28
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	4613      	mov	r3, r2
 8003762:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376a:	2b20      	cmp	r3, #32
 800376c:	d17b      	bne.n	8003866 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HAL_UART_Transmit+0x26>
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e074      	b.n	8003868 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2221      	movs	r2, #33	@ 0x21
 800378a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800378e:	f7fd fb95 	bl	8000ebc <HAL_GetTick>
 8003792:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	88fa      	ldrh	r2, [r7, #6]
 8003798:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	88fa      	ldrh	r2, [r7, #6]
 80037a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ac:	d108      	bne.n	80037c0 <HAL_UART_Transmit+0x6c>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d104      	bne.n	80037c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	e003      	b.n	80037c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037c8:	e030      	b.n	800382c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2200      	movs	r2, #0
 80037d2:	2180      	movs	r1, #128	@ 0x80
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 fc93 	bl	8004100 <UART_WaitOnFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e03d      	b.n	8003868 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10b      	bne.n	800380a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003800:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	3302      	adds	r3, #2
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	e007      	b.n	800381a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	781a      	ldrb	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	3301      	adds	r3, #1
 8003818:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1c8      	bne.n	80037ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2200      	movs	r2, #0
 8003840:	2140      	movs	r1, #64	@ 0x40
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 fc5c 	bl	8004100 <UART_WaitOnFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d005      	beq.n	800385a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e006      	b.n	8003868 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	e000      	b.n	8003868 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003866:	2302      	movs	r3, #2
  }
}
 8003868:	4618      	mov	r0, r3
 800386a:	3720      	adds	r7, #32
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003874:	b08c      	sub	sp, #48	@ 0x30
 8003876:	af00      	add	r7, sp, #0
 8003878:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	431a      	orrs	r2, r3
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	431a      	orrs	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	4313      	orrs	r3, r2
 8003896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	4baa      	ldr	r3, [pc, #680]	@ (8003b48 <UART_SetConfig+0x2d8>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038a8:	430b      	orrs	r3, r1
 80038aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a9f      	ldr	r2, [pc, #636]	@ (8003b4c <UART_SetConfig+0x2dc>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d004      	beq.n	80038dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038d8:	4313      	orrs	r3, r2
 80038da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80038e6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038f0:	430b      	orrs	r3, r1
 80038f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fa:	f023 010f 	bic.w	r1, r3, #15
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a90      	ldr	r2, [pc, #576]	@ (8003b50 <UART_SetConfig+0x2e0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d125      	bne.n	8003960 <UART_SetConfig+0xf0>
 8003914:	4b8f      	ldr	r3, [pc, #572]	@ (8003b54 <UART_SetConfig+0x2e4>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	2b03      	cmp	r3, #3
 8003920:	d81a      	bhi.n	8003958 <UART_SetConfig+0xe8>
 8003922:	a201      	add	r2, pc, #4	@ (adr r2, 8003928 <UART_SetConfig+0xb8>)
 8003924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003928:	08003939 	.word	0x08003939
 800392c:	08003949 	.word	0x08003949
 8003930:	08003941 	.word	0x08003941
 8003934:	08003951 	.word	0x08003951
 8003938:	2301      	movs	r3, #1
 800393a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800393e:	e116      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003940:	2302      	movs	r3, #2
 8003942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003946:	e112      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003948:	2304      	movs	r3, #4
 800394a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800394e:	e10e      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003950:	2308      	movs	r3, #8
 8003952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003956:	e10a      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003958:	2310      	movs	r3, #16
 800395a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800395e:	e106      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a7c      	ldr	r2, [pc, #496]	@ (8003b58 <UART_SetConfig+0x2e8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d138      	bne.n	80039dc <UART_SetConfig+0x16c>
 800396a:	4b7a      	ldr	r3, [pc, #488]	@ (8003b54 <UART_SetConfig+0x2e4>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003970:	f003 030c 	and.w	r3, r3, #12
 8003974:	2b0c      	cmp	r3, #12
 8003976:	d82d      	bhi.n	80039d4 <UART_SetConfig+0x164>
 8003978:	a201      	add	r2, pc, #4	@ (adr r2, 8003980 <UART_SetConfig+0x110>)
 800397a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397e:	bf00      	nop
 8003980:	080039b5 	.word	0x080039b5
 8003984:	080039d5 	.word	0x080039d5
 8003988:	080039d5 	.word	0x080039d5
 800398c:	080039d5 	.word	0x080039d5
 8003990:	080039c5 	.word	0x080039c5
 8003994:	080039d5 	.word	0x080039d5
 8003998:	080039d5 	.word	0x080039d5
 800399c:	080039d5 	.word	0x080039d5
 80039a0:	080039bd 	.word	0x080039bd
 80039a4:	080039d5 	.word	0x080039d5
 80039a8:	080039d5 	.word	0x080039d5
 80039ac:	080039d5 	.word	0x080039d5
 80039b0:	080039cd 	.word	0x080039cd
 80039b4:	2300      	movs	r3, #0
 80039b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ba:	e0d8      	b.n	8003b6e <UART_SetConfig+0x2fe>
 80039bc:	2302      	movs	r3, #2
 80039be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039c2:	e0d4      	b.n	8003b6e <UART_SetConfig+0x2fe>
 80039c4:	2304      	movs	r3, #4
 80039c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ca:	e0d0      	b.n	8003b6e <UART_SetConfig+0x2fe>
 80039cc:	2308      	movs	r3, #8
 80039ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039d2:	e0cc      	b.n	8003b6e <UART_SetConfig+0x2fe>
 80039d4:	2310      	movs	r3, #16
 80039d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039da:	e0c8      	b.n	8003b6e <UART_SetConfig+0x2fe>
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a5e      	ldr	r2, [pc, #376]	@ (8003b5c <UART_SetConfig+0x2ec>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d125      	bne.n	8003a32 <UART_SetConfig+0x1c2>
 80039e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003b54 <UART_SetConfig+0x2e4>)
 80039e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80039f0:	2b30      	cmp	r3, #48	@ 0x30
 80039f2:	d016      	beq.n	8003a22 <UART_SetConfig+0x1b2>
 80039f4:	2b30      	cmp	r3, #48	@ 0x30
 80039f6:	d818      	bhi.n	8003a2a <UART_SetConfig+0x1ba>
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d00a      	beq.n	8003a12 <UART_SetConfig+0x1a2>
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d814      	bhi.n	8003a2a <UART_SetConfig+0x1ba>
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <UART_SetConfig+0x19a>
 8003a04:	2b10      	cmp	r3, #16
 8003a06:	d008      	beq.n	8003a1a <UART_SetConfig+0x1aa>
 8003a08:	e00f      	b.n	8003a2a <UART_SetConfig+0x1ba>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a10:	e0ad      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003a12:	2302      	movs	r3, #2
 8003a14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a18:	e0a9      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003a1a:	2304      	movs	r3, #4
 8003a1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a20:	e0a5      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003a22:	2308      	movs	r3, #8
 8003a24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a28:	e0a1      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003a2a:	2310      	movs	r3, #16
 8003a2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a30:	e09d      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a4a      	ldr	r2, [pc, #296]	@ (8003b60 <UART_SetConfig+0x2f0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d125      	bne.n	8003a88 <UART_SetConfig+0x218>
 8003a3c:	4b45      	ldr	r3, [pc, #276]	@ (8003b54 <UART_SetConfig+0x2e4>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a42:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a46:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a48:	d016      	beq.n	8003a78 <UART_SetConfig+0x208>
 8003a4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a4c:	d818      	bhi.n	8003a80 <UART_SetConfig+0x210>
 8003a4e:	2b80      	cmp	r3, #128	@ 0x80
 8003a50:	d00a      	beq.n	8003a68 <UART_SetConfig+0x1f8>
 8003a52:	2b80      	cmp	r3, #128	@ 0x80
 8003a54:	d814      	bhi.n	8003a80 <UART_SetConfig+0x210>
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <UART_SetConfig+0x1f0>
 8003a5a:	2b40      	cmp	r3, #64	@ 0x40
 8003a5c:	d008      	beq.n	8003a70 <UART_SetConfig+0x200>
 8003a5e:	e00f      	b.n	8003a80 <UART_SetConfig+0x210>
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a66:	e082      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a6e:	e07e      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003a70:	2304      	movs	r3, #4
 8003a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a76:	e07a      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003a78:	2308      	movs	r3, #8
 8003a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a7e:	e076      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003a80:	2310      	movs	r3, #16
 8003a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a86:	e072      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a35      	ldr	r2, [pc, #212]	@ (8003b64 <UART_SetConfig+0x2f4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d12a      	bne.n	8003ae8 <UART_SetConfig+0x278>
 8003a92:	4b30      	ldr	r3, [pc, #192]	@ (8003b54 <UART_SetConfig+0x2e4>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aa0:	d01a      	beq.n	8003ad8 <UART_SetConfig+0x268>
 8003aa2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aa6:	d81b      	bhi.n	8003ae0 <UART_SetConfig+0x270>
 8003aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aac:	d00c      	beq.n	8003ac8 <UART_SetConfig+0x258>
 8003aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab2:	d815      	bhi.n	8003ae0 <UART_SetConfig+0x270>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <UART_SetConfig+0x250>
 8003ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003abc:	d008      	beq.n	8003ad0 <UART_SetConfig+0x260>
 8003abe:	e00f      	b.n	8003ae0 <UART_SetConfig+0x270>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ac6:	e052      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ace:	e04e      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ad6:	e04a      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003ad8:	2308      	movs	r3, #8
 8003ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ade:	e046      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ae6:	e042      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a17      	ldr	r2, [pc, #92]	@ (8003b4c <UART_SetConfig+0x2dc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d13a      	bne.n	8003b68 <UART_SetConfig+0x2f8>
 8003af2:	4b18      	ldr	r3, [pc, #96]	@ (8003b54 <UART_SetConfig+0x2e4>)
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003afc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b00:	d01a      	beq.n	8003b38 <UART_SetConfig+0x2c8>
 8003b02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b06:	d81b      	bhi.n	8003b40 <UART_SetConfig+0x2d0>
 8003b08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b0c:	d00c      	beq.n	8003b28 <UART_SetConfig+0x2b8>
 8003b0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b12:	d815      	bhi.n	8003b40 <UART_SetConfig+0x2d0>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <UART_SetConfig+0x2b0>
 8003b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b1c:	d008      	beq.n	8003b30 <UART_SetConfig+0x2c0>
 8003b1e:	e00f      	b.n	8003b40 <UART_SetConfig+0x2d0>
 8003b20:	2300      	movs	r3, #0
 8003b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b26:	e022      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b2e:	e01e      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003b30:	2304      	movs	r3, #4
 8003b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b36:	e01a      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003b38:	2308      	movs	r3, #8
 8003b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b3e:	e016      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003b40:	2310      	movs	r3, #16
 8003b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b46:	e012      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003b48:	cfff69f3 	.word	0xcfff69f3
 8003b4c:	40008000 	.word	0x40008000
 8003b50:	40013800 	.word	0x40013800
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40004400 	.word	0x40004400
 8003b5c:	40004800 	.word	0x40004800
 8003b60:	40004c00 	.word	0x40004c00
 8003b64:	40005000 	.word	0x40005000
 8003b68:	2310      	movs	r3, #16
 8003b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4aae      	ldr	r2, [pc, #696]	@ (8003e2c <UART_SetConfig+0x5bc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	f040 8097 	bne.w	8003ca8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d823      	bhi.n	8003bca <UART_SetConfig+0x35a>
 8003b82:	a201      	add	r2, pc, #4	@ (adr r2, 8003b88 <UART_SetConfig+0x318>)
 8003b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b88:	08003bad 	.word	0x08003bad
 8003b8c:	08003bcb 	.word	0x08003bcb
 8003b90:	08003bb5 	.word	0x08003bb5
 8003b94:	08003bcb 	.word	0x08003bcb
 8003b98:	08003bbb 	.word	0x08003bbb
 8003b9c:	08003bcb 	.word	0x08003bcb
 8003ba0:	08003bcb 	.word	0x08003bcb
 8003ba4:	08003bcb 	.word	0x08003bcb
 8003ba8:	08003bc3 	.word	0x08003bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bac:	f7fe f9a2 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
 8003bb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bb2:	e010      	b.n	8003bd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb4:	4b9e      	ldr	r3, [pc, #632]	@ (8003e30 <UART_SetConfig+0x5c0>)
 8003bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bb8:	e00d      	b.n	8003bd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bba:	f7fe f92d 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8003bbe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bc0:	e009      	b.n	8003bd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bc8:	e005      	b.n	8003bd6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003bd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 8130 	beq.w	8003e3e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be2:	4a94      	ldr	r2, [pc, #592]	@ (8003e34 <UART_SetConfig+0x5c4>)
 8003be4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003be8:	461a      	mov	r2, r3
 8003bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bec:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	4413      	add	r3, r2
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d305      	bcc.n	8003c0e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d903      	bls.n	8003c16 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003c14:	e113      	b.n	8003e3e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	2200      	movs	r2, #0
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	60fa      	str	r2, [r7, #12]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c22:	4a84      	ldr	r2, [pc, #528]	@ (8003e34 <UART_SetConfig+0x5c4>)
 8003c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	603b      	str	r3, [r7, #0]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c38:	f7fc faee 	bl	8000218 <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4610      	mov	r0, r2
 8003c42:	4619      	mov	r1, r3
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	020b      	lsls	r3, r1, #8
 8003c4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c52:	0202      	lsls	r2, r0, #8
 8003c54:	6979      	ldr	r1, [r7, #20]
 8003c56:	6849      	ldr	r1, [r1, #4]
 8003c58:	0849      	lsrs	r1, r1, #1
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	460c      	mov	r4, r1
 8003c5e:	4605      	mov	r5, r0
 8003c60:	eb12 0804 	adds.w	r8, r2, r4
 8003c64:	eb43 0905 	adc.w	r9, r3, r5
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	469a      	mov	sl, r3
 8003c70:	4693      	mov	fp, r2
 8003c72:	4652      	mov	r2, sl
 8003c74:	465b      	mov	r3, fp
 8003c76:	4640      	mov	r0, r8
 8003c78:	4649      	mov	r1, r9
 8003c7a:	f7fc facd 	bl	8000218 <__aeabi_uldivmod>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4613      	mov	r3, r2
 8003c84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c8c:	d308      	bcc.n	8003ca0 <UART_SetConfig+0x430>
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c94:	d204      	bcs.n	8003ca0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6a3a      	ldr	r2, [r7, #32]
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	e0ce      	b.n	8003e3e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ca6:	e0ca      	b.n	8003e3e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cb0:	d166      	bne.n	8003d80 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003cb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d827      	bhi.n	8003d0a <UART_SetConfig+0x49a>
 8003cba:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc0 <UART_SetConfig+0x450>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003ce5 	.word	0x08003ce5
 8003cc4:	08003ced 	.word	0x08003ced
 8003cc8:	08003cf5 	.word	0x08003cf5
 8003ccc:	08003d0b 	.word	0x08003d0b
 8003cd0:	08003cfb 	.word	0x08003cfb
 8003cd4:	08003d0b 	.word	0x08003d0b
 8003cd8:	08003d0b 	.word	0x08003d0b
 8003cdc:	08003d0b 	.word	0x08003d0b
 8003ce0:	08003d03 	.word	0x08003d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ce4:	f7fe f906 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
 8003ce8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cea:	e014      	b.n	8003d16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cec:	f7fe f918 	bl	8001f20 <HAL_RCC_GetPCLK2Freq>
 8003cf0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cf2:	e010      	b.n	8003d16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cf4:	4b4e      	ldr	r3, [pc, #312]	@ (8003e30 <UART_SetConfig+0x5c0>)
 8003cf6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003cf8:	e00d      	b.n	8003d16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cfa:	f7fe f88d 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8003cfe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d00:	e009      	b.n	8003d16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d08:	e005      	b.n	8003d16 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003d14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 8090 	beq.w	8003e3e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	4a44      	ldr	r2, [pc, #272]	@ (8003e34 <UART_SetConfig+0x5c4>)
 8003d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d30:	005a      	lsls	r2, r3, #1
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	085b      	lsrs	r3, r3, #1
 8003d38:	441a      	add	r2, r3
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	2b0f      	cmp	r3, #15
 8003d48:	d916      	bls.n	8003d78 <UART_SetConfig+0x508>
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d50:	d212      	bcs.n	8003d78 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	f023 030f 	bic.w	r3, r3, #15
 8003d5a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	085b      	lsrs	r3, r3, #1
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	8bfb      	ldrh	r3, [r7, #30]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	8bfa      	ldrh	r2, [r7, #30]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	e062      	b.n	8003e3e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d7e:	e05e      	b.n	8003e3e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d828      	bhi.n	8003dda <UART_SetConfig+0x56a>
 8003d88:	a201      	add	r2, pc, #4	@ (adr r2, 8003d90 <UART_SetConfig+0x520>)
 8003d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8e:	bf00      	nop
 8003d90:	08003db5 	.word	0x08003db5
 8003d94:	08003dbd 	.word	0x08003dbd
 8003d98:	08003dc5 	.word	0x08003dc5
 8003d9c:	08003ddb 	.word	0x08003ddb
 8003da0:	08003dcb 	.word	0x08003dcb
 8003da4:	08003ddb 	.word	0x08003ddb
 8003da8:	08003ddb 	.word	0x08003ddb
 8003dac:	08003ddb 	.word	0x08003ddb
 8003db0:	08003dd3 	.word	0x08003dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db4:	f7fe f89e 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
 8003db8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dba:	e014      	b.n	8003de6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dbc:	f7fe f8b0 	bl	8001f20 <HAL_RCC_GetPCLK2Freq>
 8003dc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dc2:	e010      	b.n	8003de6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e30 <UART_SetConfig+0x5c0>)
 8003dc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003dc8:	e00d      	b.n	8003de6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dca:	f7fe f825 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8003dce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dd0:	e009      	b.n	8003de6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003dd8:	e005      	b.n	8003de6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003de4:	bf00      	nop
    }

    if (pclk != 0U)
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d028      	beq.n	8003e3e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	4a10      	ldr	r2, [pc, #64]	@ (8003e34 <UART_SetConfig+0x5c4>)
 8003df2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003df6:	461a      	mov	r2, r3
 8003df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	441a      	add	r2, r3
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	2b0f      	cmp	r3, #15
 8003e14:	d910      	bls.n	8003e38 <UART_SetConfig+0x5c8>
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e1c:	d20c      	bcs.n	8003e38 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60da      	str	r2, [r3, #12]
 8003e28:	e009      	b.n	8003e3e <UART_SetConfig+0x5ce>
 8003e2a:	bf00      	nop
 8003e2c:	40008000 	.word	0x40008000
 8003e30:	00f42400 	.word	0x00f42400
 8003e34:	08004534 	.word	0x08004534
      }
      else
      {
        ret = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2200      	movs	r2, #0
 8003e52:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2200      	movs	r2, #0
 8003e58:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003e5a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3730      	adds	r7, #48	@ 0x30
 8003e62:	46bd      	mov	sp, r7
 8003e64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01a      	beq.n	8003f7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f66:	d10a      	bne.n	8003f7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	605a      	str	r2, [r3, #4]
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b098      	sub	sp, #96	@ 0x60
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fbc:	f7fc ff7e 	bl	8000ebc <HAL_GetTick>
 8003fc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d12f      	bne.n	8004030 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f88e 	bl	8004100 <UART_WaitOnFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d022      	beq.n	8004030 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ffa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ffe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004008:	647b      	str	r3, [r7, #68]	@ 0x44
 800400a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800400e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e6      	bne.n	8003fea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e063      	b.n	80040f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b04      	cmp	r3, #4
 800403c:	d149      	bne.n	80040d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800403e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004046:	2200      	movs	r2, #0
 8004048:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f857 	bl	8004100 <UART_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d03c      	beq.n	80040d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	623b      	str	r3, [r7, #32]
   return(result);
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800406c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004076:	633b      	str	r3, [r7, #48]	@ 0x30
 8004078:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800407c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e6      	bne.n	8004058 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3308      	adds	r3, #8
 8004090:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	60fb      	str	r3, [r7, #12]
   return(result);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f023 0301 	bic.w	r3, r3, #1
 80040a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3308      	adds	r3, #8
 80040a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040aa:	61fa      	str	r2, [r7, #28]
 80040ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	69b9      	ldr	r1, [r7, #24]
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	617b      	str	r3, [r7, #20]
   return(result);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e5      	bne.n	800408a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e012      	b.n	80040f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3758      	adds	r7, #88	@ 0x58
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004110:	e04f      	b.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004118:	d04b      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411a:	f7fc fecf 	bl	8000ebc <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	429a      	cmp	r2, r3
 8004128:	d302      	bcc.n	8004130 <UART_WaitOnFlagUntilTimeout+0x30>
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e04e      	b.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b00      	cmp	r3, #0
 8004140:	d037      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b80      	cmp	r3, #128	@ 0x80
 8004146:	d034      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b40      	cmp	r3, #64	@ 0x40
 800414c:	d031      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b08      	cmp	r3, #8
 800415a:	d110      	bne.n	800417e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2208      	movs	r2, #8
 8004162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f838 	bl	80041da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2208      	movs	r2, #8
 800416e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e029      	b.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800418c:	d111      	bne.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f81e 	bl	80041da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e00f      	b.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4013      	ands	r3, r2
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	429a      	cmp	r2, r3
 80041c0:	bf0c      	ite	eq
 80041c2:	2301      	moveq	r3, #1
 80041c4:	2300      	movne	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d0a0      	beq.n	8004112 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041da:	b480      	push	{r7}
 80041dc:	b095      	sub	sp, #84	@ 0x54
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004200:	643b      	str	r3, [r7, #64]	@ 0x40
 8004202:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004206:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004208:	e841 2300 	strex	r3, r2, [r1]
 800420c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800420e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e6      	bne.n	80041e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3308      	adds	r3, #8
 800421a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	61fb      	str	r3, [r7, #28]
   return(result);
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800422a:	f023 0301 	bic.w	r3, r3, #1
 800422e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3308      	adds	r3, #8
 8004236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004238:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800423a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800423e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004240:	e841 2300 	strex	r3, r2, [r1]
 8004244:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e3      	bne.n	8004214 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004250:	2b01      	cmp	r3, #1
 8004252:	d118      	bne.n	8004286 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	60bb      	str	r3, [r7, #8]
   return(result);
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f023 0310 	bic.w	r3, r3, #16
 8004268:	647b      	str	r3, [r7, #68]	@ 0x44
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004272:	61bb      	str	r3, [r7, #24]
 8004274:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	6979      	ldr	r1, [r7, #20]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	613b      	str	r3, [r7, #16]
   return(result);
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e6      	bne.n	8004254 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2220      	movs	r2, #32
 800428a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800429a:	bf00      	nop
 800429c:	3754      	adds	r7, #84	@ 0x54
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b085      	sub	sp, #20
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_UARTEx_DisableFifoMode+0x16>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e027      	b.n	800430c <HAL_UARTEx_DisableFifoMode+0x66>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2224      	movs	r2, #36	@ 0x24
 80042c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0201 	bic.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80042ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800432c:	2302      	movs	r3, #2
 800432e:	e02d      	b.n	800438c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2224      	movs	r2, #36	@ 0x24
 800433c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f84f 	bl	8004410 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2220      	movs	r2, #32
 800437e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e02d      	b.n	8004408 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2224      	movs	r2, #36	@ 0x24
 80043b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0201 	bic.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f811 	bl	8004410 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800441c:	2b00      	cmp	r3, #0
 800441e:	d108      	bne.n	8004432 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004430:	e031      	b.n	8004496 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004432:	2308      	movs	r3, #8
 8004434:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004436:	2308      	movs	r3, #8
 8004438:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	0e5b      	lsrs	r3, r3, #25
 8004442:	b2db      	uxtb	r3, r3
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	0f5b      	lsrs	r3, r3, #29
 8004452:	b2db      	uxtb	r3, r3
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800445a:	7bbb      	ldrb	r3, [r7, #14]
 800445c:	7b3a      	ldrb	r2, [r7, #12]
 800445e:	4911      	ldr	r1, [pc, #68]	@ (80044a4 <UARTEx_SetNbDataToProcess+0x94>)
 8004460:	5c8a      	ldrb	r2, [r1, r2]
 8004462:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004466:	7b3a      	ldrb	r2, [r7, #12]
 8004468:	490f      	ldr	r1, [pc, #60]	@ (80044a8 <UARTEx_SetNbDataToProcess+0x98>)
 800446a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800446c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004470:	b29a      	uxth	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	7b7a      	ldrb	r2, [r7, #13]
 800447c:	4909      	ldr	r1, [pc, #36]	@ (80044a4 <UARTEx_SetNbDataToProcess+0x94>)
 800447e:	5c8a      	ldrb	r2, [r1, r2]
 8004480:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004484:	7b7a      	ldrb	r2, [r7, #13]
 8004486:	4908      	ldr	r1, [pc, #32]	@ (80044a8 <UARTEx_SetNbDataToProcess+0x98>)
 8004488:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800448a:	fb93 f3f2 	sdiv	r3, r3, r2
 800448e:	b29a      	uxth	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004496:	bf00      	nop
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	0800454c 	.word	0x0800454c
 80044a8:	08004554 	.word	0x08004554

080044ac <memset>:
 80044ac:	4402      	add	r2, r0
 80044ae:	4603      	mov	r3, r0
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d100      	bne.n	80044b6 <memset+0xa>
 80044b4:	4770      	bx	lr
 80044b6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ba:	e7f9      	b.n	80044b0 <memset+0x4>

080044bc <__libc_init_array>:
 80044bc:	b570      	push	{r4, r5, r6, lr}
 80044be:	4d0d      	ldr	r5, [pc, #52]	@ (80044f4 <__libc_init_array+0x38>)
 80044c0:	4c0d      	ldr	r4, [pc, #52]	@ (80044f8 <__libc_init_array+0x3c>)
 80044c2:	1b64      	subs	r4, r4, r5
 80044c4:	10a4      	asrs	r4, r4, #2
 80044c6:	2600      	movs	r6, #0
 80044c8:	42a6      	cmp	r6, r4
 80044ca:	d109      	bne.n	80044e0 <__libc_init_array+0x24>
 80044cc:	4d0b      	ldr	r5, [pc, #44]	@ (80044fc <__libc_init_array+0x40>)
 80044ce:	4c0c      	ldr	r4, [pc, #48]	@ (8004500 <__libc_init_array+0x44>)
 80044d0:	f000 f818 	bl	8004504 <_init>
 80044d4:	1b64      	subs	r4, r4, r5
 80044d6:	10a4      	asrs	r4, r4, #2
 80044d8:	2600      	movs	r6, #0
 80044da:	42a6      	cmp	r6, r4
 80044dc:	d105      	bne.n	80044ea <__libc_init_array+0x2e>
 80044de:	bd70      	pop	{r4, r5, r6, pc}
 80044e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e4:	4798      	blx	r3
 80044e6:	3601      	adds	r6, #1
 80044e8:	e7ee      	b.n	80044c8 <__libc_init_array+0xc>
 80044ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ee:	4798      	blx	r3
 80044f0:	3601      	adds	r6, #1
 80044f2:	e7f2      	b.n	80044da <__libc_init_array+0x1e>
 80044f4:	08004564 	.word	0x08004564
 80044f8:	08004564 	.word	0x08004564
 80044fc:	08004564 	.word	0x08004564
 8004500:	08004568 	.word	0x08004568

08004504 <_init>:
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	bf00      	nop
 8004508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450a:	bc08      	pop	{r3}
 800450c:	469e      	mov	lr, r3
 800450e:	4770      	bx	lr

08004510 <_fini>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	bf00      	nop
 8004514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004516:	bc08      	pop	{r3}
 8004518:	469e      	mov	lr, r3
 800451a:	4770      	bx	lr
