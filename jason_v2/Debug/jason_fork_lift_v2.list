
jason_fork_lift_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009344  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08009528  08009528  0000a528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009768  08009768  0000b0f0  2**0
                  CONTENTS
  4 .ARM          00000008  08009768  08009768  0000a768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009770  08009770  0000b0f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009770  08009770  0000a770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009774  08009774  0000a774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f0  20000000  08009778  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  200000f0  08009868  0000b0f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  08009868  0000b5bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014de4  00000000  00000000  0000b120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f96  00000000  00000000  0001ff04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00022ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dd0  00000000  00000000  000240a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fdc  00000000  00000000  00024e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017442  00000000  00000000  00047e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc01e  00000000  00000000  0005f296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013b2b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056c0  00000000  00000000  0013b2f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001409b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000f0 	.word	0x200000f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800950c 	.word	0x0800950c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000f4 	.word	0x200000f4
 800021c:	0800950c 	.word	0x0800950c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b96a 	b.w	8000fc4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	460c      	mov	r4, r1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d14e      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d14:	4694      	mov	ip, r2
 8000d16:	458c      	cmp	ip, r1
 8000d18:	4686      	mov	lr, r0
 8000d1a:	fab2 f282 	clz	r2, r2
 8000d1e:	d962      	bls.n	8000de6 <__udivmoddi4+0xde>
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0320 	rsb	r3, r2, #32
 8000d26:	4091      	lsls	r1, r2
 8000d28:	fa20 f303 	lsr.w	r3, r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	4319      	orrs	r1, r3
 8000d32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3a:	fa1f f68c 	uxth.w	r6, ip
 8000d3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d46:	fb07 1114 	mls	r1, r7, r4, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb04 f106 	mul.w	r1, r4, r6
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d5e:	f080 8112 	bcs.w	8000f86 <__udivmoddi4+0x27e>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 810f 	bls.w	8000f86 <__udivmoddi4+0x27e>
 8000d68:	3c02      	subs	r4, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a59      	subs	r1, r3, r1
 8000d6e:	fa1f f38e 	uxth.w	r3, lr
 8000d72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d76:	fb07 1110 	mls	r1, r7, r0, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb00 f606 	mul.w	r6, r0, r6
 8000d82:	429e      	cmp	r6, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x94>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d8e:	f080 80fc 	bcs.w	8000f8a <__udivmoddi4+0x282>
 8000d92:	429e      	cmp	r6, r3
 8000d94:	f240 80f9 	bls.w	8000f8a <__udivmoddi4+0x282>
 8000d98:	4463      	add	r3, ip
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000da2:	2100      	movs	r1, #0
 8000da4:	b11d      	cbz	r5, 8000dae <__udivmoddi4+0xa6>
 8000da6:	40d3      	lsrs	r3, r2
 8000da8:	2200      	movs	r2, #0
 8000daa:	e9c5 3200 	strd	r3, r2, [r5]
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d905      	bls.n	8000dc2 <__udivmoddi4+0xba>
 8000db6:	b10d      	cbz	r5, 8000dbc <__udivmoddi4+0xb4>
 8000db8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e7f5      	b.n	8000dae <__udivmoddi4+0xa6>
 8000dc2:	fab3 f183 	clz	r1, r3
 8000dc6:	2900      	cmp	r1, #0
 8000dc8:	d146      	bne.n	8000e58 <__udivmoddi4+0x150>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d302      	bcc.n	8000dd4 <__udivmoddi4+0xcc>
 8000dce:	4290      	cmp	r0, r2
 8000dd0:	f0c0 80f0 	bcc.w	8000fb4 <__udivmoddi4+0x2ac>
 8000dd4:	1a86      	subs	r6, r0, r2
 8000dd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dda:	2001      	movs	r0, #1
 8000ddc:	2d00      	cmp	r5, #0
 8000dde:	d0e6      	beq.n	8000dae <__udivmoddi4+0xa6>
 8000de0:	e9c5 6300 	strd	r6, r3, [r5]
 8000de4:	e7e3      	b.n	8000dae <__udivmoddi4+0xa6>
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	f040 8090 	bne.w	8000f0c <__udivmoddi4+0x204>
 8000dec:	eba1 040c 	sub.w	r4, r1, ip
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e02:	fb08 4416 	mls	r4, r8, r6, r4
 8000e06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e0a:	fb07 f006 	mul.w	r0, r7, r6
 8000e0e:	4298      	cmp	r0, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x11c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x11a>
 8000e1c:	4298      	cmp	r0, r3
 8000e1e:	f200 80cd 	bhi.w	8000fbc <__udivmoddi4+0x2b4>
 8000e22:	4626      	mov	r6, r4
 8000e24:	1a1c      	subs	r4, r3, r0
 8000e26:	fa1f f38e 	uxth.w	r3, lr
 8000e2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb00 f707 	mul.w	r7, r0, r7
 8000e3a:	429f      	cmp	r7, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x148>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x146>
 8000e48:	429f      	cmp	r7, r3
 8000e4a:	f200 80b0 	bhi.w	8000fae <__udivmoddi4+0x2a6>
 8000e4e:	4620      	mov	r0, r4
 8000e50:	1bdb      	subs	r3, r3, r7
 8000e52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e56:	e7a5      	b.n	8000da4 <__udivmoddi4+0x9c>
 8000e58:	f1c1 0620 	rsb	r6, r1, #32
 8000e5c:	408b      	lsls	r3, r1
 8000e5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e62:	431f      	orrs	r7, r3
 8000e64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e68:	fa04 f301 	lsl.w	r3, r4, r1
 8000e6c:	ea43 030c 	orr.w	r3, r3, ip
 8000e70:	40f4      	lsrs	r4, r6
 8000e72:	fa00 f801 	lsl.w	r8, r0, r1
 8000e76:	0c38      	lsrs	r0, r7, #16
 8000e78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e80:	fa1f fc87 	uxth.w	ip, r7
 8000e84:	fb00 441e 	mls	r4, r0, lr, r4
 8000e88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e90:	45a1      	cmp	r9, r4
 8000e92:	fa02 f201 	lsl.w	r2, r2, r1
 8000e96:	d90a      	bls.n	8000eae <__udivmoddi4+0x1a6>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e9e:	f080 8084 	bcs.w	8000faa <__udivmoddi4+0x2a2>
 8000ea2:	45a1      	cmp	r9, r4
 8000ea4:	f240 8081 	bls.w	8000faa <__udivmoddi4+0x2a2>
 8000ea8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	eba4 0409 	sub.w	r4, r4, r9
 8000eb2:	fa1f f983 	uxth.w	r9, r3
 8000eb6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eba:	fb00 4413 	mls	r4, r0, r3, r4
 8000ebe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ec6:	45a4      	cmp	ip, r4
 8000ec8:	d907      	bls.n	8000eda <__udivmoddi4+0x1d2>
 8000eca:	193c      	adds	r4, r7, r4
 8000ecc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ed0:	d267      	bcs.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed2:	45a4      	cmp	ip, r4
 8000ed4:	d965      	bls.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed6:	3b02      	subs	r3, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ede:	fba0 9302 	umull	r9, r3, r0, r2
 8000ee2:	eba4 040c 	sub.w	r4, r4, ip
 8000ee6:	429c      	cmp	r4, r3
 8000ee8:	46ce      	mov	lr, r9
 8000eea:	469c      	mov	ip, r3
 8000eec:	d351      	bcc.n	8000f92 <__udivmoddi4+0x28a>
 8000eee:	d04e      	beq.n	8000f8e <__udivmoddi4+0x286>
 8000ef0:	b155      	cbz	r5, 8000f08 <__udivmoddi4+0x200>
 8000ef2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ef6:	eb64 040c 	sbc.w	r4, r4, ip
 8000efa:	fa04 f606 	lsl.w	r6, r4, r6
 8000efe:	40cb      	lsrs	r3, r1
 8000f00:	431e      	orrs	r6, r3
 8000f02:	40cc      	lsrs	r4, r1
 8000f04:	e9c5 6400 	strd	r6, r4, [r5]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	e750      	b.n	8000dae <__udivmoddi4+0xa6>
 8000f0c:	f1c2 0320 	rsb	r3, r2, #32
 8000f10:	fa20 f103 	lsr.w	r1, r0, r3
 8000f14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f18:	fa24 f303 	lsr.w	r3, r4, r3
 8000f1c:	4094      	lsls	r4, r2
 8000f1e:	430c      	orrs	r4, r1
 8000f20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f28:	fa1f f78c 	uxth.w	r7, ip
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3110 	mls	r1, r8, r0, r3
 8000f34:	0c23      	lsrs	r3, r4, #16
 8000f36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f3a:	fb00 f107 	mul.w	r1, r0, r7
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x24c>
 8000f42:	eb1c 0303 	adds.w	r3, ip, r3
 8000f46:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f4a:	d22c      	bcs.n	8000fa6 <__udivmoddi4+0x29e>
 8000f4c:	4299      	cmp	r1, r3
 8000f4e:	d92a      	bls.n	8000fa6 <__udivmoddi4+0x29e>
 8000f50:	3802      	subs	r0, #2
 8000f52:	4463      	add	r3, ip
 8000f54:	1a5b      	subs	r3, r3, r1
 8000f56:	b2a4      	uxth	r4, r4
 8000f58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f64:	fb01 f307 	mul.w	r3, r1, r7
 8000f68:	42a3      	cmp	r3, r4
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x276>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f74:	d213      	bcs.n	8000f9e <__udivmoddi4+0x296>
 8000f76:	42a3      	cmp	r3, r4
 8000f78:	d911      	bls.n	8000f9e <__udivmoddi4+0x296>
 8000f7a:	3902      	subs	r1, #2
 8000f7c:	4464      	add	r4, ip
 8000f7e:	1ae4      	subs	r4, r4, r3
 8000f80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f84:	e739      	b.n	8000dfa <__udivmoddi4+0xf2>
 8000f86:	4604      	mov	r4, r0
 8000f88:	e6f0      	b.n	8000d6c <__udivmoddi4+0x64>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e706      	b.n	8000d9c <__udivmoddi4+0x94>
 8000f8e:	45c8      	cmp	r8, r9
 8000f90:	d2ae      	bcs.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7a8      	b.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f9e:	4631      	mov	r1, r6
 8000fa0:	e7ed      	b.n	8000f7e <__udivmoddi4+0x276>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	e799      	b.n	8000eda <__udivmoddi4+0x1d2>
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	e7d4      	b.n	8000f54 <__udivmoddi4+0x24c>
 8000faa:	46d6      	mov	lr, sl
 8000fac:	e77f      	b.n	8000eae <__udivmoddi4+0x1a6>
 8000fae:	4463      	add	r3, ip
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	e74d      	b.n	8000e50 <__udivmoddi4+0x148>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e70f      	b.n	8000ddc <__udivmoddi4+0xd4>
 8000fbc:	3e02      	subs	r6, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	e730      	b.n	8000e24 <__udivmoddi4+0x11c>
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <parse_controller_data>:

char controller_buffer[41] = "";

ControllerState controller_state = {.r1 = false, .r2 = false, .r3 = false, .l1 = false, .l2 = false, .l3 = false, .cross = false, .circle = false, .triangle = false, .square = false, .up = false, .down = false, .left = false, .right = false, .l_stick_x = 0, .l_stick_y = 0, .r_stick_x = 0, .r_stick_y = 0, .l2_pressure = 0, .r2_pressure = 0, .ps_button = false, .share_button = false, .options_button = false};

uint8_t parse_controller_data(const char* input, ControllerState* data) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b098      	sub	sp, #96	@ 0x60
 8000fcc:	af08      	add	r7, sp, #32
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  if (input == NULL || data == NULL) {
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <parse_controller_data+0x16>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d104      	bne.n	8000fe8 <parse_controller_data+0x20>
    printf("Invalid input or data pointer\n");
 8000fde:	4887      	ldr	r0, [pc, #540]	@ (80011fc <parse_controller_data+0x234>)
 8000fe0:	f006 ff90 	bl	8007f04 <puts>
    return 1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e105      	b.n	80011f4 <parse_controller_data+0x22c>
  int buttons_value;
  char l_stick_x_str[5], l_stick_y_str[5], r_stick_x_str[5], r_stick_y_str[5];
  int l2_pressure, r2_pressure;
  int misc_buttons;

  int parse_num = sscanf(input, "c:%1x,%03x,%4s,%4s,%4s,%4s,%d,%d,%1x", &dpad_value, &buttons_value, l_stick_y_str, l_stick_x_str, r_stick_y_str, r_stick_x_str, &l2_pressure, &r2_pressure, &misc_buttons);
 8000fe8:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000fec:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	9306      	str	r3, [sp, #24]
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	9305      	str	r3, [sp, #20]
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	9304      	str	r3, [sp, #16]
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	9303      	str	r3, [sp, #12]
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	460b      	mov	r3, r1
 800101c:	4978      	ldr	r1, [pc, #480]	@ (8001200 <parse_controller_data+0x238>)
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f006 fd62 	bl	8007ae8 <siscanf>
 8001024:	63f8      	str	r0, [r7, #60]	@ 0x3c

  if (parse_num != 9) {
 8001026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001028:	2b09      	cmp	r3, #9
 800102a:	d004      	beq.n	8001036 <parse_controller_data+0x6e>
    printf("Error parsing input string\n");
 800102c:	4875      	ldr	r0, [pc, #468]	@ (8001204 <parse_controller_data+0x23c>)
 800102e:	f006 ff69 	bl	8007f04 <puts>
    return 2;
 8001032:	2302      	movs	r3, #2
 8001034:	e0de      	b.n	80011f4 <parse_controller_data+0x22c>
  }

  data->up = dpad_value & 0x1;
 8001036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	bf14      	ite	ne
 8001040:	2301      	movne	r3, #1
 8001042:	2300      	moveq	r3, #0
 8001044:	b2da      	uxtb	r2, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	729a      	strb	r2, [r3, #10]
  data->down = dpad_value & 0x2;
 800104a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	bf14      	ite	ne
 8001054:	2301      	movne	r3, #1
 8001056:	2300      	moveq	r3, #0
 8001058:	b2da      	uxtb	r2, r3
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	72da      	strb	r2, [r3, #11]
  data->right = dpad_value & 0x4;
 800105e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	bf14      	ite	ne
 8001068:	2301      	movne	r3, #1
 800106a:	2300      	moveq	r3, #0
 800106c:	b2da      	uxtb	r2, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	735a      	strb	r2, [r3, #13]
  data->left = dpad_value & 0x8;
 8001072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	2b00      	cmp	r3, #0
 800107a:	bf14      	ite	ne
 800107c:	2301      	movne	r3, #1
 800107e:	2300      	moveq	r3, #0
 8001080:	b2da      	uxtb	r2, r3
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	731a      	strb	r2, [r3, #12]

  data->cross = buttons_value & 0x001;
 8001086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	2b00      	cmp	r3, #0
 800108e:	bf14      	ite	ne
 8001090:	2301      	movne	r3, #1
 8001092:	2300      	moveq	r3, #0
 8001094:	b2da      	uxtb	r2, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	719a      	strb	r2, [r3, #6]
  data->circle = buttons_value & 0x002;
 800109a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf14      	ite	ne
 80010a4:	2301      	movne	r3, #1
 80010a6:	2300      	moveq	r3, #0
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	71da      	strb	r2, [r3, #7]
  data->square = buttons_value & 0x004;
 80010ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bf14      	ite	ne
 80010b8:	2301      	movne	r3, #1
 80010ba:	2300      	moveq	r3, #0
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	725a      	strb	r2, [r3, #9]
  data->triangle = buttons_value & 0x008;
 80010c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	bf14      	ite	ne
 80010cc:	2301      	movne	r3, #1
 80010ce:	2300      	moveq	r3, #0
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	721a      	strb	r2, [r3, #8]
  data->l1 = buttons_value & 0x010;
 80010d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	2b00      	cmp	r3, #0
 80010de:	bf14      	ite	ne
 80010e0:	2301      	movne	r3, #1
 80010e2:	2300      	moveq	r3, #0
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	70da      	strb	r2, [r3, #3]
  data->r1 = buttons_value & 0x020;
 80010ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ec:	f003 0320 	and.w	r3, r3, #32
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	bf14      	ite	ne
 80010f4:	2301      	movne	r3, #1
 80010f6:	2300      	moveq	r3, #0
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	701a      	strb	r2, [r3, #0]
  data->l2 = buttons_value & 0x040;
 80010fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001104:	2b00      	cmp	r3, #0
 8001106:	bf14      	ite	ne
 8001108:	2301      	movne	r3, #1
 800110a:	2300      	moveq	r3, #0
 800110c:	b2da      	uxtb	r2, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	711a      	strb	r2, [r3, #4]
  data->r2 = buttons_value & 0x080;
 8001112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001118:	2b00      	cmp	r3, #0
 800111a:	bf14      	ite	ne
 800111c:	2301      	movne	r3, #1
 800111e:	2300      	moveq	r3, #0
 8001120:	b2da      	uxtb	r2, r3
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	705a      	strb	r2, [r3, #1]
  data->l3 = buttons_value & 0x100;
 8001126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800112c:	2b00      	cmp	r3, #0
 800112e:	bf14      	ite	ne
 8001130:	2301      	movne	r3, #1
 8001132:	2300      	moveq	r3, #0
 8001134:	b2da      	uxtb	r2, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	715a      	strb	r2, [r3, #5]
  data->r3 = buttons_value & 0x200;
 800113a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800113c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001140:	2b00      	cmp	r3, #0
 8001142:	bf14      	ite	ne
 8001144:	2301      	movne	r3, #1
 8001146:	2300      	moveq	r3, #0
 8001148:	b2da      	uxtb	r2, r3
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	709a      	strb	r2, [r3, #2]

  data->l_stick_y = (int8_t)strtol(l_stick_y_str, NULL, 10);
 800114e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001152:	220a      	movs	r2, #10
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f006 fe56 	bl	8007e08 <strtol>
 800115c:	4603      	mov	r3, r0
 800115e:	b25a      	sxtb	r2, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	73da      	strb	r2, [r3, #15]
  data->l_stick_x = (int8_t)strtol(l_stick_x_str, NULL, 10);
 8001164:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001168:	220a      	movs	r2, #10
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f006 fe4b 	bl	8007e08 <strtol>
 8001172:	4603      	mov	r3, r0
 8001174:	b25a      	sxtb	r2, r3
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	739a      	strb	r2, [r3, #14]
  data->r_stick_y = (int8_t)strtol(r_stick_y_str, NULL, 10);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	220a      	movs	r2, #10
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f006 fe40 	bl	8007e08 <strtol>
 8001188:	4603      	mov	r3, r0
 800118a:	b25a      	sxtb	r2, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	745a      	strb	r2, [r3, #17]
  data->r_stick_x = (int8_t)strtol(r_stick_x_str, NULL, 10);
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	220a      	movs	r2, #10
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f006 fe35 	bl	8007e08 <strtol>
 800119e:	4603      	mov	r3, r0
 80011a0:	b25a      	sxtb	r2, r3
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	741a      	strb	r2, [r3, #16]

  data->l2_pressure = (uint16_t)l2_pressure;
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	825a      	strh	r2, [r3, #18]
  data->r2_pressure = (uint16_t)r2_pressure;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	829a      	strh	r2, [r3, #20]

  data->ps_button = misc_buttons & 0x1;
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bf14      	ite	ne
 80011c0:	2301      	movne	r3, #1
 80011c2:	2300      	moveq	r3, #0
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	759a      	strb	r2, [r3, #22]
  data->share_button = misc_buttons & 0x2;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf14      	ite	ne
 80011d4:	2301      	movne	r3, #1
 80011d6:	2300      	moveq	r3, #0
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	75da      	strb	r2, [r3, #23]
  data->options_button = misc_buttons & 0x4;
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	bf14      	ite	ne
 80011e8:	2301      	movne	r3, #1
 80011ea:	2300      	moveq	r3, #0
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	761a      	strb	r2, [r3, #24]

  return 0;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3740      	adds	r7, #64	@ 0x40
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	08009528 	.word	0x08009528
 8001200:	08009548 	.word	0x08009548
 8001204:	08009570 	.word	0x08009570

08001208 <update_encoder>:
  encoder->displacement = 0;
  encoder->velocity = 0;
  encoder->last_counter_value = 0;
}

void update_encoder(EncoderData* encoder) {
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  int current_counter = __HAL_TIM_GET_COUNTER(encoder->htim);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001218:	613b      	str	r3, [r7, #16]
  uint32_t duration = HAL_GetTick() - encoder->last_tick;
 800121a:	f002 fed7 	bl	8003fcc <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	60fb      	str	r3, [r7, #12]
  int num_pulse = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  if (duration <= 1)  // delay for encode to update, in ms
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b01      	cmp	r3, #1
 8001230:	f240 8095 	bls.w	800135e <update_encoder+0x156>
    return;

  if (current_counter == encoder->last_counter_value) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	429a      	cmp	r2, r3
 800123c:	d102      	bne.n	8001244 <update_encoder+0x3c>
    num_pulse = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	e035      	b.n	80012b0 <update_encoder+0xa8>
  } else if (current_counter > encoder->last_counter_value) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	429a      	cmp	r2, r3
 800124c:	dd18      	ble.n	8001280 <update_encoder+0x78>
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move backward, count down, overflow
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	2b10      	cmp	r3, #16
 800125c:	d10a      	bne.n	8001274 <update_encoder+0x6c>
      num_pulse = (__HAL_TIM_GET_AUTORELOAD(encoder->htim) - current_counter + encoder->last_counter_value) * -1;
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	6892      	ldr	r2, [r2, #8]
 800126e:	1a9b      	subs	r3, r3, r2
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	e01d      	b.n	80012b0 <update_encoder+0xa8>
    } else {  // move forward, count up, no overflow
      num_pulse = current_counter - encoder->last_counter_value;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	e017      	b.n	80012b0 <update_encoder+0xa8>
    }
  } else {
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move up, count up, overflow
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0310 	and.w	r3, r3, #16
 800128c:	2b10      	cmp	r3, #16
 800128e:	d105      	bne.n	800129c <update_encoder+0x94>
      num_pulse = (encoder->last_counter_value - current_counter) * -1;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	e009      	b.n	80012b0 <update_encoder+0xa8>
    } else {  // move backward, count down, no overflow
      num_pulse = __HAL_TIM_GET_AUTORELOAD(encoder->htim) - encoder->last_counter_value + current_counter;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6892      	ldr	r2, [r2, #8]
 80012a8:	1a9a      	subs	r2, r3, r2
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4413      	add	r3, r2
 80012ae:	617b      	str	r3, [r7, #20]
    }
  }

  float temp_displacement = (float)num_pulse / encoder->_ppr * 2.0 * M_PI;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	ee07 3a90 	vmov	s15, r3
 80012b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	8a9b      	ldrh	r3, [r3, #20]
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012ca:	ee16 0a90 	vmov	r0, s13
 80012ce:	f7ff f963 	bl	8000598 <__aeabi_f2d>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	f7ff f801 	bl	80002dc <__adddf3>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	a322      	add	r3, pc, #136	@ (adr r3, 800136c <update_encoder+0x164>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7ff f9ae 	bl	8000648 <__aeabi_dmul>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f7ff fca0 	bl	8000c38 <__aeabi_d2f>
 80012f8:	4603      	mov	r3, r0
 80012fa:	60bb      	str	r3, [r7, #8]
  encoder->last_counter_value = current_counter;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	609a      	str	r2, [r3, #8]
  encoder->displacement += temp_displacement;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	ed93 7a00 	vldr	s14, [r3]
 8001308:	edd7 7a02 	vldr	s15, [r7, #8]
 800130c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	edc3 7a00 	vstr	s15, [r3]
  encoder->velocity = temp_displacement * 1000.0 / duration;
 8001316:	68b8      	ldr	r0, [r7, #8]
 8001318:	f7ff f93e 	bl	8000598 <__aeabi_f2d>
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <update_encoder+0x160>)
 8001322:	f7ff f991 	bl	8000648 <__aeabi_dmul>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4614      	mov	r4, r2
 800132c:	461d      	mov	r5, r3
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f7ff f910 	bl	8000554 <__aeabi_ui2d>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7ff faae 	bl	800089c <__aeabi_ddiv>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fc76 	bl	8000c38 <__aeabi_d2f>
 800134c:	4602      	mov	r2, r0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	605a      	str	r2, [r3, #4]
  encoder->last_tick = HAL_GetTick();
 8001352:	f002 fe3b 	bl	8003fcc <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	e000      	b.n	8001360 <update_encoder+0x158>
    return;
 800135e:	bf00      	nop
}
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bdb0      	pop	{r4, r5, r7, pc}
 8001366:	bf00      	nop
 8001368:	408f4000 	.word	0x408f4000
 800136c:	54442d18 	.word	0x54442d18
 8001370:	400921fb 	.word	0x400921fb

08001374 <read_current_velocity>:

WheelVelocity read_current_velocity(EncoderData* encoders) {
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b095      	sub	sp, #84	@ 0x54
 8001378:	af00      	add	r7, sp, #0
 800137a:	6178      	str	r0, [r7, #20]
  if (encoders == NULL)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d107      	bne.n	8001392 <read_current_velocity+0x1e>
    return (WheelVelocity){0, 0, 0, 0};
 8001382:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	e030      	b.n	80013f4 <read_current_velocity+0x80>

  WheelVelocity velocities = {.front_left = 0, .front_right = 0, .rear_left = 0, .rear_right = 0};
 8001392:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013a4:	e00d      	b.n	80013c2 <read_current_velocity+0x4e>
    update_encoder(&(encoders[i]));
 80013a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	461a      	mov	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	4413      	add	r3, r2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff26 	bl	8001208 <update_encoder>
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 80013bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013be:	3301      	adds	r3, #1
 80013c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	ddee      	ble.n	80013a6 <read_current_velocity+0x32>

  velocities.front_left = encoders[FRONT_LEFT].velocity;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  velocities.front_right = encoders[FRONT_RIGHT].velocity;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	3318      	adds	r3, #24
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	633b      	str	r3, [r7, #48]	@ 0x30
  velocities.rear_left = encoders[REAR_LEFT].velocity;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3330      	adds	r3, #48	@ 0x30
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	637b      	str	r3, [r7, #52]	@ 0x34
  velocities.rear_right = encoders[REAR_RIGHT].velocity;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3348      	adds	r3, #72	@ 0x48
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	63bb      	str	r3, [r7, #56]	@ 0x38

  return velocities;
 80013e6:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80013ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80013f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80013f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80013f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80013fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80013fc:	ee06 0a10 	vmov	s12, r0
 8001400:	ee06 1a90 	vmov	s13, r1
 8001404:	ee07 2a10 	vmov	s14, r2
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eeb0 0a46 	vmov.f32	s0, s12
 8001410:	eef0 0a66 	vmov.f32	s1, s13
 8001414:	eeb0 1a47 	vmov.f32	s2, s14
 8001418:	eef0 1a67 	vmov.f32	s3, s15
 800141c:	3754      	adds	r7, #84	@ 0x54
 800141e:	46bd      	mov	sp, r7
 8001420:	bd90      	pop	{r4, r7, pc}
	...

08001424 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	@ 0x28
 8001428:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800143a:	4b50      	ldr	r3, [pc, #320]	@ (800157c <MX_GPIO_Init+0x158>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	4a4f      	ldr	r2, [pc, #316]	@ (800157c <MX_GPIO_Init+0x158>)
 8001440:	f043 0310 	orr.w	r3, r3, #16
 8001444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001446:	4b4d      	ldr	r3, [pc, #308]	@ (800157c <MX_GPIO_Init+0x158>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	4b4a      	ldr	r3, [pc, #296]	@ (800157c <MX_GPIO_Init+0x158>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	4a49      	ldr	r2, [pc, #292]	@ (800157c <MX_GPIO_Init+0x158>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145e:	4b47      	ldr	r3, [pc, #284]	@ (800157c <MX_GPIO_Init+0x158>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800146a:	4b44      	ldr	r3, [pc, #272]	@ (800157c <MX_GPIO_Init+0x158>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	4a43      	ldr	r2, [pc, #268]	@ (800157c <MX_GPIO_Init+0x158>)
 8001470:	f043 0320 	orr.w	r3, r3, #32
 8001474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001476:	4b41      	ldr	r3, [pc, #260]	@ (800157c <MX_GPIO_Init+0x158>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b3e      	ldr	r3, [pc, #248]	@ (800157c <MX_GPIO_Init+0x158>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	4a3d      	ldr	r2, [pc, #244]	@ (800157c <MX_GPIO_Init+0x158>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148e:	4b3b      	ldr	r3, [pc, #236]	@ (800157c <MX_GPIO_Init+0x158>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800149a:	4b38      	ldr	r3, [pc, #224]	@ (800157c <MX_GPIO_Init+0x158>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	4a37      	ldr	r2, [pc, #220]	@ (800157c <MX_GPIO_Init+0x158>)
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a6:	4b35      	ldr	r3, [pc, #212]	@ (800157c <MX_GPIO_Init+0x158>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2108      	movs	r1, #8
 80014b6:	4832      	ldr	r0, [pc, #200]	@ (8001580 <MX_GPIO_Init+0x15c>)
 80014b8:	f003 f81c 	bl	80044f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c6:	f003 f815 	bl	80044f4 <HAL_GPIO_WritePin>
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 80014d0:	482c      	ldr	r0, [pc, #176]	@ (8001584 <MX_GPIO_Init+0x160>)
 80014d2:	f003 f80f 	bl	80044f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014dc:	482a      	ldr	r0, [pc, #168]	@ (8001588 <MX_GPIO_Init+0x164>)
 80014de:	f003 f809 	bl	80044f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_LEFT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_LEFT_ENABLE_Pin;
 80014e2:	2308      	movs	r3, #8
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_LEFT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	4821      	ldr	r0, [pc, #132]	@ (8001580 <MX_GPIO_Init+0x15c>)
 80014fa:	f002 fe79 	bl	80041f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FL_IN2_Pin MOTOR_FL_IN1_Pin MOTOR_RL_IN1_Pin MOTOR_RL_IN2_Pin
                           MOTOR_RR_IN2_Pin MOTOR_RR_IN1_Pin MOTOR_FR_IN1_Pin MOTOR_FR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 80014fe:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 8001502:	617b      	str	r3, [r7, #20]
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800151a:	f002 fe69 	bl	80041f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin;
 800151e:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	4813      	ldr	r0, [pc, #76]	@ (8001584 <MX_GPIO_Init+0x160>)
 8001538:	f002 fe5a 	bl	80041f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_RIGHT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_RIGHT_ENABLE_Pin;
 800153c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_RIGHT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	480c      	ldr	r0, [pc, #48]	@ (8001588 <MX_GPIO_Init+0x164>)
 8001556:	f002 fe4b 	bl	80041f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800155a:	2340      	movs	r3, #64	@ 0x40
 800155c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800155e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	4806      	ldr	r0, [pc, #24]	@ (8001588 <MX_GPIO_Init+0x164>)
 8001570:	f002 fe3e 	bl	80041f0 <HAL_GPIO_Init>

}
 8001574:	bf00      	nop
 8001576:	3728      	adds	r7, #40	@ 0x28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000
 8001580:	48000800 	.word	0x48000800
 8001584:	48001000 	.word	0x48001000
 8001588:	48000c00 	.word	0x48000c00

0800158c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b096      	sub	sp, #88	@ 0x58
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001592:	f002 fcb6 	bl	8003f02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001596:	f000 f977 	bl	8001888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159a:	f7ff ff43 	bl	8001424 <MX_GPIO_Init>
  MX_TIM1_Init();
 800159e:	f001 ff8d 	bl	80034bc <MX_TIM1_Init>
  MX_TIM3_Init();
 80015a2:	f002 f867 	bl	8003674 <MX_TIM3_Init>
  MX_TIM4_Init();
 80015a6:	f002 f8e7 	bl	8003778 <MX_TIM4_Init>
  MX_TIM5_Init();
 80015aa:	f002 f93b 	bl	8003824 <MX_TIM5_Init>
  MX_TIM8_Init();
 80015ae:	f002 f98f 	bl	80038d0 <MX_TIM8_Init>
  MX_TIM2_Init();
 80015b2:	f001 ffdd 	bl	8003570 <MX_TIM2_Init>
  MX_UART4_Init();
 80015b6:	f002 fb4b 	bl	8003c50 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80015ba:	f002 fb95 	bl	8003ce8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80015be:	2100      	movs	r1, #0
 80015c0:	489e      	ldr	r0, [pc, #632]	@ (800183c <main+0x2b0>)
 80015c2:	f004 f911 	bl	80057e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80015c6:	210c      	movs	r1, #12
 80015c8:	489c      	ldr	r0, [pc, #624]	@ (800183c <main+0x2b0>)
 80015ca:	f004 f90d 	bl	80057e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80015ce:	2100      	movs	r1, #0
 80015d0:	489b      	ldr	r0, [pc, #620]	@ (8001840 <main+0x2b4>)
 80015d2:	f004 f909 	bl	80057e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80015d6:	2104      	movs	r1, #4
 80015d8:	4899      	ldr	r0, [pc, #612]	@ (8001840 <main+0x2b4>)
 80015da:	f004 f905 	bl	80057e8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 80015de:	4899      	ldr	r0, [pc, #612]	@ (8001844 <main+0x2b8>)
 80015e0:	f004 f828 	bl	8005634 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80015e4:	213c      	movs	r1, #60	@ 0x3c
 80015e6:	4897      	ldr	r0, [pc, #604]	@ (8001844 <main+0x2b8>)
 80015e8:	f004 fab6 	bl	8005b58 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80015ec:	4896      	ldr	r0, [pc, #600]	@ (8001848 <main+0x2bc>)
 80015ee:	f004 f821 	bl	8005634 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80015f2:	213c      	movs	r1, #60	@ 0x3c
 80015f4:	4894      	ldr	r0, [pc, #592]	@ (8001848 <main+0x2bc>)
 80015f6:	f004 faaf 	bl	8005b58 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80015fa:	4894      	ldr	r0, [pc, #592]	@ (800184c <main+0x2c0>)
 80015fc:	f004 f81a 	bl	8005634 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8001600:	213c      	movs	r1, #60	@ 0x3c
 8001602:	4892      	ldr	r0, [pc, #584]	@ (800184c <main+0x2c0>)
 8001604:	f004 faa8 	bl	8005b58 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8001608:	4891      	ldr	r0, [pc, #580]	@ (8001850 <main+0x2c4>)
 800160a:	f004 f813 	bl	8005634 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 800160e:	213c      	movs	r1, #60	@ 0x3c
 8001610:	488f      	ldr	r0, [pc, #572]	@ (8001850 <main+0x2c4>)
 8001612:	f004 faa1 	bl	8005b58 <HAL_TIM_Encoder_Start_IT>
  // enable both sides of motor driver IC
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_SET);
 8001616:	2201      	movs	r2, #1
 8001618:	2108      	movs	r1, #8
 800161a:	488e      	ldr	r0, [pc, #568]	@ (8001854 <main+0x2c8>)
 800161c:	f002 ff6a 	bl	80044f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001626:	488c      	ldr	r0, [pc, #560]	@ (8001858 <main+0x2cc>)
 8001628:	f002 ff64 	bl	80044f4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800162c:	2201      	movs	r2, #1
 800162e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001632:	488a      	ldr	r0, [pc, #552]	@ (800185c <main+0x2d0>)
 8001634:	f002 ff5e 	bl	80044f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001638:	2201      	movs	r2, #1
 800163a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800163e:	4887      	ldr	r0, [pc, #540]	@ (800185c <main+0x2d0>)
 8001640:	f002 ff58 	bl	80044f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001644:	2201      	movs	r2, #1
 8001646:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800164a:	4884      	ldr	r0, [pc, #528]	@ (800185c <main+0x2d0>)
 800164c:	f002 ff52 	bl	80044f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001650:	2201      	movs	r2, #1
 8001652:	2180      	movs	r1, #128	@ 0x80
 8001654:	4881      	ldr	r0, [pc, #516]	@ (800185c <main+0x2d0>)
 8001656:	f002 ff4d 	bl	80044f4 <HAL_GPIO_WritePin>

  servo_reset_all();
 800165a:	f001 fe05 	bl	8003268 <servo_reset_all>
  HAL_Delay(1000);
 800165e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001662:	f002 fcbf 	bl	8003fe4 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 8001666:	2001      	movs	r0, #1
 8001668:	f002 fcbc 	bl	8003fe4 <HAL_Delay>
    read_current_velocity(encoders);
 800166c:	487c      	ldr	r0, [pc, #496]	@ (8001860 <main+0x2d4>)
 800166e:	f7ff fe81 	bl	8001374 <read_current_velocity>
#if (TEST == 0)
    HAL_UART_Receive(&huart1, (uint8_t *)&controller_buffer, sizeof(controller_buffer), 0xFFFF);
 8001672:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001676:	2229      	movs	r2, #41	@ 0x29
 8001678:	497a      	ldr	r1, [pc, #488]	@ (8001864 <main+0x2d8>)
 800167a:	487b      	ldr	r0, [pc, #492]	@ (8001868 <main+0x2dc>)
 800167c:	f005 fb4e 	bl	8006d1c <HAL_UART_Receive>
    parse_controller_data(controller_buffer, &controller_state);
 8001680:	497a      	ldr	r1, [pc, #488]	@ (800186c <main+0x2e0>)
 8001682:	4878      	ldr	r0, [pc, #480]	@ (8001864 <main+0x2d8>)
 8001684:	f7ff fca0 	bl	8000fc8 <parse_controller_data>

    if (controller_state.options_button && !prev_turn_on) {
 8001688:	4b78      	ldr	r3, [pc, #480]	@ (800186c <main+0x2e0>)
 800168a:	7e1b      	ldrb	r3, [r3, #24]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d020      	beq.n	80016d2 <main+0x146>
 8001690:	4b77      	ldr	r3, [pc, #476]	@ (8001870 <main+0x2e4>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	f083 0301 	eor.w	r3, r3, #1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d019      	beq.n	80016d2 <main+0x146>
      turn_on = !turn_on;
 800169e:	4b75      	ldr	r3, [pc, #468]	@ (8001874 <main+0x2e8>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	bf14      	ite	ne
 80016a6:	2301      	movne	r3, #1
 80016a8:	2300      	moveq	r3, #0
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	f083 0301 	eor.w	r3, r3, #1
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	4b6e      	ldr	r3, [pc, #440]	@ (8001874 <main+0x2e8>)
 80016ba:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, turn_on ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80016bc:	4b6d      	ldr	r3, [pc, #436]	@ (8001874 <main+0x2e8>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	f083 0301 	eor.w	r3, r3, #1
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016cc:	4863      	ldr	r0, [pc, #396]	@ (800185c <main+0x2d0>)
 80016ce:	f002 ff11 	bl	80044f4 <HAL_GPIO_WritePin>
    }
    prev_turn_on = controller_state.options_button;
 80016d2:	4b66      	ldr	r3, [pc, #408]	@ (800186c <main+0x2e0>)
 80016d4:	7e1a      	ldrb	r2, [r3, #24]
 80016d6:	4b66      	ldr	r3, [pc, #408]	@ (8001870 <main+0x2e4>)
 80016d8:	701a      	strb	r2, [r3, #0]

    if (turn_on) {
 80016da:	4b66      	ldr	r3, [pc, #408]	@ (8001874 <main+0x2e8>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0c1      	beq.n	8001666 <main+0xda>
      if (controller_state.r1) {
 80016e2:	4b62      	ldr	r3, [pc, #392]	@ (800186c <main+0x2e0>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d016      	beq.n	8001718 <main+0x18c>
        BaseVelocity target_vel = {0, 0, ROBOT_MAX_Z_VELOCITY * 0.35};
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80016f6:	4b60      	ldr	r3, [pc, #384]	@ (8001878 <main+0x2ec>)
 80016f8:	657b      	str	r3, [r7, #84]	@ 0x54
        movement_control(target_vel);
 80016fa:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80016fe:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001702:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001706:	eeb0 0a66 	vmov.f32	s0, s13
 800170a:	eef0 0a47 	vmov.f32	s1, s14
 800170e:	eeb0 1a67 	vmov.f32	s2, s15
 8001712:	f001 fb81 	bl	8002e18 <movement_control>
 8001716:	e7a6      	b.n	8001666 <main+0xda>
      } else if (controller_state.l1) {
 8001718:	4b54      	ldr	r3, [pc, #336]	@ (800186c <main+0x2e0>)
 800171a:	78db      	ldrb	r3, [r3, #3]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d016      	beq.n	800174e <main+0x1c2>
        BaseVelocity target_vel = {0, 0, ROBOT_MAX_Z_VELOCITY * -0.35};
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	643b      	str	r3, [r7, #64]	@ 0x40
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	647b      	str	r3, [r7, #68]	@ 0x44
 800172c:	4b53      	ldr	r3, [pc, #332]	@ (800187c <main+0x2f0>)
 800172e:	64bb      	str	r3, [r7, #72]	@ 0x48
        movement_control(target_vel);
 8001730:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8001734:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001738:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800173c:	eeb0 0a66 	vmov.f32	s0, s13
 8001740:	eef0 0a47 	vmov.f32	s1, s14
 8001744:	eeb0 1a67 	vmov.f32	s2, s15
 8001748:	f001 fb66 	bl	8002e18 <movement_control>
 800174c:	e78b      	b.n	8001666 <main+0xda>
      } else if (controller_state.up) {
 800174e:	4b47      	ldr	r3, [pc, #284]	@ (800186c <main+0x2e0>)
 8001750:	7a9b      	ldrb	r3, [r3, #10]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d016      	beq.n	8001784 <main+0x1f8>
        BaseVelocity target_vel = {0,
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	637b      	str	r3, [r7, #52]	@ 0x34
 800175c:	4b48      	ldr	r3, [pc, #288]	@ (8001880 <main+0x2f4>)
 800175e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                   ROBOT_MAX_Y_VELOCITY * 0.5,
                                   0};
        movement_control(target_vel);
 8001766:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800176a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800176e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001772:	eeb0 0a66 	vmov.f32	s0, s13
 8001776:	eef0 0a47 	vmov.f32	s1, s14
 800177a:	eeb0 1a67 	vmov.f32	s2, s15
 800177e:	f001 fb4b 	bl	8002e18 <movement_control>
 8001782:	e770      	b.n	8001666 <main+0xda>
      } else if (controller_state.down) {
 8001784:	4b39      	ldr	r3, [pc, #228]	@ (800186c <main+0x2e0>)
 8001786:	7adb      	ldrb	r3, [r3, #11]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d016      	beq.n	80017ba <main+0x22e>
        BaseVelocity target_vel = {0,
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001792:	4b3c      	ldr	r3, [pc, #240]	@ (8001884 <main+0x2f8>)
 8001794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	633b      	str	r3, [r7, #48]	@ 0x30
                                   ROBOT_MAX_Y_VELOCITY * -0.5,
                                   0};
        movement_control(target_vel);
 800179c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80017a0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80017a4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80017a8:	eeb0 0a66 	vmov.f32	s0, s13
 80017ac:	eef0 0a47 	vmov.f32	s1, s14
 80017b0:	eeb0 1a67 	vmov.f32	s2, s15
 80017b4:	f001 fb30 	bl	8002e18 <movement_control>
 80017b8:	e755      	b.n	8001666 <main+0xda>
      } else if (controller_state.left) {
 80017ba:	4b2c      	ldr	r3, [pc, #176]	@ (800186c <main+0x2e0>)
 80017bc:	7b1b      	ldrb	r3, [r3, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d016      	beq.n	80017f0 <main+0x264>
        BaseVelocity target_vel = {ROBOT_MAX_X_VELOCITY * -0.5,
 80017c2:	4b30      	ldr	r3, [pc, #192]	@ (8001884 <main+0x2f8>)
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	@ 0x24
                                   0,
                                   0};
        movement_control(target_vel);
 80017d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80017d6:	ed97 7a08 	vldr	s14, [r7, #32]
 80017da:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80017de:	eeb0 0a66 	vmov.f32	s0, s13
 80017e2:	eef0 0a47 	vmov.f32	s1, s14
 80017e6:	eeb0 1a67 	vmov.f32	s2, s15
 80017ea:	f001 fb15 	bl	8002e18 <movement_control>
 80017ee:	e73a      	b.n	8001666 <main+0xda>
      } else if (controller_state.right) {
 80017f0:	4b1e      	ldr	r3, [pc, #120]	@ (800186c <main+0x2e0>)
 80017f2:	7b5b      	ldrb	r3, [r3, #13]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d016      	beq.n	8001826 <main+0x29a>
        BaseVelocity target_vel = {ROBOT_MAX_X_VELOCITY * 0.5,
 80017f8:	4b21      	ldr	r3, [pc, #132]	@ (8001880 <main+0x2f4>)
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
                                   0,
                                   0};
        movement_control(target_vel);
 8001808:	edd7 6a04 	vldr	s13, [r7, #16]
 800180c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001810:	edd7 7a06 	vldr	s15, [r7, #24]
 8001814:	eeb0 0a66 	vmov.f32	s0, s13
 8001818:	eef0 0a47 	vmov.f32	s1, s14
 800181c:	eeb0 1a67 	vmov.f32	s2, s15
 8001820:	f001 fafa 	bl	8002e18 <movement_control>
 8001824:	e71f      	b.n	8001666 <main+0xda>
      } else {
        WheelPWM target_pwm = {0, 0, 0, 0};
 8001826:	463b      	mov	r3, r7
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
        wheels_control(target_pwm);
 8001832:	463b      	mov	r3, r7
 8001834:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001836:	f000 fc53 	bl	80020e0 <wheels_control>
    HAL_Delay(1);
 800183a:	e714      	b.n	8001666 <main+0xda>
 800183c:	20000214 	.word	0x20000214
 8001840:	200001c8 	.word	0x200001c8
 8001844:	2000017c 	.word	0x2000017c
 8001848:	20000260 	.word	0x20000260
 800184c:	200002ac 	.word	0x200002ac
 8001850:	200002f8 	.word	0x200002f8
 8001854:	48000800 	.word	0x48000800
 8001858:	48000c00 	.word	0x48000c00
 800185c:	48001000 	.word	0x48001000
 8001860:	20000000 	.word	0x20000000
 8001864:	2000010c 	.word	0x2000010c
 8001868:	200003d8 	.word	0x200003d8
 800186c:	20000138 	.word	0x20000138
 8001870:	20000176 	.word	0x20000176
 8001874:	20000175 	.word	0x20000175
 8001878:	402de9e2 	.word	0x402de9e2
 800187c:	c02de9e2 	.word	0xc02de9e2
 8001880:	4058d4fe 	.word	0x4058d4fe
 8001884:	c058d4fe 	.word	0xc058d4fe

08001888 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b094      	sub	sp, #80	@ 0x50
 800188c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188e:	f107 0318 	add.w	r3, r7, #24
 8001892:	2238      	movs	r2, #56	@ 0x38
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f006 fb3c 	bl	8007f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80018aa:	2000      	movs	r0, #0
 80018ac:	f002 fe3a 	bl	8004524 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018b0:	2301      	movs	r3, #1
 80018b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018b8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ba:	2302      	movs	r3, #2
 80018bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018be:	2303      	movs	r3, #3
 80018c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80018c2:	2302      	movs	r3, #2
 80018c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80018c6:	2355      	movs	r3, #85	@ 0x55
 80018c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ca:	2302      	movs	r3, #2
 80018cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018ce:	2302      	movs	r3, #2
 80018d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018d2:	2302      	movs	r3, #2
 80018d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018d6:	f107 0318 	add.w	r3, r7, #24
 80018da:	4618      	mov	r0, r3
 80018dc:	f002 fed6 	bl	800468c <HAL_RCC_OscConfig>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <SystemClock_Config+0x62>
    Error_Handler();
 80018e6:	f000 f818 	bl	800191a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ea:	230f      	movs	r3, #15
 80018ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ee:	2303      	movs	r3, #3
 80018f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2104      	movs	r1, #4
 8001902:	4618      	mov	r0, r3
 8001904:	f003 f9d4 	bl	8004cb0 <HAL_RCC_ClockConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SystemClock_Config+0x8a>
    Error_Handler();
 800190e:	f000 f804 	bl	800191a <Error_Handler>
  }
}
 8001912:	bf00      	nop
 8001914:	3750      	adds	r7, #80	@ 0x50
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800191e:	b672      	cpsid	i
}
 8001920:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001922:	bf00      	nop
 8001924:	e7fd      	b.n	8001922 <Error_Handler+0x8>
	...

08001928 <base2wheel>:
#include "movement.h"

extern WheelVelocity test_vel;
extern WheelPWM test_pwm;

WheelVelocity base2wheel(BaseVelocity base_vel) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b094      	sub	sp, #80	@ 0x50
 800192c:	af00      	add	r7, sp, #0
 800192e:	eef0 6a40 	vmov.f32	s13, s0
 8001932:	eeb0 7a60 	vmov.f32	s14, s1
 8001936:	eef0 7a41 	vmov.f32	s15, s2
 800193a:	edc7 6a05 	vstr	s13, [r7, #20]
 800193e:	ed87 7a06 	vstr	s14, [r7, #24]
 8001942:	edc7 7a07 	vstr	s15, [r7, #28]
  float front_left = 0, front_right = 0, rear_left = 0, rear_right = 0;
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	647b      	str	r3, [r7, #68]	@ 0x44
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	643b      	str	r3, [r7, #64]	@ 0x40
  if (base_vel.z_vel == 0) {
 800195e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001962:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196a:	f040 809d 	bne.w	8001aa8 <base2wheel+0x180>
    front_left = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 800196e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001972:	edd7 7a05 	vldr	s15, [r7, #20]
 8001976:	ee27 7a27 	vmul.f32	s14, s14, s15
 800197a:	edd7 6a06 	vldr	s13, [r7, #24]
 800197e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001986:	ee77 7a27 	vadd.f32	s15, s14, s15
 800198a:	ee17 0a90 	vmov	r0, s15
 800198e:	f7fe fe03 	bl	8000598 <__aeabi_f2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	ec43 2b10 	vmov	d0, r2, r3
 800199a:	f007 fb0f 	bl	8008fbc <sqrt>
 800199e:	ec51 0b10 	vmov	r0, r1, d0
 80019a2:	a38b      	add	r3, pc, #556	@ (adr r3, 8001bd0 <base2wheel+0x2a8>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f7fe ff78 	bl	800089c <__aeabi_ddiv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7ff f940 	bl	8000c38 <__aeabi_d2f>
 80019b8:	4603      	mov	r3, r0
 80019ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
    front_right = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 80019bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80019c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019c8:	edd7 6a06 	vldr	s13, [r7, #24]
 80019cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80019d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d8:	ee17 0a90 	vmov	r0, s15
 80019dc:	f7fe fddc 	bl	8000598 <__aeabi_f2d>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	ec43 2b10 	vmov	d0, r2, r3
 80019e8:	f007 fae8 	bl	8008fbc <sqrt>
 80019ec:	ec51 0b10 	vmov	r0, r1, d0
 80019f0:	a377      	add	r3, pc, #476	@ (adr r3, 8001bd0 <base2wheel+0x2a8>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe ff51 	bl	800089c <__aeabi_ddiv>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	f7ff f919 	bl	8000c38 <__aeabi_d2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	64bb      	str	r3, [r7, #72]	@ 0x48
    rear_left = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 8001a0a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a16:	edd7 6a06 	vldr	s13, [r7, #24]
 8001a1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a26:	ee17 0a90 	vmov	r0, s15
 8001a2a:	f7fe fdb5 	bl	8000598 <__aeabi_f2d>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	ec43 2b10 	vmov	d0, r2, r3
 8001a36:	f007 fac1 	bl	8008fbc <sqrt>
 8001a3a:	ec51 0b10 	vmov	r0, r1, d0
 8001a3e:	a364      	add	r3, pc, #400	@ (adr r3, 8001bd0 <base2wheel+0x2a8>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe ff2a 	bl	800089c <__aeabi_ddiv>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f7ff f8f2 	bl	8000c38 <__aeabi_d2f>
 8001a54:	4603      	mov	r3, r0
 8001a56:	647b      	str	r3, [r7, #68]	@ 0x44
    rear_right = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 8001a58:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a64:	edd7 6a06 	vldr	s13, [r7, #24]
 8001a68:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a74:	ee17 0a90 	vmov	r0, s15
 8001a78:	f7fe fd8e 	bl	8000598 <__aeabi_f2d>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	ec43 2b10 	vmov	d0, r2, r3
 8001a84:	f007 fa9a 	bl	8008fbc <sqrt>
 8001a88:	ec51 0b10 	vmov	r0, r1, d0
 8001a8c:	a350      	add	r3, pc, #320	@ (adr r3, 8001bd0 <base2wheel+0x2a8>)
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	f7fe ff03 	bl	800089c <__aeabi_ddiv>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f7ff f8cb 	bl	8000c38 <__aeabi_d2f>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8001aa6:	e04d      	b.n	8001b44 <base2wheel+0x21c>
  } else {
    front_left = base_vel.z_vel / RADIUS_WHEEL;
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fd74 	bl	8000598 <__aeabi_f2d>
 8001ab0:	a347      	add	r3, pc, #284	@ (adr r3, 8001bd0 <base2wheel+0x2a8>)
 8001ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab6:	f7fe fef1 	bl	800089c <__aeabi_ddiv>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f7ff f8b9 	bl	8000c38 <__aeabi_d2f>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    front_right = -base_vel.z_vel / RADIUS_WHEEL;
 8001aca:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ace:	eef1 7a67 	vneg.f32	s15, s15
 8001ad2:	ee17 3a90 	vmov	r3, s15
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fd5e 	bl	8000598 <__aeabi_f2d>
 8001adc:	a33c      	add	r3, pc, #240	@ (adr r3, 8001bd0 <base2wheel+0x2a8>)
 8001ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae2:	f7fe fedb 	bl	800089c <__aeabi_ddiv>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	f7ff f8a3 	bl	8000c38 <__aeabi_d2f>
 8001af2:	4603      	mov	r3, r0
 8001af4:	64bb      	str	r3, [r7, #72]	@ 0x48
    rear_left = base_vel.z_vel / RADIUS_WHEEL;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd4d 	bl	8000598 <__aeabi_f2d>
 8001afe:	a334      	add	r3, pc, #208	@ (adr r3, 8001bd0 <base2wheel+0x2a8>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe feca 	bl	800089c <__aeabi_ddiv>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7ff f892 	bl	8000c38 <__aeabi_d2f>
 8001b14:	4603      	mov	r3, r0
 8001b16:	647b      	str	r3, [r7, #68]	@ 0x44
    rear_right = -base_vel.z_vel / RADIUS_WHEEL;
 8001b18:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b1c:	eef1 7a67 	vneg.f32	s15, s15
 8001b20:	ee17 3a90 	vmov	r3, s15
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fd37 	bl	8000598 <__aeabi_f2d>
 8001b2a:	a329      	add	r3, pc, #164	@ (adr r3, 8001bd0 <base2wheel+0x2a8>)
 8001b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b30:	f7fe feb4 	bl	800089c <__aeabi_ddiv>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7ff f87c 	bl	8000c38 <__aeabi_d2f>
 8001b40:	4603      	mov	r3, r0
 8001b42:	643b      	str	r3, [r7, #64]	@ 0x40
  }
  if (base_vel.x_vel < 0 || base_vel.y_vel < 0) {
 8001b44:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b50:	d406      	bmi.n	8001b60 <base2wheel+0x238>
 8001b52:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5e:	d517      	bpl.n	8001b90 <base2wheel+0x268>
    front_left = -front_left;
 8001b60:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001b64:	eef1 7a67 	vneg.f32	s15, s15
 8001b68:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    front_right = -front_right;
 8001b6c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001b70:	eef1 7a67 	vneg.f32	s15, s15
 8001b74:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    rear_left = -rear_left;
 8001b78:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001b7c:	eef1 7a67 	vneg.f32	s15, s15
 8001b80:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    rear_right = -rear_right;
 8001b84:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001b88:	eef1 7a67 	vneg.f32	s15, s15
 8001b8c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  }
  return (WheelVelocity){front_left, front_right, rear_left, rear_right};
 8001b90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b92:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b96:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ba0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001ba2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001ba4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ba8:	ee06 0a10 	vmov	s12, r0
 8001bac:	ee06 1a90 	vmov	s13, r1
 8001bb0:	ee07 2a10 	vmov	s14, r2
 8001bb4:	ee07 3a90 	vmov	s15, r3
}
 8001bb8:	eeb0 0a46 	vmov.f32	s0, s12
 8001bbc:	eef0 0a66 	vmov.f32	s1, s13
 8001bc0:	eeb0 1a47 	vmov.f32	s2, s14
 8001bc4:	eef0 1a67 	vmov.f32	s3, s15
 8001bc8:	3750      	adds	r7, #80	@ 0x50
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	020c49ba 	.word	0x020c49ba
 8001bd4:	3f96872b 	.word	0x3f96872b

08001bd8 <wheel2pwm>:
  // float y_vel = (-wheel_vel.front_left + wheel_vel.front_right + wheel_vel.rear_left - wheel_vel.rear_right) * RADIUS_WHEEL / 4.0;
  // float z_vel = (-wheel_vel.front_left + wheel_vel.front_right - wheel_vel.rear_left + wheel_vel.rear_right) * RADIUS_WHEEL / (4.0 * (LENGTH_CENTER_WHEEL_X + LENGTH_CENTER_WHEEL_Y));
  // return (BaseVelocity){x_vel, y_vel, z_vel};
}

WheelPWM wheel2pwm(WheelVelocity wheel_vel) {
 8001bd8:	b5b0      	push	{r4, r5, r7, lr}
 8001bda:	b08e      	sub	sp, #56	@ 0x38
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6178      	str	r0, [r7, #20]
 8001be0:	eeb0 6a40 	vmov.f32	s12, s0
 8001be4:	eef0 6a60 	vmov.f32	s13, s1
 8001be8:	eeb0 7a41 	vmov.f32	s14, s2
 8001bec:	eef0 7a61 	vmov.f32	s15, s3
 8001bf0:	ed87 6a01 	vstr	s12, [r7, #4]
 8001bf4:	edc7 6a02 	vstr	s13, [r7, #8]
 8001bf8:	ed87 7a03 	vstr	s14, [r7, #12]
 8001bfc:	edc7 7a04 	vstr	s15, [r7, #16]
  int front_left = (int)(wheel_vel.front_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * FL_MOTOR_ARR / 100.0);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fcc8 	bl	8000598 <__aeabi_f2d>
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	4b92      	ldr	r3, [pc, #584]	@ (8001e58 <wheel2pwm+0x280>)
 8001c0e:	f7fe fd1b 	bl	8000648 <__aeabi_dmul>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	a38b      	add	r3, pc, #556	@ (adr r3, 8001e48 <wheel2pwm+0x270>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe fe3c 	bl	800089c <__aeabi_ddiv>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	a388      	add	r3, pc, #544	@ (adr r3, 8001e50 <wheel2pwm+0x278>)
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	f7fe fe33 	bl	800089c <__aeabi_ddiv>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	4b86      	ldr	r3, [pc, #536]	@ (8001e5c <wheel2pwm+0x284>)
 8001c44:	f7fe fd00 	bl	8000648 <__aeabi_dmul>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4614      	mov	r4, r2
 8001c4e:	461d      	mov	r5, r3
 8001c50:	4b83      	ldr	r3, [pc, #524]	@ (8001e60 <wheel2pwm+0x288>)
 8001c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc7d 	bl	8000554 <__aeabi_ui2d>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4620      	mov	r0, r4
 8001c60:	4629      	mov	r1, r5
 8001c62:	f7fe fcf1 	bl	8000648 <__aeabi_dmul>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	4b7a      	ldr	r3, [pc, #488]	@ (8001e5c <wheel2pwm+0x284>)
 8001c74:	f7fe fe12 	bl	800089c <__aeabi_ddiv>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f7fe ff92 	bl	8000ba8 <__aeabi_d2iz>
 8001c84:	4603      	mov	r3, r0
 8001c86:	637b      	str	r3, [r7, #52]	@ 0x34
  int front_right = (int)(wheel_vel.front_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * FR_MOTOR_ARR / 100.0);
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fc84 	bl	8000598 <__aeabi_f2d>
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	4b70      	ldr	r3, [pc, #448]	@ (8001e58 <wheel2pwm+0x280>)
 8001c96:	f7fe fcd7 	bl	8000648 <__aeabi_dmul>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	a369      	add	r3, pc, #420	@ (adr r3, 8001e48 <wheel2pwm+0x270>)
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	f7fe fdf8 	bl	800089c <__aeabi_ddiv>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	a366      	add	r3, pc, #408	@ (adr r3, 8001e50 <wheel2pwm+0x278>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	f7fe fdef 	bl	800089c <__aeabi_ddiv>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	4b64      	ldr	r3, [pc, #400]	@ (8001e5c <wheel2pwm+0x284>)
 8001ccc:	f7fe fcbc 	bl	8000648 <__aeabi_dmul>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4614      	mov	r4, r2
 8001cd6:	461d      	mov	r5, r3
 8001cd8:	4b61      	ldr	r3, [pc, #388]	@ (8001e60 <wheel2pwm+0x288>)
 8001cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fc39 	bl	8000554 <__aeabi_ui2d>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	4629      	mov	r1, r5
 8001cea:	f7fe fcad 	bl	8000648 <__aeabi_dmul>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	4b58      	ldr	r3, [pc, #352]	@ (8001e5c <wheel2pwm+0x284>)
 8001cfc:	f7fe fdce 	bl	800089c <__aeabi_ddiv>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	f7fe ff4e 	bl	8000ba8 <__aeabi_d2iz>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	633b      	str	r3, [r7, #48]	@ 0x30
  int rear_left = (int)(wheel_vel.rear_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RL_MOTOR_ARR / 100.0);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc40 	bl	8000598 <__aeabi_f2d>
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	4b4e      	ldr	r3, [pc, #312]	@ (8001e58 <wheel2pwm+0x280>)
 8001d1e:	f7fe fc93 	bl	8000648 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	a347      	add	r3, pc, #284	@ (adr r3, 8001e48 <wheel2pwm+0x270>)
 8001d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d30:	f7fe fdb4 	bl	800089c <__aeabi_ddiv>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	a344      	add	r3, pc, #272	@ (adr r3, 8001e50 <wheel2pwm+0x278>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	f7fe fdab 	bl	800089c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	4b42      	ldr	r3, [pc, #264]	@ (8001e5c <wheel2pwm+0x284>)
 8001d54:	f7fe fc78 	bl	8000648 <__aeabi_dmul>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4614      	mov	r4, r2
 8001d5e:	461d      	mov	r5, r3
 8001d60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fbf4 	bl	8000554 <__aeabi_ui2d>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4620      	mov	r0, r4
 8001d72:	4629      	mov	r1, r5
 8001d74:	f7fe fc68 	bl	8000648 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	4b35      	ldr	r3, [pc, #212]	@ (8001e5c <wheel2pwm+0x284>)
 8001d86:	f7fe fd89 	bl	800089c <__aeabi_ddiv>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	f7fe ff09 	bl	8000ba8 <__aeabi_d2iz>
 8001d96:	4603      	mov	r3, r0
 8001d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int rear_right = (int)(wheel_vel.rear_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RR_MOTOR_ARR / 100.0);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fbfb 	bl	8000598 <__aeabi_f2d>
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	4b2c      	ldr	r3, [pc, #176]	@ (8001e58 <wheel2pwm+0x280>)
 8001da8:	f7fe fc4e 	bl	8000648 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	a324      	add	r3, pc, #144	@ (adr r3, 8001e48 <wheel2pwm+0x270>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	f7fe fd6f 	bl	800089c <__aeabi_ddiv>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	a322      	add	r3, pc, #136	@ (adr r3, 8001e50 <wheel2pwm+0x278>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fd66 	bl	800089c <__aeabi_ddiv>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <wheel2pwm+0x284>)
 8001dde:	f7fe fc33 	bl	8000648 <__aeabi_dmul>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4614      	mov	r4, r2
 8001de8:	461d      	mov	r5, r3
 8001dea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fbaf 	bl	8000554 <__aeabi_ui2d>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	4629      	mov	r1, r5
 8001dfe:	f7fe fc23 	bl	8000648 <__aeabi_dmul>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <wheel2pwm+0x284>)
 8001e10:	f7fe fd44 	bl	800089c <__aeabi_ddiv>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f7fe fec4 	bl	8000ba8 <__aeabi_d2iz>
 8001e20:	4603      	mov	r3, r0
 8001e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (WheelPWM){front_left, front_right, rear_left, rear_right};
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e3a:	60da      	str	r2, [r3, #12]
}
 8001e3c:	6978      	ldr	r0, [r7, #20]
 8001e3e:	3738      	adds	r7, #56	@ 0x38
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bdb0      	pop	{r4, r5, r7, pc}
 8001e44:	f3af 8000 	nop.w
 8001e48:	54442d18 	.word	0x54442d18
 8001e4c:	401921fb 	.word	0x401921fb
 8001e50:	c473d1cb 	.word	0xc473d1cb
 8001e54:	40b069b0 	.word	0x40b069b0
 8001e58:	404e0000 	.word	0x404e0000
 8001e5c:	40590000 	.word	0x40590000
 8001e60:	40000400 	.word	0x40000400

08001e64 <wheel_control>:

void wheel_control(Wheel wheel, int speed) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	6039      	str	r1, [r7, #0]
 8001e6e:	71fb      	strb	r3, [r7, #7]
  if (speed > 16800)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8001e76:	4293      	cmp	r3, r2
 8001e78:	dd03      	ble.n	8001e82 <wheel_control+0x1e>
    speed = 16800;
 8001e7a:	f244 13a0 	movw	r3, #16800	@ 0x41a0
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	e005      	b.n	8001e8e <wheel_control+0x2a>
  else if (speed < -16800)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	4a94      	ldr	r2, [pc, #592]	@ (80020d8 <wheel_control+0x274>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	da01      	bge.n	8001e8e <wheel_control+0x2a>
    speed = -16800;
 8001e8a:	4b93      	ldr	r3, [pc, #588]	@ (80020d8 <wheel_control+0x274>)
 8001e8c:	603b      	str	r3, [r7, #0]

  switch (wheel) {
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	f200 80e9 	bhi.w	8002068 <wheel_control+0x204>
 8001e96:	a201      	add	r2, pc, #4	@ (adr r2, 8001e9c <wheel_control+0x38>)
 8001e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9c:	08001ead 	.word	0x08001ead
 8001ea0:	08001f15 	.word	0x08001f15
 8001ea4:	08001f89 	.word	0x08001f89
 8001ea8:	08001ff3 	.word	0x08001ff3
    case FRONT_LEFT:
      if (speed > 0) {
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	dd0c      	ble.n	8001ecc <wheel_control+0x68>
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = speed;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2120      	movs	r1, #32
 8001eb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eba:	f002 fb1b 	bl	80044f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_SET);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	2110      	movs	r1, #16
 8001ec2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ec6:	f002 fb15 	bl	80044f4 <HAL_GPIO_WritePin>
 8001eca:	e01b      	b.n	8001f04 <wheel_control+0xa0>
      } else if (speed < 0) {
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	da0c      	bge.n	8001eec <wheel_control+0x88>
        // FL_MOTOR_A_CCR = -speed;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_SET);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	2120      	movs	r1, #32
 8001ed6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eda:	f002 fb0b 	bl	80044f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2110      	movs	r1, #16
 8001ee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee6:	f002 fb05 	bl	80044f4 <HAL_GPIO_WritePin>
 8001eea:	e00b      	b.n	8001f04 <wheel_control+0xa0>
      } else {
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2120      	movs	r1, #32
 8001ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ef4:	f002 fafe 	bl	80044f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2110      	movs	r1, #16
 8001efc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f00:	f002 faf8 	bl	80044f4 <HAL_GPIO_WritePin>
      }
      FL_MOTOR_CCR = abs(speed);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001f0a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001f0e:	4b73      	ldr	r3, [pc, #460]	@ (80020dc <wheel_control+0x278>)
 8001f10:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8001f12:	e0dd      	b.n	80020d0 <wheel_control+0x26c>
    case FRONT_RIGHT:
      if (speed < 0) {
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	da0e      	bge.n	8001f38 <wheel_control+0xd4>
        // FR_MOTOR_B_CCR = speed;
        // FR_MOTOR_A_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_RESET);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f24:	f002 fae6 	bl	80044f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_SET);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f32:	f002 fadf 	bl	80044f4 <HAL_GPIO_WritePin>
 8001f36:	e01f      	b.n	8001f78 <wheel_control+0x114>
      } else if (speed > 0) {
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	dd0e      	ble.n	8001f5c <wheel_control+0xf8>
        // FR_MOTOR_B_CCR = 0;
        // FR_MOTOR_A_CCR = -speed;
        HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_SET);
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f48:	f002 fad4 	bl	80044f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f56:	f002 facd 	bl	80044f4 <HAL_GPIO_WritePin>
 8001f5a:	e00d      	b.n	8001f78 <wheel_control+0x114>
      } else {
        // FR_MOTOR_A_CCR = 0;
        // FR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_RESET);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f66:	f002 fac5 	bl	80044f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f74:	f002 fabe 	bl	80044f4 <HAL_GPIO_WritePin>
      }
      FR_MOTOR_CCR = abs(speed);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001f7e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001f82:	4b56      	ldr	r3, [pc, #344]	@ (80020dc <wheel_control+0x278>)
 8001f84:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 8001f86:	e0a3      	b.n	80020d0 <wheel_control+0x26c>
    case REAR_LEFT:
      if (speed > 0) {
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	dd0c      	ble.n	8001fa8 <wheel_control+0x144>
        // RL_MOTOR_B_CCR = 0;
        // RL_MOTOR_A_CCR = speed;
        HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2140      	movs	r1, #64	@ 0x40
 8001f92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f96:	f002 faad 	bl	80044f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin, GPIO_PIN_SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2180      	movs	r1, #128	@ 0x80
 8001f9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fa2:	f002 faa7 	bl	80044f4 <HAL_GPIO_WritePin>
 8001fa6:	e01b      	b.n	8001fe0 <wheel_control+0x17c>
      } else if (speed < 0) {
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	da0c      	bge.n	8001fc8 <wheel_control+0x164>
        // RL_MOTOR_B_CCR = -speed;
        // RL_MOTOR_A_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_SET);
 8001fae:	2201      	movs	r2, #1
 8001fb0:	2140      	movs	r1, #64	@ 0x40
 8001fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fb6:	f002 fa9d 	bl	80044f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2180      	movs	r1, #128	@ 0x80
 8001fbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fc2:	f002 fa97 	bl	80044f4 <HAL_GPIO_WritePin>
 8001fc6:	e00b      	b.n	8001fe0 <wheel_control+0x17c>
      } else {
        // RL_MOTOR_A_CCR = 0;
        // RL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_RESET);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2140      	movs	r1, #64	@ 0x40
 8001fcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fd0:	f002 fa90 	bl	80044f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin, GPIO_PIN_RESET);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2180      	movs	r1, #128	@ 0x80
 8001fd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fdc:	f002 fa8a 	bl	80044f4 <HAL_GPIO_WritePin>
      }
      RL_MOTOR_CCR = abs(speed);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001fe6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001fea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001fee:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 8001ff0:	e06e      	b.n	80020d0 <wheel_control+0x26c>
    case REAR_RIGHT:
      if (speed < 0) {
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	da0e      	bge.n	8002016 <wheel_control+0x1b2>
        // RR_MOTOR_A_CCR = speed;
        // RR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_RESET);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ffe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002002:	f002 fa77 	bl	80044f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin, GPIO_PIN_SET);
 8002006:	2201      	movs	r2, #1
 8002008:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800200c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002010:	f002 fa70 	bl	80044f4 <HAL_GPIO_WritePin>
 8002014:	e01f      	b.n	8002056 <wheel_control+0x1f2>
      } else if (speed > 0) {
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	dd0e      	ble.n	800203a <wheel_control+0x1d6>
        // RR_MOTOR_A_CCR = 0;
        // RR_MOTOR_B_CCR = -speed;
        HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_SET);
 800201c:	2201      	movs	r2, #1
 800201e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002022:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002026:	f002 fa65 	bl	80044f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin, GPIO_PIN_RESET);
 800202a:	2200      	movs	r2, #0
 800202c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002030:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002034:	f002 fa5e 	bl	80044f4 <HAL_GPIO_WritePin>
 8002038:	e00d      	b.n	8002056 <wheel_control+0x1f2>
      } else {
        // RR_MOTOR_A_CCR = 0;
        // RR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_RESET);
 800203a:	2200      	movs	r2, #0
 800203c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002040:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002044:	f002 fa56 	bl	80044f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin, GPIO_PIN_RESET);
 8002048:	2200      	movs	r2, #0
 800204a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800204e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002052:	f002 fa4f 	bl	80044f4 <HAL_GPIO_WritePin>
      }
      RR_MOTOR_CCR = abs(speed);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800205c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002060:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002064:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
 8002066:	e033      	b.n	80020d0 <wheel_control+0x26c>
    default:
      if (speed > 0) {
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	dd0c      	ble.n	8002088 <wheel_control+0x224>
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = speed;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 800206e:	2200      	movs	r2, #0
 8002070:	2120      	movs	r1, #32
 8002072:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002076:	f002 fa3d 	bl	80044f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_SET);
 800207a:	2201      	movs	r2, #1
 800207c:	2110      	movs	r1, #16
 800207e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002082:	f002 fa37 	bl	80044f4 <HAL_GPIO_WritePin>
 8002086:	e01b      	b.n	80020c0 <wheel_control+0x25c>
      } else if (speed < 0) {
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	da0c      	bge.n	80020a8 <wheel_control+0x244>
        // FL_MOTOR_A_CCR = -speed;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_SET);
 800208e:	2201      	movs	r2, #1
 8002090:	2120      	movs	r1, #32
 8002092:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002096:	f002 fa2d 	bl	80044f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 800209a:	2200      	movs	r2, #0
 800209c:	2110      	movs	r1, #16
 800209e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020a2:	f002 fa27 	bl	80044f4 <HAL_GPIO_WritePin>
 80020a6:	e00b      	b.n	80020c0 <wheel_control+0x25c>
      } else {
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 80020a8:	2200      	movs	r2, #0
 80020aa:	2120      	movs	r1, #32
 80020ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020b0:	f002 fa20 	bl	80044f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2110      	movs	r1, #16
 80020b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020bc:	f002 fa1a 	bl	80044f4 <HAL_GPIO_WritePin>
      }
      FL_MOTOR_CCR = abs(speed);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80020c6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80020ca:	4b04      	ldr	r3, [pc, #16]	@ (80020dc <wheel_control+0x278>)
 80020cc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80020ce:	bf00      	nop
  }
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	ffffbe60 	.word	0xffffbe60
 80020dc:	40000400 	.word	0x40000400

080020e0 <wheels_control>:

void wheels_control(WheelPWM pwm) {
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	463c      	mov	r4, r7
 80020e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  wheel_control(FRONT_LEFT, pwm.front_left);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	4619      	mov	r1, r3
 80020f0:	2000      	movs	r0, #0
 80020f2:	f7ff feb7 	bl	8001e64 <wheel_control>
  wheel_control(FRONT_RIGHT, pwm.front_right);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4619      	mov	r1, r3
 80020fa:	2001      	movs	r0, #1
 80020fc:	f7ff feb2 	bl	8001e64 <wheel_control>
  wheel_control(REAR_LEFT, pwm.rear_left);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4619      	mov	r1, r3
 8002104:	2002      	movs	r0, #2
 8002106:	f7ff fead 	bl	8001e64 <wheel_control>
  wheel_control(REAR_RIGHT, pwm.rear_right);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4619      	mov	r1, r3
 800210e:	2003      	movs	r0, #3
 8002110:	f7ff fea8 	bl	8001e64 <wheel_control>
  test_pwm.front_left = pwm.front_left;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4a07      	ldr	r2, [pc, #28]	@ (8002134 <wheels_control+0x54>)
 8002118:	6013      	str	r3, [r2, #0]
  test_pwm.front_right = pwm.front_right;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a05      	ldr	r2, [pc, #20]	@ (8002134 <wheels_control+0x54>)
 800211e:	6053      	str	r3, [r2, #4]
  test_pwm.rear_left = pwm.rear_left;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4a04      	ldr	r2, [pc, #16]	@ (8002134 <wheels_control+0x54>)
 8002124:	6093      	str	r3, [r2, #8]
  test_pwm.rear_right = pwm.rear_right;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4a02      	ldr	r2, [pc, #8]	@ (8002134 <wheels_control+0x54>)
 800212a:	60d3      	str	r3, [r2, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	bd90      	pop	{r4, r7, pc}
 8002134:	20000164 	.word	0x20000164

08002138 <rotate_motor>:

void rotate_motor(BaseVelocity base_vel) {
 8002138:	b5b0      	push	{r4, r5, r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	eef0 6a40 	vmov.f32	s13, s0
 8002142:	eeb0 7a60 	vmov.f32	s14, s1
 8002146:	eef0 7a41 	vmov.f32	s15, s2
 800214a:	edc7 6a01 	vstr	s13, [r7, #4]
 800214e:	ed87 7a02 	vstr	s14, [r7, #8]
 8002152:	edc7 7a03 	vstr	s15, [r7, #12]
  if (base_vel.z_vel != 0) {
 8002156:	edd7 7a03 	vldr	s15, [r7, #12]
 800215a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800215e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002162:	d075      	beq.n	8002250 <rotate_motor+0x118>
    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(45), SHORTEST_TIME_ROTATE(1, 45));
 8002164:	4bd6      	ldr	r3, [pc, #856]	@ (80024c0 <rotate_motor+0x388>)
 8002166:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800216a:	3b2d      	subs	r3, #45	@ 0x2d
 800216c:	2b00      	cmp	r3, #0
 800216e:	bfb8      	it	lt
 8002170:	425b      	neglt	r3, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe f9fe 	bl	8000574 <__aeabi_i2d>
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	4bd1      	ldr	r3, [pc, #836]	@ (80024c4 <rotate_motor+0x38c>)
 800217e:	f7fe fa63 	bl	8000648 <__aeabi_dmul>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	f7fe fd35 	bl	8000bf8 <__aeabi_d2uiz>
 800218e:	4603      	mov	r3, r0
 8002190:	b29b      	uxth	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	f44f 712d 	mov.w	r1, #692	@ 0x2b4
 8002198:	48c9      	ldr	r0, [pc, #804]	@ (80024c0 <rotate_motor+0x388>)
 800219a:	f000 fef9 	bl	8002f90 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(-45), SHORTEST_TIME_ROTATE(2, -45));
 800219e:	4bc8      	ldr	r3, [pc, #800]	@ (80024c0 <rotate_motor+0x388>)
 80021a0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80021a4:	332d      	adds	r3, #45	@ 0x2d
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	bfb8      	it	lt
 80021aa:	425b      	neglt	r3, r3
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9e1 	bl	8000574 <__aeabi_i2d>
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	4bc3      	ldr	r3, [pc, #780]	@ (80024c4 <rotate_motor+0x38c>)
 80021b8:	f7fe fa46 	bl	8000648 <__aeabi_dmul>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	f7fe fd18 	bl	8000bf8 <__aeabi_d2uiz>
 80021c8:	4603      	mov	r3, r0
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80021d2:	48bd      	ldr	r0, [pc, #756]	@ (80024c8 <rotate_motor+0x390>)
 80021d4:	f000 fedc 	bl	8002f90 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(45), SHORTEST_TIME_ROTATE(3, 45));
 80021d8:	4bb9      	ldr	r3, [pc, #740]	@ (80024c0 <rotate_motor+0x388>)
 80021da:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80021de:	3b2d      	subs	r3, #45	@ 0x2d
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bfb8      	it	lt
 80021e4:	425b      	neglt	r3, r3
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe f9c4 	bl	8000574 <__aeabi_i2d>
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	4bb4      	ldr	r3, [pc, #720]	@ (80024c4 <rotate_motor+0x38c>)
 80021f2:	f7fe fa29 	bl	8000648 <__aeabi_dmul>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4610      	mov	r0, r2
 80021fc:	4619      	mov	r1, r3
 80021fe:	f7fe fcfb 	bl	8000bf8 <__aeabi_d2uiz>
 8002202:	4603      	mov	r3, r0
 8002204:	b29b      	uxth	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 800220c:	48af      	ldr	r0, [pc, #700]	@ (80024cc <rotate_motor+0x394>)
 800220e:	f000 febf 	bl	8002f90 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(-45), SHORTEST_TIME_ROTATE(4, -45));
 8002212:	4bab      	ldr	r3, [pc, #684]	@ (80024c0 <rotate_motor+0x388>)
 8002214:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002218:	332d      	adds	r3, #45	@ 0x2d
 800221a:	2b00      	cmp	r3, #0
 800221c:	bfb8      	it	lt
 800221e:	425b      	neglt	r3, r3
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe f9a7 	bl	8000574 <__aeabi_i2d>
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	4ba6      	ldr	r3, [pc, #664]	@ (80024c4 <rotate_motor+0x38c>)
 800222c:	f7fe fa0c 	bl	8000648 <__aeabi_dmul>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	f7fe fcde 	bl	8000bf8 <__aeabi_d2uiz>
 800223c:	4603      	mov	r3, r0
 800223e:	b29b      	uxth	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	f240 113b 	movw	r1, #315	@ 0x13b
 8002246:	48a2      	ldr	r0, [pc, #648]	@ (80024d0 <rotate_motor+0x398>)
 8002248:	f000 fea2 	bl	8002f90 <servo_move>
    return;
 800224c:	f000 bdc6 	b.w	8002ddc <rotate_motor+0xca4>
  }

  float angle = atan2(base_vel.y_vel, base_vel.x_vel) * 180 / M_PI;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe f9a0 	bl	8000598 <__aeabi_f2d>
 8002258:	4604      	mov	r4, r0
 800225a:	460d      	mov	r5, r1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe f99a 	bl	8000598 <__aeabi_f2d>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	ec43 2b11 	vmov	d1, r2, r3
 800226c:	ec45 4b10 	vmov	d0, r4, r5
 8002270:	f006 fdda 	bl	8008e28 <atan2>
 8002274:	ec51 0b10 	vmov	r0, r1, d0
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	4b95      	ldr	r3, [pc, #596]	@ (80024d4 <rotate_motor+0x39c>)
 800227e:	f7fe f9e3 	bl	8000648 <__aeabi_dmul>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4610      	mov	r0, r2
 8002288:	4619      	mov	r1, r3
 800228a:	a38b      	add	r3, pc, #556	@ (adr r3, 80024b8 <rotate_motor+0x380>)
 800228c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002290:	f7fe fb04 	bl	800089c <__aeabi_ddiv>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4610      	mov	r0, r2
 800229a:	4619      	mov	r1, r3
 800229c:	f7fe fccc 	bl	8000c38 <__aeabi_d2f>
 80022a0:	4603      	mov	r3, r0
 80022a2:	617b      	str	r3, [r7, #20]

  if (base_vel.x_vel == 0 && base_vel.y_vel != 0) {  // angle = 90 or 270
 80022a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80022a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b0:	d17c      	bne.n	80023ac <rotate_motor+0x274>
 80022b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80022b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022be:	d075      	beq.n	80023ac <rotate_motor+0x274>
    servo_move(&(servos[0]), INITIAL_POS, SHORTEST_TIME_ROTATE(1, 90));
 80022c0:	4b7f      	ldr	r3, [pc, #508]	@ (80024c0 <rotate_motor+0x388>)
 80022c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022c6:	3b5a      	subs	r3, #90	@ 0x5a
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bfb8      	it	lt
 80022cc:	425b      	neglt	r3, r3
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe f950 	bl	8000574 <__aeabi_i2d>
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	4b7a      	ldr	r3, [pc, #488]	@ (80024c4 <rotate_motor+0x38c>)
 80022da:	f7fe f9b5 	bl	8000648 <__aeabi_dmul>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4610      	mov	r0, r2
 80022e4:	4619      	mov	r1, r3
 80022e6:	f7fe fc87 	bl	8000bf8 <__aeabi_d2uiz>
 80022ea:	4603      	mov	r3, r0
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	461a      	mov	r2, r3
 80022f0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80022f4:	4872      	ldr	r0, [pc, #456]	@ (80024c0 <rotate_motor+0x388>)
 80022f6:	f000 fe4b 	bl	8002f90 <servo_move>
    servo_move(&(servos[1]), INITIAL_POS, SHORTEST_TIME_ROTATE(2, 90));
 80022fa:	4b71      	ldr	r3, [pc, #452]	@ (80024c0 <rotate_motor+0x388>)
 80022fc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002300:	3b5a      	subs	r3, #90	@ 0x5a
 8002302:	2b00      	cmp	r3, #0
 8002304:	bfb8      	it	lt
 8002306:	425b      	neglt	r3, r3
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe f933 	bl	8000574 <__aeabi_i2d>
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	4b6c      	ldr	r3, [pc, #432]	@ (80024c4 <rotate_motor+0x38c>)
 8002314:	f7fe f998 	bl	8000648 <__aeabi_dmul>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	f7fe fc6a 	bl	8000bf8 <__aeabi_d2uiz>
 8002324:	4603      	mov	r3, r0
 8002326:	b29b      	uxth	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800232e:	4866      	ldr	r0, [pc, #408]	@ (80024c8 <rotate_motor+0x390>)
 8002330:	f000 fe2e 	bl	8002f90 <servo_move>
    servo_move(&(servos[2]), INITIAL_POS, SHORTEST_TIME_ROTATE(3, 90));
 8002334:	4b62      	ldr	r3, [pc, #392]	@ (80024c0 <rotate_motor+0x388>)
 8002336:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800233a:	3b5a      	subs	r3, #90	@ 0x5a
 800233c:	2b00      	cmp	r3, #0
 800233e:	bfb8      	it	lt
 8002340:	425b      	neglt	r3, r3
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe f916 	bl	8000574 <__aeabi_i2d>
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	4b5d      	ldr	r3, [pc, #372]	@ (80024c4 <rotate_motor+0x38c>)
 800234e:	f7fe f97b 	bl	8000648 <__aeabi_dmul>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	f7fe fc4d 	bl	8000bf8 <__aeabi_d2uiz>
 800235e:	4603      	mov	r3, r0
 8002360:	b29b      	uxth	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002368:	4859      	ldr	r0, [pc, #356]	@ (80024d0 <rotate_motor+0x398>)
 800236a:	f000 fe11 	bl	8002f90 <servo_move>
    servo_move(&(servos[3]), INITIAL_POS, SHORTEST_TIME_ROTATE(4, 90));
 800236e:	4b54      	ldr	r3, [pc, #336]	@ (80024c0 <rotate_motor+0x388>)
 8002370:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002374:	3b5a      	subs	r3, #90	@ 0x5a
 8002376:	2b00      	cmp	r3, #0
 8002378:	bfb8      	it	lt
 800237a:	425b      	neglt	r3, r3
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f8f9 	bl	8000574 <__aeabi_i2d>
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	4b4f      	ldr	r3, [pc, #316]	@ (80024c4 <rotate_motor+0x38c>)
 8002388:	f7fe f95e 	bl	8000648 <__aeabi_dmul>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4610      	mov	r0, r2
 8002392:	4619      	mov	r1, r3
 8002394:	f7fe fc30 	bl	8000bf8 <__aeabi_d2uiz>
 8002398:	4603      	mov	r3, r0
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80023a2:	484a      	ldr	r0, [pc, #296]	@ (80024cc <rotate_motor+0x394>)
 80023a4:	f000 fdf4 	bl	8002f90 <servo_move>
 80023a8:	f000 bd18 	b.w	8002ddc <rotate_motor+0xca4>
  } else if (base_vel.x_vel != 0 && base_vel.y_vel == 0) {  // angle = 0 or 180
 80023ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80023b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b8:	f000 8092 	beq.w	80024e0 <rotate_motor+0x3a8>
 80023bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80023c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c8:	f040 808a 	bne.w	80024e0 <rotate_motor+0x3a8>
    servo_move(&(servos[0]), SERVO_ID1_MIN_POS, SHORTEST_TIME_ROTATE(1, 90));
 80023cc:	4b3c      	ldr	r3, [pc, #240]	@ (80024c0 <rotate_motor+0x388>)
 80023ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80023d2:	3b5a      	subs	r3, #90	@ 0x5a
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bfb8      	it	lt
 80023d8:	425b      	neglt	r3, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe f8ca 	bl	8000574 <__aeabi_i2d>
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	4b37      	ldr	r3, [pc, #220]	@ (80024c4 <rotate_motor+0x38c>)
 80023e6:	f7fe f92f 	bl	8000648 <__aeabi_dmul>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	f7fe fc01 	bl	8000bf8 <__aeabi_d2uiz>
 80023f6:	4603      	mov	r3, r0
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	2186      	movs	r1, #134	@ 0x86
 80023fe:	4830      	ldr	r0, [pc, #192]	@ (80024c0 <rotate_motor+0x388>)
 8002400:	f000 fdc6 	bl	8002f90 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_MAX_POS, SHORTEST_TIME_ROTATE(2, 90));
 8002404:	4b2e      	ldr	r3, [pc, #184]	@ (80024c0 <rotate_motor+0x388>)
 8002406:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800240a:	3b5a      	subs	r3, #90	@ 0x5a
 800240c:	2b00      	cmp	r3, #0
 800240e:	bfb8      	it	lt
 8002410:	425b      	neglt	r3, r3
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f8ae 	bl	8000574 <__aeabi_i2d>
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	4b29      	ldr	r3, [pc, #164]	@ (80024c4 <rotate_motor+0x38c>)
 800241e:	f7fe f913 	bl	8000648 <__aeabi_dmul>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4610      	mov	r0, r2
 8002428:	4619      	mov	r1, r3
 800242a:	f7fe fbe5 	bl	8000bf8 <__aeabi_d2uiz>
 800242e:	4603      	mov	r3, r0
 8002430:	b29b      	uxth	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	f240 316e 	movw	r1, #878	@ 0x36e
 8002438:	4823      	ldr	r0, [pc, #140]	@ (80024c8 <rotate_motor+0x390>)
 800243a:	f000 fda9 	bl	8002f90 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_MIN_POS, SHORTEST_TIME_ROTATE(3, 90));
 800243e:	4b20      	ldr	r3, [pc, #128]	@ (80024c0 <rotate_motor+0x388>)
 8002440:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002444:	3b5a      	subs	r3, #90	@ 0x5a
 8002446:	2b00      	cmp	r3, #0
 8002448:	bfb8      	it	lt
 800244a:	425b      	neglt	r3, r3
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f891 	bl	8000574 <__aeabi_i2d>
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	4b1b      	ldr	r3, [pc, #108]	@ (80024c4 <rotate_motor+0x38c>)
 8002458:	f7fe f8f6 	bl	8000648 <__aeabi_dmul>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f7fe fbc8 	bl	8000bf8 <__aeabi_d2uiz>
 8002468:	4603      	mov	r3, r0
 800246a:	b29b      	uxth	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	2182      	movs	r1, #130	@ 0x82
 8002470:	4817      	ldr	r0, [pc, #92]	@ (80024d0 <rotate_motor+0x398>)
 8002472:	f000 fd8d 	bl	8002f90 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_MAX_POS, SHORTEST_TIME_ROTATE(4, 90));
 8002476:	4b12      	ldr	r3, [pc, #72]	@ (80024c0 <rotate_motor+0x388>)
 8002478:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800247c:	3b5a      	subs	r3, #90	@ 0x5a
 800247e:	2b00      	cmp	r3, #0
 8002480:	bfb8      	it	lt
 8002482:	425b      	neglt	r3, r3
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe f875 	bl	8000574 <__aeabi_i2d>
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	4b0d      	ldr	r3, [pc, #52]	@ (80024c4 <rotate_motor+0x38c>)
 8002490:	f7fe f8da 	bl	8000648 <__aeabi_dmul>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	f7fe fbac 	bl	8000bf8 <__aeabi_d2uiz>
 80024a0:	4603      	mov	r3, r0
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	f44f 715b 	mov.w	r1, #876	@ 0x36c
 80024aa:	4808      	ldr	r0, [pc, #32]	@ (80024cc <rotate_motor+0x394>)
 80024ac:	f000 fd70 	bl	8002f90 <servo_move>
 80024b0:	f000 bc94 	b.w	8002ddc <rotate_motor+0xca4>
 80024b4:	f3af 8000 	nop.w
 80024b8:	54442d18 	.word	0x54442d18
 80024bc:	400921fb 	.word	0x400921fb
 80024c0:	20000060 	.word	0x20000060
 80024c4:	40080000 	.word	0x40080000
 80024c8:	20000066 	.word	0x20000066
 80024cc:	20000072 	.word	0x20000072
 80024d0:	2000006c 	.word	0x2000006c
 80024d4:	40668000 	.word	0x40668000
 80024d8:	43340000 	.word	0x43340000
 80024dc:	42b40000 	.word	0x42b40000
  } else if (base_vel.x_vel < 0 && base_vel.y_vel > 0 || base_vel.x_vel > 0 && base_vel.y_vel < 0) {  // quadrant 2 or 4
 80024e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80024e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ec:	d506      	bpl.n	80024fc <rotate_motor+0x3c4>
 80024ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80024f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fa:	dc0f      	bgt.n	800251c <rotate_motor+0x3e4>
 80024fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002500:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002508:	f340 822d 	ble.w	8002966 <rotate_motor+0x82e>
 800250c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002510:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002518:	f140 8225 	bpl.w	8002966 <rotate_motor+0x82e>
    if (angle < 0)
 800251c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002520:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002528:	d507      	bpl.n	800253a <rotate_motor+0x402>
      angle += 180;
 800252a:	edd7 7a05 	vldr	s15, [r7, #20]
 800252e:	ed1f 7a16 	vldr	s14, [pc, #-88]	@ 80024d8 <rotate_motor+0x3a0>
 8002532:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002536:	edc7 7a05 	vstr	s15, [r7, #20]
    angle -= 90;
 800253a:	edd7 7a05 	vldr	s15, [r7, #20]
 800253e:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 80024dc <rotate_motor+0x3a4>
 8002542:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002546:	edc7 7a05 	vstr	s15, [r7, #20]
    angle *= -1;
 800254a:	edd7 7a05 	vldr	s15, [r7, #20]
 800254e:	eef1 7a67 	vneg.f32	s15, s15
 8002552:	edc7 7a05 	vstr	s15, [r7, #20]

    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(1, angle));
 8002556:	edd7 7a05 	vldr	s15, [r7, #20]
 800255a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002562:	dd22      	ble.n	80025aa <rotate_motor+0x472>
 8002564:	6978      	ldr	r0, [r7, #20]
 8002566:	f7fe f817 	bl	8000598 <__aeabi_f2d>
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	4bce      	ldr	r3, [pc, #824]	@ (80028a8 <rotate_motor+0x770>)
 8002570:	f7fe f994 	bl	800089c <__aeabi_ddiv>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4610      	mov	r0, r2
 800257a:	4619      	mov	r1, r3
 800257c:	a3c0      	add	r3, pc, #768	@ (adr r3, 8002880 <rotate_motor+0x748>)
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	f7fe f861 	bl	8000648 <__aeabi_dmul>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4610      	mov	r0, r2
 800258c:	4619      	mov	r1, r3
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	4bc6      	ldr	r3, [pc, #792]	@ (80028ac <rotate_motor+0x774>)
 8002594:	f7fd fea2 	bl	80002dc <__adddf3>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4610      	mov	r0, r2
 800259e:	4619      	mov	r1, r3
 80025a0:	f7fe fb2a 	bl	8000bf8 <__aeabi_d2uiz>
 80025a4:	4603      	mov	r3, r0
 80025a6:	b29c      	uxth	r4, r3
 80025a8:	e021      	b.n	80025ee <rotate_motor+0x4b6>
 80025aa:	6978      	ldr	r0, [r7, #20]
 80025ac:	f7fd fff4 	bl	8000598 <__aeabi_f2d>
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	4bbc      	ldr	r3, [pc, #752]	@ (80028a8 <rotate_motor+0x770>)
 80025b6:	f7fe f971 	bl	800089c <__aeabi_ddiv>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	a3b1      	add	r3, pc, #708	@ (adr r3, 8002888 <rotate_motor+0x750>)
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	f7fe f83e 	bl	8000648 <__aeabi_dmul>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	4bb4      	ldr	r3, [pc, #720]	@ (80028ac <rotate_motor+0x774>)
 80025da:	f7fd fe7f 	bl	80002dc <__adddf3>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	f7fe fb07 	bl	8000bf8 <__aeabi_d2uiz>
 80025ea:	4603      	mov	r3, r0
 80025ec:	b29c      	uxth	r4, r3
 80025ee:	4bb0      	ldr	r3, [pc, #704]	@ (80028b0 <rotate_motor+0x778>)
 80025f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025f4:	335a      	adds	r3, #90	@ 0x5a
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002602:	eddf 6aac 	vldr	s13, [pc, #688]	@ 80028b4 <rotate_motor+0x77c>
 8002606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800260a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800260e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002612:	ee17 3a90 	vmov	r3, s15
 8002616:	2b00      	cmp	r3, #0
 8002618:	bfb8      	it	lt
 800261a:	425b      	neglt	r3, r3
 800261c:	4618      	mov	r0, r3
 800261e:	f7fd ffa9 	bl	8000574 <__aeabi_i2d>
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	4ba4      	ldr	r3, [pc, #656]	@ (80028b8 <rotate_motor+0x780>)
 8002628:	f7fe f80e 	bl	8000648 <__aeabi_dmul>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4610      	mov	r0, r2
 8002632:	4619      	mov	r1, r3
 8002634:	f7fe fae0 	bl	8000bf8 <__aeabi_d2uiz>
 8002638:	4603      	mov	r3, r0
 800263a:	b29b      	uxth	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	4621      	mov	r1, r4
 8002640:	489b      	ldr	r0, [pc, #620]	@ (80028b0 <rotate_motor+0x778>)
 8002642:	f000 fca5 	bl	8002f90 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(2, angle));
 8002646:	edd7 7a05 	vldr	s15, [r7, #20]
 800264a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800264e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002652:	dd22      	ble.n	800269a <rotate_motor+0x562>
 8002654:	6978      	ldr	r0, [r7, #20]
 8002656:	f7fd ff9f 	bl	8000598 <__aeabi_f2d>
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	4b92      	ldr	r3, [pc, #584]	@ (80028a8 <rotate_motor+0x770>)
 8002660:	f7fe f91c 	bl	800089c <__aeabi_ddiv>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4610      	mov	r0, r2
 800266a:	4619      	mov	r1, r3
 800266c:	a388      	add	r3, pc, #544	@ (adr r3, 8002890 <rotate_motor+0x758>)
 800266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002672:	f7fd ffe9 	bl	8000648 <__aeabi_dmul>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	4b8a      	ldr	r3, [pc, #552]	@ (80028ac <rotate_motor+0x774>)
 8002684:	f7fd fe2a 	bl	80002dc <__adddf3>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	f7fe fab2 	bl	8000bf8 <__aeabi_d2uiz>
 8002694:	4603      	mov	r3, r0
 8002696:	b29c      	uxth	r4, r3
 8002698:	e021      	b.n	80026de <rotate_motor+0x5a6>
 800269a:	6978      	ldr	r0, [r7, #20]
 800269c:	f7fd ff7c 	bl	8000598 <__aeabi_f2d>
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	4b80      	ldr	r3, [pc, #512]	@ (80028a8 <rotate_motor+0x770>)
 80026a6:	f7fe f8f9 	bl	800089c <__aeabi_ddiv>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4610      	mov	r0, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	a379      	add	r3, pc, #484	@ (adr r3, 8002898 <rotate_motor+0x760>)
 80026b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b8:	f7fd ffc6 	bl	8000648 <__aeabi_dmul>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	4b78      	ldr	r3, [pc, #480]	@ (80028ac <rotate_motor+0x774>)
 80026ca:	f7fd fe07 	bl	80002dc <__adddf3>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f7fe fa8f 	bl	8000bf8 <__aeabi_d2uiz>
 80026da:	4603      	mov	r3, r0
 80026dc:	b29c      	uxth	r4, r3
 80026de:	4b74      	ldr	r3, [pc, #464]	@ (80028b0 <rotate_motor+0x778>)
 80026e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80026e4:	335a      	adds	r3, #90	@ 0x5a
 80026e6:	ee07 3a90 	vmov	s15, r3
 80026ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80026f2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80028b4 <rotate_motor+0x77c>
 80026f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002702:	ee17 3a90 	vmov	r3, s15
 8002706:	2b00      	cmp	r3, #0
 8002708:	bfb8      	it	lt
 800270a:	425b      	neglt	r3, r3
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd ff31 	bl	8000574 <__aeabi_i2d>
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	4b68      	ldr	r3, [pc, #416]	@ (80028b8 <rotate_motor+0x780>)
 8002718:	f7fd ff96 	bl	8000648 <__aeabi_dmul>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	f7fe fa68 	bl	8000bf8 <__aeabi_d2uiz>
 8002728:	4603      	mov	r3, r0
 800272a:	b29b      	uxth	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	4621      	mov	r1, r4
 8002730:	4862      	ldr	r0, [pc, #392]	@ (80028bc <rotate_motor+0x784>)
 8002732:	f000 fc2d 	bl	8002f90 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(3, angle));
 8002736:	edd7 7a05 	vldr	s15, [r7, #20]
 800273a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800273e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002742:	dd22      	ble.n	800278a <rotate_motor+0x652>
 8002744:	6978      	ldr	r0, [r7, #20]
 8002746:	f7fd ff27 	bl	8000598 <__aeabi_f2d>
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	4b56      	ldr	r3, [pc, #344]	@ (80028a8 <rotate_motor+0x770>)
 8002750:	f7fe f8a4 	bl	800089c <__aeabi_ddiv>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	a34e      	add	r3, pc, #312	@ (adr r3, 8002898 <rotate_motor+0x760>)
 800275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002762:	f7fd ff71 	bl	8000648 <__aeabi_dmul>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4610      	mov	r0, r2
 800276c:	4619      	mov	r1, r3
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	4b4e      	ldr	r3, [pc, #312]	@ (80028ac <rotate_motor+0x774>)
 8002774:	f7fd fdb2 	bl	80002dc <__adddf3>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4610      	mov	r0, r2
 800277e:	4619      	mov	r1, r3
 8002780:	f7fe fa3a 	bl	8000bf8 <__aeabi_d2uiz>
 8002784:	4603      	mov	r3, r0
 8002786:	b29c      	uxth	r4, r3
 8002788:	e021      	b.n	80027ce <rotate_motor+0x696>
 800278a:	6978      	ldr	r0, [r7, #20]
 800278c:	f7fd ff04 	bl	8000598 <__aeabi_f2d>
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	4b44      	ldr	r3, [pc, #272]	@ (80028a8 <rotate_motor+0x770>)
 8002796:	f7fe f881 	bl	800089c <__aeabi_ddiv>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4610      	mov	r0, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	a33f      	add	r3, pc, #252	@ (adr r3, 80028a0 <rotate_motor+0x768>)
 80027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a8:	f7fd ff4e 	bl	8000648 <__aeabi_dmul>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4610      	mov	r0, r2
 80027b2:	4619      	mov	r1, r3
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	4b3c      	ldr	r3, [pc, #240]	@ (80028ac <rotate_motor+0x774>)
 80027ba:	f7fd fd8f 	bl	80002dc <__adddf3>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	f7fe fa17 	bl	8000bf8 <__aeabi_d2uiz>
 80027ca:	4603      	mov	r3, r0
 80027cc:	b29c      	uxth	r4, r3
 80027ce:	4b38      	ldr	r3, [pc, #224]	@ (80028b0 <rotate_motor+0x778>)
 80027d0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80027d4:	335a      	adds	r3, #90	@ 0x5a
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027de:	edd7 7a05 	vldr	s15, [r7, #20]
 80027e2:	eddf 6a34 	vldr	s13, [pc, #208]	@ 80028b4 <rotate_motor+0x77c>
 80027e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027f2:	ee17 3a90 	vmov	r3, s15
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	bfb8      	it	lt
 80027fa:	425b      	neglt	r3, r3
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fd feb9 	bl	8000574 <__aeabi_i2d>
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	4b2c      	ldr	r3, [pc, #176]	@ (80028b8 <rotate_motor+0x780>)
 8002808:	f7fd ff1e 	bl	8000648 <__aeabi_dmul>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	f7fe f9f0 	bl	8000bf8 <__aeabi_d2uiz>
 8002818:	4603      	mov	r3, r0
 800281a:	b29b      	uxth	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	4621      	mov	r1, r4
 8002820:	4827      	ldr	r0, [pc, #156]	@ (80028c0 <rotate_motor+0x788>)
 8002822:	f000 fbb5 	bl	8002f90 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(4, angle));
 8002826:	edd7 7a05 	vldr	s15, [r7, #20]
 800282a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800282e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002832:	dd49      	ble.n	80028c8 <rotate_motor+0x790>
 8002834:	6978      	ldr	r0, [r7, #20]
 8002836:	f7fd feaf 	bl	8000598 <__aeabi_f2d>
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	4b1a      	ldr	r3, [pc, #104]	@ (80028a8 <rotate_motor+0x770>)
 8002840:	f7fe f82c 	bl	800089c <__aeabi_ddiv>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	4b1c      	ldr	r3, [pc, #112]	@ (80028c4 <rotate_motor+0x78c>)
 8002852:	f7fd fef9 	bl	8000648 <__aeabi_dmul>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	4b12      	ldr	r3, [pc, #72]	@ (80028ac <rotate_motor+0x774>)
 8002864:	f7fd fd3a 	bl	80002dc <__adddf3>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	f7fe f9c2 	bl	8000bf8 <__aeabi_d2uiz>
 8002874:	4603      	mov	r3, r0
 8002876:	b29c      	uxth	r4, r3
 8002878:	e048      	b.n	800290c <rotate_motor+0x7d4>
 800287a:	bf00      	nop
 800287c:	f3af 8000 	nop.w
 8002880:	00000000 	.word	0x00000000
 8002884:	40781000 	.word	0x40781000
 8002888:	00000000 	.word	0x00000000
 800288c:	4076e000 	.word	0x4076e000
 8002890:	00000000 	.word	0x00000000
 8002894:	4077a000 	.word	0x4077a000
 8002898:	00000000 	.word	0x00000000
 800289c:	40777000 	.word	0x40777000
 80028a0:	00000000 	.word	0x00000000
 80028a4:	40772000 	.word	0x40772000
 80028a8:	40568000 	.word	0x40568000
 80028ac:	407f4000 	.word	0x407f4000
 80028b0:	20000060 	.word	0x20000060
 80028b4:	42b40000 	.word	0x42b40000
 80028b8:	40080000 	.word	0x40080000
 80028bc:	20000066 	.word	0x20000066
 80028c0:	2000006c 	.word	0x2000006c
 80028c4:	40778000 	.word	0x40778000
 80028c8:	6978      	ldr	r0, [r7, #20]
 80028ca:	f7fd fe65 	bl	8000598 <__aeabi_f2d>
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	4bd7      	ldr	r3, [pc, #860]	@ (8002c30 <rotate_motor+0xaf8>)
 80028d4:	f7fd ffe2 	bl	800089c <__aeabi_ddiv>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4610      	mov	r0, r2
 80028de:	4619      	mov	r1, r3
 80028e0:	a3c9      	add	r3, pc, #804	@ (adr r3, 8002c08 <rotate_motor+0xad0>)
 80028e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e6:	f7fd feaf 	bl	8000648 <__aeabi_dmul>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4610      	mov	r0, r2
 80028f0:	4619      	mov	r1, r3
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	4bcf      	ldr	r3, [pc, #828]	@ (8002c34 <rotate_motor+0xafc>)
 80028f8:	f7fd fcf0 	bl	80002dc <__adddf3>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4610      	mov	r0, r2
 8002902:	4619      	mov	r1, r3
 8002904:	f7fe f978 	bl	8000bf8 <__aeabi_d2uiz>
 8002908:	4603      	mov	r3, r0
 800290a:	b29c      	uxth	r4, r3
 800290c:	4bca      	ldr	r3, [pc, #808]	@ (8002c38 <rotate_motor+0xb00>)
 800290e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002912:	335a      	adds	r3, #90	@ 0x5a
 8002914:	ee07 3a90 	vmov	s15, r3
 8002918:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800291c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002920:	eddf 6ac6 	vldr	s13, [pc, #792]	@ 8002c3c <rotate_motor+0xb04>
 8002924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002928:	ee77 7a67 	vsub.f32	s15, s14, s15
 800292c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002930:	ee17 3a90 	vmov	r3, s15
 8002934:	2b00      	cmp	r3, #0
 8002936:	bfb8      	it	lt
 8002938:	425b      	neglt	r3, r3
 800293a:	4618      	mov	r0, r3
 800293c:	f7fd fe1a 	bl	8000574 <__aeabi_i2d>
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	4bbe      	ldr	r3, [pc, #760]	@ (8002c40 <rotate_motor+0xb08>)
 8002946:	f7fd fe7f 	bl	8000648 <__aeabi_dmul>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4610      	mov	r0, r2
 8002950:	4619      	mov	r1, r3
 8002952:	f7fe f951 	bl	8000bf8 <__aeabi_d2uiz>
 8002956:	4603      	mov	r3, r0
 8002958:	b29b      	uxth	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	4621      	mov	r1, r4
 800295e:	48b9      	ldr	r0, [pc, #740]	@ (8002c44 <rotate_motor+0xb0c>)
 8002960:	f000 fb16 	bl	8002f90 <servo_move>
 8002964:	e23a      	b.n	8002ddc <rotate_motor+0xca4>
  } else if (base_vel.x_vel < 0 && base_vel.y_vel < 0 || base_vel.x_vel > 0 && base_vel.y_vel > 0) {  // quadrant 1 or 3
 8002966:	edd7 7a01 	vldr	s15, [r7, #4]
 800296a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800296e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002972:	d506      	bpl.n	8002982 <rotate_motor+0x84a>
 8002974:	edd7 7a02 	vldr	s15, [r7, #8]
 8002978:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800297c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002980:	d40f      	bmi.n	80029a2 <rotate_motor+0x86a>
 8002982:	edd7 7a01 	vldr	s15, [r7, #4]
 8002986:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800298a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298e:	f340 8225 	ble.w	8002ddc <rotate_motor+0xca4>
 8002992:	edd7 7a02 	vldr	s15, [r7, #8]
 8002996:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800299a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800299e:	f340 821d 	ble.w	8002ddc <rotate_motor+0xca4>
    if (angle < 0)
 80029a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80029a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ae:	d507      	bpl.n	80029c0 <rotate_motor+0x888>
      angle += 180;
 80029b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80029b4:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8002c48 <rotate_motor+0xb10>
 80029b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029bc:	edc7 7a05 	vstr	s15, [r7, #20]
    angle = 90 - angle;
 80029c0:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8002c3c <rotate_motor+0xb04>
 80029c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80029c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029cc:	edc7 7a05 	vstr	s15, [r7, #20]

    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(1, angle));
 80029d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80029d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029dc:	dd22      	ble.n	8002a24 <rotate_motor+0x8ec>
 80029de:	6978      	ldr	r0, [r7, #20]
 80029e0:	f7fd fdda 	bl	8000598 <__aeabi_f2d>
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	4b91      	ldr	r3, [pc, #580]	@ (8002c30 <rotate_motor+0xaf8>)
 80029ea:	f7fd ff57 	bl	800089c <__aeabi_ddiv>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	4610      	mov	r0, r2
 80029f4:	4619      	mov	r1, r3
 80029f6:	a386      	add	r3, pc, #536	@ (adr r3, 8002c10 <rotate_motor+0xad8>)
 80029f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fc:	f7fd fe24 	bl	8000648 <__aeabi_dmul>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	4b89      	ldr	r3, [pc, #548]	@ (8002c34 <rotate_motor+0xafc>)
 8002a0e:	f7fd fc65 	bl	80002dc <__adddf3>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f7fe f8ed 	bl	8000bf8 <__aeabi_d2uiz>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	b29c      	uxth	r4, r3
 8002a22:	e021      	b.n	8002a68 <rotate_motor+0x930>
 8002a24:	6978      	ldr	r0, [r7, #20]
 8002a26:	f7fd fdb7 	bl	8000598 <__aeabi_f2d>
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	4b80      	ldr	r3, [pc, #512]	@ (8002c30 <rotate_motor+0xaf8>)
 8002a30:	f7fd ff34 	bl	800089c <__aeabi_ddiv>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4610      	mov	r0, r2
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	a376      	add	r3, pc, #472	@ (adr r3, 8002c18 <rotate_motor+0xae0>)
 8002a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a42:	f7fd fe01 	bl	8000648 <__aeabi_dmul>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	4b78      	ldr	r3, [pc, #480]	@ (8002c34 <rotate_motor+0xafc>)
 8002a54:	f7fd fc42 	bl	80002dc <__adddf3>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f7fe f8ca 	bl	8000bf8 <__aeabi_d2uiz>
 8002a64:	4603      	mov	r3, r0
 8002a66:	b29c      	uxth	r4, r3
 8002a68:	4b73      	ldr	r3, [pc, #460]	@ (8002c38 <rotate_motor+0xb00>)
 8002a6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a6e:	335a      	adds	r3, #90	@ 0x5a
 8002a70:	ee07 3a90 	vmov	s15, r3
 8002a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a78:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a7c:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002c3c <rotate_motor+0xb04>
 8002a80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a8c:	ee17 3a90 	vmov	r3, s15
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bfb8      	it	lt
 8002a94:	425b      	neglt	r3, r3
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fd fd6c 	bl	8000574 <__aeabi_i2d>
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	4b67      	ldr	r3, [pc, #412]	@ (8002c40 <rotate_motor+0xb08>)
 8002aa2:	f7fd fdd1 	bl	8000648 <__aeabi_dmul>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	f7fe f8a3 	bl	8000bf8 <__aeabi_d2uiz>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4621      	mov	r1, r4
 8002aba:	485f      	ldr	r0, [pc, #380]	@ (8002c38 <rotate_motor+0xb00>)
 8002abc:	f000 fa68 	bl	8002f90 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(2, angle));
 8002ac0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ac4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002acc:	dd22      	ble.n	8002b14 <rotate_motor+0x9dc>
 8002ace:	6978      	ldr	r0, [r7, #20]
 8002ad0:	f7fd fd62 	bl	8000598 <__aeabi_f2d>
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	4b55      	ldr	r3, [pc, #340]	@ (8002c30 <rotate_motor+0xaf8>)
 8002ada:	f7fd fedf 	bl	800089c <__aeabi_ddiv>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	a34e      	add	r3, pc, #312	@ (adr r3, 8002c20 <rotate_motor+0xae8>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f7fd fdac 	bl	8000648 <__aeabi_dmul>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	4b4d      	ldr	r3, [pc, #308]	@ (8002c34 <rotate_motor+0xafc>)
 8002afe:	f7fd fbed 	bl	80002dc <__adddf3>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4610      	mov	r0, r2
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f7fe f875 	bl	8000bf8 <__aeabi_d2uiz>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	b29c      	uxth	r4, r3
 8002b12:	e021      	b.n	8002b58 <rotate_motor+0xa20>
 8002b14:	6978      	ldr	r0, [r7, #20]
 8002b16:	f7fd fd3f 	bl	8000598 <__aeabi_f2d>
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	4b44      	ldr	r3, [pc, #272]	@ (8002c30 <rotate_motor+0xaf8>)
 8002b20:	f7fd febc 	bl	800089c <__aeabi_ddiv>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	a33e      	add	r3, pc, #248	@ (adr r3, 8002c28 <rotate_motor+0xaf0>)
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	f7fd fd89 	bl	8000648 <__aeabi_dmul>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	4b3c      	ldr	r3, [pc, #240]	@ (8002c34 <rotate_motor+0xafc>)
 8002b44:	f7fd fbca 	bl	80002dc <__adddf3>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f7fe f852 	bl	8000bf8 <__aeabi_d2uiz>
 8002b54:	4603      	mov	r3, r0
 8002b56:	b29c      	uxth	r4, r3
 8002b58:	4b37      	ldr	r3, [pc, #220]	@ (8002c38 <rotate_motor+0xb00>)
 8002b5a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002b5e:	335a      	adds	r3, #90	@ 0x5a
 8002b60:	ee07 3a90 	vmov	s15, r3
 8002b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b68:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b6c:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002c3c <rotate_motor+0xb04>
 8002b70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b7c:	ee17 3a90 	vmov	r3, s15
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bfb8      	it	lt
 8002b84:	425b      	neglt	r3, r3
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fd fcf4 	bl	8000574 <__aeabi_i2d>
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	4b2b      	ldr	r3, [pc, #172]	@ (8002c40 <rotate_motor+0xb08>)
 8002b92:	f7fd fd59 	bl	8000648 <__aeabi_dmul>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f7fe f82b 	bl	8000bf8 <__aeabi_d2uiz>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4621      	mov	r1, r4
 8002baa:	4828      	ldr	r0, [pc, #160]	@ (8002c4c <rotate_motor+0xb14>)
 8002bac:	f000 f9f0 	bl	8002f90 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(3, angle));
 8002bb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbc:	dd48      	ble.n	8002c50 <rotate_motor+0xb18>
 8002bbe:	6978      	ldr	r0, [r7, #20]
 8002bc0:	f7fd fcea 	bl	8000598 <__aeabi_f2d>
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	4b19      	ldr	r3, [pc, #100]	@ (8002c30 <rotate_motor+0xaf8>)
 8002bca:	f7fd fe67 	bl	800089c <__aeabi_ddiv>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	a314      	add	r3, pc, #80	@ (adr r3, 8002c28 <rotate_motor+0xaf0>)
 8002bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bdc:	f7fd fd34 	bl	8000648 <__aeabi_dmul>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	4b11      	ldr	r3, [pc, #68]	@ (8002c34 <rotate_motor+0xafc>)
 8002bee:	f7fd fb75 	bl	80002dc <__adddf3>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f7fd fffd 	bl	8000bf8 <__aeabi_d2uiz>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	b29c      	uxth	r4, r3
 8002c02:	e047      	b.n	8002c94 <rotate_motor+0xb5c>
 8002c04:	f3af 8000 	nop.w
 8002c08:	00000000 	.word	0x00000000
 8002c0c:	40775000 	.word	0x40775000
 8002c10:	00000000 	.word	0x00000000
 8002c14:	40781000 	.word	0x40781000
 8002c18:	00000000 	.word	0x00000000
 8002c1c:	4076e000 	.word	0x4076e000
 8002c20:	00000000 	.word	0x00000000
 8002c24:	4077a000 	.word	0x4077a000
 8002c28:	00000000 	.word	0x00000000
 8002c2c:	40777000 	.word	0x40777000
 8002c30:	40568000 	.word	0x40568000
 8002c34:	407f4000 	.word	0x407f4000
 8002c38:	20000060 	.word	0x20000060
 8002c3c:	42b40000 	.word	0x42b40000
 8002c40:	40080000 	.word	0x40080000
 8002c44:	20000072 	.word	0x20000072
 8002c48:	43340000 	.word	0x43340000
 8002c4c:	20000066 	.word	0x20000066
 8002c50:	6978      	ldr	r0, [r7, #20]
 8002c52:	f7fd fca1 	bl	8000598 <__aeabi_f2d>
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	4b67      	ldr	r3, [pc, #412]	@ (8002df8 <rotate_motor+0xcc0>)
 8002c5c:	f7fd fe1e 	bl	800089c <__aeabi_ddiv>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4610      	mov	r0, r2
 8002c66:	4619      	mov	r1, r3
 8002c68:	a35f      	add	r3, pc, #380	@ (adr r3, 8002de8 <rotate_motor+0xcb0>)
 8002c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6e:	f7fd fceb 	bl	8000648 <__aeabi_dmul>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4610      	mov	r0, r2
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	4b5f      	ldr	r3, [pc, #380]	@ (8002dfc <rotate_motor+0xcc4>)
 8002c80:	f7fd fb2c 	bl	80002dc <__adddf3>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4610      	mov	r0, r2
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	f7fd ffb4 	bl	8000bf8 <__aeabi_d2uiz>
 8002c90:	4603      	mov	r3, r0
 8002c92:	b29c      	uxth	r4, r3
 8002c94:	4b5a      	ldr	r3, [pc, #360]	@ (8002e00 <rotate_motor+0xcc8>)
 8002c96:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002c9a:	335a      	adds	r3, #90	@ 0x5a
 8002c9c:	ee07 3a90 	vmov	s15, r3
 8002ca0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ca4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ca8:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8002e04 <rotate_motor+0xccc>
 8002cac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cb8:	ee17 3a90 	vmov	r3, s15
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bfb8      	it	lt
 8002cc0:	425b      	neglt	r3, r3
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fc56 	bl	8000574 <__aeabi_i2d>
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	4b4e      	ldr	r3, [pc, #312]	@ (8002e08 <rotate_motor+0xcd0>)
 8002cce:	f7fd fcbb 	bl	8000648 <__aeabi_dmul>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f7fd ff8d 	bl	8000bf8 <__aeabi_d2uiz>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4621      	mov	r1, r4
 8002ce6:	4849      	ldr	r0, [pc, #292]	@ (8002e0c <rotate_motor+0xcd4>)
 8002ce8:	f000 f952 	bl	8002f90 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(4, angle));
 8002cec:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf8:	dd22      	ble.n	8002d40 <rotate_motor+0xc08>
 8002cfa:	6978      	ldr	r0, [r7, #20]
 8002cfc:	f7fd fc4c 	bl	8000598 <__aeabi_f2d>
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	4b3c      	ldr	r3, [pc, #240]	@ (8002df8 <rotate_motor+0xcc0>)
 8002d06:	f7fd fdc9 	bl	800089c <__aeabi_ddiv>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	4b3e      	ldr	r3, [pc, #248]	@ (8002e10 <rotate_motor+0xcd8>)
 8002d18:	f7fd fc96 	bl	8000648 <__aeabi_dmul>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4610      	mov	r0, r2
 8002d22:	4619      	mov	r1, r3
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	4b34      	ldr	r3, [pc, #208]	@ (8002dfc <rotate_motor+0xcc4>)
 8002d2a:	f7fd fad7 	bl	80002dc <__adddf3>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	f7fd ff5f 	bl	8000bf8 <__aeabi_d2uiz>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	b29c      	uxth	r4, r3
 8002d3e:	e021      	b.n	8002d84 <rotate_motor+0xc4c>
 8002d40:	6978      	ldr	r0, [r7, #20]
 8002d42:	f7fd fc29 	bl	8000598 <__aeabi_f2d>
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002df8 <rotate_motor+0xcc0>)
 8002d4c:	f7fd fda6 	bl	800089c <__aeabi_ddiv>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4610      	mov	r0, r2
 8002d56:	4619      	mov	r1, r3
 8002d58:	a325      	add	r3, pc, #148	@ (adr r3, 8002df0 <rotate_motor+0xcb8>)
 8002d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5e:	f7fd fc73 	bl	8000648 <__aeabi_dmul>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4610      	mov	r0, r2
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	4b23      	ldr	r3, [pc, #140]	@ (8002dfc <rotate_motor+0xcc4>)
 8002d70:	f7fd fab4 	bl	80002dc <__adddf3>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f7fd ff3c 	bl	8000bf8 <__aeabi_d2uiz>
 8002d80:	4603      	mov	r3, r0
 8002d82:	b29c      	uxth	r4, r3
 8002d84:	4b1e      	ldr	r3, [pc, #120]	@ (8002e00 <rotate_motor+0xcc8>)
 8002d86:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002d8a:	335a      	adds	r3, #90	@ 0x5a
 8002d8c:	ee07 3a90 	vmov	s15, r3
 8002d90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d94:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d98:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002e04 <rotate_motor+0xccc>
 8002d9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002da8:	ee17 3a90 	vmov	r3, s15
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bfb8      	it	lt
 8002db0:	425b      	neglt	r3, r3
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd fbde 	bl	8000574 <__aeabi_i2d>
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	4b12      	ldr	r3, [pc, #72]	@ (8002e08 <rotate_motor+0xcd0>)
 8002dbe:	f7fd fc43 	bl	8000648 <__aeabi_dmul>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f7fd ff15 	bl	8000bf8 <__aeabi_d2uiz>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	480f      	ldr	r0, [pc, #60]	@ (8002e14 <rotate_motor+0xcdc>)
 8002dd8:	f000 f8da 	bl	8002f90 <servo_move>
  }
}
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bdb0      	pop	{r4, r5, r7, pc}
 8002de2:	bf00      	nop
 8002de4:	f3af 8000 	nop.w
 8002de8:	00000000 	.word	0x00000000
 8002dec:	40772000 	.word	0x40772000
 8002df0:	00000000 	.word	0x00000000
 8002df4:	40775000 	.word	0x40775000
 8002df8:	40568000 	.word	0x40568000
 8002dfc:	407f4000 	.word	0x407f4000
 8002e00:	20000060 	.word	0x20000060
 8002e04:	42b40000 	.word	0x42b40000
 8002e08:	40080000 	.word	0x40080000
 8002e0c:	2000006c 	.word	0x2000006c
 8002e10:	40778000 	.word	0x40778000
 8002e14:	20000072 	.word	0x20000072

08002e18 <movement_control>:

void movement_control(BaseVelocity base_vel) {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08c      	sub	sp, #48	@ 0x30
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	eef0 6a40 	vmov.f32	s13, s0
 8002e22:	eeb0 7a60 	vmov.f32	s14, s1
 8002e26:	eef0 7a41 	vmov.f32	s15, s2
 8002e2a:	edc7 6a01 	vstr	s13, [r7, #4]
 8002e2e:	ed87 7a02 	vstr	s14, [r7, #8]
 8002e32:	edc7 7a03 	vstr	s15, [r7, #12]
  if (base_vel.x_vel != 0 && direction_encoder != LEFT_RIGHT || base_vel.y_vel != 0 && direction_encoder != FRONT_BACK) {
 8002e36:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e42:	d003      	beq.n	8002e4c <movement_control+0x34>
 8002e44:	4b4f      	ldr	r3, [pc, #316]	@ (8002f84 <movement_control+0x16c>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d10a      	bne.n	8002e62 <movement_control+0x4a>
 8002e4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e50:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e58:	d01f      	beq.n	8002e9a <movement_control+0x82>
 8002e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f84 <movement_control+0x16c>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d01b      	beq.n	8002e9a <movement_control+0x82>
    rotate_motor(base_vel);
 8002e62:	edd7 6a01 	vldr	s13, [r7, #4]
 8002e66:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e6e:	eeb0 0a66 	vmov.f32	s0, s13
 8002e72:	eef0 0a47 	vmov.f32	s1, s14
 8002e76:	eeb0 1a67 	vmov.f32	s2, s15
 8002e7a:	f7ff f95d 	bl	8002138 <rotate_motor>
    direction_encoder = base_vel.x_vel != 0 ? LEFT_RIGHT : FRONT_BACK;
 8002e7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8a:	bf14      	ite	ne
 8002e8c:	2301      	movne	r3, #1
 8002e8e:	2300      	moveq	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	461a      	mov	r2, r3
 8002e94:	4b3b      	ldr	r3, [pc, #236]	@ (8002f84 <movement_control+0x16c>)
 8002e96:	701a      	strb	r2, [r3, #0]
 8002e98:	e01b      	b.n	8002ed2 <movement_control+0xba>
  } else if (base_vel.z_vel != 0 && direction_encoder != ROTATE) {
 8002e9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea6:	d014      	beq.n	8002ed2 <movement_control+0xba>
 8002ea8:	4b36      	ldr	r3, [pc, #216]	@ (8002f84 <movement_control+0x16c>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d010      	beq.n	8002ed2 <movement_control+0xba>
    rotate_motor(base_vel);
 8002eb0:	edd7 6a01 	vldr	s13, [r7, #4]
 8002eb4:	ed97 7a02 	vldr	s14, [r7, #8]
 8002eb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ebc:	eeb0 0a66 	vmov.f32	s0, s13
 8002ec0:	eef0 0a47 	vmov.f32	s1, s14
 8002ec4:	eeb0 1a67 	vmov.f32	s2, s15
 8002ec8:	f7ff f936 	bl	8002138 <rotate_motor>
    direction_encoder = ROTATE;
 8002ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8002f84 <movement_control+0x16c>)
 8002ece:	2202      	movs	r2, #2
 8002ed0:	701a      	strb	r2, [r3, #0]
  }

  WheelVelocity target_vel = base2wheel(base_vel);
 8002ed2:	edd7 6a01 	vldr	s13, [r7, #4]
 8002ed6:	ed97 7a02 	vldr	s14, [r7, #8]
 8002eda:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ede:	eeb0 0a66 	vmov.f32	s0, s13
 8002ee2:	eef0 0a47 	vmov.f32	s1, s14
 8002ee6:	eeb0 1a67 	vmov.f32	s2, s15
 8002eea:	f7fe fd1d 	bl	8001928 <base2wheel>
 8002eee:	eeb0 6a40 	vmov.f32	s12, s0
 8002ef2:	eef0 6a60 	vmov.f32	s13, s1
 8002ef6:	eeb0 7a41 	vmov.f32	s14, s2
 8002efa:	eef0 7a61 	vmov.f32	s15, s3
 8002efe:	ed87 6a08 	vstr	s12, [r7, #32]
 8002f02:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8002f06:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8002f0a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
  test_vel.front_left = target_vel.front_left;
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	4a1d      	ldr	r2, [pc, #116]	@ (8002f88 <movement_control+0x170>)
 8002f12:	6013      	str	r3, [r2, #0]
  test_vel.front_right = target_vel.front_right;
 8002f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f16:	4a1c      	ldr	r2, [pc, #112]	@ (8002f88 <movement_control+0x170>)
 8002f18:	6053      	str	r3, [r2, #4]
  test_vel.rear_left = target_vel.rear_left;
 8002f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1c:	4a1a      	ldr	r2, [pc, #104]	@ (8002f88 <movement_control+0x170>)
 8002f1e:	6093      	str	r3, [r2, #8]
  test_vel.rear_right = target_vel.rear_right;
 8002f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f22:	4a19      	ldr	r2, [pc, #100]	@ (8002f88 <movement_control+0x170>)
 8002f24:	60d3      	str	r3, [r2, #12]
if (direction_encoder == LEFT_RIGHT) {
 8002f26:	4b17      	ldr	r3, [pc, #92]	@ (8002f84 <movement_control+0x16c>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d10b      	bne.n	8002f46 <movement_control+0x12e>
  target_vel.front_left *= -1;
 8002f2e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f32:	eef1 7a67 	vneg.f32	s15, s15
 8002f36:	edc7 7a08 	vstr	s15, [r7, #32]
  target_vel.rear_left *= -1;
 8002f3a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002f3e:	eef1 7a67 	vneg.f32	s15, s15
 8002f42:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
}

  WheelPWM target_pwm = wheel2pwm(target_vel);
 8002f46:	f107 0310 	add.w	r3, r7, #16
 8002f4a:	ed97 6a08 	vldr	s12, [r7, #32]
 8002f4e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002f52:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002f56:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f5a:	eeb0 0a46 	vmov.f32	s0, s12
 8002f5e:	eef0 0a66 	vmov.f32	s1, s13
 8002f62:	eeb0 1a47 	vmov.f32	s2, s14
 8002f66:	eef0 1a67 	vmov.f32	s3, s15
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fe34 	bl	8001bd8 <wheel2pwm>
  wheels_control(target_pwm);
 8002f70:	f107 0310 	add.w	r3, r7, #16
 8002f74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f76:	f7ff f8b3 	bl	80020e0 <wheels_control>
}
 8002f7a:	bf00      	nop
 8002f7c:	3730      	adds	r7, #48	@ 0x30
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000174 	.word	0x20000174
 8002f88:	20000154 	.word	0x20000154
 8002f8c:	00000000 	.word	0x00000000

08002f90 <servo_move>:
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
  HAL_UART_Receive(&huart4, receive_buffer, sizeof(receive_buffer), 0xFFFF);
  target_servo->current_pos = (receive_buffer[8] << 8) + receive_buffer[7];
}

void servo_move(HTD45H_Servo* target_servo, uint16_t target_pos, uint16_t time) {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	807b      	strh	r3, [r7, #2]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	803b      	strh	r3, [r7, #0]
  uint8_t send_buffer[10];
  send_buffer[0] = send_buffer[1] = FRAME_HEADER;
 8002fa0:	2355      	movs	r3, #85	@ 0x55
 8002fa2:	737b      	strb	r3, [r7, #13]
 8002fa4:	7b7b      	ldrb	r3, [r7, #13]
 8002fa6:	733b      	strb	r3, [r7, #12]
  send_buffer[2] = 0x01 * 3 + 5;
 8002fa8:	2308      	movs	r3, #8
 8002faa:	73bb      	strb	r3, [r7, #14]
  send_buffer[3] = CMD_SERVO_MOVE;
 8002fac:	2303      	movs	r3, #3
 8002fae:	73fb      	strb	r3, [r7, #15]
  send_buffer[4] = 0x01;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	743b      	strb	r3, [r7, #16]
  send_buffer[5] = GET_LOW_BYTE(time);
 8002fb4:	883b      	ldrh	r3, [r7, #0]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	747b      	strb	r3, [r7, #17]
  send_buffer[6] = GET_HIGH_BYTE(time);
 8002fba:	883b      	ldrh	r3, [r7, #0]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	74bb      	strb	r3, [r7, #18]
  send_buffer[7] = target_servo->servo_id;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	74fb      	strb	r3, [r7, #19]
  send_buffer[8] = GET_LOW_BYTE(target_pos);
 8002fca:	887b      	ldrh	r3, [r7, #2]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	753b      	strb	r3, [r7, #20]
  send_buffer[9] = GET_HIGH_BYTE(target_pos);
 8002fd0:	887b      	ldrh	r3, [r7, #2]
 8002fd2:	0a1b      	lsrs	r3, r3, #8
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	757b      	strb	r3, [r7, #21]
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
 8002fda:	f107 010c 	add.w	r1, r7, #12
 8002fde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fe2:	220a      	movs	r2, #10
 8002fe4:	489c      	ldr	r0, [pc, #624]	@ (8003258 <servo_move+0x2c8>)
 8002fe6:	f003 fe0b 	bl	8006c00 <HAL_UART_Transmit>
  target_servo->current_pos = target_pos;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	887a      	ldrh	r2, [r7, #2]
 8002fee:	805a      	strh	r2, [r3, #2]

  switch (target_servo->servo_id) {
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	f200 810c 	bhi.w	8003214 <servo_move+0x284>
 8002ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8003004 <servo_move+0x74>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	08003015 	.word	0x08003015
 8003008:	08003095 	.word	0x08003095
 800300c:	08003115 	.word	0x08003115
 8003010:	08003195 	.word	0x08003195
    case 1:
      target_servo->current_degree = SERVO_ID1_POS_TO_ANGLE(target_pos);
 8003014:	887b      	ldrh	r3, [r7, #2]
 8003016:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800301a:	d91c      	bls.n	8003056 <servo_move+0xc6>
 800301c:	887b      	ldrh	r3, [r7, #2]
 800301e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8003022:	4618      	mov	r0, r3
 8003024:	f7fd faa6 	bl	8000574 <__aeabi_i2d>
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	4b8b      	ldr	r3, [pc, #556]	@ (800325c <servo_move+0x2cc>)
 800302e:	f7fd fb0b 	bl	8000648 <__aeabi_dmul>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4610      	mov	r0, r2
 8003038:	4619      	mov	r1, r3
 800303a:	a379      	add	r3, pc, #484	@ (adr r3, 8003220 <servo_move+0x290>)
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	f7fd fc2c 	bl	800089c <__aeabi_ddiv>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	f7fd fdac 	bl	8000ba8 <__aeabi_d2iz>
 8003050:	4603      	mov	r3, r0
 8003052:	b21b      	sxth	r3, r3
 8003054:	e01b      	b.n	800308e <servo_move+0xfe>
 8003056:	887b      	ldrh	r3, [r7, #2]
 8003058:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd fa89 	bl	8000574 <__aeabi_i2d>
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	4b7e      	ldr	r3, [pc, #504]	@ (8003260 <servo_move+0x2d0>)
 8003068:	f7fd faee 	bl	8000648 <__aeabi_dmul>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	a36c      	add	r3, pc, #432	@ (adr r3, 8003228 <servo_move+0x298>)
 8003076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307a:	f7fd fc0f 	bl	800089c <__aeabi_ddiv>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4610      	mov	r0, r2
 8003084:	4619      	mov	r1, r3
 8003086:	f7fd fd8f 	bl	8000ba8 <__aeabi_d2iz>
 800308a:	4603      	mov	r3, r0
 800308c:	b21b      	sxth	r3, r3
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	8093      	strh	r3, [r2, #4]
      break;
 8003092:	e0c0      	b.n	8003216 <servo_move+0x286>
    case 2:
      target_servo->current_degree = SERVO_ID2_POS_TO_ANGLE(target_pos);
 8003094:	887b      	ldrh	r3, [r7, #2]
 8003096:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800309a:	d91c      	bls.n	80030d6 <servo_move+0x146>
 800309c:	887b      	ldrh	r3, [r7, #2]
 800309e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd fa66 	bl	8000574 <__aeabi_i2d>
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	4b6b      	ldr	r3, [pc, #428]	@ (800325c <servo_move+0x2cc>)
 80030ae:	f7fd facb 	bl	8000648 <__aeabi_dmul>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4610      	mov	r0, r2
 80030b8:	4619      	mov	r1, r3
 80030ba:	a35d      	add	r3, pc, #372	@ (adr r3, 8003230 <servo_move+0x2a0>)
 80030bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c0:	f7fd fbec 	bl	800089c <__aeabi_ddiv>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4610      	mov	r0, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	f7fd fd6c 	bl	8000ba8 <__aeabi_d2iz>
 80030d0:	4603      	mov	r3, r0
 80030d2:	b21b      	sxth	r3, r3
 80030d4:	e01b      	b.n	800310e <servo_move+0x17e>
 80030d6:	887b      	ldrh	r3, [r7, #2]
 80030d8:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fd fa49 	bl	8000574 <__aeabi_i2d>
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	4b5e      	ldr	r3, [pc, #376]	@ (8003260 <servo_move+0x2d0>)
 80030e8:	f7fd faae 	bl	8000648 <__aeabi_dmul>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4610      	mov	r0, r2
 80030f2:	4619      	mov	r1, r3
 80030f4:	a350      	add	r3, pc, #320	@ (adr r3, 8003238 <servo_move+0x2a8>)
 80030f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fa:	f7fd fbcf 	bl	800089c <__aeabi_ddiv>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4610      	mov	r0, r2
 8003104:	4619      	mov	r1, r3
 8003106:	f7fd fd4f 	bl	8000ba8 <__aeabi_d2iz>
 800310a:	4603      	mov	r3, r0
 800310c:	b21b      	sxth	r3, r3
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	8093      	strh	r3, [r2, #4]
      break;
 8003112:	e080      	b.n	8003216 <servo_move+0x286>
    case 3:
      target_servo->current_degree = SERVO_ID3_POS_TO_ANGLE(target_pos);
 8003114:	887b      	ldrh	r3, [r7, #2]
 8003116:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800311a:	d91c      	bls.n	8003156 <servo_move+0x1c6>
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd fa26 	bl	8000574 <__aeabi_i2d>
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	4b4b      	ldr	r3, [pc, #300]	@ (800325c <servo_move+0x2cc>)
 800312e:	f7fd fa8b 	bl	8000648 <__aeabi_dmul>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	a341      	add	r3, pc, #260	@ (adr r3, 8003240 <servo_move+0x2b0>)
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	f7fd fbac 	bl	800089c <__aeabi_ddiv>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4610      	mov	r0, r2
 800314a:	4619      	mov	r1, r3
 800314c:	f7fd fd2c 	bl	8000ba8 <__aeabi_d2iz>
 8003150:	4603      	mov	r3, r0
 8003152:	b21b      	sxth	r3, r3
 8003154:	e01b      	b.n	800318e <servo_move+0x1fe>
 8003156:	887b      	ldrh	r3, [r7, #2]
 8003158:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd fa09 	bl	8000574 <__aeabi_i2d>
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	4b3e      	ldr	r3, [pc, #248]	@ (8003260 <servo_move+0x2d0>)
 8003168:	f7fd fa6e 	bl	8000648 <__aeabi_dmul>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4610      	mov	r0, r2
 8003172:	4619      	mov	r1, r3
 8003174:	a334      	add	r3, pc, #208	@ (adr r3, 8003248 <servo_move+0x2b8>)
 8003176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317a:	f7fd fb8f 	bl	800089c <__aeabi_ddiv>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4610      	mov	r0, r2
 8003184:	4619      	mov	r1, r3
 8003186:	f7fd fd0f 	bl	8000ba8 <__aeabi_d2iz>
 800318a:	4603      	mov	r3, r0
 800318c:	b21b      	sxth	r3, r3
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	8093      	strh	r3, [r2, #4]
      break;
 8003192:	e040      	b.n	8003216 <servo_move+0x286>
    case 4:
      target_servo->current_degree = SERVO_ID4_POS_TO_ANGLE(target_pos);
 8003194:	887b      	ldrh	r3, [r7, #2]
 8003196:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800319a:	d91c      	bls.n	80031d6 <servo_move+0x246>
 800319c:	887b      	ldrh	r3, [r7, #2]
 800319e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fd f9e6 	bl	8000574 <__aeabi_i2d>
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	4b2b      	ldr	r3, [pc, #172]	@ (800325c <servo_move+0x2cc>)
 80031ae:	f7fd fa4b 	bl	8000648 <__aeabi_dmul>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4610      	mov	r0, r2
 80031b8:	4619      	mov	r1, r3
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	4b29      	ldr	r3, [pc, #164]	@ (8003264 <servo_move+0x2d4>)
 80031c0:	f7fd fb6c 	bl	800089c <__aeabi_ddiv>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4610      	mov	r0, r2
 80031ca:	4619      	mov	r1, r3
 80031cc:	f7fd fcec 	bl	8000ba8 <__aeabi_d2iz>
 80031d0:	4603      	mov	r3, r0
 80031d2:	b21b      	sxth	r3, r3
 80031d4:	e01b      	b.n	800320e <servo_move+0x27e>
 80031d6:	887b      	ldrh	r3, [r7, #2]
 80031d8:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd f9c9 	bl	8000574 <__aeabi_i2d>
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003260 <servo_move+0x2d0>)
 80031e8:	f7fd fa2e 	bl	8000648 <__aeabi_dmul>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4610      	mov	r0, r2
 80031f2:	4619      	mov	r1, r3
 80031f4:	a316      	add	r3, pc, #88	@ (adr r3, 8003250 <servo_move+0x2c0>)
 80031f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fa:	f7fd fb4f 	bl	800089c <__aeabi_ddiv>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4610      	mov	r0, r2
 8003204:	4619      	mov	r1, r3
 8003206:	f7fd fccf 	bl	8000ba8 <__aeabi_d2iz>
 800320a:	4603      	mov	r3, r0
 800320c:	b21b      	sxth	r3, r3
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	8093      	strh	r3, [r2, #4]
      break;
 8003212:	e000      	b.n	8003216 <servo_move+0x286>
    default:
      break;
 8003214:	bf00      	nop
  }
}
 8003216:	bf00      	nop
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	00000000 	.word	0x00000000
 8003224:	40781000 	.word	0x40781000
 8003228:	00000000 	.word	0x00000000
 800322c:	c076e000 	.word	0xc076e000
 8003230:	00000000 	.word	0x00000000
 8003234:	4077a000 	.word	0x4077a000
 8003238:	00000000 	.word	0x00000000
 800323c:	c0777000 	.word	0xc0777000
 8003240:	00000000 	.word	0x00000000
 8003244:	40777000 	.word	0x40777000
 8003248:	00000000 	.word	0x00000000
 800324c:	c0772000 	.word	0xc0772000
 8003250:	00000000 	.word	0x00000000
 8003254:	c0775000 	.word	0xc0775000
 8003258:	20000344 	.word	0x20000344
 800325c:	40568000 	.word	0x40568000
 8003260:	c0568000 	.word	0xc0568000
 8003264:	40778000 	.word	0x40778000

08003268 <servo_reset_all>:
uint16_t servo_get_current_pos(HTD45H_Servo* target_servo) {
  servo_update_current_pos(target_servo);
  return target_servo->current_pos;
}

void servo_reset_all(void) {
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
  for (int i = 0; i < 4; i++)
 800326e:	2300      	movs	r3, #0
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	e010      	b.n	8003296 <servo_reset_all+0x2e>
    servo_move(&(servos[i]), INITIAL_POS, 500);
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	4413      	add	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4a0a      	ldr	r2, [pc, #40]	@ (80032a8 <servo_reset_all+0x40>)
 8003280:	4413      	add	r3, r2
 8003282:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003286:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fe80 	bl	8002f90 <servo_move>
  for (int i = 0; i < 4; i++)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3301      	adds	r3, #1
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b03      	cmp	r3, #3
 800329a:	ddeb      	ble.n	8003274 <servo_reset_all+0xc>
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000060 	.word	0x20000060

080032ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b2:	4b0f      	ldr	r3, [pc, #60]	@ (80032f0 <HAL_MspInit+0x44>)
 80032b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b6:	4a0e      	ldr	r2, [pc, #56]	@ (80032f0 <HAL_MspInit+0x44>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80032be:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <HAL_MspInit+0x44>)
 80032c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	607b      	str	r3, [r7, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ca:	4b09      	ldr	r3, [pc, #36]	@ (80032f0 <HAL_MspInit+0x44>)
 80032cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ce:	4a08      	ldr	r2, [pc, #32]	@ (80032f0 <HAL_MspInit+0x44>)
 80032d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80032d6:	4b06      	ldr	r3, [pc, #24]	@ (80032f0 <HAL_MspInit+0x44>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032de:	603b      	str	r3, [r7, #0]
 80032e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80032e2:	f001 f9c3 	bl	800466c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40021000 	.word	0x40021000

080032f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032f8:	bf00      	nop
 80032fa:	e7fd      	b.n	80032f8 <NMI_Handler+0x4>

080032fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003300:	bf00      	nop
 8003302:	e7fd      	b.n	8003300 <HardFault_Handler+0x4>

08003304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003308:	bf00      	nop
 800330a:	e7fd      	b.n	8003308 <MemManage_Handler+0x4>

0800330c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003310:	bf00      	nop
 8003312:	e7fd      	b.n	8003310 <BusFault_Handler+0x4>

08003314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003318:	bf00      	nop
 800331a:	e7fd      	b.n	8003318 <UsageFault_Handler+0x4>

0800331c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800332a:	b480      	push	{r7}
 800332c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800333c:	bf00      	nop
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800334a:	f000 fe2d 	bl	8003fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}

08003352 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b086      	sub	sp, #24
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	e00a      	b.n	800337a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003364:	f3af 8000 	nop.w
 8003368:	4601      	mov	r1, r0
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	60ba      	str	r2, [r7, #8]
 8003370:	b2ca      	uxtb	r2, r1
 8003372:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	3301      	adds	r3, #1
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	429a      	cmp	r2, r3
 8003380:	dbf0      	blt.n	8003364 <_read+0x12>
  }

  return len;
 8003382:	687b      	ldr	r3, [r7, #4]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	e009      	b.n	80033b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	60ba      	str	r2, [r7, #8]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	3301      	adds	r3, #1
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	dbf1      	blt.n	800339e <_write+0x12>
  }
  return len;
 80033ba:	687b      	ldr	r3, [r7, #4]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <_close>:

int _close(int file)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033ec:	605a      	str	r2, [r3, #4]
  return 0;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <_isatty>:

int _isatty(int file)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003404:	2301      	movs	r3, #1
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003412:	b480      	push	{r7}
 8003414:	b085      	sub	sp, #20
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003434:	4a14      	ldr	r2, [pc, #80]	@ (8003488 <_sbrk+0x5c>)
 8003436:	4b15      	ldr	r3, [pc, #84]	@ (800348c <_sbrk+0x60>)
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003440:	4b13      	ldr	r3, [pc, #76]	@ (8003490 <_sbrk+0x64>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d102      	bne.n	800344e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003448:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <_sbrk+0x64>)
 800344a:	4a12      	ldr	r2, [pc, #72]	@ (8003494 <_sbrk+0x68>)
 800344c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800344e:	4b10      	ldr	r3, [pc, #64]	@ (8003490 <_sbrk+0x64>)
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4413      	add	r3, r2
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	429a      	cmp	r2, r3
 800345a:	d207      	bcs.n	800346c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800345c:	f004 fda8 	bl	8007fb0 <__errno>
 8003460:	4603      	mov	r3, r0
 8003462:	220c      	movs	r2, #12
 8003464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003466:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800346a:	e009      	b.n	8003480 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800346c:	4b08      	ldr	r3, [pc, #32]	@ (8003490 <_sbrk+0x64>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003472:	4b07      	ldr	r3, [pc, #28]	@ (8003490 <_sbrk+0x64>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4413      	add	r3, r2
 800347a:	4a05      	ldr	r2, [pc, #20]	@ (8003490 <_sbrk+0x64>)
 800347c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800347e:	68fb      	ldr	r3, [r7, #12]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20020000 	.word	0x20020000
 800348c:	00000400 	.word	0x00000400
 8003490:	20000178 	.word	0x20000178
 8003494:	200005c0 	.word	0x200005c0

08003498 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800349c:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <SystemInit+0x20>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a2:	4a05      	ldr	r2, [pc, #20]	@ (80034b8 <SystemInit+0x20>)
 80034a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08c      	sub	sp, #48	@ 0x30
 80034c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80034c2:	f107 030c 	add.w	r3, r7, #12
 80034c6:	2224      	movs	r2, #36	@ 0x24
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f004 fd22 	bl	8007f14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034d0:	463b      	mov	r3, r7
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80034da:	4b23      	ldr	r3, [pc, #140]	@ (8003568 <MX_TIM1_Init+0xac>)
 80034dc:	4a23      	ldr	r2, [pc, #140]	@ (800356c <MX_TIM1_Init+0xb0>)
 80034de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80034e0:	4b21      	ldr	r3, [pc, #132]	@ (8003568 <MX_TIM1_Init+0xac>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034e6:	4b20      	ldr	r3, [pc, #128]	@ (8003568 <MX_TIM1_Init+0xac>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80034ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003568 <MX_TIM1_Init+0xac>)
 80034ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003568 <MX_TIM1_Init+0xac>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80034fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003568 <MX_TIM1_Init+0xac>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003500:	4b19      	ldr	r3, [pc, #100]	@ (8003568 <MX_TIM1_Init+0xac>)
 8003502:	2280      	movs	r2, #128	@ 0x80
 8003504:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003506:	2303      	movs	r3, #3
 8003508:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800350e:	2301      	movs	r3, #1
 8003510:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003512:	2300      	movs	r3, #0
 8003514:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003516:	230a      	movs	r3, #10
 8003518:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800351a:	2300      	movs	r3, #0
 800351c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800351e:	2301      	movs	r3, #1
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003522:	2300      	movs	r3, #0
 8003524:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003526:	230a      	movs	r3, #10
 8003528:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800352a:	f107 030c 	add.w	r3, r7, #12
 800352e:	4619      	mov	r1, r3
 8003530:	480d      	ldr	r0, [pc, #52]	@ (8003568 <MX_TIM1_Init+0xac>)
 8003532:	f002 fa6b 	bl	8005a0c <HAL_TIM_Encoder_Init>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800353c:	f7fe f9ed 	bl	800191a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003540:	2300      	movs	r3, #0
 8003542:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003544:	2300      	movs	r3, #0
 8003546:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003548:	2300      	movs	r3, #0
 800354a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800354c:	463b      	mov	r3, r7
 800354e:	4619      	mov	r1, r3
 8003550:	4805      	ldr	r0, [pc, #20]	@ (8003568 <MX_TIM1_Init+0xac>)
 8003552:	f003 fa6f 	bl	8006a34 <HAL_TIMEx_MasterConfigSynchronization>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800355c:	f7fe f9dd 	bl	800191a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003560:	bf00      	nop
 8003562:	3730      	adds	r7, #48	@ 0x30
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	2000017c 	.word	0x2000017c
 800356c:	40012c00 	.word	0x40012c00

08003570 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08e      	sub	sp, #56	@ 0x38
 8003574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003576:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	605a      	str	r2, [r3, #4]
 8003580:	609a      	str	r2, [r3, #8]
 8003582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003584:	f107 031c 	add.w	r3, r7, #28
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003590:	463b      	mov	r3, r7
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	605a      	str	r2, [r3, #4]
 8003598:	609a      	str	r2, [r3, #8]
 800359a:	60da      	str	r2, [r3, #12]
 800359c:	611a      	str	r2, [r3, #16]
 800359e:	615a      	str	r2, [r3, #20]
 80035a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80035a2:	4b33      	ldr	r3, [pc, #204]	@ (8003670 <MX_TIM2_Init+0x100>)
 80035a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80035a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80035aa:	4b31      	ldr	r3, [pc, #196]	@ (8003670 <MX_TIM2_Init+0x100>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b0:	4b2f      	ldr	r3, [pc, #188]	@ (8003670 <MX_TIM2_Init+0x100>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16799;
 80035b6:	4b2e      	ldr	r3, [pc, #184]	@ (8003670 <MX_TIM2_Init+0x100>)
 80035b8:	f244 129f 	movw	r2, #16799	@ 0x419f
 80035bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035be:	4b2c      	ldr	r3, [pc, #176]	@ (8003670 <MX_TIM2_Init+0x100>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80035c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003670 <MX_TIM2_Init+0x100>)
 80035c6:	2280      	movs	r2, #128	@ 0x80
 80035c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80035ca:	4829      	ldr	r0, [pc, #164]	@ (8003670 <MX_TIM2_Init+0x100>)
 80035cc:	f001 ffda 	bl	8005584 <HAL_TIM_Base_Init>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80035d6:	f7fe f9a0 	bl	800191a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035de:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80035e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80035e4:	4619      	mov	r1, r3
 80035e6:	4822      	ldr	r0, [pc, #136]	@ (8003670 <MX_TIM2_Init+0x100>)
 80035e8:	f002 fc78 	bl	8005edc <HAL_TIM_ConfigClockSource>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80035f2:	f7fe f992 	bl	800191a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80035f6:	481e      	ldr	r0, [pc, #120]	@ (8003670 <MX_TIM2_Init+0x100>)
 80035f8:	f002 f894 	bl	8005724 <HAL_TIM_PWM_Init>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003602:	f7fe f98a 	bl	800191a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800360a:	2300      	movs	r3, #0
 800360c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800360e:	f107 031c 	add.w	r3, r7, #28
 8003612:	4619      	mov	r1, r3
 8003614:	4816      	ldr	r0, [pc, #88]	@ (8003670 <MX_TIM2_Init+0x100>)
 8003616:	f003 fa0d 	bl	8006a34 <HAL_TIMEx_MasterConfigSynchronization>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003620:	f7fe f97b 	bl	800191a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003624:	2360      	movs	r3, #96	@ 0x60
 8003626:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800362c:	2300      	movs	r3, #0
 800362e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003630:	2300      	movs	r3, #0
 8003632:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003634:	463b      	mov	r3, r7
 8003636:	2200      	movs	r2, #0
 8003638:	4619      	mov	r1, r3
 800363a:	480d      	ldr	r0, [pc, #52]	@ (8003670 <MX_TIM2_Init+0x100>)
 800363c:	f002 fb3a 	bl	8005cb4 <HAL_TIM_PWM_ConfigChannel>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003646:	f7fe f968 	bl	800191a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800364a:	463b      	mov	r3, r7
 800364c:	2204      	movs	r2, #4
 800364e:	4619      	mov	r1, r3
 8003650:	4807      	ldr	r0, [pc, #28]	@ (8003670 <MX_TIM2_Init+0x100>)
 8003652:	f002 fb2f 	bl	8005cb4 <HAL_TIM_PWM_ConfigChannel>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800365c:	f7fe f95d 	bl	800191a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003660:	4803      	ldr	r0, [pc, #12]	@ (8003670 <MX_TIM2_Init+0x100>)
 8003662:	f000 fa99 	bl	8003b98 <HAL_TIM_MspPostInit>

}
 8003666:	bf00      	nop
 8003668:	3738      	adds	r7, #56	@ 0x38
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	200001c8 	.word	0x200001c8

08003674 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08e      	sub	sp, #56	@ 0x38
 8003678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800367a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003688:	f107 031c 	add.w	r3, r7, #28
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003694:	463b      	mov	r3, r7
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	605a      	str	r2, [r3, #4]
 800369c:	609a      	str	r2, [r3, #8]
 800369e:	60da      	str	r2, [r3, #12]
 80036a0:	611a      	str	r2, [r3, #16]
 80036a2:	615a      	str	r2, [r3, #20]
 80036a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036a6:	4b32      	ldr	r3, [pc, #200]	@ (8003770 <MX_TIM3_Init+0xfc>)
 80036a8:	4a32      	ldr	r2, [pc, #200]	@ (8003774 <MX_TIM3_Init+0x100>)
 80036aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 80036ac:	4b30      	ldr	r3, [pc, #192]	@ (8003770 <MX_TIM3_Init+0xfc>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b2:	4b2f      	ldr	r3, [pc, #188]	@ (8003770 <MX_TIM3_Init+0xfc>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16799;
 80036b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003770 <MX_TIM3_Init+0xfc>)
 80036ba:	f244 129f 	movw	r2, #16799	@ 0x419f
 80036be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003770 <MX_TIM3_Init+0xfc>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003770 <MX_TIM3_Init+0xfc>)
 80036c8:	2280      	movs	r2, #128	@ 0x80
 80036ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80036cc:	4828      	ldr	r0, [pc, #160]	@ (8003770 <MX_TIM3_Init+0xfc>)
 80036ce:	f001 ff59 	bl	8005584 <HAL_TIM_Base_Init>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80036d8:	f7fe f91f 	bl	800191a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80036e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036e6:	4619      	mov	r1, r3
 80036e8:	4821      	ldr	r0, [pc, #132]	@ (8003770 <MX_TIM3_Init+0xfc>)
 80036ea:	f002 fbf7 	bl	8005edc <HAL_TIM_ConfigClockSource>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80036f4:	f7fe f911 	bl	800191a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80036f8:	481d      	ldr	r0, [pc, #116]	@ (8003770 <MX_TIM3_Init+0xfc>)
 80036fa:	f002 f813 	bl	8005724 <HAL_TIM_PWM_Init>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003704:	f7fe f909 	bl	800191a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003708:	2300      	movs	r3, #0
 800370a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800370c:	2300      	movs	r3, #0
 800370e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003710:	f107 031c 	add.w	r3, r7, #28
 8003714:	4619      	mov	r1, r3
 8003716:	4816      	ldr	r0, [pc, #88]	@ (8003770 <MX_TIM3_Init+0xfc>)
 8003718:	f003 f98c 	bl	8006a34 <HAL_TIMEx_MasterConfigSynchronization>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003722:	f7fe f8fa 	bl	800191a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003726:	2360      	movs	r3, #96	@ 0x60
 8003728:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800372e:	2300      	movs	r3, #0
 8003730:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003732:	2300      	movs	r3, #0
 8003734:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003736:	463b      	mov	r3, r7
 8003738:	2200      	movs	r2, #0
 800373a:	4619      	mov	r1, r3
 800373c:	480c      	ldr	r0, [pc, #48]	@ (8003770 <MX_TIM3_Init+0xfc>)
 800373e:	f002 fab9 	bl	8005cb4 <HAL_TIM_PWM_ConfigChannel>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003748:	f7fe f8e7 	bl	800191a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800374c:	463b      	mov	r3, r7
 800374e:	220c      	movs	r2, #12
 8003750:	4619      	mov	r1, r3
 8003752:	4807      	ldr	r0, [pc, #28]	@ (8003770 <MX_TIM3_Init+0xfc>)
 8003754:	f002 faae 	bl	8005cb4 <HAL_TIM_PWM_ConfigChannel>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800375e:	f7fe f8dc 	bl	800191a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003762:	4803      	ldr	r0, [pc, #12]	@ (8003770 <MX_TIM3_Init+0xfc>)
 8003764:	f000 fa18 	bl	8003b98 <HAL_TIM_MspPostInit>

}
 8003768:	bf00      	nop
 800376a:	3738      	adds	r7, #56	@ 0x38
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	20000214 	.word	0x20000214
 8003774:	40000400 	.word	0x40000400

08003778 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08c      	sub	sp, #48	@ 0x30
 800377c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800377e:	f107 030c 	add.w	r3, r7, #12
 8003782:	2224      	movs	r2, #36	@ 0x24
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f004 fbc4 	bl	8007f14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800378c:	463b      	mov	r3, r7
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	605a      	str	r2, [r3, #4]
 8003794:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003796:	4b21      	ldr	r3, [pc, #132]	@ (800381c <MX_TIM4_Init+0xa4>)
 8003798:	4a21      	ldr	r2, [pc, #132]	@ (8003820 <MX_TIM4_Init+0xa8>)
 800379a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800379c:	4b1f      	ldr	r3, [pc, #124]	@ (800381c <MX_TIM4_Init+0xa4>)
 800379e:	2200      	movs	r2, #0
 80037a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037a2:	4b1e      	ldr	r3, [pc, #120]	@ (800381c <MX_TIM4_Init+0xa4>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80037a8:	4b1c      	ldr	r3, [pc, #112]	@ (800381c <MX_TIM4_Init+0xa4>)
 80037aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80037ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037b0:	4b1a      	ldr	r3, [pc, #104]	@ (800381c <MX_TIM4_Init+0xa4>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037b6:	4b19      	ldr	r3, [pc, #100]	@ (800381c <MX_TIM4_Init+0xa4>)
 80037b8:	2280      	movs	r2, #128	@ 0x80
 80037ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80037bc:	2303      	movs	r3, #3
 80037be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037c4:	2301      	movs	r3, #1
 80037c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80037cc:	230a      	movs	r3, #10
 80037ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037d0:	2300      	movs	r3, #0
 80037d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037d4:	2301      	movs	r3, #1
 80037d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037d8:	2300      	movs	r3, #0
 80037da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80037dc:	230a      	movs	r3, #10
 80037de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80037e0:	f107 030c 	add.w	r3, r7, #12
 80037e4:	4619      	mov	r1, r3
 80037e6:	480d      	ldr	r0, [pc, #52]	@ (800381c <MX_TIM4_Init+0xa4>)
 80037e8:	f002 f910 	bl	8005a0c <HAL_TIM_Encoder_Init>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80037f2:	f7fe f892 	bl	800191a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037f6:	2300      	movs	r3, #0
 80037f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80037fe:	463b      	mov	r3, r7
 8003800:	4619      	mov	r1, r3
 8003802:	4806      	ldr	r0, [pc, #24]	@ (800381c <MX_TIM4_Init+0xa4>)
 8003804:	f003 f916 	bl	8006a34 <HAL_TIMEx_MasterConfigSynchronization>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800380e:	f7fe f884 	bl	800191a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003812:	bf00      	nop
 8003814:	3730      	adds	r7, #48	@ 0x30
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20000260 	.word	0x20000260
 8003820:	40000800 	.word	0x40000800

08003824 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08c      	sub	sp, #48	@ 0x30
 8003828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800382a:	f107 030c 	add.w	r3, r7, #12
 800382e:	2224      	movs	r2, #36	@ 0x24
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f004 fb6e 	bl	8007f14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003838:	463b      	mov	r3, r7
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003842:	4b21      	ldr	r3, [pc, #132]	@ (80038c8 <MX_TIM5_Init+0xa4>)
 8003844:	4a21      	ldr	r2, [pc, #132]	@ (80038cc <MX_TIM5_Init+0xa8>)
 8003846:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003848:	4b1f      	ldr	r3, [pc, #124]	@ (80038c8 <MX_TIM5_Init+0xa4>)
 800384a:	2200      	movs	r2, #0
 800384c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800384e:	4b1e      	ldr	r3, [pc, #120]	@ (80038c8 <MX_TIM5_Init+0xa4>)
 8003850:	2200      	movs	r2, #0
 8003852:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003854:	4b1c      	ldr	r3, [pc, #112]	@ (80038c8 <MX_TIM5_Init+0xa4>)
 8003856:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800385a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800385c:	4b1a      	ldr	r3, [pc, #104]	@ (80038c8 <MX_TIM5_Init+0xa4>)
 800385e:	2200      	movs	r2, #0
 8003860:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003862:	4b19      	ldr	r3, [pc, #100]	@ (80038c8 <MX_TIM5_Init+0xa4>)
 8003864:	2280      	movs	r2, #128	@ 0x80
 8003866:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003868:	2303      	movs	r3, #3
 800386a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800386c:	2300      	movs	r3, #0
 800386e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003870:	2301      	movs	r3, #1
 8003872:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003874:	2300      	movs	r3, #0
 8003876:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003878:	230a      	movs	r3, #10
 800387a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800387c:	2300      	movs	r3, #0
 800387e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003880:	2301      	movs	r3, #1
 8003882:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003884:	2300      	movs	r3, #0
 8003886:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003888:	230a      	movs	r3, #10
 800388a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800388c:	f107 030c 	add.w	r3, r7, #12
 8003890:	4619      	mov	r1, r3
 8003892:	480d      	ldr	r0, [pc, #52]	@ (80038c8 <MX_TIM5_Init+0xa4>)
 8003894:	f002 f8ba 	bl	8005a0c <HAL_TIM_Encoder_Init>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800389e:	f7fe f83c 	bl	800191a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038a2:	2300      	movs	r3, #0
 80038a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80038aa:	463b      	mov	r3, r7
 80038ac:	4619      	mov	r1, r3
 80038ae:	4806      	ldr	r0, [pc, #24]	@ (80038c8 <MX_TIM5_Init+0xa4>)
 80038b0:	f003 f8c0 	bl	8006a34 <HAL_TIMEx_MasterConfigSynchronization>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80038ba:	f7fe f82e 	bl	800191a <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80038be:	bf00      	nop
 80038c0:	3730      	adds	r7, #48	@ 0x30
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	200002ac 	.word	0x200002ac
 80038cc:	40000c00 	.word	0x40000c00

080038d0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08c      	sub	sp, #48	@ 0x30
 80038d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80038d6:	f107 030c 	add.w	r3, r7, #12
 80038da:	2224      	movs	r2, #36	@ 0x24
 80038dc:	2100      	movs	r1, #0
 80038de:	4618      	mov	r0, r3
 80038e0:	f004 fb18 	bl	8007f14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038e4:	463b      	mov	r3, r7
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	605a      	str	r2, [r3, #4]
 80038ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80038ee:	4b23      	ldr	r3, [pc, #140]	@ (800397c <MX_TIM8_Init+0xac>)
 80038f0:	4a23      	ldr	r2, [pc, #140]	@ (8003980 <MX_TIM8_Init+0xb0>)
 80038f2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80038f4:	4b21      	ldr	r3, [pc, #132]	@ (800397c <MX_TIM8_Init+0xac>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038fa:	4b20      	ldr	r3, [pc, #128]	@ (800397c <MX_TIM8_Init+0xac>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003900:	4b1e      	ldr	r3, [pc, #120]	@ (800397c <MX_TIM8_Init+0xac>)
 8003902:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003906:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003908:	4b1c      	ldr	r3, [pc, #112]	@ (800397c <MX_TIM8_Init+0xac>)
 800390a:	2200      	movs	r2, #0
 800390c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800390e:	4b1b      	ldr	r3, [pc, #108]	@ (800397c <MX_TIM8_Init+0xac>)
 8003910:	2200      	movs	r2, #0
 8003912:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003914:	4b19      	ldr	r3, [pc, #100]	@ (800397c <MX_TIM8_Init+0xac>)
 8003916:	2280      	movs	r2, #128	@ 0x80
 8003918:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800391a:	2303      	movs	r3, #3
 800391c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800391e:	2300      	movs	r3, #0
 8003920:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003922:	2301      	movs	r3, #1
 8003924:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003926:	2300      	movs	r3, #0
 8003928:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800392a:	230a      	movs	r3, #10
 800392c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800392e:	2300      	movs	r3, #0
 8003930:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003932:	2301      	movs	r3, #1
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003936:	2300      	movs	r3, #0
 8003938:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800393a:	230a      	movs	r3, #10
 800393c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800393e:	f107 030c 	add.w	r3, r7, #12
 8003942:	4619      	mov	r1, r3
 8003944:	480d      	ldr	r0, [pc, #52]	@ (800397c <MX_TIM8_Init+0xac>)
 8003946:	f002 f861 	bl	8005a0c <HAL_TIM_Encoder_Init>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8003950:	f7fd ffe3 	bl	800191a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003954:	2300      	movs	r3, #0
 8003956:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003958:	2300      	movs	r3, #0
 800395a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800395c:	2300      	movs	r3, #0
 800395e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003960:	463b      	mov	r3, r7
 8003962:	4619      	mov	r1, r3
 8003964:	4805      	ldr	r0, [pc, #20]	@ (800397c <MX_TIM8_Init+0xac>)
 8003966:	f003 f865 	bl	8006a34 <HAL_TIMEx_MasterConfigSynchronization>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003970:	f7fd ffd3 	bl	800191a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003974:	bf00      	nop
 8003976:	3730      	adds	r7, #48	@ 0x30
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	200002f8 	.word	0x200002f8
 8003980:	40013400 	.word	0x40013400

08003984 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b090      	sub	sp, #64	@ 0x40
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	60da      	str	r2, [r3, #12]
 800399a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a5d      	ldr	r2, [pc, #372]	@ (8003b18 <HAL_TIM_Encoder_MspInit+0x194>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d128      	bne.n	80039f8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039a6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 80039a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039aa:	4a5c      	ldr	r2, [pc, #368]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 80039ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80039b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80039b2:	4b5a      	ldr	r3, [pc, #360]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 80039b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039be:	4b57      	ldr	r3, [pc, #348]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 80039c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c2:	4a56      	ldr	r2, [pc, #344]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 80039c4:	f043 0304 	orr.w	r3, r3, #4
 80039c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ca:	4b54      	ldr	r3, [pc, #336]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 80039cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80039d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80039d6:	2303      	movs	r3, #3
 80039d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039da:	2302      	movs	r3, #2
 80039dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e2:	2300      	movs	r3, #0
 80039e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80039e6:	2302      	movs	r3, #2
 80039e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80039ee:	4619      	mov	r1, r3
 80039f0:	484b      	ldr	r0, [pc, #300]	@ (8003b20 <HAL_TIM_Encoder_MspInit+0x19c>)
 80039f2:	f000 fbfd 	bl	80041f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80039f6:	e08a      	b.n	8003b0e <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a49      	ldr	r2, [pc, #292]	@ (8003b24 <HAL_TIM_Encoder_MspInit+0x1a0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d129      	bne.n	8003a56 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a02:	4b46      	ldr	r3, [pc, #280]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a06:	4a45      	ldr	r2, [pc, #276]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a08:	f043 0304 	orr.w	r3, r3, #4
 8003a0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a0e:	4b43      	ldr	r3, [pc, #268]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	623b      	str	r3, [r7, #32]
 8003a18:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a1a:	4b40      	ldr	r3, [pc, #256]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a1e:	4a3f      	ldr	r2, [pc, #252]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a20:	f043 0308 	orr.w	r3, r3, #8
 8003a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a26:	4b3d      	ldr	r3, [pc, #244]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	61fb      	str	r3, [r7, #28]
 8003a30:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003a32:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a40:	2300      	movs	r3, #0
 8003a42:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a44:	2302      	movs	r3, #2
 8003a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4836      	ldr	r0, [pc, #216]	@ (8003b28 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8003a50:	f000 fbce 	bl	80041f0 <HAL_GPIO_Init>
}
 8003a54:	e05b      	b.n	8003b0e <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a34      	ldr	r2, [pc, #208]	@ (8003b2c <HAL_TIM_Encoder_MspInit+0x1a8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d129      	bne.n	8003ab4 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a60:	4b2e      	ldr	r3, [pc, #184]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a64:	4a2d      	ldr	r2, [pc, #180]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a66:	f043 0308 	orr.w	r3, r3, #8
 8003a6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a78:	4b28      	ldr	r3, [pc, #160]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a7c:	4a27      	ldr	r2, [pc, #156]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a84:	4b25      	ldr	r3, [pc, #148]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 8003a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a90:	2303      	movs	r3, #3
 8003a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a94:	2302      	movs	r3, #2
 8003a96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003aae:	f000 fb9f 	bl	80041f0 <HAL_GPIO_Init>
}
 8003ab2:	e02c      	b.n	8003b0e <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b30 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d127      	bne.n	8003b0e <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003abe:	4b17      	ldr	r3, [pc, #92]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 8003ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac2:	4a16      	ldr	r2, [pc, #88]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 8003ac4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ac8:	6613      	str	r3, [r2, #96]	@ 0x60
 8003aca:	4b14      	ldr	r3, [pc, #80]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 8003acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ace:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ad6:	4b11      	ldr	r3, [pc, #68]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ada:	4a10      	ldr	r2, [pc, #64]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 8003adc:	f043 0304 	orr.w	r3, r3, #4
 8003ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8003b1c <HAL_TIM_Encoder_MspInit+0x198>)
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003aee:	23c0      	movs	r3, #192	@ 0xc0
 8003af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af2:	2302      	movs	r3, #2
 8003af4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afa:	2300      	movs	r3, #0
 8003afc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003afe:	2304      	movs	r3, #4
 8003b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b06:	4619      	mov	r1, r3
 8003b08:	4805      	ldr	r0, [pc, #20]	@ (8003b20 <HAL_TIM_Encoder_MspInit+0x19c>)
 8003b0a:	f000 fb71 	bl	80041f0 <HAL_GPIO_Init>
}
 8003b0e:	bf00      	nop
 8003b10:	3740      	adds	r7, #64	@ 0x40
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40012c00 	.word	0x40012c00
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	48000800 	.word	0x48000800
 8003b24:	40000800 	.word	0x40000800
 8003b28:	48000c00 	.word	0x48000c00
 8003b2c:	40000c00 	.word	0x40000c00
 8003b30:	40013400 	.word	0x40013400

08003b34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b44:	d10c      	bne.n	8003b60 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b46:	4b12      	ldr	r3, [pc, #72]	@ (8003b90 <HAL_TIM_Base_MspInit+0x5c>)
 8003b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4a:	4a11      	ldr	r2, [pc, #68]	@ (8003b90 <HAL_TIM_Base_MspInit+0x5c>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b52:	4b0f      	ldr	r3, [pc, #60]	@ (8003b90 <HAL_TIM_Base_MspInit+0x5c>)
 8003b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003b5e:	e010      	b.n	8003b82 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a0b      	ldr	r2, [pc, #44]	@ (8003b94 <HAL_TIM_Base_MspInit+0x60>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d10b      	bne.n	8003b82 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b6a:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <HAL_TIM_Base_MspInit+0x5c>)
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6e:	4a08      	ldr	r2, [pc, #32]	@ (8003b90 <HAL_TIM_Base_MspInit+0x5c>)
 8003b70:	f043 0302 	orr.w	r3, r3, #2
 8003b74:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b76:	4b06      	ldr	r3, [pc, #24]	@ (8003b90 <HAL_TIM_Base_MspInit+0x5c>)
 8003b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	68bb      	ldr	r3, [r7, #8]
}
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40000400 	.word	0x40000400

08003b98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08a      	sub	sp, #40	@ 0x28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba0:	f107 0314 	add.w	r3, r7, #20
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	605a      	str	r2, [r3, #4]
 8003baa:	609a      	str	r2, [r3, #8]
 8003bac:	60da      	str	r2, [r3, #12]
 8003bae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bb8:	d11c      	bne.n	8003bf4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bba:	4b21      	ldr	r3, [pc, #132]	@ (8003c40 <HAL_TIM_MspPostInit+0xa8>)
 8003bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bbe:	4a20      	ldr	r2, [pc, #128]	@ (8003c40 <HAL_TIM_MspPostInit+0xa8>)
 8003bc0:	f043 0308 	orr.w	r3, r3, #8
 8003bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c40 <HAL_TIM_MspPostInit+0xa8>)
 8003bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003bd2:	2318      	movs	r3, #24
 8003bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bde:	2300      	movs	r3, #0
 8003be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003be2:	2302      	movs	r3, #2
 8003be4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003be6:	f107 0314 	add.w	r3, r7, #20
 8003bea:	4619      	mov	r1, r3
 8003bec:	4815      	ldr	r0, [pc, #84]	@ (8003c44 <HAL_TIM_MspPostInit+0xac>)
 8003bee:	f000 faff 	bl	80041f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003bf2:	e020      	b.n	8003c36 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a13      	ldr	r2, [pc, #76]	@ (8003c48 <HAL_TIM_MspPostInit+0xb0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d11b      	bne.n	8003c36 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003bfe:	4b10      	ldr	r3, [pc, #64]	@ (8003c40 <HAL_TIM_MspPostInit+0xa8>)
 8003c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c02:	4a0f      	ldr	r2, [pc, #60]	@ (8003c40 <HAL_TIM_MspPostInit+0xa8>)
 8003c04:	f043 0310 	orr.w	r3, r3, #16
 8003c08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c40 <HAL_TIM_MspPostInit+0xa8>)
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8003c16:	2324      	movs	r3, #36	@ 0x24
 8003c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c22:	2300      	movs	r3, #0
 8003c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c26:	2302      	movs	r3, #2
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c2a:	f107 0314 	add.w	r3, r7, #20
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4806      	ldr	r0, [pc, #24]	@ (8003c4c <HAL_TIM_MspPostInit+0xb4>)
 8003c32:	f000 fadd 	bl	80041f0 <HAL_GPIO_Init>
}
 8003c36:	bf00      	nop
 8003c38:	3728      	adds	r7, #40	@ 0x28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40021000 	.word	0x40021000
 8003c44:	48000c00 	.word	0x48000c00
 8003c48:	40000400 	.word	0x40000400
 8003c4c:	48001000 	.word	0x48001000

08003c50 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003c54:	4b22      	ldr	r3, [pc, #136]	@ (8003ce0 <MX_UART4_Init+0x90>)
 8003c56:	4a23      	ldr	r2, [pc, #140]	@ (8003ce4 <MX_UART4_Init+0x94>)
 8003c58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003c5a:	4b21      	ldr	r3, [pc, #132]	@ (8003ce0 <MX_UART4_Init+0x90>)
 8003c5c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003c60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003c62:	4b1f      	ldr	r3, [pc, #124]	@ (8003ce0 <MX_UART4_Init+0x90>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003c68:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce0 <MX_UART4_Init+0x90>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ce0 <MX_UART4_Init+0x90>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003c74:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce0 <MX_UART4_Init+0x90>)
 8003c76:	220c      	movs	r2, #12
 8003c78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c7a:	4b19      	ldr	r3, [pc, #100]	@ (8003ce0 <MX_UART4_Init+0x90>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c80:	4b17      	ldr	r3, [pc, #92]	@ (8003ce0 <MX_UART4_Init+0x90>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c86:	4b16      	ldr	r3, [pc, #88]	@ (8003ce0 <MX_UART4_Init+0x90>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c8c:	4b14      	ldr	r3, [pc, #80]	@ (8003ce0 <MX_UART4_Init+0x90>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c92:	4b13      	ldr	r3, [pc, #76]	@ (8003ce0 <MX_UART4_Init+0x90>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003c98:	4811      	ldr	r0, [pc, #68]	@ (8003ce0 <MX_UART4_Init+0x90>)
 8003c9a:	f002 ff61 	bl	8006b60 <HAL_UART_Init>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003ca4:	f7fd fe39 	bl	800191a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ca8:	2100      	movs	r1, #0
 8003caa:	480d      	ldr	r0, [pc, #52]	@ (8003ce0 <MX_UART4_Init+0x90>)
 8003cac:	f003 fe52 	bl	8007954 <HAL_UARTEx_SetTxFifoThreshold>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003cb6:	f7fd fe30 	bl	800191a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cba:	2100      	movs	r1, #0
 8003cbc:	4808      	ldr	r0, [pc, #32]	@ (8003ce0 <MX_UART4_Init+0x90>)
 8003cbe:	f003 fe87 	bl	80079d0 <HAL_UARTEx_SetRxFifoThreshold>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003cc8:	f7fd fe27 	bl	800191a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003ccc:	4804      	ldr	r0, [pc, #16]	@ (8003ce0 <MX_UART4_Init+0x90>)
 8003cce:	f003 fe08 	bl	80078e2 <HAL_UARTEx_DisableFifoMode>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003cd8:	f7fd fe1f 	bl	800191a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003cdc:	bf00      	nop
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20000344 	.word	0x20000344
 8003ce4:	40004c00 	.word	0x40004c00

08003ce8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003cec:	4b22      	ldr	r3, [pc, #136]	@ (8003d78 <MX_USART1_UART_Init+0x90>)
 8003cee:	4a23      	ldr	r2, [pc, #140]	@ (8003d7c <MX_USART1_UART_Init+0x94>)
 8003cf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003cf2:	4b21      	ldr	r3, [pc, #132]	@ (8003d78 <MX_USART1_UART_Init+0x90>)
 8003cf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003cf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8003d78 <MX_USART1_UART_Init+0x90>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d00:	4b1d      	ldr	r3, [pc, #116]	@ (8003d78 <MX_USART1_UART_Init+0x90>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d06:	4b1c      	ldr	r3, [pc, #112]	@ (8003d78 <MX_USART1_UART_Init+0x90>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8003d78 <MX_USART1_UART_Init+0x90>)
 8003d0e:	220c      	movs	r2, #12
 8003d10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d12:	4b19      	ldr	r3, [pc, #100]	@ (8003d78 <MX_USART1_UART_Init+0x90>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d18:	4b17      	ldr	r3, [pc, #92]	@ (8003d78 <MX_USART1_UART_Init+0x90>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d1e:	4b16      	ldr	r3, [pc, #88]	@ (8003d78 <MX_USART1_UART_Init+0x90>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d24:	4b14      	ldr	r3, [pc, #80]	@ (8003d78 <MX_USART1_UART_Init+0x90>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d2a:	4b13      	ldr	r3, [pc, #76]	@ (8003d78 <MX_USART1_UART_Init+0x90>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d30:	4811      	ldr	r0, [pc, #68]	@ (8003d78 <MX_USART1_UART_Init+0x90>)
 8003d32:	f002 ff15 	bl	8006b60 <HAL_UART_Init>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003d3c:	f7fd fded 	bl	800191a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d40:	2100      	movs	r1, #0
 8003d42:	480d      	ldr	r0, [pc, #52]	@ (8003d78 <MX_USART1_UART_Init+0x90>)
 8003d44:	f003 fe06 	bl	8007954 <HAL_UARTEx_SetTxFifoThreshold>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003d4e:	f7fd fde4 	bl	800191a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d52:	2100      	movs	r1, #0
 8003d54:	4808      	ldr	r0, [pc, #32]	@ (8003d78 <MX_USART1_UART_Init+0x90>)
 8003d56:	f003 fe3b 	bl	80079d0 <HAL_UARTEx_SetRxFifoThreshold>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003d60:	f7fd fddb 	bl	800191a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003d64:	4804      	ldr	r0, [pc, #16]	@ (8003d78 <MX_USART1_UART_Init+0x90>)
 8003d66:	f003 fdbc 	bl	80078e2 <HAL_UARTEx_DisableFifoMode>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003d70:	f7fd fdd3 	bl	800191a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d74:	bf00      	nop
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	200003d8 	.word	0x200003d8
 8003d7c:	40013800 	.word	0x40013800

08003d80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b0a0      	sub	sp, #128	@ 0x80
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d88:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	605a      	str	r2, [r3, #4]
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	60da      	str	r2, [r3, #12]
 8003d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d98:	f107 0318 	add.w	r3, r7, #24
 8003d9c:	2254      	movs	r2, #84	@ 0x54
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4618      	mov	r0, r3
 8003da2:	f004 f8b7 	bl	8007f14 <memset>
  if(uartHandle->Instance==UART4)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a3d      	ldr	r2, [pc, #244]	@ (8003ea0 <HAL_UART_MspInit+0x120>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d137      	bne.n	8003e20 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003db0:	2308      	movs	r3, #8
 8003db2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003db4:	2300      	movs	r3, #0
 8003db6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003db8:	f107 0318 	add.w	r3, r7, #24
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f001 f993 	bl	80050e8 <HAL_RCCEx_PeriphCLKConfig>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003dc8:	f7fd fda7 	bl	800191a <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003dcc:	4b35      	ldr	r3, [pc, #212]	@ (8003ea4 <HAL_UART_MspInit+0x124>)
 8003dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd0:	4a34      	ldr	r2, [pc, #208]	@ (8003ea4 <HAL_UART_MspInit+0x124>)
 8003dd2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003dd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dd8:	4b32      	ldr	r3, [pc, #200]	@ (8003ea4 <HAL_UART_MspInit+0x124>)
 8003dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ddc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003de4:	4b2f      	ldr	r3, [pc, #188]	@ (8003ea4 <HAL_UART_MspInit+0x124>)
 8003de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003de8:	4a2e      	ldr	r2, [pc, #184]	@ (8003ea4 <HAL_UART_MspInit+0x124>)
 8003dea:	f043 0304 	orr.w	r3, r3, #4
 8003dee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003df0:	4b2c      	ldr	r3, [pc, #176]	@ (8003ea4 <HAL_UART_MspInit+0x124>)
 8003df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003dfc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003e00:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e02:	2302      	movs	r3, #2
 8003e04:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003e0e:	2305      	movs	r3, #5
 8003e10:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e12:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003e16:	4619      	mov	r1, r3
 8003e18:	4823      	ldr	r0, [pc, #140]	@ (8003ea8 <HAL_UART_MspInit+0x128>)
 8003e1a:	f000 f9e9 	bl	80041f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003e1e:	e03a      	b.n	8003e96 <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a21      	ldr	r2, [pc, #132]	@ (8003eac <HAL_UART_MspInit+0x12c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d135      	bne.n	8003e96 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e32:	f107 0318 	add.w	r3, r7, #24
 8003e36:	4618      	mov	r0, r3
 8003e38:	f001 f956 	bl	80050e8 <HAL_RCCEx_PeriphCLKConfig>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8003e42:	f7fd fd6a 	bl	800191a <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e46:	4b17      	ldr	r3, [pc, #92]	@ (8003ea4 <HAL_UART_MspInit+0x124>)
 8003e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e4a:	4a16      	ldr	r2, [pc, #88]	@ (8003ea4 <HAL_UART_MspInit+0x124>)
 8003e4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e50:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e52:	4b14      	ldr	r3, [pc, #80]	@ (8003ea4 <HAL_UART_MspInit+0x124>)
 8003e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e5e:	4b11      	ldr	r3, [pc, #68]	@ (8003ea4 <HAL_UART_MspInit+0x124>)
 8003e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e62:	4a10      	ldr	r2, [pc, #64]	@ (8003ea4 <HAL_UART_MspInit+0x124>)
 8003e64:	f043 0304 	orr.w	r3, r3, #4
 8003e68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea4 <HAL_UART_MspInit+0x124>)
 8003e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	60bb      	str	r3, [r7, #8]
 8003e74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003e76:	2330      	movs	r3, #48	@ 0x30
 8003e78:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e82:	2300      	movs	r3, #0
 8003e84:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e86:	2307      	movs	r3, #7
 8003e88:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e8a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4805      	ldr	r0, [pc, #20]	@ (8003ea8 <HAL_UART_MspInit+0x128>)
 8003e92:	f000 f9ad 	bl	80041f0 <HAL_GPIO_Init>
}
 8003e96:	bf00      	nop
 8003e98:	3780      	adds	r7, #128	@ 0x80
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40004c00 	.word	0x40004c00
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	48000800 	.word	0x48000800
 8003eac:	40013800 	.word	0x40013800

08003eb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003eb0:	480d      	ldr	r0, [pc, #52]	@ (8003ee8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003eb2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003eb4:	f7ff faf0 	bl	8003498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003eb8:	480c      	ldr	r0, [pc, #48]	@ (8003eec <LoopForever+0x6>)
  ldr r1, =_edata
 8003eba:	490d      	ldr	r1, [pc, #52]	@ (8003ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8003ef4 <LoopForever+0xe>)
  movs r3, #0
 8003ebe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003ec0:	e002      	b.n	8003ec8 <LoopCopyDataInit>

08003ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ec6:	3304      	adds	r3, #4

08003ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ecc:	d3f9      	bcc.n	8003ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ece:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ed0:	4c0a      	ldr	r4, [pc, #40]	@ (8003efc <LoopForever+0x16>)
  movs r3, #0
 8003ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ed4:	e001      	b.n	8003eda <LoopFillZerobss>

08003ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ed8:	3204      	adds	r2, #4

08003eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003edc:	d3fb      	bcc.n	8003ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ede:	f004 f86d 	bl	8007fbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ee2:	f7fd fb53 	bl	800158c <main>

08003ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8003ee6:	e7fe      	b.n	8003ee6 <LoopForever>
  ldr   r0, =_estack
 8003ee8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ef0:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8003ef4:	08009778 	.word	0x08009778
  ldr r2, =_sbss
 8003ef8:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8003efc:	200005bc 	.word	0x200005bc

08003f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f00:	e7fe      	b.n	8003f00 <ADC1_2_IRQHandler>

08003f02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f0c:	2003      	movs	r0, #3
 8003f0e:	f000 f93d 	bl	800418c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f12:	200f      	movs	r0, #15
 8003f14:	f000 f80e 	bl	8003f34 <HAL_InitTick>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	71fb      	strb	r3, [r7, #7]
 8003f22:	e001      	b.n	8003f28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f24:	f7ff f9c2 	bl	80032ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f28:	79fb      	ldrb	r3, [r7, #7]

}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003f40:	4b16      	ldr	r3, [pc, #88]	@ (8003f9c <HAL_InitTick+0x68>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d022      	beq.n	8003f8e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003f48:	4b15      	ldr	r3, [pc, #84]	@ (8003fa0 <HAL_InitTick+0x6c>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4b13      	ldr	r3, [pc, #76]	@ (8003f9c <HAL_InitTick+0x68>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003f54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 f93a 	bl	80041d6 <HAL_SYSTICK_Config>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10f      	bne.n	8003f88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b0f      	cmp	r3, #15
 8003f6c:	d809      	bhi.n	8003f82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f6e:	2200      	movs	r2, #0
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f76:	f000 f914 	bl	80041a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa4 <HAL_InitTick+0x70>)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	e007      	b.n	8003f92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	73fb      	strb	r3, [r7, #15]
 8003f86:	e004      	b.n	8003f92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
 8003f8c:	e001      	b.n	8003f92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20000080 	.word	0x20000080
 8003fa0:	20000078 	.word	0x20000078
 8003fa4:	2000007c 	.word	0x2000007c

08003fa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fac:	4b05      	ldr	r3, [pc, #20]	@ (8003fc4 <HAL_IncTick+0x1c>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b05      	ldr	r3, [pc, #20]	@ (8003fc8 <HAL_IncTick+0x20>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	4a03      	ldr	r2, [pc, #12]	@ (8003fc4 <HAL_IncTick+0x1c>)
 8003fb8:	6013      	str	r3, [r2, #0]
}
 8003fba:	bf00      	nop
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	2000046c 	.word	0x2000046c
 8003fc8:	20000080 	.word	0x20000080

08003fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  return uwTick;
 8003fd0:	4b03      	ldr	r3, [pc, #12]	@ (8003fe0 <HAL_GetTick+0x14>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	2000046c 	.word	0x2000046c

08003fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fec:	f7ff ffee 	bl	8003fcc <HAL_GetTick>
 8003ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ffc:	d004      	beq.n	8004008 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ffe:	4b09      	ldr	r3, [pc, #36]	@ (8004024 <HAL_Delay+0x40>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4413      	add	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004008:	bf00      	nop
 800400a:	f7ff ffdf 	bl	8003fcc <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	429a      	cmp	r2, r3
 8004018:	d8f7      	bhi.n	800400a <HAL_Delay+0x26>
  {
  }
}
 800401a:	bf00      	nop
 800401c:	bf00      	nop
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	20000080 	.word	0x20000080

08004028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004038:	4b0c      	ldr	r3, [pc, #48]	@ (800406c <__NVIC_SetPriorityGrouping+0x44>)
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004044:	4013      	ands	r3, r2
 8004046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004050:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800405a:	4a04      	ldr	r2, [pc, #16]	@ (800406c <__NVIC_SetPriorityGrouping+0x44>)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	60d3      	str	r3, [r2, #12]
}
 8004060:	bf00      	nop
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	e000ed00 	.word	0xe000ed00

08004070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004074:	4b04      	ldr	r3, [pc, #16]	@ (8004088 <__NVIC_GetPriorityGrouping+0x18>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	0a1b      	lsrs	r3, r3, #8
 800407a:	f003 0307 	and.w	r3, r3, #7
}
 800407e:	4618      	mov	r0, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	e000ed00 	.word	0xe000ed00

0800408c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	4603      	mov	r3, r0
 8004094:	6039      	str	r1, [r7, #0]
 8004096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800409c:	2b00      	cmp	r3, #0
 800409e:	db0a      	blt.n	80040b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	490c      	ldr	r1, [pc, #48]	@ (80040d8 <__NVIC_SetPriority+0x4c>)
 80040a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040aa:	0112      	lsls	r2, r2, #4
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	440b      	add	r3, r1
 80040b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040b4:	e00a      	b.n	80040cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	4908      	ldr	r1, [pc, #32]	@ (80040dc <__NVIC_SetPriority+0x50>)
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	3b04      	subs	r3, #4
 80040c4:	0112      	lsls	r2, r2, #4
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	440b      	add	r3, r1
 80040ca:	761a      	strb	r2, [r3, #24]
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	e000e100 	.word	0xe000e100
 80040dc:	e000ed00 	.word	0xe000ed00

080040e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b089      	sub	sp, #36	@ 0x24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f1c3 0307 	rsb	r3, r3, #7
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	bf28      	it	cs
 80040fe:	2304      	movcs	r3, #4
 8004100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	3304      	adds	r3, #4
 8004106:	2b06      	cmp	r3, #6
 8004108:	d902      	bls.n	8004110 <NVIC_EncodePriority+0x30>
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	3b03      	subs	r3, #3
 800410e:	e000      	b.n	8004112 <NVIC_EncodePriority+0x32>
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004114:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	43da      	mvns	r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	401a      	ands	r2, r3
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004128:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	fa01 f303 	lsl.w	r3, r1, r3
 8004132:	43d9      	mvns	r1, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004138:	4313      	orrs	r3, r2
         );
}
 800413a:	4618      	mov	r0, r3
 800413c:	3724      	adds	r7, #36	@ 0x24
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
	...

08004148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3b01      	subs	r3, #1
 8004154:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004158:	d301      	bcc.n	800415e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800415a:	2301      	movs	r3, #1
 800415c:	e00f      	b.n	800417e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800415e:	4a0a      	ldr	r2, [pc, #40]	@ (8004188 <SysTick_Config+0x40>)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3b01      	subs	r3, #1
 8004164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004166:	210f      	movs	r1, #15
 8004168:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800416c:	f7ff ff8e 	bl	800408c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004170:	4b05      	ldr	r3, [pc, #20]	@ (8004188 <SysTick_Config+0x40>)
 8004172:	2200      	movs	r2, #0
 8004174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004176:	4b04      	ldr	r3, [pc, #16]	@ (8004188 <SysTick_Config+0x40>)
 8004178:	2207      	movs	r2, #7
 800417a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	e000e010 	.word	0xe000e010

0800418c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff ff47 	bl	8004028 <__NVIC_SetPriorityGrouping>
}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b086      	sub	sp, #24
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	4603      	mov	r3, r0
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041b0:	f7ff ff5e 	bl	8004070 <__NVIC_GetPriorityGrouping>
 80041b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	6978      	ldr	r0, [r7, #20]
 80041bc:	f7ff ff90 	bl	80040e0 <NVIC_EncodePriority>
 80041c0:	4602      	mov	r2, r0
 80041c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041c6:	4611      	mov	r1, r2
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff ff5f 	bl	800408c <__NVIC_SetPriority>
}
 80041ce:	bf00      	nop
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7ff ffb2 	bl	8004148 <SysTick_Config>
 80041e4:	4603      	mov	r3, r0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041fe:	e15a      	b.n	80044b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	2101      	movs	r1, #1
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	fa01 f303 	lsl.w	r3, r1, r3
 800420c:	4013      	ands	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 814c 	beq.w	80044b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f003 0303 	and.w	r3, r3, #3
 8004220:	2b01      	cmp	r3, #1
 8004222:	d005      	beq.n	8004230 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800422c:	2b02      	cmp	r3, #2
 800422e:	d130      	bne.n	8004292 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	2203      	movs	r2, #3
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	43db      	mvns	r3, r3
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4013      	ands	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004266:	2201      	movs	r2, #1
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43db      	mvns	r3, r3
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4013      	ands	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	091b      	lsrs	r3, r3, #4
 800427c:	f003 0201 	and.w	r2, r3, #1
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	2b03      	cmp	r3, #3
 800429c:	d017      	beq.n	80042ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	2203      	movs	r2, #3
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	43db      	mvns	r3, r3
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4013      	ands	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d123      	bne.n	8004322 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	08da      	lsrs	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3208      	adds	r2, #8
 80042e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	220f      	movs	r2, #15
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4013      	ands	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	08da      	lsrs	r2, r3, #3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3208      	adds	r2, #8
 800431c:	6939      	ldr	r1, [r7, #16]
 800431e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	2203      	movs	r2, #3
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	43db      	mvns	r3, r3
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4013      	ands	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f003 0203 	and.w	r2, r3, #3
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 80a6 	beq.w	80044b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004364:	4b5b      	ldr	r3, [pc, #364]	@ (80044d4 <HAL_GPIO_Init+0x2e4>)
 8004366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004368:	4a5a      	ldr	r2, [pc, #360]	@ (80044d4 <HAL_GPIO_Init+0x2e4>)
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004370:	4b58      	ldr	r3, [pc, #352]	@ (80044d4 <HAL_GPIO_Init+0x2e4>)
 8004372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800437c:	4a56      	ldr	r2, [pc, #344]	@ (80044d8 <HAL_GPIO_Init+0x2e8>)
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	089b      	lsrs	r3, r3, #2
 8004382:	3302      	adds	r3, #2
 8004384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004388:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	220f      	movs	r2, #15
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	43db      	mvns	r3, r3
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4013      	ands	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80043a6:	d01f      	beq.n	80043e8 <HAL_GPIO_Init+0x1f8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a4c      	ldr	r2, [pc, #304]	@ (80044dc <HAL_GPIO_Init+0x2ec>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d019      	beq.n	80043e4 <HAL_GPIO_Init+0x1f4>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a4b      	ldr	r2, [pc, #300]	@ (80044e0 <HAL_GPIO_Init+0x2f0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d013      	beq.n	80043e0 <HAL_GPIO_Init+0x1f0>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a4a      	ldr	r2, [pc, #296]	@ (80044e4 <HAL_GPIO_Init+0x2f4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00d      	beq.n	80043dc <HAL_GPIO_Init+0x1ec>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a49      	ldr	r2, [pc, #292]	@ (80044e8 <HAL_GPIO_Init+0x2f8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d007      	beq.n	80043d8 <HAL_GPIO_Init+0x1e8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a48      	ldr	r2, [pc, #288]	@ (80044ec <HAL_GPIO_Init+0x2fc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d101      	bne.n	80043d4 <HAL_GPIO_Init+0x1e4>
 80043d0:	2305      	movs	r3, #5
 80043d2:	e00a      	b.n	80043ea <HAL_GPIO_Init+0x1fa>
 80043d4:	2306      	movs	r3, #6
 80043d6:	e008      	b.n	80043ea <HAL_GPIO_Init+0x1fa>
 80043d8:	2304      	movs	r3, #4
 80043da:	e006      	b.n	80043ea <HAL_GPIO_Init+0x1fa>
 80043dc:	2303      	movs	r3, #3
 80043de:	e004      	b.n	80043ea <HAL_GPIO_Init+0x1fa>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e002      	b.n	80043ea <HAL_GPIO_Init+0x1fa>
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <HAL_GPIO_Init+0x1fa>
 80043e8:	2300      	movs	r3, #0
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	f002 0203 	and.w	r2, r2, #3
 80043f0:	0092      	lsls	r2, r2, #2
 80043f2:	4093      	lsls	r3, r2
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043fa:	4937      	ldr	r1, [pc, #220]	@ (80044d8 <HAL_GPIO_Init+0x2e8>)
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	089b      	lsrs	r3, r3, #2
 8004400:	3302      	adds	r3, #2
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004408:	4b39      	ldr	r3, [pc, #228]	@ (80044f0 <HAL_GPIO_Init+0x300>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	43db      	mvns	r3, r3
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4013      	ands	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800442c:	4a30      	ldr	r2, [pc, #192]	@ (80044f0 <HAL_GPIO_Init+0x300>)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004432:	4b2f      	ldr	r3, [pc, #188]	@ (80044f0 <HAL_GPIO_Init+0x300>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	43db      	mvns	r3, r3
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4013      	ands	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004456:	4a26      	ldr	r2, [pc, #152]	@ (80044f0 <HAL_GPIO_Init+0x300>)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800445c:	4b24      	ldr	r3, [pc, #144]	@ (80044f0 <HAL_GPIO_Init+0x300>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	43db      	mvns	r3, r3
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4013      	ands	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004480:	4a1b      	ldr	r2, [pc, #108]	@ (80044f0 <HAL_GPIO_Init+0x300>)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004486:	4b1a      	ldr	r3, [pc, #104]	@ (80044f0 <HAL_GPIO_Init+0x300>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	43db      	mvns	r3, r3
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4013      	ands	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044aa:	4a11      	ldr	r2, [pc, #68]	@ (80044f0 <HAL_GPIO_Init+0x300>)
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	3301      	adds	r3, #1
 80044b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	fa22 f303 	lsr.w	r3, r2, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f47f ae9d 	bne.w	8004200 <HAL_GPIO_Init+0x10>
  }
}
 80044c6:	bf00      	nop
 80044c8:	bf00      	nop
 80044ca:	371c      	adds	r7, #28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	40021000 	.word	0x40021000
 80044d8:	40010000 	.word	0x40010000
 80044dc:	48000400 	.word	0x48000400
 80044e0:	48000800 	.word	0x48000800
 80044e4:	48000c00 	.word	0x48000c00
 80044e8:	48001000 	.word	0x48001000
 80044ec:	48001400 	.word	0x48001400
 80044f0:	40010400 	.word	0x40010400

080044f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	807b      	strh	r3, [r7, #2]
 8004500:	4613      	mov	r3, r2
 8004502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004504:	787b      	ldrb	r3, [r7, #1]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800450a:	887a      	ldrh	r2, [r7, #2]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004510:	e002      	b.n	8004518 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004512:	887a      	ldrh	r2, [r7, #2]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d141      	bne.n	80045b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004532:	4b4b      	ldr	r3, [pc, #300]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800453a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800453e:	d131      	bne.n	80045a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004540:	4b47      	ldr	r3, [pc, #284]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004546:	4a46      	ldr	r2, [pc, #280]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004548:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800454c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004550:	4b43      	ldr	r3, [pc, #268]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004558:	4a41      	ldr	r2, [pc, #260]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800455a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800455e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004560:	4b40      	ldr	r3, [pc, #256]	@ (8004664 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2232      	movs	r2, #50	@ 0x32
 8004566:	fb02 f303 	mul.w	r3, r2, r3
 800456a:	4a3f      	ldr	r2, [pc, #252]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800456c:	fba2 2303 	umull	r2, r3, r2, r3
 8004570:	0c9b      	lsrs	r3, r3, #18
 8004572:	3301      	adds	r3, #1
 8004574:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004576:	e002      	b.n	800457e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3b01      	subs	r3, #1
 800457c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800457e:	4b38      	ldr	r3, [pc, #224]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800458a:	d102      	bne.n	8004592 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f2      	bne.n	8004578 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004592:	4b33      	ldr	r3, [pc, #204]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800459a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800459e:	d158      	bne.n	8004652 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e057      	b.n	8004654 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045aa:	4a2d      	ldr	r2, [pc, #180]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80045b4:	e04d      	b.n	8004652 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045bc:	d141      	bne.n	8004642 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045be:	4b28      	ldr	r3, [pc, #160]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ca:	d131      	bne.n	8004630 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045cc:	4b24      	ldr	r3, [pc, #144]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045d2:	4a23      	ldr	r2, [pc, #140]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045dc:	4b20      	ldr	r3, [pc, #128]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004664 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2232      	movs	r2, #50	@ 0x32
 80045f2:	fb02 f303 	mul.w	r3, r2, r3
 80045f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80045f8:	fba2 2303 	umull	r2, r3, r2, r3
 80045fc:	0c9b      	lsrs	r3, r3, #18
 80045fe:	3301      	adds	r3, #1
 8004600:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004602:	e002      	b.n	800460a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3b01      	subs	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800460a:	4b15      	ldr	r3, [pc, #84]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004616:	d102      	bne.n	800461e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f2      	bne.n	8004604 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800461e:	4b10      	ldr	r3, [pc, #64]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800462a:	d112      	bne.n	8004652 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e011      	b.n	8004654 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004630:	4b0b      	ldr	r3, [pc, #44]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004636:	4a0a      	ldr	r2, [pc, #40]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800463c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004640:	e007      	b.n	8004652 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004642:	4b07      	ldr	r3, [pc, #28]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800464a:	4a05      	ldr	r2, [pc, #20]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800464c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004650:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	40007000 	.word	0x40007000
 8004664:	20000078 	.word	0x20000078
 8004668:	431bde83 	.word	0x431bde83

0800466c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004670:	4b05      	ldr	r3, [pc, #20]	@ (8004688 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	4a04      	ldr	r2, [pc, #16]	@ (8004688 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800467a:	6093      	str	r3, [r2, #8]
}
 800467c:	bf00      	nop
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40007000 	.word	0x40007000

0800468c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e2fe      	b.n	8004c9c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d075      	beq.n	8004796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046aa:	4b97      	ldr	r3, [pc, #604]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 030c 	and.w	r3, r3, #12
 80046b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046b4:	4b94      	ldr	r3, [pc, #592]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f003 0303 	and.w	r3, r3, #3
 80046bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	2b0c      	cmp	r3, #12
 80046c2:	d102      	bne.n	80046ca <HAL_RCC_OscConfig+0x3e>
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d002      	beq.n	80046d0 <HAL_RCC_OscConfig+0x44>
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d10b      	bne.n	80046e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d0:	4b8d      	ldr	r3, [pc, #564]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d05b      	beq.n	8004794 <HAL_RCC_OscConfig+0x108>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d157      	bne.n	8004794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e2d9      	b.n	8004c9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046f0:	d106      	bne.n	8004700 <HAL_RCC_OscConfig+0x74>
 80046f2:	4b85      	ldr	r3, [pc, #532]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a84      	ldr	r2, [pc, #528]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 80046f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	e01d      	b.n	800473c <HAL_RCC_OscConfig+0xb0>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004708:	d10c      	bne.n	8004724 <HAL_RCC_OscConfig+0x98>
 800470a:	4b7f      	ldr	r3, [pc, #508]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a7e      	ldr	r2, [pc, #504]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 8004710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	4b7c      	ldr	r3, [pc, #496]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a7b      	ldr	r2, [pc, #492]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 800471c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	e00b      	b.n	800473c <HAL_RCC_OscConfig+0xb0>
 8004724:	4b78      	ldr	r3, [pc, #480]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a77      	ldr	r2, [pc, #476]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 800472a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	4b75      	ldr	r3, [pc, #468]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a74      	ldr	r2, [pc, #464]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 8004736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800473a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d013      	beq.n	800476c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004744:	f7ff fc42 	bl	8003fcc <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800474c:	f7ff fc3e 	bl	8003fcc <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b64      	cmp	r3, #100	@ 0x64
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e29e      	b.n	8004c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800475e:	4b6a      	ldr	r3, [pc, #424]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0xc0>
 800476a:	e014      	b.n	8004796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476c:	f7ff fc2e 	bl	8003fcc <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004774:	f7ff fc2a 	bl	8003fcc <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b64      	cmp	r3, #100	@ 0x64
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e28a      	b.n	8004c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004786:	4b60      	ldr	r3, [pc, #384]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1f0      	bne.n	8004774 <HAL_RCC_OscConfig+0xe8>
 8004792:	e000      	b.n	8004796 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d075      	beq.n	800488e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047a2:	4b59      	ldr	r3, [pc, #356]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
 80047aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047ac:	4b56      	ldr	r3, [pc, #344]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f003 0303 	and.w	r3, r3, #3
 80047b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	2b0c      	cmp	r3, #12
 80047ba:	d102      	bne.n	80047c2 <HAL_RCC_OscConfig+0x136>
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d002      	beq.n	80047c8 <HAL_RCC_OscConfig+0x13c>
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d11f      	bne.n	8004808 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047c8:	4b4f      	ldr	r3, [pc, #316]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <HAL_RCC_OscConfig+0x154>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e25d      	b.n	8004c9c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e0:	4b49      	ldr	r3, [pc, #292]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	061b      	lsls	r3, r3, #24
 80047ee:	4946      	ldr	r1, [pc, #280]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80047f4:	4b45      	ldr	r3, [pc, #276]	@ (800490c <HAL_RCC_OscConfig+0x280>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff fb9b 	bl	8003f34 <HAL_InitTick>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d043      	beq.n	800488c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e249      	b.n	8004c9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d023      	beq.n	8004858 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004810:	4b3d      	ldr	r3, [pc, #244]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a3c      	ldr	r2, [pc, #240]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 8004816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800481a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481c:	f7ff fbd6 	bl	8003fcc <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004824:	f7ff fbd2 	bl	8003fcc <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e232      	b.n	8004c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004836:	4b34      	ldr	r3, [pc, #208]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0f0      	beq.n	8004824 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004842:	4b31      	ldr	r3, [pc, #196]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	061b      	lsls	r3, r3, #24
 8004850:	492d      	ldr	r1, [pc, #180]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 8004852:	4313      	orrs	r3, r2
 8004854:	604b      	str	r3, [r1, #4]
 8004856:	e01a      	b.n	800488e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004858:	4b2b      	ldr	r3, [pc, #172]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a2a      	ldr	r2, [pc, #168]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 800485e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004864:	f7ff fbb2 	bl	8003fcc <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800486c:	f7ff fbae 	bl	8003fcc <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e20e      	b.n	8004c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800487e:	4b22      	ldr	r3, [pc, #136]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f0      	bne.n	800486c <HAL_RCC_OscConfig+0x1e0>
 800488a:	e000      	b.n	800488e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800488c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d041      	beq.n	800491e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d01c      	beq.n	80048dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048a2:	4b19      	ldr	r3, [pc, #100]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 80048a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048a8:	4a17      	ldr	r2, [pc, #92]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b2:	f7ff fb8b 	bl	8003fcc <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ba:	f7ff fb87 	bl	8003fcc <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e1e7      	b.n	8004c9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 80048ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0ef      	beq.n	80048ba <HAL_RCC_OscConfig+0x22e>
 80048da:	e020      	b.n	800491e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 80048de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048e2:	4a09      	ldr	r2, [pc, #36]	@ (8004908 <HAL_RCC_OscConfig+0x27c>)
 80048e4:	f023 0301 	bic.w	r3, r3, #1
 80048e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ec:	f7ff fb6e 	bl	8003fcc <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048f2:	e00d      	b.n	8004910 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f4:	f7ff fb6a 	bl	8003fcc <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d906      	bls.n	8004910 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e1ca      	b.n	8004c9c <HAL_RCC_OscConfig+0x610>
 8004906:	bf00      	nop
 8004908:	40021000 	.word	0x40021000
 800490c:	2000007c 	.word	0x2000007c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004910:	4b8c      	ldr	r3, [pc, #560]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 8004912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1ea      	bne.n	80048f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 80a6 	beq.w	8004a78 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800492c:	2300      	movs	r3, #0
 800492e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004930:	4b84      	ldr	r3, [pc, #528]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 8004932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_RCC_OscConfig+0x2b4>
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <HAL_RCC_OscConfig+0x2b6>
 8004940:	2300      	movs	r3, #0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00d      	beq.n	8004962 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004946:	4b7f      	ldr	r3, [pc, #508]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 8004948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 800494c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004950:	6593      	str	r3, [r2, #88]	@ 0x58
 8004952:	4b7c      	ldr	r3, [pc, #496]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 8004954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800495e:	2301      	movs	r3, #1
 8004960:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004962:	4b79      	ldr	r3, [pc, #484]	@ (8004b48 <HAL_RCC_OscConfig+0x4bc>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800496a:	2b00      	cmp	r3, #0
 800496c:	d118      	bne.n	80049a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800496e:	4b76      	ldr	r3, [pc, #472]	@ (8004b48 <HAL_RCC_OscConfig+0x4bc>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a75      	ldr	r2, [pc, #468]	@ (8004b48 <HAL_RCC_OscConfig+0x4bc>)
 8004974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800497a:	f7ff fb27 	bl	8003fcc <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004982:	f7ff fb23 	bl	8003fcc <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e183      	b.n	8004c9c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004994:	4b6c      	ldr	r3, [pc, #432]	@ (8004b48 <HAL_RCC_OscConfig+0x4bc>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f0      	beq.n	8004982 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d108      	bne.n	80049ba <HAL_RCC_OscConfig+0x32e>
 80049a8:	4b66      	ldr	r3, [pc, #408]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ae:	4a65      	ldr	r2, [pc, #404]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 80049b0:	f043 0301 	orr.w	r3, r3, #1
 80049b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049b8:	e024      	b.n	8004a04 <HAL_RCC_OscConfig+0x378>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2b05      	cmp	r3, #5
 80049c0:	d110      	bne.n	80049e4 <HAL_RCC_OscConfig+0x358>
 80049c2:	4b60      	ldr	r3, [pc, #384]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c8:	4a5e      	ldr	r2, [pc, #376]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 80049ca:	f043 0304 	orr.w	r3, r3, #4
 80049ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049d2:	4b5c      	ldr	r3, [pc, #368]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d8:	4a5a      	ldr	r2, [pc, #360]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049e2:	e00f      	b.n	8004a04 <HAL_RCC_OscConfig+0x378>
 80049e4:	4b57      	ldr	r3, [pc, #348]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ea:	4a56      	ldr	r2, [pc, #344]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 80049ec:	f023 0301 	bic.w	r3, r3, #1
 80049f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049f4:	4b53      	ldr	r3, [pc, #332]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fa:	4a52      	ldr	r2, [pc, #328]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 80049fc:	f023 0304 	bic.w	r3, r3, #4
 8004a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d016      	beq.n	8004a3a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0c:	f7ff fade 	bl	8003fcc <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a12:	e00a      	b.n	8004a2a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a14:	f7ff fada 	bl	8003fcc <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e138      	b.n	8004c9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a2a:	4b46      	ldr	r3, [pc, #280]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 8004a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0ed      	beq.n	8004a14 <HAL_RCC_OscConfig+0x388>
 8004a38:	e015      	b.n	8004a66 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3a:	f7ff fac7 	bl	8003fcc <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a40:	e00a      	b.n	8004a58 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a42:	f7ff fac3 	bl	8003fcc <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e121      	b.n	8004c9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a58:	4b3a      	ldr	r3, [pc, #232]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1ed      	bne.n	8004a42 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a66:	7ffb      	ldrb	r3, [r7, #31]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d105      	bne.n	8004a78 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a6c:	4b35      	ldr	r3, [pc, #212]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 8004a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a70:	4a34      	ldr	r2, [pc, #208]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 8004a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a76:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d03c      	beq.n	8004afe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01c      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 8004a8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a92:	4a2c      	ldr	r2, [pc, #176]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 8004a94:	f043 0301 	orr.w	r3, r3, #1
 8004a98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9c:	f7ff fa96 	bl	8003fcc <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aa4:	f7ff fa92 	bl	8003fcc <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e0f2      	b.n	8004c9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ab6:	4b23      	ldr	r3, [pc, #140]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 8004ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0ef      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x418>
 8004ac4:	e01b      	b.n	8004afe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 8004ac8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004acc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 8004ace:	f023 0301 	bic.w	r3, r3, #1
 8004ad2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad6:	f7ff fa79 	bl	8003fcc <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ade:	f7ff fa75 	bl	8003fcc <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e0d5      	b.n	8004c9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004af0:	4b14      	ldr	r3, [pc, #80]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 8004af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1ef      	bne.n	8004ade <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 80c9 	beq.w	8004c9a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b08:	4b0e      	ldr	r3, [pc, #56]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 030c 	and.w	r3, r3, #12
 8004b10:	2b0c      	cmp	r3, #12
 8004b12:	f000 8083 	beq.w	8004c1c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d15e      	bne.n	8004bdc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b1e:	4b09      	ldr	r3, [pc, #36]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a08      	ldr	r2, [pc, #32]	@ (8004b44 <HAL_RCC_OscConfig+0x4b8>)
 8004b24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2a:	f7ff fa4f 	bl	8003fcc <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b30:	e00c      	b.n	8004b4c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b32:	f7ff fa4b 	bl	8003fcc <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d905      	bls.n	8004b4c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e0ab      	b.n	8004c9c <HAL_RCC_OscConfig+0x610>
 8004b44:	40021000 	.word	0x40021000
 8004b48:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b4c:	4b55      	ldr	r3, [pc, #340]	@ (8004ca4 <HAL_RCC_OscConfig+0x618>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1ec      	bne.n	8004b32 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b58:	4b52      	ldr	r3, [pc, #328]	@ (8004ca4 <HAL_RCC_OscConfig+0x618>)
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	4b52      	ldr	r3, [pc, #328]	@ (8004ca8 <HAL_RCC_OscConfig+0x61c>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6a11      	ldr	r1, [r2, #32]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b68:	3a01      	subs	r2, #1
 8004b6a:	0112      	lsls	r2, r2, #4
 8004b6c:	4311      	orrs	r1, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004b72:	0212      	lsls	r2, r2, #8
 8004b74:	4311      	orrs	r1, r2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b7a:	0852      	lsrs	r2, r2, #1
 8004b7c:	3a01      	subs	r2, #1
 8004b7e:	0552      	lsls	r2, r2, #21
 8004b80:	4311      	orrs	r1, r2
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b86:	0852      	lsrs	r2, r2, #1
 8004b88:	3a01      	subs	r2, #1
 8004b8a:	0652      	lsls	r2, r2, #25
 8004b8c:	4311      	orrs	r1, r2
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b92:	06d2      	lsls	r2, r2, #27
 8004b94:	430a      	orrs	r2, r1
 8004b96:	4943      	ldr	r1, [pc, #268]	@ (8004ca4 <HAL_RCC_OscConfig+0x618>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b9c:	4b41      	ldr	r3, [pc, #260]	@ (8004ca4 <HAL_RCC_OscConfig+0x618>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a40      	ldr	r2, [pc, #256]	@ (8004ca4 <HAL_RCC_OscConfig+0x618>)
 8004ba2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ba6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca4 <HAL_RCC_OscConfig+0x618>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	4a3d      	ldr	r2, [pc, #244]	@ (8004ca4 <HAL_RCC_OscConfig+0x618>)
 8004bae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bb2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7ff fa0a 	bl	8003fcc <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7ff fa06 	bl	8003fcc <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e066      	b.n	8004c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bce:	4b35      	ldr	r3, [pc, #212]	@ (8004ca4 <HAL_RCC_OscConfig+0x618>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCC_OscConfig+0x530>
 8004bda:	e05e      	b.n	8004c9a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bdc:	4b31      	ldr	r3, [pc, #196]	@ (8004ca4 <HAL_RCC_OscConfig+0x618>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a30      	ldr	r2, [pc, #192]	@ (8004ca4 <HAL_RCC_OscConfig+0x618>)
 8004be2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7ff f9f0 	bl	8003fcc <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf0:	f7ff f9ec 	bl	8003fcc <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e04c      	b.n	8004c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c02:	4b28      	ldr	r3, [pc, #160]	@ (8004ca4 <HAL_RCC_OscConfig+0x618>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f0      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004c0e:	4b25      	ldr	r3, [pc, #148]	@ (8004ca4 <HAL_RCC_OscConfig+0x618>)
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	4924      	ldr	r1, [pc, #144]	@ (8004ca4 <HAL_RCC_OscConfig+0x618>)
 8004c14:	4b25      	ldr	r3, [pc, #148]	@ (8004cac <HAL_RCC_OscConfig+0x620>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	60cb      	str	r3, [r1, #12]
 8004c1a:	e03e      	b.n	8004c9a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e039      	b.n	8004c9c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004c28:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca4 <HAL_RCC_OscConfig+0x618>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f003 0203 	and.w	r2, r3, #3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d12c      	bne.n	8004c96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c46:	3b01      	subs	r3, #1
 8004c48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d123      	bne.n	8004c96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d11b      	bne.n	8004c96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d113      	bne.n	8004c96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c78:	085b      	lsrs	r3, r3, #1
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d109      	bne.n	8004c96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c8c:	085b      	lsrs	r3, r3, #1
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d001      	beq.n	8004c9a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3720      	adds	r7, #32
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	019f800c 	.word	0x019f800c
 8004cac:	feeefffc 	.word	0xfeeefffc

08004cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e11e      	b.n	8004f06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc8:	4b91      	ldr	r3, [pc, #580]	@ (8004f10 <HAL_RCC_ClockConfig+0x260>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d910      	bls.n	8004cf8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd6:	4b8e      	ldr	r3, [pc, #568]	@ (8004f10 <HAL_RCC_ClockConfig+0x260>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f023 020f 	bic.w	r2, r3, #15
 8004cde:	498c      	ldr	r1, [pc, #560]	@ (8004f10 <HAL_RCC_ClockConfig+0x260>)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce6:	4b8a      	ldr	r3, [pc, #552]	@ (8004f10 <HAL_RCC_ClockConfig+0x260>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e106      	b.n	8004f06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d073      	beq.n	8004dec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d129      	bne.n	8004d60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d0c:	4b81      	ldr	r3, [pc, #516]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0f4      	b.n	8004f06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004d1c:	f000 f99e 	bl	800505c <RCC_GetSysClockFreqFromPLLSource>
 8004d20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	4a7c      	ldr	r2, [pc, #496]	@ (8004f18 <HAL_RCC_ClockConfig+0x268>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d93f      	bls.n	8004daa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d2a:	4b7a      	ldr	r3, [pc, #488]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d009      	beq.n	8004d4a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d033      	beq.n	8004daa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d12f      	bne.n	8004daa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d4a:	4b72      	ldr	r3, [pc, #456]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d52:	4a70      	ldr	r2, [pc, #448]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d5a:	2380      	movs	r3, #128	@ 0x80
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	e024      	b.n	8004daa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d107      	bne.n	8004d78 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d68:	4b6a      	ldr	r3, [pc, #424]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d109      	bne.n	8004d88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e0c6      	b.n	8004f06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d78:	4b66      	ldr	r3, [pc, #408]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e0be      	b.n	8004f06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004d88:	f000 f8ce 	bl	8004f28 <HAL_RCC_GetSysClockFreq>
 8004d8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	4a61      	ldr	r2, [pc, #388]	@ (8004f18 <HAL_RCC_ClockConfig+0x268>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d909      	bls.n	8004daa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d96:	4b5f      	ldr	r3, [pc, #380]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d9e:	4a5d      	ldr	r2, [pc, #372]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004da6:	2380      	movs	r3, #128	@ 0x80
 8004da8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004daa:	4b5a      	ldr	r3, [pc, #360]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f023 0203 	bic.w	r2, r3, #3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	4957      	ldr	r1, [pc, #348]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dbc:	f7ff f906 	bl	8003fcc <HAL_GetTick>
 8004dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc2:	e00a      	b.n	8004dda <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dc4:	f7ff f902 	bl	8003fcc <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e095      	b.n	8004f06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dda:	4b4e      	ldr	r3, [pc, #312]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 020c 	and.w	r2, r3, #12
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d1eb      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d023      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e04:	4b43      	ldr	r3, [pc, #268]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	4a42      	ldr	r2, [pc, #264]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004e0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0308 	and.w	r3, r3, #8
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004e1c:	4b3d      	ldr	r3, [pc, #244]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e24:	4a3b      	ldr	r2, [pc, #236]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004e26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e2c:	4b39      	ldr	r3, [pc, #228]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	4936      	ldr	r1, [pc, #216]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	608b      	str	r3, [r1, #8]
 8004e3e:	e008      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2b80      	cmp	r3, #128	@ 0x80
 8004e44:	d105      	bne.n	8004e52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e46:	4b33      	ldr	r3, [pc, #204]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	4a32      	ldr	r2, [pc, #200]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004e4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e52:	4b2f      	ldr	r3, [pc, #188]	@ (8004f10 <HAL_RCC_ClockConfig+0x260>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d21d      	bcs.n	8004e9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e60:	4b2b      	ldr	r3, [pc, #172]	@ (8004f10 <HAL_RCC_ClockConfig+0x260>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f023 020f 	bic.w	r2, r3, #15
 8004e68:	4929      	ldr	r1, [pc, #164]	@ (8004f10 <HAL_RCC_ClockConfig+0x260>)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e70:	f7ff f8ac 	bl	8003fcc <HAL_GetTick>
 8004e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e76:	e00a      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e78:	f7ff f8a8 	bl	8003fcc <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e03b      	b.n	8004f06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8e:	4b20      	ldr	r3, [pc, #128]	@ (8004f10 <HAL_RCC_ClockConfig+0x260>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d1ed      	bne.n	8004e78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	4917      	ldr	r1, [pc, #92]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d009      	beq.n	8004eda <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ec6:	4b13      	ldr	r3, [pc, #76]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	490f      	ldr	r1, [pc, #60]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004eda:	f000 f825 	bl	8004f28 <HAL_RCC_GetSysClockFreq>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8004f14 <HAL_RCC_ClockConfig+0x264>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	091b      	lsrs	r3, r3, #4
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	490c      	ldr	r1, [pc, #48]	@ (8004f1c <HAL_RCC_ClockConfig+0x26c>)
 8004eec:	5ccb      	ldrb	r3, [r1, r3]
 8004eee:	f003 031f 	and.w	r3, r3, #31
 8004ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8004f20 <HAL_RCC_ClockConfig+0x270>)
 8004ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004efa:	4b0a      	ldr	r3, [pc, #40]	@ (8004f24 <HAL_RCC_ClockConfig+0x274>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff f818 	bl	8003f34 <HAL_InitTick>
 8004f04:	4603      	mov	r3, r0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40022000 	.word	0x40022000
 8004f14:	40021000 	.word	0x40021000
 8004f18:	04c4b400 	.word	0x04c4b400
 8004f1c:	08009598 	.word	0x08009598
 8004f20:	20000078 	.word	0x20000078
 8004f24:	2000007c 	.word	0x2000007c

08004f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 030c 	and.w	r3, r3, #12
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d102      	bne.n	8004f40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8004fe4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	e047      	b.n	8004fd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f40:	4b27      	ldr	r3, [pc, #156]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f003 030c 	and.w	r3, r3, #12
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d102      	bne.n	8004f52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f4c:	4b26      	ldr	r3, [pc, #152]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f4e:	613b      	str	r3, [r7, #16]
 8004f50:	e03e      	b.n	8004fd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004f52:	4b23      	ldr	r3, [pc, #140]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
 8004f5a:	2b0c      	cmp	r3, #12
 8004f5c:	d136      	bne.n	8004fcc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f5e:	4b20      	ldr	r3, [pc, #128]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f68:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	091b      	lsrs	r3, r3, #4
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	3301      	adds	r3, #1
 8004f74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d10c      	bne.n	8004f96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f84:	4a16      	ldr	r2, [pc, #88]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f86:	68d2      	ldr	r2, [r2, #12]
 8004f88:	0a12      	lsrs	r2, r2, #8
 8004f8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f8e:	fb02 f303 	mul.w	r3, r2, r3
 8004f92:	617b      	str	r3, [r7, #20]
      break;
 8004f94:	e00c      	b.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f96:	4a13      	ldr	r2, [pc, #76]	@ (8004fe4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9e:	4a10      	ldr	r2, [pc, #64]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fa0:	68d2      	ldr	r2, [r2, #12]
 8004fa2:	0a12      	lsrs	r2, r2, #8
 8004fa4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fa8:	fb02 f303 	mul.w	r3, r2, r3
 8004fac:	617b      	str	r3, [r7, #20]
      break;
 8004fae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	0e5b      	lsrs	r3, r3, #25
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	3301      	adds	r3, #1
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	e001      	b.n	8004fd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004fd0:	693b      	ldr	r3, [r7, #16]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	00f42400 	.word	0x00f42400
 8004fe8:	007a1200 	.word	0x007a1200

08004fec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ff0:	4b03      	ldr	r3, [pc, #12]	@ (8005000 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	20000078 	.word	0x20000078

08005004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005008:	f7ff fff0 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 800500c:	4602      	mov	r2, r0
 800500e:	4b06      	ldr	r3, [pc, #24]	@ (8005028 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	0a1b      	lsrs	r3, r3, #8
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	4904      	ldr	r1, [pc, #16]	@ (800502c <HAL_RCC_GetPCLK1Freq+0x28>)
 800501a:	5ccb      	ldrb	r3, [r1, r3]
 800501c:	f003 031f 	and.w	r3, r3, #31
 8005020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005024:	4618      	mov	r0, r3
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40021000 	.word	0x40021000
 800502c:	080095a8 	.word	0x080095a8

08005030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005034:	f7ff ffda 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8005038:	4602      	mov	r2, r0
 800503a:	4b06      	ldr	r3, [pc, #24]	@ (8005054 <HAL_RCC_GetPCLK2Freq+0x24>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	0adb      	lsrs	r3, r3, #11
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	4904      	ldr	r1, [pc, #16]	@ (8005058 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005046:	5ccb      	ldrb	r3, [r1, r3]
 8005048:	f003 031f 	and.w	r3, r3, #31
 800504c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005050:	4618      	mov	r0, r3
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40021000 	.word	0x40021000
 8005058:	080095a8 	.word	0x080095a8

0800505c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005062:	4b1e      	ldr	r3, [pc, #120]	@ (80050dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800506c:	4b1b      	ldr	r3, [pc, #108]	@ (80050dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	091b      	lsrs	r3, r3, #4
 8005072:	f003 030f 	and.w	r3, r3, #15
 8005076:	3301      	adds	r3, #1
 8005078:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b03      	cmp	r3, #3
 800507e:	d10c      	bne.n	800509a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005080:	4a17      	ldr	r2, [pc, #92]	@ (80050e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	fbb2 f3f3 	udiv	r3, r2, r3
 8005088:	4a14      	ldr	r2, [pc, #80]	@ (80050dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800508a:	68d2      	ldr	r2, [r2, #12]
 800508c:	0a12      	lsrs	r2, r2, #8
 800508e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005092:	fb02 f303 	mul.w	r3, r2, r3
 8005096:	617b      	str	r3, [r7, #20]
    break;
 8005098:	e00c      	b.n	80050b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800509a:	4a12      	ldr	r2, [pc, #72]	@ (80050e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a2:	4a0e      	ldr	r2, [pc, #56]	@ (80050dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050a4:	68d2      	ldr	r2, [r2, #12]
 80050a6:	0a12      	lsrs	r2, r2, #8
 80050a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050ac:	fb02 f303 	mul.w	r3, r2, r3
 80050b0:	617b      	str	r3, [r7, #20]
    break;
 80050b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050b4:	4b09      	ldr	r3, [pc, #36]	@ (80050dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	0e5b      	lsrs	r3, r3, #25
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	3301      	adds	r3, #1
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80050ce:	687b      	ldr	r3, [r7, #4]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	371c      	adds	r7, #28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	40021000 	.word	0x40021000
 80050e0:	007a1200 	.word	0x007a1200
 80050e4:	00f42400 	.word	0x00f42400

080050e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050f0:	2300      	movs	r3, #0
 80050f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050f4:	2300      	movs	r3, #0
 80050f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 8098 	beq.w	8005236 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005106:	2300      	movs	r3, #0
 8005108:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800510a:	4b43      	ldr	r3, [pc, #268]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800510c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800510e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10d      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005116:	4b40      	ldr	r3, [pc, #256]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800511a:	4a3f      	ldr	r2, [pc, #252]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800511c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005120:	6593      	str	r3, [r2, #88]	@ 0x58
 8005122:	4b3d      	ldr	r3, [pc, #244]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800512a:	60bb      	str	r3, [r7, #8]
 800512c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800512e:	2301      	movs	r3, #1
 8005130:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005132:	4b3a      	ldr	r3, [pc, #232]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a39      	ldr	r2, [pc, #228]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800513c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800513e:	f7fe ff45 	bl	8003fcc <HAL_GetTick>
 8005142:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005144:	e009      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005146:	f7fe ff41 	bl	8003fcc <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d902      	bls.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	74fb      	strb	r3, [r7, #19]
        break;
 8005158:	e005      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800515a:	4b30      	ldr	r3, [pc, #192]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0ef      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005166:	7cfb      	ldrb	r3, [r7, #19]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d159      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800516c:	4b2a      	ldr	r3, [pc, #168]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800516e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005176:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d01e      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	429a      	cmp	r2, r3
 8005186:	d019      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005188:	4b23      	ldr	r3, [pc, #140]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800518a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005192:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005194:	4b20      	ldr	r3, [pc, #128]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800519a:	4a1f      	ldr	r2, [pc, #124]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800519c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051b4:	4a18      	ldr	r2, [pc, #96]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d016      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c6:	f7fe ff01 	bl	8003fcc <HAL_GetTick>
 80051ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051cc:	e00b      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ce:	f7fe fefd 	bl	8003fcc <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051dc:	4293      	cmp	r3, r2
 80051de:	d902      	bls.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	74fb      	strb	r3, [r7, #19]
            break;
 80051e4:	e006      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0ec      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80051f4:	7cfb      	ldrb	r3, [r7, #19]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10b      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051fa:	4b07      	ldr	r3, [pc, #28]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005200:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005208:	4903      	ldr	r1, [pc, #12]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005210:	e008      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005212:	7cfb      	ldrb	r3, [r7, #19]
 8005214:	74bb      	strb	r3, [r7, #18]
 8005216:	e005      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005218:	40021000 	.word	0x40021000
 800521c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005220:	7cfb      	ldrb	r3, [r7, #19]
 8005222:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005224:	7c7b      	ldrb	r3, [r7, #17]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d105      	bne.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800522a:	4ba7      	ldr	r3, [pc, #668]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800522c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800522e:	4aa6      	ldr	r2, [pc, #664]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005230:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005234:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005242:	4ba1      	ldr	r3, [pc, #644]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005248:	f023 0203 	bic.w	r2, r3, #3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	499d      	ldr	r1, [pc, #628]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005264:	4b98      	ldr	r3, [pc, #608]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800526a:	f023 020c 	bic.w	r2, r3, #12
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	4995      	ldr	r1, [pc, #596]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005286:	4b90      	ldr	r3, [pc, #576]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	498c      	ldr	r1, [pc, #560]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005296:	4313      	orrs	r3, r2
 8005298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052a8:	4b87      	ldr	r3, [pc, #540]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	4984      	ldr	r1, [pc, #528]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0310 	and.w	r3, r3, #16
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052ca:	4b7f      	ldr	r3, [pc, #508]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	497b      	ldr	r1, [pc, #492]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0320 	and.w	r3, r3, #32
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052ec:	4b76      	ldr	r3, [pc, #472]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	4973      	ldr	r1, [pc, #460]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800530e:	4b6e      	ldr	r3, [pc, #440]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005314:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	496a      	ldr	r1, [pc, #424]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800531e:	4313      	orrs	r3, r2
 8005320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00a      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005330:	4b65      	ldr	r3, [pc, #404]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005336:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	4962      	ldr	r1, [pc, #392]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005352:	4b5d      	ldr	r3, [pc, #372]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005358:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005360:	4959      	ldr	r1, [pc, #356]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005374:	4b54      	ldr	r3, [pc, #336]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005376:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800537a:	f023 0203 	bic.w	r2, r3, #3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005382:	4951      	ldr	r1, [pc, #324]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005396:	4b4c      	ldr	r3, [pc, #304]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a4:	4948      	ldr	r1, [pc, #288]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d015      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053b8:	4b43      	ldr	r3, [pc, #268]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c6:	4940      	ldr	r1, [pc, #256]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053d6:	d105      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053d8:	4b3b      	ldr	r3, [pc, #236]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	4a3a      	ldr	r2, [pc, #232]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053e2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d015      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053f0:	4b35      	ldr	r3, [pc, #212]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053fe:	4932      	ldr	r1, [pc, #200]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800540a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800540e:	d105      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005410:	4b2d      	ldr	r3, [pc, #180]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	4a2c      	ldr	r2, [pc, #176]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005416:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800541a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d015      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005428:	4b27      	ldr	r3, [pc, #156]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800542a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800542e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005436:	4924      	ldr	r1, [pc, #144]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005442:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005446:	d105      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005448:	4b1f      	ldr	r3, [pc, #124]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	4a1e      	ldr	r2, [pc, #120]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800544e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005452:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d015      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005460:	4b19      	ldr	r3, [pc, #100]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005466:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800546e:	4916      	ldr	r1, [pc, #88]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800547a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800547e:	d105      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005480:	4b11      	ldr	r3, [pc, #68]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	4a10      	ldr	r2, [pc, #64]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005486:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800548a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d019      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005498:	4b0b      	ldr	r3, [pc, #44]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800549a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a6:	4908      	ldr	r1, [pc, #32]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054b6:	d109      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054b8:	4b03      	ldr	r3, [pc, #12]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	4a02      	ldr	r2, [pc, #8]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054c2:	60d3      	str	r3, [r2, #12]
 80054c4:	e002      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80054c6:	bf00      	nop
 80054c8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d015      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80054d8:	4b29      	ldr	r3, [pc, #164]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e6:	4926      	ldr	r1, [pc, #152]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054f6:	d105      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80054f8:	4b21      	ldr	r3, [pc, #132]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	4a20      	ldr	r2, [pc, #128]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005502:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d015      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005510:	4b1b      	ldr	r3, [pc, #108]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005516:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800551e:	4918      	ldr	r1, [pc, #96]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800552a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800552e:	d105      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005530:	4b13      	ldr	r3, [pc, #76]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	4a12      	ldr	r2, [pc, #72]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005536:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800553a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d015      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005548:	4b0d      	ldr	r3, [pc, #52]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800554a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800554e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005556:	490a      	ldr	r1, [pc, #40]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005562:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005566:	d105      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005568:	4b05      	ldr	r3, [pc, #20]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	4a04      	ldr	r2, [pc, #16]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800556e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005572:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005574:	7cbb      	ldrb	r3, [r7, #18]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	40021000 	.word	0x40021000

08005584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e049      	b.n	800562a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fe fac2 	bl	8003b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3304      	adds	r3, #4
 80055c0:	4619      	mov	r1, r3
 80055c2:	4610      	mov	r0, r2
 80055c4:	f000 fd96 	bl	80060f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b01      	cmp	r3, #1
 8005646:	d001      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e054      	b.n	80056f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a26      	ldr	r2, [pc, #152]	@ (8005704 <HAL_TIM_Base_Start_IT+0xd0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d022      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005676:	d01d      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a22      	ldr	r2, [pc, #136]	@ (8005708 <HAL_TIM_Base_Start_IT+0xd4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d018      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a21      	ldr	r2, [pc, #132]	@ (800570c <HAL_TIM_Base_Start_IT+0xd8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d013      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a1f      	ldr	r2, [pc, #124]	@ (8005710 <HAL_TIM_Base_Start_IT+0xdc>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00e      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a1e      	ldr	r2, [pc, #120]	@ (8005714 <HAL_TIM_Base_Start_IT+0xe0>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d009      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005718 <HAL_TIM_Base_Start_IT+0xe4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d004      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1b      	ldr	r2, [pc, #108]	@ (800571c <HAL_TIM_Base_Start_IT+0xe8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d115      	bne.n	80056e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	4b19      	ldr	r3, [pc, #100]	@ (8005720 <HAL_TIM_Base_Start_IT+0xec>)
 80056bc:	4013      	ands	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b06      	cmp	r3, #6
 80056c4:	d015      	beq.n	80056f2 <HAL_TIM_Base_Start_IT+0xbe>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056cc:	d011      	beq.n	80056f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f042 0201 	orr.w	r2, r2, #1
 80056dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056de:	e008      	b.n	80056f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	e000      	b.n	80056f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40012c00 	.word	0x40012c00
 8005708:	40000400 	.word	0x40000400
 800570c:	40000800 	.word	0x40000800
 8005710:	40000c00 	.word	0x40000c00
 8005714:	40013400 	.word	0x40013400
 8005718:	40014000 	.word	0x40014000
 800571c:	40015000 	.word	0x40015000
 8005720:	00010007 	.word	0x00010007

08005724 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e049      	b.n	80057ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f841 	bl	80057d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3304      	adds	r3, #4
 8005760:	4619      	mov	r1, r3
 8005762:	4610      	mov	r0, r2
 8005764:	f000 fcc6 	bl	80060f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
	...

080057e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d109      	bne.n	800580c <HAL_TIM_PWM_Start+0x24>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b01      	cmp	r3, #1
 8005802:	bf14      	ite	ne
 8005804:	2301      	movne	r3, #1
 8005806:	2300      	moveq	r3, #0
 8005808:	b2db      	uxtb	r3, r3
 800580a:	e03c      	b.n	8005886 <HAL_TIM_PWM_Start+0x9e>
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b04      	cmp	r3, #4
 8005810:	d109      	bne.n	8005826 <HAL_TIM_PWM_Start+0x3e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b01      	cmp	r3, #1
 800581c:	bf14      	ite	ne
 800581e:	2301      	movne	r3, #1
 8005820:	2300      	moveq	r3, #0
 8005822:	b2db      	uxtb	r3, r3
 8005824:	e02f      	b.n	8005886 <HAL_TIM_PWM_Start+0x9e>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b08      	cmp	r3, #8
 800582a:	d109      	bne.n	8005840 <HAL_TIM_PWM_Start+0x58>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b01      	cmp	r3, #1
 8005836:	bf14      	ite	ne
 8005838:	2301      	movne	r3, #1
 800583a:	2300      	moveq	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	e022      	b.n	8005886 <HAL_TIM_PWM_Start+0x9e>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b0c      	cmp	r3, #12
 8005844:	d109      	bne.n	800585a <HAL_TIM_PWM_Start+0x72>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b01      	cmp	r3, #1
 8005850:	bf14      	ite	ne
 8005852:	2301      	movne	r3, #1
 8005854:	2300      	moveq	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	e015      	b.n	8005886 <HAL_TIM_PWM_Start+0x9e>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b10      	cmp	r3, #16
 800585e:	d109      	bne.n	8005874 <HAL_TIM_PWM_Start+0x8c>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	bf14      	ite	ne
 800586c:	2301      	movne	r3, #1
 800586e:	2300      	moveq	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	e008      	b.n	8005886 <HAL_TIM_PWM_Start+0x9e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b01      	cmp	r3, #1
 800587e:	bf14      	ite	ne
 8005880:	2301      	movne	r3, #1
 8005882:	2300      	moveq	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e0a6      	b.n	80059dc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d104      	bne.n	800589e <HAL_TIM_PWM_Start+0xb6>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800589c:	e023      	b.n	80058e6 <HAL_TIM_PWM_Start+0xfe>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d104      	bne.n	80058ae <HAL_TIM_PWM_Start+0xc6>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058ac:	e01b      	b.n	80058e6 <HAL_TIM_PWM_Start+0xfe>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d104      	bne.n	80058be <HAL_TIM_PWM_Start+0xd6>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058bc:	e013      	b.n	80058e6 <HAL_TIM_PWM_Start+0xfe>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b0c      	cmp	r3, #12
 80058c2:	d104      	bne.n	80058ce <HAL_TIM_PWM_Start+0xe6>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058cc:	e00b      	b.n	80058e6 <HAL_TIM_PWM_Start+0xfe>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b10      	cmp	r3, #16
 80058d2:	d104      	bne.n	80058de <HAL_TIM_PWM_Start+0xf6>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058dc:	e003      	b.n	80058e6 <HAL_TIM_PWM_Start+0xfe>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2202      	movs	r2, #2
 80058e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2201      	movs	r2, #1
 80058ec:	6839      	ldr	r1, [r7, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f001 f87a 	bl	80069e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a3a      	ldr	r2, [pc, #232]	@ (80059e4 <HAL_TIM_PWM_Start+0x1fc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d018      	beq.n	8005930 <HAL_TIM_PWM_Start+0x148>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a39      	ldr	r2, [pc, #228]	@ (80059e8 <HAL_TIM_PWM_Start+0x200>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d013      	beq.n	8005930 <HAL_TIM_PWM_Start+0x148>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a37      	ldr	r2, [pc, #220]	@ (80059ec <HAL_TIM_PWM_Start+0x204>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d00e      	beq.n	8005930 <HAL_TIM_PWM_Start+0x148>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a36      	ldr	r2, [pc, #216]	@ (80059f0 <HAL_TIM_PWM_Start+0x208>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d009      	beq.n	8005930 <HAL_TIM_PWM_Start+0x148>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a34      	ldr	r2, [pc, #208]	@ (80059f4 <HAL_TIM_PWM_Start+0x20c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d004      	beq.n	8005930 <HAL_TIM_PWM_Start+0x148>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a33      	ldr	r2, [pc, #204]	@ (80059f8 <HAL_TIM_PWM_Start+0x210>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d101      	bne.n	8005934 <HAL_TIM_PWM_Start+0x14c>
 8005930:	2301      	movs	r3, #1
 8005932:	e000      	b.n	8005936 <HAL_TIM_PWM_Start+0x14e>
 8005934:	2300      	movs	r3, #0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d007      	beq.n	800594a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005948:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a25      	ldr	r2, [pc, #148]	@ (80059e4 <HAL_TIM_PWM_Start+0x1fc>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d022      	beq.n	800599a <HAL_TIM_PWM_Start+0x1b2>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800595c:	d01d      	beq.n	800599a <HAL_TIM_PWM_Start+0x1b2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a26      	ldr	r2, [pc, #152]	@ (80059fc <HAL_TIM_PWM_Start+0x214>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d018      	beq.n	800599a <HAL_TIM_PWM_Start+0x1b2>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a24      	ldr	r2, [pc, #144]	@ (8005a00 <HAL_TIM_PWM_Start+0x218>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d013      	beq.n	800599a <HAL_TIM_PWM_Start+0x1b2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a23      	ldr	r2, [pc, #140]	@ (8005a04 <HAL_TIM_PWM_Start+0x21c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00e      	beq.n	800599a <HAL_TIM_PWM_Start+0x1b2>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a19      	ldr	r2, [pc, #100]	@ (80059e8 <HAL_TIM_PWM_Start+0x200>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d009      	beq.n	800599a <HAL_TIM_PWM_Start+0x1b2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a18      	ldr	r2, [pc, #96]	@ (80059ec <HAL_TIM_PWM_Start+0x204>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d004      	beq.n	800599a <HAL_TIM_PWM_Start+0x1b2>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a18      	ldr	r2, [pc, #96]	@ (80059f8 <HAL_TIM_PWM_Start+0x210>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d115      	bne.n	80059c6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	4b19      	ldr	r3, [pc, #100]	@ (8005a08 <HAL_TIM_PWM_Start+0x220>)
 80059a2:	4013      	ands	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b06      	cmp	r3, #6
 80059aa:	d015      	beq.n	80059d8 <HAL_TIM_PWM_Start+0x1f0>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059b2:	d011      	beq.n	80059d8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c4:	e008      	b.n	80059d8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0201 	orr.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	e000      	b.n	80059da <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40012c00 	.word	0x40012c00
 80059e8:	40013400 	.word	0x40013400
 80059ec:	40014000 	.word	0x40014000
 80059f0:	40014400 	.word	0x40014400
 80059f4:	40014800 	.word	0x40014800
 80059f8:	40015000 	.word	0x40015000
 80059fc:	40000400 	.word	0x40000400
 8005a00:	40000800 	.word	0x40000800
 8005a04:	40000c00 	.word	0x40000c00
 8005a08:	00010007 	.word	0x00010007

08005a0c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e097      	b.n	8005b50 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d106      	bne.n	8005a3a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7fd ffa5 	bl	8003984 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6812      	ldr	r2, [r2, #0]
 8005a4c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005a50:	f023 0307 	bic.w	r3, r3, #7
 8005a54:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4610      	mov	r0, r2
 8005a62:	f000 fb47 	bl	80060f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a8e:	f023 0303 	bic.w	r3, r3, #3
 8005a92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005aac:	f023 030c 	bic.w	r3, r3, #12
 8005ab0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ab8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005abc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68da      	ldr	r2, [r3, #12]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	021b      	lsls	r3, r3, #8
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	011a      	lsls	r2, r3, #4
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	031b      	lsls	r3, r3, #12
 8005adc:	4313      	orrs	r3, r2
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005aea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005af2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	011b      	lsls	r3, r3, #4
 8005afe:	4313      	orrs	r3, r2
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d110      	bne.n	8005baa <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d102      	bne.n	8005b94 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b8e:	7b7b      	ldrb	r3, [r7, #13]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d001      	beq.n	8005b98 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e089      	b.n	8005cac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ba8:	e031      	b.n	8005c0e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d110      	bne.n	8005bd2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bb0:	7bbb      	ldrb	r3, [r7, #14]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d102      	bne.n	8005bbc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bb6:	7b3b      	ldrb	r3, [r7, #12]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d001      	beq.n	8005bc0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e075      	b.n	8005cac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bd0:	e01d      	b.n	8005c0e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d108      	bne.n	8005bea <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bd8:	7bbb      	ldrb	r3, [r7, #14]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d105      	bne.n	8005bea <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bde:	7b7b      	ldrb	r3, [r7, #13]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d102      	bne.n	8005bea <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005be4:	7b3b      	ldrb	r3, [r7, #12]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d001      	beq.n	8005bee <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e05e      	b.n	8005cac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2202      	movs	r2, #2
 8005c02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_TIM_Encoder_Start_IT+0xc4>
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d010      	beq.n	8005c3c <HAL_TIM_Encoder_Start_IT+0xe4>
 8005c1a:	e01f      	b.n	8005c5c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2201      	movs	r2, #1
 8005c22:	2100      	movs	r1, #0
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fedf 	bl	80069e8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0202 	orr.w	r2, r2, #2
 8005c38:	60da      	str	r2, [r3, #12]
      break;
 8005c3a:	e02e      	b.n	8005c9a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2201      	movs	r2, #1
 8005c42:	2104      	movs	r1, #4
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fecf 	bl	80069e8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f042 0204 	orr.w	r2, r2, #4
 8005c58:	60da      	str	r2, [r3, #12]
      break;
 8005c5a:	e01e      	b.n	8005c9a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2201      	movs	r2, #1
 8005c62:	2100      	movs	r1, #0
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 febf 	bl	80069e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	2104      	movs	r1, #4
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 feb8 	bl	80069e8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0202 	orr.w	r2, r2, #2
 8005c86:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0204 	orr.w	r2, r2, #4
 8005c96:	60da      	str	r2, [r3, #12]
      break;
 8005c98:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0201 	orr.w	r2, r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e0ff      	b.n	8005ed2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b14      	cmp	r3, #20
 8005cde:	f200 80f0 	bhi.w	8005ec2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce8:	08005d3d 	.word	0x08005d3d
 8005cec:	08005ec3 	.word	0x08005ec3
 8005cf0:	08005ec3 	.word	0x08005ec3
 8005cf4:	08005ec3 	.word	0x08005ec3
 8005cf8:	08005d7d 	.word	0x08005d7d
 8005cfc:	08005ec3 	.word	0x08005ec3
 8005d00:	08005ec3 	.word	0x08005ec3
 8005d04:	08005ec3 	.word	0x08005ec3
 8005d08:	08005dbf 	.word	0x08005dbf
 8005d0c:	08005ec3 	.word	0x08005ec3
 8005d10:	08005ec3 	.word	0x08005ec3
 8005d14:	08005ec3 	.word	0x08005ec3
 8005d18:	08005dff 	.word	0x08005dff
 8005d1c:	08005ec3 	.word	0x08005ec3
 8005d20:	08005ec3 	.word	0x08005ec3
 8005d24:	08005ec3 	.word	0x08005ec3
 8005d28:	08005e41 	.word	0x08005e41
 8005d2c:	08005ec3 	.word	0x08005ec3
 8005d30:	08005ec3 	.word	0x08005ec3
 8005d34:	08005ec3 	.word	0x08005ec3
 8005d38:	08005e81 	.word	0x08005e81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fa8a 	bl	800625c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699a      	ldr	r2, [r3, #24]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0208 	orr.w	r2, r2, #8
 8005d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 0204 	bic.w	r2, r2, #4
 8005d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6999      	ldr	r1, [r3, #24]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	691a      	ldr	r2, [r3, #16]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	619a      	str	r2, [r3, #24]
      break;
 8005d7a:	e0a5      	b.n	8005ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68b9      	ldr	r1, [r7, #8]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 fb04 	bl	8006390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699a      	ldr	r2, [r3, #24]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6999      	ldr	r1, [r3, #24]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	021a      	lsls	r2, r3, #8
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	619a      	str	r2, [r3, #24]
      break;
 8005dbc:	e084      	b.n	8005ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fb77 	bl	80064b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69da      	ldr	r2, [r3, #28]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f042 0208 	orr.w	r2, r2, #8
 8005dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69da      	ldr	r2, [r3, #28]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0204 	bic.w	r2, r2, #4
 8005de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69d9      	ldr	r1, [r3, #28]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	691a      	ldr	r2, [r3, #16]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	61da      	str	r2, [r3, #28]
      break;
 8005dfc:	e064      	b.n	8005ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68b9      	ldr	r1, [r7, #8]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 fbe9 	bl	80065dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69da      	ldr	r2, [r3, #28]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69da      	ldr	r2, [r3, #28]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69d9      	ldr	r1, [r3, #28]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	021a      	lsls	r2, r3, #8
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	61da      	str	r2, [r3, #28]
      break;
 8005e3e:	e043      	b.n	8005ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68b9      	ldr	r1, [r7, #8]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 fc5c 	bl	8006704 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0208 	orr.w	r2, r2, #8
 8005e5a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0204 	bic.w	r2, r2, #4
 8005e6a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	691a      	ldr	r2, [r3, #16]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005e7e:	e023      	b.n	8005ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68b9      	ldr	r1, [r7, #8]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 fca6 	bl	80067d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e9a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eaa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	021a      	lsls	r2, r3, #8
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005ec0:	e002      	b.n	8005ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ec6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop

08005edc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e0ee      	b.n	80060d6 <HAL_TIM_ConfigClockSource+0x1fa>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005f16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a6b      	ldr	r2, [pc, #428]	@ (80060e0 <HAL_TIM_ConfigClockSource+0x204>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	f000 80b9 	beq.w	80060aa <HAL_TIM_ConfigClockSource+0x1ce>
 8005f38:	4a69      	ldr	r2, [pc, #420]	@ (80060e0 <HAL_TIM_ConfigClockSource+0x204>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	f200 80be 	bhi.w	80060bc <HAL_TIM_ConfigClockSource+0x1e0>
 8005f40:	4a68      	ldr	r2, [pc, #416]	@ (80060e4 <HAL_TIM_ConfigClockSource+0x208>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	f000 80b1 	beq.w	80060aa <HAL_TIM_ConfigClockSource+0x1ce>
 8005f48:	4a66      	ldr	r2, [pc, #408]	@ (80060e4 <HAL_TIM_ConfigClockSource+0x208>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	f200 80b6 	bhi.w	80060bc <HAL_TIM_ConfigClockSource+0x1e0>
 8005f50:	4a65      	ldr	r2, [pc, #404]	@ (80060e8 <HAL_TIM_ConfigClockSource+0x20c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	f000 80a9 	beq.w	80060aa <HAL_TIM_ConfigClockSource+0x1ce>
 8005f58:	4a63      	ldr	r2, [pc, #396]	@ (80060e8 <HAL_TIM_ConfigClockSource+0x20c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	f200 80ae 	bhi.w	80060bc <HAL_TIM_ConfigClockSource+0x1e0>
 8005f60:	4a62      	ldr	r2, [pc, #392]	@ (80060ec <HAL_TIM_ConfigClockSource+0x210>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	f000 80a1 	beq.w	80060aa <HAL_TIM_ConfigClockSource+0x1ce>
 8005f68:	4a60      	ldr	r2, [pc, #384]	@ (80060ec <HAL_TIM_ConfigClockSource+0x210>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	f200 80a6 	bhi.w	80060bc <HAL_TIM_ConfigClockSource+0x1e0>
 8005f70:	4a5f      	ldr	r2, [pc, #380]	@ (80060f0 <HAL_TIM_ConfigClockSource+0x214>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	f000 8099 	beq.w	80060aa <HAL_TIM_ConfigClockSource+0x1ce>
 8005f78:	4a5d      	ldr	r2, [pc, #372]	@ (80060f0 <HAL_TIM_ConfigClockSource+0x214>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	f200 809e 	bhi.w	80060bc <HAL_TIM_ConfigClockSource+0x1e0>
 8005f80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f84:	f000 8091 	beq.w	80060aa <HAL_TIM_ConfigClockSource+0x1ce>
 8005f88:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f8c:	f200 8096 	bhi.w	80060bc <HAL_TIM_ConfigClockSource+0x1e0>
 8005f90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f94:	f000 8089 	beq.w	80060aa <HAL_TIM_ConfigClockSource+0x1ce>
 8005f98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f9c:	f200 808e 	bhi.w	80060bc <HAL_TIM_ConfigClockSource+0x1e0>
 8005fa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fa4:	d03e      	beq.n	8006024 <HAL_TIM_ConfigClockSource+0x148>
 8005fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005faa:	f200 8087 	bhi.w	80060bc <HAL_TIM_ConfigClockSource+0x1e0>
 8005fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fb2:	f000 8086 	beq.w	80060c2 <HAL_TIM_ConfigClockSource+0x1e6>
 8005fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fba:	d87f      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x1e0>
 8005fbc:	2b70      	cmp	r3, #112	@ 0x70
 8005fbe:	d01a      	beq.n	8005ff6 <HAL_TIM_ConfigClockSource+0x11a>
 8005fc0:	2b70      	cmp	r3, #112	@ 0x70
 8005fc2:	d87b      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x1e0>
 8005fc4:	2b60      	cmp	r3, #96	@ 0x60
 8005fc6:	d050      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x18e>
 8005fc8:	2b60      	cmp	r3, #96	@ 0x60
 8005fca:	d877      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x1e0>
 8005fcc:	2b50      	cmp	r3, #80	@ 0x50
 8005fce:	d03c      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x16e>
 8005fd0:	2b50      	cmp	r3, #80	@ 0x50
 8005fd2:	d873      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x1e0>
 8005fd4:	2b40      	cmp	r3, #64	@ 0x40
 8005fd6:	d058      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x1ae>
 8005fd8:	2b40      	cmp	r3, #64	@ 0x40
 8005fda:	d86f      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x1e0>
 8005fdc:	2b30      	cmp	r3, #48	@ 0x30
 8005fde:	d064      	beq.n	80060aa <HAL_TIM_ConfigClockSource+0x1ce>
 8005fe0:	2b30      	cmp	r3, #48	@ 0x30
 8005fe2:	d86b      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x1e0>
 8005fe4:	2b20      	cmp	r3, #32
 8005fe6:	d060      	beq.n	80060aa <HAL_TIM_ConfigClockSource+0x1ce>
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	d867      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x1e0>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d05c      	beq.n	80060aa <HAL_TIM_ConfigClockSource+0x1ce>
 8005ff0:	2b10      	cmp	r3, #16
 8005ff2:	d05a      	beq.n	80060aa <HAL_TIM_ConfigClockSource+0x1ce>
 8005ff4:	e062      	b.n	80060bc <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006006:	f000 fccf 	bl	80069a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006018:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	609a      	str	r2, [r3, #8]
      break;
 8006022:	e04f      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006034:	f000 fcb8 	bl	80069a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689a      	ldr	r2, [r3, #8]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006046:	609a      	str	r2, [r3, #8]
      break;
 8006048:	e03c      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006056:	461a      	mov	r2, r3
 8006058:	f000 fc2a 	bl	80068b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2150      	movs	r1, #80	@ 0x50
 8006062:	4618      	mov	r0, r3
 8006064:	f000 fc83 	bl	800696e <TIM_ITRx_SetConfig>
      break;
 8006068:	e02c      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006076:	461a      	mov	r2, r3
 8006078:	f000 fc49 	bl	800690e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2160      	movs	r1, #96	@ 0x60
 8006082:	4618      	mov	r0, r3
 8006084:	f000 fc73 	bl	800696e <TIM_ITRx_SetConfig>
      break;
 8006088:	e01c      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006096:	461a      	mov	r2, r3
 8006098:	f000 fc0a 	bl	80068b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2140      	movs	r1, #64	@ 0x40
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 fc63 	bl	800696e <TIM_ITRx_SetConfig>
      break;
 80060a8:	e00c      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4619      	mov	r1, r3
 80060b4:	4610      	mov	r0, r2
 80060b6:	f000 fc5a 	bl	800696e <TIM_ITRx_SetConfig>
      break;
 80060ba:	e003      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	73fb      	strb	r3, [r7, #15]
      break;
 80060c0:	e000      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 80060c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	00100070 	.word	0x00100070
 80060e4:	00100050 	.word	0x00100050
 80060e8:	00100040 	.word	0x00100040
 80060ec:	00100030 	.word	0x00100030
 80060f0:	00100020 	.word	0x00100020

080060f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a4c      	ldr	r2, [pc, #304]	@ (8006238 <TIM_Base_SetConfig+0x144>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d017      	beq.n	800613c <TIM_Base_SetConfig+0x48>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006112:	d013      	beq.n	800613c <TIM_Base_SetConfig+0x48>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a49      	ldr	r2, [pc, #292]	@ (800623c <TIM_Base_SetConfig+0x148>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d00f      	beq.n	800613c <TIM_Base_SetConfig+0x48>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a48      	ldr	r2, [pc, #288]	@ (8006240 <TIM_Base_SetConfig+0x14c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00b      	beq.n	800613c <TIM_Base_SetConfig+0x48>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a47      	ldr	r2, [pc, #284]	@ (8006244 <TIM_Base_SetConfig+0x150>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d007      	beq.n	800613c <TIM_Base_SetConfig+0x48>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a46      	ldr	r2, [pc, #280]	@ (8006248 <TIM_Base_SetConfig+0x154>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d003      	beq.n	800613c <TIM_Base_SetConfig+0x48>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a45      	ldr	r2, [pc, #276]	@ (800624c <TIM_Base_SetConfig+0x158>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d108      	bne.n	800614e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a39      	ldr	r2, [pc, #228]	@ (8006238 <TIM_Base_SetConfig+0x144>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d023      	beq.n	800619e <TIM_Base_SetConfig+0xaa>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800615c:	d01f      	beq.n	800619e <TIM_Base_SetConfig+0xaa>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a36      	ldr	r2, [pc, #216]	@ (800623c <TIM_Base_SetConfig+0x148>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d01b      	beq.n	800619e <TIM_Base_SetConfig+0xaa>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a35      	ldr	r2, [pc, #212]	@ (8006240 <TIM_Base_SetConfig+0x14c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d017      	beq.n	800619e <TIM_Base_SetConfig+0xaa>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a34      	ldr	r2, [pc, #208]	@ (8006244 <TIM_Base_SetConfig+0x150>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d013      	beq.n	800619e <TIM_Base_SetConfig+0xaa>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a33      	ldr	r2, [pc, #204]	@ (8006248 <TIM_Base_SetConfig+0x154>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d00f      	beq.n	800619e <TIM_Base_SetConfig+0xaa>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a33      	ldr	r2, [pc, #204]	@ (8006250 <TIM_Base_SetConfig+0x15c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d00b      	beq.n	800619e <TIM_Base_SetConfig+0xaa>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a32      	ldr	r2, [pc, #200]	@ (8006254 <TIM_Base_SetConfig+0x160>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d007      	beq.n	800619e <TIM_Base_SetConfig+0xaa>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a31      	ldr	r2, [pc, #196]	@ (8006258 <TIM_Base_SetConfig+0x164>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d003      	beq.n	800619e <TIM_Base_SetConfig+0xaa>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a2c      	ldr	r2, [pc, #176]	@ (800624c <TIM_Base_SetConfig+0x158>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d108      	bne.n	80061b0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a18      	ldr	r2, [pc, #96]	@ (8006238 <TIM_Base_SetConfig+0x144>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d013      	beq.n	8006204 <TIM_Base_SetConfig+0x110>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a1a      	ldr	r2, [pc, #104]	@ (8006248 <TIM_Base_SetConfig+0x154>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d00f      	beq.n	8006204 <TIM_Base_SetConfig+0x110>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a1a      	ldr	r2, [pc, #104]	@ (8006250 <TIM_Base_SetConfig+0x15c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d00b      	beq.n	8006204 <TIM_Base_SetConfig+0x110>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a19      	ldr	r2, [pc, #100]	@ (8006254 <TIM_Base_SetConfig+0x160>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d007      	beq.n	8006204 <TIM_Base_SetConfig+0x110>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a18      	ldr	r2, [pc, #96]	@ (8006258 <TIM_Base_SetConfig+0x164>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d003      	beq.n	8006204 <TIM_Base_SetConfig+0x110>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a13      	ldr	r2, [pc, #76]	@ (800624c <TIM_Base_SetConfig+0x158>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d103      	bne.n	800620c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b01      	cmp	r3, #1
 800621c:	d105      	bne.n	800622a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	f023 0201 	bic.w	r2, r3, #1
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	611a      	str	r2, [r3, #16]
  }
}
 800622a:	bf00      	nop
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	40012c00 	.word	0x40012c00
 800623c:	40000400 	.word	0x40000400
 8006240:	40000800 	.word	0x40000800
 8006244:	40000c00 	.word	0x40000c00
 8006248:	40013400 	.word	0x40013400
 800624c:	40015000 	.word	0x40015000
 8006250:	40014000 	.word	0x40014000
 8006254:	40014400 	.word	0x40014400
 8006258:	40014800 	.word	0x40014800

0800625c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	f023 0201 	bic.w	r2, r3, #1
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800628a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800628e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 0303 	bic.w	r3, r3, #3
 8006296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f023 0302 	bic.w	r3, r3, #2
 80062a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a30      	ldr	r2, [pc, #192]	@ (8006378 <TIM_OC1_SetConfig+0x11c>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d013      	beq.n	80062e4 <TIM_OC1_SetConfig+0x88>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a2f      	ldr	r2, [pc, #188]	@ (800637c <TIM_OC1_SetConfig+0x120>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00f      	beq.n	80062e4 <TIM_OC1_SetConfig+0x88>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a2e      	ldr	r2, [pc, #184]	@ (8006380 <TIM_OC1_SetConfig+0x124>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00b      	beq.n	80062e4 <TIM_OC1_SetConfig+0x88>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a2d      	ldr	r2, [pc, #180]	@ (8006384 <TIM_OC1_SetConfig+0x128>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d007      	beq.n	80062e4 <TIM_OC1_SetConfig+0x88>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a2c      	ldr	r2, [pc, #176]	@ (8006388 <TIM_OC1_SetConfig+0x12c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d003      	beq.n	80062e4 <TIM_OC1_SetConfig+0x88>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a2b      	ldr	r2, [pc, #172]	@ (800638c <TIM_OC1_SetConfig+0x130>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d10c      	bne.n	80062fe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f023 0308 	bic.w	r3, r3, #8
 80062ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f023 0304 	bic.w	r3, r3, #4
 80062fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a1d      	ldr	r2, [pc, #116]	@ (8006378 <TIM_OC1_SetConfig+0x11c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d013      	beq.n	800632e <TIM_OC1_SetConfig+0xd2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a1c      	ldr	r2, [pc, #112]	@ (800637c <TIM_OC1_SetConfig+0x120>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00f      	beq.n	800632e <TIM_OC1_SetConfig+0xd2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a1b      	ldr	r2, [pc, #108]	@ (8006380 <TIM_OC1_SetConfig+0x124>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00b      	beq.n	800632e <TIM_OC1_SetConfig+0xd2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a1a      	ldr	r2, [pc, #104]	@ (8006384 <TIM_OC1_SetConfig+0x128>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d007      	beq.n	800632e <TIM_OC1_SetConfig+0xd2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a19      	ldr	r2, [pc, #100]	@ (8006388 <TIM_OC1_SetConfig+0x12c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d003      	beq.n	800632e <TIM_OC1_SetConfig+0xd2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a18      	ldr	r2, [pc, #96]	@ (800638c <TIM_OC1_SetConfig+0x130>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d111      	bne.n	8006352 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800633c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4313      	orrs	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	621a      	str	r2, [r3, #32]
}
 800636c:	bf00      	nop
 800636e:	371c      	adds	r7, #28
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	40012c00 	.word	0x40012c00
 800637c:	40013400 	.word	0x40013400
 8006380:	40014000 	.word	0x40014000
 8006384:	40014400 	.word	0x40014400
 8006388:	40014800 	.word	0x40014800
 800638c:	40015000 	.word	0x40015000

08006390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	f023 0210 	bic.w	r2, r3, #16
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f023 0320 	bic.w	r3, r3, #32
 80063de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	011b      	lsls	r3, r3, #4
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a2c      	ldr	r2, [pc, #176]	@ (80064a0 <TIM_OC2_SetConfig+0x110>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d007      	beq.n	8006404 <TIM_OC2_SetConfig+0x74>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a2b      	ldr	r2, [pc, #172]	@ (80064a4 <TIM_OC2_SetConfig+0x114>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d003      	beq.n	8006404 <TIM_OC2_SetConfig+0x74>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a2a      	ldr	r2, [pc, #168]	@ (80064a8 <TIM_OC2_SetConfig+0x118>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d10d      	bne.n	8006420 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800640a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800641e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a1f      	ldr	r2, [pc, #124]	@ (80064a0 <TIM_OC2_SetConfig+0x110>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d013      	beq.n	8006450 <TIM_OC2_SetConfig+0xc0>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a1e      	ldr	r2, [pc, #120]	@ (80064a4 <TIM_OC2_SetConfig+0x114>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d00f      	beq.n	8006450 <TIM_OC2_SetConfig+0xc0>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a1e      	ldr	r2, [pc, #120]	@ (80064ac <TIM_OC2_SetConfig+0x11c>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d00b      	beq.n	8006450 <TIM_OC2_SetConfig+0xc0>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a1d      	ldr	r2, [pc, #116]	@ (80064b0 <TIM_OC2_SetConfig+0x120>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d007      	beq.n	8006450 <TIM_OC2_SetConfig+0xc0>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a1c      	ldr	r2, [pc, #112]	@ (80064b4 <TIM_OC2_SetConfig+0x124>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d003      	beq.n	8006450 <TIM_OC2_SetConfig+0xc0>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a17      	ldr	r2, [pc, #92]	@ (80064a8 <TIM_OC2_SetConfig+0x118>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d113      	bne.n	8006478 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006456:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800645e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	4313      	orrs	r3, r2
 800646a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	4313      	orrs	r3, r2
 8006476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	621a      	str	r2, [r3, #32]
}
 8006492:	bf00      	nop
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40012c00 	.word	0x40012c00
 80064a4:	40013400 	.word	0x40013400
 80064a8:	40015000 	.word	0x40015000
 80064ac:	40014000 	.word	0x40014000
 80064b0:	40014400 	.word	0x40014400
 80064b4:	40014800 	.word	0x40014800

080064b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 0303 	bic.w	r3, r3, #3
 80064f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	021b      	lsls	r3, r3, #8
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	4313      	orrs	r3, r2
 8006510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a2b      	ldr	r2, [pc, #172]	@ (80065c4 <TIM_OC3_SetConfig+0x10c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d007      	beq.n	800652a <TIM_OC3_SetConfig+0x72>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a2a      	ldr	r2, [pc, #168]	@ (80065c8 <TIM_OC3_SetConfig+0x110>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d003      	beq.n	800652a <TIM_OC3_SetConfig+0x72>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a29      	ldr	r2, [pc, #164]	@ (80065cc <TIM_OC3_SetConfig+0x114>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d10d      	bne.n	8006546 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	021b      	lsls	r3, r3, #8
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	4313      	orrs	r3, r2
 800653c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a1e      	ldr	r2, [pc, #120]	@ (80065c4 <TIM_OC3_SetConfig+0x10c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d013      	beq.n	8006576 <TIM_OC3_SetConfig+0xbe>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a1d      	ldr	r2, [pc, #116]	@ (80065c8 <TIM_OC3_SetConfig+0x110>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00f      	beq.n	8006576 <TIM_OC3_SetConfig+0xbe>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a1d      	ldr	r2, [pc, #116]	@ (80065d0 <TIM_OC3_SetConfig+0x118>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00b      	beq.n	8006576 <TIM_OC3_SetConfig+0xbe>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a1c      	ldr	r2, [pc, #112]	@ (80065d4 <TIM_OC3_SetConfig+0x11c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d007      	beq.n	8006576 <TIM_OC3_SetConfig+0xbe>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a1b      	ldr	r2, [pc, #108]	@ (80065d8 <TIM_OC3_SetConfig+0x120>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d003      	beq.n	8006576 <TIM_OC3_SetConfig+0xbe>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a16      	ldr	r2, [pc, #88]	@ (80065cc <TIM_OC3_SetConfig+0x114>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d113      	bne.n	800659e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800657c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	011b      	lsls	r3, r3, #4
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	4313      	orrs	r3, r2
 8006590:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	011b      	lsls	r3, r3, #4
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	621a      	str	r2, [r3, #32]
}
 80065b8:	bf00      	nop
 80065ba:	371c      	adds	r7, #28
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	40012c00 	.word	0x40012c00
 80065c8:	40013400 	.word	0x40013400
 80065cc:	40015000 	.word	0x40015000
 80065d0:	40014000 	.word	0x40014000
 80065d4:	40014400 	.word	0x40014400
 80065d8:	40014800 	.word	0x40014800

080065dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800660a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800660e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	021b      	lsls	r3, r3, #8
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800662a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	031b      	lsls	r3, r3, #12
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	4313      	orrs	r3, r2
 8006636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a2c      	ldr	r2, [pc, #176]	@ (80066ec <TIM_OC4_SetConfig+0x110>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d007      	beq.n	8006650 <TIM_OC4_SetConfig+0x74>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a2b      	ldr	r2, [pc, #172]	@ (80066f0 <TIM_OC4_SetConfig+0x114>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d003      	beq.n	8006650 <TIM_OC4_SetConfig+0x74>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a2a      	ldr	r2, [pc, #168]	@ (80066f4 <TIM_OC4_SetConfig+0x118>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d10d      	bne.n	800666c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	031b      	lsls	r3, r3, #12
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4313      	orrs	r3, r2
 8006662:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800666a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a1f      	ldr	r2, [pc, #124]	@ (80066ec <TIM_OC4_SetConfig+0x110>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d013      	beq.n	800669c <TIM_OC4_SetConfig+0xc0>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a1e      	ldr	r2, [pc, #120]	@ (80066f0 <TIM_OC4_SetConfig+0x114>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00f      	beq.n	800669c <TIM_OC4_SetConfig+0xc0>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a1e      	ldr	r2, [pc, #120]	@ (80066f8 <TIM_OC4_SetConfig+0x11c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d00b      	beq.n	800669c <TIM_OC4_SetConfig+0xc0>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a1d      	ldr	r2, [pc, #116]	@ (80066fc <TIM_OC4_SetConfig+0x120>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d007      	beq.n	800669c <TIM_OC4_SetConfig+0xc0>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a1c      	ldr	r2, [pc, #112]	@ (8006700 <TIM_OC4_SetConfig+0x124>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d003      	beq.n	800669c <TIM_OC4_SetConfig+0xc0>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a17      	ldr	r2, [pc, #92]	@ (80066f4 <TIM_OC4_SetConfig+0x118>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d113      	bne.n	80066c4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066a2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066aa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	019b      	lsls	r3, r3, #6
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	019b      	lsls	r3, r3, #6
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	621a      	str	r2, [r3, #32]
}
 80066de:	bf00      	nop
 80066e0:	371c      	adds	r7, #28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	40012c00 	.word	0x40012c00
 80066f0:	40013400 	.word	0x40013400
 80066f4:	40015000 	.word	0x40015000
 80066f8:	40014000 	.word	0x40014000
 80066fc:	40014400 	.word	0x40014400
 8006700:	40014800 	.word	0x40014800

08006704 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800672a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006748:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	041b      	lsls	r3, r3, #16
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	4313      	orrs	r3, r2
 8006754:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a19      	ldr	r2, [pc, #100]	@ (80067c0 <TIM_OC5_SetConfig+0xbc>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d013      	beq.n	8006786 <TIM_OC5_SetConfig+0x82>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a18      	ldr	r2, [pc, #96]	@ (80067c4 <TIM_OC5_SetConfig+0xc0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d00f      	beq.n	8006786 <TIM_OC5_SetConfig+0x82>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a17      	ldr	r2, [pc, #92]	@ (80067c8 <TIM_OC5_SetConfig+0xc4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d00b      	beq.n	8006786 <TIM_OC5_SetConfig+0x82>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a16      	ldr	r2, [pc, #88]	@ (80067cc <TIM_OC5_SetConfig+0xc8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d007      	beq.n	8006786 <TIM_OC5_SetConfig+0x82>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a15      	ldr	r2, [pc, #84]	@ (80067d0 <TIM_OC5_SetConfig+0xcc>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d003      	beq.n	8006786 <TIM_OC5_SetConfig+0x82>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a14      	ldr	r2, [pc, #80]	@ (80067d4 <TIM_OC5_SetConfig+0xd0>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d109      	bne.n	800679a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800678c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	021b      	lsls	r3, r3, #8
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	621a      	str	r2, [r3, #32]
}
 80067b4:	bf00      	nop
 80067b6:	371c      	adds	r7, #28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	40012c00 	.word	0x40012c00
 80067c4:	40013400 	.word	0x40013400
 80067c8:	40014000 	.word	0x40014000
 80067cc:	40014400 	.word	0x40014400
 80067d0:	40014800 	.word	0x40014800
 80067d4:	40015000 	.word	0x40015000

080067d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006806:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800680a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	021b      	lsls	r3, r3, #8
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	4313      	orrs	r3, r2
 8006816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800681e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	051b      	lsls	r3, r3, #20
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a1a      	ldr	r2, [pc, #104]	@ (8006898 <TIM_OC6_SetConfig+0xc0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d013      	beq.n	800685c <TIM_OC6_SetConfig+0x84>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a19      	ldr	r2, [pc, #100]	@ (800689c <TIM_OC6_SetConfig+0xc4>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d00f      	beq.n	800685c <TIM_OC6_SetConfig+0x84>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a18      	ldr	r2, [pc, #96]	@ (80068a0 <TIM_OC6_SetConfig+0xc8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d00b      	beq.n	800685c <TIM_OC6_SetConfig+0x84>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a17      	ldr	r2, [pc, #92]	@ (80068a4 <TIM_OC6_SetConfig+0xcc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d007      	beq.n	800685c <TIM_OC6_SetConfig+0x84>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a16      	ldr	r2, [pc, #88]	@ (80068a8 <TIM_OC6_SetConfig+0xd0>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d003      	beq.n	800685c <TIM_OC6_SetConfig+0x84>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a15      	ldr	r2, [pc, #84]	@ (80068ac <TIM_OC6_SetConfig+0xd4>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d109      	bne.n	8006870 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006862:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	029b      	lsls	r3, r3, #10
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	4313      	orrs	r3, r2
 800686e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	621a      	str	r2, [r3, #32]
}
 800688a:	bf00      	nop
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	40012c00 	.word	0x40012c00
 800689c:	40013400 	.word	0x40013400
 80068a0:	40014000 	.word	0x40014000
 80068a4:	40014400 	.word	0x40014400
 80068a8:	40014800 	.word	0x40014800
 80068ac:	40015000 	.word	0x40015000

080068b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b087      	sub	sp, #28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6a1b      	ldr	r3, [r3, #32]
 80068c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	f023 0201 	bic.w	r2, r3, #1
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	011b      	lsls	r3, r3, #4
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f023 030a 	bic.w	r3, r3, #10
 80068ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	621a      	str	r2, [r3, #32]
}
 8006902:	bf00      	nop
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800690e:	b480      	push	{r7}
 8006910:	b087      	sub	sp, #28
 8006912:	af00      	add	r7, sp, #0
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	f023 0210 	bic.w	r2, r3, #16
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006938:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	031b      	lsls	r3, r3, #12
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800694a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	011b      	lsls	r3, r3, #4
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	4313      	orrs	r3, r2
 8006954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	621a      	str	r2, [r3, #32]
}
 8006962:	bf00      	nop
 8006964:	371c      	adds	r7, #28
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800696e:	b480      	push	{r7}
 8006970:	b085      	sub	sp, #20
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006988:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4313      	orrs	r3, r2
 8006990:	f043 0307 	orr.w	r3, r3, #7
 8006994:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	609a      	str	r2, [r3, #8]
}
 800699c:	bf00      	nop
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
 80069b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	021a      	lsls	r2, r3, #8
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	431a      	orrs	r2, r3
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	609a      	str	r2, [r3, #8]
}
 80069dc:	bf00      	nop
 80069de:	371c      	adds	r7, #28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f003 031f 	and.w	r3, r3, #31
 80069fa:	2201      	movs	r2, #1
 80069fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006a00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6a1a      	ldr	r2, [r3, #32]
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	43db      	mvns	r3, r3
 8006a0a:	401a      	ands	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6a1a      	ldr	r2, [r3, #32]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f003 031f 	and.w	r3, r3, #31
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a20:	431a      	orrs	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	621a      	str	r2, [r3, #32]
}
 8006a26:	bf00      	nop
 8006a28:	371c      	adds	r7, #28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
	...

08006a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d101      	bne.n	8006a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	e074      	b.n	8006b36 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a34      	ldr	r2, [pc, #208]	@ (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d009      	beq.n	8006a8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a33      	ldr	r2, [pc, #204]	@ (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d004      	beq.n	8006a8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a31      	ldr	r2, [pc, #196]	@ (8006b4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d108      	bne.n	8006a9c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a21      	ldr	r2, [pc, #132]	@ (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d022      	beq.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006acc:	d01d      	beq.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8006b50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d018      	beq.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a1d      	ldr	r2, [pc, #116]	@ (8006b54 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d013      	beq.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8006b58 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00e      	beq.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a15      	ldr	r2, [pc, #84]	@ (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d009      	beq.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a18      	ldr	r2, [pc, #96]	@ (8006b5c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d004      	beq.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a11      	ldr	r2, [pc, #68]	@ (8006b4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d10c      	bne.n	8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	40012c00 	.word	0x40012c00
 8006b48:	40013400 	.word	0x40013400
 8006b4c:	40015000 	.word	0x40015000
 8006b50:	40000400 	.word	0x40000400
 8006b54:	40000800 	.word	0x40000800
 8006b58:	40000c00 	.word	0x40000c00
 8006b5c:	40014000 	.word	0x40014000

08006b60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e042      	b.n	8006bf8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d106      	bne.n	8006b8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7fd f8fb 	bl	8003d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2224      	movs	r2, #36	@ 0x24
 8006b8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 0201 	bic.w	r2, r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d002      	beq.n	8006bb0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fc7a 	bl	80074a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f97b 	bl	8006eac <UART_SetConfig>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d101      	bne.n	8006bc0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e01b      	b.n	8006bf8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689a      	ldr	r2, [r3, #8]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0201 	orr.w	r2, r2, #1
 8006bee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fcf9 	bl	80075e8 <UART_CheckIdleState>
 8006bf6:	4603      	mov	r3, r0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08a      	sub	sp, #40	@ 0x28
 8006c04:	af02      	add	r7, sp, #8
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	603b      	str	r3, [r7, #0]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c16:	2b20      	cmp	r3, #32
 8006c18:	d17b      	bne.n	8006d12 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <HAL_UART_Transmit+0x26>
 8006c20:	88fb      	ldrh	r3, [r7, #6]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e074      	b.n	8006d14 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2221      	movs	r2, #33	@ 0x21
 8006c36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c3a:	f7fd f9c7 	bl	8003fcc <HAL_GetTick>
 8006c3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	88fa      	ldrh	r2, [r7, #6]
 8006c44:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	88fa      	ldrh	r2, [r7, #6]
 8006c4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c58:	d108      	bne.n	8006c6c <HAL_UART_Transmit+0x6c>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d104      	bne.n	8006c6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	61bb      	str	r3, [r7, #24]
 8006c6a:	e003      	b.n	8006c74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c70:	2300      	movs	r3, #0
 8006c72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c74:	e030      	b.n	8006cd8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2180      	movs	r1, #128	@ 0x80
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 fd5b 	bl	800773c <UART_WaitOnFlagUntilTimeout>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d005      	beq.n	8006c98 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e03d      	b.n	8006d14 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10b      	bne.n	8006cb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	3302      	adds	r3, #2
 8006cb2:	61bb      	str	r3, [r7, #24]
 8006cb4:	e007      	b.n	8006cc6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	781a      	ldrb	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1c8      	bne.n	8006c76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2200      	movs	r2, #0
 8006cec:	2140      	movs	r1, #64	@ 0x40
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 fd24 	bl	800773c <UART_WaitOnFlagUntilTimeout>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d005      	beq.n	8006d06 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e006      	b.n	8006d14 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	e000      	b.n	8006d14 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d12:	2302      	movs	r3, #2
  }
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3720      	adds	r7, #32
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08a      	sub	sp, #40	@ 0x28
 8006d20:	af02      	add	r7, sp, #8
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	603b      	str	r3, [r7, #0]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d32:	2b20      	cmp	r3, #32
 8006d34:	f040 80b5 	bne.w	8006ea2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <HAL_UART_Receive+0x28>
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e0ad      	b.n	8006ea4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2222      	movs	r2, #34	@ 0x22
 8006d54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d5e:	f7fd f935 	bl	8003fcc <HAL_GetTick>
 8006d62:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	88fa      	ldrh	r2, [r7, #6]
 8006d68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	88fa      	ldrh	r2, [r7, #6]
 8006d70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d7c:	d10e      	bne.n	8006d9c <HAL_UART_Receive+0x80>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d105      	bne.n	8006d92 <HAL_UART_Receive+0x76>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006d8c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d90:	e02d      	b.n	8006dee <HAL_UART_Receive+0xd2>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	22ff      	movs	r2, #255	@ 0xff
 8006d96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d9a:	e028      	b.n	8006dee <HAL_UART_Receive+0xd2>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10d      	bne.n	8006dc0 <HAL_UART_Receive+0xa4>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d104      	bne.n	8006db6 <HAL_UART_Receive+0x9a>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	22ff      	movs	r2, #255	@ 0xff
 8006db0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006db4:	e01b      	b.n	8006dee <HAL_UART_Receive+0xd2>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	227f      	movs	r2, #127	@ 0x7f
 8006dba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006dbe:	e016      	b.n	8006dee <HAL_UART_Receive+0xd2>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dc8:	d10d      	bne.n	8006de6 <HAL_UART_Receive+0xca>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d104      	bne.n	8006ddc <HAL_UART_Receive+0xc0>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	227f      	movs	r2, #127	@ 0x7f
 8006dd6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006dda:	e008      	b.n	8006dee <HAL_UART_Receive+0xd2>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	223f      	movs	r2, #63	@ 0x3f
 8006de0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006de4:	e003      	b.n	8006dee <HAL_UART_Receive+0xd2>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006df4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dfe:	d108      	bne.n	8006e12 <HAL_UART_Receive+0xf6>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d104      	bne.n	8006e12 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	61bb      	str	r3, [r7, #24]
 8006e10:	e003      	b.n	8006e1a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006e1a:	e036      	b.n	8006e8a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	2200      	movs	r2, #0
 8006e24:	2120      	movs	r1, #32
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f000 fc88 	bl	800773c <UART_WaitOnFlagUntilTimeout>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d005      	beq.n	8006e3e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2220      	movs	r2, #32
 8006e36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e032      	b.n	8006ea4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10c      	bne.n	8006e5e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	8a7b      	ldrh	r3, [r7, #18]
 8006e4e:	4013      	ands	r3, r2
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	3302      	adds	r3, #2
 8006e5a:	61bb      	str	r3, [r7, #24]
 8006e5c:	e00c      	b.n	8006e78 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	8a7b      	ldrh	r3, [r7, #18]
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	3301      	adds	r3, #1
 8006e76:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	3b01      	subs	r3, #1
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1c2      	bne.n	8006e1c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e000      	b.n	8006ea4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006ea2:	2302      	movs	r3, #2
  }
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3720      	adds	r7, #32
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006eb0:	b08c      	sub	sp, #48	@ 0x30
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	4baa      	ldr	r3, [pc, #680]	@ (8007184 <UART_SetConfig+0x2d8>)
 8006edc:	4013      	ands	r3, r2
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	6812      	ldr	r2, [r2, #0]
 8006ee2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ee4:	430b      	orrs	r3, r1
 8006ee6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a9f      	ldr	r2, [pc, #636]	@ (8007188 <UART_SetConfig+0x2dc>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d004      	beq.n	8006f18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f14:	4313      	orrs	r3, r2
 8006f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006f22:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	6812      	ldr	r2, [r2, #0]
 8006f2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f2c:	430b      	orrs	r3, r1
 8006f2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f36:	f023 010f 	bic.w	r1, r3, #15
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a90      	ldr	r2, [pc, #576]	@ (800718c <UART_SetConfig+0x2e0>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d125      	bne.n	8006f9c <UART_SetConfig+0xf0>
 8006f50:	4b8f      	ldr	r3, [pc, #572]	@ (8007190 <UART_SetConfig+0x2e4>)
 8006f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f56:	f003 0303 	and.w	r3, r3, #3
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d81a      	bhi.n	8006f94 <UART_SetConfig+0xe8>
 8006f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f64 <UART_SetConfig+0xb8>)
 8006f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f64:	08006f75 	.word	0x08006f75
 8006f68:	08006f85 	.word	0x08006f85
 8006f6c:	08006f7d 	.word	0x08006f7d
 8006f70:	08006f8d 	.word	0x08006f8d
 8006f74:	2301      	movs	r3, #1
 8006f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f7a:	e116      	b.n	80071aa <UART_SetConfig+0x2fe>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f82:	e112      	b.n	80071aa <UART_SetConfig+0x2fe>
 8006f84:	2304      	movs	r3, #4
 8006f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f8a:	e10e      	b.n	80071aa <UART_SetConfig+0x2fe>
 8006f8c:	2308      	movs	r3, #8
 8006f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f92:	e10a      	b.n	80071aa <UART_SetConfig+0x2fe>
 8006f94:	2310      	movs	r3, #16
 8006f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f9a:	e106      	b.n	80071aa <UART_SetConfig+0x2fe>
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a7c      	ldr	r2, [pc, #496]	@ (8007194 <UART_SetConfig+0x2e8>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d138      	bne.n	8007018 <UART_SetConfig+0x16c>
 8006fa6:	4b7a      	ldr	r3, [pc, #488]	@ (8007190 <UART_SetConfig+0x2e4>)
 8006fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fac:	f003 030c 	and.w	r3, r3, #12
 8006fb0:	2b0c      	cmp	r3, #12
 8006fb2:	d82d      	bhi.n	8007010 <UART_SetConfig+0x164>
 8006fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8006fbc <UART_SetConfig+0x110>)
 8006fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fba:	bf00      	nop
 8006fbc:	08006ff1 	.word	0x08006ff1
 8006fc0:	08007011 	.word	0x08007011
 8006fc4:	08007011 	.word	0x08007011
 8006fc8:	08007011 	.word	0x08007011
 8006fcc:	08007001 	.word	0x08007001
 8006fd0:	08007011 	.word	0x08007011
 8006fd4:	08007011 	.word	0x08007011
 8006fd8:	08007011 	.word	0x08007011
 8006fdc:	08006ff9 	.word	0x08006ff9
 8006fe0:	08007011 	.word	0x08007011
 8006fe4:	08007011 	.word	0x08007011
 8006fe8:	08007011 	.word	0x08007011
 8006fec:	08007009 	.word	0x08007009
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ff6:	e0d8      	b.n	80071aa <UART_SetConfig+0x2fe>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ffe:	e0d4      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007000:	2304      	movs	r3, #4
 8007002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007006:	e0d0      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007008:	2308      	movs	r3, #8
 800700a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800700e:	e0cc      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007010:	2310      	movs	r3, #16
 8007012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007016:	e0c8      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a5e      	ldr	r2, [pc, #376]	@ (8007198 <UART_SetConfig+0x2ec>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d125      	bne.n	800706e <UART_SetConfig+0x1c2>
 8007022:	4b5b      	ldr	r3, [pc, #364]	@ (8007190 <UART_SetConfig+0x2e4>)
 8007024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007028:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800702c:	2b30      	cmp	r3, #48	@ 0x30
 800702e:	d016      	beq.n	800705e <UART_SetConfig+0x1b2>
 8007030:	2b30      	cmp	r3, #48	@ 0x30
 8007032:	d818      	bhi.n	8007066 <UART_SetConfig+0x1ba>
 8007034:	2b20      	cmp	r3, #32
 8007036:	d00a      	beq.n	800704e <UART_SetConfig+0x1a2>
 8007038:	2b20      	cmp	r3, #32
 800703a:	d814      	bhi.n	8007066 <UART_SetConfig+0x1ba>
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <UART_SetConfig+0x19a>
 8007040:	2b10      	cmp	r3, #16
 8007042:	d008      	beq.n	8007056 <UART_SetConfig+0x1aa>
 8007044:	e00f      	b.n	8007066 <UART_SetConfig+0x1ba>
 8007046:	2300      	movs	r3, #0
 8007048:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800704c:	e0ad      	b.n	80071aa <UART_SetConfig+0x2fe>
 800704e:	2302      	movs	r3, #2
 8007050:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007054:	e0a9      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007056:	2304      	movs	r3, #4
 8007058:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800705c:	e0a5      	b.n	80071aa <UART_SetConfig+0x2fe>
 800705e:	2308      	movs	r3, #8
 8007060:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007064:	e0a1      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007066:	2310      	movs	r3, #16
 8007068:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800706c:	e09d      	b.n	80071aa <UART_SetConfig+0x2fe>
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a4a      	ldr	r2, [pc, #296]	@ (800719c <UART_SetConfig+0x2f0>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d125      	bne.n	80070c4 <UART_SetConfig+0x218>
 8007078:	4b45      	ldr	r3, [pc, #276]	@ (8007190 <UART_SetConfig+0x2e4>)
 800707a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800707e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007082:	2bc0      	cmp	r3, #192	@ 0xc0
 8007084:	d016      	beq.n	80070b4 <UART_SetConfig+0x208>
 8007086:	2bc0      	cmp	r3, #192	@ 0xc0
 8007088:	d818      	bhi.n	80070bc <UART_SetConfig+0x210>
 800708a:	2b80      	cmp	r3, #128	@ 0x80
 800708c:	d00a      	beq.n	80070a4 <UART_SetConfig+0x1f8>
 800708e:	2b80      	cmp	r3, #128	@ 0x80
 8007090:	d814      	bhi.n	80070bc <UART_SetConfig+0x210>
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <UART_SetConfig+0x1f0>
 8007096:	2b40      	cmp	r3, #64	@ 0x40
 8007098:	d008      	beq.n	80070ac <UART_SetConfig+0x200>
 800709a:	e00f      	b.n	80070bc <UART_SetConfig+0x210>
 800709c:	2300      	movs	r3, #0
 800709e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070a2:	e082      	b.n	80071aa <UART_SetConfig+0x2fe>
 80070a4:	2302      	movs	r3, #2
 80070a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070aa:	e07e      	b.n	80071aa <UART_SetConfig+0x2fe>
 80070ac:	2304      	movs	r3, #4
 80070ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070b2:	e07a      	b.n	80071aa <UART_SetConfig+0x2fe>
 80070b4:	2308      	movs	r3, #8
 80070b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ba:	e076      	b.n	80071aa <UART_SetConfig+0x2fe>
 80070bc:	2310      	movs	r3, #16
 80070be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c2:	e072      	b.n	80071aa <UART_SetConfig+0x2fe>
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a35      	ldr	r2, [pc, #212]	@ (80071a0 <UART_SetConfig+0x2f4>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d12a      	bne.n	8007124 <UART_SetConfig+0x278>
 80070ce:	4b30      	ldr	r3, [pc, #192]	@ (8007190 <UART_SetConfig+0x2e4>)
 80070d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070dc:	d01a      	beq.n	8007114 <UART_SetConfig+0x268>
 80070de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070e2:	d81b      	bhi.n	800711c <UART_SetConfig+0x270>
 80070e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070e8:	d00c      	beq.n	8007104 <UART_SetConfig+0x258>
 80070ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070ee:	d815      	bhi.n	800711c <UART_SetConfig+0x270>
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <UART_SetConfig+0x250>
 80070f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070f8:	d008      	beq.n	800710c <UART_SetConfig+0x260>
 80070fa:	e00f      	b.n	800711c <UART_SetConfig+0x270>
 80070fc:	2300      	movs	r3, #0
 80070fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007102:	e052      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007104:	2302      	movs	r3, #2
 8007106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800710a:	e04e      	b.n	80071aa <UART_SetConfig+0x2fe>
 800710c:	2304      	movs	r3, #4
 800710e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007112:	e04a      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007114:	2308      	movs	r3, #8
 8007116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800711a:	e046      	b.n	80071aa <UART_SetConfig+0x2fe>
 800711c:	2310      	movs	r3, #16
 800711e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007122:	e042      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a17      	ldr	r2, [pc, #92]	@ (8007188 <UART_SetConfig+0x2dc>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d13a      	bne.n	80071a4 <UART_SetConfig+0x2f8>
 800712e:	4b18      	ldr	r3, [pc, #96]	@ (8007190 <UART_SetConfig+0x2e4>)
 8007130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007134:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007138:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800713c:	d01a      	beq.n	8007174 <UART_SetConfig+0x2c8>
 800713e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007142:	d81b      	bhi.n	800717c <UART_SetConfig+0x2d0>
 8007144:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007148:	d00c      	beq.n	8007164 <UART_SetConfig+0x2b8>
 800714a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800714e:	d815      	bhi.n	800717c <UART_SetConfig+0x2d0>
 8007150:	2b00      	cmp	r3, #0
 8007152:	d003      	beq.n	800715c <UART_SetConfig+0x2b0>
 8007154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007158:	d008      	beq.n	800716c <UART_SetConfig+0x2c0>
 800715a:	e00f      	b.n	800717c <UART_SetConfig+0x2d0>
 800715c:	2300      	movs	r3, #0
 800715e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007162:	e022      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007164:	2302      	movs	r3, #2
 8007166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800716a:	e01e      	b.n	80071aa <UART_SetConfig+0x2fe>
 800716c:	2304      	movs	r3, #4
 800716e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007172:	e01a      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007174:	2308      	movs	r3, #8
 8007176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800717a:	e016      	b.n	80071aa <UART_SetConfig+0x2fe>
 800717c:	2310      	movs	r3, #16
 800717e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007182:	e012      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007184:	cfff69f3 	.word	0xcfff69f3
 8007188:	40008000 	.word	0x40008000
 800718c:	40013800 	.word	0x40013800
 8007190:	40021000 	.word	0x40021000
 8007194:	40004400 	.word	0x40004400
 8007198:	40004800 	.word	0x40004800
 800719c:	40004c00 	.word	0x40004c00
 80071a0:	40005000 	.word	0x40005000
 80071a4:	2310      	movs	r3, #16
 80071a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4aae      	ldr	r2, [pc, #696]	@ (8007468 <UART_SetConfig+0x5bc>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	f040 8097 	bne.w	80072e4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071ba:	2b08      	cmp	r3, #8
 80071bc:	d823      	bhi.n	8007206 <UART_SetConfig+0x35a>
 80071be:	a201      	add	r2, pc, #4	@ (adr r2, 80071c4 <UART_SetConfig+0x318>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	080071e9 	.word	0x080071e9
 80071c8:	08007207 	.word	0x08007207
 80071cc:	080071f1 	.word	0x080071f1
 80071d0:	08007207 	.word	0x08007207
 80071d4:	080071f7 	.word	0x080071f7
 80071d8:	08007207 	.word	0x08007207
 80071dc:	08007207 	.word	0x08007207
 80071e0:	08007207 	.word	0x08007207
 80071e4:	080071ff 	.word	0x080071ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071e8:	f7fd ff0c 	bl	8005004 <HAL_RCC_GetPCLK1Freq>
 80071ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071ee:	e010      	b.n	8007212 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071f0:	4b9e      	ldr	r3, [pc, #632]	@ (800746c <UART_SetConfig+0x5c0>)
 80071f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071f4:	e00d      	b.n	8007212 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071f6:	f7fd fe97 	bl	8004f28 <HAL_RCC_GetSysClockFreq>
 80071fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071fc:	e009      	b.n	8007212 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007202:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007204:	e005      	b.n	8007212 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007210:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 8130 	beq.w	800747a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721e:	4a94      	ldr	r2, [pc, #592]	@ (8007470 <UART_SetConfig+0x5c4>)
 8007220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007224:	461a      	mov	r2, r3
 8007226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007228:	fbb3 f3f2 	udiv	r3, r3, r2
 800722c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	4613      	mov	r3, r2
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	4413      	add	r3, r2
 8007238:	69ba      	ldr	r2, [r7, #24]
 800723a:	429a      	cmp	r2, r3
 800723c:	d305      	bcc.n	800724a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	429a      	cmp	r2, r3
 8007248:	d903      	bls.n	8007252 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007250:	e113      	b.n	800747a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007254:	2200      	movs	r2, #0
 8007256:	60bb      	str	r3, [r7, #8]
 8007258:	60fa      	str	r2, [r7, #12]
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725e:	4a84      	ldr	r2, [pc, #528]	@ (8007470 <UART_SetConfig+0x5c4>)
 8007260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007264:	b29b      	uxth	r3, r3
 8007266:	2200      	movs	r2, #0
 8007268:	603b      	str	r3, [r7, #0]
 800726a:	607a      	str	r2, [r7, #4]
 800726c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007270:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007274:	f7f9 fd30 	bl	8000cd8 <__aeabi_uldivmod>
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4610      	mov	r0, r2
 800727e:	4619      	mov	r1, r3
 8007280:	f04f 0200 	mov.w	r2, #0
 8007284:	f04f 0300 	mov.w	r3, #0
 8007288:	020b      	lsls	r3, r1, #8
 800728a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800728e:	0202      	lsls	r2, r0, #8
 8007290:	6979      	ldr	r1, [r7, #20]
 8007292:	6849      	ldr	r1, [r1, #4]
 8007294:	0849      	lsrs	r1, r1, #1
 8007296:	2000      	movs	r0, #0
 8007298:	460c      	mov	r4, r1
 800729a:	4605      	mov	r5, r0
 800729c:	eb12 0804 	adds.w	r8, r2, r4
 80072a0:	eb43 0905 	adc.w	r9, r3, r5
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	469a      	mov	sl, r3
 80072ac:	4693      	mov	fp, r2
 80072ae:	4652      	mov	r2, sl
 80072b0:	465b      	mov	r3, fp
 80072b2:	4640      	mov	r0, r8
 80072b4:	4649      	mov	r1, r9
 80072b6:	f7f9 fd0f 	bl	8000cd8 <__aeabi_uldivmod>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4613      	mov	r3, r2
 80072c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072c2:	6a3b      	ldr	r3, [r7, #32]
 80072c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072c8:	d308      	bcc.n	80072dc <UART_SetConfig+0x430>
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072d0:	d204      	bcs.n	80072dc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6a3a      	ldr	r2, [r7, #32]
 80072d8:	60da      	str	r2, [r3, #12]
 80072da:	e0ce      	b.n	800747a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80072e2:	e0ca      	b.n	800747a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072ec:	d166      	bne.n	80073bc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80072ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80072f2:	2b08      	cmp	r3, #8
 80072f4:	d827      	bhi.n	8007346 <UART_SetConfig+0x49a>
 80072f6:	a201      	add	r2, pc, #4	@ (adr r2, 80072fc <UART_SetConfig+0x450>)
 80072f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fc:	08007321 	.word	0x08007321
 8007300:	08007329 	.word	0x08007329
 8007304:	08007331 	.word	0x08007331
 8007308:	08007347 	.word	0x08007347
 800730c:	08007337 	.word	0x08007337
 8007310:	08007347 	.word	0x08007347
 8007314:	08007347 	.word	0x08007347
 8007318:	08007347 	.word	0x08007347
 800731c:	0800733f 	.word	0x0800733f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007320:	f7fd fe70 	bl	8005004 <HAL_RCC_GetPCLK1Freq>
 8007324:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007326:	e014      	b.n	8007352 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007328:	f7fd fe82 	bl	8005030 <HAL_RCC_GetPCLK2Freq>
 800732c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800732e:	e010      	b.n	8007352 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007330:	4b4e      	ldr	r3, [pc, #312]	@ (800746c <UART_SetConfig+0x5c0>)
 8007332:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007334:	e00d      	b.n	8007352 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007336:	f7fd fdf7 	bl	8004f28 <HAL_RCC_GetSysClockFreq>
 800733a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800733c:	e009      	b.n	8007352 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800733e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007342:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007344:	e005      	b.n	8007352 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007350:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 8090 	beq.w	800747a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735e:	4a44      	ldr	r2, [pc, #272]	@ (8007470 <UART_SetConfig+0x5c4>)
 8007360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007364:	461a      	mov	r2, r3
 8007366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007368:	fbb3 f3f2 	udiv	r3, r3, r2
 800736c:	005a      	lsls	r2, r3, #1
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	085b      	lsrs	r3, r3, #1
 8007374:	441a      	add	r2, r3
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	fbb2 f3f3 	udiv	r3, r2, r3
 800737e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	2b0f      	cmp	r3, #15
 8007384:	d916      	bls.n	80073b4 <UART_SetConfig+0x508>
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800738c:	d212      	bcs.n	80073b4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	b29b      	uxth	r3, r3
 8007392:	f023 030f 	bic.w	r3, r3, #15
 8007396:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007398:	6a3b      	ldr	r3, [r7, #32]
 800739a:	085b      	lsrs	r3, r3, #1
 800739c:	b29b      	uxth	r3, r3
 800739e:	f003 0307 	and.w	r3, r3, #7
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	8bfb      	ldrh	r3, [r7, #30]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	8bfa      	ldrh	r2, [r7, #30]
 80073b0:	60da      	str	r2, [r3, #12]
 80073b2:	e062      	b.n	800747a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073ba:	e05e      	b.n	800747a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	d828      	bhi.n	8007416 <UART_SetConfig+0x56a>
 80073c4:	a201      	add	r2, pc, #4	@ (adr r2, 80073cc <UART_SetConfig+0x520>)
 80073c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ca:	bf00      	nop
 80073cc:	080073f1 	.word	0x080073f1
 80073d0:	080073f9 	.word	0x080073f9
 80073d4:	08007401 	.word	0x08007401
 80073d8:	08007417 	.word	0x08007417
 80073dc:	08007407 	.word	0x08007407
 80073e0:	08007417 	.word	0x08007417
 80073e4:	08007417 	.word	0x08007417
 80073e8:	08007417 	.word	0x08007417
 80073ec:	0800740f 	.word	0x0800740f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073f0:	f7fd fe08 	bl	8005004 <HAL_RCC_GetPCLK1Freq>
 80073f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073f6:	e014      	b.n	8007422 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073f8:	f7fd fe1a 	bl	8005030 <HAL_RCC_GetPCLK2Freq>
 80073fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073fe:	e010      	b.n	8007422 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007400:	4b1a      	ldr	r3, [pc, #104]	@ (800746c <UART_SetConfig+0x5c0>)
 8007402:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007404:	e00d      	b.n	8007422 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007406:	f7fd fd8f 	bl	8004f28 <HAL_RCC_GetSysClockFreq>
 800740a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800740c:	e009      	b.n	8007422 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800740e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007412:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007414:	e005      	b.n	8007422 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007420:	bf00      	nop
    }

    if (pclk != 0U)
 8007422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007424:	2b00      	cmp	r3, #0
 8007426:	d028      	beq.n	800747a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742c:	4a10      	ldr	r2, [pc, #64]	@ (8007470 <UART_SetConfig+0x5c4>)
 800742e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007432:	461a      	mov	r2, r3
 8007434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007436:	fbb3 f2f2 	udiv	r2, r3, r2
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	085b      	lsrs	r3, r3, #1
 8007440:	441a      	add	r2, r3
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	fbb2 f3f3 	udiv	r3, r2, r3
 800744a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	2b0f      	cmp	r3, #15
 8007450:	d910      	bls.n	8007474 <UART_SetConfig+0x5c8>
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007458:	d20c      	bcs.n	8007474 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	b29a      	uxth	r2, r3
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	60da      	str	r2, [r3, #12]
 8007464:	e009      	b.n	800747a <UART_SetConfig+0x5ce>
 8007466:	bf00      	nop
 8007468:	40008000 	.word	0x40008000
 800746c:	00f42400 	.word	0x00f42400
 8007470:	080095b0 	.word	0x080095b0
      }
      else
      {
        ret = HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2201      	movs	r2, #1
 800747e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2201      	movs	r2, #1
 8007486:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2200      	movs	r2, #0
 800748e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	2200      	movs	r2, #0
 8007494:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007496:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800749a:	4618      	mov	r0, r3
 800749c:	3730      	adds	r7, #48	@ 0x30
 800749e:	46bd      	mov	sp, r7
 80074a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080074a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b0:	f003 0308 	and.w	r3, r3, #8
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	430a      	orrs	r2, r1
 80074cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00a      	beq.n	80074f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f4:	f003 0302 	and.w	r3, r3, #2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00a      	beq.n	8007512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007516:	f003 0304 	and.w	r3, r3, #4
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	430a      	orrs	r2, r1
 8007532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007538:	f003 0310 	and.w	r3, r3, #16
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007580:	2b00      	cmp	r3, #0
 8007582:	d01a      	beq.n	80075ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800759e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075a2:	d10a      	bne.n	80075ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	605a      	str	r2, [r3, #4]
  }
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b098      	sub	sp, #96	@ 0x60
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075f8:	f7fc fce8 	bl	8003fcc <HAL_GetTick>
 80075fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0308 	and.w	r3, r3, #8
 8007608:	2b08      	cmp	r3, #8
 800760a:	d12f      	bne.n	800766c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800760c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007614:	2200      	movs	r2, #0
 8007616:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f88e 	bl	800773c <UART_WaitOnFlagUntilTimeout>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d022      	beq.n	800766c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762e:	e853 3f00 	ldrex	r3, [r3]
 8007632:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800763a:	653b      	str	r3, [r7, #80]	@ 0x50
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007644:	647b      	str	r3, [r7, #68]	@ 0x44
 8007646:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007648:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800764a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800764c:	e841 2300 	strex	r3, r2, [r1]
 8007650:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1e6      	bne.n	8007626 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2220      	movs	r2, #32
 800765c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e063      	b.n	8007734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0304 	and.w	r3, r3, #4
 8007676:	2b04      	cmp	r3, #4
 8007678:	d149      	bne.n	800770e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800767a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007682:	2200      	movs	r2, #0
 8007684:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f857 	bl	800773c <UART_WaitOnFlagUntilTimeout>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d03c      	beq.n	800770e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	623b      	str	r3, [r7, #32]
   return(result);
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80076b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e6      	bne.n	8007694 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3308      	adds	r3, #8
 80076cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f023 0301 	bic.w	r3, r3, #1
 80076dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3308      	adds	r3, #8
 80076e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076e6:	61fa      	str	r2, [r7, #28]
 80076e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ea:	69b9      	ldr	r1, [r7, #24]
 80076ec:	69fa      	ldr	r2, [r7, #28]
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	617b      	str	r3, [r7, #20]
   return(result);
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1e5      	bne.n	80076c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2220      	movs	r2, #32
 80076fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e012      	b.n	8007734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2220      	movs	r2, #32
 8007712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3758      	adds	r7, #88	@ 0x58
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	603b      	str	r3, [r7, #0]
 8007748:	4613      	mov	r3, r2
 800774a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800774c:	e04f      	b.n	80077ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007754:	d04b      	beq.n	80077ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007756:	f7fc fc39 	bl	8003fcc <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	69ba      	ldr	r2, [r7, #24]
 8007762:	429a      	cmp	r2, r3
 8007764:	d302      	bcc.n	800776c <UART_WaitOnFlagUntilTimeout+0x30>
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e04e      	b.n	800780e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0304 	and.w	r3, r3, #4
 800777a:	2b00      	cmp	r3, #0
 800777c:	d037      	beq.n	80077ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	2b80      	cmp	r3, #128	@ 0x80
 8007782:	d034      	beq.n	80077ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b40      	cmp	r3, #64	@ 0x40
 8007788:	d031      	beq.n	80077ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	f003 0308 	and.w	r3, r3, #8
 8007794:	2b08      	cmp	r3, #8
 8007796:	d110      	bne.n	80077ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2208      	movs	r2, #8
 800779e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f838 	bl	8007816 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2208      	movs	r2, #8
 80077aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e029      	b.n	800780e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077c8:	d111      	bne.n	80077ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f000 f81e 	bl	8007816 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2220      	movs	r2, #32
 80077de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e00f      	b.n	800780e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	69da      	ldr	r2, [r3, #28]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	4013      	ands	r3, r2
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	bf0c      	ite	eq
 80077fe:	2301      	moveq	r3, #1
 8007800:	2300      	movne	r3, #0
 8007802:	b2db      	uxtb	r3, r3
 8007804:	461a      	mov	r2, r3
 8007806:	79fb      	ldrb	r3, [r7, #7]
 8007808:	429a      	cmp	r2, r3
 800780a:	d0a0      	beq.n	800774e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007816:	b480      	push	{r7}
 8007818:	b095      	sub	sp, #84	@ 0x54
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007826:	e853 3f00 	ldrex	r3, [r3]
 800782a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800782c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800783c:	643b      	str	r3, [r7, #64]	@ 0x40
 800783e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007842:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007844:	e841 2300 	strex	r3, r2, [r1]
 8007848:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800784a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1e6      	bne.n	800781e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3308      	adds	r3, #8
 8007856:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	e853 3f00 	ldrex	r3, [r3]
 800785e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007866:	f023 0301 	bic.w	r3, r3, #1
 800786a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3308      	adds	r3, #8
 8007872:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007874:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007876:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007878:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800787a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800787c:	e841 2300 	strex	r3, r2, [r1]
 8007880:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e3      	bne.n	8007850 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800788c:	2b01      	cmp	r3, #1
 800788e:	d118      	bne.n	80078c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	60bb      	str	r3, [r7, #8]
   return(result);
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f023 0310 	bic.w	r3, r3, #16
 80078a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078ae:	61bb      	str	r3, [r7, #24]
 80078b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	6979      	ldr	r1, [r7, #20]
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	613b      	str	r3, [r7, #16]
   return(result);
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e6      	bne.n	8007890 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2220      	movs	r2, #32
 80078c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80078d6:	bf00      	nop
 80078d8:	3754      	adds	r7, #84	@ 0x54
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b085      	sub	sp, #20
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d101      	bne.n	80078f8 <HAL_UARTEx_DisableFifoMode+0x16>
 80078f4:	2302      	movs	r3, #2
 80078f6:	e027      	b.n	8007948 <HAL_UARTEx_DisableFifoMode+0x66>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2224      	movs	r2, #36	@ 0x24
 8007904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f022 0201 	bic.w	r2, r2, #1
 800791e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007926:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2220      	movs	r2, #32
 800793a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007964:	2b01      	cmp	r3, #1
 8007966:	d101      	bne.n	800796c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007968:	2302      	movs	r3, #2
 800796a:	e02d      	b.n	80079c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2224      	movs	r2, #36	@ 0x24
 8007978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 0201 	bic.w	r2, r2, #1
 8007992:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	430a      	orrs	r2, r1
 80079a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f84f 	bl	8007a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2220      	movs	r2, #32
 80079ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d101      	bne.n	80079e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079e4:	2302      	movs	r3, #2
 80079e6:	e02d      	b.n	8007a44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2224      	movs	r2, #36	@ 0x24
 80079f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 0201 	bic.w	r2, r2, #1
 8007a0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	683a      	ldr	r2, [r7, #0]
 8007a20:	430a      	orrs	r2, r1
 8007a22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f811 	bl	8007a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2220      	movs	r2, #32
 8007a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d108      	bne.n	8007a6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a6c:	e031      	b.n	8007ad2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a6e:	2308      	movs	r3, #8
 8007a70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a72:	2308      	movs	r3, #8
 8007a74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	0e5b      	lsrs	r3, r3, #25
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	f003 0307 	and.w	r3, r3, #7
 8007a84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	0f5b      	lsrs	r3, r3, #29
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	f003 0307 	and.w	r3, r3, #7
 8007a94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	7b3a      	ldrb	r2, [r7, #12]
 8007a9a:	4911      	ldr	r1, [pc, #68]	@ (8007ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8007a9c:	5c8a      	ldrb	r2, [r1, r2]
 8007a9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007aa2:	7b3a      	ldrb	r2, [r7, #12]
 8007aa4:	490f      	ldr	r1, [pc, #60]	@ (8007ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8007aa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007aa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
 8007ab6:	7b7a      	ldrb	r2, [r7, #13]
 8007ab8:	4909      	ldr	r1, [pc, #36]	@ (8007ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8007aba:	5c8a      	ldrb	r2, [r1, r2]
 8007abc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ac0:	7b7a      	ldrb	r2, [r7, #13]
 8007ac2:	4908      	ldr	r1, [pc, #32]	@ (8007ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8007ac4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ac6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007ad2:	bf00      	nop
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	080095c8 	.word	0x080095c8
 8007ae4:	080095d0 	.word	0x080095d0

08007ae8 <siscanf>:
 8007ae8:	b40e      	push	{r1, r2, r3}
 8007aea:	b530      	push	{r4, r5, lr}
 8007aec:	b09c      	sub	sp, #112	@ 0x70
 8007aee:	ac1f      	add	r4, sp, #124	@ 0x7c
 8007af0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007af4:	f854 5b04 	ldr.w	r5, [r4], #4
 8007af8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007afc:	9002      	str	r0, [sp, #8]
 8007afe:	9006      	str	r0, [sp, #24]
 8007b00:	f7f8 fb8e 	bl	8000220 <strlen>
 8007b04:	4b0b      	ldr	r3, [pc, #44]	@ (8007b34 <siscanf+0x4c>)
 8007b06:	9003      	str	r0, [sp, #12]
 8007b08:	9007      	str	r0, [sp, #28]
 8007b0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b0c:	480a      	ldr	r0, [pc, #40]	@ (8007b38 <siscanf+0x50>)
 8007b0e:	9401      	str	r4, [sp, #4]
 8007b10:	2300      	movs	r3, #0
 8007b12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b14:	9314      	str	r3, [sp, #80]	@ 0x50
 8007b16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007b1e:	462a      	mov	r2, r5
 8007b20:	4623      	mov	r3, r4
 8007b22:	a902      	add	r1, sp, #8
 8007b24:	6800      	ldr	r0, [r0, #0]
 8007b26:	f000 fb13 	bl	8008150 <__ssvfiscanf_r>
 8007b2a:	b01c      	add	sp, #112	@ 0x70
 8007b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b30:	b003      	add	sp, #12
 8007b32:	4770      	bx	lr
 8007b34:	08007b5f 	.word	0x08007b5f
 8007b38:	20000090 	.word	0x20000090

08007b3c <__sread>:
 8007b3c:	b510      	push	{r4, lr}
 8007b3e:	460c      	mov	r4, r1
 8007b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b44:	f000 fa10 	bl	8007f68 <_read_r>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	bfab      	itete	ge
 8007b4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b4e:	89a3      	ldrhlt	r3, [r4, #12]
 8007b50:	181b      	addge	r3, r3, r0
 8007b52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b56:	bfac      	ite	ge
 8007b58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b5a:	81a3      	strhlt	r3, [r4, #12]
 8007b5c:	bd10      	pop	{r4, pc}

08007b5e <__seofread>:
 8007b5e:	2000      	movs	r0, #0
 8007b60:	4770      	bx	lr

08007b62 <__swrite>:
 8007b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b66:	461f      	mov	r7, r3
 8007b68:	898b      	ldrh	r3, [r1, #12]
 8007b6a:	05db      	lsls	r3, r3, #23
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	460c      	mov	r4, r1
 8007b70:	4616      	mov	r6, r2
 8007b72:	d505      	bpl.n	8007b80 <__swrite+0x1e>
 8007b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b78:	2302      	movs	r3, #2
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f000 f9e2 	bl	8007f44 <_lseek_r>
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b8a:	81a3      	strh	r3, [r4, #12]
 8007b8c:	4632      	mov	r2, r6
 8007b8e:	463b      	mov	r3, r7
 8007b90:	4628      	mov	r0, r5
 8007b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b96:	f000 b9f9 	b.w	8007f8c <_write_r>

08007b9a <__sseek>:
 8007b9a:	b510      	push	{r4, lr}
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba2:	f000 f9cf 	bl	8007f44 <_lseek_r>
 8007ba6:	1c43      	adds	r3, r0, #1
 8007ba8:	89a3      	ldrh	r3, [r4, #12]
 8007baa:	bf15      	itete	ne
 8007bac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007bae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007bb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007bb6:	81a3      	strheq	r3, [r4, #12]
 8007bb8:	bf18      	it	ne
 8007bba:	81a3      	strhne	r3, [r4, #12]
 8007bbc:	bd10      	pop	{r4, pc}

08007bbe <__sclose>:
 8007bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc2:	f000 b9af 	b.w	8007f24 <_close_r>
	...

08007bc8 <std>:
 8007bc8:	2300      	movs	r3, #0
 8007bca:	b510      	push	{r4, lr}
 8007bcc:	4604      	mov	r4, r0
 8007bce:	e9c0 3300 	strd	r3, r3, [r0]
 8007bd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bd6:	6083      	str	r3, [r0, #8]
 8007bd8:	8181      	strh	r1, [r0, #12]
 8007bda:	6643      	str	r3, [r0, #100]	@ 0x64
 8007bdc:	81c2      	strh	r2, [r0, #14]
 8007bde:	6183      	str	r3, [r0, #24]
 8007be0:	4619      	mov	r1, r3
 8007be2:	2208      	movs	r2, #8
 8007be4:	305c      	adds	r0, #92	@ 0x5c
 8007be6:	f000 f995 	bl	8007f14 <memset>
 8007bea:	4b0d      	ldr	r3, [pc, #52]	@ (8007c20 <std+0x58>)
 8007bec:	6263      	str	r3, [r4, #36]	@ 0x24
 8007bee:	4b0d      	ldr	r3, [pc, #52]	@ (8007c24 <std+0x5c>)
 8007bf0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8007c28 <std+0x60>)
 8007bf4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8007c2c <std+0x64>)
 8007bf8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8007c30 <std+0x68>)
 8007bfc:	6224      	str	r4, [r4, #32]
 8007bfe:	429c      	cmp	r4, r3
 8007c00:	d006      	beq.n	8007c10 <std+0x48>
 8007c02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c06:	4294      	cmp	r4, r2
 8007c08:	d002      	beq.n	8007c10 <std+0x48>
 8007c0a:	33d0      	adds	r3, #208	@ 0xd0
 8007c0c:	429c      	cmp	r4, r3
 8007c0e:	d105      	bne.n	8007c1c <std+0x54>
 8007c10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c18:	f000 b9f4 	b.w	8008004 <__retarget_lock_init_recursive>
 8007c1c:	bd10      	pop	{r4, pc}
 8007c1e:	bf00      	nop
 8007c20:	08007b3d 	.word	0x08007b3d
 8007c24:	08007b63 	.word	0x08007b63
 8007c28:	08007b9b 	.word	0x08007b9b
 8007c2c:	08007bbf 	.word	0x08007bbf
 8007c30:	20000470 	.word	0x20000470

08007c34 <stdio_exit_handler>:
 8007c34:	4a02      	ldr	r2, [pc, #8]	@ (8007c40 <stdio_exit_handler+0xc>)
 8007c36:	4903      	ldr	r1, [pc, #12]	@ (8007c44 <stdio_exit_handler+0x10>)
 8007c38:	4803      	ldr	r0, [pc, #12]	@ (8007c48 <stdio_exit_handler+0x14>)
 8007c3a:	f000 b8ef 	b.w	8007e1c <_fwalk_sglue>
 8007c3e:	bf00      	nop
 8007c40:	20000084 	.word	0x20000084
 8007c44:	08008995 	.word	0x08008995
 8007c48:	20000094 	.word	0x20000094

08007c4c <cleanup_stdio>:
 8007c4c:	6841      	ldr	r1, [r0, #4]
 8007c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8007c80 <cleanup_stdio+0x34>)
 8007c50:	4299      	cmp	r1, r3
 8007c52:	b510      	push	{r4, lr}
 8007c54:	4604      	mov	r4, r0
 8007c56:	d001      	beq.n	8007c5c <cleanup_stdio+0x10>
 8007c58:	f000 fe9c 	bl	8008994 <_fflush_r>
 8007c5c:	68a1      	ldr	r1, [r4, #8]
 8007c5e:	4b09      	ldr	r3, [pc, #36]	@ (8007c84 <cleanup_stdio+0x38>)
 8007c60:	4299      	cmp	r1, r3
 8007c62:	d002      	beq.n	8007c6a <cleanup_stdio+0x1e>
 8007c64:	4620      	mov	r0, r4
 8007c66:	f000 fe95 	bl	8008994 <_fflush_r>
 8007c6a:	68e1      	ldr	r1, [r4, #12]
 8007c6c:	4b06      	ldr	r3, [pc, #24]	@ (8007c88 <cleanup_stdio+0x3c>)
 8007c6e:	4299      	cmp	r1, r3
 8007c70:	d004      	beq.n	8007c7c <cleanup_stdio+0x30>
 8007c72:	4620      	mov	r0, r4
 8007c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c78:	f000 be8c 	b.w	8008994 <_fflush_r>
 8007c7c:	bd10      	pop	{r4, pc}
 8007c7e:	bf00      	nop
 8007c80:	20000470 	.word	0x20000470
 8007c84:	200004d8 	.word	0x200004d8
 8007c88:	20000540 	.word	0x20000540

08007c8c <global_stdio_init.part.0>:
 8007c8c:	b510      	push	{r4, lr}
 8007c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8007cbc <global_stdio_init.part.0+0x30>)
 8007c90:	4c0b      	ldr	r4, [pc, #44]	@ (8007cc0 <global_stdio_init.part.0+0x34>)
 8007c92:	4a0c      	ldr	r2, [pc, #48]	@ (8007cc4 <global_stdio_init.part.0+0x38>)
 8007c94:	601a      	str	r2, [r3, #0]
 8007c96:	4620      	mov	r0, r4
 8007c98:	2200      	movs	r2, #0
 8007c9a:	2104      	movs	r1, #4
 8007c9c:	f7ff ff94 	bl	8007bc8 <std>
 8007ca0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	2109      	movs	r1, #9
 8007ca8:	f7ff ff8e 	bl	8007bc8 <std>
 8007cac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cb6:	2112      	movs	r1, #18
 8007cb8:	f7ff bf86 	b.w	8007bc8 <std>
 8007cbc:	200005a8 	.word	0x200005a8
 8007cc0:	20000470 	.word	0x20000470
 8007cc4:	08007c35 	.word	0x08007c35

08007cc8 <__sfp_lock_acquire>:
 8007cc8:	4801      	ldr	r0, [pc, #4]	@ (8007cd0 <__sfp_lock_acquire+0x8>)
 8007cca:	f000 b99c 	b.w	8008006 <__retarget_lock_acquire_recursive>
 8007cce:	bf00      	nop
 8007cd0:	200005b1 	.word	0x200005b1

08007cd4 <__sfp_lock_release>:
 8007cd4:	4801      	ldr	r0, [pc, #4]	@ (8007cdc <__sfp_lock_release+0x8>)
 8007cd6:	f000 b997 	b.w	8008008 <__retarget_lock_release_recursive>
 8007cda:	bf00      	nop
 8007cdc:	200005b1 	.word	0x200005b1

08007ce0 <__sinit>:
 8007ce0:	b510      	push	{r4, lr}
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	f7ff fff0 	bl	8007cc8 <__sfp_lock_acquire>
 8007ce8:	6a23      	ldr	r3, [r4, #32]
 8007cea:	b11b      	cbz	r3, 8007cf4 <__sinit+0x14>
 8007cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cf0:	f7ff bff0 	b.w	8007cd4 <__sfp_lock_release>
 8007cf4:	4b04      	ldr	r3, [pc, #16]	@ (8007d08 <__sinit+0x28>)
 8007cf6:	6223      	str	r3, [r4, #32]
 8007cf8:	4b04      	ldr	r3, [pc, #16]	@ (8007d0c <__sinit+0x2c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1f5      	bne.n	8007cec <__sinit+0xc>
 8007d00:	f7ff ffc4 	bl	8007c8c <global_stdio_init.part.0>
 8007d04:	e7f2      	b.n	8007cec <__sinit+0xc>
 8007d06:	bf00      	nop
 8007d08:	08007c4d 	.word	0x08007c4d
 8007d0c:	200005a8 	.word	0x200005a8

08007d10 <_strtol_l.constprop.0>:
 8007d10:	2b24      	cmp	r3, #36	@ 0x24
 8007d12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d16:	4686      	mov	lr, r0
 8007d18:	4690      	mov	r8, r2
 8007d1a:	d801      	bhi.n	8007d20 <_strtol_l.constprop.0+0x10>
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d106      	bne.n	8007d2e <_strtol_l.constprop.0+0x1e>
 8007d20:	f000 f946 	bl	8007fb0 <__errno>
 8007d24:	2316      	movs	r3, #22
 8007d26:	6003      	str	r3, [r0, #0]
 8007d28:	2000      	movs	r0, #0
 8007d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d2e:	4834      	ldr	r0, [pc, #208]	@ (8007e00 <_strtol_l.constprop.0+0xf0>)
 8007d30:	460d      	mov	r5, r1
 8007d32:	462a      	mov	r2, r5
 8007d34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d38:	5d06      	ldrb	r6, [r0, r4]
 8007d3a:	f016 0608 	ands.w	r6, r6, #8
 8007d3e:	d1f8      	bne.n	8007d32 <_strtol_l.constprop.0+0x22>
 8007d40:	2c2d      	cmp	r4, #45	@ 0x2d
 8007d42:	d12d      	bne.n	8007da0 <_strtol_l.constprop.0+0x90>
 8007d44:	782c      	ldrb	r4, [r5, #0]
 8007d46:	2601      	movs	r6, #1
 8007d48:	1c95      	adds	r5, r2, #2
 8007d4a:	f033 0210 	bics.w	r2, r3, #16
 8007d4e:	d109      	bne.n	8007d64 <_strtol_l.constprop.0+0x54>
 8007d50:	2c30      	cmp	r4, #48	@ 0x30
 8007d52:	d12a      	bne.n	8007daa <_strtol_l.constprop.0+0x9a>
 8007d54:	782a      	ldrb	r2, [r5, #0]
 8007d56:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007d5a:	2a58      	cmp	r2, #88	@ 0x58
 8007d5c:	d125      	bne.n	8007daa <_strtol_l.constprop.0+0x9a>
 8007d5e:	786c      	ldrb	r4, [r5, #1]
 8007d60:	2310      	movs	r3, #16
 8007d62:	3502      	adds	r5, #2
 8007d64:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007d68:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	fbbc f9f3 	udiv	r9, ip, r3
 8007d72:	4610      	mov	r0, r2
 8007d74:	fb03 ca19 	mls	sl, r3, r9, ip
 8007d78:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007d7c:	2f09      	cmp	r7, #9
 8007d7e:	d81b      	bhi.n	8007db8 <_strtol_l.constprop.0+0xa8>
 8007d80:	463c      	mov	r4, r7
 8007d82:	42a3      	cmp	r3, r4
 8007d84:	dd27      	ble.n	8007dd6 <_strtol_l.constprop.0+0xc6>
 8007d86:	1c57      	adds	r7, r2, #1
 8007d88:	d007      	beq.n	8007d9a <_strtol_l.constprop.0+0x8a>
 8007d8a:	4581      	cmp	r9, r0
 8007d8c:	d320      	bcc.n	8007dd0 <_strtol_l.constprop.0+0xc0>
 8007d8e:	d101      	bne.n	8007d94 <_strtol_l.constprop.0+0x84>
 8007d90:	45a2      	cmp	sl, r4
 8007d92:	db1d      	blt.n	8007dd0 <_strtol_l.constprop.0+0xc0>
 8007d94:	fb00 4003 	mla	r0, r0, r3, r4
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d9e:	e7eb      	b.n	8007d78 <_strtol_l.constprop.0+0x68>
 8007da0:	2c2b      	cmp	r4, #43	@ 0x2b
 8007da2:	bf04      	itt	eq
 8007da4:	782c      	ldrbeq	r4, [r5, #0]
 8007da6:	1c95      	addeq	r5, r2, #2
 8007da8:	e7cf      	b.n	8007d4a <_strtol_l.constprop.0+0x3a>
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1da      	bne.n	8007d64 <_strtol_l.constprop.0+0x54>
 8007dae:	2c30      	cmp	r4, #48	@ 0x30
 8007db0:	bf0c      	ite	eq
 8007db2:	2308      	moveq	r3, #8
 8007db4:	230a      	movne	r3, #10
 8007db6:	e7d5      	b.n	8007d64 <_strtol_l.constprop.0+0x54>
 8007db8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007dbc:	2f19      	cmp	r7, #25
 8007dbe:	d801      	bhi.n	8007dc4 <_strtol_l.constprop.0+0xb4>
 8007dc0:	3c37      	subs	r4, #55	@ 0x37
 8007dc2:	e7de      	b.n	8007d82 <_strtol_l.constprop.0+0x72>
 8007dc4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007dc8:	2f19      	cmp	r7, #25
 8007dca:	d804      	bhi.n	8007dd6 <_strtol_l.constprop.0+0xc6>
 8007dcc:	3c57      	subs	r4, #87	@ 0x57
 8007dce:	e7d8      	b.n	8007d82 <_strtol_l.constprop.0+0x72>
 8007dd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007dd4:	e7e1      	b.n	8007d9a <_strtol_l.constprop.0+0x8a>
 8007dd6:	1c53      	adds	r3, r2, #1
 8007dd8:	d108      	bne.n	8007dec <_strtol_l.constprop.0+0xdc>
 8007dda:	2322      	movs	r3, #34	@ 0x22
 8007ddc:	f8ce 3000 	str.w	r3, [lr]
 8007de0:	4660      	mov	r0, ip
 8007de2:	f1b8 0f00 	cmp.w	r8, #0
 8007de6:	d0a0      	beq.n	8007d2a <_strtol_l.constprop.0+0x1a>
 8007de8:	1e69      	subs	r1, r5, #1
 8007dea:	e006      	b.n	8007dfa <_strtol_l.constprop.0+0xea>
 8007dec:	b106      	cbz	r6, 8007df0 <_strtol_l.constprop.0+0xe0>
 8007dee:	4240      	negs	r0, r0
 8007df0:	f1b8 0f00 	cmp.w	r8, #0
 8007df4:	d099      	beq.n	8007d2a <_strtol_l.constprop.0+0x1a>
 8007df6:	2a00      	cmp	r2, #0
 8007df8:	d1f6      	bne.n	8007de8 <_strtol_l.constprop.0+0xd8>
 8007dfa:	f8c8 1000 	str.w	r1, [r8]
 8007dfe:	e794      	b.n	8007d2a <_strtol_l.constprop.0+0x1a>
 8007e00:	080095d9 	.word	0x080095d9

08007e04 <_strtol_r>:
 8007e04:	f7ff bf84 	b.w	8007d10 <_strtol_l.constprop.0>

08007e08 <strtol>:
 8007e08:	4613      	mov	r3, r2
 8007e0a:	460a      	mov	r2, r1
 8007e0c:	4601      	mov	r1, r0
 8007e0e:	4802      	ldr	r0, [pc, #8]	@ (8007e18 <strtol+0x10>)
 8007e10:	6800      	ldr	r0, [r0, #0]
 8007e12:	f7ff bf7d 	b.w	8007d10 <_strtol_l.constprop.0>
 8007e16:	bf00      	nop
 8007e18:	20000090 	.word	0x20000090

08007e1c <_fwalk_sglue>:
 8007e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e20:	4607      	mov	r7, r0
 8007e22:	4688      	mov	r8, r1
 8007e24:	4614      	mov	r4, r2
 8007e26:	2600      	movs	r6, #0
 8007e28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e2c:	f1b9 0901 	subs.w	r9, r9, #1
 8007e30:	d505      	bpl.n	8007e3e <_fwalk_sglue+0x22>
 8007e32:	6824      	ldr	r4, [r4, #0]
 8007e34:	2c00      	cmp	r4, #0
 8007e36:	d1f7      	bne.n	8007e28 <_fwalk_sglue+0xc>
 8007e38:	4630      	mov	r0, r6
 8007e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e3e:	89ab      	ldrh	r3, [r5, #12]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d907      	bls.n	8007e54 <_fwalk_sglue+0x38>
 8007e44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	d003      	beq.n	8007e54 <_fwalk_sglue+0x38>
 8007e4c:	4629      	mov	r1, r5
 8007e4e:	4638      	mov	r0, r7
 8007e50:	47c0      	blx	r8
 8007e52:	4306      	orrs	r6, r0
 8007e54:	3568      	adds	r5, #104	@ 0x68
 8007e56:	e7e9      	b.n	8007e2c <_fwalk_sglue+0x10>

08007e58 <_puts_r>:
 8007e58:	6a03      	ldr	r3, [r0, #32]
 8007e5a:	b570      	push	{r4, r5, r6, lr}
 8007e5c:	6884      	ldr	r4, [r0, #8]
 8007e5e:	4605      	mov	r5, r0
 8007e60:	460e      	mov	r6, r1
 8007e62:	b90b      	cbnz	r3, 8007e68 <_puts_r+0x10>
 8007e64:	f7ff ff3c 	bl	8007ce0 <__sinit>
 8007e68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e6a:	07db      	lsls	r3, r3, #31
 8007e6c:	d405      	bmi.n	8007e7a <_puts_r+0x22>
 8007e6e:	89a3      	ldrh	r3, [r4, #12]
 8007e70:	0598      	lsls	r0, r3, #22
 8007e72:	d402      	bmi.n	8007e7a <_puts_r+0x22>
 8007e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e76:	f000 f8c6 	bl	8008006 <__retarget_lock_acquire_recursive>
 8007e7a:	89a3      	ldrh	r3, [r4, #12]
 8007e7c:	0719      	lsls	r1, r3, #28
 8007e7e:	d502      	bpl.n	8007e86 <_puts_r+0x2e>
 8007e80:	6923      	ldr	r3, [r4, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d135      	bne.n	8007ef2 <_puts_r+0x9a>
 8007e86:	4621      	mov	r1, r4
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f000 fecd 	bl	8008c28 <__swsetup_r>
 8007e8e:	b380      	cbz	r0, 8007ef2 <_puts_r+0x9a>
 8007e90:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007e94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e96:	07da      	lsls	r2, r3, #31
 8007e98:	d405      	bmi.n	8007ea6 <_puts_r+0x4e>
 8007e9a:	89a3      	ldrh	r3, [r4, #12]
 8007e9c:	059b      	lsls	r3, r3, #22
 8007e9e:	d402      	bmi.n	8007ea6 <_puts_r+0x4e>
 8007ea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ea2:	f000 f8b1 	bl	8008008 <__retarget_lock_release_recursive>
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	bd70      	pop	{r4, r5, r6, pc}
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	da04      	bge.n	8007eb8 <_puts_r+0x60>
 8007eae:	69a2      	ldr	r2, [r4, #24]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	dc17      	bgt.n	8007ee4 <_puts_r+0x8c>
 8007eb4:	290a      	cmp	r1, #10
 8007eb6:	d015      	beq.n	8007ee4 <_puts_r+0x8c>
 8007eb8:	6823      	ldr	r3, [r4, #0]
 8007eba:	1c5a      	adds	r2, r3, #1
 8007ebc:	6022      	str	r2, [r4, #0]
 8007ebe:	7019      	strb	r1, [r3, #0]
 8007ec0:	68a3      	ldr	r3, [r4, #8]
 8007ec2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	60a3      	str	r3, [r4, #8]
 8007eca:	2900      	cmp	r1, #0
 8007ecc:	d1ed      	bne.n	8007eaa <_puts_r+0x52>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	da11      	bge.n	8007ef6 <_puts_r+0x9e>
 8007ed2:	4622      	mov	r2, r4
 8007ed4:	210a      	movs	r1, #10
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f000 fe68 	bl	8008bac <__swbuf_r>
 8007edc:	3001      	adds	r0, #1
 8007ede:	d0d7      	beq.n	8007e90 <_puts_r+0x38>
 8007ee0:	250a      	movs	r5, #10
 8007ee2:	e7d7      	b.n	8007e94 <_puts_r+0x3c>
 8007ee4:	4622      	mov	r2, r4
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f000 fe60 	bl	8008bac <__swbuf_r>
 8007eec:	3001      	adds	r0, #1
 8007eee:	d1e7      	bne.n	8007ec0 <_puts_r+0x68>
 8007ef0:	e7ce      	b.n	8007e90 <_puts_r+0x38>
 8007ef2:	3e01      	subs	r6, #1
 8007ef4:	e7e4      	b.n	8007ec0 <_puts_r+0x68>
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	6022      	str	r2, [r4, #0]
 8007efc:	220a      	movs	r2, #10
 8007efe:	701a      	strb	r2, [r3, #0]
 8007f00:	e7ee      	b.n	8007ee0 <_puts_r+0x88>
	...

08007f04 <puts>:
 8007f04:	4b02      	ldr	r3, [pc, #8]	@ (8007f10 <puts+0xc>)
 8007f06:	4601      	mov	r1, r0
 8007f08:	6818      	ldr	r0, [r3, #0]
 8007f0a:	f7ff bfa5 	b.w	8007e58 <_puts_r>
 8007f0e:	bf00      	nop
 8007f10:	20000090 	.word	0x20000090

08007f14 <memset>:
 8007f14:	4402      	add	r2, r0
 8007f16:	4603      	mov	r3, r0
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d100      	bne.n	8007f1e <memset+0xa>
 8007f1c:	4770      	bx	lr
 8007f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f22:	e7f9      	b.n	8007f18 <memset+0x4>

08007f24 <_close_r>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	4d06      	ldr	r5, [pc, #24]	@ (8007f40 <_close_r+0x1c>)
 8007f28:	2300      	movs	r3, #0
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	4608      	mov	r0, r1
 8007f2e:	602b      	str	r3, [r5, #0]
 8007f30:	f7fb fa48 	bl	80033c4 <_close>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <_close_r+0x1a>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	b103      	cbz	r3, 8007f3e <_close_r+0x1a>
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	200005ac 	.word	0x200005ac

08007f44 <_lseek_r>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	4d07      	ldr	r5, [pc, #28]	@ (8007f64 <_lseek_r+0x20>)
 8007f48:	4604      	mov	r4, r0
 8007f4a:	4608      	mov	r0, r1
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	2200      	movs	r2, #0
 8007f50:	602a      	str	r2, [r5, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	f7fb fa5d 	bl	8003412 <_lseek>
 8007f58:	1c43      	adds	r3, r0, #1
 8007f5a:	d102      	bne.n	8007f62 <_lseek_r+0x1e>
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	b103      	cbz	r3, 8007f62 <_lseek_r+0x1e>
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	bd38      	pop	{r3, r4, r5, pc}
 8007f64:	200005ac 	.word	0x200005ac

08007f68 <_read_r>:
 8007f68:	b538      	push	{r3, r4, r5, lr}
 8007f6a:	4d07      	ldr	r5, [pc, #28]	@ (8007f88 <_read_r+0x20>)
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	4608      	mov	r0, r1
 8007f70:	4611      	mov	r1, r2
 8007f72:	2200      	movs	r2, #0
 8007f74:	602a      	str	r2, [r5, #0]
 8007f76:	461a      	mov	r2, r3
 8007f78:	f7fb f9eb 	bl	8003352 <_read>
 8007f7c:	1c43      	adds	r3, r0, #1
 8007f7e:	d102      	bne.n	8007f86 <_read_r+0x1e>
 8007f80:	682b      	ldr	r3, [r5, #0]
 8007f82:	b103      	cbz	r3, 8007f86 <_read_r+0x1e>
 8007f84:	6023      	str	r3, [r4, #0]
 8007f86:	bd38      	pop	{r3, r4, r5, pc}
 8007f88:	200005ac 	.word	0x200005ac

08007f8c <_write_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	4d07      	ldr	r5, [pc, #28]	@ (8007fac <_write_r+0x20>)
 8007f90:	4604      	mov	r4, r0
 8007f92:	4608      	mov	r0, r1
 8007f94:	4611      	mov	r1, r2
 8007f96:	2200      	movs	r2, #0
 8007f98:	602a      	str	r2, [r5, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	f7fb f9f6 	bl	800338c <_write>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d102      	bne.n	8007faa <_write_r+0x1e>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b103      	cbz	r3, 8007faa <_write_r+0x1e>
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	200005ac 	.word	0x200005ac

08007fb0 <__errno>:
 8007fb0:	4b01      	ldr	r3, [pc, #4]	@ (8007fb8 <__errno+0x8>)
 8007fb2:	6818      	ldr	r0, [r3, #0]
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	20000090 	.word	0x20000090

08007fbc <__libc_init_array>:
 8007fbc:	b570      	push	{r4, r5, r6, lr}
 8007fbe:	4d0d      	ldr	r5, [pc, #52]	@ (8007ff4 <__libc_init_array+0x38>)
 8007fc0:	4c0d      	ldr	r4, [pc, #52]	@ (8007ff8 <__libc_init_array+0x3c>)
 8007fc2:	1b64      	subs	r4, r4, r5
 8007fc4:	10a4      	asrs	r4, r4, #2
 8007fc6:	2600      	movs	r6, #0
 8007fc8:	42a6      	cmp	r6, r4
 8007fca:	d109      	bne.n	8007fe0 <__libc_init_array+0x24>
 8007fcc:	4d0b      	ldr	r5, [pc, #44]	@ (8007ffc <__libc_init_array+0x40>)
 8007fce:	4c0c      	ldr	r4, [pc, #48]	@ (8008000 <__libc_init_array+0x44>)
 8007fd0:	f001 fa9c 	bl	800950c <_init>
 8007fd4:	1b64      	subs	r4, r4, r5
 8007fd6:	10a4      	asrs	r4, r4, #2
 8007fd8:	2600      	movs	r6, #0
 8007fda:	42a6      	cmp	r6, r4
 8007fdc:	d105      	bne.n	8007fea <__libc_init_array+0x2e>
 8007fde:	bd70      	pop	{r4, r5, r6, pc}
 8007fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fe4:	4798      	blx	r3
 8007fe6:	3601      	adds	r6, #1
 8007fe8:	e7ee      	b.n	8007fc8 <__libc_init_array+0xc>
 8007fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fee:	4798      	blx	r3
 8007ff0:	3601      	adds	r6, #1
 8007ff2:	e7f2      	b.n	8007fda <__libc_init_array+0x1e>
 8007ff4:	08009770 	.word	0x08009770
 8007ff8:	08009770 	.word	0x08009770
 8007ffc:	08009770 	.word	0x08009770
 8008000:	08009774 	.word	0x08009774

08008004 <__retarget_lock_init_recursive>:
 8008004:	4770      	bx	lr

08008006 <__retarget_lock_acquire_recursive>:
 8008006:	4770      	bx	lr

08008008 <__retarget_lock_release_recursive>:
 8008008:	4770      	bx	lr
	...

0800800c <_free_r>:
 800800c:	b538      	push	{r3, r4, r5, lr}
 800800e:	4605      	mov	r5, r0
 8008010:	2900      	cmp	r1, #0
 8008012:	d041      	beq.n	8008098 <_free_r+0x8c>
 8008014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008018:	1f0c      	subs	r4, r1, #4
 800801a:	2b00      	cmp	r3, #0
 800801c:	bfb8      	it	lt
 800801e:	18e4      	addlt	r4, r4, r3
 8008020:	f000 fce0 	bl	80089e4 <__malloc_lock>
 8008024:	4a1d      	ldr	r2, [pc, #116]	@ (800809c <_free_r+0x90>)
 8008026:	6813      	ldr	r3, [r2, #0]
 8008028:	b933      	cbnz	r3, 8008038 <_free_r+0x2c>
 800802a:	6063      	str	r3, [r4, #4]
 800802c:	6014      	str	r4, [r2, #0]
 800802e:	4628      	mov	r0, r5
 8008030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008034:	f000 bcdc 	b.w	80089f0 <__malloc_unlock>
 8008038:	42a3      	cmp	r3, r4
 800803a:	d908      	bls.n	800804e <_free_r+0x42>
 800803c:	6820      	ldr	r0, [r4, #0]
 800803e:	1821      	adds	r1, r4, r0
 8008040:	428b      	cmp	r3, r1
 8008042:	bf01      	itttt	eq
 8008044:	6819      	ldreq	r1, [r3, #0]
 8008046:	685b      	ldreq	r3, [r3, #4]
 8008048:	1809      	addeq	r1, r1, r0
 800804a:	6021      	streq	r1, [r4, #0]
 800804c:	e7ed      	b.n	800802a <_free_r+0x1e>
 800804e:	461a      	mov	r2, r3
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	b10b      	cbz	r3, 8008058 <_free_r+0x4c>
 8008054:	42a3      	cmp	r3, r4
 8008056:	d9fa      	bls.n	800804e <_free_r+0x42>
 8008058:	6811      	ldr	r1, [r2, #0]
 800805a:	1850      	adds	r0, r2, r1
 800805c:	42a0      	cmp	r0, r4
 800805e:	d10b      	bne.n	8008078 <_free_r+0x6c>
 8008060:	6820      	ldr	r0, [r4, #0]
 8008062:	4401      	add	r1, r0
 8008064:	1850      	adds	r0, r2, r1
 8008066:	4283      	cmp	r3, r0
 8008068:	6011      	str	r1, [r2, #0]
 800806a:	d1e0      	bne.n	800802e <_free_r+0x22>
 800806c:	6818      	ldr	r0, [r3, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	6053      	str	r3, [r2, #4]
 8008072:	4408      	add	r0, r1
 8008074:	6010      	str	r0, [r2, #0]
 8008076:	e7da      	b.n	800802e <_free_r+0x22>
 8008078:	d902      	bls.n	8008080 <_free_r+0x74>
 800807a:	230c      	movs	r3, #12
 800807c:	602b      	str	r3, [r5, #0]
 800807e:	e7d6      	b.n	800802e <_free_r+0x22>
 8008080:	6820      	ldr	r0, [r4, #0]
 8008082:	1821      	adds	r1, r4, r0
 8008084:	428b      	cmp	r3, r1
 8008086:	bf04      	itt	eq
 8008088:	6819      	ldreq	r1, [r3, #0]
 800808a:	685b      	ldreq	r3, [r3, #4]
 800808c:	6063      	str	r3, [r4, #4]
 800808e:	bf04      	itt	eq
 8008090:	1809      	addeq	r1, r1, r0
 8008092:	6021      	streq	r1, [r4, #0]
 8008094:	6054      	str	r4, [r2, #4]
 8008096:	e7ca      	b.n	800802e <_free_r+0x22>
 8008098:	bd38      	pop	{r3, r4, r5, pc}
 800809a:	bf00      	nop
 800809c:	200005b8 	.word	0x200005b8

080080a0 <_sungetc_r>:
 80080a0:	b538      	push	{r3, r4, r5, lr}
 80080a2:	1c4b      	adds	r3, r1, #1
 80080a4:	4614      	mov	r4, r2
 80080a6:	d103      	bne.n	80080b0 <_sungetc_r+0x10>
 80080a8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80080ac:	4628      	mov	r0, r5
 80080ae:	bd38      	pop	{r3, r4, r5, pc}
 80080b0:	8993      	ldrh	r3, [r2, #12]
 80080b2:	f023 0320 	bic.w	r3, r3, #32
 80080b6:	8193      	strh	r3, [r2, #12]
 80080b8:	6853      	ldr	r3, [r2, #4]
 80080ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80080bc:	b2cd      	uxtb	r5, r1
 80080be:	b18a      	cbz	r2, 80080e4 <_sungetc_r+0x44>
 80080c0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80080c2:	429a      	cmp	r2, r3
 80080c4:	dd08      	ble.n	80080d8 <_sungetc_r+0x38>
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	1e5a      	subs	r2, r3, #1
 80080ca:	6022      	str	r2, [r4, #0]
 80080cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80080d0:	6863      	ldr	r3, [r4, #4]
 80080d2:	3301      	adds	r3, #1
 80080d4:	6063      	str	r3, [r4, #4]
 80080d6:	e7e9      	b.n	80080ac <_sungetc_r+0xc>
 80080d8:	4621      	mov	r1, r4
 80080da:	f000 fc8f 	bl	80089fc <__submore>
 80080de:	2800      	cmp	r0, #0
 80080e0:	d0f1      	beq.n	80080c6 <_sungetc_r+0x26>
 80080e2:	e7e1      	b.n	80080a8 <_sungetc_r+0x8>
 80080e4:	6921      	ldr	r1, [r4, #16]
 80080e6:	6822      	ldr	r2, [r4, #0]
 80080e8:	b141      	cbz	r1, 80080fc <_sungetc_r+0x5c>
 80080ea:	4291      	cmp	r1, r2
 80080ec:	d206      	bcs.n	80080fc <_sungetc_r+0x5c>
 80080ee:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80080f2:	42a9      	cmp	r1, r5
 80080f4:	d102      	bne.n	80080fc <_sungetc_r+0x5c>
 80080f6:	3a01      	subs	r2, #1
 80080f8:	6022      	str	r2, [r4, #0]
 80080fa:	e7ea      	b.n	80080d2 <_sungetc_r+0x32>
 80080fc:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8008100:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008104:	6363      	str	r3, [r4, #52]	@ 0x34
 8008106:	2303      	movs	r3, #3
 8008108:	63a3      	str	r3, [r4, #56]	@ 0x38
 800810a:	4623      	mov	r3, r4
 800810c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	2301      	movs	r3, #1
 8008114:	e7de      	b.n	80080d4 <_sungetc_r+0x34>

08008116 <__ssrefill_r>:
 8008116:	b510      	push	{r4, lr}
 8008118:	460c      	mov	r4, r1
 800811a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800811c:	b169      	cbz	r1, 800813a <__ssrefill_r+0x24>
 800811e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008122:	4299      	cmp	r1, r3
 8008124:	d001      	beq.n	800812a <__ssrefill_r+0x14>
 8008126:	f7ff ff71 	bl	800800c <_free_r>
 800812a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800812c:	6063      	str	r3, [r4, #4]
 800812e:	2000      	movs	r0, #0
 8008130:	6360      	str	r0, [r4, #52]	@ 0x34
 8008132:	b113      	cbz	r3, 800813a <__ssrefill_r+0x24>
 8008134:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008136:	6023      	str	r3, [r4, #0]
 8008138:	bd10      	pop	{r4, pc}
 800813a:	6923      	ldr	r3, [r4, #16]
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	2300      	movs	r3, #0
 8008140:	6063      	str	r3, [r4, #4]
 8008142:	89a3      	ldrh	r3, [r4, #12]
 8008144:	f043 0320 	orr.w	r3, r3, #32
 8008148:	81a3      	strh	r3, [r4, #12]
 800814a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800814e:	e7f3      	b.n	8008138 <__ssrefill_r+0x22>

08008150 <__ssvfiscanf_r>:
 8008150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008154:	460c      	mov	r4, r1
 8008156:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800815a:	2100      	movs	r1, #0
 800815c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8008160:	49a5      	ldr	r1, [pc, #660]	@ (80083f8 <__ssvfiscanf_r+0x2a8>)
 8008162:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008164:	f10d 0804 	add.w	r8, sp, #4
 8008168:	49a4      	ldr	r1, [pc, #656]	@ (80083fc <__ssvfiscanf_r+0x2ac>)
 800816a:	4fa5      	ldr	r7, [pc, #660]	@ (8008400 <__ssvfiscanf_r+0x2b0>)
 800816c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008170:	4606      	mov	r6, r0
 8008172:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	7813      	ldrb	r3, [r2, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 8158 	beq.w	800842e <__ssvfiscanf_r+0x2de>
 800817e:	5cf9      	ldrb	r1, [r7, r3]
 8008180:	f011 0108 	ands.w	r1, r1, #8
 8008184:	f102 0501 	add.w	r5, r2, #1
 8008188:	d019      	beq.n	80081be <__ssvfiscanf_r+0x6e>
 800818a:	6863      	ldr	r3, [r4, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	dd0f      	ble.n	80081b0 <__ssvfiscanf_r+0x60>
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	781a      	ldrb	r2, [r3, #0]
 8008194:	5cba      	ldrb	r2, [r7, r2]
 8008196:	0712      	lsls	r2, r2, #28
 8008198:	d401      	bmi.n	800819e <__ssvfiscanf_r+0x4e>
 800819a:	462a      	mov	r2, r5
 800819c:	e7eb      	b.n	8008176 <__ssvfiscanf_r+0x26>
 800819e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80081a0:	3201      	adds	r2, #1
 80081a2:	9245      	str	r2, [sp, #276]	@ 0x114
 80081a4:	6862      	ldr	r2, [r4, #4]
 80081a6:	3301      	adds	r3, #1
 80081a8:	3a01      	subs	r2, #1
 80081aa:	6062      	str	r2, [r4, #4]
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	e7ec      	b.n	800818a <__ssvfiscanf_r+0x3a>
 80081b0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80081b2:	4621      	mov	r1, r4
 80081b4:	4630      	mov	r0, r6
 80081b6:	4798      	blx	r3
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d0e9      	beq.n	8008190 <__ssvfiscanf_r+0x40>
 80081bc:	e7ed      	b.n	800819a <__ssvfiscanf_r+0x4a>
 80081be:	2b25      	cmp	r3, #37	@ 0x25
 80081c0:	d012      	beq.n	80081e8 <__ssvfiscanf_r+0x98>
 80081c2:	4699      	mov	r9, r3
 80081c4:	6863      	ldr	r3, [r4, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f340 8093 	ble.w	80082f2 <__ssvfiscanf_r+0x1a2>
 80081cc:	6822      	ldr	r2, [r4, #0]
 80081ce:	7813      	ldrb	r3, [r2, #0]
 80081d0:	454b      	cmp	r3, r9
 80081d2:	f040 812c 	bne.w	800842e <__ssvfiscanf_r+0x2de>
 80081d6:	6863      	ldr	r3, [r4, #4]
 80081d8:	3b01      	subs	r3, #1
 80081da:	6063      	str	r3, [r4, #4]
 80081dc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80081de:	3201      	adds	r2, #1
 80081e0:	3301      	adds	r3, #1
 80081e2:	6022      	str	r2, [r4, #0]
 80081e4:	9345      	str	r3, [sp, #276]	@ 0x114
 80081e6:	e7d8      	b.n	800819a <__ssvfiscanf_r+0x4a>
 80081e8:	9141      	str	r1, [sp, #260]	@ 0x104
 80081ea:	9143      	str	r1, [sp, #268]	@ 0x10c
 80081ec:	7853      	ldrb	r3, [r2, #1]
 80081ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80081f0:	bf02      	ittt	eq
 80081f2:	2310      	moveq	r3, #16
 80081f4:	1c95      	addeq	r5, r2, #2
 80081f6:	9341      	streq	r3, [sp, #260]	@ 0x104
 80081f8:	220a      	movs	r2, #10
 80081fa:	46a9      	mov	r9, r5
 80081fc:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008200:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008204:	2b09      	cmp	r3, #9
 8008206:	d91e      	bls.n	8008246 <__ssvfiscanf_r+0xf6>
 8008208:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8008404 <__ssvfiscanf_r+0x2b4>
 800820c:	2203      	movs	r2, #3
 800820e:	4650      	mov	r0, sl
 8008210:	f7f8 f80e 	bl	8000230 <memchr>
 8008214:	b138      	cbz	r0, 8008226 <__ssvfiscanf_r+0xd6>
 8008216:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008218:	eba0 000a 	sub.w	r0, r0, sl
 800821c:	2301      	movs	r3, #1
 800821e:	4083      	lsls	r3, r0
 8008220:	4313      	orrs	r3, r2
 8008222:	9341      	str	r3, [sp, #260]	@ 0x104
 8008224:	464d      	mov	r5, r9
 8008226:	f815 3b01 	ldrb.w	r3, [r5], #1
 800822a:	2b78      	cmp	r3, #120	@ 0x78
 800822c:	d806      	bhi.n	800823c <__ssvfiscanf_r+0xec>
 800822e:	2b57      	cmp	r3, #87	@ 0x57
 8008230:	d810      	bhi.n	8008254 <__ssvfiscanf_r+0x104>
 8008232:	2b25      	cmp	r3, #37	@ 0x25
 8008234:	d0c5      	beq.n	80081c2 <__ssvfiscanf_r+0x72>
 8008236:	d857      	bhi.n	80082e8 <__ssvfiscanf_r+0x198>
 8008238:	2b00      	cmp	r3, #0
 800823a:	d065      	beq.n	8008308 <__ssvfiscanf_r+0x1b8>
 800823c:	2303      	movs	r3, #3
 800823e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008240:	230a      	movs	r3, #10
 8008242:	9342      	str	r3, [sp, #264]	@ 0x108
 8008244:	e078      	b.n	8008338 <__ssvfiscanf_r+0x1e8>
 8008246:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008248:	fb02 1103 	mla	r1, r2, r3, r1
 800824c:	3930      	subs	r1, #48	@ 0x30
 800824e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008250:	464d      	mov	r5, r9
 8008252:	e7d2      	b.n	80081fa <__ssvfiscanf_r+0xaa>
 8008254:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008258:	2a20      	cmp	r2, #32
 800825a:	d8ef      	bhi.n	800823c <__ssvfiscanf_r+0xec>
 800825c:	a101      	add	r1, pc, #4	@ (adr r1, 8008264 <__ssvfiscanf_r+0x114>)
 800825e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008262:	bf00      	nop
 8008264:	08008317 	.word	0x08008317
 8008268:	0800823d 	.word	0x0800823d
 800826c:	0800823d 	.word	0x0800823d
 8008270:	08008371 	.word	0x08008371
 8008274:	0800823d 	.word	0x0800823d
 8008278:	0800823d 	.word	0x0800823d
 800827c:	0800823d 	.word	0x0800823d
 8008280:	0800823d 	.word	0x0800823d
 8008284:	0800823d 	.word	0x0800823d
 8008288:	0800823d 	.word	0x0800823d
 800828c:	0800823d 	.word	0x0800823d
 8008290:	08008387 	.word	0x08008387
 8008294:	0800836d 	.word	0x0800836d
 8008298:	080082ef 	.word	0x080082ef
 800829c:	080082ef 	.word	0x080082ef
 80082a0:	080082ef 	.word	0x080082ef
 80082a4:	0800823d 	.word	0x0800823d
 80082a8:	08008329 	.word	0x08008329
 80082ac:	0800823d 	.word	0x0800823d
 80082b0:	0800823d 	.word	0x0800823d
 80082b4:	0800823d 	.word	0x0800823d
 80082b8:	0800823d 	.word	0x0800823d
 80082bc:	08008397 	.word	0x08008397
 80082c0:	08008331 	.word	0x08008331
 80082c4:	0800830f 	.word	0x0800830f
 80082c8:	0800823d 	.word	0x0800823d
 80082cc:	0800823d 	.word	0x0800823d
 80082d0:	08008393 	.word	0x08008393
 80082d4:	0800823d 	.word	0x0800823d
 80082d8:	0800836d 	.word	0x0800836d
 80082dc:	0800823d 	.word	0x0800823d
 80082e0:	0800823d 	.word	0x0800823d
 80082e4:	08008317 	.word	0x08008317
 80082e8:	3b45      	subs	r3, #69	@ 0x45
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d8a6      	bhi.n	800823c <__ssvfiscanf_r+0xec>
 80082ee:	2305      	movs	r3, #5
 80082f0:	e021      	b.n	8008336 <__ssvfiscanf_r+0x1e6>
 80082f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80082f4:	4621      	mov	r1, r4
 80082f6:	4630      	mov	r0, r6
 80082f8:	4798      	blx	r3
 80082fa:	2800      	cmp	r0, #0
 80082fc:	f43f af66 	beq.w	80081cc <__ssvfiscanf_r+0x7c>
 8008300:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008302:	2800      	cmp	r0, #0
 8008304:	f040 808b 	bne.w	800841e <__ssvfiscanf_r+0x2ce>
 8008308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800830c:	e08b      	b.n	8008426 <__ssvfiscanf_r+0x2d6>
 800830e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008310:	f042 0220 	orr.w	r2, r2, #32
 8008314:	9241      	str	r2, [sp, #260]	@ 0x104
 8008316:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008318:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800831c:	9241      	str	r2, [sp, #260]	@ 0x104
 800831e:	2210      	movs	r2, #16
 8008320:	2b6e      	cmp	r3, #110	@ 0x6e
 8008322:	9242      	str	r2, [sp, #264]	@ 0x108
 8008324:	d902      	bls.n	800832c <__ssvfiscanf_r+0x1dc>
 8008326:	e005      	b.n	8008334 <__ssvfiscanf_r+0x1e4>
 8008328:	2300      	movs	r3, #0
 800832a:	9342      	str	r3, [sp, #264]	@ 0x108
 800832c:	2303      	movs	r3, #3
 800832e:	e002      	b.n	8008336 <__ssvfiscanf_r+0x1e6>
 8008330:	2308      	movs	r3, #8
 8008332:	9342      	str	r3, [sp, #264]	@ 0x108
 8008334:	2304      	movs	r3, #4
 8008336:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008338:	6863      	ldr	r3, [r4, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	dd39      	ble.n	80083b2 <__ssvfiscanf_r+0x262>
 800833e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008340:	0659      	lsls	r1, r3, #25
 8008342:	d404      	bmi.n	800834e <__ssvfiscanf_r+0x1fe>
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	781a      	ldrb	r2, [r3, #0]
 8008348:	5cba      	ldrb	r2, [r7, r2]
 800834a:	0712      	lsls	r2, r2, #28
 800834c:	d438      	bmi.n	80083c0 <__ssvfiscanf_r+0x270>
 800834e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8008350:	2b02      	cmp	r3, #2
 8008352:	dc47      	bgt.n	80083e4 <__ssvfiscanf_r+0x294>
 8008354:	466b      	mov	r3, sp
 8008356:	4622      	mov	r2, r4
 8008358:	a941      	add	r1, sp, #260	@ 0x104
 800835a:	4630      	mov	r0, r6
 800835c:	f000 f90e 	bl	800857c <_scanf_chars>
 8008360:	2801      	cmp	r0, #1
 8008362:	d064      	beq.n	800842e <__ssvfiscanf_r+0x2de>
 8008364:	2802      	cmp	r0, #2
 8008366:	f47f af18 	bne.w	800819a <__ssvfiscanf_r+0x4a>
 800836a:	e7c9      	b.n	8008300 <__ssvfiscanf_r+0x1b0>
 800836c:	220a      	movs	r2, #10
 800836e:	e7d7      	b.n	8008320 <__ssvfiscanf_r+0x1d0>
 8008370:	4629      	mov	r1, r5
 8008372:	4640      	mov	r0, r8
 8008374:	f000 fa50 	bl	8008818 <__sccl>
 8008378:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800837a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800837e:	9341      	str	r3, [sp, #260]	@ 0x104
 8008380:	4605      	mov	r5, r0
 8008382:	2301      	movs	r3, #1
 8008384:	e7d7      	b.n	8008336 <__ssvfiscanf_r+0x1e6>
 8008386:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800838c:	9341      	str	r3, [sp, #260]	@ 0x104
 800838e:	2300      	movs	r3, #0
 8008390:	e7d1      	b.n	8008336 <__ssvfiscanf_r+0x1e6>
 8008392:	2302      	movs	r3, #2
 8008394:	e7cf      	b.n	8008336 <__ssvfiscanf_r+0x1e6>
 8008396:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008398:	06c3      	lsls	r3, r0, #27
 800839a:	f53f aefe 	bmi.w	800819a <__ssvfiscanf_r+0x4a>
 800839e:	9b00      	ldr	r3, [sp, #0]
 80083a0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80083a2:	1d19      	adds	r1, r3, #4
 80083a4:	9100      	str	r1, [sp, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	07c0      	lsls	r0, r0, #31
 80083aa:	bf4c      	ite	mi
 80083ac:	801a      	strhmi	r2, [r3, #0]
 80083ae:	601a      	strpl	r2, [r3, #0]
 80083b0:	e6f3      	b.n	800819a <__ssvfiscanf_r+0x4a>
 80083b2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80083b4:	4621      	mov	r1, r4
 80083b6:	4630      	mov	r0, r6
 80083b8:	4798      	blx	r3
 80083ba:	2800      	cmp	r0, #0
 80083bc:	d0bf      	beq.n	800833e <__ssvfiscanf_r+0x1ee>
 80083be:	e79f      	b.n	8008300 <__ssvfiscanf_r+0x1b0>
 80083c0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80083c2:	3201      	adds	r2, #1
 80083c4:	9245      	str	r2, [sp, #276]	@ 0x114
 80083c6:	6862      	ldr	r2, [r4, #4]
 80083c8:	3a01      	subs	r2, #1
 80083ca:	2a00      	cmp	r2, #0
 80083cc:	6062      	str	r2, [r4, #4]
 80083ce:	dd02      	ble.n	80083d6 <__ssvfiscanf_r+0x286>
 80083d0:	3301      	adds	r3, #1
 80083d2:	6023      	str	r3, [r4, #0]
 80083d4:	e7b6      	b.n	8008344 <__ssvfiscanf_r+0x1f4>
 80083d6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80083d8:	4621      	mov	r1, r4
 80083da:	4630      	mov	r0, r6
 80083dc:	4798      	blx	r3
 80083de:	2800      	cmp	r0, #0
 80083e0:	d0b0      	beq.n	8008344 <__ssvfiscanf_r+0x1f4>
 80083e2:	e78d      	b.n	8008300 <__ssvfiscanf_r+0x1b0>
 80083e4:	2b04      	cmp	r3, #4
 80083e6:	dc0f      	bgt.n	8008408 <__ssvfiscanf_r+0x2b8>
 80083e8:	466b      	mov	r3, sp
 80083ea:	4622      	mov	r2, r4
 80083ec:	a941      	add	r1, sp, #260	@ 0x104
 80083ee:	4630      	mov	r0, r6
 80083f0:	f000 f91e 	bl	8008630 <_scanf_i>
 80083f4:	e7b4      	b.n	8008360 <__ssvfiscanf_r+0x210>
 80083f6:	bf00      	nop
 80083f8:	080080a1 	.word	0x080080a1
 80083fc:	08008117 	.word	0x08008117
 8008400:	080095d9 	.word	0x080095d9
 8008404:	080096d9 	.word	0x080096d9
 8008408:	4b0a      	ldr	r3, [pc, #40]	@ (8008434 <__ssvfiscanf_r+0x2e4>)
 800840a:	2b00      	cmp	r3, #0
 800840c:	f43f aec5 	beq.w	800819a <__ssvfiscanf_r+0x4a>
 8008410:	466b      	mov	r3, sp
 8008412:	4622      	mov	r2, r4
 8008414:	a941      	add	r1, sp, #260	@ 0x104
 8008416:	4630      	mov	r0, r6
 8008418:	f3af 8000 	nop.w
 800841c:	e7a0      	b.n	8008360 <__ssvfiscanf_r+0x210>
 800841e:	89a3      	ldrh	r3, [r4, #12]
 8008420:	065b      	lsls	r3, r3, #25
 8008422:	f53f af71 	bmi.w	8008308 <__ssvfiscanf_r+0x1b8>
 8008426:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800842a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008430:	e7f9      	b.n	8008426 <__ssvfiscanf_r+0x2d6>
 8008432:	bf00      	nop
 8008434:	00000000 	.word	0x00000000

08008438 <sbrk_aligned>:
 8008438:	b570      	push	{r4, r5, r6, lr}
 800843a:	4e0f      	ldr	r6, [pc, #60]	@ (8008478 <sbrk_aligned+0x40>)
 800843c:	460c      	mov	r4, r1
 800843e:	6831      	ldr	r1, [r6, #0]
 8008440:	4605      	mov	r5, r0
 8008442:	b911      	cbnz	r1, 800844a <sbrk_aligned+0x12>
 8008444:	f000 fcca 	bl	8008ddc <_sbrk_r>
 8008448:	6030      	str	r0, [r6, #0]
 800844a:	4621      	mov	r1, r4
 800844c:	4628      	mov	r0, r5
 800844e:	f000 fcc5 	bl	8008ddc <_sbrk_r>
 8008452:	1c43      	adds	r3, r0, #1
 8008454:	d103      	bne.n	800845e <sbrk_aligned+0x26>
 8008456:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800845a:	4620      	mov	r0, r4
 800845c:	bd70      	pop	{r4, r5, r6, pc}
 800845e:	1cc4      	adds	r4, r0, #3
 8008460:	f024 0403 	bic.w	r4, r4, #3
 8008464:	42a0      	cmp	r0, r4
 8008466:	d0f8      	beq.n	800845a <sbrk_aligned+0x22>
 8008468:	1a21      	subs	r1, r4, r0
 800846a:	4628      	mov	r0, r5
 800846c:	f000 fcb6 	bl	8008ddc <_sbrk_r>
 8008470:	3001      	adds	r0, #1
 8008472:	d1f2      	bne.n	800845a <sbrk_aligned+0x22>
 8008474:	e7ef      	b.n	8008456 <sbrk_aligned+0x1e>
 8008476:	bf00      	nop
 8008478:	200005b4 	.word	0x200005b4

0800847c <_malloc_r>:
 800847c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008480:	1ccd      	adds	r5, r1, #3
 8008482:	f025 0503 	bic.w	r5, r5, #3
 8008486:	3508      	adds	r5, #8
 8008488:	2d0c      	cmp	r5, #12
 800848a:	bf38      	it	cc
 800848c:	250c      	movcc	r5, #12
 800848e:	2d00      	cmp	r5, #0
 8008490:	4606      	mov	r6, r0
 8008492:	db01      	blt.n	8008498 <_malloc_r+0x1c>
 8008494:	42a9      	cmp	r1, r5
 8008496:	d904      	bls.n	80084a2 <_malloc_r+0x26>
 8008498:	230c      	movs	r3, #12
 800849a:	6033      	str	r3, [r6, #0]
 800849c:	2000      	movs	r0, #0
 800849e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008578 <_malloc_r+0xfc>
 80084a6:	f000 fa9d 	bl	80089e4 <__malloc_lock>
 80084aa:	f8d8 3000 	ldr.w	r3, [r8]
 80084ae:	461c      	mov	r4, r3
 80084b0:	bb44      	cbnz	r4, 8008504 <_malloc_r+0x88>
 80084b2:	4629      	mov	r1, r5
 80084b4:	4630      	mov	r0, r6
 80084b6:	f7ff ffbf 	bl	8008438 <sbrk_aligned>
 80084ba:	1c43      	adds	r3, r0, #1
 80084bc:	4604      	mov	r4, r0
 80084be:	d158      	bne.n	8008572 <_malloc_r+0xf6>
 80084c0:	f8d8 4000 	ldr.w	r4, [r8]
 80084c4:	4627      	mov	r7, r4
 80084c6:	2f00      	cmp	r7, #0
 80084c8:	d143      	bne.n	8008552 <_malloc_r+0xd6>
 80084ca:	2c00      	cmp	r4, #0
 80084cc:	d04b      	beq.n	8008566 <_malloc_r+0xea>
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	4639      	mov	r1, r7
 80084d2:	4630      	mov	r0, r6
 80084d4:	eb04 0903 	add.w	r9, r4, r3
 80084d8:	f000 fc80 	bl	8008ddc <_sbrk_r>
 80084dc:	4581      	cmp	r9, r0
 80084de:	d142      	bne.n	8008566 <_malloc_r+0xea>
 80084e0:	6821      	ldr	r1, [r4, #0]
 80084e2:	1a6d      	subs	r5, r5, r1
 80084e4:	4629      	mov	r1, r5
 80084e6:	4630      	mov	r0, r6
 80084e8:	f7ff ffa6 	bl	8008438 <sbrk_aligned>
 80084ec:	3001      	adds	r0, #1
 80084ee:	d03a      	beq.n	8008566 <_malloc_r+0xea>
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	442b      	add	r3, r5
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	f8d8 3000 	ldr.w	r3, [r8]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	bb62      	cbnz	r2, 8008558 <_malloc_r+0xdc>
 80084fe:	f8c8 7000 	str.w	r7, [r8]
 8008502:	e00f      	b.n	8008524 <_malloc_r+0xa8>
 8008504:	6822      	ldr	r2, [r4, #0]
 8008506:	1b52      	subs	r2, r2, r5
 8008508:	d420      	bmi.n	800854c <_malloc_r+0xd0>
 800850a:	2a0b      	cmp	r2, #11
 800850c:	d917      	bls.n	800853e <_malloc_r+0xc2>
 800850e:	1961      	adds	r1, r4, r5
 8008510:	42a3      	cmp	r3, r4
 8008512:	6025      	str	r5, [r4, #0]
 8008514:	bf18      	it	ne
 8008516:	6059      	strne	r1, [r3, #4]
 8008518:	6863      	ldr	r3, [r4, #4]
 800851a:	bf08      	it	eq
 800851c:	f8c8 1000 	streq.w	r1, [r8]
 8008520:	5162      	str	r2, [r4, r5]
 8008522:	604b      	str	r3, [r1, #4]
 8008524:	4630      	mov	r0, r6
 8008526:	f000 fa63 	bl	80089f0 <__malloc_unlock>
 800852a:	f104 000b 	add.w	r0, r4, #11
 800852e:	1d23      	adds	r3, r4, #4
 8008530:	f020 0007 	bic.w	r0, r0, #7
 8008534:	1ac2      	subs	r2, r0, r3
 8008536:	bf1c      	itt	ne
 8008538:	1a1b      	subne	r3, r3, r0
 800853a:	50a3      	strne	r3, [r4, r2]
 800853c:	e7af      	b.n	800849e <_malloc_r+0x22>
 800853e:	6862      	ldr	r2, [r4, #4]
 8008540:	42a3      	cmp	r3, r4
 8008542:	bf0c      	ite	eq
 8008544:	f8c8 2000 	streq.w	r2, [r8]
 8008548:	605a      	strne	r2, [r3, #4]
 800854a:	e7eb      	b.n	8008524 <_malloc_r+0xa8>
 800854c:	4623      	mov	r3, r4
 800854e:	6864      	ldr	r4, [r4, #4]
 8008550:	e7ae      	b.n	80084b0 <_malloc_r+0x34>
 8008552:	463c      	mov	r4, r7
 8008554:	687f      	ldr	r7, [r7, #4]
 8008556:	e7b6      	b.n	80084c6 <_malloc_r+0x4a>
 8008558:	461a      	mov	r2, r3
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	42a3      	cmp	r3, r4
 800855e:	d1fb      	bne.n	8008558 <_malloc_r+0xdc>
 8008560:	2300      	movs	r3, #0
 8008562:	6053      	str	r3, [r2, #4]
 8008564:	e7de      	b.n	8008524 <_malloc_r+0xa8>
 8008566:	230c      	movs	r3, #12
 8008568:	6033      	str	r3, [r6, #0]
 800856a:	4630      	mov	r0, r6
 800856c:	f000 fa40 	bl	80089f0 <__malloc_unlock>
 8008570:	e794      	b.n	800849c <_malloc_r+0x20>
 8008572:	6005      	str	r5, [r0, #0]
 8008574:	e7d6      	b.n	8008524 <_malloc_r+0xa8>
 8008576:	bf00      	nop
 8008578:	200005b8 	.word	0x200005b8

0800857c <_scanf_chars>:
 800857c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008580:	4615      	mov	r5, r2
 8008582:	688a      	ldr	r2, [r1, #8]
 8008584:	4680      	mov	r8, r0
 8008586:	460c      	mov	r4, r1
 8008588:	b932      	cbnz	r2, 8008598 <_scanf_chars+0x1c>
 800858a:	698a      	ldr	r2, [r1, #24]
 800858c:	2a00      	cmp	r2, #0
 800858e:	bf14      	ite	ne
 8008590:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8008594:	2201      	moveq	r2, #1
 8008596:	608a      	str	r2, [r1, #8]
 8008598:	6822      	ldr	r2, [r4, #0]
 800859a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800862c <_scanf_chars+0xb0>
 800859e:	06d1      	lsls	r1, r2, #27
 80085a0:	bf5f      	itttt	pl
 80085a2:	681a      	ldrpl	r2, [r3, #0]
 80085a4:	1d11      	addpl	r1, r2, #4
 80085a6:	6019      	strpl	r1, [r3, #0]
 80085a8:	6816      	ldrpl	r6, [r2, #0]
 80085aa:	2700      	movs	r7, #0
 80085ac:	69a0      	ldr	r0, [r4, #24]
 80085ae:	b188      	cbz	r0, 80085d4 <_scanf_chars+0x58>
 80085b0:	2801      	cmp	r0, #1
 80085b2:	d107      	bne.n	80085c4 <_scanf_chars+0x48>
 80085b4:	682b      	ldr	r3, [r5, #0]
 80085b6:	781a      	ldrb	r2, [r3, #0]
 80085b8:	6963      	ldr	r3, [r4, #20]
 80085ba:	5c9b      	ldrb	r3, [r3, r2]
 80085bc:	b953      	cbnz	r3, 80085d4 <_scanf_chars+0x58>
 80085be:	2f00      	cmp	r7, #0
 80085c0:	d031      	beq.n	8008626 <_scanf_chars+0xaa>
 80085c2:	e022      	b.n	800860a <_scanf_chars+0x8e>
 80085c4:	2802      	cmp	r0, #2
 80085c6:	d120      	bne.n	800860a <_scanf_chars+0x8e>
 80085c8:	682b      	ldr	r3, [r5, #0]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	f819 3003 	ldrb.w	r3, [r9, r3]
 80085d0:	071b      	lsls	r3, r3, #28
 80085d2:	d41a      	bmi.n	800860a <_scanf_chars+0x8e>
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	06da      	lsls	r2, r3, #27
 80085d8:	bf5e      	ittt	pl
 80085da:	682b      	ldrpl	r3, [r5, #0]
 80085dc:	781b      	ldrbpl	r3, [r3, #0]
 80085de:	f806 3b01 	strbpl.w	r3, [r6], #1
 80085e2:	682a      	ldr	r2, [r5, #0]
 80085e4:	686b      	ldr	r3, [r5, #4]
 80085e6:	3201      	adds	r2, #1
 80085e8:	602a      	str	r2, [r5, #0]
 80085ea:	68a2      	ldr	r2, [r4, #8]
 80085ec:	3b01      	subs	r3, #1
 80085ee:	3a01      	subs	r2, #1
 80085f0:	606b      	str	r3, [r5, #4]
 80085f2:	3701      	adds	r7, #1
 80085f4:	60a2      	str	r2, [r4, #8]
 80085f6:	b142      	cbz	r2, 800860a <_scanf_chars+0x8e>
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	dcd7      	bgt.n	80085ac <_scanf_chars+0x30>
 80085fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008600:	4629      	mov	r1, r5
 8008602:	4640      	mov	r0, r8
 8008604:	4798      	blx	r3
 8008606:	2800      	cmp	r0, #0
 8008608:	d0d0      	beq.n	80085ac <_scanf_chars+0x30>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	f013 0310 	ands.w	r3, r3, #16
 8008610:	d105      	bne.n	800861e <_scanf_chars+0xa2>
 8008612:	68e2      	ldr	r2, [r4, #12]
 8008614:	3201      	adds	r2, #1
 8008616:	60e2      	str	r2, [r4, #12]
 8008618:	69a2      	ldr	r2, [r4, #24]
 800861a:	b102      	cbz	r2, 800861e <_scanf_chars+0xa2>
 800861c:	7033      	strb	r3, [r6, #0]
 800861e:	6923      	ldr	r3, [r4, #16]
 8008620:	443b      	add	r3, r7
 8008622:	6123      	str	r3, [r4, #16]
 8008624:	2000      	movs	r0, #0
 8008626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800862a:	bf00      	nop
 800862c:	080095d9 	.word	0x080095d9

08008630 <_scanf_i>:
 8008630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008634:	4698      	mov	r8, r3
 8008636:	4b74      	ldr	r3, [pc, #464]	@ (8008808 <_scanf_i+0x1d8>)
 8008638:	460c      	mov	r4, r1
 800863a:	4682      	mov	sl, r0
 800863c:	4616      	mov	r6, r2
 800863e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008642:	b087      	sub	sp, #28
 8008644:	ab03      	add	r3, sp, #12
 8008646:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800864a:	4b70      	ldr	r3, [pc, #448]	@ (800880c <_scanf_i+0x1dc>)
 800864c:	69a1      	ldr	r1, [r4, #24]
 800864e:	4a70      	ldr	r2, [pc, #448]	@ (8008810 <_scanf_i+0x1e0>)
 8008650:	2903      	cmp	r1, #3
 8008652:	bf08      	it	eq
 8008654:	461a      	moveq	r2, r3
 8008656:	68a3      	ldr	r3, [r4, #8]
 8008658:	9201      	str	r2, [sp, #4]
 800865a:	1e5a      	subs	r2, r3, #1
 800865c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008660:	bf88      	it	hi
 8008662:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008666:	4627      	mov	r7, r4
 8008668:	bf82      	ittt	hi
 800866a:	eb03 0905 	addhi.w	r9, r3, r5
 800866e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008672:	60a3      	strhi	r3, [r4, #8]
 8008674:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008678:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800867c:	bf98      	it	ls
 800867e:	f04f 0900 	movls.w	r9, #0
 8008682:	6023      	str	r3, [r4, #0]
 8008684:	463d      	mov	r5, r7
 8008686:	f04f 0b00 	mov.w	fp, #0
 800868a:	6831      	ldr	r1, [r6, #0]
 800868c:	ab03      	add	r3, sp, #12
 800868e:	7809      	ldrb	r1, [r1, #0]
 8008690:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008694:	2202      	movs	r2, #2
 8008696:	f7f7 fdcb 	bl	8000230 <memchr>
 800869a:	b328      	cbz	r0, 80086e8 <_scanf_i+0xb8>
 800869c:	f1bb 0f01 	cmp.w	fp, #1
 80086a0:	d159      	bne.n	8008756 <_scanf_i+0x126>
 80086a2:	6862      	ldr	r2, [r4, #4]
 80086a4:	b92a      	cbnz	r2, 80086b2 <_scanf_i+0x82>
 80086a6:	6822      	ldr	r2, [r4, #0]
 80086a8:	2108      	movs	r1, #8
 80086aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086ae:	6061      	str	r1, [r4, #4]
 80086b0:	6022      	str	r2, [r4, #0]
 80086b2:	6822      	ldr	r2, [r4, #0]
 80086b4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80086b8:	6022      	str	r2, [r4, #0]
 80086ba:	68a2      	ldr	r2, [r4, #8]
 80086bc:	1e51      	subs	r1, r2, #1
 80086be:	60a1      	str	r1, [r4, #8]
 80086c0:	b192      	cbz	r2, 80086e8 <_scanf_i+0xb8>
 80086c2:	6832      	ldr	r2, [r6, #0]
 80086c4:	1c51      	adds	r1, r2, #1
 80086c6:	6031      	str	r1, [r6, #0]
 80086c8:	7812      	ldrb	r2, [r2, #0]
 80086ca:	f805 2b01 	strb.w	r2, [r5], #1
 80086ce:	6872      	ldr	r2, [r6, #4]
 80086d0:	3a01      	subs	r2, #1
 80086d2:	2a00      	cmp	r2, #0
 80086d4:	6072      	str	r2, [r6, #4]
 80086d6:	dc07      	bgt.n	80086e8 <_scanf_i+0xb8>
 80086d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80086dc:	4631      	mov	r1, r6
 80086de:	4650      	mov	r0, sl
 80086e0:	4790      	blx	r2
 80086e2:	2800      	cmp	r0, #0
 80086e4:	f040 8085 	bne.w	80087f2 <_scanf_i+0x1c2>
 80086e8:	f10b 0b01 	add.w	fp, fp, #1
 80086ec:	f1bb 0f03 	cmp.w	fp, #3
 80086f0:	d1cb      	bne.n	800868a <_scanf_i+0x5a>
 80086f2:	6863      	ldr	r3, [r4, #4]
 80086f4:	b90b      	cbnz	r3, 80086fa <_scanf_i+0xca>
 80086f6:	230a      	movs	r3, #10
 80086f8:	6063      	str	r3, [r4, #4]
 80086fa:	6863      	ldr	r3, [r4, #4]
 80086fc:	4945      	ldr	r1, [pc, #276]	@ (8008814 <_scanf_i+0x1e4>)
 80086fe:	6960      	ldr	r0, [r4, #20]
 8008700:	1ac9      	subs	r1, r1, r3
 8008702:	f000 f889 	bl	8008818 <__sccl>
 8008706:	f04f 0b00 	mov.w	fp, #0
 800870a:	68a3      	ldr	r3, [r4, #8]
 800870c:	6822      	ldr	r2, [r4, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d03d      	beq.n	800878e <_scanf_i+0x15e>
 8008712:	6831      	ldr	r1, [r6, #0]
 8008714:	6960      	ldr	r0, [r4, #20]
 8008716:	f891 c000 	ldrb.w	ip, [r1]
 800871a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800871e:	2800      	cmp	r0, #0
 8008720:	d035      	beq.n	800878e <_scanf_i+0x15e>
 8008722:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008726:	d124      	bne.n	8008772 <_scanf_i+0x142>
 8008728:	0510      	lsls	r0, r2, #20
 800872a:	d522      	bpl.n	8008772 <_scanf_i+0x142>
 800872c:	f10b 0b01 	add.w	fp, fp, #1
 8008730:	f1b9 0f00 	cmp.w	r9, #0
 8008734:	d003      	beq.n	800873e <_scanf_i+0x10e>
 8008736:	3301      	adds	r3, #1
 8008738:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800873c:	60a3      	str	r3, [r4, #8]
 800873e:	6873      	ldr	r3, [r6, #4]
 8008740:	3b01      	subs	r3, #1
 8008742:	2b00      	cmp	r3, #0
 8008744:	6073      	str	r3, [r6, #4]
 8008746:	dd1b      	ble.n	8008780 <_scanf_i+0x150>
 8008748:	6833      	ldr	r3, [r6, #0]
 800874a:	3301      	adds	r3, #1
 800874c:	6033      	str	r3, [r6, #0]
 800874e:	68a3      	ldr	r3, [r4, #8]
 8008750:	3b01      	subs	r3, #1
 8008752:	60a3      	str	r3, [r4, #8]
 8008754:	e7d9      	b.n	800870a <_scanf_i+0xda>
 8008756:	f1bb 0f02 	cmp.w	fp, #2
 800875a:	d1ae      	bne.n	80086ba <_scanf_i+0x8a>
 800875c:	6822      	ldr	r2, [r4, #0]
 800875e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008762:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008766:	d1bf      	bne.n	80086e8 <_scanf_i+0xb8>
 8008768:	2110      	movs	r1, #16
 800876a:	6061      	str	r1, [r4, #4]
 800876c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008770:	e7a2      	b.n	80086b8 <_scanf_i+0x88>
 8008772:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008776:	6022      	str	r2, [r4, #0]
 8008778:	780b      	ldrb	r3, [r1, #0]
 800877a:	f805 3b01 	strb.w	r3, [r5], #1
 800877e:	e7de      	b.n	800873e <_scanf_i+0x10e>
 8008780:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008784:	4631      	mov	r1, r6
 8008786:	4650      	mov	r0, sl
 8008788:	4798      	blx	r3
 800878a:	2800      	cmp	r0, #0
 800878c:	d0df      	beq.n	800874e <_scanf_i+0x11e>
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	05d9      	lsls	r1, r3, #23
 8008792:	d50d      	bpl.n	80087b0 <_scanf_i+0x180>
 8008794:	42bd      	cmp	r5, r7
 8008796:	d909      	bls.n	80087ac <_scanf_i+0x17c>
 8008798:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800879c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087a0:	4632      	mov	r2, r6
 80087a2:	4650      	mov	r0, sl
 80087a4:	4798      	blx	r3
 80087a6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80087aa:	464d      	mov	r5, r9
 80087ac:	42bd      	cmp	r5, r7
 80087ae:	d028      	beq.n	8008802 <_scanf_i+0x1d2>
 80087b0:	6822      	ldr	r2, [r4, #0]
 80087b2:	f012 0210 	ands.w	r2, r2, #16
 80087b6:	d113      	bne.n	80087e0 <_scanf_i+0x1b0>
 80087b8:	702a      	strb	r2, [r5, #0]
 80087ba:	6863      	ldr	r3, [r4, #4]
 80087bc:	9e01      	ldr	r6, [sp, #4]
 80087be:	4639      	mov	r1, r7
 80087c0:	4650      	mov	r0, sl
 80087c2:	47b0      	blx	r6
 80087c4:	f8d8 3000 	ldr.w	r3, [r8]
 80087c8:	6821      	ldr	r1, [r4, #0]
 80087ca:	1d1a      	adds	r2, r3, #4
 80087cc:	f8c8 2000 	str.w	r2, [r8]
 80087d0:	f011 0f20 	tst.w	r1, #32
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	d00f      	beq.n	80087f8 <_scanf_i+0x1c8>
 80087d8:	6018      	str	r0, [r3, #0]
 80087da:	68e3      	ldr	r3, [r4, #12]
 80087dc:	3301      	adds	r3, #1
 80087de:	60e3      	str	r3, [r4, #12]
 80087e0:	6923      	ldr	r3, [r4, #16]
 80087e2:	1bed      	subs	r5, r5, r7
 80087e4:	445d      	add	r5, fp
 80087e6:	442b      	add	r3, r5
 80087e8:	6123      	str	r3, [r4, #16]
 80087ea:	2000      	movs	r0, #0
 80087ec:	b007      	add	sp, #28
 80087ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f2:	f04f 0b00 	mov.w	fp, #0
 80087f6:	e7ca      	b.n	800878e <_scanf_i+0x15e>
 80087f8:	07ca      	lsls	r2, r1, #31
 80087fa:	bf4c      	ite	mi
 80087fc:	8018      	strhmi	r0, [r3, #0]
 80087fe:	6018      	strpl	r0, [r3, #0]
 8008800:	e7eb      	b.n	80087da <_scanf_i+0x1aa>
 8008802:	2001      	movs	r0, #1
 8008804:	e7f2      	b.n	80087ec <_scanf_i+0x1bc>
 8008806:	bf00      	nop
 8008808:	0800958c 	.word	0x0800958c
 800880c:	08007e05 	.word	0x08007e05
 8008810:	08008ba9 	.word	0x08008ba9
 8008814:	080096ed 	.word	0x080096ed

08008818 <__sccl>:
 8008818:	b570      	push	{r4, r5, r6, lr}
 800881a:	780b      	ldrb	r3, [r1, #0]
 800881c:	4604      	mov	r4, r0
 800881e:	2b5e      	cmp	r3, #94	@ 0x5e
 8008820:	bf0b      	itete	eq
 8008822:	784b      	ldrbeq	r3, [r1, #1]
 8008824:	1c4a      	addne	r2, r1, #1
 8008826:	1c8a      	addeq	r2, r1, #2
 8008828:	2100      	movne	r1, #0
 800882a:	bf08      	it	eq
 800882c:	2101      	moveq	r1, #1
 800882e:	3801      	subs	r0, #1
 8008830:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008834:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008838:	42a8      	cmp	r0, r5
 800883a:	d1fb      	bne.n	8008834 <__sccl+0x1c>
 800883c:	b90b      	cbnz	r3, 8008842 <__sccl+0x2a>
 800883e:	1e50      	subs	r0, r2, #1
 8008840:	bd70      	pop	{r4, r5, r6, pc}
 8008842:	f081 0101 	eor.w	r1, r1, #1
 8008846:	54e1      	strb	r1, [r4, r3]
 8008848:	4610      	mov	r0, r2
 800884a:	4602      	mov	r2, r0
 800884c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008850:	2d2d      	cmp	r5, #45	@ 0x2d
 8008852:	d005      	beq.n	8008860 <__sccl+0x48>
 8008854:	2d5d      	cmp	r5, #93	@ 0x5d
 8008856:	d016      	beq.n	8008886 <__sccl+0x6e>
 8008858:	2d00      	cmp	r5, #0
 800885a:	d0f1      	beq.n	8008840 <__sccl+0x28>
 800885c:	462b      	mov	r3, r5
 800885e:	e7f2      	b.n	8008846 <__sccl+0x2e>
 8008860:	7846      	ldrb	r6, [r0, #1]
 8008862:	2e5d      	cmp	r6, #93	@ 0x5d
 8008864:	d0fa      	beq.n	800885c <__sccl+0x44>
 8008866:	42b3      	cmp	r3, r6
 8008868:	dcf8      	bgt.n	800885c <__sccl+0x44>
 800886a:	3002      	adds	r0, #2
 800886c:	461a      	mov	r2, r3
 800886e:	3201      	adds	r2, #1
 8008870:	4296      	cmp	r6, r2
 8008872:	54a1      	strb	r1, [r4, r2]
 8008874:	dcfb      	bgt.n	800886e <__sccl+0x56>
 8008876:	1af2      	subs	r2, r6, r3
 8008878:	3a01      	subs	r2, #1
 800887a:	1c5d      	adds	r5, r3, #1
 800887c:	42b3      	cmp	r3, r6
 800887e:	bfa8      	it	ge
 8008880:	2200      	movge	r2, #0
 8008882:	18ab      	adds	r3, r5, r2
 8008884:	e7e1      	b.n	800884a <__sccl+0x32>
 8008886:	4610      	mov	r0, r2
 8008888:	e7da      	b.n	8008840 <__sccl+0x28>
	...

0800888c <__sflush_r>:
 800888c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008894:	0716      	lsls	r6, r2, #28
 8008896:	4605      	mov	r5, r0
 8008898:	460c      	mov	r4, r1
 800889a:	d454      	bmi.n	8008946 <__sflush_r+0xba>
 800889c:	684b      	ldr	r3, [r1, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	dc02      	bgt.n	80088a8 <__sflush_r+0x1c>
 80088a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	dd48      	ble.n	800893a <__sflush_r+0xae>
 80088a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088aa:	2e00      	cmp	r6, #0
 80088ac:	d045      	beq.n	800893a <__sflush_r+0xae>
 80088ae:	2300      	movs	r3, #0
 80088b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80088b4:	682f      	ldr	r7, [r5, #0]
 80088b6:	6a21      	ldr	r1, [r4, #32]
 80088b8:	602b      	str	r3, [r5, #0]
 80088ba:	d030      	beq.n	800891e <__sflush_r+0x92>
 80088bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	0759      	lsls	r1, r3, #29
 80088c2:	d505      	bpl.n	80088d0 <__sflush_r+0x44>
 80088c4:	6863      	ldr	r3, [r4, #4]
 80088c6:	1ad2      	subs	r2, r2, r3
 80088c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088ca:	b10b      	cbz	r3, 80088d0 <__sflush_r+0x44>
 80088cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088ce:	1ad2      	subs	r2, r2, r3
 80088d0:	2300      	movs	r3, #0
 80088d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088d4:	6a21      	ldr	r1, [r4, #32]
 80088d6:	4628      	mov	r0, r5
 80088d8:	47b0      	blx	r6
 80088da:	1c43      	adds	r3, r0, #1
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	d106      	bne.n	80088ee <__sflush_r+0x62>
 80088e0:	6829      	ldr	r1, [r5, #0]
 80088e2:	291d      	cmp	r1, #29
 80088e4:	d82b      	bhi.n	800893e <__sflush_r+0xb2>
 80088e6:	4a2a      	ldr	r2, [pc, #168]	@ (8008990 <__sflush_r+0x104>)
 80088e8:	410a      	asrs	r2, r1
 80088ea:	07d6      	lsls	r6, r2, #31
 80088ec:	d427      	bmi.n	800893e <__sflush_r+0xb2>
 80088ee:	2200      	movs	r2, #0
 80088f0:	6062      	str	r2, [r4, #4]
 80088f2:	04d9      	lsls	r1, r3, #19
 80088f4:	6922      	ldr	r2, [r4, #16]
 80088f6:	6022      	str	r2, [r4, #0]
 80088f8:	d504      	bpl.n	8008904 <__sflush_r+0x78>
 80088fa:	1c42      	adds	r2, r0, #1
 80088fc:	d101      	bne.n	8008902 <__sflush_r+0x76>
 80088fe:	682b      	ldr	r3, [r5, #0]
 8008900:	b903      	cbnz	r3, 8008904 <__sflush_r+0x78>
 8008902:	6560      	str	r0, [r4, #84]	@ 0x54
 8008904:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008906:	602f      	str	r7, [r5, #0]
 8008908:	b1b9      	cbz	r1, 800893a <__sflush_r+0xae>
 800890a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800890e:	4299      	cmp	r1, r3
 8008910:	d002      	beq.n	8008918 <__sflush_r+0x8c>
 8008912:	4628      	mov	r0, r5
 8008914:	f7ff fb7a 	bl	800800c <_free_r>
 8008918:	2300      	movs	r3, #0
 800891a:	6363      	str	r3, [r4, #52]	@ 0x34
 800891c:	e00d      	b.n	800893a <__sflush_r+0xae>
 800891e:	2301      	movs	r3, #1
 8008920:	4628      	mov	r0, r5
 8008922:	47b0      	blx	r6
 8008924:	4602      	mov	r2, r0
 8008926:	1c50      	adds	r0, r2, #1
 8008928:	d1c9      	bne.n	80088be <__sflush_r+0x32>
 800892a:	682b      	ldr	r3, [r5, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d0c6      	beq.n	80088be <__sflush_r+0x32>
 8008930:	2b1d      	cmp	r3, #29
 8008932:	d001      	beq.n	8008938 <__sflush_r+0xac>
 8008934:	2b16      	cmp	r3, #22
 8008936:	d11e      	bne.n	8008976 <__sflush_r+0xea>
 8008938:	602f      	str	r7, [r5, #0]
 800893a:	2000      	movs	r0, #0
 800893c:	e022      	b.n	8008984 <__sflush_r+0xf8>
 800893e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008942:	b21b      	sxth	r3, r3
 8008944:	e01b      	b.n	800897e <__sflush_r+0xf2>
 8008946:	690f      	ldr	r7, [r1, #16]
 8008948:	2f00      	cmp	r7, #0
 800894a:	d0f6      	beq.n	800893a <__sflush_r+0xae>
 800894c:	0793      	lsls	r3, r2, #30
 800894e:	680e      	ldr	r6, [r1, #0]
 8008950:	bf08      	it	eq
 8008952:	694b      	ldreq	r3, [r1, #20]
 8008954:	600f      	str	r7, [r1, #0]
 8008956:	bf18      	it	ne
 8008958:	2300      	movne	r3, #0
 800895a:	eba6 0807 	sub.w	r8, r6, r7
 800895e:	608b      	str	r3, [r1, #8]
 8008960:	f1b8 0f00 	cmp.w	r8, #0
 8008964:	dde9      	ble.n	800893a <__sflush_r+0xae>
 8008966:	6a21      	ldr	r1, [r4, #32]
 8008968:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800896a:	4643      	mov	r3, r8
 800896c:	463a      	mov	r2, r7
 800896e:	4628      	mov	r0, r5
 8008970:	47b0      	blx	r6
 8008972:	2800      	cmp	r0, #0
 8008974:	dc08      	bgt.n	8008988 <__sflush_r+0xfc>
 8008976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800897a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800897e:	81a3      	strh	r3, [r4, #12]
 8008980:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008988:	4407      	add	r7, r0
 800898a:	eba8 0800 	sub.w	r8, r8, r0
 800898e:	e7e7      	b.n	8008960 <__sflush_r+0xd4>
 8008990:	dfbffffe 	.word	0xdfbffffe

08008994 <_fflush_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	690b      	ldr	r3, [r1, #16]
 8008998:	4605      	mov	r5, r0
 800899a:	460c      	mov	r4, r1
 800899c:	b913      	cbnz	r3, 80089a4 <_fflush_r+0x10>
 800899e:	2500      	movs	r5, #0
 80089a0:	4628      	mov	r0, r5
 80089a2:	bd38      	pop	{r3, r4, r5, pc}
 80089a4:	b118      	cbz	r0, 80089ae <_fflush_r+0x1a>
 80089a6:	6a03      	ldr	r3, [r0, #32]
 80089a8:	b90b      	cbnz	r3, 80089ae <_fflush_r+0x1a>
 80089aa:	f7ff f999 	bl	8007ce0 <__sinit>
 80089ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0f3      	beq.n	800899e <_fflush_r+0xa>
 80089b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80089b8:	07d0      	lsls	r0, r2, #31
 80089ba:	d404      	bmi.n	80089c6 <_fflush_r+0x32>
 80089bc:	0599      	lsls	r1, r3, #22
 80089be:	d402      	bmi.n	80089c6 <_fflush_r+0x32>
 80089c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089c2:	f7ff fb20 	bl	8008006 <__retarget_lock_acquire_recursive>
 80089c6:	4628      	mov	r0, r5
 80089c8:	4621      	mov	r1, r4
 80089ca:	f7ff ff5f 	bl	800888c <__sflush_r>
 80089ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089d0:	07da      	lsls	r2, r3, #31
 80089d2:	4605      	mov	r5, r0
 80089d4:	d4e4      	bmi.n	80089a0 <_fflush_r+0xc>
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	059b      	lsls	r3, r3, #22
 80089da:	d4e1      	bmi.n	80089a0 <_fflush_r+0xc>
 80089dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089de:	f7ff fb13 	bl	8008008 <__retarget_lock_release_recursive>
 80089e2:	e7dd      	b.n	80089a0 <_fflush_r+0xc>

080089e4 <__malloc_lock>:
 80089e4:	4801      	ldr	r0, [pc, #4]	@ (80089ec <__malloc_lock+0x8>)
 80089e6:	f7ff bb0e 	b.w	8008006 <__retarget_lock_acquire_recursive>
 80089ea:	bf00      	nop
 80089ec:	200005b0 	.word	0x200005b0

080089f0 <__malloc_unlock>:
 80089f0:	4801      	ldr	r0, [pc, #4]	@ (80089f8 <__malloc_unlock+0x8>)
 80089f2:	f7ff bb09 	b.w	8008008 <__retarget_lock_release_recursive>
 80089f6:	bf00      	nop
 80089f8:	200005b0 	.word	0x200005b0

080089fc <__submore>:
 80089fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a00:	460c      	mov	r4, r1
 8008a02:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008a04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a08:	4299      	cmp	r1, r3
 8008a0a:	d11d      	bne.n	8008a48 <__submore+0x4c>
 8008a0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008a10:	f7ff fd34 	bl	800847c <_malloc_r>
 8008a14:	b918      	cbnz	r0, 8008a1e <__submore+0x22>
 8008a16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a22:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008a24:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008a28:	6360      	str	r0, [r4, #52]	@ 0x34
 8008a2a:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008a2e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008a32:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8008a36:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008a3a:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8008a3e:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008a42:	6020      	str	r0, [r4, #0]
 8008a44:	2000      	movs	r0, #0
 8008a46:	e7e8      	b.n	8008a1a <__submore+0x1e>
 8008a48:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008a4a:	0077      	lsls	r7, r6, #1
 8008a4c:	463a      	mov	r2, r7
 8008a4e:	f000 f80f 	bl	8008a70 <_realloc_r>
 8008a52:	4605      	mov	r5, r0
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d0de      	beq.n	8008a16 <__submore+0x1a>
 8008a58:	eb00 0806 	add.w	r8, r0, r6
 8008a5c:	4601      	mov	r1, r0
 8008a5e:	4632      	mov	r2, r6
 8008a60:	4640      	mov	r0, r8
 8008a62:	f000 f9cb 	bl	8008dfc <memcpy>
 8008a66:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008a6a:	f8c4 8000 	str.w	r8, [r4]
 8008a6e:	e7e9      	b.n	8008a44 <__submore+0x48>

08008a70 <_realloc_r>:
 8008a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a74:	4680      	mov	r8, r0
 8008a76:	4615      	mov	r5, r2
 8008a78:	460c      	mov	r4, r1
 8008a7a:	b921      	cbnz	r1, 8008a86 <_realloc_r+0x16>
 8008a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a80:	4611      	mov	r1, r2
 8008a82:	f7ff bcfb 	b.w	800847c <_malloc_r>
 8008a86:	b92a      	cbnz	r2, 8008a94 <_realloc_r+0x24>
 8008a88:	f7ff fac0 	bl	800800c <_free_r>
 8008a8c:	2400      	movs	r4, #0
 8008a8e:	4620      	mov	r0, r4
 8008a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a94:	f000 f9c0 	bl	8008e18 <_malloc_usable_size_r>
 8008a98:	4285      	cmp	r5, r0
 8008a9a:	4606      	mov	r6, r0
 8008a9c:	d802      	bhi.n	8008aa4 <_realloc_r+0x34>
 8008a9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008aa2:	d8f4      	bhi.n	8008a8e <_realloc_r+0x1e>
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	4640      	mov	r0, r8
 8008aa8:	f7ff fce8 	bl	800847c <_malloc_r>
 8008aac:	4607      	mov	r7, r0
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d0ec      	beq.n	8008a8c <_realloc_r+0x1c>
 8008ab2:	42b5      	cmp	r5, r6
 8008ab4:	462a      	mov	r2, r5
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	bf28      	it	cs
 8008aba:	4632      	movcs	r2, r6
 8008abc:	f000 f99e 	bl	8008dfc <memcpy>
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	f7ff faa2 	bl	800800c <_free_r>
 8008ac8:	463c      	mov	r4, r7
 8008aca:	e7e0      	b.n	8008a8e <_realloc_r+0x1e>

08008acc <_strtoul_l.constprop.0>:
 8008acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ad0:	4e34      	ldr	r6, [pc, #208]	@ (8008ba4 <_strtoul_l.constprop.0+0xd8>)
 8008ad2:	4686      	mov	lr, r0
 8008ad4:	460d      	mov	r5, r1
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008adc:	5d37      	ldrb	r7, [r6, r4]
 8008ade:	f017 0708 	ands.w	r7, r7, #8
 8008ae2:	d1f8      	bne.n	8008ad6 <_strtoul_l.constprop.0+0xa>
 8008ae4:	2c2d      	cmp	r4, #45	@ 0x2d
 8008ae6:	d12f      	bne.n	8008b48 <_strtoul_l.constprop.0+0x7c>
 8008ae8:	782c      	ldrb	r4, [r5, #0]
 8008aea:	2701      	movs	r7, #1
 8008aec:	1c85      	adds	r5, r0, #2
 8008aee:	f033 0010 	bics.w	r0, r3, #16
 8008af2:	d109      	bne.n	8008b08 <_strtoul_l.constprop.0+0x3c>
 8008af4:	2c30      	cmp	r4, #48	@ 0x30
 8008af6:	d12c      	bne.n	8008b52 <_strtoul_l.constprop.0+0x86>
 8008af8:	7828      	ldrb	r0, [r5, #0]
 8008afa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008afe:	2858      	cmp	r0, #88	@ 0x58
 8008b00:	d127      	bne.n	8008b52 <_strtoul_l.constprop.0+0x86>
 8008b02:	786c      	ldrb	r4, [r5, #1]
 8008b04:	2310      	movs	r3, #16
 8008b06:	3502      	adds	r5, #2
 8008b08:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8008b0c:	2600      	movs	r6, #0
 8008b0e:	fbb8 f8f3 	udiv	r8, r8, r3
 8008b12:	fb03 f908 	mul.w	r9, r3, r8
 8008b16:	ea6f 0909 	mvn.w	r9, r9
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008b20:	f1bc 0f09 	cmp.w	ip, #9
 8008b24:	d81c      	bhi.n	8008b60 <_strtoul_l.constprop.0+0x94>
 8008b26:	4664      	mov	r4, ip
 8008b28:	42a3      	cmp	r3, r4
 8008b2a:	dd2a      	ble.n	8008b82 <_strtoul_l.constprop.0+0xb6>
 8008b2c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8008b30:	d007      	beq.n	8008b42 <_strtoul_l.constprop.0+0x76>
 8008b32:	4580      	cmp	r8, r0
 8008b34:	d322      	bcc.n	8008b7c <_strtoul_l.constprop.0+0xb0>
 8008b36:	d101      	bne.n	8008b3c <_strtoul_l.constprop.0+0x70>
 8008b38:	45a1      	cmp	r9, r4
 8008b3a:	db1f      	blt.n	8008b7c <_strtoul_l.constprop.0+0xb0>
 8008b3c:	fb00 4003 	mla	r0, r0, r3, r4
 8008b40:	2601      	movs	r6, #1
 8008b42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b46:	e7e9      	b.n	8008b1c <_strtoul_l.constprop.0+0x50>
 8008b48:	2c2b      	cmp	r4, #43	@ 0x2b
 8008b4a:	bf04      	itt	eq
 8008b4c:	782c      	ldrbeq	r4, [r5, #0]
 8008b4e:	1c85      	addeq	r5, r0, #2
 8008b50:	e7cd      	b.n	8008aee <_strtoul_l.constprop.0+0x22>
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1d8      	bne.n	8008b08 <_strtoul_l.constprop.0+0x3c>
 8008b56:	2c30      	cmp	r4, #48	@ 0x30
 8008b58:	bf0c      	ite	eq
 8008b5a:	2308      	moveq	r3, #8
 8008b5c:	230a      	movne	r3, #10
 8008b5e:	e7d3      	b.n	8008b08 <_strtoul_l.constprop.0+0x3c>
 8008b60:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008b64:	f1bc 0f19 	cmp.w	ip, #25
 8008b68:	d801      	bhi.n	8008b6e <_strtoul_l.constprop.0+0xa2>
 8008b6a:	3c37      	subs	r4, #55	@ 0x37
 8008b6c:	e7dc      	b.n	8008b28 <_strtoul_l.constprop.0+0x5c>
 8008b6e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008b72:	f1bc 0f19 	cmp.w	ip, #25
 8008b76:	d804      	bhi.n	8008b82 <_strtoul_l.constprop.0+0xb6>
 8008b78:	3c57      	subs	r4, #87	@ 0x57
 8008b7a:	e7d5      	b.n	8008b28 <_strtoul_l.constprop.0+0x5c>
 8008b7c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8008b80:	e7df      	b.n	8008b42 <_strtoul_l.constprop.0+0x76>
 8008b82:	1c73      	adds	r3, r6, #1
 8008b84:	d106      	bne.n	8008b94 <_strtoul_l.constprop.0+0xc8>
 8008b86:	2322      	movs	r3, #34	@ 0x22
 8008b88:	f8ce 3000 	str.w	r3, [lr]
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	b932      	cbnz	r2, 8008b9e <_strtoul_l.constprop.0+0xd2>
 8008b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b94:	b107      	cbz	r7, 8008b98 <_strtoul_l.constprop.0+0xcc>
 8008b96:	4240      	negs	r0, r0
 8008b98:	2a00      	cmp	r2, #0
 8008b9a:	d0f9      	beq.n	8008b90 <_strtoul_l.constprop.0+0xc4>
 8008b9c:	b106      	cbz	r6, 8008ba0 <_strtoul_l.constprop.0+0xd4>
 8008b9e:	1e69      	subs	r1, r5, #1
 8008ba0:	6011      	str	r1, [r2, #0]
 8008ba2:	e7f5      	b.n	8008b90 <_strtoul_l.constprop.0+0xc4>
 8008ba4:	080095d9 	.word	0x080095d9

08008ba8 <_strtoul_r>:
 8008ba8:	f7ff bf90 	b.w	8008acc <_strtoul_l.constprop.0>

08008bac <__swbuf_r>:
 8008bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bae:	460e      	mov	r6, r1
 8008bb0:	4614      	mov	r4, r2
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	b118      	cbz	r0, 8008bbe <__swbuf_r+0x12>
 8008bb6:	6a03      	ldr	r3, [r0, #32]
 8008bb8:	b90b      	cbnz	r3, 8008bbe <__swbuf_r+0x12>
 8008bba:	f7ff f891 	bl	8007ce0 <__sinit>
 8008bbe:	69a3      	ldr	r3, [r4, #24]
 8008bc0:	60a3      	str	r3, [r4, #8]
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	071a      	lsls	r2, r3, #28
 8008bc6:	d501      	bpl.n	8008bcc <__swbuf_r+0x20>
 8008bc8:	6923      	ldr	r3, [r4, #16]
 8008bca:	b943      	cbnz	r3, 8008bde <__swbuf_r+0x32>
 8008bcc:	4621      	mov	r1, r4
 8008bce:	4628      	mov	r0, r5
 8008bd0:	f000 f82a 	bl	8008c28 <__swsetup_r>
 8008bd4:	b118      	cbz	r0, 8008bde <__swbuf_r+0x32>
 8008bd6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008bda:	4638      	mov	r0, r7
 8008bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	6922      	ldr	r2, [r4, #16]
 8008be2:	1a98      	subs	r0, r3, r2
 8008be4:	6963      	ldr	r3, [r4, #20]
 8008be6:	b2f6      	uxtb	r6, r6
 8008be8:	4283      	cmp	r3, r0
 8008bea:	4637      	mov	r7, r6
 8008bec:	dc05      	bgt.n	8008bfa <__swbuf_r+0x4e>
 8008bee:	4621      	mov	r1, r4
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	f7ff fecf 	bl	8008994 <_fflush_r>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	d1ed      	bne.n	8008bd6 <__swbuf_r+0x2a>
 8008bfa:	68a3      	ldr	r3, [r4, #8]
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	60a3      	str	r3, [r4, #8]
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	6022      	str	r2, [r4, #0]
 8008c06:	701e      	strb	r6, [r3, #0]
 8008c08:	6962      	ldr	r2, [r4, #20]
 8008c0a:	1c43      	adds	r3, r0, #1
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d004      	beq.n	8008c1a <__swbuf_r+0x6e>
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	07db      	lsls	r3, r3, #31
 8008c14:	d5e1      	bpl.n	8008bda <__swbuf_r+0x2e>
 8008c16:	2e0a      	cmp	r6, #10
 8008c18:	d1df      	bne.n	8008bda <__swbuf_r+0x2e>
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	f7ff feb9 	bl	8008994 <_fflush_r>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d0d9      	beq.n	8008bda <__swbuf_r+0x2e>
 8008c26:	e7d6      	b.n	8008bd6 <__swbuf_r+0x2a>

08008c28 <__swsetup_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4b29      	ldr	r3, [pc, #164]	@ (8008cd0 <__swsetup_r+0xa8>)
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	6818      	ldr	r0, [r3, #0]
 8008c30:	460c      	mov	r4, r1
 8008c32:	b118      	cbz	r0, 8008c3c <__swsetup_r+0x14>
 8008c34:	6a03      	ldr	r3, [r0, #32]
 8008c36:	b90b      	cbnz	r3, 8008c3c <__swsetup_r+0x14>
 8008c38:	f7ff f852 	bl	8007ce0 <__sinit>
 8008c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c40:	0719      	lsls	r1, r3, #28
 8008c42:	d422      	bmi.n	8008c8a <__swsetup_r+0x62>
 8008c44:	06da      	lsls	r2, r3, #27
 8008c46:	d407      	bmi.n	8008c58 <__swsetup_r+0x30>
 8008c48:	2209      	movs	r2, #9
 8008c4a:	602a      	str	r2, [r5, #0]
 8008c4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c50:	81a3      	strh	r3, [r4, #12]
 8008c52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c56:	e033      	b.n	8008cc0 <__swsetup_r+0x98>
 8008c58:	0758      	lsls	r0, r3, #29
 8008c5a:	d512      	bpl.n	8008c82 <__swsetup_r+0x5a>
 8008c5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c5e:	b141      	cbz	r1, 8008c72 <__swsetup_r+0x4a>
 8008c60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c64:	4299      	cmp	r1, r3
 8008c66:	d002      	beq.n	8008c6e <__swsetup_r+0x46>
 8008c68:	4628      	mov	r0, r5
 8008c6a:	f7ff f9cf 	bl	800800c <_free_r>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c72:	89a3      	ldrh	r3, [r4, #12]
 8008c74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c78:	81a3      	strh	r3, [r4, #12]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	6063      	str	r3, [r4, #4]
 8008c7e:	6923      	ldr	r3, [r4, #16]
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	89a3      	ldrh	r3, [r4, #12]
 8008c84:	f043 0308 	orr.w	r3, r3, #8
 8008c88:	81a3      	strh	r3, [r4, #12]
 8008c8a:	6923      	ldr	r3, [r4, #16]
 8008c8c:	b94b      	cbnz	r3, 8008ca2 <__swsetup_r+0x7a>
 8008c8e:	89a3      	ldrh	r3, [r4, #12]
 8008c90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c98:	d003      	beq.n	8008ca2 <__swsetup_r+0x7a>
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f000 f83f 	bl	8008d20 <__smakebuf_r>
 8008ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca6:	f013 0201 	ands.w	r2, r3, #1
 8008caa:	d00a      	beq.n	8008cc2 <__swsetup_r+0x9a>
 8008cac:	2200      	movs	r2, #0
 8008cae:	60a2      	str	r2, [r4, #8]
 8008cb0:	6962      	ldr	r2, [r4, #20]
 8008cb2:	4252      	negs	r2, r2
 8008cb4:	61a2      	str	r2, [r4, #24]
 8008cb6:	6922      	ldr	r2, [r4, #16]
 8008cb8:	b942      	cbnz	r2, 8008ccc <__swsetup_r+0xa4>
 8008cba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008cbe:	d1c5      	bne.n	8008c4c <__swsetup_r+0x24>
 8008cc0:	bd38      	pop	{r3, r4, r5, pc}
 8008cc2:	0799      	lsls	r1, r3, #30
 8008cc4:	bf58      	it	pl
 8008cc6:	6962      	ldrpl	r2, [r4, #20]
 8008cc8:	60a2      	str	r2, [r4, #8]
 8008cca:	e7f4      	b.n	8008cb6 <__swsetup_r+0x8e>
 8008ccc:	2000      	movs	r0, #0
 8008cce:	e7f7      	b.n	8008cc0 <__swsetup_r+0x98>
 8008cd0:	20000090 	.word	0x20000090

08008cd4 <__swhatbuf_r>:
 8008cd4:	b570      	push	{r4, r5, r6, lr}
 8008cd6:	460c      	mov	r4, r1
 8008cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cdc:	2900      	cmp	r1, #0
 8008cde:	b096      	sub	sp, #88	@ 0x58
 8008ce0:	4615      	mov	r5, r2
 8008ce2:	461e      	mov	r6, r3
 8008ce4:	da0d      	bge.n	8008d02 <__swhatbuf_r+0x2e>
 8008ce6:	89a3      	ldrh	r3, [r4, #12]
 8008ce8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008cec:	f04f 0100 	mov.w	r1, #0
 8008cf0:	bf14      	ite	ne
 8008cf2:	2340      	movne	r3, #64	@ 0x40
 8008cf4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	6031      	str	r1, [r6, #0]
 8008cfc:	602b      	str	r3, [r5, #0]
 8008cfe:	b016      	add	sp, #88	@ 0x58
 8008d00:	bd70      	pop	{r4, r5, r6, pc}
 8008d02:	466a      	mov	r2, sp
 8008d04:	f000 f848 	bl	8008d98 <_fstat_r>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	dbec      	blt.n	8008ce6 <__swhatbuf_r+0x12>
 8008d0c:	9901      	ldr	r1, [sp, #4]
 8008d0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d16:	4259      	negs	r1, r3
 8008d18:	4159      	adcs	r1, r3
 8008d1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d1e:	e7eb      	b.n	8008cf8 <__swhatbuf_r+0x24>

08008d20 <__smakebuf_r>:
 8008d20:	898b      	ldrh	r3, [r1, #12]
 8008d22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d24:	079d      	lsls	r5, r3, #30
 8008d26:	4606      	mov	r6, r0
 8008d28:	460c      	mov	r4, r1
 8008d2a:	d507      	bpl.n	8008d3c <__smakebuf_r+0x1c>
 8008d2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	6123      	str	r3, [r4, #16]
 8008d34:	2301      	movs	r3, #1
 8008d36:	6163      	str	r3, [r4, #20]
 8008d38:	b003      	add	sp, #12
 8008d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d3c:	ab01      	add	r3, sp, #4
 8008d3e:	466a      	mov	r2, sp
 8008d40:	f7ff ffc8 	bl	8008cd4 <__swhatbuf_r>
 8008d44:	9f00      	ldr	r7, [sp, #0]
 8008d46:	4605      	mov	r5, r0
 8008d48:	4639      	mov	r1, r7
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f7ff fb96 	bl	800847c <_malloc_r>
 8008d50:	b948      	cbnz	r0, 8008d66 <__smakebuf_r+0x46>
 8008d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d56:	059a      	lsls	r2, r3, #22
 8008d58:	d4ee      	bmi.n	8008d38 <__smakebuf_r+0x18>
 8008d5a:	f023 0303 	bic.w	r3, r3, #3
 8008d5e:	f043 0302 	orr.w	r3, r3, #2
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	e7e2      	b.n	8008d2c <__smakebuf_r+0xc>
 8008d66:	89a3      	ldrh	r3, [r4, #12]
 8008d68:	6020      	str	r0, [r4, #0]
 8008d6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d6e:	81a3      	strh	r3, [r4, #12]
 8008d70:	9b01      	ldr	r3, [sp, #4]
 8008d72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d76:	b15b      	cbz	r3, 8008d90 <__smakebuf_r+0x70>
 8008d78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	f000 f81d 	bl	8008dbc <_isatty_r>
 8008d82:	b128      	cbz	r0, 8008d90 <__smakebuf_r+0x70>
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	f023 0303 	bic.w	r3, r3, #3
 8008d8a:	f043 0301 	orr.w	r3, r3, #1
 8008d8e:	81a3      	strh	r3, [r4, #12]
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	431d      	orrs	r5, r3
 8008d94:	81a5      	strh	r5, [r4, #12]
 8008d96:	e7cf      	b.n	8008d38 <__smakebuf_r+0x18>

08008d98 <_fstat_r>:
 8008d98:	b538      	push	{r3, r4, r5, lr}
 8008d9a:	4d07      	ldr	r5, [pc, #28]	@ (8008db8 <_fstat_r+0x20>)
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	4604      	mov	r4, r0
 8008da0:	4608      	mov	r0, r1
 8008da2:	4611      	mov	r1, r2
 8008da4:	602b      	str	r3, [r5, #0]
 8008da6:	f7fa fb19 	bl	80033dc <_fstat>
 8008daa:	1c43      	adds	r3, r0, #1
 8008dac:	d102      	bne.n	8008db4 <_fstat_r+0x1c>
 8008dae:	682b      	ldr	r3, [r5, #0]
 8008db0:	b103      	cbz	r3, 8008db4 <_fstat_r+0x1c>
 8008db2:	6023      	str	r3, [r4, #0]
 8008db4:	bd38      	pop	{r3, r4, r5, pc}
 8008db6:	bf00      	nop
 8008db8:	200005ac 	.word	0x200005ac

08008dbc <_isatty_r>:
 8008dbc:	b538      	push	{r3, r4, r5, lr}
 8008dbe:	4d06      	ldr	r5, [pc, #24]	@ (8008dd8 <_isatty_r+0x1c>)
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	4608      	mov	r0, r1
 8008dc6:	602b      	str	r3, [r5, #0]
 8008dc8:	f7fa fb18 	bl	80033fc <_isatty>
 8008dcc:	1c43      	adds	r3, r0, #1
 8008dce:	d102      	bne.n	8008dd6 <_isatty_r+0x1a>
 8008dd0:	682b      	ldr	r3, [r5, #0]
 8008dd2:	b103      	cbz	r3, 8008dd6 <_isatty_r+0x1a>
 8008dd4:	6023      	str	r3, [r4, #0]
 8008dd6:	bd38      	pop	{r3, r4, r5, pc}
 8008dd8:	200005ac 	.word	0x200005ac

08008ddc <_sbrk_r>:
 8008ddc:	b538      	push	{r3, r4, r5, lr}
 8008dde:	4d06      	ldr	r5, [pc, #24]	@ (8008df8 <_sbrk_r+0x1c>)
 8008de0:	2300      	movs	r3, #0
 8008de2:	4604      	mov	r4, r0
 8008de4:	4608      	mov	r0, r1
 8008de6:	602b      	str	r3, [r5, #0]
 8008de8:	f7fa fb20 	bl	800342c <_sbrk>
 8008dec:	1c43      	adds	r3, r0, #1
 8008dee:	d102      	bne.n	8008df6 <_sbrk_r+0x1a>
 8008df0:	682b      	ldr	r3, [r5, #0]
 8008df2:	b103      	cbz	r3, 8008df6 <_sbrk_r+0x1a>
 8008df4:	6023      	str	r3, [r4, #0]
 8008df6:	bd38      	pop	{r3, r4, r5, pc}
 8008df8:	200005ac 	.word	0x200005ac

08008dfc <memcpy>:
 8008dfc:	440a      	add	r2, r1
 8008dfe:	4291      	cmp	r1, r2
 8008e00:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008e04:	d100      	bne.n	8008e08 <memcpy+0xc>
 8008e06:	4770      	bx	lr
 8008e08:	b510      	push	{r4, lr}
 8008e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e12:	4291      	cmp	r1, r2
 8008e14:	d1f9      	bne.n	8008e0a <memcpy+0xe>
 8008e16:	bd10      	pop	{r4, pc}

08008e18 <_malloc_usable_size_r>:
 8008e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e1c:	1f18      	subs	r0, r3, #4
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	bfbc      	itt	lt
 8008e22:	580b      	ldrlt	r3, [r1, r0]
 8008e24:	18c0      	addlt	r0, r0, r3
 8008e26:	4770      	bx	lr

08008e28 <atan2>:
 8008e28:	f000 b802 	b.w	8008e30 <__ieee754_atan2>
 8008e2c:	0000      	movs	r0, r0
	...

08008e30 <__ieee754_atan2>:
 8008e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e34:	ec57 6b11 	vmov	r6, r7, d1
 8008e38:	4273      	negs	r3, r6
 8008e3a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8008fb8 <__ieee754_atan2+0x188>
 8008e3e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8008e42:	4333      	orrs	r3, r6
 8008e44:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008e48:	4543      	cmp	r3, r8
 8008e4a:	ec51 0b10 	vmov	r0, r1, d0
 8008e4e:	4635      	mov	r5, r6
 8008e50:	d809      	bhi.n	8008e66 <__ieee754_atan2+0x36>
 8008e52:	4244      	negs	r4, r0
 8008e54:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008e58:	4304      	orrs	r4, r0
 8008e5a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008e5e:	4544      	cmp	r4, r8
 8008e60:	468e      	mov	lr, r1
 8008e62:	4681      	mov	r9, r0
 8008e64:	d907      	bls.n	8008e76 <__ieee754_atan2+0x46>
 8008e66:	4632      	mov	r2, r6
 8008e68:	463b      	mov	r3, r7
 8008e6a:	f7f7 fa37 	bl	80002dc <__adddf3>
 8008e6e:	ec41 0b10 	vmov	d0, r0, r1
 8008e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e76:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8008e7a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8008e7e:	4334      	orrs	r4, r6
 8008e80:	d103      	bne.n	8008e8a <__ieee754_atan2+0x5a>
 8008e82:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e86:	f000 b8c7 	b.w	8009018 <atan>
 8008e8a:	17bc      	asrs	r4, r7, #30
 8008e8c:	f004 0402 	and.w	r4, r4, #2
 8008e90:	ea53 0909 	orrs.w	r9, r3, r9
 8008e94:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008e98:	d107      	bne.n	8008eaa <__ieee754_atan2+0x7a>
 8008e9a:	2c02      	cmp	r4, #2
 8008e9c:	d05f      	beq.n	8008f5e <__ieee754_atan2+0x12e>
 8008e9e:	2c03      	cmp	r4, #3
 8008ea0:	d1e5      	bne.n	8008e6e <__ieee754_atan2+0x3e>
 8008ea2:	a141      	add	r1, pc, #260	@ (adr r1, 8008fa8 <__ieee754_atan2+0x178>)
 8008ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ea8:	e7e1      	b.n	8008e6e <__ieee754_atan2+0x3e>
 8008eaa:	4315      	orrs	r5, r2
 8008eac:	d106      	bne.n	8008ebc <__ieee754_atan2+0x8c>
 8008eae:	f1be 0f00 	cmp.w	lr, #0
 8008eb2:	da5f      	bge.n	8008f74 <__ieee754_atan2+0x144>
 8008eb4:	a13e      	add	r1, pc, #248	@ (adr r1, 8008fb0 <__ieee754_atan2+0x180>)
 8008eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eba:	e7d8      	b.n	8008e6e <__ieee754_atan2+0x3e>
 8008ebc:	4542      	cmp	r2, r8
 8008ebe:	d10f      	bne.n	8008ee0 <__ieee754_atan2+0xb0>
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8008ec6:	d107      	bne.n	8008ed8 <__ieee754_atan2+0xa8>
 8008ec8:	2c02      	cmp	r4, #2
 8008eca:	d84c      	bhi.n	8008f66 <__ieee754_atan2+0x136>
 8008ecc:	4b34      	ldr	r3, [pc, #208]	@ (8008fa0 <__ieee754_atan2+0x170>)
 8008ece:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ed2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ed6:	e7ca      	b.n	8008e6e <__ieee754_atan2+0x3e>
 8008ed8:	2c02      	cmp	r4, #2
 8008eda:	d848      	bhi.n	8008f6e <__ieee754_atan2+0x13e>
 8008edc:	4b31      	ldr	r3, [pc, #196]	@ (8008fa4 <__ieee754_atan2+0x174>)
 8008ede:	e7f6      	b.n	8008ece <__ieee754_atan2+0x9e>
 8008ee0:	4543      	cmp	r3, r8
 8008ee2:	d0e4      	beq.n	8008eae <__ieee754_atan2+0x7e>
 8008ee4:	1a9b      	subs	r3, r3, r2
 8008ee6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8008eea:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008eee:	da1e      	bge.n	8008f2e <__ieee754_atan2+0xfe>
 8008ef0:	2f00      	cmp	r7, #0
 8008ef2:	da01      	bge.n	8008ef8 <__ieee754_atan2+0xc8>
 8008ef4:	323c      	adds	r2, #60	@ 0x3c
 8008ef6:	db1e      	blt.n	8008f36 <__ieee754_atan2+0x106>
 8008ef8:	4632      	mov	r2, r6
 8008efa:	463b      	mov	r3, r7
 8008efc:	f7f7 fcce 	bl	800089c <__aeabi_ddiv>
 8008f00:	ec41 0b10 	vmov	d0, r0, r1
 8008f04:	f000 fa20 	bl	8009348 <fabs>
 8008f08:	f000 f886 	bl	8009018 <atan>
 8008f0c:	ec51 0b10 	vmov	r0, r1, d0
 8008f10:	2c01      	cmp	r4, #1
 8008f12:	d013      	beq.n	8008f3c <__ieee754_atan2+0x10c>
 8008f14:	2c02      	cmp	r4, #2
 8008f16:	d015      	beq.n	8008f44 <__ieee754_atan2+0x114>
 8008f18:	2c00      	cmp	r4, #0
 8008f1a:	d0a8      	beq.n	8008e6e <__ieee754_atan2+0x3e>
 8008f1c:	a318      	add	r3, pc, #96	@ (adr r3, 8008f80 <__ieee754_atan2+0x150>)
 8008f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f22:	f7f7 f9d9 	bl	80002d8 <__aeabi_dsub>
 8008f26:	a318      	add	r3, pc, #96	@ (adr r3, 8008f88 <__ieee754_atan2+0x158>)
 8008f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2c:	e014      	b.n	8008f58 <__ieee754_atan2+0x128>
 8008f2e:	a118      	add	r1, pc, #96	@ (adr r1, 8008f90 <__ieee754_atan2+0x160>)
 8008f30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f34:	e7ec      	b.n	8008f10 <__ieee754_atan2+0xe0>
 8008f36:	2000      	movs	r0, #0
 8008f38:	2100      	movs	r1, #0
 8008f3a:	e7e9      	b.n	8008f10 <__ieee754_atan2+0xe0>
 8008f3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f40:	4619      	mov	r1, r3
 8008f42:	e794      	b.n	8008e6e <__ieee754_atan2+0x3e>
 8008f44:	a30e      	add	r3, pc, #56	@ (adr r3, 8008f80 <__ieee754_atan2+0x150>)
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	f7f7 f9c5 	bl	80002d8 <__aeabi_dsub>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	a10d      	add	r1, pc, #52	@ (adr r1, 8008f88 <__ieee754_atan2+0x158>)
 8008f54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f58:	f7f7 f9be 	bl	80002d8 <__aeabi_dsub>
 8008f5c:	e787      	b.n	8008e6e <__ieee754_atan2+0x3e>
 8008f5e:	a10a      	add	r1, pc, #40	@ (adr r1, 8008f88 <__ieee754_atan2+0x158>)
 8008f60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f64:	e783      	b.n	8008e6e <__ieee754_atan2+0x3e>
 8008f66:	a10c      	add	r1, pc, #48	@ (adr r1, 8008f98 <__ieee754_atan2+0x168>)
 8008f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f6c:	e77f      	b.n	8008e6e <__ieee754_atan2+0x3e>
 8008f6e:	2000      	movs	r0, #0
 8008f70:	2100      	movs	r1, #0
 8008f72:	e77c      	b.n	8008e6e <__ieee754_atan2+0x3e>
 8008f74:	a106      	add	r1, pc, #24	@ (adr r1, 8008f90 <__ieee754_atan2+0x160>)
 8008f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f7a:	e778      	b.n	8008e6e <__ieee754_atan2+0x3e>
 8008f7c:	f3af 8000 	nop.w
 8008f80:	33145c07 	.word	0x33145c07
 8008f84:	3ca1a626 	.word	0x3ca1a626
 8008f88:	54442d18 	.word	0x54442d18
 8008f8c:	400921fb 	.word	0x400921fb
 8008f90:	54442d18 	.word	0x54442d18
 8008f94:	3ff921fb 	.word	0x3ff921fb
 8008f98:	54442d18 	.word	0x54442d18
 8008f9c:	3fe921fb 	.word	0x3fe921fb
 8008fa0:	08009710 	.word	0x08009710
 8008fa4:	080096f8 	.word	0x080096f8
 8008fa8:	54442d18 	.word	0x54442d18
 8008fac:	c00921fb 	.word	0xc00921fb
 8008fb0:	54442d18 	.word	0x54442d18
 8008fb4:	bff921fb 	.word	0xbff921fb
 8008fb8:	7ff00000 	.word	0x7ff00000

08008fbc <sqrt>:
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	ed2d 8b02 	vpush	{d8}
 8008fc2:	ec55 4b10 	vmov	r4, r5, d0
 8008fc6:	f000 f9c7 	bl	8009358 <__ieee754_sqrt>
 8008fca:	4622      	mov	r2, r4
 8008fcc:	462b      	mov	r3, r5
 8008fce:	4620      	mov	r0, r4
 8008fd0:	4629      	mov	r1, r5
 8008fd2:	eeb0 8a40 	vmov.f32	s16, s0
 8008fd6:	eef0 8a60 	vmov.f32	s17, s1
 8008fda:	f7f7 fdcf 	bl	8000b7c <__aeabi_dcmpun>
 8008fde:	b990      	cbnz	r0, 8009006 <sqrt+0x4a>
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	f7f7 fda0 	bl	8000b2c <__aeabi_dcmplt>
 8008fec:	b158      	cbz	r0, 8009006 <sqrt+0x4a>
 8008fee:	f7fe ffdf 	bl	8007fb0 <__errno>
 8008ff2:	2321      	movs	r3, #33	@ 0x21
 8008ff4:	6003      	str	r3, [r0, #0]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	f7f7 fc4d 	bl	800089c <__aeabi_ddiv>
 8009002:	ec41 0b18 	vmov	d8, r0, r1
 8009006:	eeb0 0a48 	vmov.f32	s0, s16
 800900a:	eef0 0a68 	vmov.f32	s1, s17
 800900e:	ecbd 8b02 	vpop	{d8}
 8009012:	bd38      	pop	{r3, r4, r5, pc}
 8009014:	0000      	movs	r0, r0
	...

08009018 <atan>:
 8009018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800901c:	ec55 4b10 	vmov	r4, r5, d0
 8009020:	4bbf      	ldr	r3, [pc, #764]	@ (8009320 <atan+0x308>)
 8009022:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8009026:	429e      	cmp	r6, r3
 8009028:	46ab      	mov	fp, r5
 800902a:	d918      	bls.n	800905e <atan+0x46>
 800902c:	4bbd      	ldr	r3, [pc, #756]	@ (8009324 <atan+0x30c>)
 800902e:	429e      	cmp	r6, r3
 8009030:	d801      	bhi.n	8009036 <atan+0x1e>
 8009032:	d109      	bne.n	8009048 <atan+0x30>
 8009034:	b144      	cbz	r4, 8009048 <atan+0x30>
 8009036:	4622      	mov	r2, r4
 8009038:	462b      	mov	r3, r5
 800903a:	4620      	mov	r0, r4
 800903c:	4629      	mov	r1, r5
 800903e:	f7f7 f94d 	bl	80002dc <__adddf3>
 8009042:	4604      	mov	r4, r0
 8009044:	460d      	mov	r5, r1
 8009046:	e006      	b.n	8009056 <atan+0x3e>
 8009048:	f1bb 0f00 	cmp.w	fp, #0
 800904c:	f340 812b 	ble.w	80092a6 <atan+0x28e>
 8009050:	a597      	add	r5, pc, #604	@ (adr r5, 80092b0 <atan+0x298>)
 8009052:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009056:	ec45 4b10 	vmov	d0, r4, r5
 800905a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800905e:	4bb2      	ldr	r3, [pc, #712]	@ (8009328 <atan+0x310>)
 8009060:	429e      	cmp	r6, r3
 8009062:	d813      	bhi.n	800908c <atan+0x74>
 8009064:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8009068:	429e      	cmp	r6, r3
 800906a:	d80c      	bhi.n	8009086 <atan+0x6e>
 800906c:	a392      	add	r3, pc, #584	@ (adr r3, 80092b8 <atan+0x2a0>)
 800906e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009072:	4620      	mov	r0, r4
 8009074:	4629      	mov	r1, r5
 8009076:	f7f7 f931 	bl	80002dc <__adddf3>
 800907a:	4bac      	ldr	r3, [pc, #688]	@ (800932c <atan+0x314>)
 800907c:	2200      	movs	r2, #0
 800907e:	f7f7 fd73 	bl	8000b68 <__aeabi_dcmpgt>
 8009082:	2800      	cmp	r0, #0
 8009084:	d1e7      	bne.n	8009056 <atan+0x3e>
 8009086:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800908a:	e029      	b.n	80090e0 <atan+0xc8>
 800908c:	f000 f95c 	bl	8009348 <fabs>
 8009090:	4ba7      	ldr	r3, [pc, #668]	@ (8009330 <atan+0x318>)
 8009092:	429e      	cmp	r6, r3
 8009094:	ec55 4b10 	vmov	r4, r5, d0
 8009098:	f200 80bc 	bhi.w	8009214 <atan+0x1fc>
 800909c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80090a0:	429e      	cmp	r6, r3
 80090a2:	f200 809e 	bhi.w	80091e2 <atan+0x1ca>
 80090a6:	4622      	mov	r2, r4
 80090a8:	462b      	mov	r3, r5
 80090aa:	4620      	mov	r0, r4
 80090ac:	4629      	mov	r1, r5
 80090ae:	f7f7 f915 	bl	80002dc <__adddf3>
 80090b2:	4b9e      	ldr	r3, [pc, #632]	@ (800932c <atan+0x314>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	f7f7 f90f 	bl	80002d8 <__aeabi_dsub>
 80090ba:	2200      	movs	r2, #0
 80090bc:	4606      	mov	r6, r0
 80090be:	460f      	mov	r7, r1
 80090c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80090c4:	4620      	mov	r0, r4
 80090c6:	4629      	mov	r1, r5
 80090c8:	f7f7 f908 	bl	80002dc <__adddf3>
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	4630      	mov	r0, r6
 80090d2:	4639      	mov	r1, r7
 80090d4:	f7f7 fbe2 	bl	800089c <__aeabi_ddiv>
 80090d8:	f04f 0a00 	mov.w	sl, #0
 80090dc:	4604      	mov	r4, r0
 80090de:	460d      	mov	r5, r1
 80090e0:	4622      	mov	r2, r4
 80090e2:	462b      	mov	r3, r5
 80090e4:	4620      	mov	r0, r4
 80090e6:	4629      	mov	r1, r5
 80090e8:	f7f7 faae 	bl	8000648 <__aeabi_dmul>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4680      	mov	r8, r0
 80090f2:	4689      	mov	r9, r1
 80090f4:	f7f7 faa8 	bl	8000648 <__aeabi_dmul>
 80090f8:	a371      	add	r3, pc, #452	@ (adr r3, 80092c0 <atan+0x2a8>)
 80090fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fe:	4606      	mov	r6, r0
 8009100:	460f      	mov	r7, r1
 8009102:	f7f7 faa1 	bl	8000648 <__aeabi_dmul>
 8009106:	a370      	add	r3, pc, #448	@ (adr r3, 80092c8 <atan+0x2b0>)
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	f7f7 f8e6 	bl	80002dc <__adddf3>
 8009110:	4632      	mov	r2, r6
 8009112:	463b      	mov	r3, r7
 8009114:	f7f7 fa98 	bl	8000648 <__aeabi_dmul>
 8009118:	a36d      	add	r3, pc, #436	@ (adr r3, 80092d0 <atan+0x2b8>)
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	f7f7 f8dd 	bl	80002dc <__adddf3>
 8009122:	4632      	mov	r2, r6
 8009124:	463b      	mov	r3, r7
 8009126:	f7f7 fa8f 	bl	8000648 <__aeabi_dmul>
 800912a:	a36b      	add	r3, pc, #428	@ (adr r3, 80092d8 <atan+0x2c0>)
 800912c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009130:	f7f7 f8d4 	bl	80002dc <__adddf3>
 8009134:	4632      	mov	r2, r6
 8009136:	463b      	mov	r3, r7
 8009138:	f7f7 fa86 	bl	8000648 <__aeabi_dmul>
 800913c:	a368      	add	r3, pc, #416	@ (adr r3, 80092e0 <atan+0x2c8>)
 800913e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009142:	f7f7 f8cb 	bl	80002dc <__adddf3>
 8009146:	4632      	mov	r2, r6
 8009148:	463b      	mov	r3, r7
 800914a:	f7f7 fa7d 	bl	8000648 <__aeabi_dmul>
 800914e:	a366      	add	r3, pc, #408	@ (adr r3, 80092e8 <atan+0x2d0>)
 8009150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009154:	f7f7 f8c2 	bl	80002dc <__adddf3>
 8009158:	4642      	mov	r2, r8
 800915a:	464b      	mov	r3, r9
 800915c:	f7f7 fa74 	bl	8000648 <__aeabi_dmul>
 8009160:	a363      	add	r3, pc, #396	@ (adr r3, 80092f0 <atan+0x2d8>)
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	4680      	mov	r8, r0
 8009168:	4689      	mov	r9, r1
 800916a:	4630      	mov	r0, r6
 800916c:	4639      	mov	r1, r7
 800916e:	f7f7 fa6b 	bl	8000648 <__aeabi_dmul>
 8009172:	a361      	add	r3, pc, #388	@ (adr r3, 80092f8 <atan+0x2e0>)
 8009174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009178:	f7f7 f8ae 	bl	80002d8 <__aeabi_dsub>
 800917c:	4632      	mov	r2, r6
 800917e:	463b      	mov	r3, r7
 8009180:	f7f7 fa62 	bl	8000648 <__aeabi_dmul>
 8009184:	a35e      	add	r3, pc, #376	@ (adr r3, 8009300 <atan+0x2e8>)
 8009186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918a:	f7f7 f8a5 	bl	80002d8 <__aeabi_dsub>
 800918e:	4632      	mov	r2, r6
 8009190:	463b      	mov	r3, r7
 8009192:	f7f7 fa59 	bl	8000648 <__aeabi_dmul>
 8009196:	a35c      	add	r3, pc, #368	@ (adr r3, 8009308 <atan+0x2f0>)
 8009198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919c:	f7f7 f89c 	bl	80002d8 <__aeabi_dsub>
 80091a0:	4632      	mov	r2, r6
 80091a2:	463b      	mov	r3, r7
 80091a4:	f7f7 fa50 	bl	8000648 <__aeabi_dmul>
 80091a8:	a359      	add	r3, pc, #356	@ (adr r3, 8009310 <atan+0x2f8>)
 80091aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ae:	f7f7 f893 	bl	80002d8 <__aeabi_dsub>
 80091b2:	4632      	mov	r2, r6
 80091b4:	463b      	mov	r3, r7
 80091b6:	f7f7 fa47 	bl	8000648 <__aeabi_dmul>
 80091ba:	4602      	mov	r2, r0
 80091bc:	460b      	mov	r3, r1
 80091be:	4640      	mov	r0, r8
 80091c0:	4649      	mov	r1, r9
 80091c2:	f7f7 f88b 	bl	80002dc <__adddf3>
 80091c6:	4622      	mov	r2, r4
 80091c8:	462b      	mov	r3, r5
 80091ca:	f7f7 fa3d 	bl	8000648 <__aeabi_dmul>
 80091ce:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 80091d2:	4602      	mov	r2, r0
 80091d4:	460b      	mov	r3, r1
 80091d6:	d148      	bne.n	800926a <atan+0x252>
 80091d8:	4620      	mov	r0, r4
 80091da:	4629      	mov	r1, r5
 80091dc:	f7f7 f87c 	bl	80002d8 <__aeabi_dsub>
 80091e0:	e72f      	b.n	8009042 <atan+0x2a>
 80091e2:	4b52      	ldr	r3, [pc, #328]	@ (800932c <atan+0x314>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	4620      	mov	r0, r4
 80091e8:	4629      	mov	r1, r5
 80091ea:	f7f7 f875 	bl	80002d8 <__aeabi_dsub>
 80091ee:	4b4f      	ldr	r3, [pc, #316]	@ (800932c <atan+0x314>)
 80091f0:	4606      	mov	r6, r0
 80091f2:	460f      	mov	r7, r1
 80091f4:	2200      	movs	r2, #0
 80091f6:	4620      	mov	r0, r4
 80091f8:	4629      	mov	r1, r5
 80091fa:	f7f7 f86f 	bl	80002dc <__adddf3>
 80091fe:	4602      	mov	r2, r0
 8009200:	460b      	mov	r3, r1
 8009202:	4630      	mov	r0, r6
 8009204:	4639      	mov	r1, r7
 8009206:	f7f7 fb49 	bl	800089c <__aeabi_ddiv>
 800920a:	f04f 0a01 	mov.w	sl, #1
 800920e:	4604      	mov	r4, r0
 8009210:	460d      	mov	r5, r1
 8009212:	e765      	b.n	80090e0 <atan+0xc8>
 8009214:	4b47      	ldr	r3, [pc, #284]	@ (8009334 <atan+0x31c>)
 8009216:	429e      	cmp	r6, r3
 8009218:	d21c      	bcs.n	8009254 <atan+0x23c>
 800921a:	4b47      	ldr	r3, [pc, #284]	@ (8009338 <atan+0x320>)
 800921c:	2200      	movs	r2, #0
 800921e:	4620      	mov	r0, r4
 8009220:	4629      	mov	r1, r5
 8009222:	f7f7 f859 	bl	80002d8 <__aeabi_dsub>
 8009226:	4b44      	ldr	r3, [pc, #272]	@ (8009338 <atan+0x320>)
 8009228:	4606      	mov	r6, r0
 800922a:	460f      	mov	r7, r1
 800922c:	2200      	movs	r2, #0
 800922e:	4620      	mov	r0, r4
 8009230:	4629      	mov	r1, r5
 8009232:	f7f7 fa09 	bl	8000648 <__aeabi_dmul>
 8009236:	4b3d      	ldr	r3, [pc, #244]	@ (800932c <atan+0x314>)
 8009238:	2200      	movs	r2, #0
 800923a:	f7f7 f84f 	bl	80002dc <__adddf3>
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	4630      	mov	r0, r6
 8009244:	4639      	mov	r1, r7
 8009246:	f7f7 fb29 	bl	800089c <__aeabi_ddiv>
 800924a:	f04f 0a02 	mov.w	sl, #2
 800924e:	4604      	mov	r4, r0
 8009250:	460d      	mov	r5, r1
 8009252:	e745      	b.n	80090e0 <atan+0xc8>
 8009254:	4622      	mov	r2, r4
 8009256:	462b      	mov	r3, r5
 8009258:	4938      	ldr	r1, [pc, #224]	@ (800933c <atan+0x324>)
 800925a:	2000      	movs	r0, #0
 800925c:	f7f7 fb1e 	bl	800089c <__aeabi_ddiv>
 8009260:	f04f 0a03 	mov.w	sl, #3
 8009264:	4604      	mov	r4, r0
 8009266:	460d      	mov	r5, r1
 8009268:	e73a      	b.n	80090e0 <atan+0xc8>
 800926a:	4b35      	ldr	r3, [pc, #212]	@ (8009340 <atan+0x328>)
 800926c:	4e35      	ldr	r6, [pc, #212]	@ (8009344 <atan+0x32c>)
 800926e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009276:	f7f7 f82f 	bl	80002d8 <__aeabi_dsub>
 800927a:	4622      	mov	r2, r4
 800927c:	462b      	mov	r3, r5
 800927e:	f7f7 f82b 	bl	80002d8 <__aeabi_dsub>
 8009282:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800928e:	f7f7 f823 	bl	80002d8 <__aeabi_dsub>
 8009292:	f1bb 0f00 	cmp.w	fp, #0
 8009296:	4604      	mov	r4, r0
 8009298:	460d      	mov	r5, r1
 800929a:	f6bf aedc 	bge.w	8009056 <atan+0x3e>
 800929e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80092a2:	461d      	mov	r5, r3
 80092a4:	e6d7      	b.n	8009056 <atan+0x3e>
 80092a6:	a51c      	add	r5, pc, #112	@ (adr r5, 8009318 <atan+0x300>)
 80092a8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80092ac:	e6d3      	b.n	8009056 <atan+0x3e>
 80092ae:	bf00      	nop
 80092b0:	54442d18 	.word	0x54442d18
 80092b4:	3ff921fb 	.word	0x3ff921fb
 80092b8:	8800759c 	.word	0x8800759c
 80092bc:	7e37e43c 	.word	0x7e37e43c
 80092c0:	e322da11 	.word	0xe322da11
 80092c4:	3f90ad3a 	.word	0x3f90ad3a
 80092c8:	24760deb 	.word	0x24760deb
 80092cc:	3fa97b4b 	.word	0x3fa97b4b
 80092d0:	a0d03d51 	.word	0xa0d03d51
 80092d4:	3fb10d66 	.word	0x3fb10d66
 80092d8:	c54c206e 	.word	0xc54c206e
 80092dc:	3fb745cd 	.word	0x3fb745cd
 80092e0:	920083ff 	.word	0x920083ff
 80092e4:	3fc24924 	.word	0x3fc24924
 80092e8:	5555550d 	.word	0x5555550d
 80092ec:	3fd55555 	.word	0x3fd55555
 80092f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80092f4:	bfa2b444 	.word	0xbfa2b444
 80092f8:	52defd9a 	.word	0x52defd9a
 80092fc:	3fadde2d 	.word	0x3fadde2d
 8009300:	af749a6d 	.word	0xaf749a6d
 8009304:	3fb3b0f2 	.word	0x3fb3b0f2
 8009308:	fe231671 	.word	0xfe231671
 800930c:	3fbc71c6 	.word	0x3fbc71c6
 8009310:	9998ebc4 	.word	0x9998ebc4
 8009314:	3fc99999 	.word	0x3fc99999
 8009318:	54442d18 	.word	0x54442d18
 800931c:	bff921fb 	.word	0xbff921fb
 8009320:	440fffff 	.word	0x440fffff
 8009324:	7ff00000 	.word	0x7ff00000
 8009328:	3fdbffff 	.word	0x3fdbffff
 800932c:	3ff00000 	.word	0x3ff00000
 8009330:	3ff2ffff 	.word	0x3ff2ffff
 8009334:	40038000 	.word	0x40038000
 8009338:	3ff80000 	.word	0x3ff80000
 800933c:	bff00000 	.word	0xbff00000
 8009340:	08009728 	.word	0x08009728
 8009344:	08009748 	.word	0x08009748

08009348 <fabs>:
 8009348:	ec51 0b10 	vmov	r0, r1, d0
 800934c:	4602      	mov	r2, r0
 800934e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009352:	ec43 2b10 	vmov	d0, r2, r3
 8009356:	4770      	bx	lr

08009358 <__ieee754_sqrt>:
 8009358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	4a68      	ldr	r2, [pc, #416]	@ (8009500 <__ieee754_sqrt+0x1a8>)
 800935e:	ec55 4b10 	vmov	r4, r5, d0
 8009362:	43aa      	bics	r2, r5
 8009364:	462b      	mov	r3, r5
 8009366:	4621      	mov	r1, r4
 8009368:	d110      	bne.n	800938c <__ieee754_sqrt+0x34>
 800936a:	4622      	mov	r2, r4
 800936c:	4620      	mov	r0, r4
 800936e:	4629      	mov	r1, r5
 8009370:	f7f7 f96a 	bl	8000648 <__aeabi_dmul>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	4620      	mov	r0, r4
 800937a:	4629      	mov	r1, r5
 800937c:	f7f6 ffae 	bl	80002dc <__adddf3>
 8009380:	4604      	mov	r4, r0
 8009382:	460d      	mov	r5, r1
 8009384:	ec45 4b10 	vmov	d0, r4, r5
 8009388:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800938c:	2d00      	cmp	r5, #0
 800938e:	dc0e      	bgt.n	80093ae <__ieee754_sqrt+0x56>
 8009390:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009394:	4322      	orrs	r2, r4
 8009396:	d0f5      	beq.n	8009384 <__ieee754_sqrt+0x2c>
 8009398:	b19d      	cbz	r5, 80093c2 <__ieee754_sqrt+0x6a>
 800939a:	4622      	mov	r2, r4
 800939c:	4620      	mov	r0, r4
 800939e:	4629      	mov	r1, r5
 80093a0:	f7f6 ff9a 	bl	80002d8 <__aeabi_dsub>
 80093a4:	4602      	mov	r2, r0
 80093a6:	460b      	mov	r3, r1
 80093a8:	f7f7 fa78 	bl	800089c <__aeabi_ddiv>
 80093ac:	e7e8      	b.n	8009380 <__ieee754_sqrt+0x28>
 80093ae:	152a      	asrs	r2, r5, #20
 80093b0:	d115      	bne.n	80093de <__ieee754_sqrt+0x86>
 80093b2:	2000      	movs	r0, #0
 80093b4:	e009      	b.n	80093ca <__ieee754_sqrt+0x72>
 80093b6:	0acb      	lsrs	r3, r1, #11
 80093b8:	3a15      	subs	r2, #21
 80093ba:	0549      	lsls	r1, r1, #21
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d0fa      	beq.n	80093b6 <__ieee754_sqrt+0x5e>
 80093c0:	e7f7      	b.n	80093b2 <__ieee754_sqrt+0x5a>
 80093c2:	462a      	mov	r2, r5
 80093c4:	e7fa      	b.n	80093bc <__ieee754_sqrt+0x64>
 80093c6:	005b      	lsls	r3, r3, #1
 80093c8:	3001      	adds	r0, #1
 80093ca:	02dc      	lsls	r4, r3, #11
 80093cc:	d5fb      	bpl.n	80093c6 <__ieee754_sqrt+0x6e>
 80093ce:	1e44      	subs	r4, r0, #1
 80093d0:	1b12      	subs	r2, r2, r4
 80093d2:	f1c0 0420 	rsb	r4, r0, #32
 80093d6:	fa21 f404 	lsr.w	r4, r1, r4
 80093da:	4323      	orrs	r3, r4
 80093dc:	4081      	lsls	r1, r0
 80093de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093e2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80093e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093ea:	07d2      	lsls	r2, r2, #31
 80093ec:	bf5c      	itt	pl
 80093ee:	005b      	lslpl	r3, r3, #1
 80093f0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80093f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80093f8:	bf58      	it	pl
 80093fa:	0049      	lslpl	r1, r1, #1
 80093fc:	2600      	movs	r6, #0
 80093fe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009402:	106d      	asrs	r5, r5, #1
 8009404:	0049      	lsls	r1, r1, #1
 8009406:	2016      	movs	r0, #22
 8009408:	4632      	mov	r2, r6
 800940a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800940e:	1917      	adds	r7, r2, r4
 8009410:	429f      	cmp	r7, r3
 8009412:	bfde      	ittt	le
 8009414:	193a      	addle	r2, r7, r4
 8009416:	1bdb      	suble	r3, r3, r7
 8009418:	1936      	addle	r6, r6, r4
 800941a:	0fcf      	lsrs	r7, r1, #31
 800941c:	3801      	subs	r0, #1
 800941e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009422:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009426:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800942a:	d1f0      	bne.n	800940e <__ieee754_sqrt+0xb6>
 800942c:	4604      	mov	r4, r0
 800942e:	2720      	movs	r7, #32
 8009430:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009434:	429a      	cmp	r2, r3
 8009436:	eb00 0e0c 	add.w	lr, r0, ip
 800943a:	db02      	blt.n	8009442 <__ieee754_sqrt+0xea>
 800943c:	d113      	bne.n	8009466 <__ieee754_sqrt+0x10e>
 800943e:	458e      	cmp	lr, r1
 8009440:	d811      	bhi.n	8009466 <__ieee754_sqrt+0x10e>
 8009442:	f1be 0f00 	cmp.w	lr, #0
 8009446:	eb0e 000c 	add.w	r0, lr, ip
 800944a:	da42      	bge.n	80094d2 <__ieee754_sqrt+0x17a>
 800944c:	2800      	cmp	r0, #0
 800944e:	db40      	blt.n	80094d2 <__ieee754_sqrt+0x17a>
 8009450:	f102 0801 	add.w	r8, r2, #1
 8009454:	1a9b      	subs	r3, r3, r2
 8009456:	458e      	cmp	lr, r1
 8009458:	bf88      	it	hi
 800945a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800945e:	eba1 010e 	sub.w	r1, r1, lr
 8009462:	4464      	add	r4, ip
 8009464:	4642      	mov	r2, r8
 8009466:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800946a:	3f01      	subs	r7, #1
 800946c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009470:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009474:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009478:	d1dc      	bne.n	8009434 <__ieee754_sqrt+0xdc>
 800947a:	4319      	orrs	r1, r3
 800947c:	d01b      	beq.n	80094b6 <__ieee754_sqrt+0x15e>
 800947e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009504 <__ieee754_sqrt+0x1ac>
 8009482:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009508 <__ieee754_sqrt+0x1b0>
 8009486:	e9da 0100 	ldrd	r0, r1, [sl]
 800948a:	e9db 2300 	ldrd	r2, r3, [fp]
 800948e:	f7f6 ff23 	bl	80002d8 <__aeabi_dsub>
 8009492:	e9da 8900 	ldrd	r8, r9, [sl]
 8009496:	4602      	mov	r2, r0
 8009498:	460b      	mov	r3, r1
 800949a:	4640      	mov	r0, r8
 800949c:	4649      	mov	r1, r9
 800949e:	f7f7 fb4f 	bl	8000b40 <__aeabi_dcmple>
 80094a2:	b140      	cbz	r0, 80094b6 <__ieee754_sqrt+0x15e>
 80094a4:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80094a8:	e9da 0100 	ldrd	r0, r1, [sl]
 80094ac:	e9db 2300 	ldrd	r2, r3, [fp]
 80094b0:	d111      	bne.n	80094d6 <__ieee754_sqrt+0x17e>
 80094b2:	3601      	adds	r6, #1
 80094b4:	463c      	mov	r4, r7
 80094b6:	1072      	asrs	r2, r6, #1
 80094b8:	0863      	lsrs	r3, r4, #1
 80094ba:	07f1      	lsls	r1, r6, #31
 80094bc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80094c0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80094c4:	bf48      	it	mi
 80094c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80094ca:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80094ce:	4618      	mov	r0, r3
 80094d0:	e756      	b.n	8009380 <__ieee754_sqrt+0x28>
 80094d2:	4690      	mov	r8, r2
 80094d4:	e7be      	b.n	8009454 <__ieee754_sqrt+0xfc>
 80094d6:	f7f6 ff01 	bl	80002dc <__adddf3>
 80094da:	e9da 8900 	ldrd	r8, r9, [sl]
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	4640      	mov	r0, r8
 80094e4:	4649      	mov	r1, r9
 80094e6:	f7f7 fb21 	bl	8000b2c <__aeabi_dcmplt>
 80094ea:	b120      	cbz	r0, 80094f6 <__ieee754_sqrt+0x19e>
 80094ec:	1ca0      	adds	r0, r4, #2
 80094ee:	bf08      	it	eq
 80094f0:	3601      	addeq	r6, #1
 80094f2:	3402      	adds	r4, #2
 80094f4:	e7df      	b.n	80094b6 <__ieee754_sqrt+0x15e>
 80094f6:	1c63      	adds	r3, r4, #1
 80094f8:	f023 0401 	bic.w	r4, r3, #1
 80094fc:	e7db      	b.n	80094b6 <__ieee754_sqrt+0x15e>
 80094fe:	bf00      	nop
 8009500:	7ff00000 	.word	0x7ff00000
 8009504:	200000e8 	.word	0x200000e8
 8009508:	200000e0 	.word	0x200000e0

0800950c <_init>:
 800950c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950e:	bf00      	nop
 8009510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009512:	bc08      	pop	{r3}
 8009514:	469e      	mov	lr, r3
 8009516:	4770      	bx	lr

08009518 <_fini>:
 8009518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951a:	bf00      	nop
 800951c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800951e:	bc08      	pop	{r3}
 8009520:	469e      	mov	lr, r3
 8009522:	4770      	bx	lr
