
jason_without_fan_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d24  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004efc  08004efc  00005efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f3c  08004f3c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f3c  08004f3c  00005f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f44  08004f44  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f44  08004f44  00005f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f48  08004f48  00005f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004f4c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  2000000c  08004f58  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08004f58  0000636c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e92  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c6  00000000  00000000  00017ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  0001a398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca9  00000000  00000000  0001b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000201b7  00000000  00000000  0001c071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000133a3  00000000  00000000  0003c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4f56  00000000  00000000  0004f5cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124521  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000442c  00000000  00000000  00124564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00128990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004ee4 	.word	0x08004ee4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004ee4 	.word	0x08004ee4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 031c 	add.w	r3, r7, #28
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800051e:	4b60      	ldr	r3, [pc, #384]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a5f      	ldr	r2, [pc, #380]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000524:	f043 0310 	orr.w	r3, r3, #16
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b5d      	ldr	r3, [pc, #372]	@ (80006a0 <MX_GPIO_Init+0x198>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0310 	and.w	r3, r3, #16
 8000532:	61bb      	str	r3, [r7, #24]
 8000534:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	4b5a      	ldr	r3, [pc, #360]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a59      	ldr	r2, [pc, #356]	@ (80006a0 <MX_GPIO_Init+0x198>)
 800053c:	f043 0304 	orr.w	r3, r3, #4
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b57      	ldr	r3, [pc, #348]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054e:	4b54      	ldr	r3, [pc, #336]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000552:	4a53      	ldr	r2, [pc, #332]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000554:	f043 0320 	orr.w	r3, r3, #32
 8000558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055a:	4b51      	ldr	r3, [pc, #324]	@ (80006a0 <MX_GPIO_Init+0x198>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	f003 0320 	and.w	r3, r3, #32
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b4e      	ldr	r3, [pc, #312]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	4a4d      	ldr	r2, [pc, #308]	@ (80006a0 <MX_GPIO_Init+0x198>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000572:	4b4b      	ldr	r3, [pc, #300]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b48      	ldr	r3, [pc, #288]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000582:	4a47      	ldr	r2, [pc, #284]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000584:	f043 0302 	orr.w	r3, r3, #2
 8000588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058a:	4b45      	ldr	r3, [pc, #276]	@ (80006a0 <MX_GPIO_Init+0x198>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000596:	4b42      	ldr	r3, [pc, #264]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059a:	4a41      	ldr	r2, [pc, #260]	@ (80006a0 <MX_GPIO_Init+0x198>)
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a2:	4b3f      	ldr	r3, [pc, #252]	@ (80006a0 <MX_GPIO_Init+0x198>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a6:	f003 0308 	and.w	r3, r3, #8
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin|MOTOR_FL_IN2_Pin|LED_4_Pin
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 61fe 	mov.w	r1, #2032	@ 0x7f0
 80005b4:	483b      	ldr	r0, [pc, #236]	@ (80006a4 <MX_GPIO_Init+0x19c>)
 80005b6:	f001 faab 	bl	8001b10 <HAL_GPIO_WritePin>
                          |LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_FL_IN1_Pin|MOTOR_RR_IN2_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2181      	movs	r1, #129	@ 0x81
 80005be:	483a      	ldr	r0, [pc, #232]	@ (80006a8 <MX_GPIO_Init+0x1a0>)
 80005c0:	f001 faa6 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ce:	f001 fa9f 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005d8:	4834      	ldr	r0, [pc, #208]	@ (80006ac <MX_GPIO_Init+0x1a4>)
 80005da:	f001 fa99 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2101      	movs	r1, #1
 80005e2:	4833      	ldr	r0, [pc, #204]	@ (80006b0 <MX_GPIO_Init+0x1a8>)
 80005e4:	f001 fa94 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOTOR_RL_IN1_Pin MOTOR_RL_IN2_Pin MOTOR_FL_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin|MOTOR_FL_IN2_Pin;
 80005e8:	2370      	movs	r3, #112	@ 0x70
 80005ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2300      	movs	r3, #0
 80005f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	4619      	mov	r1, r3
 80005fe:	4829      	ldr	r0, [pc, #164]	@ (80006a4 <MX_GPIO_Init+0x19c>)
 8000600:	f001 f904 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FL_IN1_Pin MOTOR_RR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_FL_IN1_Pin|MOTOR_RR_IN2_Pin;
 8000604:	2381      	movs	r3, #129	@ 0x81
 8000606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	2301      	movs	r3, #1
 800060a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2300      	movs	r3, #0
 8000612:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4619      	mov	r1, r3
 800061a:	4823      	ldr	r0, [pc, #140]	@ (80006a8 <MX_GPIO_Init+0x1a0>)
 800061c:	f001 f8f6 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin;
 8000620:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800062e:	2303      	movs	r3, #3
 8000630:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	4619      	mov	r1, r3
 8000638:	481a      	ldr	r0, [pc, #104]	@ (80006a4 <MX_GPIO_Init+0x19c>)
 800063a:	f001 f8e7 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_RR_IN1_Pin */
  GPIO_InitStruct.Pin = MOTOR_RR_IN1_Pin;
 800063e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MOTOR_RR_IN1_GPIO_Port, &GPIO_InitStruct);
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	4619      	mov	r1, r3
 8000656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065a:	f001 f8d7 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_FR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_FR_IN2_Pin;
 800065e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MOTOR_FR_IN2_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4619      	mov	r1, r3
 8000676:	480d      	ldr	r0, [pc, #52]	@ (80006ac <MX_GPIO_Init+0x1a4>)
 8000678:	f001 f8c8 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_FR_IN1_Pin */
  GPIO_InitStruct.Pin = MOTOR_FR_IN1_Pin;
 800067c:	2301      	movs	r3, #1
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MOTOR_FR_IN1_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	4807      	ldr	r0, [pc, #28]	@ (80006b0 <MX_GPIO_Init+0x1a8>)
 8000694:	f001 f8ba 	bl	800180c <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3730      	adds	r7, #48	@ 0x30
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	48001000 	.word	0x48001000
 80006a8:	48000400 	.word	0x48000400
 80006ac:	48000800 	.word	0x48000800
 80006b0:	48000c00 	.word	0x48000c00

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 ff31 	bl	800151e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f8e4 	bl	8000888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f7ff ff22 	bl	8000508 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006c4:	f000 fe1e 	bl	8001304 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80006c8:	f000 f9ee 	bl	8000aa8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006cc:	f000 fa78 	bl	8000bc0 <MX_TIM3_Init>
  MX_TIM1_Init();
 80006d0:	f000 f990 	bl	80009f4 <MX_TIM1_Init>
  MX_TIM8_Init();
 80006d4:	f000 fba2 	bl	8000e1c <MX_TIM8_Init>
  MX_TIM4_Init();
 80006d8:	f000 faf4 	bl	8000cc4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80006dc:	f000 fb48 	bl	8000d70 <MX_TIM5_Init>
  MX_TIM20_Init();
 80006e0:	f000 fbf6 	bl	8000ed0 <MX_TIM20_Init>
  MX_UART4_Init();
 80006e4:	f000 fdc2 	bl	800126c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80006e8:	2100      	movs	r1, #0
 80006ea:	485b      	ldr	r0, [pc, #364]	@ (8000858 <main+0x1a4>)
 80006ec:	f002 fba4 	bl	8002e38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80006f0:	2104      	movs	r1, #4
 80006f2:	4859      	ldr	r0, [pc, #356]	@ (8000858 <main+0x1a4>)
 80006f4:	f002 fba0 	bl	8002e38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006f8:	2100      	movs	r1, #0
 80006fa:	4858      	ldr	r0, [pc, #352]	@ (800085c <main+0x1a8>)
 80006fc:	f002 fb9c 	bl	8002e38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000700:	2104      	movs	r1, #4
 8000702:	4856      	ldr	r0, [pc, #344]	@ (800085c <main+0x1a8>)
 8000704:	f002 fb98 	bl	8002e38 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8000708:	4855      	ldr	r0, [pc, #340]	@ (8000860 <main+0x1ac>)
 800070a:	f002 fabb 	bl	8002c84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 800070e:	213c      	movs	r1, #60	@ 0x3c
 8000710:	4853      	ldr	r0, [pc, #332]	@ (8000860 <main+0x1ac>)
 8000712:	f002 fd49 	bl	80031a8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000716:	4853      	ldr	r0, [pc, #332]	@ (8000864 <main+0x1b0>)
 8000718:	f002 fab4 	bl	8002c84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800071c:	213c      	movs	r1, #60	@ 0x3c
 800071e:	4851      	ldr	r0, [pc, #324]	@ (8000864 <main+0x1b0>)
 8000720:	f002 fd42 	bl	80031a8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8000724:	4850      	ldr	r0, [pc, #320]	@ (8000868 <main+0x1b4>)
 8000726:	f002 faad 	bl	8002c84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 800072a:	213c      	movs	r1, #60	@ 0x3c
 800072c:	484e      	ldr	r0, [pc, #312]	@ (8000868 <main+0x1b4>)
 800072e:	f002 fd3b 	bl	80031a8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8000732:	484e      	ldr	r0, [pc, #312]	@ (800086c <main+0x1b8>)
 8000734:	f002 faa6 	bl	8002c84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8000738:	213c      	movs	r1, #60	@ 0x3c
 800073a:	484c      	ldr	r0, [pc, #304]	@ (800086c <main+0x1b8>)
 800073c:	f002 fd34 	bl	80031a8 <HAL_TIM_Encoder_Start_IT>

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000746:	484a      	ldr	r0, [pc, #296]	@ (8000870 <main+0x1bc>)
 8000748:	f001 f9e2 	bl	8001b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000752:	4847      	ldr	r0, [pc, #284]	@ (8000870 <main+0x1bc>)
 8000754:	f001 f9dc 	bl	8001b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800075e:	4844      	ldr	r0, [pc, #272]	@ (8000870 <main+0x1bc>)
 8000760:	f001 f9d6 	bl	8001b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2180      	movs	r1, #128	@ 0x80
 8000768:	4841      	ldr	r0, [pc, #260]	@ (8000870 <main+0x1bc>)
 800076a:	f001 f9d1 	bl	8001b10 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2101      	movs	r1, #1
 8000772:	4840      	ldr	r0, [pc, #256]	@ (8000874 <main+0x1c0>)
 8000774:	f001 f9cc 	bl	8001b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2140      	movs	r1, #64	@ 0x40
 800077c:	483c      	ldr	r0, [pc, #240]	@ (8000870 <main+0x1bc>)
 800077e:	f001 f9c7 	bl	8001b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2101      	movs	r1, #1
 8000786:	483c      	ldr	r0, [pc, #240]	@ (8000878 <main+0x1c4>)
 8000788:	f001 f9c2 	bl	8001b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000792:	483a      	ldr	r0, [pc, #232]	@ (800087c <main+0x1c8>)
 8000794:	f001 f9bc 	bl	8001b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2110      	movs	r1, #16
 800079c:	4834      	ldr	r0, [pc, #208]	@ (8000870 <main+0x1bc>)
 800079e:	f001 f9b7 	bl	8001b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	2120      	movs	r1, #32
 80007a6:	4832      	ldr	r0, [pc, #200]	@ (8000870 <main+0x1bc>)
 80007a8:	f001 f9b2 	bl	8001b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b6:	f001 f9ab 	bl	8001b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2180      	movs	r1, #128	@ 0x80
 80007be:	482d      	ldr	r0, [pc, #180]	@ (8000874 <main+0x1c0>)
 80007c0:	f001 f9a6 	bl	8001b10 <HAL_GPIO_WritePin>

  TIM3->CCR2 = 65535 / 2;
 80007c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000880 <main+0x1cc>)
 80007c6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80007ca:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM2->CCR1 = 65535 / 2;
 80007cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007d0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80007d4:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2->CCR2 = 65535 / 2;
 80007d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007da:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80007de:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3->CCR1 = 65535 / 2;
 80007e0:	4b27      	ldr	r3, [pc, #156]	@ (8000880 <main+0x1cc>)
 80007e2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80007e6:	635a      	str	r2, [r3, #52]	@ 0x34
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f000 ff09 	bl	8001600 <HAL_Delay>
    if (HAL_GetTick() - time_stamp > 3000) {
 80007ee:	f000 fefb 	bl	80015e8 <HAL_GetTick>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4a23      	ldr	r2, [pc, #140]	@ (8000884 <main+0x1d0>)
 80007f6:	6812      	ldr	r2, [r2, #0]
 80007f8:	1a9b      	subs	r3, r3, r2
 80007fa:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80007fe:	4293      	cmp	r3, r2
 8000800:	d9f2      	bls.n	80007e8 <main+0x134>
      time_stamp = HAL_GetTick();
 8000802:	f000 fef1 	bl	80015e8 <HAL_GetTick>
 8000806:	4603      	mov	r3, r0
 8000808:	461a      	mov	r2, r3
 800080a:	4b1e      	ldr	r3, [pc, #120]	@ (8000884 <main+0x1d0>)
 800080c:	601a      	str	r2, [r3, #0]
      HAL_GPIO_TogglePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin);
 800080e:	2101      	movs	r1, #1
 8000810:	4818      	ldr	r0, [pc, #96]	@ (8000874 <main+0x1c0>)
 8000812:	f001 f995 	bl	8001b40 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin);
 8000816:	2140      	movs	r1, #64	@ 0x40
 8000818:	4815      	ldr	r0, [pc, #84]	@ (8000870 <main+0x1bc>)
 800081a:	f001 f991 	bl	8001b40 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin);
 800081e:	2101      	movs	r1, #1
 8000820:	4815      	ldr	r0, [pc, #84]	@ (8000878 <main+0x1c4>)
 8000822:	f001 f98d 	bl	8001b40 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin);
 8000826:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800082a:	4814      	ldr	r0, [pc, #80]	@ (800087c <main+0x1c8>)
 800082c:	f001 f988 	bl	8001b40 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin);
 8000830:	2110      	movs	r1, #16
 8000832:	480f      	ldr	r0, [pc, #60]	@ (8000870 <main+0x1bc>)
 8000834:	f001 f984 	bl	8001b40 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin);
 8000838:	2120      	movs	r1, #32
 800083a:	480d      	ldr	r0, [pc, #52]	@ (8000870 <main+0x1bc>)
 800083c:	f001 f980 	bl	8001b40 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin);
 8000840:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000844:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000848:	f001 f97a 	bl	8001b40 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin);
 800084c:	2180      	movs	r1, #128	@ 0x80
 800084e:	4809      	ldr	r0, [pc, #36]	@ (8000874 <main+0x1c0>)
 8000850:	f001 f976 	bl	8001b40 <HAL_GPIO_TogglePin>
    HAL_Delay(1);
 8000854:	e7c8      	b.n	80007e8 <main+0x134>
 8000856:	bf00      	nop
 8000858:	20000078 	.word	0x20000078
 800085c:	200000c4 	.word	0x200000c4
 8000860:	2000002c 	.word	0x2000002c
 8000864:	20000110 	.word	0x20000110
 8000868:	2000015c 	.word	0x2000015c
 800086c:	200001a8 	.word	0x200001a8
 8000870:	48001000 	.word	0x48001000
 8000874:	48000400 	.word	0x48000400
 8000878:	48000c00 	.word	0x48000c00
 800087c:	48000800 	.word	0x48000800
 8000880:	40000400 	.word	0x40000400
 8000884:	20000028 	.word	0x20000028

08000888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b094      	sub	sp, #80	@ 0x50
 800088c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 0318 	add.w	r3, r7, #24
 8000892:	2238      	movs	r2, #56	@ 0x38
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f004 faf8 	bl	8004e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f001 f962 	bl	8001b74 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b0:	2301      	movs	r3, #1
 80008b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ba:	2302      	movs	r3, #2
 80008bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008be:	2303      	movs	r3, #3
 80008c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80008c6:	2355      	movs	r3, #85	@ 0x55
 80008c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d6:	f107 0318 	add.w	r3, r7, #24
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 f9fe 	bl	8001cdc <HAL_RCC_OscConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x62>
  {
    Error_Handler();
 80008e6:	f000 f818 	bl	800091a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	230f      	movs	r3, #15
 80008ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ee:	2303      	movs	r3, #3
 80008f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2104      	movs	r1, #4
 8000902:	4618      	mov	r0, r3
 8000904:	f001 fcfc 	bl	8002300 <HAL_RCC_ClockConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800090e:	f000 f804 	bl	800091a <Error_Handler>
  }
}
 8000912:	bf00      	nop
 8000914:	3750      	adds	r7, #80	@ 0x50
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091e:	b672      	cpsid	i
}
 8000920:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000922:	bf00      	nop
 8000924:	e7fd      	b.n	8000922 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <HAL_MspInit+0x44>)
 8000930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000932:	4a0e      	ldr	r2, [pc, #56]	@ (800096c <HAL_MspInit+0x44>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6613      	str	r3, [r2, #96]	@ 0x60
 800093a:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <HAL_MspInit+0x44>)
 800093c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <HAL_MspInit+0x44>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094a:	4a08      	ldr	r2, [pc, #32]	@ (800096c <HAL_MspInit+0x44>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000950:	6593      	str	r3, [r2, #88]	@ 0x58
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <HAL_MspInit+0x44>)
 8000954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800095e:	f001 f9ad 	bl	8001cbc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <NMI_Handler+0x4>

08000978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <MemManage_Handler+0x4>

08000988 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <UsageFault_Handler+0x4>

08000998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c6:	f000 fdfd 	bl	80015c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <SystemInit+0x20>)
 80009d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009da:	4a05      	ldr	r2, [pc, #20]	@ (80009f0 <SystemInit+0x20>)
 80009dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	@ 0x30
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	2224      	movs	r2, #36	@ 0x24
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f004 fa42 	bl	8004e8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a08:	463b      	mov	r3, r7
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a12:	4b23      	ldr	r3, [pc, #140]	@ (8000aa0 <MX_TIM1_Init+0xac>)
 8000a14:	4a23      	ldr	r2, [pc, #140]	@ (8000aa4 <MX_TIM1_Init+0xb0>)
 8000a16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a18:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <MX_TIM1_Init+0xac>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <MX_TIM1_Init+0xac>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa0 <MX_TIM1_Init+0xac>)
 8000a26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <MX_TIM1_Init+0xac>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <MX_TIM1_Init+0xac>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <MX_TIM1_Init+0xac>)
 8000a3a:	2280      	movs	r2, #128	@ 0x80
 8000a3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a46:	2301      	movs	r3, #1
 8000a48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000a4e:	230a      	movs	r3, #10
 8000a50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a56:	2301      	movs	r3, #1
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8000a5e:	230a      	movs	r3, #10
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	4619      	mov	r1, r3
 8000a68:	480d      	ldr	r0, [pc, #52]	@ (8000aa0 <MX_TIM1_Init+0xac>)
 8000a6a:	f002 faf7 	bl	800305c <HAL_TIM_Encoder_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000a74:	f7ff ff51 	bl	800091a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a84:	463b      	mov	r3, r7
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <MX_TIM1_Init+0xac>)
 8000a8a:	f003 fafb 	bl	8004084 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a94:	f7ff ff41 	bl	800091a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	3730      	adds	r7, #48	@ 0x30
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2000002c 	.word	0x2000002c
 8000aa4:	40012c00 	.word	0x40012c00

08000aa8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08e      	sub	sp, #56	@ 0x38
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac8:	463b      	mov	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
 8000ad6:	615a      	str	r2, [r3, #20]
 8000ad8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ada:	4b38      	ldr	r3, [pc, #224]	@ (8000bbc <MX_TIM2_Init+0x114>)
 8000adc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ae0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15-1;
 8000ae2:	4b36      	ldr	r3, [pc, #216]	@ (8000bbc <MX_TIM2_Init+0x114>)
 8000ae4:	220e      	movs	r2, #14
 8000ae6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b34      	ldr	r3, [pc, #208]	@ (8000bbc <MX_TIM2_Init+0x114>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65534;
 8000aee:	4b33      	ldr	r3, [pc, #204]	@ (8000bbc <MX_TIM2_Init+0x114>)
 8000af0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000af4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af6:	4b31      	ldr	r3, [pc, #196]	@ (8000bbc <MX_TIM2_Init+0x114>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000afc:	4b2f      	ldr	r3, [pc, #188]	@ (8000bbc <MX_TIM2_Init+0x114>)
 8000afe:	2280      	movs	r2, #128	@ 0x80
 8000b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b02:	482e      	ldr	r0, [pc, #184]	@ (8000bbc <MX_TIM2_Init+0x114>)
 8000b04:	f002 f866 	bl	8002bd4 <HAL_TIM_Base_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b0e:	f7ff ff04 	bl	800091a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b16:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4827      	ldr	r0, [pc, #156]	@ (8000bbc <MX_TIM2_Init+0x114>)
 8000b20:	f002 fd04 	bl	800352c <HAL_TIM_ConfigClockSource>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b2a:	f7ff fef6 	bl	800091a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b2e:	4823      	ldr	r0, [pc, #140]	@ (8000bbc <MX_TIM2_Init+0x114>)
 8000b30:	f002 f920 	bl	8002d74 <HAL_TIM_PWM_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b3a:	f7ff feee 	bl	800091a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	481b      	ldr	r0, [pc, #108]	@ (8000bbc <MX_TIM2_Init+0x114>)
 8000b4e:	f003 fa99 	bl	8004084 <HAL_TIMEx_MasterConfigSynchronization>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b58:	f7ff fedf 	bl	800091a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b5c:	2360      	movs	r3, #96	@ 0x60
 8000b5e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	4619      	mov	r1, r3
 8000b72:	4812      	ldr	r0, [pc, #72]	@ (8000bbc <MX_TIM2_Init+0x114>)
 8000b74:	f002 fbc6 	bl	8003304 <HAL_TIM_PWM_ConfigChannel>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b7e:	f7ff fecc 	bl	800091a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b82:	463b      	mov	r3, r7
 8000b84:	2204      	movs	r2, #4
 8000b86:	4619      	mov	r1, r3
 8000b88:	480c      	ldr	r0, [pc, #48]	@ (8000bbc <MX_TIM2_Init+0x114>)
 8000b8a:	f002 fbbb 	bl	8003304 <HAL_TIM_PWM_ConfigChannel>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000b94:	f7ff fec1 	bl	800091a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b98:	463b      	mov	r3, r7
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4807      	ldr	r0, [pc, #28]	@ (8000bbc <MX_TIM2_Init+0x114>)
 8000ba0:	f002 fbb0 	bl	8003304 <HAL_TIM_PWM_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000baa:	f7ff feb6 	bl	800091a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bae:	4803      	ldr	r0, [pc, #12]	@ (8000bbc <MX_TIM2_Init+0x114>)
 8000bb0:	f000 fb00 	bl	80011b4 <HAL_TIM_MspPostInit>

}
 8000bb4:	bf00      	nop
 8000bb6:	3738      	adds	r7, #56	@ 0x38
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000078 	.word	0x20000078

08000bc0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08e      	sub	sp, #56	@ 0x38
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000be0:	463b      	mov	r3, r7
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
 8000bee:	615a      	str	r2, [r3, #20]
 8000bf0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bf2:	4b32      	ldr	r3, [pc, #200]	@ (8000cbc <MX_TIM3_Init+0xfc>)
 8000bf4:	4a32      	ldr	r2, [pc, #200]	@ (8000cc0 <MX_TIM3_Init+0x100>)
 8000bf6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15-1;
 8000bf8:	4b30      	ldr	r3, [pc, #192]	@ (8000cbc <MX_TIM3_Init+0xfc>)
 8000bfa:	220e      	movs	r2, #14
 8000bfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8000cbc <MX_TIM3_Init+0xfc>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65534;
 8000c04:	4b2d      	ldr	r3, [pc, #180]	@ (8000cbc <MX_TIM3_Init+0xfc>)
 8000c06:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000c0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000cbc <MX_TIM3_Init+0xfc>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c12:	4b2a      	ldr	r3, [pc, #168]	@ (8000cbc <MX_TIM3_Init+0xfc>)
 8000c14:	2280      	movs	r2, #128	@ 0x80
 8000c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c18:	4828      	ldr	r0, [pc, #160]	@ (8000cbc <MX_TIM3_Init+0xfc>)
 8000c1a:	f001 ffdb 	bl	8002bd4 <HAL_TIM_Base_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c24:	f7ff fe79 	bl	800091a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4821      	ldr	r0, [pc, #132]	@ (8000cbc <MX_TIM3_Init+0xfc>)
 8000c36:	f002 fc79 	bl	800352c <HAL_TIM_ConfigClockSource>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c40:	f7ff fe6b 	bl	800091a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c44:	481d      	ldr	r0, [pc, #116]	@ (8000cbc <MX_TIM3_Init+0xfc>)
 8000c46:	f002 f895 	bl	8002d74 <HAL_TIM_PWM_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c50:	f7ff fe63 	bl	800091a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	4816      	ldr	r0, [pc, #88]	@ (8000cbc <MX_TIM3_Init+0xfc>)
 8000c64:	f003 fa0e 	bl	8004084 <HAL_TIMEx_MasterConfigSynchronization>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c6e:	f7ff fe54 	bl	800091a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c72:	2360      	movs	r3, #96	@ 0x60
 8000c74:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c82:	463b      	mov	r3, r7
 8000c84:	2200      	movs	r2, #0
 8000c86:	4619      	mov	r1, r3
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <MX_TIM3_Init+0xfc>)
 8000c8a:	f002 fb3b 	bl	8003304 <HAL_TIM_PWM_ConfigChannel>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c94:	f7ff fe41 	bl	800091a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2204      	movs	r2, #4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4807      	ldr	r0, [pc, #28]	@ (8000cbc <MX_TIM3_Init+0xfc>)
 8000ca0:	f002 fb30 	bl	8003304 <HAL_TIM_PWM_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000caa:	f7ff fe36 	bl	800091a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cae:	4803      	ldr	r0, [pc, #12]	@ (8000cbc <MX_TIM3_Init+0xfc>)
 8000cb0:	f000 fa80 	bl	80011b4 <HAL_TIM_MspPostInit>

}
 8000cb4:	bf00      	nop
 8000cb6:	3738      	adds	r7, #56	@ 0x38
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200000c4 	.word	0x200000c4
 8000cc0:	40000400 	.word	0x40000400

08000cc4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08c      	sub	sp, #48	@ 0x30
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cca:	f107 030c 	add.w	r3, r7, #12
 8000cce:	2224      	movs	r2, #36	@ 0x24
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f004 f8da 	bl	8004e8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd8:	463b      	mov	r3, r7
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ce2:	4b21      	ldr	r3, [pc, #132]	@ (8000d68 <MX_TIM4_Init+0xa4>)
 8000ce4:	4a21      	ldr	r2, [pc, #132]	@ (8000d6c <MX_TIM4_Init+0xa8>)
 8000ce6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <MX_TIM4_Init+0xa4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cee:	4b1e      	ldr	r3, [pc, #120]	@ (8000d68 <MX_TIM4_Init+0xa4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <MX_TIM4_Init+0xa4>)
 8000cf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cfa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <MX_TIM4_Init+0xa4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d02:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <MX_TIM4_Init+0xa4>)
 8000d04:	2280      	movs	r2, #128	@ 0x80
 8000d06:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d10:	2301      	movs	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000d18:	230a      	movs	r3, #10
 8000d1a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d20:	2301      	movs	r3, #1
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8000d28:	230a      	movs	r3, #10
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	4619      	mov	r1, r3
 8000d32:	480d      	ldr	r0, [pc, #52]	@ (8000d68 <MX_TIM4_Init+0xa4>)
 8000d34:	f002 f992 	bl	800305c <HAL_TIM_Encoder_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d3e:	f7ff fdec 	bl	800091a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4806      	ldr	r0, [pc, #24]	@ (8000d68 <MX_TIM4_Init+0xa4>)
 8000d50:	f003 f998 	bl	8004084 <HAL_TIMEx_MasterConfigSynchronization>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d5a:	f7ff fdde 	bl	800091a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	3730      	adds	r7, #48	@ 0x30
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000110 	.word	0x20000110
 8000d6c:	40000800 	.word	0x40000800

08000d70 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	@ 0x30
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	2224      	movs	r2, #36	@ 0x24
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f004 f884 	bl	8004e8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	463b      	mov	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <MX_TIM5_Init+0xa4>)
 8000d90:	4a21      	ldr	r2, [pc, #132]	@ (8000e18 <MX_TIM5_Init+0xa8>)
 8000d92:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d94:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <MX_TIM5_Init+0xa4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e14 <MX_TIM5_Init+0xa4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000da0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <MX_TIM5_Init+0xa4>)
 8000da2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000da6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <MX_TIM5_Init+0xa4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <MX_TIM5_Init+0xa4>)
 8000db0:	2280      	movs	r2, #128	@ 0x80
 8000db2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000db4:	2303      	movs	r3, #3
 8000db6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000db8:	2300      	movs	r3, #0
 8000dba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000dc4:	230a      	movs	r3, #10
 8000dc6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8000dd4:	230a      	movs	r3, #10
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480d      	ldr	r0, [pc, #52]	@ (8000e14 <MX_TIM5_Init+0xa4>)
 8000de0:	f002 f93c 	bl	800305c <HAL_TIM_Encoder_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000dea:	f7ff fd96 	bl	800091a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000df6:	463b      	mov	r3, r7
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4806      	ldr	r0, [pc, #24]	@ (8000e14 <MX_TIM5_Init+0xa4>)
 8000dfc:	f003 f942 	bl	8004084 <HAL_TIMEx_MasterConfigSynchronization>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000e06:	f7ff fd88 	bl	800091a <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	3730      	adds	r7, #48	@ 0x30
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000015c 	.word	0x2000015c
 8000e18:	40000c00 	.word	0x40000c00

08000e1c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	@ 0x30
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	2224      	movs	r2, #36	@ 0x24
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f004 f82e 	bl	8004e8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e30:	463b      	mov	r3, r7
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e3a:	4b23      	ldr	r3, [pc, #140]	@ (8000ec8 <MX_TIM8_Init+0xac>)
 8000e3c:	4a23      	ldr	r2, [pc, #140]	@ (8000ecc <MX_TIM8_Init+0xb0>)
 8000e3e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e40:	4b21      	ldr	r3, [pc, #132]	@ (8000ec8 <MX_TIM8_Init+0xac>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b20      	ldr	r3, [pc, #128]	@ (8000ec8 <MX_TIM8_Init+0xac>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec8 <MX_TIM8_Init+0xac>)
 8000e4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e52:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <MX_TIM8_Init+0xac>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <MX_TIM8_Init+0xac>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e60:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <MX_TIM8_Init+0xac>)
 8000e62:	2280      	movs	r2, #128	@ 0x80
 8000e64:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e66:	2303      	movs	r3, #3
 8000e68:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000e76:	230a      	movs	r3, #10
 8000e78:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8000e86:	230a      	movs	r3, #10
 8000e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480d      	ldr	r0, [pc, #52]	@ (8000ec8 <MX_TIM8_Init+0xac>)
 8000e92:	f002 f8e3 	bl	800305c <HAL_TIM_Encoder_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000e9c:	f7ff fd3d 	bl	800091a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <MX_TIM8_Init+0xac>)
 8000eb2:	f003 f8e7 	bl	8004084 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000ebc:	f7ff fd2d 	bl	800091a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	3730      	adds	r7, #48	@ 0x30
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200001a8 	.word	0x200001a8
 8000ecc:	40013400 	.word	0x40013400

08000ed0 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed6:	f107 0310 	add.w	r3, r7, #16
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8000eee:	4b20      	ldr	r3, [pc, #128]	@ (8000f70 <MX_TIM20_Init+0xa0>)
 8000ef0:	4a20      	ldr	r2, [pc, #128]	@ (8000f74 <MX_TIM20_Init+0xa4>)
 8000ef2:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 13-1;
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f70 <MX_TIM20_Init+0xa0>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efa:	4b1d      	ldr	r3, [pc, #116]	@ (8000f70 <MX_TIM20_Init+0xa0>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	@ (8000f70 <MX_TIM20_Init+0xa0>)
 8000f02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f06:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f08:	4b19      	ldr	r3, [pc, #100]	@ (8000f70 <MX_TIM20_Init+0xa0>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	@ (8000f70 <MX_TIM20_Init+0xa0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f14:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <MX_TIM20_Init+0xa0>)
 8000f16:	2280      	movs	r2, #128	@ 0x80
 8000f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8000f1a:	4815      	ldr	r0, [pc, #84]	@ (8000f70 <MX_TIM20_Init+0xa0>)
 8000f1c:	f001 fe5a 	bl	8002bd4 <HAL_TIM_Base_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM20_Init+0x5a>
  {
    Error_Handler();
 8000f26:	f7ff fcf8 	bl	800091a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4619      	mov	r1, r3
 8000f36:	480e      	ldr	r0, [pc, #56]	@ (8000f70 <MX_TIM20_Init+0xa0>)
 8000f38:	f002 faf8 	bl	800352c <HAL_TIM_ConfigClockSource>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM20_Init+0x76>
  {
    Error_Handler();
 8000f42:	f7ff fcea 	bl	800091a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	4619      	mov	r1, r3
 8000f56:	4806      	ldr	r0, [pc, #24]	@ (8000f70 <MX_TIM20_Init+0xa0>)
 8000f58:	f003 f894 	bl	8004084 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM20_Init+0x96>
  {
    Error_Handler();
 8000f62:	f7ff fcda 	bl	800091a <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	3720      	adds	r7, #32
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200001f4 	.word	0x200001f4
 8000f74:	40015000 	.word	0x40015000

08000f78 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b090      	sub	sp, #64	@ 0x40
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a5d      	ldr	r2, [pc, #372]	@ (800110c <HAL_TIM_Encoder_MspInit+0x194>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d128      	bne.n	8000fec <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f9e:	4a5c      	ldr	r2, [pc, #368]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 8000fa0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fa4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fa6:	4b5a      	ldr	r3, [pc, #360]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 8000fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000faa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	4b57      	ldr	r3, [pc, #348]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb6:	4a56      	ldr	r2, [pc, #344]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fbe:	4b54      	ldr	r3, [pc, #336]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	484b      	ldr	r0, [pc, #300]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x19c>)
 8000fe6:	f000 fc11 	bl	800180c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000fea:	e08a      	b.n	8001102 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a49      	ldr	r2, [pc, #292]	@ (8001118 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d129      	bne.n	800104a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ff6:	4b46      	ldr	r3, [pc, #280]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffa:	4a45      	ldr	r2, [pc, #276]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	6593      	str	r3, [r2, #88]	@ 0x58
 8001002:	4b43      	ldr	r3, [pc, #268]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	623b      	str	r3, [r7, #32]
 800100c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800100e:	4b40      	ldr	r3, [pc, #256]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001012:	4a3f      	ldr	r2, [pc, #252]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 8001014:	f043 0308 	orr.w	r3, r3, #8
 8001018:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101a:	4b3d      	ldr	r3, [pc, #244]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001026:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001038:	2302      	movs	r3, #2
 800103a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001040:	4619      	mov	r1, r3
 8001042:	4836      	ldr	r0, [pc, #216]	@ (800111c <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001044:	f000 fbe2 	bl	800180c <HAL_GPIO_Init>
}
 8001048:	e05b      	b.n	8001102 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a34      	ldr	r2, [pc, #208]	@ (8001120 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d129      	bne.n	80010a8 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001054:	4b2e      	ldr	r3, [pc, #184]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 8001056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001058:	4a2d      	ldr	r2, [pc, #180]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 800105a:	f043 0308 	orr.w	r3, r3, #8
 800105e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001060:	4b2b      	ldr	r3, [pc, #172]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 8001062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001064:	f003 0308 	and.w	r3, r3, #8
 8001068:	61bb      	str	r3, [r7, #24]
 800106a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	4b28      	ldr	r3, [pc, #160]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 800106e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001070:	4a27      	ldr	r2, [pc, #156]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001078:	4b25      	ldr	r3, [pc, #148]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 800107a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001084:	2303      	movs	r3, #3
 8001086:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001094:	2302      	movs	r3, #2
 8001096:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800109c:	4619      	mov	r1, r3
 800109e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a2:	f000 fbb3 	bl	800180c <HAL_GPIO_Init>
}
 80010a6:	e02c      	b.n	8001102 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001124 <HAL_TIM_Encoder_MspInit+0x1ac>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d127      	bne.n	8001102 <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80010b2:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 80010b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b6:	4a16      	ldr	r2, [pc, #88]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 80010b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80010be:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 80010c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	4a10      	ldr	r2, [pc, #64]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x198>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010e2:	23c0      	movs	r3, #192	@ 0xc0
 80010e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80010f2:	2304      	movs	r3, #4
 80010f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x19c>)
 80010fe:	f000 fb85 	bl	800180c <HAL_GPIO_Init>
}
 8001102:	bf00      	nop
 8001104:	3740      	adds	r7, #64	@ 0x40
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40012c00 	.word	0x40012c00
 8001110:	40021000 	.word	0x40021000
 8001114:	48000800 	.word	0x48000800
 8001118:	40000800 	.word	0x40000800
 800111c:	48000c00 	.word	0x48000c00
 8001120:	40000c00 	.word	0x40000c00
 8001124:	40013400 	.word	0x40013400

08001128 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001128:	b480      	push	{r7}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001138:	d10c      	bne.n	8001154 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800113a:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <HAL_TIM_Base_MspInit+0x80>)
 800113c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113e:	4a1a      	ldr	r2, [pc, #104]	@ (80011a8 <HAL_TIM_Base_MspInit+0x80>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6593      	str	r3, [r2, #88]	@ 0x58
 8001146:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <HAL_TIM_Base_MspInit+0x80>)
 8001148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8001152:	e022      	b.n	800119a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a14      	ldr	r2, [pc, #80]	@ (80011ac <HAL_TIM_Base_MspInit+0x84>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d10c      	bne.n	8001178 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800115e:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <HAL_TIM_Base_MspInit+0x80>)
 8001160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001162:	4a11      	ldr	r2, [pc, #68]	@ (80011a8 <HAL_TIM_Base_MspInit+0x80>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6593      	str	r3, [r2, #88]	@ 0x58
 800116a:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <HAL_TIM_Base_MspInit+0x80>)
 800116c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
}
 8001176:	e010      	b.n	800119a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM20)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0c      	ldr	r2, [pc, #48]	@ (80011b0 <HAL_TIM_Base_MspInit+0x88>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d10b      	bne.n	800119a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8001182:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <HAL_TIM_Base_MspInit+0x80>)
 8001184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001186:	4a08      	ldr	r2, [pc, #32]	@ (80011a8 <HAL_TIM_Base_MspInit+0x80>)
 8001188:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800118c:	6613      	str	r3, [r2, #96]	@ 0x60
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <HAL_TIM_Base_MspInit+0x80>)
 8001190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001192:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
}
 800119a:	bf00      	nop
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40000400 	.word	0x40000400
 80011b0:	40015000 	.word	0x40015000

080011b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	@ 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011d4:	d11c      	bne.n	8001210 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d6:	4b21      	ldr	r3, [pc, #132]	@ (800125c <HAL_TIM_MspPostInit+0xa8>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	4a20      	ldr	r2, [pc, #128]	@ (800125c <HAL_TIM_MspPostInit+0xa8>)
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e2:	4b1e      	ldr	r3, [pc, #120]	@ (800125c <HAL_TIM_MspPostInit+0xa8>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    PD6     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 80011ee:	2358      	movs	r3, #88	@ 0x58
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80011fe:	2302      	movs	r3, #2
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	4815      	ldr	r0, [pc, #84]	@ (8001260 <HAL_TIM_MspPostInit+0xac>)
 800120a:	f000 faff 	bl	800180c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800120e:	e020      	b.n	8001252 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <HAL_TIM_MspPostInit+0xb0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d11b      	bne.n	8001252 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <HAL_TIM_MspPostInit+0xa8>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121e:	4a0f      	ldr	r2, [pc, #60]	@ (800125c <HAL_TIM_MspPostInit+0xa8>)
 8001220:	f043 0310 	orr.w	r3, r3, #16
 8001224:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001226:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <HAL_TIM_MspPostInit+0xa8>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122a:	f003 0310 	and.w	r3, r3, #16
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001232:	230c      	movs	r3, #12
 8001234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001242:	2302      	movs	r3, #2
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	4806      	ldr	r0, [pc, #24]	@ (8001268 <HAL_TIM_MspPostInit+0xb4>)
 800124e:	f000 fadd 	bl	800180c <HAL_GPIO_Init>
}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	@ 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000
 8001260:	48000c00 	.word	0x48000c00
 8001264:	40000400 	.word	0x40000400
 8001268:	48001000 	.word	0x48001000

0800126c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001270:	4b22      	ldr	r3, [pc, #136]	@ (80012fc <MX_UART4_Init+0x90>)
 8001272:	4a23      	ldr	r2, [pc, #140]	@ (8001300 <MX_UART4_Init+0x94>)
 8001274:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001276:	4b21      	ldr	r3, [pc, #132]	@ (80012fc <MX_UART4_Init+0x90>)
 8001278:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800127c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b1f      	ldr	r3, [pc, #124]	@ (80012fc <MX_UART4_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <MX_UART4_Init+0x90>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800128a:	4b1c      	ldr	r3, [pc, #112]	@ (80012fc <MX_UART4_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <MX_UART4_Init+0x90>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <MX_UART4_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <MX_UART4_Init+0x90>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a2:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <MX_UART4_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012a8:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <MX_UART4_Init+0x90>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ae:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <MX_UART4_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012b4:	4811      	ldr	r0, [pc, #68]	@ (80012fc <MX_UART4_Init+0x90>)
 80012b6:	f002 ff7b 	bl	80041b0 <HAL_UART_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80012c0:	f7ff fb2b 	bl	800091a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012c4:	2100      	movs	r1, #0
 80012c6:	480d      	ldr	r0, [pc, #52]	@ (80012fc <MX_UART4_Init+0x90>)
 80012c8:	f003 fd16 	bl	8004cf8 <HAL_UARTEx_SetTxFifoThreshold>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80012d2:	f7ff fb22 	bl	800091a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d6:	2100      	movs	r1, #0
 80012d8:	4808      	ldr	r0, [pc, #32]	@ (80012fc <MX_UART4_Init+0x90>)
 80012da:	f003 fd4b 	bl	8004d74 <HAL_UARTEx_SetRxFifoThreshold>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80012e4:	f7ff fb19 	bl	800091a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80012e8:	4804      	ldr	r0, [pc, #16]	@ (80012fc <MX_UART4_Init+0x90>)
 80012ea:	f003 fccc 	bl	8004c86 <HAL_UARTEx_DisableFifoMode>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80012f4:	f7ff fb11 	bl	800091a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000240 	.word	0x20000240
 8001300:	40004c00 	.word	0x40004c00

08001304 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001308:	4b22      	ldr	r3, [pc, #136]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 800130a:	4a23      	ldr	r2, [pc, #140]	@ (8001398 <MX_USART1_UART_Init+0x94>)
 800130c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800130e:	4b21      	ldr	r3, [pc, #132]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b1f      	ldr	r3, [pc, #124]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b1d      	ldr	r3, [pc, #116]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001322:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800133a:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001340:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001346:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001348:	2200      	movs	r2, #0
 800134a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800134c:	4811      	ldr	r0, [pc, #68]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 800134e:	f002 ff2f 	bl	80041b0 <HAL_UART_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001358:	f7ff fadf 	bl	800091a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800135c:	2100      	movs	r1, #0
 800135e:	480d      	ldr	r0, [pc, #52]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001360:	f003 fcca 	bl	8004cf8 <HAL_UARTEx_SetTxFifoThreshold>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800136a:	f7ff fad6 	bl	800091a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800136e:	2100      	movs	r1, #0
 8001370:	4808      	ldr	r0, [pc, #32]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001372:	f003 fcff 	bl	8004d74 <HAL_UARTEx_SetRxFifoThreshold>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800137c:	f7ff facd 	bl	800091a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001380:	4804      	ldr	r0, [pc, #16]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001382:	f003 fc80 	bl	8004c86 <HAL_UARTEx_DisableFifoMode>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800138c:	f7ff fac5 	bl	800091a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200002d4 	.word	0x200002d4
 8001398:	40013800 	.word	0x40013800

0800139c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b0a0      	sub	sp, #128	@ 0x80
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b4:	f107 0318 	add.w	r3, r7, #24
 80013b8:	2254      	movs	r2, #84	@ 0x54
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f003 fd65 	bl	8004e8c <memset>
  if(uartHandle->Instance==UART4)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a3d      	ldr	r2, [pc, #244]	@ (80014bc <HAL_UART_MspInit+0x120>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d137      	bne.n	800143c <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80013cc:	2308      	movs	r3, #8
 80013ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d4:	f107 0318 	add.w	r3, r7, #24
 80013d8:	4618      	mov	r0, r3
 80013da:	f001 f9ad 	bl	8002738 <HAL_RCCEx_PeriphCLKConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013e4:	f7ff fa99 	bl	800091a <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013e8:	4b35      	ldr	r3, [pc, #212]	@ (80014c0 <HAL_UART_MspInit+0x124>)
 80013ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ec:	4a34      	ldr	r2, [pc, #208]	@ (80014c0 <HAL_UART_MspInit+0x124>)
 80013ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80013f4:	4b32      	ldr	r3, [pc, #200]	@ (80014c0 <HAL_UART_MspInit+0x124>)
 80013f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001400:	4b2f      	ldr	r3, [pc, #188]	@ (80014c0 <HAL_UART_MspInit+0x124>)
 8001402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001404:	4a2e      	ldr	r2, [pc, #184]	@ (80014c0 <HAL_UART_MspInit+0x124>)
 8001406:	f043 0304 	orr.w	r3, r3, #4
 800140a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140c:	4b2c      	ldr	r3, [pc, #176]	@ (80014c0 <HAL_UART_MspInit+0x124>)
 800140e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001418:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800141c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800142a:	2305      	movs	r3, #5
 800142c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001432:	4619      	mov	r1, r3
 8001434:	4823      	ldr	r0, [pc, #140]	@ (80014c4 <HAL_UART_MspInit+0x128>)
 8001436:	f000 f9e9 	bl	800180c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800143a:	e03a      	b.n	80014b2 <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a21      	ldr	r2, [pc, #132]	@ (80014c8 <HAL_UART_MspInit+0x12c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d135      	bne.n	80014b2 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001446:	2301      	movs	r3, #1
 8001448:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800144e:	f107 0318 	add.w	r3, r7, #24
 8001452:	4618      	mov	r0, r3
 8001454:	f001 f970 	bl	8002738 <HAL_RCCEx_PeriphCLKConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800145e:	f7ff fa5c 	bl	800091a <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001462:	4b17      	ldr	r3, [pc, #92]	@ (80014c0 <HAL_UART_MspInit+0x124>)
 8001464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001466:	4a16      	ldr	r2, [pc, #88]	@ (80014c0 <HAL_UART_MspInit+0x124>)
 8001468:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800146c:	6613      	str	r3, [r2, #96]	@ 0x60
 800146e:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <HAL_UART_MspInit+0x124>)
 8001470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <HAL_UART_MspInit+0x124>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	4a10      	ldr	r2, [pc, #64]	@ (80014c0 <HAL_UART_MspInit+0x124>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001486:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <HAL_UART_MspInit+0x124>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001492:	2330      	movs	r3, #48	@ 0x30
 8001494:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014a2:	2307      	movs	r3, #7
 80014a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <HAL_UART_MspInit+0x128>)
 80014ae:	f000 f9ad 	bl	800180c <HAL_GPIO_Init>
}
 80014b2:	bf00      	nop
 80014b4:	3780      	adds	r7, #128	@ 0x80
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40004c00 	.word	0x40004c00
 80014c0:	40021000 	.word	0x40021000
 80014c4:	48000800 	.word	0x48000800
 80014c8:	40013800 	.word	0x40013800

080014cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014cc:	480d      	ldr	r0, [pc, #52]	@ (8001504 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014ce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d0:	f7ff fa7e 	bl	80009d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d4:	480c      	ldr	r0, [pc, #48]	@ (8001508 <LoopForever+0x6>)
  ldr r1, =_edata
 80014d6:	490d      	ldr	r1, [pc, #52]	@ (800150c <LoopForever+0xa>)
  ldr r2, =_sidata
 80014d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001510 <LoopForever+0xe>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001518 <LoopForever+0x16>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014fa:	f003 fccf 	bl	8004e9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014fe:	f7ff f8d9 	bl	80006b4 <main>

08001502 <LoopForever>:

LoopForever:
    b LoopForever
 8001502:	e7fe      	b.n	8001502 <LoopForever>
  ldr   r0, =_estack
 8001504:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800150c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001510:	08004f4c 	.word	0x08004f4c
  ldr r2, =_sbss
 8001514:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001518:	2000036c 	.word	0x2000036c

0800151c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC1_2_IRQHandler>

0800151e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001524:	2300      	movs	r3, #0
 8001526:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001528:	2003      	movs	r0, #3
 800152a:	f000 f93d 	bl	80017a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800152e:	200f      	movs	r0, #15
 8001530:	f000 f80e 	bl	8001550 <HAL_InitTick>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d002      	beq.n	8001540 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	71fb      	strb	r3, [r7, #7]
 800153e:	e001      	b.n	8001544 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001540:	f7ff f9f2 	bl	8000928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001544:	79fb      	ldrb	r3, [r7, #7]

}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800155c:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <HAL_InitTick+0x68>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d022      	beq.n	80015aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001564:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <HAL_InitTick+0x6c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <HAL_InitTick+0x68>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001570:	fbb1 f3f3 	udiv	r3, r1, r3
 8001574:	fbb2 f3f3 	udiv	r3, r2, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f000 f93a 	bl	80017f2 <HAL_SYSTICK_Config>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10f      	bne.n	80015a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b0f      	cmp	r3, #15
 8001588:	d809      	bhi.n	800159e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800158a:	2200      	movs	r2, #0
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001592:	f000 f914 	bl	80017be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001596:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <HAL_InitTick+0x70>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	e007      	b.n	80015ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	73fb      	strb	r3, [r7, #15]
 80015a2:	e004      	b.n	80015ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
 80015a8:	e001      	b.n	80015ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000008 	.word	0x20000008
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000004 	.word	0x20000004

080015c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c8:	4b05      	ldr	r3, [pc, #20]	@ (80015e0 <HAL_IncTick+0x1c>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <HAL_IncTick+0x20>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a03      	ldr	r2, [pc, #12]	@ (80015e0 <HAL_IncTick+0x1c>)
 80015d4:	6013      	str	r3, [r2, #0]
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	20000368 	.word	0x20000368
 80015e4:	20000008 	.word	0x20000008

080015e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return uwTick;
 80015ec:	4b03      	ldr	r3, [pc, #12]	@ (80015fc <HAL_GetTick+0x14>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000368 	.word	0x20000368

08001600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001608:	f7ff ffee 	bl	80015e8 <HAL_GetTick>
 800160c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001618:	d004      	beq.n	8001624 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800161a:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <HAL_Delay+0x40>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	4413      	add	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001624:	bf00      	nop
 8001626:	f7ff ffdf 	bl	80015e8 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	429a      	cmp	r2, r3
 8001634:	d8f7      	bhi.n	8001626 <HAL_Delay+0x26>
  {
  }
}
 8001636:	bf00      	nop
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000008 	.word	0x20000008

08001644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001654:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001660:	4013      	ands	r3, r2
 8001662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800166c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001676:	4a04      	ldr	r2, [pc, #16]	@ (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	60d3      	str	r3, [r2, #12]
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001690:	4b04      	ldr	r3, [pc, #16]	@ (80016a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	f003 0307 	and.w	r3, r3, #7
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	db0a      	blt.n	80016d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	490c      	ldr	r1, [pc, #48]	@ (80016f4 <__NVIC_SetPriority+0x4c>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	0112      	lsls	r2, r2, #4
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	440b      	add	r3, r1
 80016cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d0:	e00a      	b.n	80016e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4908      	ldr	r1, [pc, #32]	@ (80016f8 <__NVIC_SetPriority+0x50>)
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	3b04      	subs	r3, #4
 80016e0:	0112      	lsls	r2, r2, #4
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	440b      	add	r3, r1
 80016e6:	761a      	strb	r2, [r3, #24]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000e100 	.word	0xe000e100
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	@ 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f1c3 0307 	rsb	r3, r3, #7
 8001716:	2b04      	cmp	r3, #4
 8001718:	bf28      	it	cs
 800171a:	2304      	movcs	r3, #4
 800171c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3304      	adds	r3, #4
 8001722:	2b06      	cmp	r3, #6
 8001724:	d902      	bls.n	800172c <NVIC_EncodePriority+0x30>
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3b03      	subs	r3, #3
 800172a:	e000      	b.n	800172e <NVIC_EncodePriority+0x32>
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	401a      	ands	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001744:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	43d9      	mvns	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	4313      	orrs	r3, r2
         );
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	@ 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001774:	d301      	bcc.n	800177a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001776:	2301      	movs	r3, #1
 8001778:	e00f      	b.n	800179a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177a:	4a0a      	ldr	r2, [pc, #40]	@ (80017a4 <SysTick_Config+0x40>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001782:	210f      	movs	r1, #15
 8001784:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001788:	f7ff ff8e 	bl	80016a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800178c:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <SysTick_Config+0x40>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001792:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <SysTick_Config+0x40>)
 8001794:	2207      	movs	r2, #7
 8001796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	e000e010 	.word	0xe000e010

080017a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ff47 	bl	8001644 <__NVIC_SetPriorityGrouping>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
 80017ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017cc:	f7ff ff5e 	bl	800168c <__NVIC_GetPriorityGrouping>
 80017d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	6978      	ldr	r0, [r7, #20]
 80017d8:	f7ff ff90 	bl	80016fc <NVIC_EncodePriority>
 80017dc:	4602      	mov	r2, r0
 80017de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff5f 	bl	80016a8 <__NVIC_SetPriority>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ffb2 	bl	8001764 <SysTick_Config>
 8001800:	4603      	mov	r3, r0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800180c:	b480      	push	{r7}
 800180e:	b087      	sub	sp, #28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800181a:	e15a      	b.n	8001ad2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2101      	movs	r1, #1
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	4013      	ands	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 814c 	beq.w	8001acc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b01      	cmp	r3, #1
 800183e:	d005      	beq.n	800184c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001848:	2b02      	cmp	r3, #2
 800184a:	d130      	bne.n	80018ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	2203      	movs	r2, #3
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001882:	2201      	movs	r2, #1
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	091b      	lsrs	r3, r3, #4
 8001898:	f003 0201 	and.w	r2, r3, #1
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d017      	beq.n	80018ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d123      	bne.n	800193e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	08da      	lsrs	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3208      	adds	r2, #8
 80018fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	220f      	movs	r2, #15
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	691a      	ldr	r2, [r3, #16]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	08da      	lsrs	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3208      	adds	r2, #8
 8001938:	6939      	ldr	r1, [r7, #16]
 800193a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2203      	movs	r2, #3
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0203 	and.w	r2, r3, #3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 80a6 	beq.w	8001acc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001980:	4b5b      	ldr	r3, [pc, #364]	@ (8001af0 <HAL_GPIO_Init+0x2e4>)
 8001982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001984:	4a5a      	ldr	r2, [pc, #360]	@ (8001af0 <HAL_GPIO_Init+0x2e4>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6613      	str	r3, [r2, #96]	@ 0x60
 800198c:	4b58      	ldr	r3, [pc, #352]	@ (8001af0 <HAL_GPIO_Init+0x2e4>)
 800198e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001998:	4a56      	ldr	r2, [pc, #344]	@ (8001af4 <HAL_GPIO_Init+0x2e8>)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	220f      	movs	r2, #15
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019c2:	d01f      	beq.n	8001a04 <HAL_GPIO_Init+0x1f8>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a4c      	ldr	r2, [pc, #304]	@ (8001af8 <HAL_GPIO_Init+0x2ec>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d019      	beq.n	8001a00 <HAL_GPIO_Init+0x1f4>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a4b      	ldr	r2, [pc, #300]	@ (8001afc <HAL_GPIO_Init+0x2f0>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d013      	beq.n	80019fc <HAL_GPIO_Init+0x1f0>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a4a      	ldr	r2, [pc, #296]	@ (8001b00 <HAL_GPIO_Init+0x2f4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d00d      	beq.n	80019f8 <HAL_GPIO_Init+0x1ec>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a49      	ldr	r2, [pc, #292]	@ (8001b04 <HAL_GPIO_Init+0x2f8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d007      	beq.n	80019f4 <HAL_GPIO_Init+0x1e8>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a48      	ldr	r2, [pc, #288]	@ (8001b08 <HAL_GPIO_Init+0x2fc>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d101      	bne.n	80019f0 <HAL_GPIO_Init+0x1e4>
 80019ec:	2305      	movs	r3, #5
 80019ee:	e00a      	b.n	8001a06 <HAL_GPIO_Init+0x1fa>
 80019f0:	2306      	movs	r3, #6
 80019f2:	e008      	b.n	8001a06 <HAL_GPIO_Init+0x1fa>
 80019f4:	2304      	movs	r3, #4
 80019f6:	e006      	b.n	8001a06 <HAL_GPIO_Init+0x1fa>
 80019f8:	2303      	movs	r3, #3
 80019fa:	e004      	b.n	8001a06 <HAL_GPIO_Init+0x1fa>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e002      	b.n	8001a06 <HAL_GPIO_Init+0x1fa>
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <HAL_GPIO_Init+0x1fa>
 8001a04:	2300      	movs	r3, #0
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	f002 0203 	and.w	r2, r2, #3
 8001a0c:	0092      	lsls	r2, r2, #2
 8001a0e:	4093      	lsls	r3, r2
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a16:	4937      	ldr	r1, [pc, #220]	@ (8001af4 <HAL_GPIO_Init+0x2e8>)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a24:	4b39      	ldr	r3, [pc, #228]	@ (8001b0c <HAL_GPIO_Init+0x300>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a48:	4a30      	ldr	r2, [pc, #192]	@ (8001b0c <HAL_GPIO_Init+0x300>)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b0c <HAL_GPIO_Init+0x300>)
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a72:	4a26      	ldr	r2, [pc, #152]	@ (8001b0c <HAL_GPIO_Init+0x300>)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a78:	4b24      	ldr	r3, [pc, #144]	@ (8001b0c <HAL_GPIO_Init+0x300>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001b0c <HAL_GPIO_Init+0x300>)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b0c <HAL_GPIO_Init+0x300>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ac6:	4a11      	ldr	r2, [pc, #68]	@ (8001b0c <HAL_GPIO_Init+0x300>)
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f47f ae9d 	bne.w	800181c <HAL_GPIO_Init+0x10>
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	bf00      	nop
 8001ae6:	371c      	adds	r7, #28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40010000 	.word	0x40010000
 8001af8:	48000400 	.word	0x48000400
 8001afc:	48000800 	.word	0x48000800
 8001b00:	48000c00 	.word	0x48000c00
 8001b04:	48001000 	.word	0x48001000
 8001b08:	48001400 	.word	0x48001400
 8001b0c:	40010400 	.word	0x40010400

08001b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b20:	787b      	ldrb	r3, [r7, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b2c:	e002      	b.n	8001b34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4013      	ands	r3, r2
 8001b58:	041a      	lsls	r2, r3, #16
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	43d9      	mvns	r1, r3
 8001b5e:	887b      	ldrh	r3, [r7, #2]
 8001b60:	400b      	ands	r3, r1
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	619a      	str	r2, [r3, #24]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d141      	bne.n	8001c06 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b82:	4b4b      	ldr	r3, [pc, #300]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b8e:	d131      	bne.n	8001bf4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b90:	4b47      	ldr	r3, [pc, #284]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b96:	4a46      	ldr	r2, [pc, #280]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba0:	4b43      	ldr	r3, [pc, #268]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ba8:	4a41      	ldr	r2, [pc, #260]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001baa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bb0:	4b40      	ldr	r3, [pc, #256]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2232      	movs	r2, #50	@ 0x32
 8001bb6:	fb02 f303 	mul.w	r3, r2, r3
 8001bba:	4a3f      	ldr	r2, [pc, #252]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc0:	0c9b      	lsrs	r3, r3, #18
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bc6:	e002      	b.n	8001bce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bce:	4b38      	ldr	r3, [pc, #224]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bda:	d102      	bne.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f2      	bne.n	8001bc8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001be2:	4b33      	ldr	r3, [pc, #204]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bee:	d158      	bne.n	8001ca2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e057      	b.n	8001ca4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bf4:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bfa:	4a2d      	ldr	r2, [pc, #180]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c04:	e04d      	b.n	8001ca2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c0c:	d141      	bne.n	8001c92 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c0e:	4b28      	ldr	r3, [pc, #160]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c1a:	d131      	bne.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c1c:	4b24      	ldr	r3, [pc, #144]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c22:	4a23      	ldr	r2, [pc, #140]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c2c:	4b20      	ldr	r3, [pc, #128]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c34:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2232      	movs	r2, #50	@ 0x32
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c48:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4c:	0c9b      	lsrs	r3, r3, #18
 8001c4e:	3301      	adds	r3, #1
 8001c50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c52:	e002      	b.n	8001c5a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c5a:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c66:	d102      	bne.n	8001c6e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f2      	bne.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c6e:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c7a:	d112      	bne.n	8001ca2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e011      	b.n	8001ca4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c80:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c86:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c90:	e007      	b.n	8001ca2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c92:	4b07      	ldr	r3, [pc, #28]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c9a:	4a05      	ldr	r2, [pc, #20]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ca0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	40007000 	.word	0x40007000
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	431bde83 	.word	0x431bde83

08001cbc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001cc0:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	4a04      	ldr	r2, [pc, #16]	@ (8001cd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cca:	6093      	str	r3, [r2, #8]
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40007000 	.word	0x40007000

08001cdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e2fe      	b.n	80022ec <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d075      	beq.n	8001de6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfa:	4b97      	ldr	r3, [pc, #604]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d04:	4b94      	ldr	r3, [pc, #592]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	2b0c      	cmp	r3, #12
 8001d12:	d102      	bne.n	8001d1a <HAL_RCC_OscConfig+0x3e>
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d002      	beq.n	8001d20 <HAL_RCC_OscConfig+0x44>
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d10b      	bne.n	8001d38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d20:	4b8d      	ldr	r3, [pc, #564]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d05b      	beq.n	8001de4 <HAL_RCC_OscConfig+0x108>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d157      	bne.n	8001de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e2d9      	b.n	80022ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d40:	d106      	bne.n	8001d50 <HAL_RCC_OscConfig+0x74>
 8001d42:	4b85      	ldr	r3, [pc, #532]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a84      	ldr	r2, [pc, #528]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e01d      	b.n	8001d8c <HAL_RCC_OscConfig+0xb0>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x98>
 8001d5a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a7e      	ldr	r2, [pc, #504]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001d60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	4b7c      	ldr	r3, [pc, #496]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a7b      	ldr	r2, [pc, #492]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e00b      	b.n	8001d8c <HAL_RCC_OscConfig+0xb0>
 8001d74:	4b78      	ldr	r3, [pc, #480]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a77      	ldr	r2, [pc, #476]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4b75      	ldr	r3, [pc, #468]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a74      	ldr	r2, [pc, #464]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001d86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d013      	beq.n	8001dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff fc28 	bl	80015e8 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7ff fc24 	bl	80015e8 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	@ 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e29e      	b.n	80022ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dae:	4b6a      	ldr	r3, [pc, #424]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0xc0>
 8001dba:	e014      	b.n	8001de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fc14 	bl	80015e8 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff fc10 	bl	80015e8 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	@ 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e28a      	b.n	80022ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dd6:	4b60      	ldr	r3, [pc, #384]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0xe8>
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d075      	beq.n	8001ede <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df2:	4b59      	ldr	r3, [pc, #356]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dfc:	4b56      	ldr	r3, [pc, #344]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	2b0c      	cmp	r3, #12
 8001e0a:	d102      	bne.n	8001e12 <HAL_RCC_OscConfig+0x136>
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d002      	beq.n	8001e18 <HAL_RCC_OscConfig+0x13c>
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d11f      	bne.n	8001e58 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e18:	4b4f      	ldr	r3, [pc, #316]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_RCC_OscConfig+0x154>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e25d      	b.n	80022ec <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e30:	4b49      	ldr	r3, [pc, #292]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	4946      	ldr	r1, [pc, #280]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e44:	4b45      	ldr	r3, [pc, #276]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fb81 	bl	8001550 <HAL_InitTick>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d043      	beq.n	8001edc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e249      	b.n	80022ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d023      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e60:	4b3d      	ldr	r3, [pc, #244]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a3c      	ldr	r2, [pc, #240]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff fbbc 	bl	80015e8 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e74:	f7ff fbb8 	bl	80015e8 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e232      	b.n	80022ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e86:	4b34      	ldr	r3, [pc, #208]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e92:	4b31      	ldr	r3, [pc, #196]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	061b      	lsls	r3, r3, #24
 8001ea0:	492d      	ldr	r1, [pc, #180]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
 8001ea6:	e01a      	b.n	8001ede <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a2a      	ldr	r2, [pc, #168]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001eae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7ff fb98 	bl	80015e8 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ebc:	f7ff fb94 	bl	80015e8 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e20e      	b.n	80022ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ece:	4b22      	ldr	r3, [pc, #136]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x1e0>
 8001eda:	e000      	b.n	8001ede <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001edc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d041      	beq.n	8001f6e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d01c      	beq.n	8001f2c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef2:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ef8:	4a17      	ldr	r2, [pc, #92]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f02:	f7ff fb71 	bl	80015e8 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f0a:	f7ff fb6d 	bl	80015e8 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e1e7      	b.n	80022ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0ef      	beq.n	8001f0a <HAL_RCC_OscConfig+0x22e>
 8001f2a:	e020      	b.n	8001f6e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f32:	4a09      	ldr	r2, [pc, #36]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3c:	f7ff fb54 	bl	80015e8 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f42:	e00d      	b.n	8001f60 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f44:	f7ff fb50 	bl	80015e8 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d906      	bls.n	8001f60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e1ca      	b.n	80022ec <HAL_RCC_OscConfig+0x610>
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f60:	4b8c      	ldr	r3, [pc, #560]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 8001f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1ea      	bne.n	8001f44 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80a6 	beq.w	80020c8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f80:	4b84      	ldr	r3, [pc, #528]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_OscConfig+0x2b4>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <HAL_RCC_OscConfig+0x2b6>
 8001f90:	2300      	movs	r3, #0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00d      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	4b7f      	ldr	r3, [pc, #508]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9a:	4a7e      	ldr	r2, [pc, #504]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fa2:	4b7c      	ldr	r3, [pc, #496]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb2:	4b79      	ldr	r3, [pc, #484]	@ (8002198 <HAL_RCC_OscConfig+0x4bc>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d118      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fbe:	4b76      	ldr	r3, [pc, #472]	@ (8002198 <HAL_RCC_OscConfig+0x4bc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a75      	ldr	r2, [pc, #468]	@ (8002198 <HAL_RCC_OscConfig+0x4bc>)
 8001fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fca:	f7ff fb0d 	bl	80015e8 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd2:	f7ff fb09 	bl	80015e8 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e183      	b.n	80022ec <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe4:	4b6c      	ldr	r3, [pc, #432]	@ (8002198 <HAL_RCC_OscConfig+0x4bc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d108      	bne.n	800200a <HAL_RCC_OscConfig+0x32e>
 8001ff8:	4b66      	ldr	r3, [pc, #408]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffe:	4a65      	ldr	r2, [pc, #404]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002008:	e024      	b.n	8002054 <HAL_RCC_OscConfig+0x378>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b05      	cmp	r3, #5
 8002010:	d110      	bne.n	8002034 <HAL_RCC_OscConfig+0x358>
 8002012:	4b60      	ldr	r3, [pc, #384]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002018:	4a5e      	ldr	r2, [pc, #376]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 800201a:	f043 0304 	orr.w	r3, r3, #4
 800201e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002022:	4b5c      	ldr	r3, [pc, #368]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 8002024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002028:	4a5a      	ldr	r2, [pc, #360]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002032:	e00f      	b.n	8002054 <HAL_RCC_OscConfig+0x378>
 8002034:	4b57      	ldr	r3, [pc, #348]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203a:	4a56      	ldr	r2, [pc, #344]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002044:	4b53      	ldr	r3, [pc, #332]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204a:	4a52      	ldr	r2, [pc, #328]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 800204c:	f023 0304 	bic.w	r3, r3, #4
 8002050:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d016      	beq.n	800208a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7ff fac4 	bl	80015e8 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002062:	e00a      	b.n	800207a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002064:	f7ff fac0 	bl	80015e8 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e138      	b.n	80022ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207a:	4b46      	ldr	r3, [pc, #280]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0ed      	beq.n	8002064 <HAL_RCC_OscConfig+0x388>
 8002088:	e015      	b.n	80020b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208a:	f7ff faad 	bl	80015e8 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002090:	e00a      	b.n	80020a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002092:	f7ff faa9 	bl	80015e8 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e121      	b.n	80022ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1ed      	bne.n	8002092 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020b6:	7ffb      	ldrb	r3, [r7, #31]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d105      	bne.n	80020c8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020bc:	4b35      	ldr	r3, [pc, #212]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 80020be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c0:	4a34      	ldr	r2, [pc, #208]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 80020c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d03c      	beq.n	800214e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01c      	beq.n	8002116 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 80020de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ec:	f7ff fa7c 	bl	80015e8 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020f4:	f7ff fa78 	bl	80015e8 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e0f2      	b.n	80022ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002106:	4b23      	ldr	r3, [pc, #140]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 8002108:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0ef      	beq.n	80020f4 <HAL_RCC_OscConfig+0x418>
 8002114:	e01b      	b.n	800214e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002116:	4b1f      	ldr	r3, [pc, #124]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 8002118:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800211c:	4a1d      	ldr	r2, [pc, #116]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 800211e:	f023 0301 	bic.w	r3, r3, #1
 8002122:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002126:	f7ff fa5f 	bl	80015e8 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800212e:	f7ff fa5b 	bl	80015e8 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0d5      	b.n	80022ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002140:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 8002142:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1ef      	bne.n	800212e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 80c9 	beq.w	80022ea <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002158:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b0c      	cmp	r3, #12
 8002162:	f000 8083 	beq.w	800226c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d15e      	bne.n	800222c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216e:	4b09      	ldr	r3, [pc, #36]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a08      	ldr	r2, [pc, #32]	@ (8002194 <HAL_RCC_OscConfig+0x4b8>)
 8002174:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217a:	f7ff fa35 	bl	80015e8 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002180:	e00c      	b.n	800219c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002182:	f7ff fa31 	bl	80015e8 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d905      	bls.n	800219c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e0ab      	b.n	80022ec <HAL_RCC_OscConfig+0x610>
 8002194:	40021000 	.word	0x40021000
 8002198:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800219c:	4b55      	ldr	r3, [pc, #340]	@ (80022f4 <HAL_RCC_OscConfig+0x618>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1ec      	bne.n	8002182 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a8:	4b52      	ldr	r3, [pc, #328]	@ (80022f4 <HAL_RCC_OscConfig+0x618>)
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	4b52      	ldr	r3, [pc, #328]	@ (80022f8 <HAL_RCC_OscConfig+0x61c>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6a11      	ldr	r1, [r2, #32]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021b8:	3a01      	subs	r2, #1
 80021ba:	0112      	lsls	r2, r2, #4
 80021bc:	4311      	orrs	r1, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80021c2:	0212      	lsls	r2, r2, #8
 80021c4:	4311      	orrs	r1, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80021ca:	0852      	lsrs	r2, r2, #1
 80021cc:	3a01      	subs	r2, #1
 80021ce:	0552      	lsls	r2, r2, #21
 80021d0:	4311      	orrs	r1, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021d6:	0852      	lsrs	r2, r2, #1
 80021d8:	3a01      	subs	r2, #1
 80021da:	0652      	lsls	r2, r2, #25
 80021dc:	4311      	orrs	r1, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021e2:	06d2      	lsls	r2, r2, #27
 80021e4:	430a      	orrs	r2, r1
 80021e6:	4943      	ldr	r1, [pc, #268]	@ (80022f4 <HAL_RCC_OscConfig+0x618>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ec:	4b41      	ldr	r3, [pc, #260]	@ (80022f4 <HAL_RCC_OscConfig+0x618>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a40      	ldr	r2, [pc, #256]	@ (80022f4 <HAL_RCC_OscConfig+0x618>)
 80021f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021f8:	4b3e      	ldr	r3, [pc, #248]	@ (80022f4 <HAL_RCC_OscConfig+0x618>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4a3d      	ldr	r2, [pc, #244]	@ (80022f4 <HAL_RCC_OscConfig+0x618>)
 80021fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002202:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7ff f9f0 	bl	80015e8 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220c:	f7ff f9ec 	bl	80015e8 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e066      	b.n	80022ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221e:	4b35      	ldr	r3, [pc, #212]	@ (80022f4 <HAL_RCC_OscConfig+0x618>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x530>
 800222a:	e05e      	b.n	80022ea <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222c:	4b31      	ldr	r3, [pc, #196]	@ (80022f4 <HAL_RCC_OscConfig+0x618>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a30      	ldr	r2, [pc, #192]	@ (80022f4 <HAL_RCC_OscConfig+0x618>)
 8002232:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7ff f9d6 	bl	80015e8 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002240:	f7ff f9d2 	bl	80015e8 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e04c      	b.n	80022ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002252:	4b28      	ldr	r3, [pc, #160]	@ (80022f4 <HAL_RCC_OscConfig+0x618>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800225e:	4b25      	ldr	r3, [pc, #148]	@ (80022f4 <HAL_RCC_OscConfig+0x618>)
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	4924      	ldr	r1, [pc, #144]	@ (80022f4 <HAL_RCC_OscConfig+0x618>)
 8002264:	4b25      	ldr	r3, [pc, #148]	@ (80022fc <HAL_RCC_OscConfig+0x620>)
 8002266:	4013      	ands	r3, r2
 8002268:	60cb      	str	r3, [r1, #12]
 800226a:	e03e      	b.n	80022ea <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e039      	b.n	80022ec <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002278:	4b1e      	ldr	r3, [pc, #120]	@ (80022f4 <HAL_RCC_OscConfig+0x618>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f003 0203 	and.w	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	429a      	cmp	r2, r3
 800228a:	d12c      	bne.n	80022e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	3b01      	subs	r3, #1
 8002298:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d123      	bne.n	80022e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d11b      	bne.n	80022e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d113      	bne.n	80022e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c8:	085b      	lsrs	r3, r3, #1
 80022ca:	3b01      	subs	r3, #1
 80022cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d109      	bne.n	80022e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022dc:	085b      	lsrs	r3, r3, #1
 80022de:	3b01      	subs	r3, #1
 80022e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3720      	adds	r7, #32
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	019f800c 	.word	0x019f800c
 80022fc:	feeefffc 	.word	0xfeeefffc

08002300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e11e      	b.n	8002556 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002318:	4b91      	ldr	r3, [pc, #580]	@ (8002560 <HAL_RCC_ClockConfig+0x260>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d910      	bls.n	8002348 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b8e      	ldr	r3, [pc, #568]	@ (8002560 <HAL_RCC_ClockConfig+0x260>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 020f 	bic.w	r2, r3, #15
 800232e:	498c      	ldr	r1, [pc, #560]	@ (8002560 <HAL_RCC_ClockConfig+0x260>)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b8a      	ldr	r3, [pc, #552]	@ (8002560 <HAL_RCC_ClockConfig+0x260>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e106      	b.n	8002556 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d073      	beq.n	800243c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d129      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800235c:	4b81      	ldr	r3, [pc, #516]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0f4      	b.n	8002556 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800236c:	f000 f99e 	bl	80026ac <RCC_GetSysClockFreqFromPLLSource>
 8002370:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4a7c      	ldr	r2, [pc, #496]	@ (8002568 <HAL_RCC_ClockConfig+0x268>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d93f      	bls.n	80023fa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800237a:	4b7a      	ldr	r3, [pc, #488]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800238e:	2b00      	cmp	r3, #0
 8002390:	d033      	beq.n	80023fa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002396:	2b00      	cmp	r3, #0
 8002398:	d12f      	bne.n	80023fa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800239a:	4b72      	ldr	r3, [pc, #456]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023a2:	4a70      	ldr	r2, [pc, #448]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 80023a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023aa:	2380      	movs	r3, #128	@ 0x80
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	e024      	b.n	80023fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d107      	bne.n	80023c8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d109      	bne.n	80023d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0c6      	b.n	8002556 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c8:	4b66      	ldr	r3, [pc, #408]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0be      	b.n	8002556 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023d8:	f000 f8ce 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4a61      	ldr	r2, [pc, #388]	@ (8002568 <HAL_RCC_ClockConfig+0x268>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d909      	bls.n	80023fa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023e6:	4b5f      	ldr	r3, [pc, #380]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023ee:	4a5d      	ldr	r2, [pc, #372]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 80023f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023f6:	2380      	movs	r3, #128	@ 0x80
 80023f8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023fa:	4b5a      	ldr	r3, [pc, #360]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f023 0203 	bic.w	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4957      	ldr	r1, [pc, #348]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 8002408:	4313      	orrs	r3, r2
 800240a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800240c:	f7ff f8ec 	bl	80015e8 <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	e00a      	b.n	800242a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002414:	f7ff f8e8 	bl	80015e8 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e095      	b.n	8002556 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	4b4e      	ldr	r3, [pc, #312]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 020c 	and.w	r2, r3, #12
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	429a      	cmp	r2, r3
 800243a:	d1eb      	bne.n	8002414 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d023      	beq.n	8002490 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002454:	4b43      	ldr	r3, [pc, #268]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4a42      	ldr	r2, [pc, #264]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 800245a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800245e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d007      	beq.n	800247c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800246c:	4b3d      	ldr	r3, [pc, #244]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002474:	4a3b      	ldr	r2, [pc, #236]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 8002476:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800247a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800247c:	4b39      	ldr	r3, [pc, #228]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	4936      	ldr	r1, [pc, #216]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 800248a:	4313      	orrs	r3, r2
 800248c:	608b      	str	r3, [r1, #8]
 800248e:	e008      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2b80      	cmp	r3, #128	@ 0x80
 8002494:	d105      	bne.n	80024a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002496:	4b33      	ldr	r3, [pc, #204]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	4a32      	ldr	r2, [pc, #200]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 800249c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024a0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002560 <HAL_RCC_ClockConfig+0x260>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d21d      	bcs.n	80024ec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002560 <HAL_RCC_ClockConfig+0x260>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f023 020f 	bic.w	r2, r3, #15
 80024b8:	4929      	ldr	r1, [pc, #164]	@ (8002560 <HAL_RCC_ClockConfig+0x260>)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024c0:	f7ff f892 	bl	80015e8 <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	e00a      	b.n	80024de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7ff f88e 	bl	80015e8 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e03b      	b.n	8002556 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b20      	ldr	r3, [pc, #128]	@ (8002560 <HAL_RCC_ClockConfig+0x260>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d1ed      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4917      	ldr	r1, [pc, #92]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 8002506:	4313      	orrs	r3, r2
 8002508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002516:	4b13      	ldr	r3, [pc, #76]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	490f      	ldr	r1, [pc, #60]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 8002526:	4313      	orrs	r3, r2
 8002528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800252a:	f000 f825 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 800252e:	4602      	mov	r2, r0
 8002530:	4b0c      	ldr	r3, [pc, #48]	@ (8002564 <HAL_RCC_ClockConfig+0x264>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	490c      	ldr	r1, [pc, #48]	@ (800256c <HAL_RCC_ClockConfig+0x26c>)
 800253c:	5ccb      	ldrb	r3, [r1, r3]
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	fa22 f303 	lsr.w	r3, r2, r3
 8002546:	4a0a      	ldr	r2, [pc, #40]	@ (8002570 <HAL_RCC_ClockConfig+0x270>)
 8002548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800254a:	4b0a      	ldr	r3, [pc, #40]	@ (8002574 <HAL_RCC_ClockConfig+0x274>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fffe 	bl	8001550 <HAL_InitTick>
 8002554:	4603      	mov	r3, r0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40022000 	.word	0x40022000
 8002564:	40021000 	.word	0x40021000
 8002568:	04c4b400 	.word	0x04c4b400
 800256c:	08004efc 	.word	0x08004efc
 8002570:	20000000 	.word	0x20000000
 8002574:	20000004 	.word	0x20000004

08002578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800257e:	4b2c      	ldr	r3, [pc, #176]	@ (8002630 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b04      	cmp	r3, #4
 8002588:	d102      	bne.n	8002590 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800258a:	4b2a      	ldr	r3, [pc, #168]	@ (8002634 <HAL_RCC_GetSysClockFreq+0xbc>)
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	e047      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002590:	4b27      	ldr	r3, [pc, #156]	@ (8002630 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 030c 	and.w	r3, r3, #12
 8002598:	2b08      	cmp	r3, #8
 800259a:	d102      	bne.n	80025a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800259c:	4b26      	ldr	r3, [pc, #152]	@ (8002638 <HAL_RCC_GetSysClockFreq+0xc0>)
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	e03e      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025a2:	4b23      	ldr	r3, [pc, #140]	@ (8002630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
 80025aa:	2b0c      	cmp	r3, #12
 80025ac:	d136      	bne.n	800261c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ae:	4b20      	ldr	r3, [pc, #128]	@ (8002630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	3301      	adds	r3, #1
 80025c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d10c      	bne.n	80025e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002638 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d4:	4a16      	ldr	r2, [pc, #88]	@ (8002630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d6:	68d2      	ldr	r2, [r2, #12]
 80025d8:	0a12      	lsrs	r2, r2, #8
 80025da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025de:	fb02 f303 	mul.w	r3, r2, r3
 80025e2:	617b      	str	r3, [r7, #20]
      break;
 80025e4:	e00c      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025e6:	4a13      	ldr	r2, [pc, #76]	@ (8002634 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ee:	4a10      	ldr	r2, [pc, #64]	@ (8002630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f0:	68d2      	ldr	r2, [r2, #12]
 80025f2:	0a12      	lsrs	r2, r2, #8
 80025f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025f8:	fb02 f303 	mul.w	r3, r2, r3
 80025fc:	617b      	str	r3, [r7, #20]
      break;
 80025fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	0e5b      	lsrs	r3, r3, #25
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	3301      	adds	r3, #1
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	fbb2 f3f3 	udiv	r3, r2, r3
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	e001      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002620:	693b      	ldr	r3, [r7, #16]
}
 8002622:	4618      	mov	r0, r3
 8002624:	371c      	adds	r7, #28
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	00f42400 	.word	0x00f42400
 8002638:	007a1200 	.word	0x007a1200

0800263c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002640:	4b03      	ldr	r3, [pc, #12]	@ (8002650 <HAL_RCC_GetHCLKFreq+0x14>)
 8002642:	681b      	ldr	r3, [r3, #0]
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20000000 	.word	0x20000000

08002654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002658:	f7ff fff0 	bl	800263c <HAL_RCC_GetHCLKFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	4904      	ldr	r1, [pc, #16]	@ (800267c <HAL_RCC_GetPCLK1Freq+0x28>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002674:	4618      	mov	r0, r3
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000
 800267c:	08004f0c 	.word	0x08004f0c

08002680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002684:	f7ff ffda 	bl	800263c <HAL_RCC_GetHCLKFreq>
 8002688:	4602      	mov	r2, r0
 800268a:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	0adb      	lsrs	r3, r3, #11
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	4904      	ldr	r1, [pc, #16]	@ (80026a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002696:	5ccb      	ldrb	r3, [r1, r3]
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021000 	.word	0x40021000
 80026a8:	08004f0c 	.word	0x08004f0c

080026ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026b2:	4b1e      	ldr	r3, [pc, #120]	@ (800272c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026bc:	4b1b      	ldr	r3, [pc, #108]	@ (800272c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	3301      	adds	r3, #1
 80026c8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d10c      	bne.n	80026ea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026d0:	4a17      	ldr	r2, [pc, #92]	@ (8002730 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	4a14      	ldr	r2, [pc, #80]	@ (800272c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026da:	68d2      	ldr	r2, [r2, #12]
 80026dc:	0a12      	lsrs	r2, r2, #8
 80026de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026e2:	fb02 f303 	mul.w	r3, r2, r3
 80026e6:	617b      	str	r3, [r7, #20]
    break;
 80026e8:	e00c      	b.n	8002704 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026ea:	4a12      	ldr	r2, [pc, #72]	@ (8002734 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f2:	4a0e      	ldr	r2, [pc, #56]	@ (800272c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026f4:	68d2      	ldr	r2, [r2, #12]
 80026f6:	0a12      	lsrs	r2, r2, #8
 80026f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026fc:	fb02 f303 	mul.w	r3, r2, r3
 8002700:	617b      	str	r3, [r7, #20]
    break;
 8002702:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002704:	4b09      	ldr	r3, [pc, #36]	@ (800272c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	0e5b      	lsrs	r3, r3, #25
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	3301      	adds	r3, #1
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	fbb2 f3f3 	udiv	r3, r2, r3
 800271c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800271e:	687b      	ldr	r3, [r7, #4]
}
 8002720:	4618      	mov	r0, r3
 8002722:	371c      	adds	r7, #28
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	40021000 	.word	0x40021000
 8002730:	007a1200 	.word	0x007a1200
 8002734:	00f42400 	.word	0x00f42400

08002738 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002740:	2300      	movs	r3, #0
 8002742:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002744:	2300      	movs	r3, #0
 8002746:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 8098 	beq.w	8002886 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002756:	2300      	movs	r3, #0
 8002758:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275a:	4b43      	ldr	r3, [pc, #268]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10d      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002766:	4b40      	ldr	r3, [pc, #256]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276a:	4a3f      	ldr	r2, [pc, #252]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800276c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002770:	6593      	str	r3, [r2, #88]	@ 0x58
 8002772:	4b3d      	ldr	r3, [pc, #244]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800277e:	2301      	movs	r3, #1
 8002780:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002782:	4b3a      	ldr	r3, [pc, #232]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a39      	ldr	r2, [pc, #228]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800278c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800278e:	f7fe ff2b 	bl	80015e8 <HAL_GetTick>
 8002792:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002794:	e009      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002796:	f7fe ff27 	bl	80015e8 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d902      	bls.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	74fb      	strb	r3, [r7, #19]
        break;
 80027a8:	e005      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027aa:	4b30      	ldr	r3, [pc, #192]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0ef      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80027b6:	7cfb      	ldrb	r3, [r7, #19]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d159      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027c6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d01e      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d019      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027d8:	4b23      	ldr	r3, [pc, #140]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027e4:	4b20      	ldr	r3, [pc, #128]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002804:	4a18      	ldr	r2, [pc, #96]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d016      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7fe fee7 	bl	80015e8 <HAL_GetTick>
 800281a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281c:	e00b      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f7fe fee3 	bl	80015e8 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282c:	4293      	cmp	r3, r2
 800282e:	d902      	bls.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	74fb      	strb	r3, [r7, #19]
            break;
 8002834:	e006      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002836:	4b0c      	ldr	r3, [pc, #48]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0ec      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002844:	7cfb      	ldrb	r3, [r7, #19]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10b      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800284a:	4b07      	ldr	r3, [pc, #28]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002850:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002858:	4903      	ldr	r1, [pc, #12]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002860:	e008      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002862:	7cfb      	ldrb	r3, [r7, #19]
 8002864:	74bb      	strb	r3, [r7, #18]
 8002866:	e005      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002868:	40021000 	.word	0x40021000
 800286c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002870:	7cfb      	ldrb	r3, [r7, #19]
 8002872:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002874:	7c7b      	ldrb	r3, [r7, #17]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d105      	bne.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287a:	4ba7      	ldr	r3, [pc, #668]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800287c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287e:	4aa6      	ldr	r2, [pc, #664]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002880:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002884:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002892:	4ba1      	ldr	r3, [pc, #644]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002898:	f023 0203 	bic.w	r2, r3, #3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	499d      	ldr	r1, [pc, #628]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028b4:	4b98      	ldr	r3, [pc, #608]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ba:	f023 020c 	bic.w	r2, r3, #12
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	4995      	ldr	r1, [pc, #596]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028d6:	4b90      	ldr	r3, [pc, #576]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	498c      	ldr	r1, [pc, #560]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028f8:	4b87      	ldr	r3, [pc, #540]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	4984      	ldr	r1, [pc, #528]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0310 	and.w	r3, r3, #16
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800291a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002920:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	497b      	ldr	r1, [pc, #492]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0320 	and.w	r3, r3, #32
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800293c:	4b76      	ldr	r3, [pc, #472]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002942:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	4973      	ldr	r1, [pc, #460]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800295e:	4b6e      	ldr	r3, [pc, #440]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002964:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	496a      	ldr	r1, [pc, #424]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002980:	4b65      	ldr	r3, [pc, #404]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002986:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	4962      	ldr	r1, [pc, #392]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b0:	4959      	ldr	r1, [pc, #356]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029c4:	4b54      	ldr	r3, [pc, #336]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029ca:	f023 0203 	bic.w	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d2:	4951      	ldr	r1, [pc, #324]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f4:	4948      	ldr	r1, [pc, #288]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d015      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a08:	4b43      	ldr	r3, [pc, #268]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	4940      	ldr	r1, [pc, #256]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a26:	d105      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a28:	4b3b      	ldr	r3, [pc, #236]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4a3a      	ldr	r2, [pc, #232]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a32:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d015      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a40:	4b35      	ldr	r3, [pc, #212]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a46:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a4e:	4932      	ldr	r1, [pc, #200]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a5e:	d105      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a60:	4b2d      	ldr	r3, [pc, #180]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4a2c      	ldr	r2, [pc, #176]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a6a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d015      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a78:	4b27      	ldr	r3, [pc, #156]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a86:	4924      	ldr	r1, [pc, #144]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a96:	d105      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a98:	4b1f      	ldr	r3, [pc, #124]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aa2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d015      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ab0:	4b19      	ldr	r3, [pc, #100]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002abe:	4916      	ldr	r1, [pc, #88]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ace:	d105      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad0:	4b11      	ldr	r3, [pc, #68]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4a10      	ldr	r2, [pc, #64]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ada:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d019      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	4908      	ldr	r1, [pc, #32]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b06:	d109      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b08:	4b03      	ldr	r3, [pc, #12]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4a02      	ldr	r2, [pc, #8]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b12:	60d3      	str	r3, [r2, #12]
 8002b14:	e002      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d015      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b28:	4b29      	ldr	r3, [pc, #164]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b2e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b36:	4926      	ldr	r1, [pc, #152]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b46:	d105      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b48:	4b21      	ldr	r3, [pc, #132]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4a20      	ldr	r2, [pc, #128]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b52:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d015      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b60:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b66:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b6e:	4918      	ldr	r1, [pc, #96]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7e:	d105      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b80:	4b13      	ldr	r3, [pc, #76]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4a12      	ldr	r2, [pc, #72]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b8a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d015      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b98:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba6:	490a      	ldr	r1, [pc, #40]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bb6:	d105      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bb8:	4b05      	ldr	r3, [pc, #20]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	4a04      	ldr	r2, [pc, #16]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bc2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002bc4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40021000 	.word	0x40021000

08002bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e049      	b.n	8002c7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fe fa94 	bl	8001128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	4619      	mov	r1, r3
 8002c12:	4610      	mov	r0, r2
 8002c14:	f000 fd96 	bl	8003744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d001      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e054      	b.n	8002d46 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a26      	ldr	r2, [pc, #152]	@ (8002d54 <HAL_TIM_Base_Start_IT+0xd0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d022      	beq.n	8002d04 <HAL_TIM_Base_Start_IT+0x80>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc6:	d01d      	beq.n	8002d04 <HAL_TIM_Base_Start_IT+0x80>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a22      	ldr	r2, [pc, #136]	@ (8002d58 <HAL_TIM_Base_Start_IT+0xd4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d018      	beq.n	8002d04 <HAL_TIM_Base_Start_IT+0x80>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a21      	ldr	r2, [pc, #132]	@ (8002d5c <HAL_TIM_Base_Start_IT+0xd8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d013      	beq.n	8002d04 <HAL_TIM_Base_Start_IT+0x80>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8002d60 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00e      	beq.n	8002d04 <HAL_TIM_Base_Start_IT+0x80>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a1e      	ldr	r2, [pc, #120]	@ (8002d64 <HAL_TIM_Base_Start_IT+0xe0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d009      	beq.n	8002d04 <HAL_TIM_Base_Start_IT+0x80>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8002d68 <HAL_TIM_Base_Start_IT+0xe4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d004      	beq.n	8002d04 <HAL_TIM_Base_Start_IT+0x80>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8002d6c <HAL_TIM_Base_Start_IT+0xe8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d115      	bne.n	8002d30 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	4b19      	ldr	r3, [pc, #100]	@ (8002d70 <HAL_TIM_Base_Start_IT+0xec>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b06      	cmp	r3, #6
 8002d14:	d015      	beq.n	8002d42 <HAL_TIM_Base_Start_IT+0xbe>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d1c:	d011      	beq.n	8002d42 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0201 	orr.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2e:	e008      	b.n	8002d42 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	e000      	b.n	8002d44 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000800 	.word	0x40000800
 8002d60:	40000c00 	.word	0x40000c00
 8002d64:	40013400 	.word	0x40013400
 8002d68:	40014000 	.word	0x40014000
 8002d6c:	40015000 	.word	0x40015000
 8002d70:	00010007 	.word	0x00010007

08002d74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e049      	b.n	8002e1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d106      	bne.n	8002da0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f841 	bl	8002e22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3304      	adds	r3, #4
 8002db0:	4619      	mov	r1, r3
 8002db2:	4610      	mov	r0, r2
 8002db4:	f000 fcc6 	bl	8003744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d109      	bne.n	8002e5c <HAL_TIM_PWM_Start+0x24>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	bf14      	ite	ne
 8002e54:	2301      	movne	r3, #1
 8002e56:	2300      	moveq	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	e03c      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x9e>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d109      	bne.n	8002e76 <HAL_TIM_PWM_Start+0x3e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	bf14      	ite	ne
 8002e6e:	2301      	movne	r3, #1
 8002e70:	2300      	moveq	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	e02f      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x9e>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d109      	bne.n	8002e90 <HAL_TIM_PWM_Start+0x58>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	bf14      	ite	ne
 8002e88:	2301      	movne	r3, #1
 8002e8a:	2300      	moveq	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	e022      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x9e>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b0c      	cmp	r3, #12
 8002e94:	d109      	bne.n	8002eaa <HAL_TIM_PWM_Start+0x72>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	bf14      	ite	ne
 8002ea2:	2301      	movne	r3, #1
 8002ea4:	2300      	moveq	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	e015      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x9e>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d109      	bne.n	8002ec4 <HAL_TIM_PWM_Start+0x8c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e008      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x9e>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0a6      	b.n	800302c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d104      	bne.n	8002eee <HAL_TIM_PWM_Start+0xb6>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eec:	e023      	b.n	8002f36 <HAL_TIM_PWM_Start+0xfe>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d104      	bne.n	8002efe <HAL_TIM_PWM_Start+0xc6>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002efc:	e01b      	b.n	8002f36 <HAL_TIM_PWM_Start+0xfe>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d104      	bne.n	8002f0e <HAL_TIM_PWM_Start+0xd6>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f0c:	e013      	b.n	8002f36 <HAL_TIM_PWM_Start+0xfe>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b0c      	cmp	r3, #12
 8002f12:	d104      	bne.n	8002f1e <HAL_TIM_PWM_Start+0xe6>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f1c:	e00b      	b.n	8002f36 <HAL_TIM_PWM_Start+0xfe>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b10      	cmp	r3, #16
 8002f22:	d104      	bne.n	8002f2e <HAL_TIM_PWM_Start+0xf6>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f2c:	e003      	b.n	8002f36 <HAL_TIM_PWM_Start+0xfe>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	6839      	ldr	r1, [r7, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f001 f87a 	bl	8004038 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a3a      	ldr	r2, [pc, #232]	@ (8003034 <HAL_TIM_PWM_Start+0x1fc>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d018      	beq.n	8002f80 <HAL_TIM_PWM_Start+0x148>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a39      	ldr	r2, [pc, #228]	@ (8003038 <HAL_TIM_PWM_Start+0x200>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d013      	beq.n	8002f80 <HAL_TIM_PWM_Start+0x148>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a37      	ldr	r2, [pc, #220]	@ (800303c <HAL_TIM_PWM_Start+0x204>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00e      	beq.n	8002f80 <HAL_TIM_PWM_Start+0x148>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a36      	ldr	r2, [pc, #216]	@ (8003040 <HAL_TIM_PWM_Start+0x208>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d009      	beq.n	8002f80 <HAL_TIM_PWM_Start+0x148>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a34      	ldr	r2, [pc, #208]	@ (8003044 <HAL_TIM_PWM_Start+0x20c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d004      	beq.n	8002f80 <HAL_TIM_PWM_Start+0x148>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a33      	ldr	r2, [pc, #204]	@ (8003048 <HAL_TIM_PWM_Start+0x210>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d101      	bne.n	8002f84 <HAL_TIM_PWM_Start+0x14c>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <HAL_TIM_PWM_Start+0x14e>
 8002f84:	2300      	movs	r3, #0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d007      	beq.n	8002f9a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a25      	ldr	r2, [pc, #148]	@ (8003034 <HAL_TIM_PWM_Start+0x1fc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d022      	beq.n	8002fea <HAL_TIM_PWM_Start+0x1b2>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fac:	d01d      	beq.n	8002fea <HAL_TIM_PWM_Start+0x1b2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a26      	ldr	r2, [pc, #152]	@ (800304c <HAL_TIM_PWM_Start+0x214>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d018      	beq.n	8002fea <HAL_TIM_PWM_Start+0x1b2>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a24      	ldr	r2, [pc, #144]	@ (8003050 <HAL_TIM_PWM_Start+0x218>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d013      	beq.n	8002fea <HAL_TIM_PWM_Start+0x1b2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a23      	ldr	r2, [pc, #140]	@ (8003054 <HAL_TIM_PWM_Start+0x21c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00e      	beq.n	8002fea <HAL_TIM_PWM_Start+0x1b2>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a19      	ldr	r2, [pc, #100]	@ (8003038 <HAL_TIM_PWM_Start+0x200>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d009      	beq.n	8002fea <HAL_TIM_PWM_Start+0x1b2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a18      	ldr	r2, [pc, #96]	@ (800303c <HAL_TIM_PWM_Start+0x204>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d004      	beq.n	8002fea <HAL_TIM_PWM_Start+0x1b2>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a18      	ldr	r2, [pc, #96]	@ (8003048 <HAL_TIM_PWM_Start+0x210>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d115      	bne.n	8003016 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	4b19      	ldr	r3, [pc, #100]	@ (8003058 <HAL_TIM_PWM_Start+0x220>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b06      	cmp	r3, #6
 8002ffa:	d015      	beq.n	8003028 <HAL_TIM_PWM_Start+0x1f0>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003002:	d011      	beq.n	8003028 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003014:	e008      	b.n	8003028 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0201 	orr.w	r2, r2, #1
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	e000      	b.n	800302a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003028:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40012c00 	.word	0x40012c00
 8003038:	40013400 	.word	0x40013400
 800303c:	40014000 	.word	0x40014000
 8003040:	40014400 	.word	0x40014400
 8003044:	40014800 	.word	0x40014800
 8003048:	40015000 	.word	0x40015000
 800304c:	40000400 	.word	0x40000400
 8003050:	40000800 	.word	0x40000800
 8003054:	40000c00 	.word	0x40000c00
 8003058:	00010007 	.word	0x00010007

0800305c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e097      	b.n	80031a0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d106      	bne.n	800308a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7fd ff77 	bl	8000f78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2202      	movs	r2, #2
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80030a0:	f023 0307 	bic.w	r3, r3, #7
 80030a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3304      	adds	r3, #4
 80030ae:	4619      	mov	r1, r3
 80030b0:	4610      	mov	r0, r2
 80030b2:	f000 fb47 	bl	8003744 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030de:	f023 0303 	bic.w	r3, r3, #3
 80030e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	4313      	orrs	r3, r2
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80030fc:	f023 030c 	bic.w	r3, r3, #12
 8003100:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003108:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800310c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	4313      	orrs	r3, r2
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	011a      	lsls	r2, r3, #4
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	031b      	lsls	r3, r3, #12
 800312c:	4313      	orrs	r3, r2
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800313a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003142:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	4313      	orrs	r3, r2
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d110      	bne.n	80031fa <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d102      	bne.n	80031e4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80031de:	7b7b      	ldrb	r3, [r7, #13]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d001      	beq.n	80031e8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e089      	b.n	80032fc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031f8:	e031      	b.n	800325e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d110      	bne.n	8003222 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003200:	7bbb      	ldrb	r3, [r7, #14]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d102      	bne.n	800320c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003206:	7b3b      	ldrb	r3, [r7, #12]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d001      	beq.n	8003210 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e075      	b.n	80032fc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003220:	e01d      	b.n	800325e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d108      	bne.n	800323a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003228:	7bbb      	ldrb	r3, [r7, #14]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d105      	bne.n	800323a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800322e:	7b7b      	ldrb	r3, [r7, #13]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d102      	bne.n	800323a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003234:	7b3b      	ldrb	r3, [r7, #12]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d001      	beq.n	800323e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e05e      	b.n	80032fc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2202      	movs	r2, #2
 8003252:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2202      	movs	r2, #2
 800325a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_TIM_Encoder_Start_IT+0xc4>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b04      	cmp	r3, #4
 8003268:	d010      	beq.n	800328c <HAL_TIM_Encoder_Start_IT+0xe4>
 800326a:	e01f      	b.n	80032ac <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2201      	movs	r2, #1
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f000 fedf 	bl	8004038 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0202 	orr.w	r2, r2, #2
 8003288:	60da      	str	r2, [r3, #12]
      break;
 800328a:	e02e      	b.n	80032ea <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2201      	movs	r2, #1
 8003292:	2104      	movs	r1, #4
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fecf 	bl	8004038 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0204 	orr.w	r2, r2, #4
 80032a8:	60da      	str	r2, [r3, #12]
      break;
 80032aa:	e01e      	b.n	80032ea <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2201      	movs	r2, #1
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 febf 	bl	8004038 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2201      	movs	r2, #1
 80032c0:	2104      	movs	r1, #4
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 feb8 	bl	8004038 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0202 	orr.w	r2, r2, #2
 80032d6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0204 	orr.w	r2, r2, #4
 80032e6:	60da      	str	r2, [r3, #12]
      break;
 80032e8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800331e:	2302      	movs	r3, #2
 8003320:	e0ff      	b.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b14      	cmp	r3, #20
 800332e:	f200 80f0 	bhi.w	8003512 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003332:	a201      	add	r2, pc, #4	@ (adr r2, 8003338 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003338:	0800338d 	.word	0x0800338d
 800333c:	08003513 	.word	0x08003513
 8003340:	08003513 	.word	0x08003513
 8003344:	08003513 	.word	0x08003513
 8003348:	080033cd 	.word	0x080033cd
 800334c:	08003513 	.word	0x08003513
 8003350:	08003513 	.word	0x08003513
 8003354:	08003513 	.word	0x08003513
 8003358:	0800340f 	.word	0x0800340f
 800335c:	08003513 	.word	0x08003513
 8003360:	08003513 	.word	0x08003513
 8003364:	08003513 	.word	0x08003513
 8003368:	0800344f 	.word	0x0800344f
 800336c:	08003513 	.word	0x08003513
 8003370:	08003513 	.word	0x08003513
 8003374:	08003513 	.word	0x08003513
 8003378:	08003491 	.word	0x08003491
 800337c:	08003513 	.word	0x08003513
 8003380:	08003513 	.word	0x08003513
 8003384:	08003513 	.word	0x08003513
 8003388:	080034d1 	.word	0x080034d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fa8a 	bl	80038ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0208 	orr.w	r2, r2, #8
 80033a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0204 	bic.w	r2, r2, #4
 80033b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6999      	ldr	r1, [r3, #24]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	619a      	str	r2, [r3, #24]
      break;
 80033ca:	e0a5      	b.n	8003518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fb04 	bl	80039e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699a      	ldr	r2, [r3, #24]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6999      	ldr	r1, [r3, #24]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	021a      	lsls	r2, r3, #8
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	619a      	str	r2, [r3, #24]
      break;
 800340c:	e084      	b.n	8003518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	4618      	mov	r0, r3
 8003416:	f000 fb77 	bl	8003b08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69da      	ldr	r2, [r3, #28]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0208 	orr.w	r2, r2, #8
 8003428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	69da      	ldr	r2, [r3, #28]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0204 	bic.w	r2, r2, #4
 8003438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69d9      	ldr	r1, [r3, #28]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	61da      	str	r2, [r3, #28]
      break;
 800344c:	e064      	b.n	8003518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68b9      	ldr	r1, [r7, #8]
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fbe9 	bl	8003c2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	69da      	ldr	r2, [r3, #28]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69d9      	ldr	r1, [r3, #28]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	021a      	lsls	r2, r3, #8
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	61da      	str	r2, [r3, #28]
      break;
 800348e:	e043      	b.n	8003518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68b9      	ldr	r1, [r7, #8]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fc5c 	bl	8003d54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0208 	orr.w	r2, r2, #8
 80034aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0204 	bic.w	r2, r2, #4
 80034ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	691a      	ldr	r2, [r3, #16]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80034ce:	e023      	b.n	8003518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fca6 	bl	8003e28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	021a      	lsls	r2, r3, #8
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003510:	e002      	b.n	8003518 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	75fb      	strb	r3, [r7, #23]
      break;
 8003516:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003520:	7dfb      	ldrb	r3, [r7, #23]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop

0800352c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_TIM_ConfigClockSource+0x1c>
 8003544:	2302      	movs	r3, #2
 8003546:	e0ee      	b.n	8003726 <HAL_TIM_ConfigClockSource+0x1fa>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003566:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800356a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003572:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a6b      	ldr	r2, [pc, #428]	@ (8003730 <HAL_TIM_ConfigClockSource+0x204>)
 8003582:	4293      	cmp	r3, r2
 8003584:	f000 80b9 	beq.w	80036fa <HAL_TIM_ConfigClockSource+0x1ce>
 8003588:	4a69      	ldr	r2, [pc, #420]	@ (8003730 <HAL_TIM_ConfigClockSource+0x204>)
 800358a:	4293      	cmp	r3, r2
 800358c:	f200 80be 	bhi.w	800370c <HAL_TIM_ConfigClockSource+0x1e0>
 8003590:	4a68      	ldr	r2, [pc, #416]	@ (8003734 <HAL_TIM_ConfigClockSource+0x208>)
 8003592:	4293      	cmp	r3, r2
 8003594:	f000 80b1 	beq.w	80036fa <HAL_TIM_ConfigClockSource+0x1ce>
 8003598:	4a66      	ldr	r2, [pc, #408]	@ (8003734 <HAL_TIM_ConfigClockSource+0x208>)
 800359a:	4293      	cmp	r3, r2
 800359c:	f200 80b6 	bhi.w	800370c <HAL_TIM_ConfigClockSource+0x1e0>
 80035a0:	4a65      	ldr	r2, [pc, #404]	@ (8003738 <HAL_TIM_ConfigClockSource+0x20c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	f000 80a9 	beq.w	80036fa <HAL_TIM_ConfigClockSource+0x1ce>
 80035a8:	4a63      	ldr	r2, [pc, #396]	@ (8003738 <HAL_TIM_ConfigClockSource+0x20c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	f200 80ae 	bhi.w	800370c <HAL_TIM_ConfigClockSource+0x1e0>
 80035b0:	4a62      	ldr	r2, [pc, #392]	@ (800373c <HAL_TIM_ConfigClockSource+0x210>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	f000 80a1 	beq.w	80036fa <HAL_TIM_ConfigClockSource+0x1ce>
 80035b8:	4a60      	ldr	r2, [pc, #384]	@ (800373c <HAL_TIM_ConfigClockSource+0x210>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	f200 80a6 	bhi.w	800370c <HAL_TIM_ConfigClockSource+0x1e0>
 80035c0:	4a5f      	ldr	r2, [pc, #380]	@ (8003740 <HAL_TIM_ConfigClockSource+0x214>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	f000 8099 	beq.w	80036fa <HAL_TIM_ConfigClockSource+0x1ce>
 80035c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003740 <HAL_TIM_ConfigClockSource+0x214>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	f200 809e 	bhi.w	800370c <HAL_TIM_ConfigClockSource+0x1e0>
 80035d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80035d4:	f000 8091 	beq.w	80036fa <HAL_TIM_ConfigClockSource+0x1ce>
 80035d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80035dc:	f200 8096 	bhi.w	800370c <HAL_TIM_ConfigClockSource+0x1e0>
 80035e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035e4:	f000 8089 	beq.w	80036fa <HAL_TIM_ConfigClockSource+0x1ce>
 80035e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035ec:	f200 808e 	bhi.w	800370c <HAL_TIM_ConfigClockSource+0x1e0>
 80035f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035f4:	d03e      	beq.n	8003674 <HAL_TIM_ConfigClockSource+0x148>
 80035f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035fa:	f200 8087 	bhi.w	800370c <HAL_TIM_ConfigClockSource+0x1e0>
 80035fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003602:	f000 8086 	beq.w	8003712 <HAL_TIM_ConfigClockSource+0x1e6>
 8003606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800360a:	d87f      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x1e0>
 800360c:	2b70      	cmp	r3, #112	@ 0x70
 800360e:	d01a      	beq.n	8003646 <HAL_TIM_ConfigClockSource+0x11a>
 8003610:	2b70      	cmp	r3, #112	@ 0x70
 8003612:	d87b      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x1e0>
 8003614:	2b60      	cmp	r3, #96	@ 0x60
 8003616:	d050      	beq.n	80036ba <HAL_TIM_ConfigClockSource+0x18e>
 8003618:	2b60      	cmp	r3, #96	@ 0x60
 800361a:	d877      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x1e0>
 800361c:	2b50      	cmp	r3, #80	@ 0x50
 800361e:	d03c      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x16e>
 8003620:	2b50      	cmp	r3, #80	@ 0x50
 8003622:	d873      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x1e0>
 8003624:	2b40      	cmp	r3, #64	@ 0x40
 8003626:	d058      	beq.n	80036da <HAL_TIM_ConfigClockSource+0x1ae>
 8003628:	2b40      	cmp	r3, #64	@ 0x40
 800362a:	d86f      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x1e0>
 800362c:	2b30      	cmp	r3, #48	@ 0x30
 800362e:	d064      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x1ce>
 8003630:	2b30      	cmp	r3, #48	@ 0x30
 8003632:	d86b      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x1e0>
 8003634:	2b20      	cmp	r3, #32
 8003636:	d060      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x1ce>
 8003638:	2b20      	cmp	r3, #32
 800363a:	d867      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x1e0>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d05c      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x1ce>
 8003640:	2b10      	cmp	r3, #16
 8003642:	d05a      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x1ce>
 8003644:	e062      	b.n	800370c <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003656:	f000 fccf 	bl	8003ff8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003668:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	609a      	str	r2, [r3, #8]
      break;
 8003672:	e04f      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003684:	f000 fcb8 	bl	8003ff8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003696:	609a      	str	r2, [r3, #8]
      break;
 8003698:	e03c      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a6:	461a      	mov	r2, r3
 80036a8:	f000 fc2a 	bl	8003f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2150      	movs	r1, #80	@ 0x50
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fc83 	bl	8003fbe <TIM_ITRx_SetConfig>
      break;
 80036b8:	e02c      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036c6:	461a      	mov	r2, r3
 80036c8:	f000 fc49 	bl	8003f5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2160      	movs	r1, #96	@ 0x60
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fc73 	bl	8003fbe <TIM_ITRx_SetConfig>
      break;
 80036d8:	e01c      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e6:	461a      	mov	r2, r3
 80036e8:	f000 fc0a 	bl	8003f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2140      	movs	r1, #64	@ 0x40
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fc63 	bl	8003fbe <TIM_ITRx_SetConfig>
      break;
 80036f8:	e00c      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4619      	mov	r1, r3
 8003704:	4610      	mov	r0, r2
 8003706:	f000 fc5a 	bl	8003fbe <TIM_ITRx_SetConfig>
      break;
 800370a:	e003      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      break;
 8003710:	e000      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8003712:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003724:	7bfb      	ldrb	r3, [r7, #15]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	00100070 	.word	0x00100070
 8003734:	00100050 	.word	0x00100050
 8003738:	00100040 	.word	0x00100040
 800373c:	00100030 	.word	0x00100030
 8003740:	00100020 	.word	0x00100020

08003744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a4c      	ldr	r2, [pc, #304]	@ (8003888 <TIM_Base_SetConfig+0x144>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d017      	beq.n	800378c <TIM_Base_SetConfig+0x48>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003762:	d013      	beq.n	800378c <TIM_Base_SetConfig+0x48>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a49      	ldr	r2, [pc, #292]	@ (800388c <TIM_Base_SetConfig+0x148>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00f      	beq.n	800378c <TIM_Base_SetConfig+0x48>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a48      	ldr	r2, [pc, #288]	@ (8003890 <TIM_Base_SetConfig+0x14c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00b      	beq.n	800378c <TIM_Base_SetConfig+0x48>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a47      	ldr	r2, [pc, #284]	@ (8003894 <TIM_Base_SetConfig+0x150>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d007      	beq.n	800378c <TIM_Base_SetConfig+0x48>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a46      	ldr	r2, [pc, #280]	@ (8003898 <TIM_Base_SetConfig+0x154>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d003      	beq.n	800378c <TIM_Base_SetConfig+0x48>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a45      	ldr	r2, [pc, #276]	@ (800389c <TIM_Base_SetConfig+0x158>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d108      	bne.n	800379e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a39      	ldr	r2, [pc, #228]	@ (8003888 <TIM_Base_SetConfig+0x144>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d023      	beq.n	80037ee <TIM_Base_SetConfig+0xaa>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ac:	d01f      	beq.n	80037ee <TIM_Base_SetConfig+0xaa>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a36      	ldr	r2, [pc, #216]	@ (800388c <TIM_Base_SetConfig+0x148>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d01b      	beq.n	80037ee <TIM_Base_SetConfig+0xaa>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a35      	ldr	r2, [pc, #212]	@ (8003890 <TIM_Base_SetConfig+0x14c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d017      	beq.n	80037ee <TIM_Base_SetConfig+0xaa>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a34      	ldr	r2, [pc, #208]	@ (8003894 <TIM_Base_SetConfig+0x150>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d013      	beq.n	80037ee <TIM_Base_SetConfig+0xaa>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a33      	ldr	r2, [pc, #204]	@ (8003898 <TIM_Base_SetConfig+0x154>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00f      	beq.n	80037ee <TIM_Base_SetConfig+0xaa>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a33      	ldr	r2, [pc, #204]	@ (80038a0 <TIM_Base_SetConfig+0x15c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00b      	beq.n	80037ee <TIM_Base_SetConfig+0xaa>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a32      	ldr	r2, [pc, #200]	@ (80038a4 <TIM_Base_SetConfig+0x160>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d007      	beq.n	80037ee <TIM_Base_SetConfig+0xaa>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a31      	ldr	r2, [pc, #196]	@ (80038a8 <TIM_Base_SetConfig+0x164>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d003      	beq.n	80037ee <TIM_Base_SetConfig+0xaa>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a2c      	ldr	r2, [pc, #176]	@ (800389c <TIM_Base_SetConfig+0x158>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d108      	bne.n	8003800 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a18      	ldr	r2, [pc, #96]	@ (8003888 <TIM_Base_SetConfig+0x144>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d013      	beq.n	8003854 <TIM_Base_SetConfig+0x110>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a1a      	ldr	r2, [pc, #104]	@ (8003898 <TIM_Base_SetConfig+0x154>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00f      	beq.n	8003854 <TIM_Base_SetConfig+0x110>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a1a      	ldr	r2, [pc, #104]	@ (80038a0 <TIM_Base_SetConfig+0x15c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d00b      	beq.n	8003854 <TIM_Base_SetConfig+0x110>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a19      	ldr	r2, [pc, #100]	@ (80038a4 <TIM_Base_SetConfig+0x160>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d007      	beq.n	8003854 <TIM_Base_SetConfig+0x110>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a18      	ldr	r2, [pc, #96]	@ (80038a8 <TIM_Base_SetConfig+0x164>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d003      	beq.n	8003854 <TIM_Base_SetConfig+0x110>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a13      	ldr	r2, [pc, #76]	@ (800389c <TIM_Base_SetConfig+0x158>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d103      	bne.n	800385c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b01      	cmp	r3, #1
 800386c:	d105      	bne.n	800387a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f023 0201 	bic.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	611a      	str	r2, [r3, #16]
  }
}
 800387a:	bf00      	nop
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40012c00 	.word	0x40012c00
 800388c:	40000400 	.word	0x40000400
 8003890:	40000800 	.word	0x40000800
 8003894:	40000c00 	.word	0x40000c00
 8003898:	40013400 	.word	0x40013400
 800389c:	40015000 	.word	0x40015000
 80038a0:	40014000 	.word	0x40014000
 80038a4:	40014400 	.word	0x40014400
 80038a8:	40014800 	.word	0x40014800

080038ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f023 0201 	bic.w	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0303 	bic.w	r3, r3, #3
 80038e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f023 0302 	bic.w	r3, r3, #2
 80038f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a30      	ldr	r2, [pc, #192]	@ (80039c8 <TIM_OC1_SetConfig+0x11c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d013      	beq.n	8003934 <TIM_OC1_SetConfig+0x88>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a2f      	ldr	r2, [pc, #188]	@ (80039cc <TIM_OC1_SetConfig+0x120>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00f      	beq.n	8003934 <TIM_OC1_SetConfig+0x88>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a2e      	ldr	r2, [pc, #184]	@ (80039d0 <TIM_OC1_SetConfig+0x124>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00b      	beq.n	8003934 <TIM_OC1_SetConfig+0x88>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a2d      	ldr	r2, [pc, #180]	@ (80039d4 <TIM_OC1_SetConfig+0x128>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d007      	beq.n	8003934 <TIM_OC1_SetConfig+0x88>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a2c      	ldr	r2, [pc, #176]	@ (80039d8 <TIM_OC1_SetConfig+0x12c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d003      	beq.n	8003934 <TIM_OC1_SetConfig+0x88>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a2b      	ldr	r2, [pc, #172]	@ (80039dc <TIM_OC1_SetConfig+0x130>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d10c      	bne.n	800394e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f023 0308 	bic.w	r3, r3, #8
 800393a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4313      	orrs	r3, r2
 8003944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f023 0304 	bic.w	r3, r3, #4
 800394c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a1d      	ldr	r2, [pc, #116]	@ (80039c8 <TIM_OC1_SetConfig+0x11c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d013      	beq.n	800397e <TIM_OC1_SetConfig+0xd2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a1c      	ldr	r2, [pc, #112]	@ (80039cc <TIM_OC1_SetConfig+0x120>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d00f      	beq.n	800397e <TIM_OC1_SetConfig+0xd2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a1b      	ldr	r2, [pc, #108]	@ (80039d0 <TIM_OC1_SetConfig+0x124>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00b      	beq.n	800397e <TIM_OC1_SetConfig+0xd2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a1a      	ldr	r2, [pc, #104]	@ (80039d4 <TIM_OC1_SetConfig+0x128>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d007      	beq.n	800397e <TIM_OC1_SetConfig+0xd2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a19      	ldr	r2, [pc, #100]	@ (80039d8 <TIM_OC1_SetConfig+0x12c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d003      	beq.n	800397e <TIM_OC1_SetConfig+0xd2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a18      	ldr	r2, [pc, #96]	@ (80039dc <TIM_OC1_SetConfig+0x130>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d111      	bne.n	80039a2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800398c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	621a      	str	r2, [r3, #32]
}
 80039bc:	bf00      	nop
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40013400 	.word	0x40013400
 80039d0:	40014000 	.word	0x40014000
 80039d4:	40014400 	.word	0x40014400
 80039d8:	40014800 	.word	0x40014800
 80039dc:	40015000 	.word	0x40015000

080039e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f023 0210 	bic.w	r2, r3, #16
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	021b      	lsls	r3, r3, #8
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f023 0320 	bic.w	r3, r3, #32
 8003a2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a2c      	ldr	r2, [pc, #176]	@ (8003af0 <TIM_OC2_SetConfig+0x110>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d007      	beq.n	8003a54 <TIM_OC2_SetConfig+0x74>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a2b      	ldr	r2, [pc, #172]	@ (8003af4 <TIM_OC2_SetConfig+0x114>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d003      	beq.n	8003a54 <TIM_OC2_SetConfig+0x74>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8003af8 <TIM_OC2_SetConfig+0x118>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d10d      	bne.n	8003a70 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a1f      	ldr	r2, [pc, #124]	@ (8003af0 <TIM_OC2_SetConfig+0x110>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d013      	beq.n	8003aa0 <TIM_OC2_SetConfig+0xc0>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8003af4 <TIM_OC2_SetConfig+0x114>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00f      	beq.n	8003aa0 <TIM_OC2_SetConfig+0xc0>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a1e      	ldr	r2, [pc, #120]	@ (8003afc <TIM_OC2_SetConfig+0x11c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00b      	beq.n	8003aa0 <TIM_OC2_SetConfig+0xc0>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003b00 <TIM_OC2_SetConfig+0x120>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d007      	beq.n	8003aa0 <TIM_OC2_SetConfig+0xc0>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a1c      	ldr	r2, [pc, #112]	@ (8003b04 <TIM_OC2_SetConfig+0x124>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d003      	beq.n	8003aa0 <TIM_OC2_SetConfig+0xc0>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a17      	ldr	r2, [pc, #92]	@ (8003af8 <TIM_OC2_SetConfig+0x118>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d113      	bne.n	8003ac8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003aa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003aae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	621a      	str	r2, [r3, #32]
}
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40012c00 	.word	0x40012c00
 8003af4:	40013400 	.word	0x40013400
 8003af8:	40015000 	.word	0x40015000
 8003afc:	40014000 	.word	0x40014000
 8003b00:	40014400 	.word	0x40014400
 8003b04:	40014800 	.word	0x40014800

08003b08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0303 	bic.w	r3, r3, #3
 8003b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	021b      	lsls	r3, r3, #8
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a2b      	ldr	r2, [pc, #172]	@ (8003c14 <TIM_OC3_SetConfig+0x10c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d007      	beq.n	8003b7a <TIM_OC3_SetConfig+0x72>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a2a      	ldr	r2, [pc, #168]	@ (8003c18 <TIM_OC3_SetConfig+0x110>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d003      	beq.n	8003b7a <TIM_OC3_SetConfig+0x72>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a29      	ldr	r2, [pc, #164]	@ (8003c1c <TIM_OC3_SetConfig+0x114>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d10d      	bne.n	8003b96 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a1e      	ldr	r2, [pc, #120]	@ (8003c14 <TIM_OC3_SetConfig+0x10c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d013      	beq.n	8003bc6 <TIM_OC3_SetConfig+0xbe>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8003c18 <TIM_OC3_SetConfig+0x110>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00f      	beq.n	8003bc6 <TIM_OC3_SetConfig+0xbe>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c20 <TIM_OC3_SetConfig+0x118>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00b      	beq.n	8003bc6 <TIM_OC3_SetConfig+0xbe>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8003c24 <TIM_OC3_SetConfig+0x11c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d007      	beq.n	8003bc6 <TIM_OC3_SetConfig+0xbe>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c28 <TIM_OC3_SetConfig+0x120>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d003      	beq.n	8003bc6 <TIM_OC3_SetConfig+0xbe>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a16      	ldr	r2, [pc, #88]	@ (8003c1c <TIM_OC3_SetConfig+0x114>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d113      	bne.n	8003bee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	621a      	str	r2, [r3, #32]
}
 8003c08:	bf00      	nop
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	40013400 	.word	0x40013400
 8003c1c:	40015000 	.word	0x40015000
 8003c20:	40014000 	.word	0x40014000
 8003c24:	40014400 	.word	0x40014400
 8003c28:	40014800 	.word	0x40014800

08003c2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	021b      	lsls	r3, r3, #8
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	031b      	lsls	r3, r3, #12
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8003d3c <TIM_OC4_SetConfig+0x110>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d007      	beq.n	8003ca0 <TIM_OC4_SetConfig+0x74>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a2b      	ldr	r2, [pc, #172]	@ (8003d40 <TIM_OC4_SetConfig+0x114>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d003      	beq.n	8003ca0 <TIM_OC4_SetConfig+0x74>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a2a      	ldr	r2, [pc, #168]	@ (8003d44 <TIM_OC4_SetConfig+0x118>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d10d      	bne.n	8003cbc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	031b      	lsls	r3, r3, #12
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <TIM_OC4_SetConfig+0x110>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d013      	beq.n	8003cec <TIM_OC4_SetConfig+0xc0>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8003d40 <TIM_OC4_SetConfig+0x114>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d00f      	beq.n	8003cec <TIM_OC4_SetConfig+0xc0>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a1e      	ldr	r2, [pc, #120]	@ (8003d48 <TIM_OC4_SetConfig+0x11c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00b      	beq.n	8003cec <TIM_OC4_SetConfig+0xc0>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d4c <TIM_OC4_SetConfig+0x120>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d007      	beq.n	8003cec <TIM_OC4_SetConfig+0xc0>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a1c      	ldr	r2, [pc, #112]	@ (8003d50 <TIM_OC4_SetConfig+0x124>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d003      	beq.n	8003cec <TIM_OC4_SetConfig+0xc0>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a17      	ldr	r2, [pc, #92]	@ (8003d44 <TIM_OC4_SetConfig+0x118>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d113      	bne.n	8003d14 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cf2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003cfa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	019b      	lsls	r3, r3, #6
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	019b      	lsls	r3, r3, #6
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40012c00 	.word	0x40012c00
 8003d40:	40013400 	.word	0x40013400
 8003d44:	40015000 	.word	0x40015000
 8003d48:	40014000 	.word	0x40014000
 8003d4c:	40014400 	.word	0x40014400
 8003d50:	40014800 	.word	0x40014800

08003d54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003d98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	041b      	lsls	r3, r3, #16
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a19      	ldr	r2, [pc, #100]	@ (8003e10 <TIM_OC5_SetConfig+0xbc>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d013      	beq.n	8003dd6 <TIM_OC5_SetConfig+0x82>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a18      	ldr	r2, [pc, #96]	@ (8003e14 <TIM_OC5_SetConfig+0xc0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00f      	beq.n	8003dd6 <TIM_OC5_SetConfig+0x82>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a17      	ldr	r2, [pc, #92]	@ (8003e18 <TIM_OC5_SetConfig+0xc4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00b      	beq.n	8003dd6 <TIM_OC5_SetConfig+0x82>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a16      	ldr	r2, [pc, #88]	@ (8003e1c <TIM_OC5_SetConfig+0xc8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d007      	beq.n	8003dd6 <TIM_OC5_SetConfig+0x82>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a15      	ldr	r2, [pc, #84]	@ (8003e20 <TIM_OC5_SetConfig+0xcc>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d003      	beq.n	8003dd6 <TIM_OC5_SetConfig+0x82>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a14      	ldr	r2, [pc, #80]	@ (8003e24 <TIM_OC5_SetConfig+0xd0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d109      	bne.n	8003dea <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	621a      	str	r2, [r3, #32]
}
 8003e04:	bf00      	nop
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	40013400 	.word	0x40013400
 8003e18:	40014000 	.word	0x40014000
 8003e1c:	40014400 	.word	0x40014400
 8003e20:	40014800 	.word	0x40014800
 8003e24:	40015000 	.word	0x40015000

08003e28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	021b      	lsls	r3, r3, #8
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	051b      	lsls	r3, r3, #20
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ee8 <TIM_OC6_SetConfig+0xc0>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d013      	beq.n	8003eac <TIM_OC6_SetConfig+0x84>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a19      	ldr	r2, [pc, #100]	@ (8003eec <TIM_OC6_SetConfig+0xc4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00f      	beq.n	8003eac <TIM_OC6_SetConfig+0x84>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a18      	ldr	r2, [pc, #96]	@ (8003ef0 <TIM_OC6_SetConfig+0xc8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00b      	beq.n	8003eac <TIM_OC6_SetConfig+0x84>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a17      	ldr	r2, [pc, #92]	@ (8003ef4 <TIM_OC6_SetConfig+0xcc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d007      	beq.n	8003eac <TIM_OC6_SetConfig+0x84>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a16      	ldr	r2, [pc, #88]	@ (8003ef8 <TIM_OC6_SetConfig+0xd0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_OC6_SetConfig+0x84>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a15      	ldr	r2, [pc, #84]	@ (8003efc <TIM_OC6_SetConfig+0xd4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d109      	bne.n	8003ec0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	029b      	lsls	r3, r3, #10
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	621a      	str	r2, [r3, #32]
}
 8003eda:	bf00      	nop
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40012c00 	.word	0x40012c00
 8003eec:	40013400 	.word	0x40013400
 8003ef0:	40014000 	.word	0x40014000
 8003ef4:	40014400 	.word	0x40014400
 8003ef8:	40014800 	.word	0x40014800
 8003efc:	40015000 	.word	0x40015000

08003f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	f023 0201 	bic.w	r2, r3, #1
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f023 030a 	bic.w	r3, r3, #10
 8003f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	621a      	str	r2, [r3, #32]
}
 8003f52:	bf00      	nop
 8003f54:	371c      	adds	r7, #28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b087      	sub	sp, #28
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	f023 0210 	bic.w	r2, r3, #16
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	031b      	lsls	r3, r3, #12
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	621a      	str	r2, [r3, #32]
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b085      	sub	sp, #20
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f043 0307 	orr.w	r3, r3, #7
 8003fe4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	609a      	str	r2, [r3, #8]
}
 8003fec:	bf00      	nop
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004012:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	021a      	lsls	r2, r3, #8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	431a      	orrs	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4313      	orrs	r3, r2
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	609a      	str	r2, [r3, #8]
}
 800402c:	bf00      	nop
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	2201      	movs	r2, #1
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a1a      	ldr	r2, [r3, #32]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	43db      	mvns	r3, r3
 800405a:	401a      	ands	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a1a      	ldr	r2, [r3, #32]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	fa01 f303 	lsl.w	r3, r1, r3
 8004070:	431a      	orrs	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	621a      	str	r2, [r3, #32]
}
 8004076:	bf00      	nop
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004098:	2302      	movs	r3, #2
 800409a:	e074      	b.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a34      	ldr	r2, [pc, #208]	@ (8004194 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d009      	beq.n	80040da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a33      	ldr	r2, [pc, #204]	@ (8004198 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d004      	beq.n	80040da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a31      	ldr	r2, [pc, #196]	@ (800419c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d108      	bne.n	80040ec <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80040e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80040f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a21      	ldr	r2, [pc, #132]	@ (8004194 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d022      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800411c:	d01d      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1f      	ldr	r2, [pc, #124]	@ (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d018      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1d      	ldr	r2, [pc, #116]	@ (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d013      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a1c      	ldr	r2, [pc, #112]	@ (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00e      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a15      	ldr	r2, [pc, #84]	@ (8004198 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d009      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a18      	ldr	r2, [pc, #96]	@ (80041ac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d004      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a11      	ldr	r2, [pc, #68]	@ (800419c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d10c      	bne.n	8004174 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004160:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	4313      	orrs	r3, r2
 800416a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40012c00 	.word	0x40012c00
 8004198:	40013400 	.word	0x40013400
 800419c:	40015000 	.word	0x40015000
 80041a0:	40000400 	.word	0x40000400
 80041a4:	40000800 	.word	0x40000800
 80041a8:	40000c00 	.word	0x40000c00
 80041ac:	40014000 	.word	0x40014000

080041b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e042      	b.n	8004248 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d106      	bne.n	80041da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7fd f8e1 	bl	800139c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2224      	movs	r2, #36	@ 0x24
 80041de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0201 	bic.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fb24 	bl	8004848 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f825 	bl	8004250 <UART_SetConfig>
 8004206:	4603      	mov	r3, r0
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e01b      	b.n	8004248 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800421e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800422e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fba3 	bl	800498c <UART_CheckIdleState>
 8004246:	4603      	mov	r3, r0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004254:	b08c      	sub	sp, #48	@ 0x30
 8004256:	af00      	add	r7, sp, #0
 8004258:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	431a      	orrs	r2, r3
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	431a      	orrs	r2, r3
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	4313      	orrs	r3, r2
 8004276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4baa      	ldr	r3, [pc, #680]	@ (8004528 <UART_SetConfig+0x2d8>)
 8004280:	4013      	ands	r3, r2
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004288:	430b      	orrs	r3, r1
 800428a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a9f      	ldr	r2, [pc, #636]	@ (800452c <UART_SetConfig+0x2dc>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d004      	beq.n	80042bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042b8:	4313      	orrs	r3, r2
 80042ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80042c6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042d0:	430b      	orrs	r3, r1
 80042d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042da:	f023 010f 	bic.w	r1, r3, #15
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a90      	ldr	r2, [pc, #576]	@ (8004530 <UART_SetConfig+0x2e0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d125      	bne.n	8004340 <UART_SetConfig+0xf0>
 80042f4:	4b8f      	ldr	r3, [pc, #572]	@ (8004534 <UART_SetConfig+0x2e4>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d81a      	bhi.n	8004338 <UART_SetConfig+0xe8>
 8004302:	a201      	add	r2, pc, #4	@ (adr r2, 8004308 <UART_SetConfig+0xb8>)
 8004304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004308:	08004319 	.word	0x08004319
 800430c:	08004329 	.word	0x08004329
 8004310:	08004321 	.word	0x08004321
 8004314:	08004331 	.word	0x08004331
 8004318:	2301      	movs	r3, #1
 800431a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800431e:	e116      	b.n	800454e <UART_SetConfig+0x2fe>
 8004320:	2302      	movs	r3, #2
 8004322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004326:	e112      	b.n	800454e <UART_SetConfig+0x2fe>
 8004328:	2304      	movs	r3, #4
 800432a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800432e:	e10e      	b.n	800454e <UART_SetConfig+0x2fe>
 8004330:	2308      	movs	r3, #8
 8004332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004336:	e10a      	b.n	800454e <UART_SetConfig+0x2fe>
 8004338:	2310      	movs	r3, #16
 800433a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800433e:	e106      	b.n	800454e <UART_SetConfig+0x2fe>
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a7c      	ldr	r2, [pc, #496]	@ (8004538 <UART_SetConfig+0x2e8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d138      	bne.n	80043bc <UART_SetConfig+0x16c>
 800434a:	4b7a      	ldr	r3, [pc, #488]	@ (8004534 <UART_SetConfig+0x2e4>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004350:	f003 030c 	and.w	r3, r3, #12
 8004354:	2b0c      	cmp	r3, #12
 8004356:	d82d      	bhi.n	80043b4 <UART_SetConfig+0x164>
 8004358:	a201      	add	r2, pc, #4	@ (adr r2, 8004360 <UART_SetConfig+0x110>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	08004395 	.word	0x08004395
 8004364:	080043b5 	.word	0x080043b5
 8004368:	080043b5 	.word	0x080043b5
 800436c:	080043b5 	.word	0x080043b5
 8004370:	080043a5 	.word	0x080043a5
 8004374:	080043b5 	.word	0x080043b5
 8004378:	080043b5 	.word	0x080043b5
 800437c:	080043b5 	.word	0x080043b5
 8004380:	0800439d 	.word	0x0800439d
 8004384:	080043b5 	.word	0x080043b5
 8004388:	080043b5 	.word	0x080043b5
 800438c:	080043b5 	.word	0x080043b5
 8004390:	080043ad 	.word	0x080043ad
 8004394:	2300      	movs	r3, #0
 8004396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800439a:	e0d8      	b.n	800454e <UART_SetConfig+0x2fe>
 800439c:	2302      	movs	r3, #2
 800439e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043a2:	e0d4      	b.n	800454e <UART_SetConfig+0x2fe>
 80043a4:	2304      	movs	r3, #4
 80043a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043aa:	e0d0      	b.n	800454e <UART_SetConfig+0x2fe>
 80043ac:	2308      	movs	r3, #8
 80043ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043b2:	e0cc      	b.n	800454e <UART_SetConfig+0x2fe>
 80043b4:	2310      	movs	r3, #16
 80043b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ba:	e0c8      	b.n	800454e <UART_SetConfig+0x2fe>
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a5e      	ldr	r2, [pc, #376]	@ (800453c <UART_SetConfig+0x2ec>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d125      	bne.n	8004412 <UART_SetConfig+0x1c2>
 80043c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004534 <UART_SetConfig+0x2e4>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80043d0:	2b30      	cmp	r3, #48	@ 0x30
 80043d2:	d016      	beq.n	8004402 <UART_SetConfig+0x1b2>
 80043d4:	2b30      	cmp	r3, #48	@ 0x30
 80043d6:	d818      	bhi.n	800440a <UART_SetConfig+0x1ba>
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d00a      	beq.n	80043f2 <UART_SetConfig+0x1a2>
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d814      	bhi.n	800440a <UART_SetConfig+0x1ba>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <UART_SetConfig+0x19a>
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d008      	beq.n	80043fa <UART_SetConfig+0x1aa>
 80043e8:	e00f      	b.n	800440a <UART_SetConfig+0x1ba>
 80043ea:	2300      	movs	r3, #0
 80043ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043f0:	e0ad      	b.n	800454e <UART_SetConfig+0x2fe>
 80043f2:	2302      	movs	r3, #2
 80043f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043f8:	e0a9      	b.n	800454e <UART_SetConfig+0x2fe>
 80043fa:	2304      	movs	r3, #4
 80043fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004400:	e0a5      	b.n	800454e <UART_SetConfig+0x2fe>
 8004402:	2308      	movs	r3, #8
 8004404:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004408:	e0a1      	b.n	800454e <UART_SetConfig+0x2fe>
 800440a:	2310      	movs	r3, #16
 800440c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004410:	e09d      	b.n	800454e <UART_SetConfig+0x2fe>
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a4a      	ldr	r2, [pc, #296]	@ (8004540 <UART_SetConfig+0x2f0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d125      	bne.n	8004468 <UART_SetConfig+0x218>
 800441c:	4b45      	ldr	r3, [pc, #276]	@ (8004534 <UART_SetConfig+0x2e4>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004422:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004426:	2bc0      	cmp	r3, #192	@ 0xc0
 8004428:	d016      	beq.n	8004458 <UART_SetConfig+0x208>
 800442a:	2bc0      	cmp	r3, #192	@ 0xc0
 800442c:	d818      	bhi.n	8004460 <UART_SetConfig+0x210>
 800442e:	2b80      	cmp	r3, #128	@ 0x80
 8004430:	d00a      	beq.n	8004448 <UART_SetConfig+0x1f8>
 8004432:	2b80      	cmp	r3, #128	@ 0x80
 8004434:	d814      	bhi.n	8004460 <UART_SetConfig+0x210>
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <UART_SetConfig+0x1f0>
 800443a:	2b40      	cmp	r3, #64	@ 0x40
 800443c:	d008      	beq.n	8004450 <UART_SetConfig+0x200>
 800443e:	e00f      	b.n	8004460 <UART_SetConfig+0x210>
 8004440:	2300      	movs	r3, #0
 8004442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004446:	e082      	b.n	800454e <UART_SetConfig+0x2fe>
 8004448:	2302      	movs	r3, #2
 800444a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800444e:	e07e      	b.n	800454e <UART_SetConfig+0x2fe>
 8004450:	2304      	movs	r3, #4
 8004452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004456:	e07a      	b.n	800454e <UART_SetConfig+0x2fe>
 8004458:	2308      	movs	r3, #8
 800445a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800445e:	e076      	b.n	800454e <UART_SetConfig+0x2fe>
 8004460:	2310      	movs	r3, #16
 8004462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004466:	e072      	b.n	800454e <UART_SetConfig+0x2fe>
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a35      	ldr	r2, [pc, #212]	@ (8004544 <UART_SetConfig+0x2f4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d12a      	bne.n	80044c8 <UART_SetConfig+0x278>
 8004472:	4b30      	ldr	r3, [pc, #192]	@ (8004534 <UART_SetConfig+0x2e4>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004478:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800447c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004480:	d01a      	beq.n	80044b8 <UART_SetConfig+0x268>
 8004482:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004486:	d81b      	bhi.n	80044c0 <UART_SetConfig+0x270>
 8004488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800448c:	d00c      	beq.n	80044a8 <UART_SetConfig+0x258>
 800448e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004492:	d815      	bhi.n	80044c0 <UART_SetConfig+0x270>
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <UART_SetConfig+0x250>
 8004498:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800449c:	d008      	beq.n	80044b0 <UART_SetConfig+0x260>
 800449e:	e00f      	b.n	80044c0 <UART_SetConfig+0x270>
 80044a0:	2300      	movs	r3, #0
 80044a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044a6:	e052      	b.n	800454e <UART_SetConfig+0x2fe>
 80044a8:	2302      	movs	r3, #2
 80044aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ae:	e04e      	b.n	800454e <UART_SetConfig+0x2fe>
 80044b0:	2304      	movs	r3, #4
 80044b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044b6:	e04a      	b.n	800454e <UART_SetConfig+0x2fe>
 80044b8:	2308      	movs	r3, #8
 80044ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044be:	e046      	b.n	800454e <UART_SetConfig+0x2fe>
 80044c0:	2310      	movs	r3, #16
 80044c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044c6:	e042      	b.n	800454e <UART_SetConfig+0x2fe>
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a17      	ldr	r2, [pc, #92]	@ (800452c <UART_SetConfig+0x2dc>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d13a      	bne.n	8004548 <UART_SetConfig+0x2f8>
 80044d2:	4b18      	ldr	r3, [pc, #96]	@ (8004534 <UART_SetConfig+0x2e4>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80044dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044e0:	d01a      	beq.n	8004518 <UART_SetConfig+0x2c8>
 80044e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044e6:	d81b      	bhi.n	8004520 <UART_SetConfig+0x2d0>
 80044e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044ec:	d00c      	beq.n	8004508 <UART_SetConfig+0x2b8>
 80044ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044f2:	d815      	bhi.n	8004520 <UART_SetConfig+0x2d0>
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <UART_SetConfig+0x2b0>
 80044f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044fc:	d008      	beq.n	8004510 <UART_SetConfig+0x2c0>
 80044fe:	e00f      	b.n	8004520 <UART_SetConfig+0x2d0>
 8004500:	2300      	movs	r3, #0
 8004502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004506:	e022      	b.n	800454e <UART_SetConfig+0x2fe>
 8004508:	2302      	movs	r3, #2
 800450a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800450e:	e01e      	b.n	800454e <UART_SetConfig+0x2fe>
 8004510:	2304      	movs	r3, #4
 8004512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004516:	e01a      	b.n	800454e <UART_SetConfig+0x2fe>
 8004518:	2308      	movs	r3, #8
 800451a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800451e:	e016      	b.n	800454e <UART_SetConfig+0x2fe>
 8004520:	2310      	movs	r3, #16
 8004522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004526:	e012      	b.n	800454e <UART_SetConfig+0x2fe>
 8004528:	cfff69f3 	.word	0xcfff69f3
 800452c:	40008000 	.word	0x40008000
 8004530:	40013800 	.word	0x40013800
 8004534:	40021000 	.word	0x40021000
 8004538:	40004400 	.word	0x40004400
 800453c:	40004800 	.word	0x40004800
 8004540:	40004c00 	.word	0x40004c00
 8004544:	40005000 	.word	0x40005000
 8004548:	2310      	movs	r3, #16
 800454a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4aae      	ldr	r2, [pc, #696]	@ (800480c <UART_SetConfig+0x5bc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	f040 8097 	bne.w	8004688 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800455a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800455e:	2b08      	cmp	r3, #8
 8004560:	d823      	bhi.n	80045aa <UART_SetConfig+0x35a>
 8004562:	a201      	add	r2, pc, #4	@ (adr r2, 8004568 <UART_SetConfig+0x318>)
 8004564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004568:	0800458d 	.word	0x0800458d
 800456c:	080045ab 	.word	0x080045ab
 8004570:	08004595 	.word	0x08004595
 8004574:	080045ab 	.word	0x080045ab
 8004578:	0800459b 	.word	0x0800459b
 800457c:	080045ab 	.word	0x080045ab
 8004580:	080045ab 	.word	0x080045ab
 8004584:	080045ab 	.word	0x080045ab
 8004588:	080045a3 	.word	0x080045a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800458c:	f7fe f862 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8004590:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004592:	e010      	b.n	80045b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004594:	4b9e      	ldr	r3, [pc, #632]	@ (8004810 <UART_SetConfig+0x5c0>)
 8004596:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004598:	e00d      	b.n	80045b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800459a:	f7fd ffed 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 800459e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045a0:	e009      	b.n	80045b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045a8:	e005      	b.n	80045b6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80045b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 8130 	beq.w	800481e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c2:	4a94      	ldr	r2, [pc, #592]	@ (8004814 <UART_SetConfig+0x5c4>)
 80045c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045c8:	461a      	mov	r2, r3
 80045ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	4413      	add	r3, r2
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d305      	bcc.n	80045ee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d903      	bls.n	80045f6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80045f4:	e113      	b.n	800481e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	2200      	movs	r2, #0
 80045fa:	60bb      	str	r3, [r7, #8]
 80045fc:	60fa      	str	r2, [r7, #12]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004602:	4a84      	ldr	r2, [pc, #528]	@ (8004814 <UART_SetConfig+0x5c4>)
 8004604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004608:	b29b      	uxth	r3, r3
 800460a:	2200      	movs	r2, #0
 800460c:	603b      	str	r3, [r7, #0]
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004614:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004618:	f7fb fdfe 	bl	8000218 <__aeabi_uldivmod>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4610      	mov	r0, r2
 8004622:	4619      	mov	r1, r3
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	020b      	lsls	r3, r1, #8
 800462e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004632:	0202      	lsls	r2, r0, #8
 8004634:	6979      	ldr	r1, [r7, #20]
 8004636:	6849      	ldr	r1, [r1, #4]
 8004638:	0849      	lsrs	r1, r1, #1
 800463a:	2000      	movs	r0, #0
 800463c:	460c      	mov	r4, r1
 800463e:	4605      	mov	r5, r0
 8004640:	eb12 0804 	adds.w	r8, r2, r4
 8004644:	eb43 0905 	adc.w	r9, r3, r5
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	469a      	mov	sl, r3
 8004650:	4693      	mov	fp, r2
 8004652:	4652      	mov	r2, sl
 8004654:	465b      	mov	r3, fp
 8004656:	4640      	mov	r0, r8
 8004658:	4649      	mov	r1, r9
 800465a:	f7fb fddd 	bl	8000218 <__aeabi_uldivmod>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4613      	mov	r3, r2
 8004664:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800466c:	d308      	bcc.n	8004680 <UART_SetConfig+0x430>
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004674:	d204      	bcs.n	8004680 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6a3a      	ldr	r2, [r7, #32]
 800467c:	60da      	str	r2, [r3, #12]
 800467e:	e0ce      	b.n	800481e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004686:	e0ca      	b.n	800481e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004690:	d166      	bne.n	8004760 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004692:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004696:	2b08      	cmp	r3, #8
 8004698:	d827      	bhi.n	80046ea <UART_SetConfig+0x49a>
 800469a:	a201      	add	r2, pc, #4	@ (adr r2, 80046a0 <UART_SetConfig+0x450>)
 800469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a0:	080046c5 	.word	0x080046c5
 80046a4:	080046cd 	.word	0x080046cd
 80046a8:	080046d5 	.word	0x080046d5
 80046ac:	080046eb 	.word	0x080046eb
 80046b0:	080046db 	.word	0x080046db
 80046b4:	080046eb 	.word	0x080046eb
 80046b8:	080046eb 	.word	0x080046eb
 80046bc:	080046eb 	.word	0x080046eb
 80046c0:	080046e3 	.word	0x080046e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046c4:	f7fd ffc6 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 80046c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046ca:	e014      	b.n	80046f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046cc:	f7fd ffd8 	bl	8002680 <HAL_RCC_GetPCLK2Freq>
 80046d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046d2:	e010      	b.n	80046f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d4:	4b4e      	ldr	r3, [pc, #312]	@ (8004810 <UART_SetConfig+0x5c0>)
 80046d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046d8:	e00d      	b.n	80046f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046da:	f7fd ff4d 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 80046de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046e0:	e009      	b.n	80046f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046e8:	e005      	b.n	80046f6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80046f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 8090 	beq.w	800481e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004702:	4a44      	ldr	r2, [pc, #272]	@ (8004814 <UART_SetConfig+0x5c4>)
 8004704:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004708:	461a      	mov	r2, r3
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004710:	005a      	lsls	r2, r3, #1
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	085b      	lsrs	r3, r3, #1
 8004718:	441a      	add	r2, r3
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004722:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	2b0f      	cmp	r3, #15
 8004728:	d916      	bls.n	8004758 <UART_SetConfig+0x508>
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004730:	d212      	bcs.n	8004758 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	b29b      	uxth	r3, r3
 8004736:	f023 030f 	bic.w	r3, r3, #15
 800473a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	085b      	lsrs	r3, r3, #1
 8004740:	b29b      	uxth	r3, r3
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	b29a      	uxth	r2, r3
 8004748:	8bfb      	ldrh	r3, [r7, #30]
 800474a:	4313      	orrs	r3, r2
 800474c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	8bfa      	ldrh	r2, [r7, #30]
 8004754:	60da      	str	r2, [r3, #12]
 8004756:	e062      	b.n	800481e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800475e:	e05e      	b.n	800481e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004760:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004764:	2b08      	cmp	r3, #8
 8004766:	d828      	bhi.n	80047ba <UART_SetConfig+0x56a>
 8004768:	a201      	add	r2, pc, #4	@ (adr r2, 8004770 <UART_SetConfig+0x520>)
 800476a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476e:	bf00      	nop
 8004770:	08004795 	.word	0x08004795
 8004774:	0800479d 	.word	0x0800479d
 8004778:	080047a5 	.word	0x080047a5
 800477c:	080047bb 	.word	0x080047bb
 8004780:	080047ab 	.word	0x080047ab
 8004784:	080047bb 	.word	0x080047bb
 8004788:	080047bb 	.word	0x080047bb
 800478c:	080047bb 	.word	0x080047bb
 8004790:	080047b3 	.word	0x080047b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004794:	f7fd ff5e 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8004798:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800479a:	e014      	b.n	80047c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800479c:	f7fd ff70 	bl	8002680 <HAL_RCC_GetPCLK2Freq>
 80047a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047a2:	e010      	b.n	80047c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004810 <UART_SetConfig+0x5c0>)
 80047a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047a8:	e00d      	b.n	80047c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047aa:	f7fd fee5 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 80047ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047b0:	e009      	b.n	80047c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047b8:	e005      	b.n	80047c6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80047c4:	bf00      	nop
    }

    if (pclk != 0U)
 80047c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d028      	beq.n	800481e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d0:	4a10      	ldr	r2, [pc, #64]	@ (8004814 <UART_SetConfig+0x5c4>)
 80047d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047d6:	461a      	mov	r2, r3
 80047d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047da:	fbb3 f2f2 	udiv	r2, r3, r2
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	085b      	lsrs	r3, r3, #1
 80047e4:	441a      	add	r2, r3
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	2b0f      	cmp	r3, #15
 80047f4:	d910      	bls.n	8004818 <UART_SetConfig+0x5c8>
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047fc:	d20c      	bcs.n	8004818 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	b29a      	uxth	r2, r3
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60da      	str	r2, [r3, #12]
 8004808:	e009      	b.n	800481e <UART_SetConfig+0x5ce>
 800480a:	bf00      	nop
 800480c:	40008000 	.word	0x40008000
 8004810:	00f42400 	.word	0x00f42400
 8004814:	08004f14 	.word	0x08004f14
      }
      else
      {
        ret = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2201      	movs	r2, #1
 8004822:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2201      	movs	r2, #1
 800482a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2200      	movs	r2, #0
 8004832:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2200      	movs	r2, #0
 8004838:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800483a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800483e:	4618      	mov	r0, r3
 8004840:	3730      	adds	r7, #48	@ 0x30
 8004842:	46bd      	mov	sp, r7
 8004844:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004848 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01a      	beq.n	800495e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004942:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004946:	d10a      	bne.n	800495e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	605a      	str	r2, [r3, #4]
  }
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b098      	sub	sp, #96	@ 0x60
 8004990:	af02      	add	r7, sp, #8
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800499c:	f7fc fe24 	bl	80015e8 <HAL_GetTick>
 80049a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d12f      	bne.n	8004a10 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049b8:	2200      	movs	r2, #0
 80049ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f88e 	bl	8004ae0 <UART_WaitOnFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d022      	beq.n	8004a10 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d2:	e853 3f00 	ldrex	r3, [r3]
 80049d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049de:	653b      	str	r3, [r7, #80]	@ 0x50
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049f0:	e841 2300 	strex	r3, r2, [r1]
 80049f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1e6      	bne.n	80049ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e063      	b.n	8004ad8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d149      	bne.n	8004ab2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a1e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a26:	2200      	movs	r2, #0
 8004a28:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f857 	bl	8004ae0 <UART_WaitOnFlagUntilTimeout>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d03c      	beq.n	8004ab2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a40:	e853 3f00 	ldrex	r3, [r3]
 8004a44:	623b      	str	r3, [r7, #32]
   return(result);
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a56:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a58:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1e6      	bne.n	8004a38 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3308      	adds	r3, #8
 8004a70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	e853 3f00 	ldrex	r3, [r3]
 8004a78:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f023 0301 	bic.w	r3, r3, #1
 8004a80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3308      	adds	r3, #8
 8004a88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a8a:	61fa      	str	r2, [r7, #28]
 8004a8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8e:	69b9      	ldr	r1, [r7, #24]
 8004a90:	69fa      	ldr	r2, [r7, #28]
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	617b      	str	r3, [r7, #20]
   return(result);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1e5      	bne.n	8004a6a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e012      	b.n	8004ad8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3758      	adds	r7, #88	@ 0x58
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	603b      	str	r3, [r7, #0]
 8004aec:	4613      	mov	r3, r2
 8004aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af0:	e04f      	b.n	8004b92 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004af8:	d04b      	beq.n	8004b92 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004afa:	f7fc fd75 	bl	80015e8 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d302      	bcc.n	8004b10 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e04e      	b.n	8004bb2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d037      	beq.n	8004b92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b80      	cmp	r3, #128	@ 0x80
 8004b26:	d034      	beq.n	8004b92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b40      	cmp	r3, #64	@ 0x40
 8004b2c:	d031      	beq.n	8004b92 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d110      	bne.n	8004b5e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2208      	movs	r2, #8
 8004b42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f838 	bl	8004bba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2208      	movs	r2, #8
 8004b4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e029      	b.n	8004bb2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b6c:	d111      	bne.n	8004b92 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 f81e 	bl	8004bba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e00f      	b.n	8004bb2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69da      	ldr	r2, [r3, #28]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	bf0c      	ite	eq
 8004ba2:	2301      	moveq	r3, #1
 8004ba4:	2300      	movne	r3, #0
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	461a      	mov	r2, r3
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d0a0      	beq.n	8004af2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b095      	sub	sp, #84	@ 0x54
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bca:	e853 3f00 	ldrex	r3, [r3]
 8004bce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004be0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004be2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004be6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004be8:	e841 2300 	strex	r3, r2, [r1]
 8004bec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e6      	bne.n	8004bc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3308      	adds	r3, #8
 8004bfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	e853 3f00 	ldrex	r3, [r3]
 8004c02:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c0a:	f023 0301 	bic.w	r3, r3, #1
 8004c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3308      	adds	r3, #8
 8004c16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c20:	e841 2300 	strex	r3, r2, [r1]
 8004c24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e3      	bne.n	8004bf4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d118      	bne.n	8004c66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f023 0310 	bic.w	r3, r3, #16
 8004c48:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c52:	61bb      	str	r3, [r7, #24]
 8004c54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	6979      	ldr	r1, [r7, #20]
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1e6      	bne.n	8004c34 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004c7a:	bf00      	nop
 8004c7c:	3754      	adds	r7, #84	@ 0x54
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b085      	sub	sp, #20
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_UARTEx_DisableFifoMode+0x16>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e027      	b.n	8004cec <HAL_UARTEx_DisableFifoMode+0x66>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2224      	movs	r2, #36	@ 0x24
 8004ca8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0201 	bic.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004cca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e02d      	b.n	8004d6c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2224      	movs	r2, #36	@ 0x24
 8004d1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0201 	bic.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f84f 	bl	8004df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d101      	bne.n	8004d8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	e02d      	b.n	8004de8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2224      	movs	r2, #36	@ 0x24
 8004d98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0201 	bic.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f811 	bl	8004df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d108      	bne.n	8004e12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e10:	e031      	b.n	8004e76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e12:	2308      	movs	r3, #8
 8004e14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e16:	2308      	movs	r3, #8
 8004e18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	0e5b      	lsrs	r3, r3, #25
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	0f5b      	lsrs	r3, r3, #29
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e3a:	7bbb      	ldrb	r3, [r7, #14]
 8004e3c:	7b3a      	ldrb	r2, [r7, #12]
 8004e3e:	4911      	ldr	r1, [pc, #68]	@ (8004e84 <UARTEx_SetNbDataToProcess+0x94>)
 8004e40:	5c8a      	ldrb	r2, [r1, r2]
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e46:	7b3a      	ldrb	r2, [r7, #12]
 8004e48:	490f      	ldr	r1, [pc, #60]	@ (8004e88 <UARTEx_SetNbDataToProcess+0x98>)
 8004e4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	7b7a      	ldrb	r2, [r7, #13]
 8004e5c:	4909      	ldr	r1, [pc, #36]	@ (8004e84 <UARTEx_SetNbDataToProcess+0x94>)
 8004e5e:	5c8a      	ldrb	r2, [r1, r2]
 8004e60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e64:	7b7a      	ldrb	r2, [r7, #13]
 8004e66:	4908      	ldr	r1, [pc, #32]	@ (8004e88 <UARTEx_SetNbDataToProcess+0x98>)
 8004e68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004e76:	bf00      	nop
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	08004f2c 	.word	0x08004f2c
 8004e88:	08004f34 	.word	0x08004f34

08004e8c <memset>:
 8004e8c:	4402      	add	r2, r0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d100      	bne.n	8004e96 <memset+0xa>
 8004e94:	4770      	bx	lr
 8004e96:	f803 1b01 	strb.w	r1, [r3], #1
 8004e9a:	e7f9      	b.n	8004e90 <memset+0x4>

08004e9c <__libc_init_array>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	4d0d      	ldr	r5, [pc, #52]	@ (8004ed4 <__libc_init_array+0x38>)
 8004ea0:	4c0d      	ldr	r4, [pc, #52]	@ (8004ed8 <__libc_init_array+0x3c>)
 8004ea2:	1b64      	subs	r4, r4, r5
 8004ea4:	10a4      	asrs	r4, r4, #2
 8004ea6:	2600      	movs	r6, #0
 8004ea8:	42a6      	cmp	r6, r4
 8004eaa:	d109      	bne.n	8004ec0 <__libc_init_array+0x24>
 8004eac:	4d0b      	ldr	r5, [pc, #44]	@ (8004edc <__libc_init_array+0x40>)
 8004eae:	4c0c      	ldr	r4, [pc, #48]	@ (8004ee0 <__libc_init_array+0x44>)
 8004eb0:	f000 f818 	bl	8004ee4 <_init>
 8004eb4:	1b64      	subs	r4, r4, r5
 8004eb6:	10a4      	asrs	r4, r4, #2
 8004eb8:	2600      	movs	r6, #0
 8004eba:	42a6      	cmp	r6, r4
 8004ebc:	d105      	bne.n	8004eca <__libc_init_array+0x2e>
 8004ebe:	bd70      	pop	{r4, r5, r6, pc}
 8004ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec4:	4798      	blx	r3
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	e7ee      	b.n	8004ea8 <__libc_init_array+0xc>
 8004eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ece:	4798      	blx	r3
 8004ed0:	3601      	adds	r6, #1
 8004ed2:	e7f2      	b.n	8004eba <__libc_init_array+0x1e>
 8004ed4:	08004f44 	.word	0x08004f44
 8004ed8:	08004f44 	.word	0x08004f44
 8004edc:	08004f44 	.word	0x08004f44
 8004ee0:	08004f48 	.word	0x08004f48

08004ee4 <_init>:
 8004ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee6:	bf00      	nop
 8004ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eea:	bc08      	pop	{r3}
 8004eec:	469e      	mov	lr, r3
 8004eee:	4770      	bx	lr

08004ef0 <_fini>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	bf00      	nop
 8004ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef6:	bc08      	pop	{r3}
 8004ef8:	469e      	mov	lr, r3
 8004efa:	4770      	bx	lr
