
jason_fork_lift_fan_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004788  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004910  08004910  00005910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004928  08004928  00006084  2**0
                  CONTENTS
  4 .ARM          00000008  08004928  08004928  00005928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004930  08004930  00006084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004930  08004930  00005930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004934  08004934  00005934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08004938  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006084  2**0
                  CONTENTS
 10 .bss          00000260  20000084  20000084  00006084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002e4  200002e4  00006084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d806  00000000  00000000  000060b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002016  00000000  00000000  000138ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  000158d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b8  00000000  00000000  00016548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002345  00000000  00000000  00016f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f5f0  00000000  00000000  00019245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc5bf  00000000  00000000  00028835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f4df4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034ac  00000000  00000000  000f4e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  000f82e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080048f8 	.word	0x080048f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	080048f8 	.word	0x080048f8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	0000      	movs	r0, r0
	...

08000d48 <update_encoder>:
  encoder->displacement = 0;
  encoder->velocity = 0;
  encoder->last_counter_value = 0;
}

void update_encoder(EncoderData* encoder) {
 8000d48:	b5b0      	push	{r4, r5, r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  int current_counter = __HAL_TIM_GET_COUNTER(encoder->htim);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d58:	613b      	str	r3, [r7, #16]
  uint32_t duration = HAL_GetTick() - encoder->last_tick;
 8000d5a:	f001 fa1f 	bl	800219c <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	60fb      	str	r3, [r7, #12]
  int num_pulse = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  if (duration <= 1)  // delay for encode to update, in ms
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	f240 8095 	bls.w	8000e9e <update_encoder+0x156>
    return;

  if (current_counter == encoder->last_counter_value) {
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d102      	bne.n	8000d84 <update_encoder+0x3c>
    num_pulse = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	e035      	b.n	8000df0 <update_encoder+0xa8>
  } else if (current_counter > encoder->last_counter_value) {
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	dd18      	ble.n	8000dc0 <update_encoder+0x78>
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move backward, count down, overflow
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	2b10      	cmp	r3, #16
 8000d9c:	d10a      	bne.n	8000db4 <update_encoder+0x6c>
      num_pulse = (__HAL_TIM_GET_AUTORELOAD(encoder->htim) - current_counter + encoder->last_counter_value) * -1;
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	6892      	ldr	r2, [r2, #8]
 8000dae:	1a9b      	subs	r3, r3, r2
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	e01d      	b.n	8000df0 <update_encoder+0xa8>
    } else {  // move forward, count up, no overflow
      num_pulse = current_counter - encoder->last_counter_value;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	e017      	b.n	8000df0 <update_encoder+0xa8>
    }
  } else {
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move up, count up, overflow
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	691b      	ldr	r3, [r3, #16]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 0310 	and.w	r3, r3, #16
 8000dcc:	2b10      	cmp	r3, #16
 8000dce:	d105      	bne.n	8000ddc <update_encoder+0x94>
      num_pulse = (encoder->last_counter_value - current_counter) * -1;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	e009      	b.n	8000df0 <update_encoder+0xa8>
    } else {  // move backward, count down, no overflow
      num_pulse = __HAL_TIM_GET_AUTORELOAD(encoder->htim) - encoder->last_counter_value + current_counter;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	6892      	ldr	r2, [r2, #8]
 8000de8:	1a9a      	subs	r2, r3, r2
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4413      	add	r3, r2
 8000dee:	617b      	str	r3, [r7, #20]
    }
  }

  float temp_displacement = (float)num_pulse / encoder->_ppr * 2.0 * M_PI;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	ee07 3a90 	vmov	s15, r3
 8000df6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	8a9b      	ldrh	r3, [r3, #20]
 8000dfe:	ee07 3a90 	vmov	s15, r3
 8000e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e06:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e0a:	ee16 0a90 	vmov	r0, s13
 8000e0e:	f7ff fb3f 	bl	8000490 <__aeabi_f2d>
 8000e12:	4602      	mov	r2, r0
 8000e14:	460b      	mov	r3, r1
 8000e16:	f7ff f9dd 	bl	80001d4 <__adddf3>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	4610      	mov	r0, r2
 8000e20:	4619      	mov	r1, r3
 8000e22:	a322      	add	r3, pc, #136	@ (adr r3, 8000eac <update_encoder+0x164>)
 8000e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e28:	f7ff fb8a 	bl	8000540 <__aeabi_dmul>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4610      	mov	r0, r2
 8000e32:	4619      	mov	r1, r3
 8000e34:	f7ff fdbe 	bl	80009b4 <__aeabi_d2f>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60bb      	str	r3, [r7, #8]
  encoder->last_counter_value = current_counter;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	609a      	str	r2, [r3, #8]
  encoder->displacement += temp_displacement;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	ed93 7a00 	vldr	s14, [r3]
 8000e48:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	edc3 7a00 	vstr	s15, [r3]
  encoder->velocity = temp_displacement * 1000.0 / duration;
 8000e56:	68b8      	ldr	r0, [r7, #8]
 8000e58:	f7ff fb1a 	bl	8000490 <__aeabi_f2d>
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <update_encoder+0x160>)
 8000e62:	f7ff fb6d 	bl	8000540 <__aeabi_dmul>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4614      	mov	r4, r2
 8000e6c:	461d      	mov	r5, r3
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f7ff faec 	bl	800044c <__aeabi_ui2d>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	4620      	mov	r0, r4
 8000e7a:	4629      	mov	r1, r5
 8000e7c:	f7ff fc8a 	bl	8000794 <__aeabi_ddiv>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f7ff fd94 	bl	80009b4 <__aeabi_d2f>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	605a      	str	r2, [r3, #4]
  encoder->last_tick = HAL_GetTick();
 8000e92:	f001 f983 	bl	800219c <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	e000      	b.n	8000ea0 <update_encoder+0x158>
    return;
 8000e9e:	bf00      	nop
}
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	408f4000 	.word	0x408f4000
 8000eac:	54442d18 	.word	0x54442d18
 8000eb0:	400921fb 	.word	0x400921fb

08000eb4 <read_current_velocity>:

WheelVelocity read_current_velocity(EncoderData* encoders) {
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b095      	sub	sp, #84	@ 0x54
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6178      	str	r0, [r7, #20]
  if (encoders == NULL)
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d107      	bne.n	8000ed2 <read_current_velocity+0x1e>
    return (WheelVelocity){0, 0, 0, 0};
 8000ec2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	e030      	b.n	8000f34 <read_current_velocity+0x80>

  WheelVelocity velocities = {.front_left = 0, .front_right = 0, .rear_left = 0, .rear_right = 0};
 8000ed2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000ee4:	e00d      	b.n	8000f02 <read_current_velocity+0x4e>
    update_encoder(&(encoders[i]));
 8000ee6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000ee8:	4613      	mov	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4413      	add	r3, r2
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff26 	bl	8000d48 <update_encoder>
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 8000efc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000efe:	3301      	adds	r3, #1
 8000f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000f02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	ddee      	ble.n	8000ee6 <read_current_velocity+0x32>

  velocities.front_left = encoders[FRONT_LEFT].velocity;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  velocities.front_right = encoders[FRONT_RIGHT].velocity;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3318      	adds	r3, #24
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	633b      	str	r3, [r7, #48]	@ 0x30
  velocities.rear_left = encoders[REAR_LEFT].velocity;
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3330      	adds	r3, #48	@ 0x30
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	637b      	str	r3, [r7, #52]	@ 0x34
  velocities.rear_right = encoders[REAR_RIGHT].velocity;
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3348      	adds	r3, #72	@ 0x48
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	63bb      	str	r3, [r7, #56]	@ 0x38

  return velocities;
 8000f26:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000f2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f34:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000f36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000f38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f3c:	ee06 0a10 	vmov	s12, r0
 8000f40:	ee06 1a90 	vmov	s13, r1
 8000f44:	ee07 2a10 	vmov	s14, r2
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eeb0 0a46 	vmov.f32	s0, s12
 8000f50:	eef0 0a66 	vmov.f32	s1, s13
 8000f54:	eeb0 1a47 	vmov.f32	s2, s14
 8000f58:	eef0 1a67 	vmov.f32	s3, s15
 8000f5c:	3754      	adds	r7, #84	@ 0x54
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd90      	pop	{r4, r7, pc}
	...

08000f64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08c      	sub	sp, #48	@ 0x30
 8000f68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
 8000f7e:	4b59      	ldr	r3, [pc, #356]	@ (80010e4 <MX_GPIO_Init+0x180>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a58      	ldr	r2, [pc, #352]	@ (80010e4 <MX_GPIO_Init+0x180>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b56      	ldr	r3, [pc, #344]	@ (80010e4 <MX_GPIO_Init+0x180>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	61bb      	str	r3, [r7, #24]
 8000f94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	4b52      	ldr	r3, [pc, #328]	@ (80010e4 <MX_GPIO_Init+0x180>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a51      	ldr	r2, [pc, #324]	@ (80010e4 <MX_GPIO_Init+0x180>)
 8000fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b4f      	ldr	r3, [pc, #316]	@ (80010e4 <MX_GPIO_Init+0x180>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	4b4b      	ldr	r3, [pc, #300]	@ (80010e4 <MX_GPIO_Init+0x180>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a4a      	ldr	r2, [pc, #296]	@ (80010e4 <MX_GPIO_Init+0x180>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b48      	ldr	r3, [pc, #288]	@ (80010e4 <MX_GPIO_Init+0x180>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b44      	ldr	r3, [pc, #272]	@ (80010e4 <MX_GPIO_Init+0x180>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a43      	ldr	r2, [pc, #268]	@ (80010e4 <MX_GPIO_Init+0x180>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b41      	ldr	r3, [pc, #260]	@ (80010e4 <MX_GPIO_Init+0x180>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	4b3d      	ldr	r3, [pc, #244]	@ (80010e4 <MX_GPIO_Init+0x180>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a3c      	ldr	r2, [pc, #240]	@ (80010e4 <MX_GPIO_Init+0x180>)
 8000ff4:	f043 0320 	orr.w	r3, r3, #32
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b3a      	ldr	r3, [pc, #232]	@ (80010e4 <MX_GPIO_Init+0x180>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f003 0320 	and.w	r3, r3, #32
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	4b36      	ldr	r3, [pc, #216]	@ (80010e4 <MX_GPIO_Init+0x180>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	4a35      	ldr	r2, [pc, #212]	@ (80010e4 <MX_GPIO_Init+0x180>)
 8001010:	f043 0310 	orr.w	r3, r3, #16
 8001014:	6313      	str	r3, [r2, #48]	@ 0x30
 8001016:	4b33      	ldr	r3, [pc, #204]	@ (80010e4 <MX_GPIO_Init+0x180>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
 8001026:	4b2f      	ldr	r3, [pc, #188]	@ (80010e4 <MX_GPIO_Init+0x180>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a2e      	ldr	r2, [pc, #184]	@ (80010e4 <MX_GPIO_Init+0x180>)
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b2c      	ldr	r3, [pc, #176]	@ (80010e4 <MX_GPIO_Init+0x180>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, C_IN1_Pin|C_IN2_Pin|D_IN1_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	21d0      	movs	r1, #208	@ 0xd0
 8001042:	4829      	ldr	r0, [pc, #164]	@ (80010e8 <MX_GPIO_Init+0x184>)
 8001044:	f001 fb5c 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D_IN2_Pin|A_IN1_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2130      	movs	r1, #48	@ 0x30
 800104c:	4827      	ldr	r0, [pc, #156]	@ (80010ec <MX_GPIO_Init+0x188>)
 800104e:	f001 fb57 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_IN2_Pin|B_IN1_Pin|B_IN2_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2107      	movs	r1, #7
 8001056:	4826      	ldr	r0, [pc, #152]	@ (80010f0 <MX_GPIO_Init+0x18c>)
 8001058:	f001 fb52 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8001062:	4824      	ldr	r0, [pc, #144]	@ (80010f4 <MX_GPIO_Init+0x190>)
 8001064:	f001 fb4c 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C_IN1_Pin C_IN2_Pin D_IN1_Pin */
  GPIO_InitStruct.Pin = C_IN1_Pin|C_IN2_Pin|D_IN1_Pin;
 8001068:	23d0      	movs	r3, #208	@ 0xd0
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	4619      	mov	r1, r3
 800107e:	481a      	ldr	r0, [pc, #104]	@ (80010e8 <MX_GPIO_Init+0x184>)
 8001080:	f001 f9a2 	bl	80023c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_IN2_Pin A_IN1_Pin */
  GPIO_InitStruct.Pin = D_IN2_Pin|A_IN1_Pin;
 8001084:	2330      	movs	r3, #48	@ 0x30
 8001086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	4619      	mov	r1, r3
 800109a:	4814      	ldr	r0, [pc, #80]	@ (80010ec <MX_GPIO_Init+0x188>)
 800109c:	f001 f994 	bl	80023c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_IN2_Pin B_IN1_Pin B_IN2_Pin */
  GPIO_InitStruct.Pin = A_IN2_Pin|B_IN1_Pin|B_IN2_Pin;
 80010a0:	2307      	movs	r3, #7
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	480e      	ldr	r0, [pc, #56]	@ (80010f0 <MX_GPIO_Init+0x18c>)
 80010b8:	f001 f986 	bl	80023c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 80010bc:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	4807      	ldr	r0, [pc, #28]	@ (80010f4 <MX_GPIO_Init+0x190>)
 80010d6:	f001 f977 	bl	80023c8 <HAL_GPIO_Init>

}
 80010da:	bf00      	nop
 80010dc:	3730      	adds	r7, #48	@ 0x30
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020400 	.word	0x40020400
 80010f4:	40021400 	.word	0x40021400

080010f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fc:	f000 ffe8 	bl	80020d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001100:	f000 f87e 	bl	8001200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001104:	f7ff ff2e 	bl	8000f64 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001108:	f000 fae0 	bl	80016cc <MX_TIM1_Init>
  MX_TIM2_Init();
 800110c:	f000 fb36 	bl	800177c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001110:	f000 fbca 	bl	80018a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001114:	f000 fc3e 	bl	8001994 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001118:	f000 fc90 	bl	8001a3c <MX_TIM5_Init>
  MX_TIM8_Init();
 800111c:	f000 fce2 	bl	8001ae4 <MX_TIM8_Init>
  MX_UART4_Init();
 8001120:	f000 fed8 	bl	8001ed4 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001124:	f000 ff00 	bl	8001f28 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001128:	2100      	movs	r1, #0
 800112a:	482c      	ldr	r0, [pc, #176]	@ (80011dc <main+0xe4>)
 800112c:	f002 f874 	bl	8003218 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001130:	2104      	movs	r1, #4
 8001132:	482a      	ldr	r0, [pc, #168]	@ (80011dc <main+0xe4>)
 8001134:	f002 f870 	bl	8003218 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001138:	2108      	movs	r1, #8
 800113a:	4828      	ldr	r0, [pc, #160]	@ (80011dc <main+0xe4>)
 800113c:	f002 f86c 	bl	8003218 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001140:	210c      	movs	r1, #12
 8001142:	4826      	ldr	r0, [pc, #152]	@ (80011dc <main+0xe4>)
 8001144:	f002 f868 	bl	8003218 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001148:	2100      	movs	r1, #0
 800114a:	4825      	ldr	r0, [pc, #148]	@ (80011e0 <main+0xe8>)
 800114c:	f002 f864 	bl	8003218 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8001150:	4824      	ldr	r0, [pc, #144]	@ (80011e4 <main+0xec>)
 8001152:	f001 ff97 	bl	8003084 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001156:	213c      	movs	r1, #60	@ 0x3c
 8001158:	4822      	ldr	r0, [pc, #136]	@ (80011e4 <main+0xec>)
 800115a:	f002 f9cb 	bl	80034f4 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800115e:	4822      	ldr	r0, [pc, #136]	@ (80011e8 <main+0xf0>)
 8001160:	f001 ff90 	bl	8003084 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001164:	213c      	movs	r1, #60	@ 0x3c
 8001166:	4820      	ldr	r0, [pc, #128]	@ (80011e8 <main+0xf0>)
 8001168:	f002 f9c4 	bl	80034f4 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800116c:	481f      	ldr	r0, [pc, #124]	@ (80011ec <main+0xf4>)
 800116e:	f001 ff89 	bl	8003084 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8001172:	213c      	movs	r1, #60	@ 0x3c
 8001174:	481d      	ldr	r0, [pc, #116]	@ (80011ec <main+0xf4>)
 8001176:	f002 f9bd 	bl	80034f4 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 800117a:	481d      	ldr	r0, [pc, #116]	@ (80011f0 <main+0xf8>)
 800117c:	f001 ff82 	bl	8003084 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8001180:	213c      	movs	r1, #60	@ 0x3c
 8001182:	481b      	ldr	r0, [pc, #108]	@ (80011f0 <main+0xf8>)
 8001184:	f002 f9b6 	bl	80034f4 <HAL_TIM_Encoder_Start_IT>

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800118e:	4819      	ldr	r0, [pc, #100]	@ (80011f4 <main+0xfc>)
 8001190:	f001 fab6 	bl	8002700 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800119a:	4816      	ldr	r0, [pc, #88]	@ (80011f4 <main+0xfc>)
 800119c:	f001 fab0 	bl	8002700 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011a6:	4813      	ldr	r0, [pc, #76]	@ (80011f4 <main+0xfc>)
 80011a8:	f001 faaa 	bl	8002700 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011b2:	4810      	ldr	r0, [pc, #64]	@ (80011f4 <main+0xfc>)
 80011b4:	f001 faa4 	bl	8002700 <HAL_GPIO_WritePin>

  servo_reset_all();
 80011b8:	f000 f9fc 	bl	80015b4 <servo_reset_all>
  HAL_Delay(1000);
 80011bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011c0:	f000 fff8 	bl	80021b4 <HAL_Delay>

  TIM3->CCR1 = 1500;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <main+0x100>)
 80011c6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80011ca:	635a      	str	r2, [r3, #52]	@ 0x34
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 80011cc:	2001      	movs	r0, #1
 80011ce:	f000 fff1 	bl	80021b4 <HAL_Delay>
    read_current_velocity(encoders);
 80011d2:	480a      	ldr	r0, [pc, #40]	@ (80011fc <main+0x104>)
 80011d4:	f7ff fe6e 	bl	8000eb4 <read_current_velocity>
    HAL_Delay(1);
 80011d8:	bf00      	nop
 80011da:	e7f7      	b.n	80011cc <main+0xd4>
 80011dc:	200000e8 	.word	0x200000e8
 80011e0:	20000130 	.word	0x20000130
 80011e4:	200000a0 	.word	0x200000a0
 80011e8:	20000178 	.word	0x20000178
 80011ec:	200001c0 	.word	0x200001c0
 80011f0:	20000208 	.word	0x20000208
 80011f4:	40021400 	.word	0x40021400
 80011f8:	40000400 	.word	0x40000400
 80011fc:	20000000 	.word	0x20000000

08001200 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b094      	sub	sp, #80	@ 0x50
 8001204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001206:	f107 0320 	add.w	r3, r7, #32
 800120a:	2230      	movs	r2, #48	@ 0x30
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f003 fb46 	bl	80048a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	4b28      	ldr	r3, [pc, #160]	@ (80012cc <SystemClock_Config+0xcc>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122c:	4a27      	ldr	r2, [pc, #156]	@ (80012cc <SystemClock_Config+0xcc>)
 800122e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001232:	6413      	str	r3, [r2, #64]	@ 0x40
 8001234:	4b25      	ldr	r3, [pc, #148]	@ (80012cc <SystemClock_Config+0xcc>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	4b22      	ldr	r3, [pc, #136]	@ (80012d0 <SystemClock_Config+0xd0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a21      	ldr	r2, [pc, #132]	@ (80012d0 <SystemClock_Config+0xd0>)
 800124a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <SystemClock_Config+0xd0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800125c:	2301      	movs	r3, #1
 800125e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001260:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001266:	2302      	movs	r3, #2
 8001268:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800126a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800126e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001270:	2319      	movs	r3, #25
 8001272:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001274:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001278:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800127a:	2302      	movs	r3, #2
 800127c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800127e:	2304      	movs	r3, #4
 8001280:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	4618      	mov	r0, r3
 8001288:	f001 fa54 	bl	8002734 <HAL_RCC_OscConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x96>
    Error_Handler();
 8001292:	f000 f81f 	bl	80012d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001296:	230f      	movs	r3, #15
 8001298:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129a:	2302      	movs	r3, #2
 800129c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012a2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80012a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	2105      	movs	r1, #5
 80012b4:	4618      	mov	r0, r3
 80012b6:	f001 fcb5 	bl	8002c24 <HAL_RCC_ClockConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0xc4>
    Error_Handler();
 80012c0:	f000 f808 	bl	80012d4 <Error_Handler>
  }
}
 80012c4:	bf00      	nop
 80012c6:	3750      	adds	r7, #80	@ 0x50
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40007000 	.word	0x40007000

080012d4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d8:	b672      	cpsid	i
}
 80012da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <Error_Handler+0x8>

080012e0 <servo_move>:
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
  HAL_UART_Receive(&huart4, receive_buffer, sizeof(receive_buffer), 0xFFFF);
  target_servo->current_pos = (receive_buffer[8] << 8) + receive_buffer[7];
}

void servo_move(HTD45H_Servo* target_servo, uint16_t target_pos, uint16_t time) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
 80012ec:	4613      	mov	r3, r2
 80012ee:	803b      	strh	r3, [r7, #0]
  uint8_t send_buffer[10];
  send_buffer[0] = send_buffer[1] = FRAME_HEADER;
 80012f0:	2355      	movs	r3, #85	@ 0x55
 80012f2:	737b      	strb	r3, [r7, #13]
 80012f4:	7b7b      	ldrb	r3, [r7, #13]
 80012f6:	733b      	strb	r3, [r7, #12]
  send_buffer[2] = 0x01 * 3 + 5;
 80012f8:	2308      	movs	r3, #8
 80012fa:	73bb      	strb	r3, [r7, #14]
  send_buffer[3] = CMD_SERVO_MOVE;
 80012fc:	2303      	movs	r3, #3
 80012fe:	73fb      	strb	r3, [r7, #15]
  send_buffer[4] = 0x01;
 8001300:	2301      	movs	r3, #1
 8001302:	743b      	strb	r3, [r7, #16]
  send_buffer[5] = GET_LOW_BYTE(time);
 8001304:	883b      	ldrh	r3, [r7, #0]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	747b      	strb	r3, [r7, #17]
  send_buffer[6] = GET_HIGH_BYTE(time);
 800130a:	883b      	ldrh	r3, [r7, #0]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	b29b      	uxth	r3, r3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	74bb      	strb	r3, [r7, #18]
  send_buffer[7] = target_servo->servo_id;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	74fb      	strb	r3, [r7, #19]
  send_buffer[8] = GET_LOW_BYTE(target_pos);
 800131a:	887b      	ldrh	r3, [r7, #2]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	753b      	strb	r3, [r7, #20]
  send_buffer[9] = GET_HIGH_BYTE(target_pos);
 8001320:	887b      	ldrh	r3, [r7, #2]
 8001322:	0a1b      	lsrs	r3, r3, #8
 8001324:	b29b      	uxth	r3, r3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	757b      	strb	r3, [r7, #21]
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
 800132a:	f107 010c 	add.w	r1, r7, #12
 800132e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001332:	220a      	movs	r2, #10
 8001334:	489a      	ldr	r0, [pc, #616]	@ (80015a0 <servo_move+0x2c0>)
 8001336:	f002 fef7 	bl	8004128 <HAL_UART_Transmit>
  target_servo->current_pos = target_pos;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	887a      	ldrh	r2, [r7, #2]
 800133e:	805a      	strh	r2, [r3, #2]

  switch (target_servo->servo_id) {
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	3b01      	subs	r3, #1
 8001346:	2b03      	cmp	r3, #3
 8001348:	f200 810c 	bhi.w	8001564 <servo_move+0x284>
 800134c:	a201      	add	r2, pc, #4	@ (adr r2, 8001354 <servo_move+0x74>)
 800134e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001352:	bf00      	nop
 8001354:	08001365 	.word	0x08001365
 8001358:	080013e5 	.word	0x080013e5
 800135c:	08001465 	.word	0x08001465
 8001360:	080014e5 	.word	0x080014e5
    case 1:
      target_servo->current_degree = SERVO_ID1_POS_TO_ANGLE(target_pos);
 8001364:	887b      	ldrh	r3, [r7, #2]
 8001366:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800136a:	d91c      	bls.n	80013a6 <servo_move+0xc6>
 800136c:	887b      	ldrh	r3, [r7, #2]
 800136e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f87a 	bl	800046c <__aeabi_i2d>
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	4b89      	ldr	r3, [pc, #548]	@ (80015a4 <servo_move+0x2c4>)
 800137e:	f7ff f8df 	bl	8000540 <__aeabi_dmul>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	a379      	add	r3, pc, #484	@ (adr r3, 8001570 <servo_move+0x290>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7ff fa00 	bl	8000794 <__aeabi_ddiv>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	f7ff fae2 	bl	8000964 <__aeabi_d2iz>
 80013a0:	4603      	mov	r3, r0
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	e01b      	b.n	80013de <servo_move+0xfe>
 80013a6:	887b      	ldrh	r3, [r7, #2]
 80013a8:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f85d 	bl	800046c <__aeabi_i2d>
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	4b7c      	ldr	r3, [pc, #496]	@ (80015a8 <servo_move+0x2c8>)
 80013b8:	f7ff f8c2 	bl	8000540 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	a36c      	add	r3, pc, #432	@ (adr r3, 8001578 <servo_move+0x298>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7ff f9e3 	bl	8000794 <__aeabi_ddiv>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff fac5 	bl	8000964 <__aeabi_d2iz>
 80013da:	4603      	mov	r3, r0
 80013dc:	b21b      	sxth	r3, r3
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	8093      	strh	r3, [r2, #4]
      break;
 80013e2:	e0c0      	b.n	8001566 <servo_move+0x286>
    case 2:
      target_servo->current_degree = SERVO_ID2_POS_TO_ANGLE(target_pos);
 80013e4:	887b      	ldrh	r3, [r7, #2]
 80013e6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013ea:	d91c      	bls.n	8001426 <servo_move+0x146>
 80013ec:	887b      	ldrh	r3, [r7, #2]
 80013ee:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f83a 	bl	800046c <__aeabi_i2d>
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	4b69      	ldr	r3, [pc, #420]	@ (80015a4 <servo_move+0x2c4>)
 80013fe:	f7ff f89f 	bl	8000540 <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	4b67      	ldr	r3, [pc, #412]	@ (80015ac <servo_move+0x2cc>)
 8001410:	f7ff f9c0 	bl	8000794 <__aeabi_ddiv>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4610      	mov	r0, r2
 800141a:	4619      	mov	r1, r3
 800141c:	f7ff faa2 	bl	8000964 <__aeabi_d2iz>
 8001420:	4603      	mov	r3, r0
 8001422:	b21b      	sxth	r3, r3
 8001424:	e01b      	b.n	800145e <servo_move+0x17e>
 8001426:	887b      	ldrh	r3, [r7, #2]
 8001428:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f81d 	bl	800046c <__aeabi_i2d>
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4b5c      	ldr	r3, [pc, #368]	@ (80015a8 <servo_move+0x2c8>)
 8001438:	f7ff f882 	bl	8000540 <__aeabi_dmul>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	a34e      	add	r3, pc, #312	@ (adr r3, 8001580 <servo_move+0x2a0>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f9a3 	bl	8000794 <__aeabi_ddiv>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff fa85 	bl	8000964 <__aeabi_d2iz>
 800145a:	4603      	mov	r3, r0
 800145c:	b21b      	sxth	r3, r3
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	8093      	strh	r3, [r2, #4]
      break;
 8001462:	e080      	b.n	8001566 <servo_move+0x286>
    case 3:
      target_servo->current_degree = SERVO_ID3_POS_TO_ANGLE(target_pos);
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800146a:	d91c      	bls.n	80014a6 <servo_move+0x1c6>
 800146c:	887b      	ldrh	r3, [r7, #2]
 800146e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001472:	4618      	mov	r0, r3
 8001474:	f7fe fffa 	bl	800046c <__aeabi_i2d>
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	4b49      	ldr	r3, [pc, #292]	@ (80015a4 <servo_move+0x2c4>)
 800147e:	f7ff f85f 	bl	8000540 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	a33f      	add	r3, pc, #252	@ (adr r3, 8001588 <servo_move+0x2a8>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	f7ff f980 	bl	8000794 <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f7ff fa62 	bl	8000964 <__aeabi_d2iz>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	e01b      	b.n	80014de <servo_move+0x1fe>
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7fe ffdd 	bl	800046c <__aeabi_i2d>
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	4b3c      	ldr	r3, [pc, #240]	@ (80015a8 <servo_move+0x2c8>)
 80014b8:	f7ff f842 	bl	8000540 <__aeabi_dmul>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	a332      	add	r3, pc, #200	@ (adr r3, 8001590 <servo_move+0x2b0>)
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	f7ff f963 	bl	8000794 <__aeabi_ddiv>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f7ff fa45 	bl	8000964 <__aeabi_d2iz>
 80014da:	4603      	mov	r3, r0
 80014dc:	b21b      	sxth	r3, r3
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	8093      	strh	r3, [r2, #4]
      break;
 80014e2:	e040      	b.n	8001566 <servo_move+0x286>
    case 4:
      target_servo->current_degree = SERVO_ID4_POS_TO_ANGLE(target_pos);
 80014e4:	887b      	ldrh	r3, [r7, #2]
 80014e6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014ea:	d91c      	bls.n	8001526 <servo_move+0x246>
 80014ec:	887b      	ldrh	r3, [r7, #2]
 80014ee:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7fe ffba 	bl	800046c <__aeabi_i2d>
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	4b29      	ldr	r3, [pc, #164]	@ (80015a4 <servo_move+0x2c4>)
 80014fe:	f7ff f81f 	bl	8000540 <__aeabi_dmul>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	4b28      	ldr	r3, [pc, #160]	@ (80015b0 <servo_move+0x2d0>)
 8001510:	f7ff f940 	bl	8000794 <__aeabi_ddiv>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	f7ff fa22 	bl	8000964 <__aeabi_d2iz>
 8001520:	4603      	mov	r3, r0
 8001522:	b21b      	sxth	r3, r3
 8001524:	e01b      	b.n	800155e <servo_move+0x27e>
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ff9d 	bl	800046c <__aeabi_i2d>
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <servo_move+0x2c8>)
 8001538:	f7ff f802 	bl	8000540 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	a314      	add	r3, pc, #80	@ (adr r3, 8001598 <servo_move+0x2b8>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	f7ff f923 	bl	8000794 <__aeabi_ddiv>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f7ff fa05 	bl	8000964 <__aeabi_d2iz>
 800155a:	4603      	mov	r3, r0
 800155c:	b21b      	sxth	r3, r3
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	8093      	strh	r3, [r2, #4]
      break;
 8001562:	e000      	b.n	8001566 <servo_move+0x286>
    default:
      break;
 8001564:	bf00      	nop
  }
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	00000000 	.word	0x00000000
 8001574:	40781000 	.word	0x40781000
 8001578:	00000000 	.word	0x00000000
 800157c:	c076d000 	.word	0xc076d000
 8001580:	00000000 	.word	0x00000000
 8001584:	c0777000 	.word	0xc0777000
 8001588:	00000000 	.word	0x00000000
 800158c:	40777000 	.word	0x40777000
 8001590:	00000000 	.word	0x00000000
 8001594:	c0772000 	.word	0xc0772000
 8001598:	00000000 	.word	0x00000000
 800159c:	c0775000 	.word	0xc0775000
 80015a0:	20000250 	.word	0x20000250
 80015a4:	40568000 	.word	0x40568000
 80015a8:	c0568000 	.word	0xc0568000
 80015ac:	40774000 	.word	0x40774000
 80015b0:	40778000 	.word	0x40778000

080015b4 <servo_reset_all>:
uint16_t servo_get_current_pos(HTD45H_Servo* target_servo) {
  servo_update_current_pos(target_servo);
  return target_servo->current_pos;
}

void servo_reset_all(void) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
  for (int i = 0; i < 4; i++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	e010      	b.n	80015e2 <servo_reset_all+0x2e>
    servo_move(&(servos[i]), INITIAL_POS, 500);
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4a0a      	ldr	r2, [pc, #40]	@ (80015f4 <servo_reset_all+0x40>)
 80015cc:	4413      	add	r3, r2
 80015ce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80015d2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fe82 	bl	80012e0 <servo_move>
  for (int i = 0; i < 4; i++)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3301      	adds	r3, #1
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	ddeb      	ble.n	80015c0 <servo_reset_all+0xc>
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000060 	.word	0x20000060

080015f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <HAL_MspInit+0x4c>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001606:	4a0f      	ldr	r2, [pc, #60]	@ (8001644 <HAL_MspInit+0x4c>)
 8001608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800160c:	6453      	str	r3, [r2, #68]	@ 0x44
 800160e:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <HAL_MspInit+0x4c>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <HAL_MspInit+0x4c>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	4a08      	ldr	r2, [pc, #32]	@ (8001644 <HAL_MspInit+0x4c>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001628:	6413      	str	r3, [r2, #64]	@ 0x40
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_MspInit+0x4c>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800

08001648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <NMI_Handler+0x4>

08001650 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <HardFault_Handler+0x4>

08001658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <MemManage_Handler+0x4>

08001660 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <UsageFault_Handler+0x4>

08001670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169e:	f000 fd69 	bl	8002174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <SystemInit+0x20>)
 80016ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016b2:	4a05      	ldr	r2, [pc, #20]	@ (80016c8 <SystemInit+0x20>)
 80016b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	@ 0x30
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	2224      	movs	r2, #36	@ 0x24
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f003 f8e0 	bl	80048a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016e8:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <MX_TIM1_Init+0xa8>)
 80016ea:	4a23      	ldr	r2, [pc, #140]	@ (8001778 <MX_TIM1_Init+0xac>)
 80016ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016ee:	4b21      	ldr	r3, [pc, #132]	@ (8001774 <MX_TIM1_Init+0xa8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <MX_TIM1_Init+0xa8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001774 <MX_TIM1_Init+0xa8>)
 80016fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001700:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001702:	4b1c      	ldr	r3, [pc, #112]	@ (8001774 <MX_TIM1_Init+0xa8>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001708:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <MX_TIM1_Init+0xa8>)
 800170a:	2200      	movs	r2, #0
 800170c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800170e:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <MX_TIM1_Init+0xa8>)
 8001710:	2280      	movs	r2, #128	@ 0x80
 8001712:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001714:	2303      	movs	r3, #3
 8001716:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001718:	2300      	movs	r3, #0
 800171a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800171c:	2301      	movs	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8001724:	2305      	movs	r3, #5
 8001726:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800172c:	2301      	movs	r3, #1
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	4619      	mov	r1, r3
 800173e:	480d      	ldr	r0, [pc, #52]	@ (8001774 <MX_TIM1_Init+0xa8>)
 8001740:	f001 fe32 	bl	80033a8 <HAL_TIM_Encoder_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800174a:	f7ff fdc3 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4806      	ldr	r0, [pc, #24]	@ (8001774 <MX_TIM1_Init+0xa8>)
 800175c:	f002 fc18 	bl	8003f90 <HAL_TIMEx_MasterConfigSynchronization>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001766:	f7ff fdb5 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	3730      	adds	r7, #48	@ 0x30
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200000a0 	.word	0x200000a0
 8001778:	40010000 	.word	0x40010000

0800177c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	@ 0x38
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001782:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001790:	f107 0320 	add.w	r3, r7, #32
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
 80017a8:	615a      	str	r2, [r3, #20]
 80017aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017ac:	4b3d      	ldr	r3, [pc, #244]	@ (80018a4 <MX_TIM2_Init+0x128>)
 80017ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 80017b4:	4b3b      	ldr	r3, [pc, #236]	@ (80018a4 <MX_TIM2_Init+0x128>)
 80017b6:	2229      	movs	r2, #41	@ 0x29
 80017b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b3a      	ldr	r3, [pc, #232]	@ (80018a4 <MX_TIM2_Init+0x128>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80017c0:	4b38      	ldr	r3, [pc, #224]	@ (80018a4 <MX_TIM2_Init+0x128>)
 80017c2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80017c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c8:	4b36      	ldr	r3, [pc, #216]	@ (80018a4 <MX_TIM2_Init+0x128>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ce:	4b35      	ldr	r3, [pc, #212]	@ (80018a4 <MX_TIM2_Init+0x128>)
 80017d0:	2280      	movs	r2, #128	@ 0x80
 80017d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017d4:	4833      	ldr	r0, [pc, #204]	@ (80018a4 <MX_TIM2_Init+0x128>)
 80017d6:	f001 fc05 	bl	8002fe4 <HAL_TIM_Base_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80017e0:	f7ff fd78 	bl	80012d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ee:	4619      	mov	r1, r3
 80017f0:	482c      	ldr	r0, [pc, #176]	@ (80018a4 <MX_TIM2_Init+0x128>)
 80017f2:	f001 ffef 	bl	80037d4 <HAL_TIM_ConfigClockSource>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80017fc:	f7ff fd6a 	bl	80012d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001800:	4828      	ldr	r0, [pc, #160]	@ (80018a4 <MX_TIM2_Init+0x128>)
 8001802:	f001 fcaf 	bl	8003164 <HAL_TIM_PWM_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800180c:	f7ff fd62 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001818:	f107 0320 	add.w	r3, r7, #32
 800181c:	4619      	mov	r1, r3
 800181e:	4821      	ldr	r0, [pc, #132]	@ (80018a4 <MX_TIM2_Init+0x128>)
 8001820:	f002 fbb6 	bl	8003f90 <HAL_TIMEx_MasterConfigSynchronization>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800182a:	f7ff fd53 	bl	80012d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182e:	2360      	movs	r3, #96	@ 0x60
 8001830:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	2200      	movs	r2, #0
 8001842:	4619      	mov	r1, r3
 8001844:	4817      	ldr	r0, [pc, #92]	@ (80018a4 <MX_TIM2_Init+0x128>)
 8001846:	f001 ff03 	bl	8003650 <HAL_TIM_PWM_ConfigChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001850:	f7ff fd40 	bl	80012d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	2204      	movs	r2, #4
 8001858:	4619      	mov	r1, r3
 800185a:	4812      	ldr	r0, [pc, #72]	@ (80018a4 <MX_TIM2_Init+0x128>)
 800185c:	f001 fef8 	bl	8003650 <HAL_TIM_PWM_ConfigChannel>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001866:	f7ff fd35 	bl	80012d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2208      	movs	r2, #8
 800186e:	4619      	mov	r1, r3
 8001870:	480c      	ldr	r0, [pc, #48]	@ (80018a4 <MX_TIM2_Init+0x128>)
 8001872:	f001 feed 	bl	8003650 <HAL_TIM_PWM_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800187c:	f7ff fd2a 	bl	80012d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	220c      	movs	r2, #12
 8001884:	4619      	mov	r1, r3
 8001886:	4807      	ldr	r0, [pc, #28]	@ (80018a4 <MX_TIM2_Init+0x128>)
 8001888:	f001 fee2 	bl	8003650 <HAL_TIM_PWM_ConfigChannel>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001892:	f7ff fd1f 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001896:	4803      	ldr	r0, [pc, #12]	@ (80018a4 <MX_TIM2_Init+0x128>)
 8001898:	f000 fa9e 	bl	8001dd8 <HAL_TIM_MspPostInit>

}
 800189c:	bf00      	nop
 800189e:	3738      	adds	r7, #56	@ 0x38
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200000e8 	.word	0x200000e8

080018a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08e      	sub	sp, #56	@ 0x38
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018bc:	f107 0320 	add.w	r3, r7, #32
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
 80018d4:	615a      	str	r2, [r3, #20]
 80018d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018d8:	4b2c      	ldr	r3, [pc, #176]	@ (800198c <MX_TIM3_Init+0xe4>)
 80018da:	4a2d      	ldr	r2, [pc, #180]	@ (8001990 <MX_TIM3_Init+0xe8>)
 80018dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 80018de:	4b2b      	ldr	r3, [pc, #172]	@ (800198c <MX_TIM3_Init+0xe4>)
 80018e0:	2229      	movs	r2, #41	@ 0x29
 80018e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	4b29      	ldr	r3, [pc, #164]	@ (800198c <MX_TIM3_Init+0xe4>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80018ea:	4b28      	ldr	r3, [pc, #160]	@ (800198c <MX_TIM3_Init+0xe4>)
 80018ec:	f242 720f 	movw	r2, #9999	@ 0x270f
 80018f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f2:	4b26      	ldr	r3, [pc, #152]	@ (800198c <MX_TIM3_Init+0xe4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018f8:	4b24      	ldr	r3, [pc, #144]	@ (800198c <MX_TIM3_Init+0xe4>)
 80018fa:	2280      	movs	r2, #128	@ 0x80
 80018fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018fe:	4823      	ldr	r0, [pc, #140]	@ (800198c <MX_TIM3_Init+0xe4>)
 8001900:	f001 fb70 	bl	8002fe4 <HAL_TIM_Base_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800190a:	f7ff fce3 	bl	80012d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800190e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001912:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001914:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001918:	4619      	mov	r1, r3
 800191a:	481c      	ldr	r0, [pc, #112]	@ (800198c <MX_TIM3_Init+0xe4>)
 800191c:	f001 ff5a 	bl	80037d4 <HAL_TIM_ConfigClockSource>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001926:	f7ff fcd5 	bl	80012d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800192a:	4818      	ldr	r0, [pc, #96]	@ (800198c <MX_TIM3_Init+0xe4>)
 800192c:	f001 fc1a 	bl	8003164 <HAL_TIM_PWM_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001936:	f7ff fccd 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001942:	f107 0320 	add.w	r3, r7, #32
 8001946:	4619      	mov	r1, r3
 8001948:	4810      	ldr	r0, [pc, #64]	@ (800198c <MX_TIM3_Init+0xe4>)
 800194a:	f002 fb21 	bl	8003f90 <HAL_TIMEx_MasterConfigSynchronization>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001954:	f7ff fcbe 	bl	80012d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001958:	2360      	movs	r3, #96	@ 0x60
 800195a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2200      	movs	r2, #0
 800196c:	4619      	mov	r1, r3
 800196e:	4807      	ldr	r0, [pc, #28]	@ (800198c <MX_TIM3_Init+0xe4>)
 8001970:	f001 fe6e 	bl	8003650 <HAL_TIM_PWM_ConfigChannel>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800197a:	f7ff fcab 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800197e:	4803      	ldr	r0, [pc, #12]	@ (800198c <MX_TIM3_Init+0xe4>)
 8001980:	f000 fa2a 	bl	8001dd8 <HAL_TIM_MspPostInit>

}
 8001984:	bf00      	nop
 8001986:	3738      	adds	r7, #56	@ 0x38
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000130 	.word	0x20000130
 8001990:	40000400 	.word	0x40000400

08001994 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	@ 0x30
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	2224      	movs	r2, #36	@ 0x24
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f002 ff7c 	bl	80048a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019b0:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <MX_TIM4_Init+0xa0>)
 80019b2:	4a21      	ldr	r2, [pc, #132]	@ (8001a38 <MX_TIM4_Init+0xa4>)
 80019b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80019b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a34 <MX_TIM4_Init+0xa0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <MX_TIM4_Init+0xa0>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80019c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a34 <MX_TIM4_Init+0xa0>)
 80019c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <MX_TIM4_Init+0xa0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019d0:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <MX_TIM4_Init+0xa0>)
 80019d2:	2280      	movs	r2, #128	@ 0x80
 80019d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019d6:	2303      	movs	r3, #3
 80019d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019de:	2301      	movs	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80019e6:	2305      	movs	r3, #5
 80019e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019ee:	2301      	movs	r3, #1
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 80019f6:	2305      	movs	r3, #5
 80019f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	4619      	mov	r1, r3
 8001a00:	480c      	ldr	r0, [pc, #48]	@ (8001a34 <MX_TIM4_Init+0xa0>)
 8001a02:	f001 fcd1 	bl	80033a8 <HAL_TIM_Encoder_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001a0c:	f7ff fc62 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4805      	ldr	r0, [pc, #20]	@ (8001a34 <MX_TIM4_Init+0xa0>)
 8001a1e:	f002 fab7 	bl	8003f90 <HAL_TIMEx_MasterConfigSynchronization>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001a28:	f7ff fc54 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	3730      	adds	r7, #48	@ 0x30
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000178 	.word	0x20000178
 8001a38:	40000800 	.word	0x40000800

08001a3c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08c      	sub	sp, #48	@ 0x30
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	2224      	movs	r2, #36	@ 0x24
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f002 ff28 	bl	80048a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a58:	4b20      	ldr	r3, [pc, #128]	@ (8001adc <MX_TIM5_Init+0xa0>)
 8001a5a:	4a21      	ldr	r2, [pc, #132]	@ (8001ae0 <MX_TIM5_Init+0xa4>)
 8001a5c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001adc <MX_TIM5_Init+0xa0>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a64:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <MX_TIM5_Init+0xa0>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001adc <MX_TIM5_Init+0xa0>)
 8001a6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a70:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <MX_TIM5_Init+0xa0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a78:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <MX_TIM5_Init+0xa0>)
 8001a7a:	2280      	movs	r2, #128	@ 0x80
 8001a7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a86:	2301      	movs	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8001a8e:	2305      	movs	r3, #5
 8001a90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a96:	2301      	movs	r3, #1
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480c      	ldr	r0, [pc, #48]	@ (8001adc <MX_TIM5_Init+0xa0>)
 8001aaa:	f001 fc7d 	bl	80033a8 <HAL_TIM_Encoder_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001ab4:	f7ff fc0e 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4805      	ldr	r0, [pc, #20]	@ (8001adc <MX_TIM5_Init+0xa0>)
 8001ac6:	f002 fa63 	bl	8003f90 <HAL_TIMEx_MasterConfigSynchronization>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001ad0:	f7ff fc00 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	3730      	adds	r7, #48	@ 0x30
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200001c0 	.word	0x200001c0
 8001ae0:	40000c00 	.word	0x40000c00

08001ae4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08c      	sub	sp, #48	@ 0x30
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	2224      	movs	r2, #36	@ 0x24
 8001af0:	2100      	movs	r1, #0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f002 fed4 	bl	80048a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b00:	4b22      	ldr	r3, [pc, #136]	@ (8001b8c <MX_TIM8_Init+0xa8>)
 8001b02:	4a23      	ldr	r2, [pc, #140]	@ (8001b90 <MX_TIM8_Init+0xac>)
 8001b04:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b06:	4b21      	ldr	r3, [pc, #132]	@ (8001b8c <MX_TIM8_Init+0xa8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b8c <MX_TIM8_Init+0xa8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b12:	4b1e      	ldr	r3, [pc, #120]	@ (8001b8c <MX_TIM8_Init+0xa8>)
 8001b14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b18:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b8c <MX_TIM8_Init+0xa8>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <MX_TIM8_Init+0xa8>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b26:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <MX_TIM8_Init+0xa8>)
 8001b28:	2280      	movs	r2, #128	@ 0x80
 8001b2a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b30:	2300      	movs	r3, #0
 8001b32:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b34:	2301      	movs	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8001b3c:	2305      	movs	r3, #5
 8001b3e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b40:	2300      	movs	r3, #0
 8001b42:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b44:	2301      	movs	r3, #1
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8001b4c:	2305      	movs	r3, #5
 8001b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	4619      	mov	r1, r3
 8001b56:	480d      	ldr	r0, [pc, #52]	@ (8001b8c <MX_TIM8_Init+0xa8>)
 8001b58:	f001 fc26 	bl	80033a8 <HAL_TIM_Encoder_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001b62:	f7ff fbb7 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	4806      	ldr	r0, [pc, #24]	@ (8001b8c <MX_TIM8_Init+0xa8>)
 8001b74:	f002 fa0c 	bl	8003f90 <HAL_TIMEx_MasterConfigSynchronization>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001b7e:	f7ff fba9 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	3730      	adds	r7, #48	@ 0x30
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000208 	.word	0x20000208
 8001b90:	40010400 	.word	0x40010400

08001b94 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b090      	sub	sp, #64	@ 0x40
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a65      	ldr	r2, [pc, #404]	@ (8001d48 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d12d      	bne.n	8001c12 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bba:	4b64      	ldr	r3, [pc, #400]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbe:	4a63      	ldr	r2, [pc, #396]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bc6:	4b61      	ldr	r3, [pc, #388]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bd6:	4b5d      	ldr	r3, [pc, #372]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	4a5c      	ldr	r2, [pc, #368]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001bdc:	f043 0310 	orr.w	r3, r3, #16
 8001be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be2:	4b5a      	ldr	r3, [pc, #360]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001bee:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c00:	2301      	movs	r3, #1
 8001c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4851      	ldr	r0, [pc, #324]	@ (8001d50 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001c0c:	f000 fbdc 	bl	80023c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001c10:	e095      	b.n	8001d3e <HAL_TIM_Encoder_MspInit+0x1aa>
  else if(tim_encoderHandle->Instance==TIM4)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a4f      	ldr	r2, [pc, #316]	@ (8001d54 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d12d      	bne.n	8001c78 <HAL_TIM_Encoder_MspInit+0xe4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	623b      	str	r3, [r7, #32]
 8001c20:	4b4a      	ldr	r3, [pc, #296]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	4a49      	ldr	r2, [pc, #292]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001c26:	f043 0304 	orr.w	r3, r3, #4
 8001c2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c2c:	4b47      	ldr	r3, [pc, #284]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	623b      	str	r3, [r7, #32]
 8001c36:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]
 8001c3c:	4b43      	ldr	r3, [pc, #268]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c40:	4a42      	ldr	r2, [pc, #264]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001c42:	f043 0308 	orr.w	r3, r3, #8
 8001c46:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c48:	4b40      	ldr	r3, [pc, #256]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001c54:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c66:	2302      	movs	r3, #2
 8001c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4839      	ldr	r0, [pc, #228]	@ (8001d58 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8001c72:	f000 fba9 	bl	80023c8 <HAL_GPIO_Init>
}
 8001c76:	e062      	b.n	8001d3e <HAL_TIM_Encoder_MspInit+0x1aa>
  else if(tim_encoderHandle->Instance==TIM5)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a37      	ldr	r2, [pc, #220]	@ (8001d5c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d12c      	bne.n	8001cdc <HAL_TIM_Encoder_MspInit+0x148>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	4b31      	ldr	r3, [pc, #196]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	4a30      	ldr	r2, [pc, #192]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001c8c:	f043 0308 	orr.w	r3, r3, #8
 8001c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c92:	4b2e      	ldr	r3, [pc, #184]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	4a29      	ldr	r2, [pc, #164]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cae:	4b27      	ldr	r3, [pc, #156]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4822      	ldr	r0, [pc, #136]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001cd6:	f000 fb77 	bl	80023c8 <HAL_GPIO_Init>
}
 8001cda:	e030      	b.n	8001d3e <HAL_TIM_Encoder_MspInit+0x1aa>
  else if(tim_encoderHandle->Instance==TIM8)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a20      	ldr	r2, [pc, #128]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d12b      	bne.n	8001d3e <HAL_TIM_Encoder_MspInit+0x1aa>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	4a17      	ldr	r2, [pc, #92]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b11      	ldr	r3, [pc, #68]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a10      	ldr	r2, [pc, #64]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d1e:	23c0      	movs	r3, #192	@ 0xc0
 8001d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d36:	4619      	mov	r1, r3
 8001d38:	480b      	ldr	r0, [pc, #44]	@ (8001d68 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001d3a:	f000 fb45 	bl	80023c8 <HAL_GPIO_Init>
}
 8001d3e:	bf00      	nop
 8001d40:	3740      	adds	r7, #64	@ 0x40
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40010000 	.word	0x40010000
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40000800 	.word	0x40000800
 8001d58:	40020c00 	.word	0x40020c00
 8001d5c:	40000c00 	.word	0x40000c00
 8001d60:	40020000 	.word	0x40020000
 8001d64:	40010400 	.word	0x40010400
 8001d68:	40020800 	.word	0x40020800

08001d6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d7c:	d10e      	bne.n	8001d9c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x64>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	4a12      	ldr	r2, [pc, #72]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x64>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d8e:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x64>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d9a:	e012      	b.n	8001dc2 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x68>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d10d      	bne.n	8001dc2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x64>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	4a08      	ldr	r2, [pc, #32]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x64>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x64>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
}
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40000400 	.word	0x40000400

08001dd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	@ 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001df8:	d13c      	bne.n	8001e74 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	4b31      	ldr	r3, [pc, #196]	@ (8001ec4 <HAL_TIM_MspPostInit+0xec>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	4a30      	ldr	r2, [pc, #192]	@ (8001ec4 <HAL_TIM_MspPostInit+0xec>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec4 <HAL_TIM_MspPostInit+0xec>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec4 <HAL_TIM_MspPostInit+0xec>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	4a29      	ldr	r2, [pc, #164]	@ (8001ec4 <HAL_TIM_MspPostInit+0xec>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e26:	4b27      	ldr	r3, [pc, #156]	@ (8001ec4 <HAL_TIM_MspPostInit+0xec>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = FR_PWM_Pin|RR_PWM_Pin|FL_PWM_Pin;
 8001e32:	232c      	movs	r3, #44	@ 0x2c
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e42:	2301      	movs	r3, #1
 8001e44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	481e      	ldr	r0, [pc, #120]	@ (8001ec8 <HAL_TIM_MspPostInit+0xf0>)
 8001e4e:	f000 fabb 	bl	80023c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RL_PWM_Pin;
 8001e52:	2308      	movs	r3, #8
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e62:	2301      	movs	r3, #1
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RL_PWM_GPIO_Port, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4817      	ldr	r0, [pc, #92]	@ (8001ecc <HAL_TIM_MspPostInit+0xf4>)
 8001e6e:	f000 faab 	bl	80023c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e72:	e022      	b.n	8001eba <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM3)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a15      	ldr	r2, [pc, #84]	@ (8001ed0 <HAL_TIM_MspPostInit+0xf8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d11d      	bne.n	8001eba <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <HAL_TIM_MspPostInit+0xec>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	4a0f      	ldr	r2, [pc, #60]	@ (8001ec4 <HAL_TIM_MspPostInit+0xec>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec4 <HAL_TIM_MspPostInit+0xec>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8001e9a:	2310      	movs	r3, #16
 8001e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4805      	ldr	r0, [pc, #20]	@ (8001ecc <HAL_TIM_MspPostInit+0xf4>)
 8001eb6:	f000 fa87 	bl	80023c8 <HAL_GPIO_Init>
}
 8001eba:	bf00      	nop
 8001ebc:	3728      	adds	r7, #40	@ 0x28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	40020400 	.word	0x40020400
 8001ed0:	40000400 	.word	0x40000400

08001ed4 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <MX_UART4_Init+0x4c>)
 8001eda:	4a12      	ldr	r2, [pc, #72]	@ (8001f24 <MX_UART4_Init+0x50>)
 8001edc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001ede:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <MX_UART4_Init+0x4c>)
 8001ee0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ee4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <MX_UART4_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <MX_UART4_Init+0x4c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <MX_UART4_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <MX_UART4_Init+0x4c>)
 8001efa:	220c      	movs	r2, #12
 8001efc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efe:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <MX_UART4_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f04:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <MX_UART4_Init+0x4c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f0a:	4805      	ldr	r0, [pc, #20]	@ (8001f20 <MX_UART4_Init+0x4c>)
 8001f0c:	f002 f8bc 	bl	8004088 <HAL_UART_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001f16:	f7ff f9dd 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000250 	.word	0x20000250
 8001f24:	40004c00 	.word	0x40004c00

08001f28 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f2e:	4a12      	ldr	r2, [pc, #72]	@ (8001f78 <MX_USART1_UART_Init+0x50>)
 8001f30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f32:	4b10      	ldr	r3, [pc, #64]	@ (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f40:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f46:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f4c:	4b09      	ldr	r3, [pc, #36]	@ (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f4e:	220c      	movs	r2, #12
 8001f50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f52:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f58:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f5e:	4805      	ldr	r0, [pc, #20]	@ (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f60:	f002 f892 	bl	8004088 <HAL_UART_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f6a:	f7ff f9b3 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000298 	.word	0x20000298
 8001f78:	40011000 	.word	0x40011000

08001f7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08c      	sub	sp, #48	@ 0x30
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 031c 	add.w	r3, r7, #28
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a33      	ldr	r2, [pc, #204]	@ (8002068 <HAL_UART_MspInit+0xec>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d12d      	bne.n	8001ffa <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
 8001fa2:	4b32      	ldr	r3, [pc, #200]	@ (800206c <HAL_UART_MspInit+0xf0>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	4a31      	ldr	r2, [pc, #196]	@ (800206c <HAL_UART_MspInit+0xf0>)
 8001fa8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fae:	4b2f      	ldr	r3, [pc, #188]	@ (800206c <HAL_UART_MspInit+0xf0>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fb6:	61bb      	str	r3, [r7, #24]
 8001fb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800206c <HAL_UART_MspInit+0xf0>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	4a2a      	ldr	r2, [pc, #168]	@ (800206c <HAL_UART_MspInit+0xf0>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fca:	4b28      	ldr	r3, [pc, #160]	@ (800206c <HAL_UART_MspInit+0xf0>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fd6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001fe8:	2308      	movs	r3, #8
 8001fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fec:	f107 031c 	add.w	r3, r7, #28
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	481f      	ldr	r0, [pc, #124]	@ (8002070 <HAL_UART_MspInit+0xf4>)
 8001ff4:	f000 f9e8 	bl	80023c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ff8:	e031      	b.n	800205e <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1d      	ldr	r2, [pc, #116]	@ (8002074 <HAL_UART_MspInit+0xf8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d12c      	bne.n	800205e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002004:	2300      	movs	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	4b18      	ldr	r3, [pc, #96]	@ (800206c <HAL_UART_MspInit+0xf0>)
 800200a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200c:	4a17      	ldr	r2, [pc, #92]	@ (800206c <HAL_UART_MspInit+0xf0>)
 800200e:	f043 0310 	orr.w	r3, r3, #16
 8002012:	6453      	str	r3, [r2, #68]	@ 0x44
 8002014:	4b15      	ldr	r3, [pc, #84]	@ (800206c <HAL_UART_MspInit+0xf0>)
 8002016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	4b11      	ldr	r3, [pc, #68]	@ (800206c <HAL_UART_MspInit+0xf0>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	4a10      	ldr	r2, [pc, #64]	@ (800206c <HAL_UART_MspInit+0xf0>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002030:	4b0e      	ldr	r3, [pc, #56]	@ (800206c <HAL_UART_MspInit+0xf0>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800203c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800204e:	2307      	movs	r3, #7
 8002050:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	4619      	mov	r1, r3
 8002058:	4807      	ldr	r0, [pc, #28]	@ (8002078 <HAL_UART_MspInit+0xfc>)
 800205a:	f000 f9b5 	bl	80023c8 <HAL_GPIO_Init>
}
 800205e:	bf00      	nop
 8002060:	3730      	adds	r7, #48	@ 0x30
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40004c00 	.word	0x40004c00
 800206c:	40023800 	.word	0x40023800
 8002070:	40020800 	.word	0x40020800
 8002074:	40011000 	.word	0x40011000
 8002078:	40020000 	.word	0x40020000

0800207c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800207c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002080:	f7ff fb12 	bl	80016a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002084:	480c      	ldr	r0, [pc, #48]	@ (80020b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002086:	490d      	ldr	r1, [pc, #52]	@ (80020bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002088:	4a0d      	ldr	r2, [pc, #52]	@ (80020c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800208c:	e002      	b.n	8002094 <LoopCopyDataInit>

0800208e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002092:	3304      	adds	r3, #4

08002094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002098:	d3f9      	bcc.n	800208e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209a:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800209c:	4c0a      	ldr	r4, [pc, #40]	@ (80020c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a0:	e001      	b.n	80020a6 <LoopFillZerobss>

080020a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a4:	3204      	adds	r2, #4

080020a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a8:	d3fb      	bcc.n	80020a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020aa:	f002 fc01 	bl	80048b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ae:	f7ff f823 	bl	80010f8 <main>
  bx  lr    
 80020b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020bc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80020c0:	08004938 	.word	0x08004938
  ldr r2, =_sbss
 80020c4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80020c8:	200002e4 	.word	0x200002e4

080020cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020cc:	e7fe      	b.n	80020cc <ADC_IRQHandler>
	...

080020d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <HAL_Init+0x40>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002110 <HAL_Init+0x40>)
 80020da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <HAL_Init+0x40>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <HAL_Init+0x40>)
 80020e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ec:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <HAL_Init+0x40>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a07      	ldr	r2, [pc, #28]	@ (8002110 <HAL_Init+0x40>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f8:	2003      	movs	r0, #3
 80020fa:	f000 f931 	bl	8002360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020fe:	200f      	movs	r0, #15
 8002100:	f000 f808 	bl	8002114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002104:	f7ff fa78 	bl	80015f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023c00 	.word	0x40023c00

08002114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800211c:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <HAL_InitTick+0x54>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_InitTick+0x58>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212a:	fbb3 f3f1 	udiv	r3, r3, r1
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f93b 	bl	80023ae <HAL_SYSTICK_Config>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e00e      	b.n	8002160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b0f      	cmp	r3, #15
 8002146:	d80a      	bhi.n	800215e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002148:	2200      	movs	r2, #0
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002150:	f000 f911 	bl	8002376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002154:	4a06      	ldr	r2, [pc, #24]	@ (8002170 <HAL_InitTick+0x5c>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	e000      	b.n	8002160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000078 	.word	0x20000078
 800216c:	20000080 	.word	0x20000080
 8002170:	2000007c 	.word	0x2000007c

08002174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_IncTick+0x20>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_IncTick+0x24>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4413      	add	r3, r2
 8002184:	4a04      	ldr	r2, [pc, #16]	@ (8002198 <HAL_IncTick+0x24>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000080 	.word	0x20000080
 8002198:	200002e0 	.word	0x200002e0

0800219c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return uwTick;
 80021a0:	4b03      	ldr	r3, [pc, #12]	@ (80021b0 <HAL_GetTick+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	200002e0 	.word	0x200002e0

080021b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021bc:	f7ff ffee 	bl	800219c <HAL_GetTick>
 80021c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021cc:	d005      	beq.n	80021da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ce:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <HAL_Delay+0x44>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4413      	add	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021da:	bf00      	nop
 80021dc:	f7ff ffde 	bl	800219c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d8f7      	bhi.n	80021dc <HAL_Delay+0x28>
  {
  }
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000080 	.word	0x20000080

080021fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800220c:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002218:	4013      	ands	r3, r2
 800221a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002224:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002228:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800222c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222e:	4a04      	ldr	r2, [pc, #16]	@ (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	60d3      	str	r3, [r2, #12]
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002248:	4b04      	ldr	r3, [pc, #16]	@ (800225c <__NVIC_GetPriorityGrouping+0x18>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	0a1b      	lsrs	r3, r3, #8
 800224e:	f003 0307 	and.w	r3, r3, #7
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002270:	2b00      	cmp	r3, #0
 8002272:	db0a      	blt.n	800228a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	490c      	ldr	r1, [pc, #48]	@ (80022ac <__NVIC_SetPriority+0x4c>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	440b      	add	r3, r1
 8002284:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002288:	e00a      	b.n	80022a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4908      	ldr	r1, [pc, #32]	@ (80022b0 <__NVIC_SetPriority+0x50>)
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	3b04      	subs	r3, #4
 8002298:	0112      	lsls	r2, r2, #4
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	440b      	add	r3, r1
 800229e:	761a      	strb	r2, [r3, #24]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000e100 	.word	0xe000e100
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	@ 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f1c3 0307 	rsb	r3, r3, #7
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	bf28      	it	cs
 80022d2:	2304      	movcs	r3, #4
 80022d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3304      	adds	r3, #4
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d902      	bls.n	80022e4 <NVIC_EncodePriority+0x30>
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3b03      	subs	r3, #3
 80022e2:	e000      	b.n	80022e6 <NVIC_EncodePriority+0x32>
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	401a      	ands	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	43d9      	mvns	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	4313      	orrs	r3, r2
         );
}
 800230e:	4618      	mov	r0, r3
 8002310:	3724      	adds	r7, #36	@ 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800232c:	d301      	bcc.n	8002332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800232e:	2301      	movs	r3, #1
 8002330:	e00f      	b.n	8002352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002332:	4a0a      	ldr	r2, [pc, #40]	@ (800235c <SysTick_Config+0x40>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800233a:	210f      	movs	r1, #15
 800233c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002340:	f7ff ff8e 	bl	8002260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002344:	4b05      	ldr	r3, [pc, #20]	@ (800235c <SysTick_Config+0x40>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234a:	4b04      	ldr	r3, [pc, #16]	@ (800235c <SysTick_Config+0x40>)
 800234c:	2207      	movs	r2, #7
 800234e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	e000e010 	.word	0xe000e010

08002360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ff47 	bl	80021fc <__NVIC_SetPriorityGrouping>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002388:	f7ff ff5c 	bl	8002244 <__NVIC_GetPriorityGrouping>
 800238c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	6978      	ldr	r0, [r7, #20]
 8002394:	f7ff ff8e 	bl	80022b4 <NVIC_EncodePriority>
 8002398:	4602      	mov	r2, r0
 800239a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff5d 	bl	8002260 <__NVIC_SetPriority>
}
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff ffb0 	bl	800231c <SysTick_Config>
 80023bc:	4603      	mov	r3, r0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b089      	sub	sp, #36	@ 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
 80023e2:	e16b      	b.n	80026bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023e4:	2201      	movs	r2, #1
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	f040 815a 	bne.w	80026b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d005      	beq.n	800241a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002416:	2b02      	cmp	r3, #2
 8002418:	d130      	bne.n	800247c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	2203      	movs	r2, #3
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002450:	2201      	movs	r2, #1
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 0201 	and.w	r2, r3, #1
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	2b03      	cmp	r3, #3
 8002486:	d017      	beq.n	80024b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	2203      	movs	r2, #3
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d123      	bne.n	800250c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	08da      	lsrs	r2, r3, #3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3208      	adds	r2, #8
 80024cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	220f      	movs	r2, #15
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	08da      	lsrs	r2, r3, #3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3208      	adds	r2, #8
 8002506:	69b9      	ldr	r1, [r7, #24]
 8002508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2203      	movs	r2, #3
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 0203 	and.w	r2, r3, #3
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 80b4 	beq.w	80026b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4b60      	ldr	r3, [pc, #384]	@ (80026d4 <HAL_GPIO_Init+0x30c>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	4a5f      	ldr	r2, [pc, #380]	@ (80026d4 <HAL_GPIO_Init+0x30c>)
 8002558:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800255c:	6453      	str	r3, [r2, #68]	@ 0x44
 800255e:	4b5d      	ldr	r3, [pc, #372]	@ (80026d4 <HAL_GPIO_Init+0x30c>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800256a:	4a5b      	ldr	r2, [pc, #364]	@ (80026d8 <HAL_GPIO_Init+0x310>)
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	3302      	adds	r3, #2
 8002572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	220f      	movs	r2, #15
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a52      	ldr	r2, [pc, #328]	@ (80026dc <HAL_GPIO_Init+0x314>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d02b      	beq.n	80025ee <HAL_GPIO_Init+0x226>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a51      	ldr	r2, [pc, #324]	@ (80026e0 <HAL_GPIO_Init+0x318>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d025      	beq.n	80025ea <HAL_GPIO_Init+0x222>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a50      	ldr	r2, [pc, #320]	@ (80026e4 <HAL_GPIO_Init+0x31c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d01f      	beq.n	80025e6 <HAL_GPIO_Init+0x21e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4f      	ldr	r2, [pc, #316]	@ (80026e8 <HAL_GPIO_Init+0x320>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d019      	beq.n	80025e2 <HAL_GPIO_Init+0x21a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4e      	ldr	r2, [pc, #312]	@ (80026ec <HAL_GPIO_Init+0x324>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d013      	beq.n	80025de <HAL_GPIO_Init+0x216>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a4d      	ldr	r2, [pc, #308]	@ (80026f0 <HAL_GPIO_Init+0x328>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00d      	beq.n	80025da <HAL_GPIO_Init+0x212>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a4c      	ldr	r2, [pc, #304]	@ (80026f4 <HAL_GPIO_Init+0x32c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d007      	beq.n	80025d6 <HAL_GPIO_Init+0x20e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a4b      	ldr	r2, [pc, #300]	@ (80026f8 <HAL_GPIO_Init+0x330>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d101      	bne.n	80025d2 <HAL_GPIO_Init+0x20a>
 80025ce:	2307      	movs	r3, #7
 80025d0:	e00e      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025d2:	2308      	movs	r3, #8
 80025d4:	e00c      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025d6:	2306      	movs	r3, #6
 80025d8:	e00a      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025da:	2305      	movs	r3, #5
 80025dc:	e008      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025de:	2304      	movs	r3, #4
 80025e0:	e006      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025e2:	2303      	movs	r3, #3
 80025e4:	e004      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e002      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025ee:	2300      	movs	r3, #0
 80025f0:	69fa      	ldr	r2, [r7, #28]
 80025f2:	f002 0203 	and.w	r2, r2, #3
 80025f6:	0092      	lsls	r2, r2, #2
 80025f8:	4093      	lsls	r3, r2
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002600:	4935      	ldr	r1, [pc, #212]	@ (80026d8 <HAL_GPIO_Init+0x310>)
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	089b      	lsrs	r3, r3, #2
 8002606:	3302      	adds	r3, #2
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800260e:	4b3b      	ldr	r3, [pc, #236]	@ (80026fc <HAL_GPIO_Init+0x334>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002632:	4a32      	ldr	r2, [pc, #200]	@ (80026fc <HAL_GPIO_Init+0x334>)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002638:	4b30      	ldr	r3, [pc, #192]	@ (80026fc <HAL_GPIO_Init+0x334>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800265c:	4a27      	ldr	r2, [pc, #156]	@ (80026fc <HAL_GPIO_Init+0x334>)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002662:	4b26      	ldr	r3, [pc, #152]	@ (80026fc <HAL_GPIO_Init+0x334>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002686:	4a1d      	ldr	r2, [pc, #116]	@ (80026fc <HAL_GPIO_Init+0x334>)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800268c:	4b1b      	ldr	r3, [pc, #108]	@ (80026fc <HAL_GPIO_Init+0x334>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026b0:	4a12      	ldr	r2, [pc, #72]	@ (80026fc <HAL_GPIO_Init+0x334>)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3301      	adds	r3, #1
 80026ba:	61fb      	str	r3, [r7, #28]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	2b0f      	cmp	r3, #15
 80026c0:	f67f ae90 	bls.w	80023e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026c4:	bf00      	nop
 80026c6:	bf00      	nop
 80026c8:	3724      	adds	r7, #36	@ 0x24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40013800 	.word	0x40013800
 80026dc:	40020000 	.word	0x40020000
 80026e0:	40020400 	.word	0x40020400
 80026e4:	40020800 	.word	0x40020800
 80026e8:	40020c00 	.word	0x40020c00
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40021400 	.word	0x40021400
 80026f4:	40021800 	.word	0x40021800
 80026f8:	40021c00 	.word	0x40021c00
 80026fc:	40013c00 	.word	0x40013c00

08002700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
 800270c:	4613      	mov	r3, r2
 800270e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002710:	787b      	ldrb	r3, [r7, #1]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002716:	887a      	ldrh	r2, [r7, #2]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800271c:	e003      	b.n	8002726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800271e:	887b      	ldrh	r3, [r7, #2]
 8002720:	041a      	lsls	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	619a      	str	r2, [r3, #24]
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e267      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d075      	beq.n	800283e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002752:	4b88      	ldr	r3, [pc, #544]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b04      	cmp	r3, #4
 800275c:	d00c      	beq.n	8002778 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275e:	4b85      	ldr	r3, [pc, #532]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002766:	2b08      	cmp	r3, #8
 8002768:	d112      	bne.n	8002790 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800276a:	4b82      	ldr	r3, [pc, #520]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002772:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002776:	d10b      	bne.n	8002790 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	4b7e      	ldr	r3, [pc, #504]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d05b      	beq.n	800283c <HAL_RCC_OscConfig+0x108>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d157      	bne.n	800283c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e242      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002798:	d106      	bne.n	80027a8 <HAL_RCC_OscConfig+0x74>
 800279a:	4b76      	ldr	r3, [pc, #472]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a75      	ldr	r2, [pc, #468]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80027a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	e01d      	b.n	80027e4 <HAL_RCC_OscConfig+0xb0>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x98>
 80027b2:	4b70      	ldr	r3, [pc, #448]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6f      	ldr	r2, [pc, #444]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80027b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b6d      	ldr	r3, [pc, #436]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a6c      	ldr	r2, [pc, #432]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80027c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e00b      	b.n	80027e4 <HAL_RCC_OscConfig+0xb0>
 80027cc:	4b69      	ldr	r3, [pc, #420]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a68      	ldr	r2, [pc, #416]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80027d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	4b66      	ldr	r3, [pc, #408]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a65      	ldr	r2, [pc, #404]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80027de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d013      	beq.n	8002814 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7ff fcd6 	bl	800219c <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f4:	f7ff fcd2 	bl	800219c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	@ 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e207      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	4b5b      	ldr	r3, [pc, #364]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0xc0>
 8002812:	e014      	b.n	800283e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7ff fcc2 	bl	800219c <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800281c:	f7ff fcbe 	bl	800219c <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	@ 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e1f3      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282e:	4b51      	ldr	r3, [pc, #324]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0xe8>
 800283a:	e000      	b.n	800283e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d063      	beq.n	8002912 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800284a:	4b4a      	ldr	r3, [pc, #296]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002856:	4b47      	ldr	r3, [pc, #284]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800285e:	2b08      	cmp	r3, #8
 8002860:	d11c      	bne.n	800289c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002862:	4b44      	ldr	r3, [pc, #272]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d116      	bne.n	800289c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286e:	4b41      	ldr	r3, [pc, #260]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <HAL_RCC_OscConfig+0x152>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d001      	beq.n	8002886 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e1c7      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002886:	4b3b      	ldr	r3, [pc, #236]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4937      	ldr	r1, [pc, #220]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289a:	e03a      	b.n	8002912 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d020      	beq.n	80028e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a4:	4b34      	ldr	r3, [pc, #208]	@ (8002978 <HAL_RCC_OscConfig+0x244>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028aa:	f7ff fc77 	bl	800219c <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b2:	f7ff fc73 	bl	800219c <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e1a8      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d0:	4b28      	ldr	r3, [pc, #160]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4925      	ldr	r1, [pc, #148]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	600b      	str	r3, [r1, #0]
 80028e4:	e015      	b.n	8002912 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e6:	4b24      	ldr	r3, [pc, #144]	@ (8002978 <HAL_RCC_OscConfig+0x244>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7ff fc56 	bl	800219c <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f4:	f7ff fc52 	bl	800219c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e187      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002906:	4b1b      	ldr	r3, [pc, #108]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d036      	beq.n	800298c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d016      	beq.n	8002954 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002926:	4b15      	ldr	r3, [pc, #84]	@ (800297c <HAL_RCC_OscConfig+0x248>)
 8002928:	2201      	movs	r2, #1
 800292a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7ff fc36 	bl	800219c <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002934:	f7ff fc32 	bl	800219c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e167      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002946:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x200>
 8002952:	e01b      	b.n	800298c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002954:	4b09      	ldr	r3, [pc, #36]	@ (800297c <HAL_RCC_OscConfig+0x248>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295a:	f7ff fc1f 	bl	800219c <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002960:	e00e      	b.n	8002980 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002962:	f7ff fc1b 	bl	800219c <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d907      	bls.n	8002980 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e150      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
 8002974:	40023800 	.word	0x40023800
 8002978:	42470000 	.word	0x42470000
 800297c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002980:	4b88      	ldr	r3, [pc, #544]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ea      	bne.n	8002962 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8097 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299e:	4b81      	ldr	r3, [pc, #516]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10f      	bne.n	80029ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	4b7d      	ldr	r3, [pc, #500]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	4a7c      	ldr	r2, [pc, #496]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ba:	4b7a      	ldr	r3, [pc, #488]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c6:	2301      	movs	r3, #1
 80029c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ca:	4b77      	ldr	r3, [pc, #476]	@ (8002ba8 <HAL_RCC_OscConfig+0x474>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d118      	bne.n	8002a08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d6:	4b74      	ldr	r3, [pc, #464]	@ (8002ba8 <HAL_RCC_OscConfig+0x474>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a73      	ldr	r2, [pc, #460]	@ (8002ba8 <HAL_RCC_OscConfig+0x474>)
 80029dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e2:	f7ff fbdb 	bl	800219c <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ea:	f7ff fbd7 	bl	800219c <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e10c      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fc:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba8 <HAL_RCC_OscConfig+0x474>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCC_OscConfig+0x2ea>
 8002a10:	4b64      	ldr	r3, [pc, #400]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a14:	4a63      	ldr	r2, [pc, #396]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a1c:	e01c      	b.n	8002a58 <HAL_RCC_OscConfig+0x324>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b05      	cmp	r3, #5
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x30c>
 8002a26:	4b5f      	ldr	r3, [pc, #380]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a2a:	4a5e      	ldr	r2, [pc, #376]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	f043 0304 	orr.w	r3, r3, #4
 8002a30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a32:	4b5c      	ldr	r3, [pc, #368]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a36:	4a5b      	ldr	r2, [pc, #364]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0x324>
 8002a40:	4b58      	ldr	r3, [pc, #352]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a44:	4a57      	ldr	r2, [pc, #348]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a46:	f023 0301 	bic.w	r3, r3, #1
 8002a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a4c:	4b55      	ldr	r3, [pc, #340]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a50:	4a54      	ldr	r2, [pc, #336]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a52:	f023 0304 	bic.w	r3, r3, #4
 8002a56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d015      	beq.n	8002a8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7ff fb9c 	bl	800219c <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a68:	f7ff fb98 	bl	800219c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e0cb      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7e:	4b49      	ldr	r3, [pc, #292]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0ee      	beq.n	8002a68 <HAL_RCC_OscConfig+0x334>
 8002a8a:	e014      	b.n	8002ab6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8c:	f7ff fb86 	bl	800219c <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a94:	f7ff fb82 	bl	800219c <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e0b5      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aaa:	4b3e      	ldr	r3, [pc, #248]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1ee      	bne.n	8002a94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ab6:	7dfb      	ldrb	r3, [r7, #23]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d105      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002abc:	4b39      	ldr	r3, [pc, #228]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	4a38      	ldr	r2, [pc, #224]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ac6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80a1 	beq.w	8002c14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ad2:	4b34      	ldr	r3, [pc, #208]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d05c      	beq.n	8002b98 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d141      	bne.n	8002b6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae6:	4b31      	ldr	r3, [pc, #196]	@ (8002bac <HAL_RCC_OscConfig+0x478>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7ff fb56 	bl	800219c <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af4:	f7ff fb52 	bl	800219c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e087      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b06:	4b27      	ldr	r3, [pc, #156]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	019b      	lsls	r3, r3, #6
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b28:	085b      	lsrs	r3, r3, #1
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	041b      	lsls	r3, r3, #16
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	061b      	lsls	r3, r3, #24
 8002b36:	491b      	ldr	r1, [pc, #108]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bac <HAL_RCC_OscConfig+0x478>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7ff fb2b 	bl	800219c <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4a:	f7ff fb27 	bl	800219c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e05c      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x416>
 8002b68:	e054      	b.n	8002c14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b10      	ldr	r3, [pc, #64]	@ (8002bac <HAL_RCC_OscConfig+0x478>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7ff fb14 	bl	800219c <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7ff fb10 	bl	800219c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e045      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x444>
 8002b96:	e03d      	b.n	8002c14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e038      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c20 <HAL_RCC_OscConfig+0x4ec>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d028      	beq.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d121      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d11a      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002be0:	4013      	ands	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002be6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d111      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf6:	085b      	lsrs	r3, r3, #1
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800

08002c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0cc      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c38:	4b68      	ldr	r3, [pc, #416]	@ (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d90c      	bls.n	8002c60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c46:	4b65      	ldr	r3, [pc, #404]	@ (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b63      	ldr	r3, [pc, #396]	@ (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0b8      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d020      	beq.n	8002cae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c78:	4b59      	ldr	r3, [pc, #356]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4a58      	ldr	r2, [pc, #352]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c90:	4b53      	ldr	r3, [pc, #332]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4a52      	ldr	r2, [pc, #328]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c9c:	4b50      	ldr	r3, [pc, #320]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	494d      	ldr	r1, [pc, #308]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d044      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	4b47      	ldr	r3, [pc, #284]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d119      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e07f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d003      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce2:	4b3f      	ldr	r3, [pc, #252]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d109      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e06f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e067      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d02:	4b37      	ldr	r3, [pc, #220]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f023 0203 	bic.w	r2, r3, #3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4934      	ldr	r1, [pc, #208]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d14:	f7ff fa42 	bl	800219c <HAL_GetTick>
 8002d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1a:	e00a      	b.n	8002d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1c:	f7ff fa3e 	bl	800219c <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e04f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d32:	4b2b      	ldr	r3, [pc, #172]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 020c 	and.w	r2, r3, #12
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d1eb      	bne.n	8002d1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d44:	4b25      	ldr	r3, [pc, #148]	@ (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d20c      	bcs.n	8002d6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b22      	ldr	r3, [pc, #136]	@ (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5a:	4b20      	ldr	r3, [pc, #128]	@ (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e032      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d78:	4b19      	ldr	r3, [pc, #100]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	4916      	ldr	r1, [pc, #88]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d96:	4b12      	ldr	r3, [pc, #72]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	490e      	ldr	r1, [pc, #56]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002daa:	f000 f821 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8002dae:	4602      	mov	r2, r0
 8002db0:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	490a      	ldr	r1, [pc, #40]	@ (8002de4 <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	5ccb      	ldrb	r3, [r1, r3]
 8002dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc2:	4a09      	ldr	r2, [pc, #36]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002dc6:	4b09      	ldr	r3, [pc, #36]	@ (8002dec <HAL_RCC_ClockConfig+0x1c8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff f9a2 	bl	8002114 <HAL_InitTick>

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023c00 	.word	0x40023c00
 8002de0:	40023800 	.word	0x40023800
 8002de4:	08004910 	.word	0x08004910
 8002de8:	20000078 	.word	0x20000078
 8002dec:	2000007c 	.word	0x2000007c

08002df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df4:	b090      	sub	sp, #64	@ 0x40
 8002df6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e08:	4b59      	ldr	r3, [pc, #356]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d00d      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x40>
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	f200 80a1 	bhi.w	8002f5c <HAL_RCC_GetSysClockFreq+0x16c>
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x34>
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d003      	beq.n	8002e2a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e22:	e09b      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e24:	4b53      	ldr	r3, [pc, #332]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e26:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e28:	e09b      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e2a:	4b53      	ldr	r3, [pc, #332]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e2e:	e098      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e30:	4b4f      	ldr	r3, [pc, #316]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e38:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e3a:	4b4d      	ldr	r3, [pc, #308]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d028      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e46:	4b4a      	ldr	r3, [pc, #296]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	099b      	lsrs	r3, r3, #6
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	623b      	str	r3, [r7, #32]
 8002e50:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4b47      	ldr	r3, [pc, #284]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e5c:	fb03 f201 	mul.w	r2, r3, r1
 8002e60:	2300      	movs	r3, #0
 8002e62:	fb00 f303 	mul.w	r3, r0, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	4a43      	ldr	r2, [pc, #268]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e6a:	fba0 1202 	umull	r1, r2, r0, r2
 8002e6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e70:	460a      	mov	r2, r1
 8002e72:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002e74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e76:	4413      	add	r3, r2
 8002e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	61bb      	str	r3, [r7, #24]
 8002e80:	61fa      	str	r2, [r7, #28]
 8002e82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e8a:	f7fd fde3 	bl	8000a54 <__aeabi_uldivmod>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4613      	mov	r3, r2
 8002e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e96:	e053      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e98:	4b35      	ldr	r3, [pc, #212]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	099b      	lsrs	r3, r3, #6
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	617a      	str	r2, [r7, #20]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002eaa:	f04f 0b00 	mov.w	fp, #0
 8002eae:	4652      	mov	r2, sl
 8002eb0:	465b      	mov	r3, fp
 8002eb2:	f04f 0000 	mov.w	r0, #0
 8002eb6:	f04f 0100 	mov.w	r1, #0
 8002eba:	0159      	lsls	r1, r3, #5
 8002ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ec0:	0150      	lsls	r0, r2, #5
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	ebb2 080a 	subs.w	r8, r2, sl
 8002eca:	eb63 090b 	sbc.w	r9, r3, fp
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002eda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ede:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ee2:	ebb2 0408 	subs.w	r4, r2, r8
 8002ee6:	eb63 0509 	sbc.w	r5, r3, r9
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	00eb      	lsls	r3, r5, #3
 8002ef4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ef8:	00e2      	lsls	r2, r4, #3
 8002efa:	4614      	mov	r4, r2
 8002efc:	461d      	mov	r5, r3
 8002efe:	eb14 030a 	adds.w	r3, r4, sl
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	eb45 030b 	adc.w	r3, r5, fp
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f16:	4629      	mov	r1, r5
 8002f18:	028b      	lsls	r3, r1, #10
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f20:	4621      	mov	r1, r4
 8002f22:	028a      	lsls	r2, r1, #10
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	60fa      	str	r2, [r7, #12]
 8002f30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f34:	f7fd fd8e 	bl	8000a54 <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f40:	4b0b      	ldr	r3, [pc, #44]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002f50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f5a:	e002      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f5c:	4b05      	ldr	r3, [pc, #20]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3740      	adds	r7, #64	@ 0x40
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800
 8002f74:	00f42400 	.word	0x00f42400
 8002f78:	017d7840 	.word	0x017d7840

08002f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f80:	4b03      	ldr	r3, [pc, #12]	@ (8002f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000078 	.word	0x20000078

08002f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f98:	f7ff fff0 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0a9b      	lsrs	r3, r3, #10
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4903      	ldr	r1, [pc, #12]	@ (8002fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	08004920 	.word	0x08004920

08002fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fc0:	f7ff ffdc 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b05      	ldr	r3, [pc, #20]	@ (8002fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	0b5b      	lsrs	r3, r3, #13
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	4903      	ldr	r1, [pc, #12]	@ (8002fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd2:	5ccb      	ldrb	r3, [r1, r3]
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	08004920 	.word	0x08004920

08002fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e041      	b.n	800307a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fe feae 	bl	8001d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3304      	adds	r3, #4
 8003020:	4619      	mov	r1, r3
 8003022:	4610      	mov	r0, r2
 8003024:	f000 fc9e 	bl	8003964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d001      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e04e      	b.n	800313a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a23      	ldr	r2, [pc, #140]	@ (8003148 <HAL_TIM_Base_Start_IT+0xc4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d022      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030c6:	d01d      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1f      	ldr	r2, [pc, #124]	@ (800314c <HAL_TIM_Base_Start_IT+0xc8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d018      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003150 <HAL_TIM_Base_Start_IT+0xcc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d013      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003154 <HAL_TIM_Base_Start_IT+0xd0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00e      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003158 <HAL_TIM_Base_Start_IT+0xd4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d009      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a19      	ldr	r2, [pc, #100]	@ (800315c <HAL_TIM_Base_Start_IT+0xd8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d004      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x80>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a18      	ldr	r2, [pc, #96]	@ (8003160 <HAL_TIM_Base_Start_IT+0xdc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d111      	bne.n	8003128 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b06      	cmp	r3, #6
 8003114:	d010      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0201 	orr.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003126:	e007      	b.n	8003138 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40010000 	.word	0x40010000
 800314c:	40000400 	.word	0x40000400
 8003150:	40000800 	.word	0x40000800
 8003154:	40000c00 	.word	0x40000c00
 8003158:	40010400 	.word	0x40010400
 800315c:	40014000 	.word	0x40014000
 8003160:	40001800 	.word	0x40001800

08003164 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e041      	b.n	80031fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f839 	bl	8003202 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3304      	adds	r3, #4
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f000 fbde 	bl	8003964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d109      	bne.n	800323c <HAL_TIM_PWM_Start+0x24>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e022      	b.n	8003282 <HAL_TIM_PWM_Start+0x6a>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b04      	cmp	r3, #4
 8003240:	d109      	bne.n	8003256 <HAL_TIM_PWM_Start+0x3e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	bf14      	ite	ne
 800324e:	2301      	movne	r3, #1
 8003250:	2300      	moveq	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	e015      	b.n	8003282 <HAL_TIM_PWM_Start+0x6a>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b08      	cmp	r3, #8
 800325a:	d109      	bne.n	8003270 <HAL_TIM_PWM_Start+0x58>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b01      	cmp	r3, #1
 8003266:	bf14      	ite	ne
 8003268:	2301      	movne	r3, #1
 800326a:	2300      	moveq	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	e008      	b.n	8003282 <HAL_TIM_PWM_Start+0x6a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	bf14      	ite	ne
 800327c:	2301      	movne	r3, #1
 800327e:	2300      	moveq	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e07c      	b.n	8003384 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d104      	bne.n	800329a <HAL_TIM_PWM_Start+0x82>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003298:	e013      	b.n	80032c2 <HAL_TIM_PWM_Start+0xaa>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b04      	cmp	r3, #4
 800329e:	d104      	bne.n	80032aa <HAL_TIM_PWM_Start+0x92>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032a8:	e00b      	b.n	80032c2 <HAL_TIM_PWM_Start+0xaa>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d104      	bne.n	80032ba <HAL_TIM_PWM_Start+0xa2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032b8:	e003      	b.n	80032c2 <HAL_TIM_PWM_Start+0xaa>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2202      	movs	r2, #2
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2201      	movs	r2, #1
 80032c8:	6839      	ldr	r1, [r7, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fe3a 	bl	8003f44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a2d      	ldr	r2, [pc, #180]	@ (800338c <HAL_TIM_PWM_Start+0x174>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d004      	beq.n	80032e4 <HAL_TIM_PWM_Start+0xcc>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a2c      	ldr	r2, [pc, #176]	@ (8003390 <HAL_TIM_PWM_Start+0x178>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d101      	bne.n	80032e8 <HAL_TIM_PWM_Start+0xd0>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <HAL_TIM_PWM_Start+0xd2>
 80032e8:	2300      	movs	r3, #0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a22      	ldr	r2, [pc, #136]	@ (800338c <HAL_TIM_PWM_Start+0x174>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d022      	beq.n	800334e <HAL_TIM_PWM_Start+0x136>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003310:	d01d      	beq.n	800334e <HAL_TIM_PWM_Start+0x136>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a1f      	ldr	r2, [pc, #124]	@ (8003394 <HAL_TIM_PWM_Start+0x17c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d018      	beq.n	800334e <HAL_TIM_PWM_Start+0x136>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a1d      	ldr	r2, [pc, #116]	@ (8003398 <HAL_TIM_PWM_Start+0x180>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d013      	beq.n	800334e <HAL_TIM_PWM_Start+0x136>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a1c      	ldr	r2, [pc, #112]	@ (800339c <HAL_TIM_PWM_Start+0x184>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00e      	beq.n	800334e <HAL_TIM_PWM_Start+0x136>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a16      	ldr	r2, [pc, #88]	@ (8003390 <HAL_TIM_PWM_Start+0x178>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d009      	beq.n	800334e <HAL_TIM_PWM_Start+0x136>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a18      	ldr	r2, [pc, #96]	@ (80033a0 <HAL_TIM_PWM_Start+0x188>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d004      	beq.n	800334e <HAL_TIM_PWM_Start+0x136>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a16      	ldr	r2, [pc, #88]	@ (80033a4 <HAL_TIM_PWM_Start+0x18c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d111      	bne.n	8003372 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b06      	cmp	r3, #6
 800335e:	d010      	beq.n	8003382 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003370:	e007      	b.n	8003382 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0201 	orr.w	r2, r2, #1
 8003380:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40010000 	.word	0x40010000
 8003390:	40010400 	.word	0x40010400
 8003394:	40000400 	.word	0x40000400
 8003398:	40000800 	.word	0x40000800
 800339c:	40000c00 	.word	0x40000c00
 80033a0:	40014000 	.word	0x40014000
 80033a4:	40001800 	.word	0x40001800

080033a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e097      	b.n	80034ec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d106      	bne.n	80033d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7fe fbdf 	bl	8001b94 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2202      	movs	r2, #2
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033ec:	f023 0307 	bic.w	r3, r3, #7
 80033f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3304      	adds	r3, #4
 80033fa:	4619      	mov	r1, r3
 80033fc:	4610      	mov	r0, r2
 80033fe:	f000 fab1 	bl	8003964 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800342a:	f023 0303 	bic.w	r3, r3, #3
 800342e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	4313      	orrs	r3, r2
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003448:	f023 030c 	bic.w	r3, r3, #12
 800344c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003454:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003458:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	4313      	orrs	r3, r2
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	011a      	lsls	r2, r3, #4
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	031b      	lsls	r3, r3, #12
 8003478:	4313      	orrs	r3, r2
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003486:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800348e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	4313      	orrs	r3, r2
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003504:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800350c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003514:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800351c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d110      	bne.n	8003546 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d102      	bne.n	8003530 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800352a:	7b7b      	ldrb	r3, [r7, #13]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d001      	beq.n	8003534 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e089      	b.n	8003648 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003544:	e031      	b.n	80035aa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b04      	cmp	r3, #4
 800354a:	d110      	bne.n	800356e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800354c:	7bbb      	ldrb	r3, [r7, #14]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d102      	bne.n	8003558 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003552:	7b3b      	ldrb	r3, [r7, #12]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d001      	beq.n	800355c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e075      	b.n	8003648 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800356c:	e01d      	b.n	80035aa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d108      	bne.n	8003586 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003574:	7bbb      	ldrb	r3, [r7, #14]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d105      	bne.n	8003586 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800357a:	7b7b      	ldrb	r3, [r7, #13]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d102      	bne.n	8003586 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003580:	7b3b      	ldrb	r3, [r7, #12]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d001      	beq.n	800358a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e05e      	b.n	8003648 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2202      	movs	r2, #2
 800358e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2202      	movs	r2, #2
 8003596:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2202      	movs	r2, #2
 800359e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_TIM_Encoder_Start_IT+0xc4>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d010      	beq.n	80035d8 <HAL_TIM_Encoder_Start_IT+0xe4>
 80035b6:	e01f      	b.n	80035f8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2201      	movs	r2, #1
 80035be:	2100      	movs	r1, #0
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fcbf 	bl	8003f44 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 0202 	orr.w	r2, r2, #2
 80035d4:	60da      	str	r2, [r3, #12]
      break;
 80035d6:	e02e      	b.n	8003636 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2201      	movs	r2, #1
 80035de:	2104      	movs	r1, #4
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fcaf 	bl	8003f44 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0204 	orr.w	r2, r2, #4
 80035f4:	60da      	str	r2, [r3, #12]
      break;
 80035f6:	e01e      	b.n	8003636 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2201      	movs	r2, #1
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fc9f 	bl	8003f44 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2201      	movs	r2, #1
 800360c:	2104      	movs	r1, #4
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fc98 	bl	8003f44 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0202 	orr.w	r2, r2, #2
 8003622:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0204 	orr.w	r2, r2, #4
 8003632:	60da      	str	r2, [r3, #12]
      break;
 8003634:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0201 	orr.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800366a:	2302      	movs	r3, #2
 800366c:	e0ae      	b.n	80037cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b0c      	cmp	r3, #12
 800367a:	f200 809f 	bhi.w	80037bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800367e:	a201      	add	r2, pc, #4	@ (adr r2, 8003684 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003684:	080036b9 	.word	0x080036b9
 8003688:	080037bd 	.word	0x080037bd
 800368c:	080037bd 	.word	0x080037bd
 8003690:	080037bd 	.word	0x080037bd
 8003694:	080036f9 	.word	0x080036f9
 8003698:	080037bd 	.word	0x080037bd
 800369c:	080037bd 	.word	0x080037bd
 80036a0:	080037bd 	.word	0x080037bd
 80036a4:	0800373b 	.word	0x0800373b
 80036a8:	080037bd 	.word	0x080037bd
 80036ac:	080037bd 	.word	0x080037bd
 80036b0:	080037bd 	.word	0x080037bd
 80036b4:	0800377b 	.word	0x0800377b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 f9f6 	bl	8003ab0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699a      	ldr	r2, [r3, #24]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0208 	orr.w	r2, r2, #8
 80036d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0204 	bic.w	r2, r2, #4
 80036e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6999      	ldr	r1, [r3, #24]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	619a      	str	r2, [r3, #24]
      break;
 80036f6:	e064      	b.n	80037c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fa46 	bl	8003b90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6999      	ldr	r1, [r3, #24]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	021a      	lsls	r2, r3, #8
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	619a      	str	r2, [r3, #24]
      break;
 8003738:	e043      	b.n	80037c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	4618      	mov	r0, r3
 8003742:	f000 fa9b 	bl	8003c7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0208 	orr.w	r2, r2, #8
 8003754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69da      	ldr	r2, [r3, #28]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0204 	bic.w	r2, r2, #4
 8003764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69d9      	ldr	r1, [r3, #28]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	61da      	str	r2, [r3, #28]
      break;
 8003778:	e023      	b.n	80037c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	4618      	mov	r0, r3
 8003782:	f000 faef 	bl	8003d64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69da      	ldr	r2, [r3, #28]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	69d9      	ldr	r1, [r3, #28]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	021a      	lsls	r2, r3, #8
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	61da      	str	r2, [r3, #28]
      break;
 80037ba:	e002      	b.n	80037c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	75fb      	strb	r3, [r7, #23]
      break;
 80037c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_TIM_ConfigClockSource+0x1c>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e0b4      	b.n	800395a <HAL_TIM_ConfigClockSource+0x186>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800380e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003816:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003828:	d03e      	beq.n	80038a8 <HAL_TIM_ConfigClockSource+0xd4>
 800382a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800382e:	f200 8087 	bhi.w	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003836:	f000 8086 	beq.w	8003946 <HAL_TIM_ConfigClockSource+0x172>
 800383a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800383e:	d87f      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003840:	2b70      	cmp	r3, #112	@ 0x70
 8003842:	d01a      	beq.n	800387a <HAL_TIM_ConfigClockSource+0xa6>
 8003844:	2b70      	cmp	r3, #112	@ 0x70
 8003846:	d87b      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003848:	2b60      	cmp	r3, #96	@ 0x60
 800384a:	d050      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x11a>
 800384c:	2b60      	cmp	r3, #96	@ 0x60
 800384e:	d877      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003850:	2b50      	cmp	r3, #80	@ 0x50
 8003852:	d03c      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0xfa>
 8003854:	2b50      	cmp	r3, #80	@ 0x50
 8003856:	d873      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003858:	2b40      	cmp	r3, #64	@ 0x40
 800385a:	d058      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x13a>
 800385c:	2b40      	cmp	r3, #64	@ 0x40
 800385e:	d86f      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003860:	2b30      	cmp	r3, #48	@ 0x30
 8003862:	d064      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x15a>
 8003864:	2b30      	cmp	r3, #48	@ 0x30
 8003866:	d86b      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003868:	2b20      	cmp	r3, #32
 800386a:	d060      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x15a>
 800386c:	2b20      	cmp	r3, #32
 800386e:	d867      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d05c      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x15a>
 8003874:	2b10      	cmp	r3, #16
 8003876:	d05a      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x15a>
 8003878:	e062      	b.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800388a:	f000 fb3b 	bl	8003f04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800389c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	609a      	str	r2, [r3, #8]
      break;
 80038a6:	e04f      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038b8:	f000 fb24 	bl	8003f04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038ca:	609a      	str	r2, [r3, #8]
      break;
 80038cc:	e03c      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038da:	461a      	mov	r2, r3
 80038dc:	f000 fa98 	bl	8003e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2150      	movs	r1, #80	@ 0x50
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 faf1 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 80038ec:	e02c      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038fa:	461a      	mov	r2, r3
 80038fc:	f000 fab7 	bl	8003e6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2160      	movs	r1, #96	@ 0x60
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fae1 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 800390c:	e01c      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800391a:	461a      	mov	r2, r3
 800391c:	f000 fa78 	bl	8003e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2140      	movs	r1, #64	@ 0x40
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fad1 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 800392c:	e00c      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4619      	mov	r1, r3
 8003938:	4610      	mov	r0, r2
 800393a:	f000 fac8 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 800393e:	e003      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
      break;
 8003944:	e000      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003946:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003958:	7bfb      	ldrb	r3, [r7, #15]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a43      	ldr	r2, [pc, #268]	@ (8003a84 <TIM_Base_SetConfig+0x120>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d013      	beq.n	80039a4 <TIM_Base_SetConfig+0x40>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003982:	d00f      	beq.n	80039a4 <TIM_Base_SetConfig+0x40>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a40      	ldr	r2, [pc, #256]	@ (8003a88 <TIM_Base_SetConfig+0x124>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d00b      	beq.n	80039a4 <TIM_Base_SetConfig+0x40>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a3f      	ldr	r2, [pc, #252]	@ (8003a8c <TIM_Base_SetConfig+0x128>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d007      	beq.n	80039a4 <TIM_Base_SetConfig+0x40>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a3e      	ldr	r2, [pc, #248]	@ (8003a90 <TIM_Base_SetConfig+0x12c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d003      	beq.n	80039a4 <TIM_Base_SetConfig+0x40>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a3d      	ldr	r2, [pc, #244]	@ (8003a94 <TIM_Base_SetConfig+0x130>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d108      	bne.n	80039b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a32      	ldr	r2, [pc, #200]	@ (8003a84 <TIM_Base_SetConfig+0x120>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d02b      	beq.n	8003a16 <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039c4:	d027      	beq.n	8003a16 <TIM_Base_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a2f      	ldr	r2, [pc, #188]	@ (8003a88 <TIM_Base_SetConfig+0x124>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d023      	beq.n	8003a16 <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a2e      	ldr	r2, [pc, #184]	@ (8003a8c <TIM_Base_SetConfig+0x128>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d01f      	beq.n	8003a16 <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a2d      	ldr	r2, [pc, #180]	@ (8003a90 <TIM_Base_SetConfig+0x12c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d01b      	beq.n	8003a16 <TIM_Base_SetConfig+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003a94 <TIM_Base_SetConfig+0x130>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d017      	beq.n	8003a16 <TIM_Base_SetConfig+0xb2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003a98 <TIM_Base_SetConfig+0x134>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <TIM_Base_SetConfig+0xb2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a2a      	ldr	r2, [pc, #168]	@ (8003a9c <TIM_Base_SetConfig+0x138>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00f      	beq.n	8003a16 <TIM_Base_SetConfig+0xb2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a29      	ldr	r2, [pc, #164]	@ (8003aa0 <TIM_Base_SetConfig+0x13c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00b      	beq.n	8003a16 <TIM_Base_SetConfig+0xb2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a28      	ldr	r2, [pc, #160]	@ (8003aa4 <TIM_Base_SetConfig+0x140>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <TIM_Base_SetConfig+0xb2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a27      	ldr	r2, [pc, #156]	@ (8003aa8 <TIM_Base_SetConfig+0x144>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d003      	beq.n	8003a16 <TIM_Base_SetConfig+0xb2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a26      	ldr	r2, [pc, #152]	@ (8003aac <TIM_Base_SetConfig+0x148>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d108      	bne.n	8003a28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a0e      	ldr	r2, [pc, #56]	@ (8003a84 <TIM_Base_SetConfig+0x120>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d003      	beq.n	8003a56 <TIM_Base_SetConfig+0xf2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a10      	ldr	r2, [pc, #64]	@ (8003a94 <TIM_Base_SetConfig+0x130>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d103      	bne.n	8003a5e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	691a      	ldr	r2, [r3, #16]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f043 0204 	orr.w	r2, r3, #4
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	601a      	str	r2, [r3, #0]
}
 8003a76:	bf00      	nop
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40010000 	.word	0x40010000
 8003a88:	40000400 	.word	0x40000400
 8003a8c:	40000800 	.word	0x40000800
 8003a90:	40000c00 	.word	0x40000c00
 8003a94:	40010400 	.word	0x40010400
 8003a98:	40014000 	.word	0x40014000
 8003a9c:	40014400 	.word	0x40014400
 8003aa0:	40014800 	.word	0x40014800
 8003aa4:	40001800 	.word	0x40001800
 8003aa8:	40001c00 	.word	0x40001c00
 8003aac:	40002000 	.word	0x40002000

08003ab0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	f023 0201 	bic.w	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0303 	bic.w	r3, r3, #3
 8003ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f023 0302 	bic.w	r3, r3, #2
 8003af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a20      	ldr	r2, [pc, #128]	@ (8003b88 <TIM_OC1_SetConfig+0xd8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d003      	beq.n	8003b14 <TIM_OC1_SetConfig+0x64>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8003b8c <TIM_OC1_SetConfig+0xdc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d10c      	bne.n	8003b2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f023 0308 	bic.w	r3, r3, #8
 8003b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f023 0304 	bic.w	r3, r3, #4
 8003b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a15      	ldr	r2, [pc, #84]	@ (8003b88 <TIM_OC1_SetConfig+0xd8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_OC1_SetConfig+0x8e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a14      	ldr	r2, [pc, #80]	@ (8003b8c <TIM_OC1_SetConfig+0xdc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d111      	bne.n	8003b62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	621a      	str	r2, [r3, #32]
}
 8003b7c:	bf00      	nop
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	40010400 	.word	0x40010400

08003b90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f023 0210 	bic.w	r2, r3, #16
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	021b      	lsls	r3, r3, #8
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f023 0320 	bic.w	r3, r3, #32
 8003bda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a22      	ldr	r2, [pc, #136]	@ (8003c74 <TIM_OC2_SetConfig+0xe4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d003      	beq.n	8003bf8 <TIM_OC2_SetConfig+0x68>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a21      	ldr	r2, [pc, #132]	@ (8003c78 <TIM_OC2_SetConfig+0xe8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d10d      	bne.n	8003c14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a17      	ldr	r2, [pc, #92]	@ (8003c74 <TIM_OC2_SetConfig+0xe4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d003      	beq.n	8003c24 <TIM_OC2_SetConfig+0x94>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a16      	ldr	r2, [pc, #88]	@ (8003c78 <TIM_OC2_SetConfig+0xe8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d113      	bne.n	8003c4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	621a      	str	r2, [r3, #32]
}
 8003c66:	bf00      	nop
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40010000 	.word	0x40010000
 8003c78:	40010400 	.word	0x40010400

08003c7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0303 	bic.w	r3, r3, #3
 8003cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a21      	ldr	r2, [pc, #132]	@ (8003d5c <TIM_OC3_SetConfig+0xe0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d003      	beq.n	8003ce2 <TIM_OC3_SetConfig+0x66>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a20      	ldr	r2, [pc, #128]	@ (8003d60 <TIM_OC3_SetConfig+0xe4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d10d      	bne.n	8003cfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a16      	ldr	r2, [pc, #88]	@ (8003d5c <TIM_OC3_SetConfig+0xe0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d003      	beq.n	8003d0e <TIM_OC3_SetConfig+0x92>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a15      	ldr	r2, [pc, #84]	@ (8003d60 <TIM_OC3_SetConfig+0xe4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d113      	bne.n	8003d36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	621a      	str	r2, [r3, #32]
}
 8003d50:	bf00      	nop
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	40010000 	.word	0x40010000
 8003d60:	40010400 	.word	0x40010400

08003d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	031b      	lsls	r3, r3, #12
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a12      	ldr	r2, [pc, #72]	@ (8003e08 <TIM_OC4_SetConfig+0xa4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <TIM_OC4_SetConfig+0x68>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a11      	ldr	r2, [pc, #68]	@ (8003e0c <TIM_OC4_SetConfig+0xa8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d109      	bne.n	8003de0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	019b      	lsls	r3, r3, #6
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	621a      	str	r2, [r3, #32]
}
 8003dfa:	bf00      	nop
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40010400 	.word	0x40010400

08003e10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	f023 0201 	bic.w	r2, r3, #1
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f023 030a 	bic.w	r3, r3, #10
 8003e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	621a      	str	r2, [r3, #32]
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b087      	sub	sp, #28
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	f023 0210 	bic.w	r2, r3, #16
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	031b      	lsls	r3, r3, #12
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003eaa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	621a      	str	r2, [r3, #32]
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f043 0307 	orr.w	r3, r3, #7
 8003ef0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	609a      	str	r2, [r3, #8]
}
 8003ef8:	bf00      	nop
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	021a      	lsls	r2, r3, #8
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	609a      	str	r2, [r3, #8]
}
 8003f38:	bf00      	nop
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	2201      	movs	r2, #1
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a1a      	ldr	r2, [r3, #32]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	401a      	ands	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1a      	ldr	r2, [r3, #32]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	621a      	str	r2, [r3, #32]
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
	...

08003f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e05a      	b.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a21      	ldr	r2, [pc, #132]	@ (800406c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d022      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ff4:	d01d      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8004070 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d018      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a1b      	ldr	r2, [pc, #108]	@ (8004074 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a1a      	ldr	r2, [pc, #104]	@ (8004078 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d00e      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a18      	ldr	r2, [pc, #96]	@ (800407c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d009      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a17      	ldr	r2, [pc, #92]	@ (8004080 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d004      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a15      	ldr	r2, [pc, #84]	@ (8004084 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d10c      	bne.n	800404c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	4313      	orrs	r3, r2
 8004042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40010000 	.word	0x40010000
 8004070:	40000400 	.word	0x40000400
 8004074:	40000800 	.word	0x40000800
 8004078:	40000c00 	.word	0x40000c00
 800407c:	40010400 	.word	0x40010400
 8004080:	40014000 	.word	0x40014000
 8004084:	40001800 	.word	0x40001800

08004088 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e042      	b.n	8004120 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d106      	bne.n	80040b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7fd ff64 	bl	8001f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2224      	movs	r2, #36	@ 0x24
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f973 	bl	80043b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695a      	ldr	r2, [r3, #20]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004100:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08a      	sub	sp, #40	@ 0x28
 800412c:	af02      	add	r7, sp, #8
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	4613      	mov	r3, r2
 8004136:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b20      	cmp	r3, #32
 8004146:	d175      	bne.n	8004234 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_UART_Transmit+0x2c>
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e06e      	b.n	8004236 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2221      	movs	r2, #33	@ 0x21
 8004162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004166:	f7fe f819 	bl	800219c <HAL_GetTick>
 800416a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	88fa      	ldrh	r2, [r7, #6]
 8004170:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	88fa      	ldrh	r2, [r7, #6]
 8004176:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004180:	d108      	bne.n	8004194 <HAL_UART_Transmit+0x6c>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d104      	bne.n	8004194 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	e003      	b.n	800419c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004198:	2300      	movs	r3, #0
 800419a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800419c:	e02e      	b.n	80041fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2200      	movs	r2, #0
 80041a6:	2180      	movs	r1, #128	@ 0x80
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f848 	bl	800423e <UART_WaitOnFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e03a      	b.n	8004236 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10b      	bne.n	80041de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	3302      	adds	r3, #2
 80041da:	61bb      	str	r3, [r7, #24]
 80041dc:	e007      	b.n	80041ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	781a      	ldrb	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	3301      	adds	r3, #1
 80041ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1cb      	bne.n	800419e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2200      	movs	r2, #0
 800420e:	2140      	movs	r1, #64	@ 0x40
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f814 	bl	800423e <UART_WaitOnFlagUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e006      	b.n	8004236 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	e000      	b.n	8004236 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004234:	2302      	movs	r3, #2
  }
}
 8004236:	4618      	mov	r0, r3
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b086      	sub	sp, #24
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	4613      	mov	r3, r2
 800424c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800424e:	e03b      	b.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004256:	d037      	beq.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004258:	f7fd ffa0 	bl	800219c <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	6a3a      	ldr	r2, [r7, #32]
 8004264:	429a      	cmp	r2, r3
 8004266:	d302      	bcc.n	800426e <UART_WaitOnFlagUntilTimeout+0x30>
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e03a      	b.n	80042e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d023      	beq.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b80      	cmp	r3, #128	@ 0x80
 8004284:	d020      	beq.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b40      	cmp	r3, #64	@ 0x40
 800428a:	d01d      	beq.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b08      	cmp	r3, #8
 8004298:	d116      	bne.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f81d 	bl	80042f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2208      	movs	r2, #8
 80042ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e00f      	b.n	80042e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4013      	ands	r3, r2
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	bf0c      	ite	eq
 80042d8:	2301      	moveq	r3, #1
 80042da:	2300      	movne	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	79fb      	ldrb	r3, [r7, #7]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d0b4      	beq.n	8004250 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b095      	sub	sp, #84	@ 0x54
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800430e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004318:	643a      	str	r2, [r7, #64]	@ 0x40
 800431a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800431e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e5      	bne.n	80042f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3314      	adds	r3, #20
 8004332:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	61fb      	str	r3, [r7, #28]
   return(result);
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f023 0301 	bic.w	r3, r3, #1
 8004342:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3314      	adds	r3, #20
 800434a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800434c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800434e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004352:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e5      	bne.n	800432c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004364:	2b01      	cmp	r3, #1
 8004366:	d119      	bne.n	800439c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	330c      	adds	r3, #12
 800436e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	60bb      	str	r3, [r7, #8]
   return(result);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f023 0310 	bic.w	r3, r3, #16
 800437e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	330c      	adds	r3, #12
 8004386:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004388:	61ba      	str	r2, [r7, #24]
 800438a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	6979      	ldr	r1, [r7, #20]
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	613b      	str	r3, [r7, #16]
   return(result);
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e5      	bne.n	8004368 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80043aa:	bf00      	nop
 80043ac:	3754      	adds	r7, #84	@ 0x54
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043bc:	b0c0      	sub	sp, #256	@ 0x100
 80043be:	af00      	add	r7, sp, #0
 80043c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d4:	68d9      	ldr	r1, [r3, #12]
 80043d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	ea40 0301 	orr.w	r3, r0, r1
 80043e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	431a      	orrs	r2, r3
 80043f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004410:	f021 010c 	bic.w	r1, r1, #12
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800441e:	430b      	orrs	r3, r1
 8004420:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800442e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004432:	6999      	ldr	r1, [r3, #24]
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	ea40 0301 	orr.w	r3, r0, r1
 800443e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	4b8f      	ldr	r3, [pc, #572]	@ (8004684 <UART_SetConfig+0x2cc>)
 8004448:	429a      	cmp	r2, r3
 800444a:	d005      	beq.n	8004458 <UART_SetConfig+0xa0>
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	4b8d      	ldr	r3, [pc, #564]	@ (8004688 <UART_SetConfig+0x2d0>)
 8004454:	429a      	cmp	r2, r3
 8004456:	d104      	bne.n	8004462 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004458:	f7fe fdb0 	bl	8002fbc <HAL_RCC_GetPCLK2Freq>
 800445c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004460:	e003      	b.n	800446a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004462:	f7fe fd97 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8004466:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800446a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004474:	f040 810c 	bne.w	8004690 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800447c:	2200      	movs	r2, #0
 800447e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004482:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004486:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800448a:	4622      	mov	r2, r4
 800448c:	462b      	mov	r3, r5
 800448e:	1891      	adds	r1, r2, r2
 8004490:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004492:	415b      	adcs	r3, r3
 8004494:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004496:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800449a:	4621      	mov	r1, r4
 800449c:	eb12 0801 	adds.w	r8, r2, r1
 80044a0:	4629      	mov	r1, r5
 80044a2:	eb43 0901 	adc.w	r9, r3, r1
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044ba:	4690      	mov	r8, r2
 80044bc:	4699      	mov	r9, r3
 80044be:	4623      	mov	r3, r4
 80044c0:	eb18 0303 	adds.w	r3, r8, r3
 80044c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044c8:	462b      	mov	r3, r5
 80044ca:	eb49 0303 	adc.w	r3, r9, r3
 80044ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80044e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044e6:	460b      	mov	r3, r1
 80044e8:	18db      	adds	r3, r3, r3
 80044ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80044ec:	4613      	mov	r3, r2
 80044ee:	eb42 0303 	adc.w	r3, r2, r3
 80044f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80044f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80044f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80044fc:	f7fc faaa 	bl	8000a54 <__aeabi_uldivmod>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4b61      	ldr	r3, [pc, #388]	@ (800468c <UART_SetConfig+0x2d4>)
 8004506:	fba3 2302 	umull	r2, r3, r3, r2
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	011c      	lsls	r4, r3, #4
 800450e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004512:	2200      	movs	r2, #0
 8004514:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004518:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800451c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004520:	4642      	mov	r2, r8
 8004522:	464b      	mov	r3, r9
 8004524:	1891      	adds	r1, r2, r2
 8004526:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004528:	415b      	adcs	r3, r3
 800452a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800452c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004530:	4641      	mov	r1, r8
 8004532:	eb12 0a01 	adds.w	sl, r2, r1
 8004536:	4649      	mov	r1, r9
 8004538:	eb43 0b01 	adc.w	fp, r3, r1
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004548:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800454c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004550:	4692      	mov	sl, r2
 8004552:	469b      	mov	fp, r3
 8004554:	4643      	mov	r3, r8
 8004556:	eb1a 0303 	adds.w	r3, sl, r3
 800455a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800455e:	464b      	mov	r3, r9
 8004560:	eb4b 0303 	adc.w	r3, fp, r3
 8004564:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004574:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004578:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800457c:	460b      	mov	r3, r1
 800457e:	18db      	adds	r3, r3, r3
 8004580:	643b      	str	r3, [r7, #64]	@ 0x40
 8004582:	4613      	mov	r3, r2
 8004584:	eb42 0303 	adc.w	r3, r2, r3
 8004588:	647b      	str	r3, [r7, #68]	@ 0x44
 800458a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800458e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004592:	f7fc fa5f 	bl	8000a54 <__aeabi_uldivmod>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4611      	mov	r1, r2
 800459c:	4b3b      	ldr	r3, [pc, #236]	@ (800468c <UART_SetConfig+0x2d4>)
 800459e:	fba3 2301 	umull	r2, r3, r3, r1
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	2264      	movs	r2, #100	@ 0x64
 80045a6:	fb02 f303 	mul.w	r3, r2, r3
 80045aa:	1acb      	subs	r3, r1, r3
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045b2:	4b36      	ldr	r3, [pc, #216]	@ (800468c <UART_SetConfig+0x2d4>)
 80045b4:	fba3 2302 	umull	r2, r3, r3, r2
 80045b8:	095b      	lsrs	r3, r3, #5
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045c0:	441c      	add	r4, r3
 80045c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045c6:	2200      	movs	r2, #0
 80045c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80045d4:	4642      	mov	r2, r8
 80045d6:	464b      	mov	r3, r9
 80045d8:	1891      	adds	r1, r2, r2
 80045da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045dc:	415b      	adcs	r3, r3
 80045de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80045e4:	4641      	mov	r1, r8
 80045e6:	1851      	adds	r1, r2, r1
 80045e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80045ea:	4649      	mov	r1, r9
 80045ec:	414b      	adcs	r3, r1
 80045ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80045fc:	4659      	mov	r1, fp
 80045fe:	00cb      	lsls	r3, r1, #3
 8004600:	4651      	mov	r1, sl
 8004602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004606:	4651      	mov	r1, sl
 8004608:	00ca      	lsls	r2, r1, #3
 800460a:	4610      	mov	r0, r2
 800460c:	4619      	mov	r1, r3
 800460e:	4603      	mov	r3, r0
 8004610:	4642      	mov	r2, r8
 8004612:	189b      	adds	r3, r3, r2
 8004614:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004618:	464b      	mov	r3, r9
 800461a:	460a      	mov	r2, r1
 800461c:	eb42 0303 	adc.w	r3, r2, r3
 8004620:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004630:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004634:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004638:	460b      	mov	r3, r1
 800463a:	18db      	adds	r3, r3, r3
 800463c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800463e:	4613      	mov	r3, r2
 8004640:	eb42 0303 	adc.w	r3, r2, r3
 8004644:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004646:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800464a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800464e:	f7fc fa01 	bl	8000a54 <__aeabi_uldivmod>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4b0d      	ldr	r3, [pc, #52]	@ (800468c <UART_SetConfig+0x2d4>)
 8004658:	fba3 1302 	umull	r1, r3, r3, r2
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	2164      	movs	r1, #100	@ 0x64
 8004660:	fb01 f303 	mul.w	r3, r1, r3
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	3332      	adds	r3, #50	@ 0x32
 800466a:	4a08      	ldr	r2, [pc, #32]	@ (800468c <UART_SetConfig+0x2d4>)
 800466c:	fba2 2303 	umull	r2, r3, r2, r3
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	f003 0207 	and.w	r2, r3, #7
 8004676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4422      	add	r2, r4
 800467e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004680:	e106      	b.n	8004890 <UART_SetConfig+0x4d8>
 8004682:	bf00      	nop
 8004684:	40011000 	.word	0x40011000
 8004688:	40011400 	.word	0x40011400
 800468c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004694:	2200      	movs	r2, #0
 8004696:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800469a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800469e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046a2:	4642      	mov	r2, r8
 80046a4:	464b      	mov	r3, r9
 80046a6:	1891      	adds	r1, r2, r2
 80046a8:	6239      	str	r1, [r7, #32]
 80046aa:	415b      	adcs	r3, r3
 80046ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046b2:	4641      	mov	r1, r8
 80046b4:	1854      	adds	r4, r2, r1
 80046b6:	4649      	mov	r1, r9
 80046b8:	eb43 0501 	adc.w	r5, r3, r1
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	00eb      	lsls	r3, r5, #3
 80046c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ca:	00e2      	lsls	r2, r4, #3
 80046cc:	4614      	mov	r4, r2
 80046ce:	461d      	mov	r5, r3
 80046d0:	4643      	mov	r3, r8
 80046d2:	18e3      	adds	r3, r4, r3
 80046d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046d8:	464b      	mov	r3, r9
 80046da:	eb45 0303 	adc.w	r3, r5, r3
 80046de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046f2:	f04f 0200 	mov.w	r2, #0
 80046f6:	f04f 0300 	mov.w	r3, #0
 80046fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80046fe:	4629      	mov	r1, r5
 8004700:	008b      	lsls	r3, r1, #2
 8004702:	4621      	mov	r1, r4
 8004704:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004708:	4621      	mov	r1, r4
 800470a:	008a      	lsls	r2, r1, #2
 800470c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004710:	f7fc f9a0 	bl	8000a54 <__aeabi_uldivmod>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4b60      	ldr	r3, [pc, #384]	@ (800489c <UART_SetConfig+0x4e4>)
 800471a:	fba3 2302 	umull	r2, r3, r3, r2
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	011c      	lsls	r4, r3, #4
 8004722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004726:	2200      	movs	r2, #0
 8004728:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800472c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004730:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004734:	4642      	mov	r2, r8
 8004736:	464b      	mov	r3, r9
 8004738:	1891      	adds	r1, r2, r2
 800473a:	61b9      	str	r1, [r7, #24]
 800473c:	415b      	adcs	r3, r3
 800473e:	61fb      	str	r3, [r7, #28]
 8004740:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004744:	4641      	mov	r1, r8
 8004746:	1851      	adds	r1, r2, r1
 8004748:	6139      	str	r1, [r7, #16]
 800474a:	4649      	mov	r1, r9
 800474c:	414b      	adcs	r3, r1
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800475c:	4659      	mov	r1, fp
 800475e:	00cb      	lsls	r3, r1, #3
 8004760:	4651      	mov	r1, sl
 8004762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004766:	4651      	mov	r1, sl
 8004768:	00ca      	lsls	r2, r1, #3
 800476a:	4610      	mov	r0, r2
 800476c:	4619      	mov	r1, r3
 800476e:	4603      	mov	r3, r0
 8004770:	4642      	mov	r2, r8
 8004772:	189b      	adds	r3, r3, r2
 8004774:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004778:	464b      	mov	r3, r9
 800477a:	460a      	mov	r2, r1
 800477c:	eb42 0303 	adc.w	r3, r2, r3
 8004780:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800478e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800479c:	4649      	mov	r1, r9
 800479e:	008b      	lsls	r3, r1, #2
 80047a0:	4641      	mov	r1, r8
 80047a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047a6:	4641      	mov	r1, r8
 80047a8:	008a      	lsls	r2, r1, #2
 80047aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047ae:	f7fc f951 	bl	8000a54 <__aeabi_uldivmod>
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	4611      	mov	r1, r2
 80047b8:	4b38      	ldr	r3, [pc, #224]	@ (800489c <UART_SetConfig+0x4e4>)
 80047ba:	fba3 2301 	umull	r2, r3, r3, r1
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	2264      	movs	r2, #100	@ 0x64
 80047c2:	fb02 f303 	mul.w	r3, r2, r3
 80047c6:	1acb      	subs	r3, r1, r3
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	3332      	adds	r3, #50	@ 0x32
 80047cc:	4a33      	ldr	r2, [pc, #204]	@ (800489c <UART_SetConfig+0x4e4>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047d8:	441c      	add	r4, r3
 80047da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047de:	2200      	movs	r2, #0
 80047e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80047e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80047e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80047e8:	4642      	mov	r2, r8
 80047ea:	464b      	mov	r3, r9
 80047ec:	1891      	adds	r1, r2, r2
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	415b      	adcs	r3, r3
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047f8:	4641      	mov	r1, r8
 80047fa:	1851      	adds	r1, r2, r1
 80047fc:	6039      	str	r1, [r7, #0]
 80047fe:	4649      	mov	r1, r9
 8004800:	414b      	adcs	r3, r1
 8004802:	607b      	str	r3, [r7, #4]
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004810:	4659      	mov	r1, fp
 8004812:	00cb      	lsls	r3, r1, #3
 8004814:	4651      	mov	r1, sl
 8004816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800481a:	4651      	mov	r1, sl
 800481c:	00ca      	lsls	r2, r1, #3
 800481e:	4610      	mov	r0, r2
 8004820:	4619      	mov	r1, r3
 8004822:	4603      	mov	r3, r0
 8004824:	4642      	mov	r2, r8
 8004826:	189b      	adds	r3, r3, r2
 8004828:	66bb      	str	r3, [r7, #104]	@ 0x68
 800482a:	464b      	mov	r3, r9
 800482c:	460a      	mov	r2, r1
 800482e:	eb42 0303 	adc.w	r3, r2, r3
 8004832:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	663b      	str	r3, [r7, #96]	@ 0x60
 800483e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800484c:	4649      	mov	r1, r9
 800484e:	008b      	lsls	r3, r1, #2
 8004850:	4641      	mov	r1, r8
 8004852:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004856:	4641      	mov	r1, r8
 8004858:	008a      	lsls	r2, r1, #2
 800485a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800485e:	f7fc f8f9 	bl	8000a54 <__aeabi_uldivmod>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4b0d      	ldr	r3, [pc, #52]	@ (800489c <UART_SetConfig+0x4e4>)
 8004868:	fba3 1302 	umull	r1, r3, r3, r2
 800486c:	095b      	lsrs	r3, r3, #5
 800486e:	2164      	movs	r1, #100	@ 0x64
 8004870:	fb01 f303 	mul.w	r3, r1, r3
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	3332      	adds	r3, #50	@ 0x32
 800487a:	4a08      	ldr	r2, [pc, #32]	@ (800489c <UART_SetConfig+0x4e4>)
 800487c:	fba2 2303 	umull	r2, r3, r2, r3
 8004880:	095b      	lsrs	r3, r3, #5
 8004882:	f003 020f 	and.w	r2, r3, #15
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4422      	add	r2, r4
 800488e:	609a      	str	r2, [r3, #8]
}
 8004890:	bf00      	nop
 8004892:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004896:	46bd      	mov	sp, r7
 8004898:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800489c:	51eb851f 	.word	0x51eb851f

080048a0 <memset>:
 80048a0:	4402      	add	r2, r0
 80048a2:	4603      	mov	r3, r0
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d100      	bne.n	80048aa <memset+0xa>
 80048a8:	4770      	bx	lr
 80048aa:	f803 1b01 	strb.w	r1, [r3], #1
 80048ae:	e7f9      	b.n	80048a4 <memset+0x4>

080048b0 <__libc_init_array>:
 80048b0:	b570      	push	{r4, r5, r6, lr}
 80048b2:	4d0d      	ldr	r5, [pc, #52]	@ (80048e8 <__libc_init_array+0x38>)
 80048b4:	4c0d      	ldr	r4, [pc, #52]	@ (80048ec <__libc_init_array+0x3c>)
 80048b6:	1b64      	subs	r4, r4, r5
 80048b8:	10a4      	asrs	r4, r4, #2
 80048ba:	2600      	movs	r6, #0
 80048bc:	42a6      	cmp	r6, r4
 80048be:	d109      	bne.n	80048d4 <__libc_init_array+0x24>
 80048c0:	4d0b      	ldr	r5, [pc, #44]	@ (80048f0 <__libc_init_array+0x40>)
 80048c2:	4c0c      	ldr	r4, [pc, #48]	@ (80048f4 <__libc_init_array+0x44>)
 80048c4:	f000 f818 	bl	80048f8 <_init>
 80048c8:	1b64      	subs	r4, r4, r5
 80048ca:	10a4      	asrs	r4, r4, #2
 80048cc:	2600      	movs	r6, #0
 80048ce:	42a6      	cmp	r6, r4
 80048d0:	d105      	bne.n	80048de <__libc_init_array+0x2e>
 80048d2:	bd70      	pop	{r4, r5, r6, pc}
 80048d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d8:	4798      	blx	r3
 80048da:	3601      	adds	r6, #1
 80048dc:	e7ee      	b.n	80048bc <__libc_init_array+0xc>
 80048de:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e2:	4798      	blx	r3
 80048e4:	3601      	adds	r6, #1
 80048e6:	e7f2      	b.n	80048ce <__libc_init_array+0x1e>
 80048e8:	08004930 	.word	0x08004930
 80048ec:	08004930 	.word	0x08004930
 80048f0:	08004930 	.word	0x08004930
 80048f4:	08004934 	.word	0x08004934

080048f8 <_init>:
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fa:	bf00      	nop
 80048fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fe:	bc08      	pop	{r3}
 8004900:	469e      	mov	lr, r3
 8004902:	4770      	bx	lr

08004904 <_fini>:
 8004904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004906:	bf00      	nop
 8004908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490a:	bc08      	pop	{r3}
 800490c:	469e      	mov	lr, r3
 800490e:	4770      	bx	lr
