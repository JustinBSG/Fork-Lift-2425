
jason_fork_lift_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077b4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08007990  08007990  00008990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a40  08007a40  000090f0  2**0
                  CONTENTS
  4 .ARM          00000008  08007a40  08007a40  00008a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a48  08007a48  000090f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a48  08007a48  00008a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a4c  08007a4c  00008a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f0  20000000  08007a50  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  200000f0  08007b40  000090f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  08007b40  00009554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013abe  00000000  00000000  00009120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b03  00000000  00000000  0001cbde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  0001f6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d30  00000000  00000000  000207d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000202f3  00000000  00000000  00021508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015624  00000000  00000000  000417fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9e48  00000000  00000000  00056e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130c67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b8c  00000000  00000000  00130cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00135838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000f0 	.word	0x200000f0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007974 	.word	0x08007974

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000f4 	.word	0x200000f4
 8000214:	08007974 	.word	0x08007974

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c34:	f000 b96a 	b.w	8000f0c <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9d08      	ldr	r5, [sp, #32]
 8000c56:	460c      	mov	r4, r1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d14e      	bne.n	8000cfa <__udivmoddi4+0xaa>
 8000c5c:	4694      	mov	ip, r2
 8000c5e:	458c      	cmp	ip, r1
 8000c60:	4686      	mov	lr, r0
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	d962      	bls.n	8000d2e <__udivmoddi4+0xde>
 8000c68:	b14a      	cbz	r2, 8000c7e <__udivmoddi4+0x2e>
 8000c6a:	f1c2 0320 	rsb	r3, r2, #32
 8000c6e:	4091      	lsls	r1, r2
 8000c70:	fa20 f303 	lsr.w	r3, r0, r3
 8000c74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f f68c 	uxth.w	r6, ip
 8000c86:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c96:	fb04 f106 	mul.w	r1, r4, r6
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x64>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000ca6:	f080 8112 	bcs.w	8000ece <__udivmoddi4+0x27e>
 8000caa:	4299      	cmp	r1, r3
 8000cac:	f240 810f 	bls.w	8000ece <__udivmoddi4+0x27e>
 8000cb0:	3c02      	subs	r4, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1a59      	subs	r1, r3, r1
 8000cb6:	fa1f f38e 	uxth.w	r3, lr
 8000cba:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbe:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc6:	fb00 f606 	mul.w	r6, r0, r6
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	d90a      	bls.n	8000ce4 <__udivmoddi4+0x94>
 8000cce:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cd6:	f080 80fc 	bcs.w	8000ed2 <__udivmoddi4+0x282>
 8000cda:	429e      	cmp	r6, r3
 8000cdc:	f240 80f9 	bls.w	8000ed2 <__udivmoddi4+0x282>
 8000ce0:	4463      	add	r3, ip
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cea:	2100      	movs	r1, #0
 8000cec:	b11d      	cbz	r5, 8000cf6 <__udivmoddi4+0xa6>
 8000cee:	40d3      	lsrs	r3, r2
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d905      	bls.n	8000d0a <__udivmoddi4+0xba>
 8000cfe:	b10d      	cbz	r5, 8000d04 <__udivmoddi4+0xb4>
 8000d00:	e9c5 0100 	strd	r0, r1, [r5]
 8000d04:	2100      	movs	r1, #0
 8000d06:	4608      	mov	r0, r1
 8000d08:	e7f5      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000d0a:	fab3 f183 	clz	r1, r3
 8000d0e:	2900      	cmp	r1, #0
 8000d10:	d146      	bne.n	8000da0 <__udivmoddi4+0x150>
 8000d12:	42a3      	cmp	r3, r4
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xcc>
 8000d16:	4290      	cmp	r0, r2
 8000d18:	f0c0 80f0 	bcc.w	8000efc <__udivmoddi4+0x2ac>
 8000d1c:	1a86      	subs	r6, r0, r2
 8000d1e:	eb64 0303 	sbc.w	r3, r4, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d0e6      	beq.n	8000cf6 <__udivmoddi4+0xa6>
 8000d28:	e9c5 6300 	strd	r6, r3, [r5]
 8000d2c:	e7e3      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	f040 8090 	bne.w	8000e54 <__udivmoddi4+0x204>
 8000d34:	eba1 040c 	sub.w	r4, r1, ip
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	fa1f f78c 	uxth.w	r7, ip
 8000d40:	2101      	movs	r1, #1
 8000d42:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d4a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb07 f006 	mul.w	r0, r7, r6
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x11c>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x11a>
 8000d64:	4298      	cmp	r0, r3
 8000d66:	f200 80cd 	bhi.w	8000f04 <__udivmoddi4+0x2b4>
 8000d6a:	4626      	mov	r6, r4
 8000d6c:	1a1c      	subs	r4, r3, r0
 8000d6e:	fa1f f38e 	uxth.w	r3, lr
 8000d72:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d76:	fb08 4410 	mls	r4, r8, r0, r4
 8000d7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7e:	fb00 f707 	mul.w	r7, r0, r7
 8000d82:	429f      	cmp	r7, r3
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x148>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x146>
 8000d90:	429f      	cmp	r7, r3
 8000d92:	f200 80b0 	bhi.w	8000ef6 <__udivmoddi4+0x2a6>
 8000d96:	4620      	mov	r0, r4
 8000d98:	1bdb      	subs	r3, r3, r7
 8000d9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9e:	e7a5      	b.n	8000cec <__udivmoddi4+0x9c>
 8000da0:	f1c1 0620 	rsb	r6, r1, #32
 8000da4:	408b      	lsls	r3, r1
 8000da6:	fa22 f706 	lsr.w	r7, r2, r6
 8000daa:	431f      	orrs	r7, r3
 8000dac:	fa20 fc06 	lsr.w	ip, r0, r6
 8000db0:	fa04 f301 	lsl.w	r3, r4, r1
 8000db4:	ea43 030c 	orr.w	r3, r3, ip
 8000db8:	40f4      	lsrs	r4, r6
 8000dba:	fa00 f801 	lsl.w	r8, r0, r1
 8000dbe:	0c38      	lsrs	r0, r7, #16
 8000dc0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dc4:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc8:	fa1f fc87 	uxth.w	ip, r7
 8000dcc:	fb00 441e 	mls	r4, r0, lr, r4
 8000dd0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd4:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd8:	45a1      	cmp	r9, r4
 8000dda:	fa02 f201 	lsl.w	r2, r2, r1
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x1a6>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000de6:	f080 8084 	bcs.w	8000ef2 <__udivmoddi4+0x2a2>
 8000dea:	45a1      	cmp	r9, r4
 8000dec:	f240 8081 	bls.w	8000ef2 <__udivmoddi4+0x2a2>
 8000df0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	eba4 0409 	sub.w	r4, r4, r9
 8000dfa:	fa1f f983 	uxth.w	r9, r3
 8000dfe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e02:	fb00 4413 	mls	r4, r0, r3, r4
 8000e06:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e0e:	45a4      	cmp	ip, r4
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x1d2>
 8000e12:	193c      	adds	r4, r7, r4
 8000e14:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e18:	d267      	bcs.n	8000eea <__udivmoddi4+0x29a>
 8000e1a:	45a4      	cmp	ip, r4
 8000e1c:	d965      	bls.n	8000eea <__udivmoddi4+0x29a>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	443c      	add	r4, r7
 8000e22:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e26:	fba0 9302 	umull	r9, r3, r0, r2
 8000e2a:	eba4 040c 	sub.w	r4, r4, ip
 8000e2e:	429c      	cmp	r4, r3
 8000e30:	46ce      	mov	lr, r9
 8000e32:	469c      	mov	ip, r3
 8000e34:	d351      	bcc.n	8000eda <__udivmoddi4+0x28a>
 8000e36:	d04e      	beq.n	8000ed6 <__udivmoddi4+0x286>
 8000e38:	b155      	cbz	r5, 8000e50 <__udivmoddi4+0x200>
 8000e3a:	ebb8 030e 	subs.w	r3, r8, lr
 8000e3e:	eb64 040c 	sbc.w	r4, r4, ip
 8000e42:	fa04 f606 	lsl.w	r6, r4, r6
 8000e46:	40cb      	lsrs	r3, r1
 8000e48:	431e      	orrs	r6, r3
 8000e4a:	40cc      	lsrs	r4, r1
 8000e4c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e50:	2100      	movs	r1, #0
 8000e52:	e750      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000e54:	f1c2 0320 	rsb	r3, r2, #32
 8000e58:	fa20 f103 	lsr.w	r1, r0, r3
 8000e5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e60:	fa24 f303 	lsr.w	r3, r4, r3
 8000e64:	4094      	lsls	r4, r2
 8000e66:	430c      	orrs	r4, r1
 8000e68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e6c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e78:	fb08 3110 	mls	r1, r8, r0, r3
 8000e7c:	0c23      	lsrs	r3, r4, #16
 8000e7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e82:	fb00 f107 	mul.w	r1, r0, r7
 8000e86:	4299      	cmp	r1, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x24c>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e92:	d22c      	bcs.n	8000eee <__udivmoddi4+0x29e>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	d92a      	bls.n	8000eee <__udivmoddi4+0x29e>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	1a5b      	subs	r3, r3, r1
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ea4:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eac:	fb01 f307 	mul.w	r3, r1, r7
 8000eb0:	42a3      	cmp	r3, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x276>
 8000eb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ebc:	d213      	bcs.n	8000ee6 <__udivmoddi4+0x296>
 8000ebe:	42a3      	cmp	r3, r4
 8000ec0:	d911      	bls.n	8000ee6 <__udivmoddi4+0x296>
 8000ec2:	3902      	subs	r1, #2
 8000ec4:	4464      	add	r4, ip
 8000ec6:	1ae4      	subs	r4, r4, r3
 8000ec8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ecc:	e739      	b.n	8000d42 <__udivmoddi4+0xf2>
 8000ece:	4604      	mov	r4, r0
 8000ed0:	e6f0      	b.n	8000cb4 <__udivmoddi4+0x64>
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e706      	b.n	8000ce4 <__udivmoddi4+0x94>
 8000ed6:	45c8      	cmp	r8, r9
 8000ed8:	d2ae      	bcs.n	8000e38 <__udivmoddi4+0x1e8>
 8000eda:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ede:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ee2:	3801      	subs	r0, #1
 8000ee4:	e7a8      	b.n	8000e38 <__udivmoddi4+0x1e8>
 8000ee6:	4631      	mov	r1, r6
 8000ee8:	e7ed      	b.n	8000ec6 <__udivmoddi4+0x276>
 8000eea:	4603      	mov	r3, r0
 8000eec:	e799      	b.n	8000e22 <__udivmoddi4+0x1d2>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e7d4      	b.n	8000e9c <__udivmoddi4+0x24c>
 8000ef2:	46d6      	mov	lr, sl
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1a6>
 8000ef6:	4463      	add	r3, ip
 8000ef8:	3802      	subs	r0, #2
 8000efa:	e74d      	b.n	8000d98 <__udivmoddi4+0x148>
 8000efc:	4606      	mov	r6, r0
 8000efe:	4623      	mov	r3, r4
 8000f00:	4608      	mov	r0, r1
 8000f02:	e70f      	b.n	8000d24 <__udivmoddi4+0xd4>
 8000f04:	3e02      	subs	r6, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	e730      	b.n	8000d6c <__udivmoddi4+0x11c>
 8000f0a:	bf00      	nop

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <update_encoder>:
  encoder->displacement = 0;
  encoder->velocity = 0;
  encoder->last_counter_value = 0;
}

void update_encoder(EncoderData* encoder) {
 8000f10:	b5b0      	push	{r4, r5, r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  int current_counter = __HAL_TIM_GET_COUNTER(encoder->htim);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f20:	613b      	str	r3, [r7, #16]
  uint32_t duration = HAL_GetTick() - encoder->last_tick;
 8000f22:	f002 fcbd 	bl	80038a0 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	60fb      	str	r3, [r7, #12]
  int num_pulse = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  if (duration <= 1)  // delay for encode to update, in ms
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	f240 8095 	bls.w	8001066 <update_encoder+0x156>
    return;

  if (current_counter == encoder->last_counter_value) {
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d102      	bne.n	8000f4c <update_encoder+0x3c>
    num_pulse = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	e035      	b.n	8000fb8 <update_encoder+0xa8>
  } else if (current_counter > encoder->last_counter_value) {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	dd18      	ble.n	8000f88 <update_encoder+0x78>
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move backward, count down, overflow
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	2b10      	cmp	r3, #16
 8000f64:	d10a      	bne.n	8000f7c <update_encoder+0x6c>
      num_pulse = (__HAL_TIM_GET_AUTORELOAD(encoder->htim) - current_counter + encoder->last_counter_value) * -1;
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	6892      	ldr	r2, [r2, #8]
 8000f76:	1a9b      	subs	r3, r3, r2
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	e01d      	b.n	8000fb8 <update_encoder+0xa8>
    } else {  // move forward, count up, no overflow
      num_pulse = current_counter - encoder->last_counter_value;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	e017      	b.n	8000fb8 <update_encoder+0xa8>
    }
  } else {
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move up, count up, overflow
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0310 	and.w	r3, r3, #16
 8000f94:	2b10      	cmp	r3, #16
 8000f96:	d105      	bne.n	8000fa4 <update_encoder+0x94>
      num_pulse = (encoder->last_counter_value - current_counter) * -1;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	e009      	b.n	8000fb8 <update_encoder+0xa8>
    } else {  // move backward, count down, no overflow
      num_pulse = __HAL_TIM_GET_AUTORELOAD(encoder->htim) - encoder->last_counter_value + current_counter;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	6892      	ldr	r2, [r2, #8]
 8000fb0:	1a9a      	subs	r2, r3, r2
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	617b      	str	r3, [r7, #20]
    }
  }

  float temp_displacement = (float)num_pulse / encoder->_ppr * 2.0 * M_PI;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	ee07 3a90 	vmov	s15, r3
 8000fbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	8a9b      	ldrh	r3, [r3, #20]
 8000fc6:	ee07 3a90 	vmov	s15, r3
 8000fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000fd2:	ee16 0a90 	vmov	r0, s13
 8000fd6:	f7ff fa83 	bl	80004e0 <__aeabi_f2d>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	f7ff f921 	bl	8000224 <__adddf3>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	a322      	add	r3, pc, #136	@ (adr r3, 8001074 <update_encoder+0x164>)
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	f7ff face 	bl	8000590 <__aeabi_dmul>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f7ff fdc0 	bl	8000b80 <__aeabi_d2f>
 8001000:	4603      	mov	r3, r0
 8001002:	60bb      	str	r3, [r7, #8]
  encoder->last_counter_value = current_counter;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	609a      	str	r2, [r3, #8]
  encoder->displacement += temp_displacement;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	ed93 7a00 	vldr	s14, [r3]
 8001010:	edd7 7a02 	vldr	s15, [r7, #8]
 8001014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	edc3 7a00 	vstr	s15, [r3]
  encoder->velocity = temp_displacement * 1000.0 / duration;
 800101e:	68b8      	ldr	r0, [r7, #8]
 8001020:	f7ff fa5e 	bl	80004e0 <__aeabi_f2d>
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <update_encoder+0x160>)
 800102a:	f7ff fab1 	bl	8000590 <__aeabi_dmul>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4614      	mov	r4, r2
 8001034:	461d      	mov	r5, r3
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f7ff fa30 	bl	800049c <__aeabi_ui2d>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4620      	mov	r0, r4
 8001042:	4629      	mov	r1, r5
 8001044:	f7ff fbce 	bl	80007e4 <__aeabi_ddiv>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	f7ff fd96 	bl	8000b80 <__aeabi_d2f>
 8001054:	4602      	mov	r2, r0
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	605a      	str	r2, [r3, #4]
  encoder->last_tick = HAL_GetTick();
 800105a:	f002 fc21 	bl	80038a0 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	e000      	b.n	8001068 <update_encoder+0x158>
    return;
 8001066:	bf00      	nop
}
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bdb0      	pop	{r4, r5, r7, pc}
 800106e:	bf00      	nop
 8001070:	408f4000 	.word	0x408f4000
 8001074:	54442d18 	.word	0x54442d18
 8001078:	400921fb 	.word	0x400921fb

0800107c <read_current_velocity>:

WheelVelocity read_current_velocity(EncoderData* encoders) {
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b095      	sub	sp, #84	@ 0x54
 8001080:	af00      	add	r7, sp, #0
 8001082:	6178      	str	r0, [r7, #20]
  if (encoders == NULL)
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d107      	bne.n	800109a <read_current_velocity+0x1e>
    return (WheelVelocity){0, 0, 0, 0};
 800108a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	e030      	b.n	80010fc <read_current_velocity+0x80>

  WheelVelocity velocities = {.front_left = 0, .front_right = 0, .rear_left = 0, .rear_right = 0};
 800109a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80010ac:	e00d      	b.n	80010ca <read_current_velocity+0x4e>
    update_encoder(&(encoders[i]));
 80010ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	461a      	mov	r2, r3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	4413      	add	r3, r2
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff26 	bl	8000f10 <update_encoder>
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 80010c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010c6:	3301      	adds	r3, #1
 80010c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80010ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	ddee      	ble.n	80010ae <read_current_velocity+0x32>

  velocities.front_left = encoders[FRONT_LEFT].velocity;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  velocities.front_right = encoders[FRONT_RIGHT].velocity;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3318      	adds	r3, #24
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	633b      	str	r3, [r7, #48]	@ 0x30
  velocities.rear_left = encoders[REAR_LEFT].velocity;
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3330      	adds	r3, #48	@ 0x30
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	637b      	str	r3, [r7, #52]	@ 0x34
  velocities.rear_right = encoders[REAR_RIGHT].velocity;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3348      	adds	r3, #72	@ 0x48
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	63bb      	str	r3, [r7, #56]	@ 0x38

  return velocities;
 80010ee:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80010f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80010fc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80010fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001100:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001104:	ee06 0a10 	vmov	s12, r0
 8001108:	ee06 1a90 	vmov	s13, r1
 800110c:	ee07 2a10 	vmov	s14, r2
 8001110:	ee07 3a90 	vmov	s15, r3
 8001114:	eeb0 0a46 	vmov.f32	s0, s12
 8001118:	eef0 0a66 	vmov.f32	s1, s13
 800111c:	eeb0 1a47 	vmov.f32	s2, s14
 8001120:	eef0 1a67 	vmov.f32	s3, s15
 8001124:	3754      	adds	r7, #84	@ 0x54
 8001126:	46bd      	mov	sp, r7
 8001128:	bd90      	pop	{r4, r7, pc}
	...

0800112c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	@ 0x28
 8001130:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001142:	4b4a      	ldr	r3, [pc, #296]	@ (800126c <MX_GPIO_Init+0x140>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	4a49      	ldr	r2, [pc, #292]	@ (800126c <MX_GPIO_Init+0x140>)
 8001148:	f043 0310 	orr.w	r3, r3, #16
 800114c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114e:	4b47      	ldr	r3, [pc, #284]	@ (800126c <MX_GPIO_Init+0x140>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	f003 0310 	and.w	r3, r3, #16
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	4b44      	ldr	r3, [pc, #272]	@ (800126c <MX_GPIO_Init+0x140>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	4a43      	ldr	r2, [pc, #268]	@ (800126c <MX_GPIO_Init+0x140>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001166:	4b41      	ldr	r3, [pc, #260]	@ (800126c <MX_GPIO_Init+0x140>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001172:	4b3e      	ldr	r3, [pc, #248]	@ (800126c <MX_GPIO_Init+0x140>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	4a3d      	ldr	r2, [pc, #244]	@ (800126c <MX_GPIO_Init+0x140>)
 8001178:	f043 0320 	orr.w	r3, r3, #32
 800117c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117e:	4b3b      	ldr	r3, [pc, #236]	@ (800126c <MX_GPIO_Init+0x140>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001182:	f003 0320 	and.w	r3, r3, #32
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	4b38      	ldr	r3, [pc, #224]	@ (800126c <MX_GPIO_Init+0x140>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	4a37      	ldr	r2, [pc, #220]	@ (800126c <MX_GPIO_Init+0x140>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001196:	4b35      	ldr	r3, [pc, #212]	@ (800126c <MX_GPIO_Init+0x140>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a2:	4b32      	ldr	r3, [pc, #200]	@ (800126c <MX_GPIO_Init+0x140>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	4a31      	ldr	r2, [pc, #196]	@ (800126c <MX_GPIO_Init+0x140>)
 80011a8:	f043 0308 	orr.w	r3, r3, #8
 80011ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ae:	4b2f      	ldr	r3, [pc, #188]	@ (800126c <MX_GPIO_Init+0x140>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	f003 0308 	and.w	r3, r3, #8
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2108      	movs	r1, #8
 80011be:	482c      	ldr	r0, [pc, #176]	@ (8001270 <MX_GPIO_Init+0x144>)
 80011c0:	f002 fe02 	bl	8003dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 80011ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ce:	f002 fdfb 	bl	8003dc8 <HAL_GPIO_WritePin>
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 80011d8:	4826      	ldr	r0, [pc, #152]	@ (8001274 <MX_GPIO_Init+0x148>)
 80011da:	f002 fdf5 	bl	8003dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011e4:	4824      	ldr	r0, [pc, #144]	@ (8001278 <MX_GPIO_Init+0x14c>)
 80011e6:	f002 fdef 	bl	8003dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_LEFT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_LEFT_ENABLE_Pin;
 80011ea:	2308      	movs	r3, #8
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_LEFT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	481b      	ldr	r0, [pc, #108]	@ (8001270 <MX_GPIO_Init+0x144>)
 8001202:	f002 fc5f 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FL_IN2_Pin MOTOR_FL_IN1_Pin MOTOR_RL_IN1_Pin MOTOR_RL_IN2_Pin
                           MOTOR_RR_IN2_Pin MOTOR_RR_IN1_Pin MOTOR_FR_IN1_Pin MOTOR_FR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 8001206:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 800120a:	617b      	str	r3, [r7, #20]
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001222:	f002 fc4f 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin;
 8001226:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2301      	movs	r3, #1
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	480d      	ldr	r0, [pc, #52]	@ (8001274 <MX_GPIO_Init+0x148>)
 8001240:	f002 fc40 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_RIGHT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_RIGHT_ENABLE_Pin;
 8001244:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124a:	2301      	movs	r3, #1
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_RIGHT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	4806      	ldr	r0, [pc, #24]	@ (8001278 <MX_GPIO_Init+0x14c>)
 800125e:	f002 fc31 	bl	8003ac4 <HAL_GPIO_Init>

}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	@ 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000
 8001270:	48000800 	.word	0x48000800
 8001274:	48001000 	.word	0x48001000
 8001278:	48000c00 	.word	0x48000c00

0800127c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001280:	f002 faa9 	bl	80037d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001284:	f000 f8b8 	bl	80013f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001288:	f7ff ff50 	bl	800112c <MX_GPIO_Init>
  MX_TIM1_Init();
 800128c:	f001 fd80 	bl	8002d90 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001290:	f001 fe4e 	bl	8002f30 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001294:	f001 feda 	bl	800304c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001298:	f001 ff2e 	bl	80030f8 <MX_TIM5_Init>
  MX_TIM8_Init();
 800129c:	f001 ff82 	bl	80031a4 <MX_TIM8_Init>
  MX_TIM2_Init();
 80012a0:	f001 fdd0 	bl	8002e44 <MX_TIM2_Init>
  MX_UART4_Init();
 80012a4:	f002 f93e 	bl	8003524 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80012a8:	f002 f988 	bl	80035bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012ac:	2100      	movs	r1, #0
 80012ae:	4845      	ldr	r0, [pc, #276]	@ (80013c4 <main+0x148>)
 80012b0:	f003 ff04 	bl	80050bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80012b4:	2104      	movs	r1, #4
 80012b6:	4843      	ldr	r0, [pc, #268]	@ (80013c4 <main+0x148>)
 80012b8:	f003 ff00 	bl	80050bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80012bc:	210c      	movs	r1, #12
 80012be:	4841      	ldr	r0, [pc, #260]	@ (80013c4 <main+0x148>)
 80012c0:	f003 fefc 	bl	80050bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80012c4:	210c      	movs	r1, #12
 80012c6:	4840      	ldr	r0, [pc, #256]	@ (80013c8 <main+0x14c>)
 80012c8:	f003 fef8 	bl	80050bc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 80012cc:	483f      	ldr	r0, [pc, #252]	@ (80013cc <main+0x150>)
 80012ce:	f003 fe1b 	bl	8004f08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80012d2:	213c      	movs	r1, #60	@ 0x3c
 80012d4:	483d      	ldr	r0, [pc, #244]	@ (80013cc <main+0x150>)
 80012d6:	f004 f8a9 	bl	800542c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80012da:	483d      	ldr	r0, [pc, #244]	@ (80013d0 <main+0x154>)
 80012dc:	f003 fe14 	bl	8004f08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80012e0:	213c      	movs	r1, #60	@ 0x3c
 80012e2:	483b      	ldr	r0, [pc, #236]	@ (80013d0 <main+0x154>)
 80012e4:	f004 f8a2 	bl	800542c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80012e8:	483a      	ldr	r0, [pc, #232]	@ (80013d4 <main+0x158>)
 80012ea:	f003 fe0d 	bl	8004f08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 80012ee:	213c      	movs	r1, #60	@ 0x3c
 80012f0:	4838      	ldr	r0, [pc, #224]	@ (80013d4 <main+0x158>)
 80012f2:	f004 f89b 	bl	800542c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 80012f6:	4838      	ldr	r0, [pc, #224]	@ (80013d8 <main+0x15c>)
 80012f8:	f003 fe06 	bl	8004f08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 80012fc:	213c      	movs	r1, #60	@ 0x3c
 80012fe:	4836      	ldr	r0, [pc, #216]	@ (80013d8 <main+0x15c>)
 8001300:	f004 f894 	bl	800542c <HAL_TIM_Encoder_Start_IT>
  // enable both sides of motor driver IC
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_SET);
 8001304:	2201      	movs	r2, #1
 8001306:	2108      	movs	r1, #8
 8001308:	4834      	ldr	r0, [pc, #208]	@ (80013dc <main+0x160>)
 800130a:	f002 fd5d 	bl	8003dc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_SET);
 800130e:	2201      	movs	r2, #1
 8001310:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001314:	4832      	ldr	r0, [pc, #200]	@ (80013e0 <main+0x164>)
 8001316:	f002 fd57 	bl	8003dc8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800131a:	2201      	movs	r2, #1
 800131c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001320:	4830      	ldr	r0, [pc, #192]	@ (80013e4 <main+0x168>)
 8001322:	f002 fd51 	bl	8003dc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001326:	2201      	movs	r2, #1
 8001328:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800132c:	482d      	ldr	r0, [pc, #180]	@ (80013e4 <main+0x168>)
 800132e:	f002 fd4b 	bl	8003dc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001332:	2201      	movs	r2, #1
 8001334:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001338:	482a      	ldr	r0, [pc, #168]	@ (80013e4 <main+0x168>)
 800133a:	f002 fd45 	bl	8003dc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 800133e:	2201      	movs	r2, #1
 8001340:	2180      	movs	r1, #128	@ 0x80
 8001342:	4828      	ldr	r0, [pc, #160]	@ (80013e4 <main+0x168>)
 8001344:	f002 fd40 	bl	8003dc8 <HAL_GPIO_WritePin>

  servo_reset_all();
 8001348:	f001 fc9a 	bl	8002c80 <servo_reset_all>
  HAL_Delay(1000);
 800134c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001350:	f002 fab2 	bl	80038b8 <HAL_Delay>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	2180      	movs	r1, #128	@ 0x80
 8001358:	4822      	ldr	r0, [pc, #136]	@ (80013e4 <main+0x168>)
 800135a:	f002 fd35 	bl	8003dc8 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 800135e:	2001      	movs	r0, #1
 8001360:	f002 faaa 	bl	80038b8 <HAL_Delay>
      } else {  // rotate slowly, l1 or r1

      }
    }
    #else 
    test_base_vel.x_vel = 0;
 8001364:	4b20      	ldr	r3, [pc, #128]	@ (80013e8 <main+0x16c>)
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
    test_base_vel.y_vel = 0;
 800136c:	4b1e      	ldr	r3, [pc, #120]	@ (80013e8 <main+0x16c>)
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	605a      	str	r2, [r3, #4]
    test_base_vel.z_vel = ROBOT_MAX_Z_VELOCITY;
 8001374:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <main+0x16c>)
 8001376:	4a1d      	ldr	r2, [pc, #116]	@ (80013ec <main+0x170>)
 8001378:	609a      	str	r2, [r3, #8]
    movement_control(test_base_vel);
 800137a:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <main+0x16c>)
 800137c:	edd3 6a00 	vldr	s13, [r3]
 8001380:	ed93 7a01 	vldr	s14, [r3, #4]
 8001384:	edd3 7a02 	vldr	s15, [r3, #8]
 8001388:	eeb0 0a66 	vmov.f32	s0, s13
 800138c:	eef0 0a47 	vmov.f32	s1, s14
 8001390:	eeb0 1a67 	vmov.f32	s2, s15
 8001394:	f001 fab0 	bl	80028f8 <movement_control>
    test_wheel_vel = read_current_velocity(encoders);
 8001398:	4815      	ldr	r0, [pc, #84]	@ (80013f0 <main+0x174>)
 800139a:	f7ff fe6f 	bl	800107c <read_current_velocity>
 800139e:	eeb0 6a40 	vmov.f32	s12, s0
 80013a2:	eef0 6a60 	vmov.f32	s13, s1
 80013a6:	eeb0 7a41 	vmov.f32	s14, s2
 80013aa:	eef0 7a61 	vmov.f32	s15, s3
 80013ae:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <main+0x178>)
 80013b0:	ed83 6a00 	vstr	s12, [r3]
 80013b4:	edc3 6a01 	vstr	s13, [r3, #4]
 80013b8:	ed83 7a02 	vstr	s14, [r3, #8]
 80013bc:	edc3 7a03 	vstr	s15, [r3, #12]
    HAL_Delay(1);
 80013c0:	bf00      	nop
 80013c2:	e7cc      	b.n	800135e <main+0xe2>
 80013c4:	200001c0 	.word	0x200001c0
 80013c8:	20000174 	.word	0x20000174
 80013cc:	20000128 	.word	0x20000128
 80013d0:	2000020c 	.word	0x2000020c
 80013d4:	20000258 	.word	0x20000258
 80013d8:	200002a4 	.word	0x200002a4
 80013dc:	48000800 	.word	0x48000800
 80013e0:	48000c00 	.word	0x48000c00
 80013e4:	48001000 	.word	0x48001000
 80013e8:	2000010c 	.word	0x2000010c
 80013ec:	3fbb4a23 	.word	0x3fbb4a23
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000118 	.word	0x20000118

080013f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b094      	sub	sp, #80	@ 0x50
 80013fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	f107 0318 	add.w	r3, r7, #24
 8001402:	2238      	movs	r2, #56	@ 0x38
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f005 ff10 	bl	800722c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800141a:	2000      	movs	r0, #0
 800141c:	f002 fcec 	bl	8003df8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001420:	2301      	movs	r3, #1
 8001422:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001424:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001428:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800142a:	2302      	movs	r3, #2
 800142c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800142e:	2303      	movs	r3, #3
 8001430:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001432:	2302      	movs	r3, #2
 8001434:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001436:	2355      	movs	r3, #85	@ 0x55
 8001438:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800143a:	2302      	movs	r3, #2
 800143c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800143e:	2302      	movs	r3, #2
 8001440:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001442:	2302      	movs	r3, #2
 8001444:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001446:	f107 0318 	add.w	r3, r7, #24
 800144a:	4618      	mov	r0, r3
 800144c:	f002 fd88 	bl	8003f60 <HAL_RCC_OscConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0x62>
    Error_Handler();
 8001456:	f000 f818 	bl	800148a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800145a:	230f      	movs	r3, #15
 800145c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145e:	2303      	movs	r3, #3
 8001460:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	2104      	movs	r1, #4
 8001472:	4618      	mov	r0, r3
 8001474:	f003 f886 	bl	8004584 <HAL_RCC_ClockConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0x8a>
    Error_Handler();
 800147e:	f000 f804 	bl	800148a <Error_Handler>
  }
}
 8001482:	bf00      	nop
 8001484:	3750      	adds	r7, #80	@ 0x50
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148e:	b672      	cpsid	i
}
 8001490:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001492:	bf00      	nop
 8001494:	e7fd      	b.n	8001492 <Error_Handler+0x8>
	...

08001498 <base2wheel>:
#include "movement.h"

WheelVelocity base2wheel(BaseVelocity base_vel) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b094      	sub	sp, #80	@ 0x50
 800149c:	af00      	add	r7, sp, #0
 800149e:	eef0 6a40 	vmov.f32	s13, s0
 80014a2:	eeb0 7a60 	vmov.f32	s14, s1
 80014a6:	eef0 7a41 	vmov.f32	s15, s2
 80014aa:	edc7 6a05 	vstr	s13, [r7, #20]
 80014ae:	ed87 7a06 	vstr	s14, [r7, #24]
 80014b2:	edc7 7a07 	vstr	s15, [r7, #28]
  float front_left = 0, front_right = 0, rear_left = 0, rear_right = 0;
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	643b      	str	r3, [r7, #64]	@ 0x40
  if (base_vel.z_vel == 0) {
 80014ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80014d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014da:	f040 809d 	bne.w	8001618 <base2wheel+0x180>
    front_left = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 80014de:	ed97 7a05 	vldr	s14, [r7, #20]
 80014e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80014e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ea:	edd7 6a06 	vldr	s13, [r7, #24]
 80014ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80014f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fa:	ee17 0a90 	vmov	r0, s15
 80014fe:	f7fe ffef 	bl	80004e0 <__aeabi_f2d>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	ec43 2b10 	vmov	d0, r2, r3
 800150a:	f005 ff8b 	bl	8007424 <sqrt>
 800150e:	ec51 0b10 	vmov	r0, r1, d0
 8001512:	a373      	add	r3, pc, #460	@ (adr r3, 80016e0 <base2wheel+0x248>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7ff f964 	bl	80007e4 <__aeabi_ddiv>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f7ff fb2c 	bl	8000b80 <__aeabi_d2f>
 8001528:	4603      	mov	r3, r0
 800152a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    front_right = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 800152c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001530:	edd7 7a05 	vldr	s15, [r7, #20]
 8001534:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001538:	edd7 6a06 	vldr	s13, [r7, #24]
 800153c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001540:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001548:	ee17 0a90 	vmov	r0, s15
 800154c:	f7fe ffc8 	bl	80004e0 <__aeabi_f2d>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	ec43 2b10 	vmov	d0, r2, r3
 8001558:	f005 ff64 	bl	8007424 <sqrt>
 800155c:	ec51 0b10 	vmov	r0, r1, d0
 8001560:	a35f      	add	r3, pc, #380	@ (adr r3, 80016e0 <base2wheel+0x248>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7ff f93d 	bl	80007e4 <__aeabi_ddiv>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fb05 	bl	8000b80 <__aeabi_d2f>
 8001576:	4603      	mov	r3, r0
 8001578:	64bb      	str	r3, [r7, #72]	@ 0x48
    rear_left = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 800157a:	ed97 7a05 	vldr	s14, [r7, #20]
 800157e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001582:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001586:	edd7 6a06 	vldr	s13, [r7, #24]
 800158a:	edd7 7a06 	vldr	s15, [r7, #24]
 800158e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001596:	ee17 0a90 	vmov	r0, s15
 800159a:	f7fe ffa1 	bl	80004e0 <__aeabi_f2d>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	ec43 2b10 	vmov	d0, r2, r3
 80015a6:	f005 ff3d 	bl	8007424 <sqrt>
 80015aa:	ec51 0b10 	vmov	r0, r1, d0
 80015ae:	a34c      	add	r3, pc, #304	@ (adr r3, 80016e0 <base2wheel+0x248>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f916 	bl	80007e4 <__aeabi_ddiv>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fade 	bl	8000b80 <__aeabi_d2f>
 80015c4:	4603      	mov	r3, r0
 80015c6:	647b      	str	r3, [r7, #68]	@ 0x44
    rear_right = sqrt(base_vel.x_vel * base_vel.x_vel + base_vel.y_vel * base_vel.y_vel) / RADIUS_WHEEL;
 80015c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80015cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015d4:	edd7 6a06 	vldr	s13, [r7, #24]
 80015d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80015dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e4:	ee17 0a90 	vmov	r0, s15
 80015e8:	f7fe ff7a 	bl	80004e0 <__aeabi_f2d>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	ec43 2b10 	vmov	d0, r2, r3
 80015f4:	f005 ff16 	bl	8007424 <sqrt>
 80015f8:	ec51 0b10 	vmov	r0, r1, d0
 80015fc:	a338      	add	r3, pc, #224	@ (adr r3, 80016e0 <base2wheel+0x248>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	f7ff f8ef 	bl	80007e4 <__aeabi_ddiv>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff fab7 	bl	8000b80 <__aeabi_d2f>
 8001612:	4603      	mov	r3, r0
 8001614:	643b      	str	r3, [r7, #64]	@ 0x40
 8001616:	e043      	b.n	80016a0 <base2wheel+0x208>
  } else {
    front_left = base_vel.z_vel / RADIUS_WHEEL;
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff60 	bl	80004e0 <__aeabi_f2d>
 8001620:	a32f      	add	r3, pc, #188	@ (adr r3, 80016e0 <base2wheel+0x248>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7ff f8dd 	bl	80007e4 <__aeabi_ddiv>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff faa5 	bl	8000b80 <__aeabi_d2f>
 8001636:	4603      	mov	r3, r0
 8001638:	64fb      	str	r3, [r7, #76]	@ 0x4c
    front_right = base_vel.z_vel / RADIUS_WHEEL;
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff4f 	bl	80004e0 <__aeabi_f2d>
 8001642:	a327      	add	r3, pc, #156	@ (adr r3, 80016e0 <base2wheel+0x248>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7ff f8cc 	bl	80007e4 <__aeabi_ddiv>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f7ff fa94 	bl	8000b80 <__aeabi_d2f>
 8001658:	4603      	mov	r3, r0
 800165a:	64bb      	str	r3, [r7, #72]	@ 0x48
    rear_left = base_vel.z_vel / RADIUS_WHEEL;
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe ff3e 	bl	80004e0 <__aeabi_f2d>
 8001664:	a31e      	add	r3, pc, #120	@ (adr r3, 80016e0 <base2wheel+0x248>)
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	f7ff f8bb 	bl	80007e4 <__aeabi_ddiv>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff fa83 	bl	8000b80 <__aeabi_d2f>
 800167a:	4603      	mov	r3, r0
 800167c:	647b      	str	r3, [r7, #68]	@ 0x44
    rear_right = base_vel.z_vel / RADIUS_WHEEL;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ff2d 	bl	80004e0 <__aeabi_f2d>
 8001686:	a316      	add	r3, pc, #88	@ (adr r3, 80016e0 <base2wheel+0x248>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7ff f8aa 	bl	80007e4 <__aeabi_ddiv>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff fa72 	bl	8000b80 <__aeabi_d2f>
 800169c:	4603      	mov	r3, r0
 800169e:	643b      	str	r3, [r7, #64]	@ 0x40
  }
  return (WheelVelocity){front_left, front_right, rear_left, rear_right};
 80016a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80016a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80016a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80016b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80016b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80016b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016b8:	ee06 0a10 	vmov	s12, r0
 80016bc:	ee06 1a90 	vmov	s13, r1
 80016c0:	ee07 2a10 	vmov	s14, r2
 80016c4:	ee07 3a90 	vmov	s15, r3
}
 80016c8:	eeb0 0a46 	vmov.f32	s0, s12
 80016cc:	eef0 0a66 	vmov.f32	s1, s13
 80016d0:	eeb0 1a47 	vmov.f32	s2, s14
 80016d4:	eef0 1a67 	vmov.f32	s3, s15
 80016d8:	3750      	adds	r7, #80	@ 0x50
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	020c49ba 	.word	0x020c49ba
 80016e4:	3f96872b 	.word	0x3f96872b

080016e8 <wheel2pwm>:
  // float y_vel = (-wheel_vel.front_left + wheel_vel.front_right + wheel_vel.rear_left - wheel_vel.rear_right) * RADIUS_WHEEL / 4.0;
  // float z_vel = (-wheel_vel.front_left + wheel_vel.front_right - wheel_vel.rear_left + wheel_vel.rear_right) * RADIUS_WHEEL / (4.0 * (LENGTH_CENTER_WHEEL_X + LENGTH_CENTER_WHEEL_Y));
  // return (BaseVelocity){x_vel, y_vel, z_vel};
}

WheelPWM wheel2pwm(WheelVelocity wheel_vel) {
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b08e      	sub	sp, #56	@ 0x38
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6178      	str	r0, [r7, #20]
 80016f0:	eeb0 6a40 	vmov.f32	s12, s0
 80016f4:	eef0 6a60 	vmov.f32	s13, s1
 80016f8:	eeb0 7a41 	vmov.f32	s14, s2
 80016fc:	eef0 7a61 	vmov.f32	s15, s3
 8001700:	ed87 6a01 	vstr	s12, [r7, #4]
 8001704:	edc7 6a02 	vstr	s13, [r7, #8]
 8001708:	ed87 7a03 	vstr	s14, [r7, #12]
 800170c:	edc7 7a04 	vstr	s15, [r7, #16]
  int front_left = (int)(wheel_vel.front_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * FL_MOTOR_ARR / 100.0);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fee4 	bl	80004e0 <__aeabi_f2d>
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	4b92      	ldr	r3, [pc, #584]	@ (8001968 <wheel2pwm+0x280>)
 800171e:	f7fe ff37 	bl	8000590 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	a38b      	add	r3, pc, #556	@ (adr r3, 8001958 <wheel2pwm+0x270>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7ff f858 	bl	80007e4 <__aeabi_ddiv>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	a388      	add	r3, pc, #544	@ (adr r3, 8001960 <wheel2pwm+0x278>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7ff f84f 	bl	80007e4 <__aeabi_ddiv>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	4b86      	ldr	r3, [pc, #536]	@ (800196c <wheel2pwm+0x284>)
 8001754:	f7fe ff1c 	bl	8000590 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4614      	mov	r4, r2
 800175e:	461d      	mov	r5, r3
 8001760:	4b83      	ldr	r3, [pc, #524]	@ (8001970 <wheel2pwm+0x288>)
 8001762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fe99 	bl	800049c <__aeabi_ui2d>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4620      	mov	r0, r4
 8001770:	4629      	mov	r1, r5
 8001772:	f7fe ff0d 	bl	8000590 <__aeabi_dmul>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	4b7a      	ldr	r3, [pc, #488]	@ (800196c <wheel2pwm+0x284>)
 8001784:	f7ff f82e 	bl	80007e4 <__aeabi_ddiv>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f7ff f9ae 	bl	8000af0 <__aeabi_d2iz>
 8001794:	4603      	mov	r3, r0
 8001796:	637b      	str	r3, [r7, #52]	@ 0x34
  int front_right = (int)(wheel_vel.front_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * FR_MOTOR_ARR / 100.0);
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fea0 	bl	80004e0 <__aeabi_f2d>
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	4b70      	ldr	r3, [pc, #448]	@ (8001968 <wheel2pwm+0x280>)
 80017a6:	f7fe fef3 	bl	8000590 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	a369      	add	r3, pc, #420	@ (adr r3, 8001958 <wheel2pwm+0x270>)
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	f7ff f814 	bl	80007e4 <__aeabi_ddiv>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	a366      	add	r3, pc, #408	@ (adr r3, 8001960 <wheel2pwm+0x278>)
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	f7ff f80b 	bl	80007e4 <__aeabi_ddiv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	4b64      	ldr	r3, [pc, #400]	@ (800196c <wheel2pwm+0x284>)
 80017dc:	f7fe fed8 	bl	8000590 <__aeabi_dmul>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4614      	mov	r4, r2
 80017e6:	461d      	mov	r5, r3
 80017e8:	4b61      	ldr	r3, [pc, #388]	@ (8001970 <wheel2pwm+0x288>)
 80017ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fe55 	bl	800049c <__aeabi_ui2d>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4620      	mov	r0, r4
 80017f8:	4629      	mov	r1, r5
 80017fa:	f7fe fec9 	bl	8000590 <__aeabi_dmul>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	4b58      	ldr	r3, [pc, #352]	@ (800196c <wheel2pwm+0x284>)
 800180c:	f7fe ffea 	bl	80007e4 <__aeabi_ddiv>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f96a 	bl	8000af0 <__aeabi_d2iz>
 800181c:	4603      	mov	r3, r0
 800181e:	633b      	str	r3, [r7, #48]	@ 0x30
  int rear_left = (int)(wheel_vel.rear_left * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RL_MOTOR_ARR / 100.0);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fe5c 	bl	80004e0 <__aeabi_f2d>
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	4b4e      	ldr	r3, [pc, #312]	@ (8001968 <wheel2pwm+0x280>)
 800182e:	f7fe feaf 	bl	8000590 <__aeabi_dmul>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	a347      	add	r3, pc, #284	@ (adr r3, 8001958 <wheel2pwm+0x270>)
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	f7fe ffd0 	bl	80007e4 <__aeabi_ddiv>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	a344      	add	r3, pc, #272	@ (adr r3, 8001960 <wheel2pwm+0x278>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe ffc7 	bl	80007e4 <__aeabi_ddiv>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	4b42      	ldr	r3, [pc, #264]	@ (800196c <wheel2pwm+0x284>)
 8001864:	f7fe fe94 	bl	8000590 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4614      	mov	r4, r2
 800186e:	461d      	mov	r5, r3
 8001870:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe10 	bl	800049c <__aeabi_ui2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4620      	mov	r0, r4
 8001882:	4629      	mov	r1, r5
 8001884:	f7fe fe84 	bl	8000590 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	4b35      	ldr	r3, [pc, #212]	@ (800196c <wheel2pwm+0x284>)
 8001896:	f7fe ffa5 	bl	80007e4 <__aeabi_ddiv>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f7ff f925 	bl	8000af0 <__aeabi_d2iz>
 80018a6:	4603      	mov	r3, r0
 80018a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int rear_right = (int)(wheel_vel.rear_right * 60.0 / (2.0 * M_PI) / (MOTOR_MAX_VELOCITY * 60.0 / (2.0 * M_PI)) * 100.0 * RR_MOTOR_ARR / 100.0);
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fe17 	bl	80004e0 <__aeabi_f2d>
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001968 <wheel2pwm+0x280>)
 80018b8:	f7fe fe6a 	bl	8000590 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	a324      	add	r3, pc, #144	@ (adr r3, 8001958 <wheel2pwm+0x270>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe ff8b 	bl	80007e4 <__aeabi_ddiv>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	a322      	add	r3, pc, #136	@ (adr r3, 8001960 <wheel2pwm+0x278>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe ff82 	bl	80007e4 <__aeabi_ddiv>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	4b1f      	ldr	r3, [pc, #124]	@ (800196c <wheel2pwm+0x284>)
 80018ee:	f7fe fe4f 	bl	8000590 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4614      	mov	r4, r2
 80018f8:	461d      	mov	r5, r3
 80018fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001970 <wheel2pwm+0x288>)
 80018fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fdcc 	bl	800049c <__aeabi_ui2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4620      	mov	r0, r4
 800190a:	4629      	mov	r1, r5
 800190c:	f7fe fe40 	bl	8000590 <__aeabi_dmul>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	4b13      	ldr	r3, [pc, #76]	@ (800196c <wheel2pwm+0x284>)
 800191e:	f7fe ff61 	bl	80007e4 <__aeabi_ddiv>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	f7ff f8e1 	bl	8000af0 <__aeabi_d2iz>
 800192e:	4603      	mov	r3, r0
 8001930:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (WheelPWM){front_left, front_right, rear_left, rear_right};
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001948:	60da      	str	r2, [r3, #12]
}
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	3738      	adds	r7, #56	@ 0x38
 800194e:	46bd      	mov	sp, r7
 8001950:	bdb0      	pop	{r4, r5, r7, pc}
 8001952:	bf00      	nop
 8001954:	f3af 8000 	nop.w
 8001958:	54442d18 	.word	0x54442d18
 800195c:	401921fb 	.word	0x401921fb
 8001960:	980a206e 	.word	0x980a206e
 8001964:	40a733a9 	.word	0x40a733a9
 8001968:	404e0000 	.word	0x404e0000
 800196c:	40590000 	.word	0x40590000
 8001970:	40000400 	.word	0x40000400

08001974 <wheel_control>:

void wheel_control(Wheel wheel, int speed) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
  if (speed > 16800)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8001986:	4293      	cmp	r3, r2
 8001988:	dd03      	ble.n	8001992 <wheel_control+0x1e>
    speed = 16800;
 800198a:	f244 13a0 	movw	r3, #16800	@ 0x41a0
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	e005      	b.n	800199e <wheel_control+0x2a>
  else if (speed < -16800)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	4a94      	ldr	r2, [pc, #592]	@ (8001be8 <wheel_control+0x274>)
 8001996:	4293      	cmp	r3, r2
 8001998:	da01      	bge.n	800199e <wheel_control+0x2a>
    speed = -16800;
 800199a:	4b93      	ldr	r3, [pc, #588]	@ (8001be8 <wheel_control+0x274>)
 800199c:	603b      	str	r3, [r7, #0]

  switch (wheel) {
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	f200 80e8 	bhi.w	8001b76 <wheel_control+0x202>
 80019a6:	a201      	add	r2, pc, #4	@ (adr r2, 80019ac <wheel_control+0x38>)
 80019a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ac:	080019bd 	.word	0x080019bd
 80019b0:	08001a25 	.word	0x08001a25
 80019b4:	08001a99 	.word	0x08001a99
 80019b8:	08001b03 	.word	0x08001b03
    case FRONT_LEFT:
      if (speed > 0) {
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	dd0c      	ble.n	80019dc <wheel_control+0x68>
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = speed;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_SET);
 80019c2:	2201      	movs	r2, #1
 80019c4:	2120      	movs	r1, #32
 80019c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ca:	f002 f9fd 	bl	8003dc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2110      	movs	r1, #16
 80019d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019d6:	f002 f9f7 	bl	8003dc8 <HAL_GPIO_WritePin>
 80019da:	e01b      	b.n	8001a14 <wheel_control+0xa0>
      } else if (speed < 0) {
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	da0c      	bge.n	80019fc <wheel_control+0x88>
        // FL_MOTOR_A_CCR = -speed;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2120      	movs	r1, #32
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ea:	f002 f9ed 	bl	8003dc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_SET);
 80019ee:	2201      	movs	r2, #1
 80019f0:	2110      	movs	r1, #16
 80019f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019f6:	f002 f9e7 	bl	8003dc8 <HAL_GPIO_WritePin>
 80019fa:	e00b      	b.n	8001a14 <wheel_control+0xa0>
      } else {
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2120      	movs	r1, #32
 8001a00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a04:	f002 f9e0 	bl	8003dc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2110      	movs	r1, #16
 8001a0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a10:	f002 f9da 	bl	8003dc8 <HAL_GPIO_WritePin>
      }
      FL_MOTOR_CCR = abs(speed);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a1a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a1e:	4b73      	ldr	r3, [pc, #460]	@ (8001bec <wheel_control+0x278>)
 8001a20:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8001a22:	e0dc      	b.n	8001bde <wheel_control+0x26a>
    case FRONT_RIGHT:
      if (speed < 0) {
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	da0e      	bge.n	8001a48 <wheel_control+0xd4>
        // FR_MOTOR_B_CCR = speed;
        // FR_MOTOR_A_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_SET);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a34:	f002 f9c8 	bl	8003dc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a42:	f002 f9c1 	bl	8003dc8 <HAL_GPIO_WritePin>
 8001a46:	e01f      	b.n	8001a88 <wheel_control+0x114>
      } else if (speed > 0) {
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	dd0e      	ble.n	8001a6c <wheel_control+0xf8>
        // FR_MOTOR_B_CCR = 0;
        // FR_MOTOR_A_CCR = -speed;
        HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a58:	f002 f9b6 	bl	8003dc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_SET);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a66:	f002 f9af 	bl	8003dc8 <HAL_GPIO_WritePin>
 8001a6a:	e00d      	b.n	8001a88 <wheel_control+0x114>
      } else {
        // FR_MOTOR_A_CCR = 0;
        // FR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FR_IN1_GPIO_Port, MOTOR_FR_IN1_Pin, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a76:	f002 f9a7 	bl	8003dc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FR_IN2_GPIO_Port, MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a84:	f002 f9a0 	bl	8003dc8 <HAL_GPIO_WritePin>
      }
      FR_MOTOR_CCR = abs(speed);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a8e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a92:	4b56      	ldr	r3, [pc, #344]	@ (8001bec <wheel_control+0x278>)
 8001a94:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 8001a96:	e0a2      	b.n	8001bde <wheel_control+0x26a>
    case REAR_LEFT:
      if (speed > 0) {
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	dd0c      	ble.n	8001ab8 <wheel_control+0x144>
        // RL_MOTOR_B_CCR = 0;
        // RL_MOTOR_A_CCR = speed;
        HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_RESET);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2140      	movs	r1, #64	@ 0x40
 8001aa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aa6:	f002 f98f 	bl	8003dc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin, GPIO_PIN_SET);
 8001aaa:	2201      	movs	r2, #1
 8001aac:	2180      	movs	r1, #128	@ 0x80
 8001aae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ab2:	f002 f989 	bl	8003dc8 <HAL_GPIO_WritePin>
 8001ab6:	e01b      	b.n	8001af0 <wheel_control+0x17c>
      } else if (speed < 0) {
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	da0c      	bge.n	8001ad8 <wheel_control+0x164>
        // RL_MOTOR_B_CCR = -speed;
        // RL_MOTOR_A_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_SET);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	2140      	movs	r1, #64	@ 0x40
 8001ac2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ac6:	f002 f97f 	bl	8003dc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin, GPIO_PIN_RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2180      	movs	r1, #128	@ 0x80
 8001ace:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ad2:	f002 f979 	bl	8003dc8 <HAL_GPIO_WritePin>
 8001ad6:	e00b      	b.n	8001af0 <wheel_control+0x17c>
      } else {
        // RL_MOTOR_A_CCR = 0;
        // RL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RL_IN1_GPIO_Port, MOTOR_RL_IN1_Pin, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2140      	movs	r1, #64	@ 0x40
 8001adc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae0:	f002 f972 	bl	8003dc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RL_IN2_GPIO_Port, MOTOR_RL_IN2_Pin, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2180      	movs	r1, #128	@ 0x80
 8001ae8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aec:	f002 f96c 	bl	8003dc8 <HAL_GPIO_WritePin>
      }
      RL_MOTOR_CCR = abs(speed);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001af6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001afa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001afe:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8001b00:	e06d      	b.n	8001bde <wheel_control+0x26a>
    case REAR_RIGHT:
      if (speed < 0) {
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	da0e      	bge.n	8001b26 <wheel_control+0x1b2>
        // RR_MOTOR_A_CCR = speed;
        // RR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b12:	f002 f959 	bl	8003dc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin, GPIO_PIN_SET);
 8001b16:	2201      	movs	r2, #1
 8001b18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b20:	f002 f952 	bl	8003dc8 <HAL_GPIO_WritePin>
 8001b24:	e01f      	b.n	8001b66 <wheel_control+0x1f2>
      } else if (speed > 0) {
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	dd0e      	ble.n	8001b4a <wheel_control+0x1d6>
        // RR_MOTOR_A_CCR = 0;
        // RR_MOTOR_B_CCR = -speed;
        HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b36:	f002 f947 	bl	8003dc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b44:	f002 f940 	bl	8003dc8 <HAL_GPIO_WritePin>
 8001b48:	e00d      	b.n	8001b66 <wheel_control+0x1f2>
      } else {
        // RR_MOTOR_A_CCR = 0;
        // RR_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_RR_IN1_GPIO_Port, MOTOR_RR_IN1_Pin, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b54:	f002 f938 	bl	8003dc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_RR_IN2_GPIO_Port, MOTOR_RR_IN2_Pin, GPIO_PIN_RESET);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b62:	f002 f931 	bl	8003dc8 <HAL_GPIO_WritePin>
      }
      RR_MOTOR_CCR = abs(speed);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001b6c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001b70:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <wheel_control+0x278>)
 8001b72:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
 8001b74:	e033      	b.n	8001bde <wheel_control+0x26a>
    default:
      if (speed > 0) {
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	dd0c      	ble.n	8001b96 <wheel_control+0x222>
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = speed;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_SET);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	2120      	movs	r1, #32
 8001b80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b84:	f002 f920 	bl	8003dc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2110      	movs	r1, #16
 8001b8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b90:	f002 f91a 	bl	8003dc8 <HAL_GPIO_WritePin>
 8001b94:	e01b      	b.n	8001bce <wheel_control+0x25a>
      } else if (speed < 0) {
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	da0c      	bge.n	8001bb6 <wheel_control+0x242>
        // FL_MOTOR_A_CCR = -speed;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2120      	movs	r1, #32
 8001ba0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ba4:	f002 f910 	bl	8003dc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2110      	movs	r1, #16
 8001bac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb0:	f002 f90a 	bl	8003dc8 <HAL_GPIO_WritePin>
 8001bb4:	e00b      	b.n	8001bce <wheel_control+0x25a>
      } else {
        // FL_MOTOR_A_CCR = 0;
        // FL_MOTOR_B_CCR = 0;
        HAL_GPIO_WritePin(MOTOR_FL_IN1_GPIO_Port, MOTOR_FL_IN1_Pin, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2120      	movs	r1, #32
 8001bba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bbe:	f002 f903 	bl	8003dc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_FL_IN2_GPIO_Port, MOTOR_FL_IN2_Pin, GPIO_PIN_RESET);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2110      	movs	r1, #16
 8001bc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bca:	f002 f8fd 	bl	8003dc8 <HAL_GPIO_WritePin>
      }
      FL_MOTOR_CCR = abs(speed);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001bd4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001bd8:	4b04      	ldr	r3, [pc, #16]	@ (8001bec <wheel_control+0x278>)
 8001bda:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8001bdc:	bf00      	nop
  }
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	ffffbe60 	.word	0xffffbe60
 8001bec:	40000400 	.word	0x40000400

08001bf0 <wheels_control>:

void wheels_control(WheelPWM pwm) {
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	463c      	mov	r4, r7
 8001bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  wheel_control(FRONT_LEFT, pwm.front_left);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	2000      	movs	r0, #0
 8001c02:	f7ff feb7 	bl	8001974 <wheel_control>
  wheel_control(FRONT_RIGHT, pwm.front_right);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f7ff feb2 	bl	8001974 <wheel_control>
  wheel_control(REAR_LEFT, pwm.rear_left);
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4619      	mov	r1, r3
 8001c14:	2002      	movs	r0, #2
 8001c16:	f7ff fead 	bl	8001974 <wheel_control>
  wheel_control(REAR_RIGHT, pwm.rear_right);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	2003      	movs	r0, #3
 8001c20:	f7ff fea8 	bl	8001974 <wheel_control>
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd90      	pop	{r4, r7, pc}
 8001c2c:	0000      	movs	r0, r0
	...

08001c30 <rotate_motor>:

void rotate_motor(BaseVelocity base_vel) {
 8001c30:	b5b0      	push	{r4, r5, r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	eef0 6a40 	vmov.f32	s13, s0
 8001c3a:	eeb0 7a60 	vmov.f32	s14, s1
 8001c3e:	eef0 7a41 	vmov.f32	s15, s2
 8001c42:	edc7 6a01 	vstr	s13, [r7, #4]
 8001c46:	ed87 7a02 	vstr	s14, [r7, #8]
 8001c4a:	edc7 7a03 	vstr	s15, [r7, #12]
  if (base_vel.z_vel != 0) {
 8001c4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	d075      	beq.n	8001d48 <rotate_motor+0x118>
    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(45), SHORTEST_TIME_ROTATE(1, 45));
 8001c5c:	4bd6      	ldr	r3, [pc, #856]	@ (8001fb8 <rotate_motor+0x388>)
 8001c5e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c62:	3b2d      	subs	r3, #45	@ 0x2d
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bfb8      	it	lt
 8001c68:	425b      	neglt	r3, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc26 	bl	80004bc <__aeabi_i2d>
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	4bd1      	ldr	r3, [pc, #836]	@ (8001fbc <rotate_motor+0x38c>)
 8001c76:	f7fe fc8b 	bl	8000590 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	f7fe ff5d 	bl	8000b40 <__aeabi_d2uiz>
 8001c86:	4603      	mov	r3, r0
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	f44f 712a 	mov.w	r1, #680	@ 0x2a8
 8001c90:	48c9      	ldr	r0, [pc, #804]	@ (8001fb8 <rotate_motor+0x388>)
 8001c92:	f000 fe8d 	bl	80029b0 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(-45), SHORTEST_TIME_ROTATE(2, -45));
 8001c96:	4bc8      	ldr	r3, [pc, #800]	@ (8001fb8 <rotate_motor+0x388>)
 8001c98:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c9c:	332d      	adds	r3, #45	@ 0x2d
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	bfb8      	it	lt
 8001ca2:	425b      	neglt	r3, r3
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fc09 	bl	80004bc <__aeabi_i2d>
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	4bc3      	ldr	r3, [pc, #780]	@ (8001fbc <rotate_motor+0x38c>)
 8001cb0:	f7fe fc6e 	bl	8000590 <__aeabi_dmul>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7fe ff40 	bl	8000b40 <__aeabi_d2uiz>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	f240 1131 	movw	r1, #305	@ 0x131
 8001cca:	48bd      	ldr	r0, [pc, #756]	@ (8001fc0 <rotate_motor+0x390>)
 8001ccc:	f000 fe70 	bl	80029b0 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(45), SHORTEST_TIME_ROTATE(3, 45));
 8001cd0:	4bb9      	ldr	r3, [pc, #740]	@ (8001fb8 <rotate_motor+0x388>)
 8001cd2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001cd6:	3b2d      	subs	r3, #45	@ 0x2d
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	bfb8      	it	lt
 8001cdc:	425b      	neglt	r3, r3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fbec 	bl	80004bc <__aeabi_i2d>
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4bb4      	ldr	r3, [pc, #720]	@ (8001fbc <rotate_motor+0x38c>)
 8001cea:	f7fe fc51 	bl	8000590 <__aeabi_dmul>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f7fe ff23 	bl	8000b40 <__aeabi_d2uiz>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f240 21b2 	movw	r1, #690	@ 0x2b2
 8001d04:	48af      	ldr	r0, [pc, #700]	@ (8001fc4 <rotate_motor+0x394>)
 8001d06:	f000 fe53 	bl	80029b0 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(-45), SHORTEST_TIME_ROTATE(4, -45));
 8001d0a:	4bab      	ldr	r3, [pc, #684]	@ (8001fb8 <rotate_motor+0x388>)
 8001d0c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d10:	332d      	adds	r3, #45	@ 0x2d
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	bfb8      	it	lt
 8001d16:	425b      	neglt	r3, r3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fbcf 	bl	80004bc <__aeabi_i2d>
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	4ba6      	ldr	r3, [pc, #664]	@ (8001fbc <rotate_motor+0x38c>)
 8001d24:	f7fe fc34 	bl	8000590 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f7fe ff06 	bl	8000b40 <__aeabi_d2uiz>
 8001d34:	4603      	mov	r3, r0
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	f240 113b 	movw	r1, #315	@ 0x13b
 8001d3e:	48a2      	ldr	r0, [pc, #648]	@ (8001fc8 <rotate_motor+0x398>)
 8001d40:	f000 fe36 	bl	80029b0 <servo_move>
    return;
 8001d44:	f000 bdba 	b.w	80028bc <rotate_motor+0xc8c>
  }

  float angle = atan2(base_vel.y_vel, base_vel.x_vel) * 180 / M_PI;
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fbc8 	bl	80004e0 <__aeabi_f2d>
 8001d50:	4604      	mov	r4, r0
 8001d52:	460d      	mov	r5, r1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fbc2 	bl	80004e0 <__aeabi_f2d>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	ec43 2b11 	vmov	d1, r2, r3
 8001d64:	ec45 4b10 	vmov	d0, r4, r5
 8001d68:	f005 fa92 	bl	8007290 <atan2>
 8001d6c:	ec51 0b10 	vmov	r0, r1, d0
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	4b95      	ldr	r3, [pc, #596]	@ (8001fcc <rotate_motor+0x39c>)
 8001d76:	f7fe fc0b 	bl	8000590 <__aeabi_dmul>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	a38b      	add	r3, pc, #556	@ (adr r3, 8001fb0 <rotate_motor+0x380>)
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	f7fe fd2c 	bl	80007e4 <__aeabi_ddiv>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	f7fe fef4 	bl	8000b80 <__aeabi_d2f>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	617b      	str	r3, [r7, #20]

  if (base_vel.x_vel == 0 && base_vel.y_vel != 0) {  // angle = 90 or 270
 8001d9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001da0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da8:	d17c      	bne.n	8001ea4 <rotate_motor+0x274>
 8001daa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db6:	d075      	beq.n	8001ea4 <rotate_motor+0x274>
    servo_move(&(servos[0]), INITIAL_POS, SHORTEST_TIME_ROTATE(1, 90));
 8001db8:	4b7f      	ldr	r3, [pc, #508]	@ (8001fb8 <rotate_motor+0x388>)
 8001dba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dbe:	3b5a      	subs	r3, #90	@ 0x5a
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bfb8      	it	lt
 8001dc4:	425b      	neglt	r3, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fb78 	bl	80004bc <__aeabi_i2d>
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	4b7a      	ldr	r3, [pc, #488]	@ (8001fbc <rotate_motor+0x38c>)
 8001dd2:	f7fe fbdd 	bl	8000590 <__aeabi_dmul>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7fe feaf 	bl	8000b40 <__aeabi_d2uiz>
 8001de2:	4603      	mov	r3, r0
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001dec:	4872      	ldr	r0, [pc, #456]	@ (8001fb8 <rotate_motor+0x388>)
 8001dee:	f000 fddf 	bl	80029b0 <servo_move>
    servo_move(&(servos[1]), INITIAL_POS, SHORTEST_TIME_ROTATE(2, 90));
 8001df2:	4b71      	ldr	r3, [pc, #452]	@ (8001fb8 <rotate_motor+0x388>)
 8001df4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001df8:	3b5a      	subs	r3, #90	@ 0x5a
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	bfb8      	it	lt
 8001dfe:	425b      	neglt	r3, r3
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fb5b 	bl	80004bc <__aeabi_i2d>
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	4b6c      	ldr	r3, [pc, #432]	@ (8001fbc <rotate_motor+0x38c>)
 8001e0c:	f7fe fbc0 	bl	8000590 <__aeabi_dmul>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	f7fe fe92 	bl	8000b40 <__aeabi_d2uiz>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	461a      	mov	r2, r3
 8001e22:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001e26:	4866      	ldr	r0, [pc, #408]	@ (8001fc0 <rotate_motor+0x390>)
 8001e28:	f000 fdc2 	bl	80029b0 <servo_move>
    servo_move(&(servos[2]), INITIAL_POS, SHORTEST_TIME_ROTATE(3, 90));
 8001e2c:	4b62      	ldr	r3, [pc, #392]	@ (8001fb8 <rotate_motor+0x388>)
 8001e2e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001e32:	3b5a      	subs	r3, #90	@ 0x5a
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bfb8      	it	lt
 8001e38:	425b      	neglt	r3, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fb3e 	bl	80004bc <__aeabi_i2d>
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	4b5d      	ldr	r3, [pc, #372]	@ (8001fbc <rotate_motor+0x38c>)
 8001e46:	f7fe fba3 	bl	8000590 <__aeabi_dmul>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	f7fe fe75 	bl	8000b40 <__aeabi_d2uiz>
 8001e56:	4603      	mov	r3, r0
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001e60:	4859      	ldr	r0, [pc, #356]	@ (8001fc8 <rotate_motor+0x398>)
 8001e62:	f000 fda5 	bl	80029b0 <servo_move>
    servo_move(&(servos[3]), INITIAL_POS, SHORTEST_TIME_ROTATE(4, 90));
 8001e66:	4b54      	ldr	r3, [pc, #336]	@ (8001fb8 <rotate_motor+0x388>)
 8001e68:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001e6c:	3b5a      	subs	r3, #90	@ 0x5a
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	bfb8      	it	lt
 8001e72:	425b      	neglt	r3, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fb21 	bl	80004bc <__aeabi_i2d>
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	4b4f      	ldr	r3, [pc, #316]	@ (8001fbc <rotate_motor+0x38c>)
 8001e80:	f7fe fb86 	bl	8000590 <__aeabi_dmul>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f7fe fe58 	bl	8000b40 <__aeabi_d2uiz>
 8001e90:	4603      	mov	r3, r0
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001e9a:	484a      	ldr	r0, [pc, #296]	@ (8001fc4 <rotate_motor+0x394>)
 8001e9c:	f000 fd88 	bl	80029b0 <servo_move>
 8001ea0:	f000 bd0c 	b.w	80028bc <rotate_motor+0xc8c>
  } else if (base_vel.x_vel != 0 && base_vel.y_vel == 0) {  // angle = 0 or 180
 8001ea4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ea8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb0:	f000 8092 	beq.w	8001fd8 <rotate_motor+0x3a8>
 8001eb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eb8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec0:	f040 808a 	bne.w	8001fd8 <rotate_motor+0x3a8>
    servo_move(&(servos[0]), SERVO_ID1_MAX_POS, SHORTEST_TIME_ROTATE(1, 90));
 8001ec4:	4b3c      	ldr	r3, [pc, #240]	@ (8001fb8 <rotate_motor+0x388>)
 8001ec6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001eca:	3b5a      	subs	r3, #90	@ 0x5a
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	bfb8      	it	lt
 8001ed0:	425b      	neglt	r3, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe faf2 	bl	80004bc <__aeabi_i2d>
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	4b37      	ldr	r3, [pc, #220]	@ (8001fbc <rotate_motor+0x38c>)
 8001ede:	f7fe fb57 	bl	8000590 <__aeabi_dmul>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f7fe fe29 	bl	8000b40 <__aeabi_d2uiz>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f44f 7157 	mov.w	r1, #860	@ 0x35c
 8001ef8:	482f      	ldr	r0, [pc, #188]	@ (8001fb8 <rotate_motor+0x388>)
 8001efa:	f000 fd59 	bl	80029b0 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_MAX_POS, SHORTEST_TIME_ROTATE(2, 90));
 8001efe:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb8 <rotate_motor+0x388>)
 8001f00:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001f04:	3b5a      	subs	r3, #90	@ 0x5a
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bfb8      	it	lt
 8001f0a:	425b      	neglt	r3, r3
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fad5 	bl	80004bc <__aeabi_i2d>
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	4b29      	ldr	r3, [pc, #164]	@ (8001fbc <rotate_motor+0x38c>)
 8001f18:	f7fe fb3a 	bl	8000590 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fe0c 	bl	8000b40 <__aeabi_d2uiz>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f44f 7157 	mov.w	r1, #860	@ 0x35c
 8001f32:	4823      	ldr	r0, [pc, #140]	@ (8001fc0 <rotate_motor+0x390>)
 8001f34:	f000 fd3c 	bl	80029b0 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_MAX_POS, SHORTEST_TIME_ROTATE(3, 90));
 8001f38:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb8 <rotate_motor+0x388>)
 8001f3a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001f3e:	3b5a      	subs	r3, #90	@ 0x5a
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bfb8      	it	lt
 8001f44:	425b      	neglt	r3, r3
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fab8 	bl	80004bc <__aeabi_i2d>
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	4b1a      	ldr	r3, [pc, #104]	@ (8001fbc <rotate_motor+0x38c>)
 8001f52:	f7fe fb1d 	bl	8000590 <__aeabi_dmul>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f7fe fdef 	bl	8000b40 <__aeabi_d2uiz>
 8001f62:	4603      	mov	r3, r0
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	461a      	mov	r2, r3
 8001f68:	f240 316b 	movw	r1, #875	@ 0x36b
 8001f6c:	4816      	ldr	r0, [pc, #88]	@ (8001fc8 <rotate_motor+0x398>)
 8001f6e:	f000 fd1f 	bl	80029b0 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_MAX_POS, SHORTEST_TIME_ROTATE(4, 90));
 8001f72:	4b11      	ldr	r3, [pc, #68]	@ (8001fb8 <rotate_motor+0x388>)
 8001f74:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001f78:	3b5a      	subs	r3, #90	@ 0x5a
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bfb8      	it	lt
 8001f7e:	425b      	neglt	r3, r3
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe fa9b 	bl	80004bc <__aeabi_i2d>
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fbc <rotate_motor+0x38c>)
 8001f8c:	f7fe fb00 	bl	8000590 <__aeabi_dmul>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	f7fe fdd2 	bl	8000b40 <__aeabi_d2uiz>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f44f 715c 	mov.w	r1, #880	@ 0x370
 8001fa6:	4807      	ldr	r0, [pc, #28]	@ (8001fc4 <rotate_motor+0x394>)
 8001fa8:	f000 fd02 	bl	80029b0 <servo_move>
 8001fac:	f000 bc86 	b.w	80028bc <rotate_motor+0xc8c>
 8001fb0:	54442d18 	.word	0x54442d18
 8001fb4:	400921fb 	.word	0x400921fb
 8001fb8:	20000060 	.word	0x20000060
 8001fbc:	40080000 	.word	0x40080000
 8001fc0:	20000066 	.word	0x20000066
 8001fc4:	20000072 	.word	0x20000072
 8001fc8:	2000006c 	.word	0x2000006c
 8001fcc:	40668000 	.word	0x40668000
 8001fd0:	43340000 	.word	0x43340000
 8001fd4:	42b40000 	.word	0x42b40000
  } else if (base_vel.x_vel < 0 && base_vel.y_vel > 0 || base_vel.x_vel > 0 && base_vel.y_vel < 0) {    // quadrant 2 or 4
 8001fd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe4:	d506      	bpl.n	8001ff4 <rotate_motor+0x3c4>
 8001fe6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff2:	dc0f      	bgt.n	8002014 <rotate_motor+0x3e4>
 8001ff4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ff8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002000:	f340 822b 	ble.w	800245a <rotate_motor+0x82a>
 8002004:	edd7 7a02 	vldr	s15, [r7, #8]
 8002008:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800200c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002010:	f140 8223 	bpl.w	800245a <rotate_motor+0x82a>
    if (angle < 0)
 8002014:	edd7 7a05 	vldr	s15, [r7, #20]
 8002018:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800201c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002020:	d507      	bpl.n	8002032 <rotate_motor+0x402>
      angle += 180;
 8002022:	edd7 7a05 	vldr	s15, [r7, #20]
 8002026:	ed1f 7a16 	vldr	s14, [pc, #-88]	@ 8001fd0 <rotate_motor+0x3a0>
 800202a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800202e:	edc7 7a05 	vstr	s15, [r7, #20]
    angle -= 90;
 8002032:	edd7 7a05 	vldr	s15, [r7, #20]
 8002036:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 8001fd4 <rotate_motor+0x3a4>
 800203a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800203e:	edc7 7a05 	vstr	s15, [r7, #20]
    angle *= -1;
 8002042:	edd7 7a05 	vldr	s15, [r7, #20]
 8002046:	eef1 7a67 	vneg.f32	s15, s15
 800204a:	edc7 7a05 	vstr	s15, [r7, #20]

    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(1, angle));
 800204e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002052:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205a:	dd22      	ble.n	80020a2 <rotate_motor+0x472>
 800205c:	6978      	ldr	r0, [r7, #20]
 800205e:	f7fe fa3f 	bl	80004e0 <__aeabi_f2d>
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	4bcc      	ldr	r3, [pc, #816]	@ (8002398 <rotate_motor+0x768>)
 8002068:	f7fe fbbc 	bl	80007e4 <__aeabi_ddiv>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4610      	mov	r0, r2
 8002072:	4619      	mov	r1, r3
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	4bc8      	ldr	r3, [pc, #800]	@ (800239c <rotate_motor+0x76c>)
 800207a:	f7fe fa89 	bl	8000590 <__aeabi_dmul>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	4bc5      	ldr	r3, [pc, #788]	@ (80023a0 <rotate_motor+0x770>)
 800208c:	f7fe f8ca 	bl	8000224 <__adddf3>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	f7fe fd52 	bl	8000b40 <__aeabi_d2uiz>
 800209c:	4603      	mov	r3, r0
 800209e:	b29c      	uxth	r4, r3
 80020a0:	e021      	b.n	80020e6 <rotate_motor+0x4b6>
 80020a2:	6978      	ldr	r0, [r7, #20]
 80020a4:	f7fe fa1c 	bl	80004e0 <__aeabi_f2d>
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	4bba      	ldr	r3, [pc, #744]	@ (8002398 <rotate_motor+0x768>)
 80020ae:	f7fe fb99 	bl	80007e4 <__aeabi_ddiv>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4610      	mov	r0, r2
 80020b8:	4619      	mov	r1, r3
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	4bb9      	ldr	r3, [pc, #740]	@ (80023a4 <rotate_motor+0x774>)
 80020c0:	f7fe fa66 	bl	8000590 <__aeabi_dmul>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	4bb3      	ldr	r3, [pc, #716]	@ (80023a0 <rotate_motor+0x770>)
 80020d2:	f7fe f8a7 	bl	8000224 <__adddf3>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4610      	mov	r0, r2
 80020dc:	4619      	mov	r1, r3
 80020de:	f7fe fd2f 	bl	8000b40 <__aeabi_d2uiz>
 80020e2:	4603      	mov	r3, r0
 80020e4:	b29c      	uxth	r4, r3
 80020e6:	4bb0      	ldr	r3, [pc, #704]	@ (80023a8 <rotate_motor+0x778>)
 80020e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020ec:	335a      	adds	r3, #90	@ 0x5a
 80020ee:	ee07 3a90 	vmov	s15, r3
 80020f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80020fa:	eddf 6aac 	vldr	s13, [pc, #688]	@ 80023ac <rotate_motor+0x77c>
 80020fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002106:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800210a:	ee17 3a90 	vmov	r3, s15
 800210e:	2b00      	cmp	r3, #0
 8002110:	bfb8      	it	lt
 8002112:	425b      	neglt	r3, r3
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe f9d1 	bl	80004bc <__aeabi_i2d>
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	4ba4      	ldr	r3, [pc, #656]	@ (80023b0 <rotate_motor+0x780>)
 8002120:	f7fe fa36 	bl	8000590 <__aeabi_dmul>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	f7fe fd08 	bl	8000b40 <__aeabi_d2uiz>
 8002130:	4603      	mov	r3, r0
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	4621      	mov	r1, r4
 8002138:	489b      	ldr	r0, [pc, #620]	@ (80023a8 <rotate_motor+0x778>)
 800213a:	f000 fc39 	bl	80029b0 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(2, angle));
 800213e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002142:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214a:	dd22      	ble.n	8002192 <rotate_motor+0x562>
 800214c:	6978      	ldr	r0, [r7, #20]
 800214e:	f7fe f9c7 	bl	80004e0 <__aeabi_f2d>
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	4b90      	ldr	r3, [pc, #576]	@ (8002398 <rotate_motor+0x768>)
 8002158:	f7fe fb44 	bl	80007e4 <__aeabi_ddiv>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	4b8c      	ldr	r3, [pc, #560]	@ (800239c <rotate_motor+0x76c>)
 800216a:	f7fe fa11 	bl	8000590 <__aeabi_dmul>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	4b89      	ldr	r3, [pc, #548]	@ (80023a0 <rotate_motor+0x770>)
 800217c:	f7fe f852 	bl	8000224 <__adddf3>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f7fe fcda 	bl	8000b40 <__aeabi_d2uiz>
 800218c:	4603      	mov	r3, r0
 800218e:	b29c      	uxth	r4, r3
 8002190:	e021      	b.n	80021d6 <rotate_motor+0x5a6>
 8002192:	6978      	ldr	r0, [r7, #20]
 8002194:	f7fe f9a4 	bl	80004e0 <__aeabi_f2d>
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	4b7e      	ldr	r3, [pc, #504]	@ (8002398 <rotate_motor+0x768>)
 800219e:	f7fe fb21 	bl	80007e4 <__aeabi_ddiv>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	a373      	add	r3, pc, #460	@ (adr r3, 8002378 <rotate_motor+0x748>)
 80021ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b0:	f7fe f9ee 	bl	8000590 <__aeabi_dmul>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	4b77      	ldr	r3, [pc, #476]	@ (80023a0 <rotate_motor+0x770>)
 80021c2:	f7fe f82f 	bl	8000224 <__adddf3>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	f7fe fcb7 	bl	8000b40 <__aeabi_d2uiz>
 80021d2:	4603      	mov	r3, r0
 80021d4:	b29c      	uxth	r4, r3
 80021d6:	4b74      	ldr	r3, [pc, #464]	@ (80023a8 <rotate_motor+0x778>)
 80021d8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80021dc:	335a      	adds	r3, #90	@ 0x5a
 80021de:	ee07 3a90 	vmov	s15, r3
 80021e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80021ea:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80023ac <rotate_motor+0x77c>
 80021ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021fa:	ee17 3a90 	vmov	r3, s15
 80021fe:	2b00      	cmp	r3, #0
 8002200:	bfb8      	it	lt
 8002202:	425b      	neglt	r3, r3
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe f959 	bl	80004bc <__aeabi_i2d>
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	4b68      	ldr	r3, [pc, #416]	@ (80023b0 <rotate_motor+0x780>)
 8002210:	f7fe f9be 	bl	8000590 <__aeabi_dmul>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	f7fe fc90 	bl	8000b40 <__aeabi_d2uiz>
 8002220:	4603      	mov	r3, r0
 8002222:	b29b      	uxth	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	4621      	mov	r1, r4
 8002228:	4862      	ldr	r0, [pc, #392]	@ (80023b4 <rotate_motor+0x784>)
 800222a:	f000 fbc1 	bl	80029b0 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(3, angle));
 800222e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002232:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223a:	dd22      	ble.n	8002282 <rotate_motor+0x652>
 800223c:	6978      	ldr	r0, [r7, #20]
 800223e:	f7fe f94f 	bl	80004e0 <__aeabi_f2d>
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	4b54      	ldr	r3, [pc, #336]	@ (8002398 <rotate_motor+0x768>)
 8002248:	f7fe facc 	bl	80007e4 <__aeabi_ddiv>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4610      	mov	r0, r2
 8002252:	4619      	mov	r1, r3
 8002254:	a34a      	add	r3, pc, #296	@ (adr r3, 8002380 <rotate_motor+0x750>)
 8002256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225a:	f7fe f999 	bl	8000590 <__aeabi_dmul>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4610      	mov	r0, r2
 8002264:	4619      	mov	r1, r3
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	4b4d      	ldr	r3, [pc, #308]	@ (80023a0 <rotate_motor+0x770>)
 800226c:	f7fd ffda 	bl	8000224 <__adddf3>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	f7fe fc62 	bl	8000b40 <__aeabi_d2uiz>
 800227c:	4603      	mov	r3, r0
 800227e:	b29c      	uxth	r4, r3
 8002280:	e021      	b.n	80022c6 <rotate_motor+0x696>
 8002282:	6978      	ldr	r0, [r7, #20]
 8002284:	f7fe f92c 	bl	80004e0 <__aeabi_f2d>
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	4b42      	ldr	r3, [pc, #264]	@ (8002398 <rotate_motor+0x768>)
 800228e:	f7fe faa9 	bl	80007e4 <__aeabi_ddiv>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	a33b      	add	r3, pc, #236	@ (adr r3, 8002388 <rotate_motor+0x758>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe f976 	bl	8000590 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	4b3b      	ldr	r3, [pc, #236]	@ (80023a0 <rotate_motor+0x770>)
 80022b2:	f7fd ffb7 	bl	8000224 <__adddf3>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	f7fe fc3f 	bl	8000b40 <__aeabi_d2uiz>
 80022c2:	4603      	mov	r3, r0
 80022c4:	b29c      	uxth	r4, r3
 80022c6:	4b38      	ldr	r3, [pc, #224]	@ (80023a8 <rotate_motor+0x778>)
 80022c8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80022cc:	335a      	adds	r3, #90	@ 0x5a
 80022ce:	ee07 3a90 	vmov	s15, r3
 80022d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80022da:	eddf 6a34 	vldr	s13, [pc, #208]	@ 80023ac <rotate_motor+0x77c>
 80022de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ea:	ee17 3a90 	vmov	r3, s15
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	bfb8      	it	lt
 80022f2:	425b      	neglt	r3, r3
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe f8e1 	bl	80004bc <__aeabi_i2d>
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	4b2c      	ldr	r3, [pc, #176]	@ (80023b0 <rotate_motor+0x780>)
 8002300:	f7fe f946 	bl	8000590 <__aeabi_dmul>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	f7fe fc18 	bl	8000b40 <__aeabi_d2uiz>
 8002310:	4603      	mov	r3, r0
 8002312:	b29b      	uxth	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	4621      	mov	r1, r4
 8002318:	4827      	ldr	r0, [pc, #156]	@ (80023b8 <rotate_motor+0x788>)
 800231a:	f000 fb49 	bl	80029b0 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(4, angle));
 800231e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002322:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232a:	dd47      	ble.n	80023bc <rotate_motor+0x78c>
 800232c:	6978      	ldr	r0, [r7, #20]
 800232e:	f7fe f8d7 	bl	80004e0 <__aeabi_f2d>
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	4b18      	ldr	r3, [pc, #96]	@ (8002398 <rotate_motor+0x768>)
 8002338:	f7fe fa54 	bl	80007e4 <__aeabi_ddiv>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	a312      	add	r3, pc, #72	@ (adr r3, 8002390 <rotate_motor+0x760>)
 8002346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234a:	f7fe f921 	bl	8000590 <__aeabi_dmul>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4610      	mov	r0, r2
 8002354:	4619      	mov	r1, r3
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <rotate_motor+0x770>)
 800235c:	f7fd ff62 	bl	8000224 <__adddf3>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	f7fe fbea 	bl	8000b40 <__aeabi_d2uiz>
 800236c:	4603      	mov	r3, r0
 800236e:	b29c      	uxth	r4, r3
 8002370:	e046      	b.n	8002400 <rotate_motor+0x7d0>
 8002372:	bf00      	nop
 8002374:	f3af 8000 	nop.w
 8002378:	00000000 	.word	0x00000000
 800237c:	40786000 	.word	0x40786000
 8002380:	00000000 	.word	0x00000000
 8002384:	40777000 	.word	0x40777000
 8002388:	00000000 	.word	0x00000000
 800238c:	40772000 	.word	0x40772000
 8002390:	00000000 	.word	0x00000000
 8002394:	4077c000 	.word	0x4077c000
 8002398:	40568000 	.word	0x40568000
 800239c:	40768000 	.word	0x40768000
 80023a0:	407f4000 	.word	0x407f4000
 80023a4:	40790000 	.word	0x40790000
 80023a8:	20000060 	.word	0x20000060
 80023ac:	42b40000 	.word	0x42b40000
 80023b0:	40080000 	.word	0x40080000
 80023b4:	20000066 	.word	0x20000066
 80023b8:	2000006c 	.word	0x2000006c
 80023bc:	6978      	ldr	r0, [r7, #20]
 80023be:	f7fe f88f 	bl	80004e0 <__aeabi_f2d>
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	4bd0      	ldr	r3, [pc, #832]	@ (8002708 <rotate_motor+0xad8>)
 80023c8:	f7fe fa0c 	bl	80007e4 <__aeabi_ddiv>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4610      	mov	r0, r2
 80023d2:	4619      	mov	r1, r3
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	4bcc      	ldr	r3, [pc, #816]	@ (800270c <rotate_motor+0xadc>)
 80023da:	f7fe f8d9 	bl	8000590 <__aeabi_dmul>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4610      	mov	r0, r2
 80023e4:	4619      	mov	r1, r3
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	4bc9      	ldr	r3, [pc, #804]	@ (8002710 <rotate_motor+0xae0>)
 80023ec:	f7fd ff1a 	bl	8000224 <__adddf3>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	f7fe fba2 	bl	8000b40 <__aeabi_d2uiz>
 80023fc:	4603      	mov	r3, r0
 80023fe:	b29c      	uxth	r4, r3
 8002400:	4bc4      	ldr	r3, [pc, #784]	@ (8002714 <rotate_motor+0xae4>)
 8002402:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002406:	335a      	adds	r3, #90	@ 0x5a
 8002408:	ee07 3a90 	vmov	s15, r3
 800240c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002410:	edd7 7a05 	vldr	s15, [r7, #20]
 8002414:	eddf 6ac0 	vldr	s13, [pc, #768]	@ 8002718 <rotate_motor+0xae8>
 8002418:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800241c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002420:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002424:	ee17 3a90 	vmov	r3, s15
 8002428:	2b00      	cmp	r3, #0
 800242a:	bfb8      	it	lt
 800242c:	425b      	neglt	r3, r3
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe f844 	bl	80004bc <__aeabi_i2d>
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	4bb8      	ldr	r3, [pc, #736]	@ (800271c <rotate_motor+0xaec>)
 800243a:	f7fe f8a9 	bl	8000590 <__aeabi_dmul>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4610      	mov	r0, r2
 8002444:	4619      	mov	r1, r3
 8002446:	f7fe fb7b 	bl	8000b40 <__aeabi_d2uiz>
 800244a:	4603      	mov	r3, r0
 800244c:	b29b      	uxth	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	4621      	mov	r1, r4
 8002452:	48b3      	ldr	r0, [pc, #716]	@ (8002720 <rotate_motor+0xaf0>)
 8002454:	f000 faac 	bl	80029b0 <servo_move>
 8002458:	e230      	b.n	80028bc <rotate_motor+0xc8c>
  } else if (base_vel.x_vel < 0 && base_vel.y_vel < 0 || base_vel.x_vel > 0 && base_vel.y_vel > 0) {    // quadrant 1 or 3
 800245a:	edd7 7a01 	vldr	s15, [r7, #4]
 800245e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002466:	d506      	bpl.n	8002476 <rotate_motor+0x846>
 8002468:	edd7 7a02 	vldr	s15, [r7, #8]
 800246c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002474:	d40f      	bmi.n	8002496 <rotate_motor+0x866>
 8002476:	edd7 7a01 	vldr	s15, [r7, #4]
 800247a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800247e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002482:	f340 821b 	ble.w	80028bc <rotate_motor+0xc8c>
 8002486:	edd7 7a02 	vldr	s15, [r7, #8]
 800248a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800248e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002492:	f340 8213 	ble.w	80028bc <rotate_motor+0xc8c>
    if (angle < 0)
 8002496:	edd7 7a05 	vldr	s15, [r7, #20]
 800249a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800249e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a2:	d507      	bpl.n	80024b4 <rotate_motor+0x884>
      angle += 180;
 80024a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80024a8:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8002724 <rotate_motor+0xaf4>
 80024ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024b0:	edc7 7a05 	vstr	s15, [r7, #20]
    angle = 90 - angle;
 80024b4:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8002718 <rotate_motor+0xae8>
 80024b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80024bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c0:	edc7 7a05 	vstr	s15, [r7, #20]
    
    servo_move(&(servos[0]), SERVO_ID1_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(1, angle));
 80024c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80024c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d0:	dd22      	ble.n	8002518 <rotate_motor+0x8e8>
 80024d2:	6978      	ldr	r0, [r7, #20]
 80024d4:	f7fe f804 	bl	80004e0 <__aeabi_f2d>
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	4b8a      	ldr	r3, [pc, #552]	@ (8002708 <rotate_motor+0xad8>)
 80024de:	f7fe f981 	bl	80007e4 <__aeabi_ddiv>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	4b87      	ldr	r3, [pc, #540]	@ (800270c <rotate_motor+0xadc>)
 80024f0:	f7fe f84e 	bl	8000590 <__aeabi_dmul>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	4b83      	ldr	r3, [pc, #524]	@ (8002710 <rotate_motor+0xae0>)
 8002502:	f7fd fe8f 	bl	8000224 <__adddf3>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	f7fe fb17 	bl	8000b40 <__aeabi_d2uiz>
 8002512:	4603      	mov	r3, r0
 8002514:	b29c      	uxth	r4, r3
 8002516:	e021      	b.n	800255c <rotate_motor+0x92c>
 8002518:	6978      	ldr	r0, [r7, #20]
 800251a:	f7fd ffe1 	bl	80004e0 <__aeabi_f2d>
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	4b79      	ldr	r3, [pc, #484]	@ (8002708 <rotate_motor+0xad8>)
 8002524:	f7fe f95e 	bl	80007e4 <__aeabi_ddiv>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4610      	mov	r0, r2
 800252e:	4619      	mov	r1, r3
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	4b7c      	ldr	r3, [pc, #496]	@ (8002728 <rotate_motor+0xaf8>)
 8002536:	f7fe f82b 	bl	8000590 <__aeabi_dmul>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4610      	mov	r0, r2
 8002540:	4619      	mov	r1, r3
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	4b72      	ldr	r3, [pc, #456]	@ (8002710 <rotate_motor+0xae0>)
 8002548:	f7fd fe6c 	bl	8000224 <__adddf3>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4610      	mov	r0, r2
 8002552:	4619      	mov	r1, r3
 8002554:	f7fe faf4 	bl	8000b40 <__aeabi_d2uiz>
 8002558:	4603      	mov	r3, r0
 800255a:	b29c      	uxth	r4, r3
 800255c:	4b6d      	ldr	r3, [pc, #436]	@ (8002714 <rotate_motor+0xae4>)
 800255e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002562:	335a      	adds	r3, #90	@ 0x5a
 8002564:	ee07 3a90 	vmov	s15, r3
 8002568:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800256c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002570:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002718 <rotate_motor+0xae8>
 8002574:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800257c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002580:	ee17 3a90 	vmov	r3, s15
 8002584:	2b00      	cmp	r3, #0
 8002586:	bfb8      	it	lt
 8002588:	425b      	neglt	r3, r3
 800258a:	4618      	mov	r0, r3
 800258c:	f7fd ff96 	bl	80004bc <__aeabi_i2d>
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	4b61      	ldr	r3, [pc, #388]	@ (800271c <rotate_motor+0xaec>)
 8002596:	f7fd fffb 	bl	8000590 <__aeabi_dmul>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f7fe facd 	bl	8000b40 <__aeabi_d2uiz>
 80025a6:	4603      	mov	r3, r0
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	461a      	mov	r2, r3
 80025ac:	4621      	mov	r1, r4
 80025ae:	4859      	ldr	r0, [pc, #356]	@ (8002714 <rotate_motor+0xae4>)
 80025b0:	f000 f9fe 	bl	80029b0 <servo_move>
    servo_move(&(servos[1]), SERVO_ID2_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(2, angle));
 80025b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80025b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c0:	dd22      	ble.n	8002608 <rotate_motor+0x9d8>
 80025c2:	6978      	ldr	r0, [r7, #20]
 80025c4:	f7fd ff8c 	bl	80004e0 <__aeabi_f2d>
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	4b4e      	ldr	r3, [pc, #312]	@ (8002708 <rotate_motor+0xad8>)
 80025ce:	f7fe f909 	bl	80007e4 <__aeabi_ddiv>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	4b4b      	ldr	r3, [pc, #300]	@ (800270c <rotate_motor+0xadc>)
 80025e0:	f7fd ffd6 	bl	8000590 <__aeabi_dmul>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	4b47      	ldr	r3, [pc, #284]	@ (8002710 <rotate_motor+0xae0>)
 80025f2:	f7fd fe17 	bl	8000224 <__adddf3>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	f7fe fa9f 	bl	8000b40 <__aeabi_d2uiz>
 8002602:	4603      	mov	r3, r0
 8002604:	b29c      	uxth	r4, r3
 8002606:	e021      	b.n	800264c <rotate_motor+0xa1c>
 8002608:	6978      	ldr	r0, [r7, #20]
 800260a:	f7fd ff69 	bl	80004e0 <__aeabi_f2d>
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	4b3d      	ldr	r3, [pc, #244]	@ (8002708 <rotate_motor+0xad8>)
 8002614:	f7fe f8e6 	bl	80007e4 <__aeabi_ddiv>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
 8002620:	a335      	add	r3, pc, #212	@ (adr r3, 80026f8 <rotate_motor+0xac8>)
 8002622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002626:	f7fd ffb3 	bl	8000590 <__aeabi_dmul>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4610      	mov	r0, r2
 8002630:	4619      	mov	r1, r3
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	4b36      	ldr	r3, [pc, #216]	@ (8002710 <rotate_motor+0xae0>)
 8002638:	f7fd fdf4 	bl	8000224 <__adddf3>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	f7fe fa7c 	bl	8000b40 <__aeabi_d2uiz>
 8002648:	4603      	mov	r3, r0
 800264a:	b29c      	uxth	r4, r3
 800264c:	4b31      	ldr	r3, [pc, #196]	@ (8002714 <rotate_motor+0xae4>)
 800264e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002652:	335a      	adds	r3, #90	@ 0x5a
 8002654:	ee07 3a90 	vmov	s15, r3
 8002658:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800265c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002660:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8002718 <rotate_motor+0xae8>
 8002664:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800266c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002670:	ee17 3a90 	vmov	r3, s15
 8002674:	2b00      	cmp	r3, #0
 8002676:	bfb8      	it	lt
 8002678:	425b      	neglt	r3, r3
 800267a:	4618      	mov	r0, r3
 800267c:	f7fd ff1e 	bl	80004bc <__aeabi_i2d>
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	4b25      	ldr	r3, [pc, #148]	@ (800271c <rotate_motor+0xaec>)
 8002686:	f7fd ff83 	bl	8000590 <__aeabi_dmul>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	4610      	mov	r0, r2
 8002690:	4619      	mov	r1, r3
 8002692:	f7fe fa55 	bl	8000b40 <__aeabi_d2uiz>
 8002696:	4603      	mov	r3, r0
 8002698:	b29b      	uxth	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	4621      	mov	r1, r4
 800269e:	4823      	ldr	r0, [pc, #140]	@ (800272c <rotate_motor+0xafc>)
 80026a0:	f000 f986 	bl	80029b0 <servo_move>
    servo_move(&(servos[2]), SERVO_ID3_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(3, angle));
 80026a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80026a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b0:	dd3e      	ble.n	8002730 <rotate_motor+0xb00>
 80026b2:	6978      	ldr	r0, [r7, #20]
 80026b4:	f7fd ff14 	bl	80004e0 <__aeabi_f2d>
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	4b12      	ldr	r3, [pc, #72]	@ (8002708 <rotate_motor+0xad8>)
 80026be:	f7fe f891 	bl	80007e4 <__aeabi_ddiv>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4610      	mov	r0, r2
 80026c8:	4619      	mov	r1, r3
 80026ca:	a30d      	add	r3, pc, #52	@ (adr r3, 8002700 <rotate_motor+0xad0>)
 80026cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d0:	f7fd ff5e 	bl	8000590 <__aeabi_dmul>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4610      	mov	r0, r2
 80026da:	4619      	mov	r1, r3
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <rotate_motor+0xae0>)
 80026e2:	f7fd fd9f 	bl	8000224 <__adddf3>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4610      	mov	r0, r2
 80026ec:	4619      	mov	r1, r3
 80026ee:	f7fe fa27 	bl	8000b40 <__aeabi_d2uiz>
 80026f2:	4603      	mov	r3, r0
 80026f4:	b29c      	uxth	r4, r3
 80026f6:	e03d      	b.n	8002774 <rotate_motor+0xb44>
 80026f8:	00000000 	.word	0x00000000
 80026fc:	40786000 	.word	0x40786000
 8002700:	00000000 	.word	0x00000000
 8002704:	40777000 	.word	0x40777000
 8002708:	40568000 	.word	0x40568000
 800270c:	40768000 	.word	0x40768000
 8002710:	407f4000 	.word	0x407f4000
 8002714:	20000060 	.word	0x20000060
 8002718:	42b40000 	.word	0x42b40000
 800271c:	40080000 	.word	0x40080000
 8002720:	20000072 	.word	0x20000072
 8002724:	43340000 	.word	0x43340000
 8002728:	40790000 	.word	0x40790000
 800272c:	20000066 	.word	0x20000066
 8002730:	6978      	ldr	r0, [r7, #20]
 8002732:	f7fd fed5 	bl	80004e0 <__aeabi_f2d>
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	4b67      	ldr	r3, [pc, #412]	@ (80028d8 <rotate_motor+0xca8>)
 800273c:	f7fe f852 	bl	80007e4 <__aeabi_ddiv>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4610      	mov	r0, r2
 8002746:	4619      	mov	r1, r3
 8002748:	a35f      	add	r3, pc, #380	@ (adr r3, 80028c8 <rotate_motor+0xc98>)
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	f7fd ff1f 	bl	8000590 <__aeabi_dmul>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4610      	mov	r0, r2
 8002758:	4619      	mov	r1, r3
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	4b5f      	ldr	r3, [pc, #380]	@ (80028dc <rotate_motor+0xcac>)
 8002760:	f7fd fd60 	bl	8000224 <__adddf3>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	f7fe f9e8 	bl	8000b40 <__aeabi_d2uiz>
 8002770:	4603      	mov	r3, r0
 8002772:	b29c      	uxth	r4, r3
 8002774:	4b5a      	ldr	r3, [pc, #360]	@ (80028e0 <rotate_motor+0xcb0>)
 8002776:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800277a:	335a      	adds	r3, #90	@ 0x5a
 800277c:	ee07 3a90 	vmov	s15, r3
 8002780:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002784:	edd7 7a05 	vldr	s15, [r7, #20]
 8002788:	eddf 6a56 	vldr	s13, [pc, #344]	@ 80028e4 <rotate_motor+0xcb4>
 800278c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002798:	ee17 3a90 	vmov	r3, s15
 800279c:	2b00      	cmp	r3, #0
 800279e:	bfb8      	it	lt
 80027a0:	425b      	neglt	r3, r3
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fd fe8a 	bl	80004bc <__aeabi_i2d>
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	4b4e      	ldr	r3, [pc, #312]	@ (80028e8 <rotate_motor+0xcb8>)
 80027ae:	f7fd feef 	bl	8000590 <__aeabi_dmul>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4610      	mov	r0, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	f7fe f9c1 	bl	8000b40 <__aeabi_d2uiz>
 80027be:	4603      	mov	r3, r0
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	4621      	mov	r1, r4
 80027c6:	4849      	ldr	r0, [pc, #292]	@ (80028ec <rotate_motor+0xcbc>)
 80027c8:	f000 f8f2 	bl	80029b0 <servo_move>
    servo_move(&(servos[3]), SERVO_ID4_ANGLE_TO_POS(angle), SHORTEST_TIME_ROTATE(4, angle));
 80027cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80027d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d8:	dd22      	ble.n	8002820 <rotate_motor+0xbf0>
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	f7fd fe80 	bl	80004e0 <__aeabi_f2d>
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	4b3c      	ldr	r3, [pc, #240]	@ (80028d8 <rotate_motor+0xca8>)
 80027e6:	f7fd fffd 	bl	80007e4 <__aeabi_ddiv>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	a337      	add	r3, pc, #220	@ (adr r3, 80028d0 <rotate_motor+0xca0>)
 80027f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f8:	f7fd feca 	bl	8000590 <__aeabi_dmul>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	4b34      	ldr	r3, [pc, #208]	@ (80028dc <rotate_motor+0xcac>)
 800280a:	f7fd fd0b 	bl	8000224 <__adddf3>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	f7fe f993 	bl	8000b40 <__aeabi_d2uiz>
 800281a:	4603      	mov	r3, r0
 800281c:	b29c      	uxth	r4, r3
 800281e:	e021      	b.n	8002864 <rotate_motor+0xc34>
 8002820:	6978      	ldr	r0, [r7, #20]
 8002822:	f7fd fe5d 	bl	80004e0 <__aeabi_f2d>
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	4b2b      	ldr	r3, [pc, #172]	@ (80028d8 <rotate_motor+0xca8>)
 800282c:	f7fd ffda 	bl	80007e4 <__aeabi_ddiv>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4610      	mov	r0, r2
 8002836:	4619      	mov	r1, r3
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	4b2c      	ldr	r3, [pc, #176]	@ (80028f0 <rotate_motor+0xcc0>)
 800283e:	f7fd fea7 	bl	8000590 <__aeabi_dmul>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4610      	mov	r0, r2
 8002848:	4619      	mov	r1, r3
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	4b23      	ldr	r3, [pc, #140]	@ (80028dc <rotate_motor+0xcac>)
 8002850:	f7fd fce8 	bl	8000224 <__adddf3>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	f7fe f970 	bl	8000b40 <__aeabi_d2uiz>
 8002860:	4603      	mov	r3, r0
 8002862:	b29c      	uxth	r4, r3
 8002864:	4b1e      	ldr	r3, [pc, #120]	@ (80028e0 <rotate_motor+0xcb0>)
 8002866:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800286a:	335a      	adds	r3, #90	@ 0x5a
 800286c:	ee07 3a90 	vmov	s15, r3
 8002870:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002874:	edd7 7a05 	vldr	s15, [r7, #20]
 8002878:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80028e4 <rotate_motor+0xcb4>
 800287c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002884:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002888:	ee17 3a90 	vmov	r3, s15
 800288c:	2b00      	cmp	r3, #0
 800288e:	bfb8      	it	lt
 8002890:	425b      	neglt	r3, r3
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fe12 	bl	80004bc <__aeabi_i2d>
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <rotate_motor+0xcb8>)
 800289e:	f7fd fe77 	bl	8000590 <__aeabi_dmul>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	f7fe f949 	bl	8000b40 <__aeabi_d2uiz>
 80028ae:	4603      	mov	r3, r0
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	4621      	mov	r1, r4
 80028b6:	480f      	ldr	r0, [pc, #60]	@ (80028f4 <rotate_motor+0xcc4>)
 80028b8:	f000 f87a 	bl	80029b0 <servo_move>
  }
}
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bdb0      	pop	{r4, r5, r7, pc}
 80028c2:	bf00      	nop
 80028c4:	f3af 8000 	nop.w
 80028c8:	00000000 	.word	0x00000000
 80028cc:	40772000 	.word	0x40772000
 80028d0:	00000000 	.word	0x00000000
 80028d4:	4077c000 	.word	0x4077c000
 80028d8:	40568000 	.word	0x40568000
 80028dc:	407f4000 	.word	0x407f4000
 80028e0:	20000060 	.word	0x20000060
 80028e4:	42b40000 	.word	0x42b40000
 80028e8:	40080000 	.word	0x40080000
 80028ec:	2000006c 	.word	0x2000006c
 80028f0:	40768000 	.word	0x40768000
 80028f4:	20000072 	.word	0x20000072

080028f8 <movement_control>:

void movement_control(BaseVelocity base_vel) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08c      	sub	sp, #48	@ 0x30
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	eef0 6a40 	vmov.f32	s13, s0
 8002902:	eeb0 7a60 	vmov.f32	s14, s1
 8002906:	eef0 7a41 	vmov.f32	s15, s2
 800290a:	edc7 6a01 	vstr	s13, [r7, #4]
 800290e:	ed87 7a02 	vstr	s14, [r7, #8]
 8002912:	edc7 7a03 	vstr	s15, [r7, #12]
  rotate_motor(base_vel);
 8002916:	edd7 6a01 	vldr	s13, [r7, #4]
 800291a:	ed97 7a02 	vldr	s14, [r7, #8]
 800291e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002922:	eeb0 0a66 	vmov.f32	s0, s13
 8002926:	eef0 0a47 	vmov.f32	s1, s14
 800292a:	eeb0 1a67 	vmov.f32	s2, s15
 800292e:	f7ff f97f 	bl	8001c30 <rotate_motor>
  WheelVelocity target_vel = base2wheel(base_vel);
 8002932:	edd7 6a01 	vldr	s13, [r7, #4]
 8002936:	ed97 7a02 	vldr	s14, [r7, #8]
 800293a:	edd7 7a03 	vldr	s15, [r7, #12]
 800293e:	eeb0 0a66 	vmov.f32	s0, s13
 8002942:	eef0 0a47 	vmov.f32	s1, s14
 8002946:	eeb0 1a67 	vmov.f32	s2, s15
 800294a:	f7fe fda5 	bl	8001498 <base2wheel>
 800294e:	eeb0 6a40 	vmov.f32	s12, s0
 8002952:	eef0 6a60 	vmov.f32	s13, s1
 8002956:	eeb0 7a41 	vmov.f32	s14, s2
 800295a:	eef0 7a61 	vmov.f32	s15, s3
 800295e:	ed87 6a08 	vstr	s12, [r7, #32]
 8002962:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8002966:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 800296a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
  WheelPWM target_pwm = wheel2pwm(target_vel);
 800296e:	f107 0310 	add.w	r3, r7, #16
 8002972:	ed97 6a08 	vldr	s12, [r7, #32]
 8002976:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800297a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800297e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002982:	eeb0 0a46 	vmov.f32	s0, s12
 8002986:	eef0 0a66 	vmov.f32	s1, s13
 800298a:	eeb0 1a47 	vmov.f32	s2, s14
 800298e:	eef0 1a67 	vmov.f32	s3, s15
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe fea8 	bl	80016e8 <wheel2pwm>
  wheels_control(target_pwm);
 8002998:	f107 0310 	add.w	r3, r7, #16
 800299c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800299e:	f7ff f927 	bl	8001bf0 <wheels_control>
}
 80029a2:	bf00      	nop
 80029a4:	3730      	adds	r7, #48	@ 0x30
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	0000      	movs	r0, r0
 80029ac:	0000      	movs	r0, r0
	...

080029b0 <servo_move>:
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
  HAL_UART_Receive(&huart4, receive_buffer, sizeof(receive_buffer), 0xFFFF);
  target_servo->current_pos = (receive_buffer[8] << 8) + receive_buffer[7];
}

void servo_move(HTD45H_Servo* target_servo, uint16_t target_pos, uint16_t time) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	807b      	strh	r3, [r7, #2]
 80029bc:	4613      	mov	r3, r2
 80029be:	803b      	strh	r3, [r7, #0]
  uint8_t send_buffer[10];
  send_buffer[0] = send_buffer[1] = FRAME_HEADER;
 80029c0:	2355      	movs	r3, #85	@ 0x55
 80029c2:	737b      	strb	r3, [r7, #13]
 80029c4:	7b7b      	ldrb	r3, [r7, #13]
 80029c6:	733b      	strb	r3, [r7, #12]
  send_buffer[2] = 0x01 * 3 + 5;
 80029c8:	2308      	movs	r3, #8
 80029ca:	73bb      	strb	r3, [r7, #14]
  send_buffer[3] = CMD_SERVO_MOVE;
 80029cc:	2303      	movs	r3, #3
 80029ce:	73fb      	strb	r3, [r7, #15]
  send_buffer[4] = 0x01;
 80029d0:	2301      	movs	r3, #1
 80029d2:	743b      	strb	r3, [r7, #16]
  send_buffer[5] = GET_LOW_BYTE(time);
 80029d4:	883b      	ldrh	r3, [r7, #0]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	747b      	strb	r3, [r7, #17]
  send_buffer[6] = GET_HIGH_BYTE(time);
 80029da:	883b      	ldrh	r3, [r7, #0]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	b29b      	uxth	r3, r3
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	74bb      	strb	r3, [r7, #18]
  send_buffer[7] = target_servo->servo_id;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	74fb      	strb	r3, [r7, #19]
  send_buffer[8] = GET_LOW_BYTE(target_pos);
 80029ea:	887b      	ldrh	r3, [r7, #2]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	753b      	strb	r3, [r7, #20]
  send_buffer[9] = GET_HIGH_BYTE(target_pos);
 80029f0:	887b      	ldrh	r3, [r7, #2]
 80029f2:	0a1b      	lsrs	r3, r3, #8
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	757b      	strb	r3, [r7, #21]
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
 80029fa:	f107 010c 	add.w	r1, r7, #12
 80029fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a02:	220a      	movs	r2, #10
 8002a04:	4898      	ldr	r0, [pc, #608]	@ (8002c68 <servo_move+0x2b8>)
 8002a06:	f003 fd65 	bl	80064d4 <HAL_UART_Transmit>
  target_servo->current_pos = target_pos;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	887a      	ldrh	r2, [r7, #2]
 8002a0e:	805a      	strh	r2, [r3, #2]

  switch (target_servo->servo_id) {
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	2b05      	cmp	r3, #5
 8002a18:	f200 8110 	bhi.w	8002c3c <servo_move+0x28c>
 8002a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a24 <servo_move+0x74>)
 8002a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a22:	bf00      	nop
 8002a24:	08002a3d 	.word	0x08002a3d
 8002a28:	08002abd 	.word	0x08002abd
 8002a2c:	08002b3d 	.word	0x08002b3d
 8002a30:	08002bbd 	.word	0x08002bbd
 8002a34:	08002c3d 	.word	0x08002c3d
 8002a38:	08002c3d 	.word	0x08002c3d
    case 1:
      target_servo->current_degree = SERVO_ID1_POS_TO_ANGLE(target_pos);
 8002a3c:	887b      	ldrh	r3, [r7, #2]
 8002a3e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002a42:	d91c      	bls.n	8002a7e <servo_move+0xce>
 8002a44:	887b      	ldrh	r3, [r7, #2]
 8002a46:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd fd36 	bl	80004bc <__aeabi_i2d>
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	4b85      	ldr	r3, [pc, #532]	@ (8002c6c <servo_move+0x2bc>)
 8002a56:	f7fd fd9b 	bl	8000590 <__aeabi_dmul>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	4b82      	ldr	r3, [pc, #520]	@ (8002c70 <servo_move+0x2c0>)
 8002a68:	f7fd febc 	bl	80007e4 <__aeabi_ddiv>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	f7fe f83c 	bl	8000af0 <__aeabi_d2iz>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	b21b      	sxth	r3, r3
 8002a7c:	e01b      	b.n	8002ab6 <servo_move+0x106>
 8002a7e:	887b      	ldrh	r3, [r7, #2]
 8002a80:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fd19 	bl	80004bc <__aeabi_i2d>
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	4b79      	ldr	r3, [pc, #484]	@ (8002c74 <servo_move+0x2c4>)
 8002a90:	f7fd fd7e 	bl	8000590 <__aeabi_dmul>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4610      	mov	r0, r2
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	4b75      	ldr	r3, [pc, #468]	@ (8002c78 <servo_move+0x2c8>)
 8002aa2:	f7fd fe9f 	bl	80007e4 <__aeabi_ddiv>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	f7fe f81f 	bl	8000af0 <__aeabi_d2iz>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	b21b      	sxth	r3, r3
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	8093      	strh	r3, [r2, #4]
      break;
 8002aba:	e0c0      	b.n	8002c3e <servo_move+0x28e>
    case 2:
      target_servo->current_degree = SERVO_ID2_POS_TO_ANGLE(target_pos);
 8002abc:	887b      	ldrh	r3, [r7, #2]
 8002abe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002ac2:	d91c      	bls.n	8002afe <servo_move+0x14e>
 8002ac4:	887b      	ldrh	r3, [r7, #2]
 8002ac6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd fcf6 	bl	80004bc <__aeabi_i2d>
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	4b65      	ldr	r3, [pc, #404]	@ (8002c6c <servo_move+0x2bc>)
 8002ad6:	f7fd fd5b 	bl	8000590 <__aeabi_dmul>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	4b62      	ldr	r3, [pc, #392]	@ (8002c70 <servo_move+0x2c0>)
 8002ae8:	f7fd fe7c 	bl	80007e4 <__aeabi_ddiv>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	f7fd fffc 	bl	8000af0 <__aeabi_d2iz>
 8002af8:	4603      	mov	r3, r0
 8002afa:	b21b      	sxth	r3, r3
 8002afc:	e01b      	b.n	8002b36 <servo_move+0x186>
 8002afe:	887b      	ldrh	r3, [r7, #2]
 8002b00:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fd fcd9 	bl	80004bc <__aeabi_i2d>
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	4b59      	ldr	r3, [pc, #356]	@ (8002c74 <servo_move+0x2c4>)
 8002b10:	f7fd fd3e 	bl	8000590 <__aeabi_dmul>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	a34a      	add	r3, pc, #296	@ (adr r3, 8002c48 <servo_move+0x298>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	f7fd fe5f 	bl	80007e4 <__aeabi_ddiv>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f7fd ffdf 	bl	8000af0 <__aeabi_d2iz>
 8002b32:	4603      	mov	r3, r0
 8002b34:	b21b      	sxth	r3, r3
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	8093      	strh	r3, [r2, #4]
      break;
 8002b3a:	e080      	b.n	8002c3e <servo_move+0x28e>
    case 3:
      target_servo->current_degree = SERVO_ID3_POS_TO_ANGLE(target_pos);
 8002b3c:	887b      	ldrh	r3, [r7, #2]
 8002b3e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002b42:	d91c      	bls.n	8002b7e <servo_move+0x1ce>
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fd fcb6 	bl	80004bc <__aeabi_i2d>
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	4b45      	ldr	r3, [pc, #276]	@ (8002c6c <servo_move+0x2bc>)
 8002b56:	f7fd fd1b 	bl	8000590 <__aeabi_dmul>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	a33b      	add	r3, pc, #236	@ (adr r3, 8002c50 <servo_move+0x2a0>)
 8002b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b68:	f7fd fe3c 	bl	80007e4 <__aeabi_ddiv>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4610      	mov	r0, r2
 8002b72:	4619      	mov	r1, r3
 8002b74:	f7fd ffbc 	bl	8000af0 <__aeabi_d2iz>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	e01b      	b.n	8002bb6 <servo_move+0x206>
 8002b7e:	887b      	ldrh	r3, [r7, #2]
 8002b80:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fd fc99 	bl	80004bc <__aeabi_i2d>
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	4b39      	ldr	r3, [pc, #228]	@ (8002c74 <servo_move+0x2c4>)
 8002b90:	f7fd fcfe 	bl	8000590 <__aeabi_dmul>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4610      	mov	r0, r2
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	a32e      	add	r3, pc, #184	@ (adr r3, 8002c58 <servo_move+0x2a8>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	f7fd fe1f 	bl	80007e4 <__aeabi_ddiv>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	f7fd ff9f 	bl	8000af0 <__aeabi_d2iz>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	b21b      	sxth	r3, r3
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	8093      	strh	r3, [r2, #4]
      break;
 8002bba:	e040      	b.n	8002c3e <servo_move+0x28e>
    case 4:
      target_servo->current_degree = SERVO_ID4_POS_TO_ANGLE(target_pos);
 8002bbc:	887b      	ldrh	r3, [r7, #2]
 8002bbe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002bc2:	d91c      	bls.n	8002bfe <servo_move+0x24e>
 8002bc4:	887b      	ldrh	r3, [r7, #2]
 8002bc6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fc76 	bl	80004bc <__aeabi_i2d>
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	4b25      	ldr	r3, [pc, #148]	@ (8002c6c <servo_move+0x2bc>)
 8002bd6:	f7fd fcdb 	bl	8000590 <__aeabi_dmul>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	a31f      	add	r3, pc, #124	@ (adr r3, 8002c60 <servo_move+0x2b0>)
 8002be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be8:	f7fd fdfc 	bl	80007e4 <__aeabi_ddiv>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f7fd ff7c 	bl	8000af0 <__aeabi_d2iz>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	b21b      	sxth	r3, r3
 8002bfc:	e01b      	b.n	8002c36 <servo_move+0x286>
 8002bfe:	887b      	ldrh	r3, [r7, #2]
 8002c00:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fd fc59 	bl	80004bc <__aeabi_i2d>
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	4b19      	ldr	r3, [pc, #100]	@ (8002c74 <servo_move+0x2c4>)
 8002c10:	f7fd fcbe 	bl	8000590 <__aeabi_dmul>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	4b16      	ldr	r3, [pc, #88]	@ (8002c7c <servo_move+0x2cc>)
 8002c22:	f7fd fddf 	bl	80007e4 <__aeabi_ddiv>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f7fd ff5f 	bl	8000af0 <__aeabi_d2iz>
 8002c32:	4603      	mov	r3, r0
 8002c34:	b21b      	sxth	r3, r3
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	8093      	strh	r3, [r2, #4]
      break;
 8002c3a:	e000      	b.n	8002c3e <servo_move+0x28e>
    case 5:
      break;
    case 6:
      break;
    default:
      break;
 8002c3c:	bf00      	nop
  }
}
 8002c3e:	bf00      	nop
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	00000000 	.word	0x00000000
 8002c4c:	c0786000 	.word	0xc0786000
 8002c50:	00000000 	.word	0x00000000
 8002c54:	40777000 	.word	0x40777000
 8002c58:	00000000 	.word	0x00000000
 8002c5c:	c0772000 	.word	0xc0772000
 8002c60:	00000000 	.word	0x00000000
 8002c64:	4077c000 	.word	0x4077c000
 8002c68:	200002f0 	.word	0x200002f0
 8002c6c:	40568000 	.word	0x40568000
 8002c70:	40768000 	.word	0x40768000
 8002c74:	c0568000 	.word	0xc0568000
 8002c78:	c0790000 	.word	0xc0790000
 8002c7c:	c0768000 	.word	0xc0768000

08002c80 <servo_reset_all>:
uint16_t servo_get_current_pos(HTD45H_Servo* target_servo) {
  servo_update_current_pos(target_servo);
  return target_servo->current_pos;
}

void servo_reset_all(void) {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
  for (int i = 0; i < 6; i++)
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]
 8002c8a:	e010      	b.n	8002cae <servo_reset_all+0x2e>
    servo_move(&(servos[i]), INITIAL_POS, 500);
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc0 <servo_reset_all+0x40>)
 8002c98:	4413      	add	r3, r2
 8002c9a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002c9e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fe84 	bl	80029b0 <servo_move>
  for (int i = 0; i < 6; i++)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3301      	adds	r3, #1
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b05      	cmp	r3, #5
 8002cb2:	ddeb      	ble.n	8002c8c <servo_reset_all+0xc>
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000060 	.word	0x20000060

08002cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cca:	4b0f      	ldr	r3, [pc, #60]	@ (8002d08 <HAL_MspInit+0x44>)
 8002ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cce:	4a0e      	ldr	r2, [pc, #56]	@ (8002d08 <HAL_MspInit+0x44>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <HAL_MspInit+0x44>)
 8002cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	607b      	str	r3, [r7, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ce2:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <HAL_MspInit+0x44>)
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce6:	4a08      	ldr	r2, [pc, #32]	@ (8002d08 <HAL_MspInit+0x44>)
 8002ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cee:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <HAL_MspInit+0x44>)
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002cfa:	f001 f921 	bl	8003f40 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000

08002d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d10:	bf00      	nop
 8002d12:	e7fd      	b.n	8002d10 <NMI_Handler+0x4>

08002d14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d18:	bf00      	nop
 8002d1a:	e7fd      	b.n	8002d18 <HardFault_Handler+0x4>

08002d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <MemManage_Handler+0x4>

08002d24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d28:	bf00      	nop
 8002d2a:	e7fd      	b.n	8002d28 <BusFault_Handler+0x4>

08002d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <UsageFault_Handler+0x4>

08002d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d62:	f000 fd8b 	bl	800387c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d70:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <SystemInit+0x20>)
 8002d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d76:	4a05      	ldr	r2, [pc, #20]	@ (8002d8c <SystemInit+0x20>)
 8002d78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08c      	sub	sp, #48	@ 0x30
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d96:	f107 030c 	add.w	r3, r7, #12
 8002d9a:	2224      	movs	r2, #36	@ 0x24
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f004 fa44 	bl	800722c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da4:	463b      	mov	r3, r7
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	605a      	str	r2, [r3, #4]
 8002dac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002dae:	4b23      	ldr	r3, [pc, #140]	@ (8002e3c <MX_TIM1_Init+0xac>)
 8002db0:	4a23      	ldr	r2, [pc, #140]	@ (8002e40 <MX_TIM1_Init+0xb0>)
 8002db2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002db4:	4b21      	ldr	r3, [pc, #132]	@ (8002e3c <MX_TIM1_Init+0xac>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dba:	4b20      	ldr	r3, [pc, #128]	@ (8002e3c <MX_TIM1_Init+0xac>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e3c <MX_TIM1_Init+0xac>)
 8002dc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8002e3c <MX_TIM1_Init+0xac>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dce:	4b1b      	ldr	r3, [pc, #108]	@ (8002e3c <MX_TIM1_Init+0xac>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dd4:	4b19      	ldr	r3, [pc, #100]	@ (8002e3c <MX_TIM1_Init+0xac>)
 8002dd6:	2280      	movs	r2, #128	@ 0x80
 8002dd8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002de2:	2301      	movs	r3, #1
 8002de4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002dea:	230a      	movs	r3, #10
 8002dec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002dee:	2300      	movs	r3, #0
 8002df0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002df2:	2301      	movs	r3, #1
 8002df4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002df6:	2300      	movs	r3, #0
 8002df8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8002dfa:	230a      	movs	r3, #10
 8002dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002dfe:	f107 030c 	add.w	r3, r7, #12
 8002e02:	4619      	mov	r1, r3
 8002e04:	480d      	ldr	r0, [pc, #52]	@ (8002e3c <MX_TIM1_Init+0xac>)
 8002e06:	f002 fa6b 	bl	80052e0 <HAL_TIM_Encoder_Init>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002e10:	f7fe fb3b 	bl	800148a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e14:	2300      	movs	r3, #0
 8002e16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e20:	463b      	mov	r3, r7
 8002e22:	4619      	mov	r1, r3
 8002e24:	4805      	ldr	r0, [pc, #20]	@ (8002e3c <MX_TIM1_Init+0xac>)
 8002e26:	f003 fa6f 	bl	8006308 <HAL_TIMEx_MasterConfigSynchronization>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002e30:	f7fe fb2b 	bl	800148a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002e34:	bf00      	nop
 8002e36:	3730      	adds	r7, #48	@ 0x30
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	20000128 	.word	0x20000128
 8002e40:	40012c00 	.word	0x40012c00

08002e44 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08e      	sub	sp, #56	@ 0x38
 8002e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	605a      	str	r2, [r3, #4]
 8002e54:	609a      	str	r2, [r3, #8]
 8002e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e58:	f107 031c 	add.w	r3, r7, #28
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e64:	463b      	mov	r3, r7
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	605a      	str	r2, [r3, #4]
 8002e6c:	609a      	str	r2, [r3, #8]
 8002e6e:	60da      	str	r2, [r3, #12]
 8002e70:	611a      	str	r2, [r3, #16]
 8002e72:	615a      	str	r2, [r3, #20]
 8002e74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e76:	4b2d      	ldr	r3, [pc, #180]	@ (8002f2c <MX_TIM2_Init+0xe8>)
 8002e78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f2c <MX_TIM2_Init+0xe8>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e84:	4b29      	ldr	r3, [pc, #164]	@ (8002f2c <MX_TIM2_Init+0xe8>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16800;
 8002e8a:	4b28      	ldr	r3, [pc, #160]	@ (8002f2c <MX_TIM2_Init+0xe8>)
 8002e8c:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8002e90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e92:	4b26      	ldr	r3, [pc, #152]	@ (8002f2c <MX_TIM2_Init+0xe8>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e98:	4b24      	ldr	r3, [pc, #144]	@ (8002f2c <MX_TIM2_Init+0xe8>)
 8002e9a:	2280      	movs	r2, #128	@ 0x80
 8002e9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e9e:	4823      	ldr	r0, [pc, #140]	@ (8002f2c <MX_TIM2_Init+0xe8>)
 8002ea0:	f001 ffda 	bl	8004e58 <HAL_TIM_Base_Init>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002eaa:	f7fe faee 	bl	800148a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002eb4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002eb8:	4619      	mov	r1, r3
 8002eba:	481c      	ldr	r0, [pc, #112]	@ (8002f2c <MX_TIM2_Init+0xe8>)
 8002ebc:	f002 fc78 	bl	80057b0 <HAL_TIM_ConfigClockSource>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002ec6:	f7fe fae0 	bl	800148a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002eca:	4818      	ldr	r0, [pc, #96]	@ (8002f2c <MX_TIM2_Init+0xe8>)
 8002ecc:	f002 f894 	bl	8004ff8 <HAL_TIM_PWM_Init>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002ed6:	f7fe fad8 	bl	800148a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ee2:	f107 031c 	add.w	r3, r7, #28
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4810      	ldr	r0, [pc, #64]	@ (8002f2c <MX_TIM2_Init+0xe8>)
 8002eea:	f003 fa0d 	bl	8006308 <HAL_TIMEx_MasterConfigSynchronization>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002ef4:	f7fe fac9 	bl	800148a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ef8:	2360      	movs	r3, #96	@ 0x60
 8002efa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f04:	2300      	movs	r3, #0
 8002f06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f08:	463b      	mov	r3, r7
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4807      	ldr	r0, [pc, #28]	@ (8002f2c <MX_TIM2_Init+0xe8>)
 8002f10:	f002 fb3a 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002f1a:	f7fe fab6 	bl	800148a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002f1e:	4803      	ldr	r0, [pc, #12]	@ (8002f2c <MX_TIM2_Init+0xe8>)
 8002f20:	f000 faa4 	bl	800346c <HAL_TIM_MspPostInit>

}
 8002f24:	bf00      	nop
 8002f26:	3738      	adds	r7, #56	@ 0x38
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20000174 	.word	0x20000174

08002f30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08e      	sub	sp, #56	@ 0x38
 8002f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	605a      	str	r2, [r3, #4]
 8002f40:	609a      	str	r2, [r3, #8]
 8002f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f44:	f107 031c 	add.w	r3, r7, #28
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f50:	463b      	mov	r3, r7
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	605a      	str	r2, [r3, #4]
 8002f58:	609a      	str	r2, [r3, #8]
 8002f5a:	60da      	str	r2, [r3, #12]
 8002f5c:	611a      	str	r2, [r3, #16]
 8002f5e:	615a      	str	r2, [r3, #20]
 8002f60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f62:	4b38      	ldr	r3, [pc, #224]	@ (8003044 <MX_TIM3_Init+0x114>)
 8002f64:	4a38      	ldr	r2, [pc, #224]	@ (8003048 <MX_TIM3_Init+0x118>)
 8002f66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8002f68:	4b36      	ldr	r3, [pc, #216]	@ (8003044 <MX_TIM3_Init+0x114>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f6e:	4b35      	ldr	r3, [pc, #212]	@ (8003044 <MX_TIM3_Init+0x114>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16799;
 8002f74:	4b33      	ldr	r3, [pc, #204]	@ (8003044 <MX_TIM3_Init+0x114>)
 8002f76:	f244 129f 	movw	r2, #16799	@ 0x419f
 8002f7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f7c:	4b31      	ldr	r3, [pc, #196]	@ (8003044 <MX_TIM3_Init+0x114>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f82:	4b30      	ldr	r3, [pc, #192]	@ (8003044 <MX_TIM3_Init+0x114>)
 8002f84:	2280      	movs	r2, #128	@ 0x80
 8002f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f88:	482e      	ldr	r0, [pc, #184]	@ (8003044 <MX_TIM3_Init+0x114>)
 8002f8a:	f001 ff65 	bl	8004e58 <HAL_TIM_Base_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002f94:	f7fe fa79 	bl	800148a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4827      	ldr	r0, [pc, #156]	@ (8003044 <MX_TIM3_Init+0x114>)
 8002fa6:	f002 fc03 	bl	80057b0 <HAL_TIM_ConfigClockSource>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002fb0:	f7fe fa6b 	bl	800148a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002fb4:	4823      	ldr	r0, [pc, #140]	@ (8003044 <MX_TIM3_Init+0x114>)
 8002fb6:	f002 f81f 	bl	8004ff8 <HAL_TIM_PWM_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002fc0:	f7fe fa63 	bl	800148a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fcc:	f107 031c 	add.w	r3, r7, #28
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	481c      	ldr	r0, [pc, #112]	@ (8003044 <MX_TIM3_Init+0x114>)
 8002fd4:	f003 f998 	bl	8006308 <HAL_TIMEx_MasterConfigSynchronization>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002fde:	f7fe fa54 	bl	800148a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fe2:	2360      	movs	r3, #96	@ 0x60
 8002fe4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ff2:	463b      	mov	r3, r7
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4812      	ldr	r0, [pc, #72]	@ (8003044 <MX_TIM3_Init+0x114>)
 8002ffa:	f002 fac5 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003004:	f7fe fa41 	bl	800148a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003008:	463b      	mov	r3, r7
 800300a:	2204      	movs	r2, #4
 800300c:	4619      	mov	r1, r3
 800300e:	480d      	ldr	r0, [pc, #52]	@ (8003044 <MX_TIM3_Init+0x114>)
 8003010:	f002 faba 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800301a:	f7fe fa36 	bl	800148a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800301e:	463b      	mov	r3, r7
 8003020:	220c      	movs	r2, #12
 8003022:	4619      	mov	r1, r3
 8003024:	4807      	ldr	r0, [pc, #28]	@ (8003044 <MX_TIM3_Init+0x114>)
 8003026:	f002 faaf 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8003030:	f7fe fa2b 	bl	800148a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003034:	4803      	ldr	r0, [pc, #12]	@ (8003044 <MX_TIM3_Init+0x114>)
 8003036:	f000 fa19 	bl	800346c <HAL_TIM_MspPostInit>

}
 800303a:	bf00      	nop
 800303c:	3738      	adds	r7, #56	@ 0x38
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	200001c0 	.word	0x200001c0
 8003048:	40000400 	.word	0x40000400

0800304c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08c      	sub	sp, #48	@ 0x30
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003052:	f107 030c 	add.w	r3, r7, #12
 8003056:	2224      	movs	r2, #36	@ 0x24
 8003058:	2100      	movs	r1, #0
 800305a:	4618      	mov	r0, r3
 800305c:	f004 f8e6 	bl	800722c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003060:	463b      	mov	r3, r7
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	605a      	str	r2, [r3, #4]
 8003068:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800306a:	4b21      	ldr	r3, [pc, #132]	@ (80030f0 <MX_TIM4_Init+0xa4>)
 800306c:	4a21      	ldr	r2, [pc, #132]	@ (80030f4 <MX_TIM4_Init+0xa8>)
 800306e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003070:	4b1f      	ldr	r3, [pc, #124]	@ (80030f0 <MX_TIM4_Init+0xa4>)
 8003072:	2200      	movs	r2, #0
 8003074:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003076:	4b1e      	ldr	r3, [pc, #120]	@ (80030f0 <MX_TIM4_Init+0xa4>)
 8003078:	2200      	movs	r2, #0
 800307a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800307c:	4b1c      	ldr	r3, [pc, #112]	@ (80030f0 <MX_TIM4_Init+0xa4>)
 800307e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003082:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003084:	4b1a      	ldr	r3, [pc, #104]	@ (80030f0 <MX_TIM4_Init+0xa4>)
 8003086:	2200      	movs	r2, #0
 8003088:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800308a:	4b19      	ldr	r3, [pc, #100]	@ (80030f0 <MX_TIM4_Init+0xa4>)
 800308c:	2280      	movs	r2, #128	@ 0x80
 800308e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003090:	2303      	movs	r3, #3
 8003092:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003094:	2300      	movs	r3, #0
 8003096:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003098:	2301      	movs	r3, #1
 800309a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800309c:	2300      	movs	r3, #0
 800309e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80030a0:	230a      	movs	r3, #10
 80030a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80030a4:	2300      	movs	r3, #0
 80030a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80030a8:	2301      	movs	r3, #1
 80030aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80030ac:	2300      	movs	r3, #0
 80030ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80030b0:	230a      	movs	r3, #10
 80030b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80030b4:	f107 030c 	add.w	r3, r7, #12
 80030b8:	4619      	mov	r1, r3
 80030ba:	480d      	ldr	r0, [pc, #52]	@ (80030f0 <MX_TIM4_Init+0xa4>)
 80030bc:	f002 f910 	bl	80052e0 <HAL_TIM_Encoder_Init>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80030c6:	f7fe f9e0 	bl	800148a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ca:	2300      	movs	r3, #0
 80030cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80030d2:	463b      	mov	r3, r7
 80030d4:	4619      	mov	r1, r3
 80030d6:	4806      	ldr	r0, [pc, #24]	@ (80030f0 <MX_TIM4_Init+0xa4>)
 80030d8:	f003 f916 	bl	8006308 <HAL_TIMEx_MasterConfigSynchronization>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80030e2:	f7fe f9d2 	bl	800148a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80030e6:	bf00      	nop
 80030e8:	3730      	adds	r7, #48	@ 0x30
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	2000020c 	.word	0x2000020c
 80030f4:	40000800 	.word	0x40000800

080030f8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08c      	sub	sp, #48	@ 0x30
 80030fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80030fe:	f107 030c 	add.w	r3, r7, #12
 8003102:	2224      	movs	r2, #36	@ 0x24
 8003104:	2100      	movs	r1, #0
 8003106:	4618      	mov	r0, r3
 8003108:	f004 f890 	bl	800722c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800310c:	463b      	mov	r3, r7
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	605a      	str	r2, [r3, #4]
 8003114:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003116:	4b21      	ldr	r3, [pc, #132]	@ (800319c <MX_TIM5_Init+0xa4>)
 8003118:	4a21      	ldr	r2, [pc, #132]	@ (80031a0 <MX_TIM5_Init+0xa8>)
 800311a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800311c:	4b1f      	ldr	r3, [pc, #124]	@ (800319c <MX_TIM5_Init+0xa4>)
 800311e:	2200      	movs	r2, #0
 8003120:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003122:	4b1e      	ldr	r3, [pc, #120]	@ (800319c <MX_TIM5_Init+0xa4>)
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003128:	4b1c      	ldr	r3, [pc, #112]	@ (800319c <MX_TIM5_Init+0xa4>)
 800312a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800312e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003130:	4b1a      	ldr	r3, [pc, #104]	@ (800319c <MX_TIM5_Init+0xa4>)
 8003132:	2200      	movs	r2, #0
 8003134:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003136:	4b19      	ldr	r3, [pc, #100]	@ (800319c <MX_TIM5_Init+0xa4>)
 8003138:	2280      	movs	r2, #128	@ 0x80
 800313a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800313c:	2303      	movs	r3, #3
 800313e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003140:	2300      	movs	r3, #0
 8003142:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003144:	2301      	movs	r3, #1
 8003146:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003148:	2300      	movs	r3, #0
 800314a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800314c:	230a      	movs	r3, #10
 800314e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003150:	2300      	movs	r3, #0
 8003152:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003154:	2301      	movs	r3, #1
 8003156:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003158:	2300      	movs	r3, #0
 800315a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800315c:	230a      	movs	r3, #10
 800315e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003160:	f107 030c 	add.w	r3, r7, #12
 8003164:	4619      	mov	r1, r3
 8003166:	480d      	ldr	r0, [pc, #52]	@ (800319c <MX_TIM5_Init+0xa4>)
 8003168:	f002 f8ba 	bl	80052e0 <HAL_TIM_Encoder_Init>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8003172:	f7fe f98a 	bl	800148a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003176:	2300      	movs	r3, #0
 8003178:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800317e:	463b      	mov	r3, r7
 8003180:	4619      	mov	r1, r3
 8003182:	4806      	ldr	r0, [pc, #24]	@ (800319c <MX_TIM5_Init+0xa4>)
 8003184:	f003 f8c0 	bl	8006308 <HAL_TIMEx_MasterConfigSynchronization>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800318e:	f7fe f97c 	bl	800148a <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003192:	bf00      	nop
 8003194:	3730      	adds	r7, #48	@ 0x30
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000258 	.word	0x20000258
 80031a0:	40000c00 	.word	0x40000c00

080031a4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08c      	sub	sp, #48	@ 0x30
 80031a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031aa:	f107 030c 	add.w	r3, r7, #12
 80031ae:	2224      	movs	r2, #36	@ 0x24
 80031b0:	2100      	movs	r1, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f004 f83a 	bl	800722c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031b8:	463b      	mov	r3, r7
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80031c2:	4b23      	ldr	r3, [pc, #140]	@ (8003250 <MX_TIM8_Init+0xac>)
 80031c4:	4a23      	ldr	r2, [pc, #140]	@ (8003254 <MX_TIM8_Init+0xb0>)
 80031c6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80031c8:	4b21      	ldr	r3, [pc, #132]	@ (8003250 <MX_TIM8_Init+0xac>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ce:	4b20      	ldr	r3, [pc, #128]	@ (8003250 <MX_TIM8_Init+0xac>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80031d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003250 <MX_TIM8_Init+0xac>)
 80031d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031da:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003250 <MX_TIM8_Init+0xac>)
 80031de:	2200      	movs	r2, #0
 80031e0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80031e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003250 <MX_TIM8_Init+0xac>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031e8:	4b19      	ldr	r3, [pc, #100]	@ (8003250 <MX_TIM8_Init+0xac>)
 80031ea:	2280      	movs	r2, #128	@ 0x80
 80031ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80031ee:	2303      	movs	r3, #3
 80031f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80031f6:	2301      	movs	r3, #1
 80031f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80031fe:	230a      	movs	r3, #10
 8003200:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003202:	2300      	movs	r3, #0
 8003204:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003206:	2301      	movs	r3, #1
 8003208:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800320a:	2300      	movs	r3, #0
 800320c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800320e:	230a      	movs	r3, #10
 8003210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003212:	f107 030c 	add.w	r3, r7, #12
 8003216:	4619      	mov	r1, r3
 8003218:	480d      	ldr	r0, [pc, #52]	@ (8003250 <MX_TIM8_Init+0xac>)
 800321a:	f002 f861 	bl	80052e0 <HAL_TIM_Encoder_Init>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8003224:	f7fe f931 	bl	800148a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003228:	2300      	movs	r3, #0
 800322a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800322c:	2300      	movs	r3, #0
 800322e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003230:	2300      	movs	r3, #0
 8003232:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003234:	463b      	mov	r3, r7
 8003236:	4619      	mov	r1, r3
 8003238:	4805      	ldr	r0, [pc, #20]	@ (8003250 <MX_TIM8_Init+0xac>)
 800323a:	f003 f865 	bl	8006308 <HAL_TIMEx_MasterConfigSynchronization>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003244:	f7fe f921 	bl	800148a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003248:	bf00      	nop
 800324a:	3730      	adds	r7, #48	@ 0x30
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	200002a4 	.word	0x200002a4
 8003254:	40013400 	.word	0x40013400

08003258 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b090      	sub	sp, #64	@ 0x40
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003260:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a5d      	ldr	r2, [pc, #372]	@ (80033ec <HAL_TIM_Encoder_MspInit+0x194>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d128      	bne.n	80032cc <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800327a:	4b5d      	ldr	r3, [pc, #372]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 800327c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800327e:	4a5c      	ldr	r2, [pc, #368]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003280:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003284:	6613      	str	r3, [r2, #96]	@ 0x60
 8003286:	4b5a      	ldr	r3, [pc, #360]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800328e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003290:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003292:	4b57      	ldr	r3, [pc, #348]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003296:	4a56      	ldr	r2, [pc, #344]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003298:	f043 0304 	orr.w	r3, r3, #4
 800329c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800329e:	4b54      	ldr	r3, [pc, #336]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 80032a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80032a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80032aa:	2303      	movs	r3, #3
 80032ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ae:	2302      	movs	r3, #2
 80032b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b6:	2300      	movs	r3, #0
 80032b8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80032ba:	2302      	movs	r3, #2
 80032bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032c2:	4619      	mov	r1, r3
 80032c4:	484b      	ldr	r0, [pc, #300]	@ (80033f4 <HAL_TIM_Encoder_MspInit+0x19c>)
 80032c6:	f000 fbfd 	bl	8003ac4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80032ca:	e08a      	b.n	80033e2 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a49      	ldr	r2, [pc, #292]	@ (80033f8 <HAL_TIM_Encoder_MspInit+0x1a0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d129      	bne.n	800332a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032d6:	4b46      	ldr	r3, [pc, #280]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032da:	4a45      	ldr	r2, [pc, #276]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 80032dc:	f043 0304 	orr.w	r3, r3, #4
 80032e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80032e2:	4b43      	ldr	r3, [pc, #268]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 80032e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	623b      	str	r3, [r7, #32]
 80032ec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ee:	4b40      	ldr	r3, [pc, #256]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 80032f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f2:	4a3f      	ldr	r2, [pc, #252]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 80032f4:	f043 0308 	orr.w	r3, r3, #8
 80032f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032fa:	4b3d      	ldr	r3, [pc, #244]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 80032fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003306:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800330a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003314:	2300      	movs	r3, #0
 8003316:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003318:	2302      	movs	r3, #2
 800331a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800331c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003320:	4619      	mov	r1, r3
 8003322:	4836      	ldr	r0, [pc, #216]	@ (80033fc <HAL_TIM_Encoder_MspInit+0x1a4>)
 8003324:	f000 fbce 	bl	8003ac4 <HAL_GPIO_Init>
}
 8003328:	e05b      	b.n	80033e2 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a34      	ldr	r2, [pc, #208]	@ (8003400 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d129      	bne.n	8003388 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003334:	4b2e      	ldr	r3, [pc, #184]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003338:	4a2d      	ldr	r2, [pc, #180]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 800333a:	f043 0308 	orr.w	r3, r3, #8
 800333e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003340:	4b2b      	ldr	r3, [pc, #172]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	61bb      	str	r3, [r7, #24]
 800334a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334c:	4b28      	ldr	r3, [pc, #160]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 800334e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003350:	4a27      	ldr	r2, [pc, #156]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003358:	4b25      	ldr	r3, [pc, #148]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 800335a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003364:	2303      	movs	r3, #3
 8003366:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003368:	2302      	movs	r3, #2
 800336a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003370:	2300      	movs	r3, #0
 8003372:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003374:	2302      	movs	r3, #2
 8003376:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003378:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800337c:	4619      	mov	r1, r3
 800337e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003382:	f000 fb9f 	bl	8003ac4 <HAL_GPIO_Init>
}
 8003386:	e02c      	b.n	80033e2 <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1d      	ldr	r2, [pc, #116]	@ (8003404 <HAL_TIM_Encoder_MspInit+0x1ac>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d127      	bne.n	80033e2 <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003392:	4b17      	ldr	r3, [pc, #92]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003396:	4a16      	ldr	r2, [pc, #88]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 8003398:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800339c:	6613      	str	r3, [r2, #96]	@ 0x60
 800339e:	4b14      	ldr	r3, [pc, #80]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 80033a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033aa:	4b11      	ldr	r3, [pc, #68]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 80033ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ae:	4a10      	ldr	r2, [pc, #64]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 80033b0:	f043 0304 	orr.w	r3, r3, #4
 80033b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033b6:	4b0e      	ldr	r3, [pc, #56]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x198>)
 80033b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033c2:	23c0      	movs	r3, #192	@ 0xc0
 80033c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c6:	2302      	movs	r3, #2
 80033c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ce:	2300      	movs	r3, #0
 80033d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80033d2:	2304      	movs	r3, #4
 80033d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033da:	4619      	mov	r1, r3
 80033dc:	4805      	ldr	r0, [pc, #20]	@ (80033f4 <HAL_TIM_Encoder_MspInit+0x19c>)
 80033de:	f000 fb71 	bl	8003ac4 <HAL_GPIO_Init>
}
 80033e2:	bf00      	nop
 80033e4:	3740      	adds	r7, #64	@ 0x40
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40012c00 	.word	0x40012c00
 80033f0:	40021000 	.word	0x40021000
 80033f4:	48000800 	.word	0x48000800
 80033f8:	40000800 	.word	0x40000800
 80033fc:	48000c00 	.word	0x48000c00
 8003400:	40000c00 	.word	0x40000c00
 8003404:	40013400 	.word	0x40013400

08003408 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003418:	d10c      	bne.n	8003434 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800341a:	4b12      	ldr	r3, [pc, #72]	@ (8003464 <HAL_TIM_Base_MspInit+0x5c>)
 800341c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341e:	4a11      	ldr	r2, [pc, #68]	@ (8003464 <HAL_TIM_Base_MspInit+0x5c>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	6593      	str	r3, [r2, #88]	@ 0x58
 8003426:	4b0f      	ldr	r3, [pc, #60]	@ (8003464 <HAL_TIM_Base_MspInit+0x5c>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003432:	e010      	b.n	8003456 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a0b      	ldr	r2, [pc, #44]	@ (8003468 <HAL_TIM_Base_MspInit+0x60>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d10b      	bne.n	8003456 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800343e:	4b09      	ldr	r3, [pc, #36]	@ (8003464 <HAL_TIM_Base_MspInit+0x5c>)
 8003440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003442:	4a08      	ldr	r2, [pc, #32]	@ (8003464 <HAL_TIM_Base_MspInit+0x5c>)
 8003444:	f043 0302 	orr.w	r3, r3, #2
 8003448:	6593      	str	r3, [r2, #88]	@ 0x58
 800344a:	4b06      	ldr	r3, [pc, #24]	@ (8003464 <HAL_TIM_Base_MspInit+0x5c>)
 800344c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	68bb      	ldr	r3, [r7, #8]
}
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000
 8003468:	40000400 	.word	0x40000400

0800346c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	@ 0x28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 0314 	add.w	r3, r7, #20
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800348c:	d11c      	bne.n	80034c8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800348e:	4b21      	ldr	r3, [pc, #132]	@ (8003514 <HAL_TIM_MspPostInit+0xa8>)
 8003490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003492:	4a20      	ldr	r2, [pc, #128]	@ (8003514 <HAL_TIM_MspPostInit+0xa8>)
 8003494:	f043 0308 	orr.w	r3, r3, #8
 8003498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800349a:	4b1e      	ldr	r3, [pc, #120]	@ (8003514 <HAL_TIM_MspPostInit+0xa8>)
 800349c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PD6     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034a6:	2340      	movs	r3, #64	@ 0x40
 80034a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034aa:	2302      	movs	r3, #2
 80034ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b2:	2300      	movs	r3, #0
 80034b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80034b6:	2302      	movs	r3, #2
 80034b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034ba:	f107 0314 	add.w	r3, r7, #20
 80034be:	4619      	mov	r1, r3
 80034c0:	4815      	ldr	r0, [pc, #84]	@ (8003518 <HAL_TIM_MspPostInit+0xac>)
 80034c2:	f000 faff 	bl	8003ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80034c6:	e020      	b.n	800350a <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a13      	ldr	r2, [pc, #76]	@ (800351c <HAL_TIM_MspPostInit+0xb0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d11b      	bne.n	800350a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034d2:	4b10      	ldr	r3, [pc, #64]	@ (8003514 <HAL_TIM_MspPostInit+0xa8>)
 80034d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003514 <HAL_TIM_MspPostInit+0xa8>)
 80034d8:	f043 0310 	orr.w	r3, r3, #16
 80034dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034de:	4b0d      	ldr	r3, [pc, #52]	@ (8003514 <HAL_TIM_MspPostInit+0xa8>)
 80034e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 80034ea:	232c      	movs	r3, #44	@ 0x2c
 80034ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ee:	2302      	movs	r3, #2
 80034f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f6:	2300      	movs	r3, #0
 80034f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034fa:	2302      	movs	r3, #2
 80034fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034fe:	f107 0314 	add.w	r3, r7, #20
 8003502:	4619      	mov	r1, r3
 8003504:	4806      	ldr	r0, [pc, #24]	@ (8003520 <HAL_TIM_MspPostInit+0xb4>)
 8003506:	f000 fadd 	bl	8003ac4 <HAL_GPIO_Init>
}
 800350a:	bf00      	nop
 800350c:	3728      	adds	r7, #40	@ 0x28
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000
 8003518:	48000c00 	.word	0x48000c00
 800351c:	40000400 	.word	0x40000400
 8003520:	48001000 	.word	0x48001000

08003524 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003528:	4b22      	ldr	r3, [pc, #136]	@ (80035b4 <MX_UART4_Init+0x90>)
 800352a:	4a23      	ldr	r2, [pc, #140]	@ (80035b8 <MX_UART4_Init+0x94>)
 800352c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800352e:	4b21      	ldr	r3, [pc, #132]	@ (80035b4 <MX_UART4_Init+0x90>)
 8003530:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003534:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003536:	4b1f      	ldr	r3, [pc, #124]	@ (80035b4 <MX_UART4_Init+0x90>)
 8003538:	2200      	movs	r2, #0
 800353a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800353c:	4b1d      	ldr	r3, [pc, #116]	@ (80035b4 <MX_UART4_Init+0x90>)
 800353e:	2200      	movs	r2, #0
 8003540:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003542:	4b1c      	ldr	r3, [pc, #112]	@ (80035b4 <MX_UART4_Init+0x90>)
 8003544:	2200      	movs	r2, #0
 8003546:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003548:	4b1a      	ldr	r3, [pc, #104]	@ (80035b4 <MX_UART4_Init+0x90>)
 800354a:	220c      	movs	r2, #12
 800354c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800354e:	4b19      	ldr	r3, [pc, #100]	@ (80035b4 <MX_UART4_Init+0x90>)
 8003550:	2200      	movs	r2, #0
 8003552:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003554:	4b17      	ldr	r3, [pc, #92]	@ (80035b4 <MX_UART4_Init+0x90>)
 8003556:	2200      	movs	r2, #0
 8003558:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800355a:	4b16      	ldr	r3, [pc, #88]	@ (80035b4 <MX_UART4_Init+0x90>)
 800355c:	2200      	movs	r2, #0
 800355e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003560:	4b14      	ldr	r3, [pc, #80]	@ (80035b4 <MX_UART4_Init+0x90>)
 8003562:	2200      	movs	r2, #0
 8003564:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003566:	4b13      	ldr	r3, [pc, #76]	@ (80035b4 <MX_UART4_Init+0x90>)
 8003568:	2200      	movs	r2, #0
 800356a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800356c:	4811      	ldr	r0, [pc, #68]	@ (80035b4 <MX_UART4_Init+0x90>)
 800356e:	f002 ff61 	bl	8006434 <HAL_UART_Init>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003578:	f7fd ff87 	bl	800148a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800357c:	2100      	movs	r1, #0
 800357e:	480d      	ldr	r0, [pc, #52]	@ (80035b4 <MX_UART4_Init+0x90>)
 8003580:	f003 fd8a 	bl	8007098 <HAL_UARTEx_SetTxFifoThreshold>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800358a:	f7fd ff7e 	bl	800148a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800358e:	2100      	movs	r1, #0
 8003590:	4808      	ldr	r0, [pc, #32]	@ (80035b4 <MX_UART4_Init+0x90>)
 8003592:	f003 fdbf 	bl	8007114 <HAL_UARTEx_SetRxFifoThreshold>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800359c:	f7fd ff75 	bl	800148a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80035a0:	4804      	ldr	r0, [pc, #16]	@ (80035b4 <MX_UART4_Init+0x90>)
 80035a2:	f003 fd40 	bl	8007026 <HAL_UARTEx_DisableFifoMode>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80035ac:	f7fd ff6d 	bl	800148a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80035b0:	bf00      	nop
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	200002f0 	.word	0x200002f0
 80035b8:	40004c00 	.word	0x40004c00

080035bc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80035c0:	4b22      	ldr	r3, [pc, #136]	@ (800364c <MX_USART1_UART_Init+0x90>)
 80035c2:	4a23      	ldr	r2, [pc, #140]	@ (8003650 <MX_USART1_UART_Init+0x94>)
 80035c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80035c6:	4b21      	ldr	r3, [pc, #132]	@ (800364c <MX_USART1_UART_Init+0x90>)
 80035c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80035cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80035ce:	4b1f      	ldr	r3, [pc, #124]	@ (800364c <MX_USART1_UART_Init+0x90>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80035d4:	4b1d      	ldr	r3, [pc, #116]	@ (800364c <MX_USART1_UART_Init+0x90>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80035da:	4b1c      	ldr	r3, [pc, #112]	@ (800364c <MX_USART1_UART_Init+0x90>)
 80035dc:	2200      	movs	r2, #0
 80035de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80035e0:	4b1a      	ldr	r3, [pc, #104]	@ (800364c <MX_USART1_UART_Init+0x90>)
 80035e2:	220c      	movs	r2, #12
 80035e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035e6:	4b19      	ldr	r3, [pc, #100]	@ (800364c <MX_USART1_UART_Init+0x90>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80035ec:	4b17      	ldr	r3, [pc, #92]	@ (800364c <MX_USART1_UART_Init+0x90>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035f2:	4b16      	ldr	r3, [pc, #88]	@ (800364c <MX_USART1_UART_Init+0x90>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80035f8:	4b14      	ldr	r3, [pc, #80]	@ (800364c <MX_USART1_UART_Init+0x90>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035fe:	4b13      	ldr	r3, [pc, #76]	@ (800364c <MX_USART1_UART_Init+0x90>)
 8003600:	2200      	movs	r2, #0
 8003602:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003604:	4811      	ldr	r0, [pc, #68]	@ (800364c <MX_USART1_UART_Init+0x90>)
 8003606:	f002 ff15 	bl	8006434 <HAL_UART_Init>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003610:	f7fd ff3b 	bl	800148a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003614:	2100      	movs	r1, #0
 8003616:	480d      	ldr	r0, [pc, #52]	@ (800364c <MX_USART1_UART_Init+0x90>)
 8003618:	f003 fd3e 	bl	8007098 <HAL_UARTEx_SetTxFifoThreshold>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003622:	f7fd ff32 	bl	800148a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003626:	2100      	movs	r1, #0
 8003628:	4808      	ldr	r0, [pc, #32]	@ (800364c <MX_USART1_UART_Init+0x90>)
 800362a:	f003 fd73 	bl	8007114 <HAL_UARTEx_SetRxFifoThreshold>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003634:	f7fd ff29 	bl	800148a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003638:	4804      	ldr	r0, [pc, #16]	@ (800364c <MX_USART1_UART_Init+0x90>)
 800363a:	f003 fcf4 	bl	8007026 <HAL_UARTEx_DisableFifoMode>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003644:	f7fd ff21 	bl	800148a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003648:	bf00      	nop
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000384 	.word	0x20000384
 8003650:	40013800 	.word	0x40013800

08003654 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b0a0      	sub	sp, #128	@ 0x80
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800366c:	f107 0318 	add.w	r3, r7, #24
 8003670:	2254      	movs	r2, #84	@ 0x54
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f003 fdd9 	bl	800722c <memset>
  if(uartHandle->Instance==UART4)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a3d      	ldr	r2, [pc, #244]	@ (8003774 <HAL_UART_MspInit+0x120>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d137      	bne.n	80036f4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003684:	2308      	movs	r3, #8
 8003686:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003688:	2300      	movs	r3, #0
 800368a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800368c:	f107 0318 	add.w	r3, r7, #24
 8003690:	4618      	mov	r0, r3
 8003692:	f001 f993 	bl	80049bc <HAL_RCCEx_PeriphCLKConfig>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800369c:	f7fd fef5 	bl	800148a <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80036a0:	4b35      	ldr	r3, [pc, #212]	@ (8003778 <HAL_UART_MspInit+0x124>)
 80036a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a4:	4a34      	ldr	r2, [pc, #208]	@ (8003778 <HAL_UART_MspInit+0x124>)
 80036a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80036aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80036ac:	4b32      	ldr	r3, [pc, #200]	@ (8003778 <HAL_UART_MspInit+0x124>)
 80036ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003778 <HAL_UART_MspInit+0x124>)
 80036ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036bc:	4a2e      	ldr	r2, [pc, #184]	@ (8003778 <HAL_UART_MspInit+0x124>)
 80036be:	f043 0304 	orr.w	r3, r3, #4
 80036c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003778 <HAL_UART_MspInit+0x124>)
 80036c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036d0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80036d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d6:	2302      	movs	r3, #2
 80036d8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036de:	2300      	movs	r3, #0
 80036e0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80036e2:	2305      	movs	r3, #5
 80036e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036e6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80036ea:	4619      	mov	r1, r3
 80036ec:	4823      	ldr	r0, [pc, #140]	@ (800377c <HAL_UART_MspInit+0x128>)
 80036ee:	f000 f9e9 	bl	8003ac4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80036f2:	e03a      	b.n	800376a <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a21      	ldr	r2, [pc, #132]	@ (8003780 <HAL_UART_MspInit+0x12c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d135      	bne.n	800376a <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80036fe:	2301      	movs	r3, #1
 8003700:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003706:	f107 0318 	add.w	r3, r7, #24
 800370a:	4618      	mov	r0, r3
 800370c:	f001 f956 	bl	80049bc <HAL_RCCEx_PeriphCLKConfig>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8003716:	f7fd feb8 	bl	800148a <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800371a:	4b17      	ldr	r3, [pc, #92]	@ (8003778 <HAL_UART_MspInit+0x124>)
 800371c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800371e:	4a16      	ldr	r2, [pc, #88]	@ (8003778 <HAL_UART_MspInit+0x124>)
 8003720:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003724:	6613      	str	r3, [r2, #96]	@ 0x60
 8003726:	4b14      	ldr	r3, [pc, #80]	@ (8003778 <HAL_UART_MspInit+0x124>)
 8003728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800372a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003732:	4b11      	ldr	r3, [pc, #68]	@ (8003778 <HAL_UART_MspInit+0x124>)
 8003734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003736:	4a10      	ldr	r2, [pc, #64]	@ (8003778 <HAL_UART_MspInit+0x124>)
 8003738:	f043 0304 	orr.w	r3, r3, #4
 800373c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800373e:	4b0e      	ldr	r3, [pc, #56]	@ (8003778 <HAL_UART_MspInit+0x124>)
 8003740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003742:	f003 0304 	and.w	r3, r3, #4
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800374a:	2330      	movs	r3, #48	@ 0x30
 800374c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374e:	2302      	movs	r3, #2
 8003750:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003752:	2300      	movs	r3, #0
 8003754:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003756:	2300      	movs	r3, #0
 8003758:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800375a:	2307      	movs	r3, #7
 800375c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800375e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003762:	4619      	mov	r1, r3
 8003764:	4805      	ldr	r0, [pc, #20]	@ (800377c <HAL_UART_MspInit+0x128>)
 8003766:	f000 f9ad 	bl	8003ac4 <HAL_GPIO_Init>
}
 800376a:	bf00      	nop
 800376c:	3780      	adds	r7, #128	@ 0x80
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40004c00 	.word	0x40004c00
 8003778:	40021000 	.word	0x40021000
 800377c:	48000800 	.word	0x48000800
 8003780:	40013800 	.word	0x40013800

08003784 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003784:	480d      	ldr	r0, [pc, #52]	@ (80037bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003786:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003788:	f7ff faf0 	bl	8002d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800378c:	480c      	ldr	r0, [pc, #48]	@ (80037c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800378e:	490d      	ldr	r1, [pc, #52]	@ (80037c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003790:	4a0d      	ldr	r2, [pc, #52]	@ (80037c8 <LoopForever+0xe>)
  movs r3, #0
 8003792:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003794:	e002      	b.n	800379c <LoopCopyDataInit>

08003796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800379a:	3304      	adds	r3, #4

0800379c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800379c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800379e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037a0:	d3f9      	bcc.n	8003796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037a2:	4a0a      	ldr	r2, [pc, #40]	@ (80037cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80037a4:	4c0a      	ldr	r4, [pc, #40]	@ (80037d0 <LoopForever+0x16>)
  movs r3, #0
 80037a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037a8:	e001      	b.n	80037ae <LoopFillZerobss>

080037aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037ac:	3204      	adds	r2, #4

080037ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037b0:	d3fb      	bcc.n	80037aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037b2:	f003 fd49 	bl	8007248 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80037b6:	f7fd fd61 	bl	800127c <main>

080037ba <LoopForever>:

LoopForever:
    b LoopForever
 80037ba:	e7fe      	b.n	80037ba <LoopForever>
  ldr   r0, =_estack
 80037bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037c4:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 80037c8:	08007a50 	.word	0x08007a50
  ldr r2, =_sbss
 80037cc:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 80037d0:	20000554 	.word	0x20000554

080037d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80037d4:	e7fe      	b.n	80037d4 <ADC1_2_IRQHandler>

080037d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037e0:	2003      	movs	r0, #3
 80037e2:	f000 f93d 	bl	8003a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037e6:	200f      	movs	r0, #15
 80037e8:	f000 f80e 	bl	8003808 <HAL_InitTick>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	71fb      	strb	r3, [r7, #7]
 80037f6:	e001      	b.n	80037fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037f8:	f7ff fa64 	bl	8002cc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037fc:	79fb      	ldrb	r3, [r7, #7]

}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003814:	4b16      	ldr	r3, [pc, #88]	@ (8003870 <HAL_InitTick+0x68>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d022      	beq.n	8003862 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800381c:	4b15      	ldr	r3, [pc, #84]	@ (8003874 <HAL_InitTick+0x6c>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b13      	ldr	r3, [pc, #76]	@ (8003870 <HAL_InitTick+0x68>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003828:	fbb1 f3f3 	udiv	r3, r1, r3
 800382c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003830:	4618      	mov	r0, r3
 8003832:	f000 f93a 	bl	8003aaa <HAL_SYSTICK_Config>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10f      	bne.n	800385c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b0f      	cmp	r3, #15
 8003840:	d809      	bhi.n	8003856 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003842:	2200      	movs	r2, #0
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800384a:	f000 f914 	bl	8003a76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800384e:	4a0a      	ldr	r2, [pc, #40]	@ (8003878 <HAL_InitTick+0x70>)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	e007      	b.n	8003866 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
 800385a:	e004      	b.n	8003866 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
 8003860:	e001      	b.n	8003866 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003866:	7bfb      	ldrb	r3, [r7, #15]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	2000008c 	.word	0x2000008c
 8003874:	20000084 	.word	0x20000084
 8003878:	20000088 	.word	0x20000088

0800387c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003880:	4b05      	ldr	r3, [pc, #20]	@ (8003898 <HAL_IncTick+0x1c>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4b05      	ldr	r3, [pc, #20]	@ (800389c <HAL_IncTick+0x20>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4413      	add	r3, r2
 800388a:	4a03      	ldr	r2, [pc, #12]	@ (8003898 <HAL_IncTick+0x1c>)
 800388c:	6013      	str	r3, [r2, #0]
}
 800388e:	bf00      	nop
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	20000418 	.word	0x20000418
 800389c:	2000008c 	.word	0x2000008c

080038a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return uwTick;
 80038a4:	4b03      	ldr	r3, [pc, #12]	@ (80038b4 <HAL_GetTick+0x14>)
 80038a6:	681b      	ldr	r3, [r3, #0]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20000418 	.word	0x20000418

080038b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038c0:	f7ff ffee 	bl	80038a0 <HAL_GetTick>
 80038c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038d0:	d004      	beq.n	80038dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80038d2:	4b09      	ldr	r3, [pc, #36]	@ (80038f8 <HAL_Delay+0x40>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4413      	add	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038dc:	bf00      	nop
 80038de:	f7ff ffdf 	bl	80038a0 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d8f7      	bhi.n	80038de <HAL_Delay+0x26>
  {
  }
}
 80038ee:	bf00      	nop
 80038f0:	bf00      	nop
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	2000008c 	.word	0x2000008c

080038fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800390c:	4b0c      	ldr	r3, [pc, #48]	@ (8003940 <__NVIC_SetPriorityGrouping+0x44>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003918:	4013      	ands	r3, r2
 800391a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003924:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800392c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800392e:	4a04      	ldr	r2, [pc, #16]	@ (8003940 <__NVIC_SetPriorityGrouping+0x44>)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	60d3      	str	r3, [r2, #12]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003948:	4b04      	ldr	r3, [pc, #16]	@ (800395c <__NVIC_GetPriorityGrouping+0x18>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	0a1b      	lsrs	r3, r3, #8
 800394e:	f003 0307 	and.w	r3, r3, #7
}
 8003952:	4618      	mov	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	6039      	str	r1, [r7, #0]
 800396a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800396c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003970:	2b00      	cmp	r3, #0
 8003972:	db0a      	blt.n	800398a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	b2da      	uxtb	r2, r3
 8003978:	490c      	ldr	r1, [pc, #48]	@ (80039ac <__NVIC_SetPriority+0x4c>)
 800397a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397e:	0112      	lsls	r2, r2, #4
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	440b      	add	r3, r1
 8003984:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003988:	e00a      	b.n	80039a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	b2da      	uxtb	r2, r3
 800398e:	4908      	ldr	r1, [pc, #32]	@ (80039b0 <__NVIC_SetPriority+0x50>)
 8003990:	79fb      	ldrb	r3, [r7, #7]
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	3b04      	subs	r3, #4
 8003998:	0112      	lsls	r2, r2, #4
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	440b      	add	r3, r1
 800399e:	761a      	strb	r2, [r3, #24]
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	e000e100 	.word	0xe000e100
 80039b0:	e000ed00 	.word	0xe000ed00

080039b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b089      	sub	sp, #36	@ 0x24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f1c3 0307 	rsb	r3, r3, #7
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	bf28      	it	cs
 80039d2:	2304      	movcs	r3, #4
 80039d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3304      	adds	r3, #4
 80039da:	2b06      	cmp	r3, #6
 80039dc:	d902      	bls.n	80039e4 <NVIC_EncodePriority+0x30>
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3b03      	subs	r3, #3
 80039e2:	e000      	b.n	80039e6 <NVIC_EncodePriority+0x32>
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43da      	mvns	r2, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	401a      	ands	r2, r3
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	fa01 f303 	lsl.w	r3, r1, r3
 8003a06:	43d9      	mvns	r1, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a0c:	4313      	orrs	r3, r2
         );
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3724      	adds	r7, #36	@ 0x24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a2c:	d301      	bcc.n	8003a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e00f      	b.n	8003a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a32:	4a0a      	ldr	r2, [pc, #40]	@ (8003a5c <SysTick_Config+0x40>)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a3a:	210f      	movs	r1, #15
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a40:	f7ff ff8e 	bl	8003960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a44:	4b05      	ldr	r3, [pc, #20]	@ (8003a5c <SysTick_Config+0x40>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a4a:	4b04      	ldr	r3, [pc, #16]	@ (8003a5c <SysTick_Config+0x40>)
 8003a4c:	2207      	movs	r2, #7
 8003a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	e000e010 	.word	0xe000e010

08003a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ff47 	bl	80038fc <__NVIC_SetPriorityGrouping>
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b086      	sub	sp, #24
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	607a      	str	r2, [r7, #4]
 8003a82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a84:	f7ff ff5e 	bl	8003944 <__NVIC_GetPriorityGrouping>
 8003a88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	6978      	ldr	r0, [r7, #20]
 8003a90:	f7ff ff90 	bl	80039b4 <NVIC_EncodePriority>
 8003a94:	4602      	mov	r2, r0
 8003a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff ff5f 	bl	8003960 <__NVIC_SetPriority>
}
 8003aa2:	bf00      	nop
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff ffb2 	bl	8003a1c <SysTick_Config>
 8003ab8:	4603      	mov	r3, r0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
	...

08003ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ad2:	e15a      	b.n	8003d8a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	2101      	movs	r1, #1
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 814c 	beq.w	8003d84 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f003 0303 	and.w	r3, r3, #3
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d005      	beq.n	8003b04 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d130      	bne.n	8003b66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	2203      	movs	r2, #3
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	43db      	mvns	r3, r3
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4013      	ands	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	f003 0201 	and.w	r2, r3, #1
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d017      	beq.n	8003ba2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4013      	ands	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d123      	bne.n	8003bf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	08da      	lsrs	r2, r3, #3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3208      	adds	r2, #8
 8003bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	220f      	movs	r2, #15
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	691a      	ldr	r2, [r3, #16]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	08da      	lsrs	r2, r3, #3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3208      	adds	r2, #8
 8003bf0:	6939      	ldr	r1, [r7, #16]
 8003bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	2203      	movs	r2, #3
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43db      	mvns	r3, r3
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f003 0203 	and.w	r2, r3, #3
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 80a6 	beq.w	8003d84 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c38:	4b5b      	ldr	r3, [pc, #364]	@ (8003da8 <HAL_GPIO_Init+0x2e4>)
 8003c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c3c:	4a5a      	ldr	r2, [pc, #360]	@ (8003da8 <HAL_GPIO_Init+0x2e4>)
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c44:	4b58      	ldr	r3, [pc, #352]	@ (8003da8 <HAL_GPIO_Init+0x2e4>)
 8003c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c50:	4a56      	ldr	r2, [pc, #344]	@ (8003dac <HAL_GPIO_Init+0x2e8>)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	089b      	lsrs	r3, r3, #2
 8003c56:	3302      	adds	r3, #2
 8003c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	220f      	movs	r2, #15
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4013      	ands	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003c7a:	d01f      	beq.n	8003cbc <HAL_GPIO_Init+0x1f8>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a4c      	ldr	r2, [pc, #304]	@ (8003db0 <HAL_GPIO_Init+0x2ec>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d019      	beq.n	8003cb8 <HAL_GPIO_Init+0x1f4>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a4b      	ldr	r2, [pc, #300]	@ (8003db4 <HAL_GPIO_Init+0x2f0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d013      	beq.n	8003cb4 <HAL_GPIO_Init+0x1f0>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a4a      	ldr	r2, [pc, #296]	@ (8003db8 <HAL_GPIO_Init+0x2f4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00d      	beq.n	8003cb0 <HAL_GPIO_Init+0x1ec>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a49      	ldr	r2, [pc, #292]	@ (8003dbc <HAL_GPIO_Init+0x2f8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d007      	beq.n	8003cac <HAL_GPIO_Init+0x1e8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a48      	ldr	r2, [pc, #288]	@ (8003dc0 <HAL_GPIO_Init+0x2fc>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d101      	bne.n	8003ca8 <HAL_GPIO_Init+0x1e4>
 8003ca4:	2305      	movs	r3, #5
 8003ca6:	e00a      	b.n	8003cbe <HAL_GPIO_Init+0x1fa>
 8003ca8:	2306      	movs	r3, #6
 8003caa:	e008      	b.n	8003cbe <HAL_GPIO_Init+0x1fa>
 8003cac:	2304      	movs	r3, #4
 8003cae:	e006      	b.n	8003cbe <HAL_GPIO_Init+0x1fa>
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e004      	b.n	8003cbe <HAL_GPIO_Init+0x1fa>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e002      	b.n	8003cbe <HAL_GPIO_Init+0x1fa>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e000      	b.n	8003cbe <HAL_GPIO_Init+0x1fa>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	f002 0203 	and.w	r2, r2, #3
 8003cc4:	0092      	lsls	r2, r2, #2
 8003cc6:	4093      	lsls	r3, r2
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cce:	4937      	ldr	r1, [pc, #220]	@ (8003dac <HAL_GPIO_Init+0x2e8>)
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	089b      	lsrs	r3, r3, #2
 8003cd4:	3302      	adds	r3, #2
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cdc:	4b39      	ldr	r3, [pc, #228]	@ (8003dc4 <HAL_GPIO_Init+0x300>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d00:	4a30      	ldr	r2, [pc, #192]	@ (8003dc4 <HAL_GPIO_Init+0x300>)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d06:	4b2f      	ldr	r3, [pc, #188]	@ (8003dc4 <HAL_GPIO_Init+0x300>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4013      	ands	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d2a:	4a26      	ldr	r2, [pc, #152]	@ (8003dc4 <HAL_GPIO_Init+0x300>)
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003d30:	4b24      	ldr	r3, [pc, #144]	@ (8003dc4 <HAL_GPIO_Init+0x300>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d54:	4a1b      	ldr	r2, [pc, #108]	@ (8003dc4 <HAL_GPIO_Init+0x300>)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc4 <HAL_GPIO_Init+0x300>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	43db      	mvns	r3, r3
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4013      	ands	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d7e:	4a11      	ldr	r2, [pc, #68]	@ (8003dc4 <HAL_GPIO_Init+0x300>)
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	3301      	adds	r3, #1
 8003d88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	fa22 f303 	lsr.w	r3, r2, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f47f ae9d 	bne.w	8003ad4 <HAL_GPIO_Init+0x10>
  }
}
 8003d9a:	bf00      	nop
 8003d9c:	bf00      	nop
 8003d9e:	371c      	adds	r7, #28
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40010000 	.word	0x40010000
 8003db0:	48000400 	.word	0x48000400
 8003db4:	48000800 	.word	0x48000800
 8003db8:	48000c00 	.word	0x48000c00
 8003dbc:	48001000 	.word	0x48001000
 8003dc0:	48001400 	.word	0x48001400
 8003dc4:	40010400 	.word	0x40010400

08003dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	807b      	strh	r3, [r7, #2]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dd8:	787b      	ldrb	r3, [r7, #1]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003dde:	887a      	ldrh	r2, [r7, #2]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003de4:	e002      	b.n	8003dec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003de6:	887a      	ldrh	r2, [r7, #2]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d141      	bne.n	8003e8a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e06:	4b4b      	ldr	r3, [pc, #300]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e12:	d131      	bne.n	8003e78 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e14:	4b47      	ldr	r3, [pc, #284]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e1a:	4a46      	ldr	r2, [pc, #280]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e24:	4b43      	ldr	r3, [pc, #268]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e2c:	4a41      	ldr	r2, [pc, #260]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e34:	4b40      	ldr	r3, [pc, #256]	@ (8003f38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2232      	movs	r2, #50	@ 0x32
 8003e3a:	fb02 f303 	mul.w	r3, r2, r3
 8003e3e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e40:	fba2 2303 	umull	r2, r3, r2, r3
 8003e44:	0c9b      	lsrs	r3, r3, #18
 8003e46:	3301      	adds	r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e4a:	e002      	b.n	8003e52 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e52:	4b38      	ldr	r3, [pc, #224]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e5e:	d102      	bne.n	8003e66 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f2      	bne.n	8003e4c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e66:	4b33      	ldr	r3, [pc, #204]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e72:	d158      	bne.n	8003f26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e057      	b.n	8003f28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e78:	4b2e      	ldr	r3, [pc, #184]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e7e:	4a2d      	ldr	r2, [pc, #180]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e88:	e04d      	b.n	8003f26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e90:	d141      	bne.n	8003f16 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e92:	4b28      	ldr	r3, [pc, #160]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e9e:	d131      	bne.n	8003f04 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ea0:	4b24      	ldr	r3, [pc, #144]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ea6:	4a23      	ldr	r2, [pc, #140]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003eb0:	4b20      	ldr	r3, [pc, #128]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003eb8:	4a1e      	ldr	r2, [pc, #120]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ebe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2232      	movs	r2, #50	@ 0x32
 8003ec6:	fb02 f303 	mul.w	r3, r2, r3
 8003eca:	4a1c      	ldr	r2, [pc, #112]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed0:	0c9b      	lsrs	r3, r3, #18
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ed6:	e002      	b.n	8003ede <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ede:	4b15      	ldr	r3, [pc, #84]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eea:	d102      	bne.n	8003ef2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f2      	bne.n	8003ed8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ef2:	4b10      	ldr	r3, [pc, #64]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003efe:	d112      	bne.n	8003f26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e011      	b.n	8003f28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f04:	4b0b      	ldr	r3, [pc, #44]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003f14:	e007      	b.n	8003f26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f16:	4b07      	ldr	r3, [pc, #28]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f1e:	4a05      	ldr	r2, [pc, #20]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f24:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	40007000 	.word	0x40007000
 8003f38:	20000084 	.word	0x20000084
 8003f3c:	431bde83 	.word	0x431bde83

08003f40 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003f44:	4b05      	ldr	r3, [pc, #20]	@ (8003f5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4a04      	ldr	r2, [pc, #16]	@ (8003f5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f4e:	6093      	str	r3, [r2, #8]
}
 8003f50:	bf00      	nop
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40007000 	.word	0x40007000

08003f60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e2fe      	b.n	8004570 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d075      	beq.n	800406a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f7e:	4b97      	ldr	r3, [pc, #604]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
 8003f86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f88:	4b94      	ldr	r3, [pc, #592]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f003 0303 	and.w	r3, r3, #3
 8003f90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b0c      	cmp	r3, #12
 8003f96:	d102      	bne.n	8003f9e <HAL_RCC_OscConfig+0x3e>
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d002      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x44>
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d10b      	bne.n	8003fbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa4:	4b8d      	ldr	r3, [pc, #564]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d05b      	beq.n	8004068 <HAL_RCC_OscConfig+0x108>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d157      	bne.n	8004068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e2d9      	b.n	8004570 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fc4:	d106      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x74>
 8003fc6:	4b85      	ldr	r3, [pc, #532]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a84      	ldr	r2, [pc, #528]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8003fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	e01d      	b.n	8004010 <HAL_RCC_OscConfig+0xb0>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x98>
 8003fde:	4b7f      	ldr	r3, [pc, #508]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a7e      	ldr	r2, [pc, #504]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8003fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	4b7c      	ldr	r3, [pc, #496]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a7b      	ldr	r2, [pc, #492]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8003ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e00b      	b.n	8004010 <HAL_RCC_OscConfig+0xb0>
 8003ff8:	4b78      	ldr	r3, [pc, #480]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a77      	ldr	r2, [pc, #476]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8003ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	4b75      	ldr	r3, [pc, #468]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a74      	ldr	r2, [pc, #464]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 800400a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800400e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d013      	beq.n	8004040 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7ff fc42 	bl	80038a0 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004020:	f7ff fc3e 	bl	80038a0 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b64      	cmp	r3, #100	@ 0x64
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e29e      	b.n	8004570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004032:	4b6a      	ldr	r3, [pc, #424]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0xc0>
 800403e:	e014      	b.n	800406a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7ff fc2e 	bl	80038a0 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004048:	f7ff fc2a 	bl	80038a0 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b64      	cmp	r3, #100	@ 0x64
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e28a      	b.n	8004570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800405a:	4b60      	ldr	r3, [pc, #384]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0xe8>
 8004066:	e000      	b.n	800406a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d075      	beq.n	8004162 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004076:	4b59      	ldr	r3, [pc, #356]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
 800407e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004080:	4b56      	ldr	r3, [pc, #344]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b0c      	cmp	r3, #12
 800408e:	d102      	bne.n	8004096 <HAL_RCC_OscConfig+0x136>
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d002      	beq.n	800409c <HAL_RCC_OscConfig+0x13c>
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2b04      	cmp	r3, #4
 800409a:	d11f      	bne.n	80040dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800409c:	4b4f      	ldr	r3, [pc, #316]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_RCC_OscConfig+0x154>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e25d      	b.n	8004570 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b4:	4b49      	ldr	r3, [pc, #292]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	061b      	lsls	r3, r3, #24
 80040c2:	4946      	ldr	r1, [pc, #280]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040c8:	4b45      	ldr	r3, [pc, #276]	@ (80041e0 <HAL_RCC_OscConfig+0x280>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff fb9b 	bl	8003808 <HAL_InitTick>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d043      	beq.n	8004160 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e249      	b.n	8004570 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d023      	beq.n	800412c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e4:	4b3d      	ldr	r3, [pc, #244]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a3c      	ldr	r2, [pc, #240]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 80040ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7ff fbd6 	bl	80038a0 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f8:	f7ff fbd2 	bl	80038a0 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e232      	b.n	8004570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800410a:	4b34      	ldr	r3, [pc, #208]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004116:	4b31      	ldr	r3, [pc, #196]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	061b      	lsls	r3, r3, #24
 8004124:	492d      	ldr	r1, [pc, #180]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8004126:	4313      	orrs	r3, r2
 8004128:	604b      	str	r3, [r1, #4]
 800412a:	e01a      	b.n	8004162 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800412c:	4b2b      	ldr	r3, [pc, #172]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a2a      	ldr	r2, [pc, #168]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8004132:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7ff fbb2 	bl	80038a0 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004140:	f7ff fbae 	bl	80038a0 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e20e      	b.n	8004570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004152:	4b22      	ldr	r3, [pc, #136]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x1e0>
 800415e:	e000      	b.n	8004162 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004160:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d041      	beq.n	80041f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01c      	beq.n	80041b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004176:	4b19      	ldr	r3, [pc, #100]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8004178:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800417c:	4a17      	ldr	r2, [pc, #92]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004186:	f7ff fb8b 	bl	80038a0 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800418e:	f7ff fb87 	bl	80038a0 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e1e7      	b.n	8004570 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041a0:	4b0e      	ldr	r3, [pc, #56]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 80041a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0ef      	beq.n	800418e <HAL_RCC_OscConfig+0x22e>
 80041ae:	e020      	b.n	80041f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b0:	4b0a      	ldr	r3, [pc, #40]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 80041b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041b6:	4a09      	ldr	r2, [pc, #36]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c0:	f7ff fb6e 	bl	80038a0 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041c6:	e00d      	b.n	80041e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c8:	f7ff fb6a 	bl	80038a0 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d906      	bls.n	80041e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e1ca      	b.n	8004570 <HAL_RCC_OscConfig+0x610>
 80041da:	bf00      	nop
 80041dc:	40021000 	.word	0x40021000
 80041e0:	20000088 	.word	0x20000088
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041e4:	4b8c      	ldr	r3, [pc, #560]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 80041e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1ea      	bne.n	80041c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 80a6 	beq.w	800434c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004200:	2300      	movs	r3, #0
 8004202:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004204:	4b84      	ldr	r3, [pc, #528]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 8004206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_RCC_OscConfig+0x2b4>
 8004210:	2301      	movs	r3, #1
 8004212:	e000      	b.n	8004216 <HAL_RCC_OscConfig+0x2b6>
 8004214:	2300      	movs	r3, #0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00d      	beq.n	8004236 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800421a:	4b7f      	ldr	r3, [pc, #508]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 800421c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421e:	4a7e      	ldr	r2, [pc, #504]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 8004220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004224:	6593      	str	r3, [r2, #88]	@ 0x58
 8004226:	4b7c      	ldr	r3, [pc, #496]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 8004228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800422a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004232:	2301      	movs	r3, #1
 8004234:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004236:	4b79      	ldr	r3, [pc, #484]	@ (800441c <HAL_RCC_OscConfig+0x4bc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d118      	bne.n	8004274 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004242:	4b76      	ldr	r3, [pc, #472]	@ (800441c <HAL_RCC_OscConfig+0x4bc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a75      	ldr	r2, [pc, #468]	@ (800441c <HAL_RCC_OscConfig+0x4bc>)
 8004248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800424c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800424e:	f7ff fb27 	bl	80038a0 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004256:	f7ff fb23 	bl	80038a0 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e183      	b.n	8004570 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004268:	4b6c      	ldr	r3, [pc, #432]	@ (800441c <HAL_RCC_OscConfig+0x4bc>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0f0      	beq.n	8004256 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d108      	bne.n	800428e <HAL_RCC_OscConfig+0x32e>
 800427c:	4b66      	ldr	r3, [pc, #408]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004282:	4a65      	ldr	r2, [pc, #404]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800428c:	e024      	b.n	80042d8 <HAL_RCC_OscConfig+0x378>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2b05      	cmp	r3, #5
 8004294:	d110      	bne.n	80042b8 <HAL_RCC_OscConfig+0x358>
 8004296:	4b60      	ldr	r3, [pc, #384]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 8004298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800429c:	4a5e      	ldr	r2, [pc, #376]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 800429e:	f043 0304 	orr.w	r3, r3, #4
 80042a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042a6:	4b5c      	ldr	r3, [pc, #368]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ac:	4a5a      	ldr	r2, [pc, #360]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042b6:	e00f      	b.n	80042d8 <HAL_RCC_OscConfig+0x378>
 80042b8:	4b57      	ldr	r3, [pc, #348]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042be:	4a56      	ldr	r2, [pc, #344]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 80042c0:	f023 0301 	bic.w	r3, r3, #1
 80042c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042c8:	4b53      	ldr	r3, [pc, #332]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ce:	4a52      	ldr	r2, [pc, #328]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 80042d0:	f023 0304 	bic.w	r3, r3, #4
 80042d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d016      	beq.n	800430e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e0:	f7ff fade 	bl	80038a0 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e6:	e00a      	b.n	80042fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e8:	f7ff fada 	bl	80038a0 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e138      	b.n	8004570 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042fe:	4b46      	ldr	r3, [pc, #280]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 8004300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0ed      	beq.n	80042e8 <HAL_RCC_OscConfig+0x388>
 800430c:	e015      	b.n	800433a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430e:	f7ff fac7 	bl	80038a0 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004314:	e00a      	b.n	800432c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004316:	f7ff fac3 	bl	80038a0 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004324:	4293      	cmp	r3, r2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e121      	b.n	8004570 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800432c:	4b3a      	ldr	r3, [pc, #232]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1ed      	bne.n	8004316 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800433a:	7ffb      	ldrb	r3, [r7, #31]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d105      	bne.n	800434c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004340:	4b35      	ldr	r3, [pc, #212]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 8004342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004344:	4a34      	ldr	r2, [pc, #208]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 8004346:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800434a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b00      	cmp	r3, #0
 8004356:	d03c      	beq.n	80043d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d01c      	beq.n	800439a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004360:	4b2d      	ldr	r3, [pc, #180]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 8004362:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004366:	4a2c      	ldr	r2, [pc, #176]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004370:	f7ff fa96 	bl	80038a0 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004378:	f7ff fa92 	bl	80038a0 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e0f2      	b.n	8004570 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800438a:	4b23      	ldr	r3, [pc, #140]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 800438c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0ef      	beq.n	8004378 <HAL_RCC_OscConfig+0x418>
 8004398:	e01b      	b.n	80043d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800439a:	4b1f      	ldr	r3, [pc, #124]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 800439c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 80043a2:	f023 0301 	bic.w	r3, r3, #1
 80043a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043aa:	f7ff fa79 	bl	80038a0 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043b2:	f7ff fa75 	bl	80038a0 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e0d5      	b.n	8004570 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043c4:	4b14      	ldr	r3, [pc, #80]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 80043c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1ef      	bne.n	80043b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 80c9 	beq.w	800456e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 030c 	and.w	r3, r3, #12
 80043e4:	2b0c      	cmp	r3, #12
 80043e6:	f000 8083 	beq.w	80044f0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d15e      	bne.n	80044b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f2:	4b09      	ldr	r3, [pc, #36]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a08      	ldr	r2, [pc, #32]	@ (8004418 <HAL_RCC_OscConfig+0x4b8>)
 80043f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fe:	f7ff fa4f 	bl	80038a0 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004404:	e00c      	b.n	8004420 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004406:	f7ff fa4b 	bl	80038a0 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d905      	bls.n	8004420 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e0ab      	b.n	8004570 <HAL_RCC_OscConfig+0x610>
 8004418:	40021000 	.word	0x40021000
 800441c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004420:	4b55      	ldr	r3, [pc, #340]	@ (8004578 <HAL_RCC_OscConfig+0x618>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1ec      	bne.n	8004406 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800442c:	4b52      	ldr	r3, [pc, #328]	@ (8004578 <HAL_RCC_OscConfig+0x618>)
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	4b52      	ldr	r3, [pc, #328]	@ (800457c <HAL_RCC_OscConfig+0x61c>)
 8004432:	4013      	ands	r3, r2
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6a11      	ldr	r1, [r2, #32]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800443c:	3a01      	subs	r2, #1
 800443e:	0112      	lsls	r2, r2, #4
 8004440:	4311      	orrs	r1, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004446:	0212      	lsls	r2, r2, #8
 8004448:	4311      	orrs	r1, r2
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800444e:	0852      	lsrs	r2, r2, #1
 8004450:	3a01      	subs	r2, #1
 8004452:	0552      	lsls	r2, r2, #21
 8004454:	4311      	orrs	r1, r2
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800445a:	0852      	lsrs	r2, r2, #1
 800445c:	3a01      	subs	r2, #1
 800445e:	0652      	lsls	r2, r2, #25
 8004460:	4311      	orrs	r1, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004466:	06d2      	lsls	r2, r2, #27
 8004468:	430a      	orrs	r2, r1
 800446a:	4943      	ldr	r1, [pc, #268]	@ (8004578 <HAL_RCC_OscConfig+0x618>)
 800446c:	4313      	orrs	r3, r2
 800446e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004470:	4b41      	ldr	r3, [pc, #260]	@ (8004578 <HAL_RCC_OscConfig+0x618>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a40      	ldr	r2, [pc, #256]	@ (8004578 <HAL_RCC_OscConfig+0x618>)
 8004476:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800447a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800447c:	4b3e      	ldr	r3, [pc, #248]	@ (8004578 <HAL_RCC_OscConfig+0x618>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4a3d      	ldr	r2, [pc, #244]	@ (8004578 <HAL_RCC_OscConfig+0x618>)
 8004482:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004486:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004488:	f7ff fa0a 	bl	80038a0 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004490:	f7ff fa06 	bl	80038a0 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e066      	b.n	8004570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a2:	4b35      	ldr	r3, [pc, #212]	@ (8004578 <HAL_RCC_OscConfig+0x618>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0f0      	beq.n	8004490 <HAL_RCC_OscConfig+0x530>
 80044ae:	e05e      	b.n	800456e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b0:	4b31      	ldr	r3, [pc, #196]	@ (8004578 <HAL_RCC_OscConfig+0x618>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a30      	ldr	r2, [pc, #192]	@ (8004578 <HAL_RCC_OscConfig+0x618>)
 80044b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044bc:	f7ff f9f0 	bl	80038a0 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c4:	f7ff f9ec 	bl	80038a0 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e04c      	b.n	8004570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044d6:	4b28      	ldr	r3, [pc, #160]	@ (8004578 <HAL_RCC_OscConfig+0x618>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f0      	bne.n	80044c4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80044e2:	4b25      	ldr	r3, [pc, #148]	@ (8004578 <HAL_RCC_OscConfig+0x618>)
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	4924      	ldr	r1, [pc, #144]	@ (8004578 <HAL_RCC_OscConfig+0x618>)
 80044e8:	4b25      	ldr	r3, [pc, #148]	@ (8004580 <HAL_RCC_OscConfig+0x620>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	60cb      	str	r3, [r1, #12]
 80044ee:	e03e      	b.n	800456e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e039      	b.n	8004570 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80044fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004578 <HAL_RCC_OscConfig+0x618>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f003 0203 	and.w	r2, r3, #3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	429a      	cmp	r2, r3
 800450e:	d12c      	bne.n	800456a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	3b01      	subs	r3, #1
 800451c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451e:	429a      	cmp	r2, r3
 8004520:	d123      	bne.n	800456a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800452e:	429a      	cmp	r2, r3
 8004530:	d11b      	bne.n	800456a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800453e:	429a      	cmp	r2, r3
 8004540:	d113      	bne.n	800456a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454c:	085b      	lsrs	r3, r3, #1
 800454e:	3b01      	subs	r3, #1
 8004550:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004552:	429a      	cmp	r2, r3
 8004554:	d109      	bne.n	800456a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004560:	085b      	lsrs	r3, r3, #1
 8004562:	3b01      	subs	r3, #1
 8004564:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004566:	429a      	cmp	r2, r3
 8004568:	d001      	beq.n	800456e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40021000 	.word	0x40021000
 800457c:	019f800c 	.word	0x019f800c
 8004580:	feeefffc 	.word	0xfeeefffc

08004584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e11e      	b.n	80047da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800459c:	4b91      	ldr	r3, [pc, #580]	@ (80047e4 <HAL_RCC_ClockConfig+0x260>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d910      	bls.n	80045cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045aa:	4b8e      	ldr	r3, [pc, #568]	@ (80047e4 <HAL_RCC_ClockConfig+0x260>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f023 020f 	bic.w	r2, r3, #15
 80045b2:	498c      	ldr	r1, [pc, #560]	@ (80047e4 <HAL_RCC_ClockConfig+0x260>)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ba:	4b8a      	ldr	r3, [pc, #552]	@ (80047e4 <HAL_RCC_ClockConfig+0x260>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e106      	b.n	80047da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d073      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d129      	bne.n	8004634 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e0:	4b81      	ldr	r3, [pc, #516]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0f4      	b.n	80047da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80045f0:	f000 f99e 	bl	8004930 <RCC_GetSysClockFreqFromPLLSource>
 80045f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4a7c      	ldr	r2, [pc, #496]	@ (80047ec <HAL_RCC_ClockConfig+0x268>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d93f      	bls.n	800467e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045fe:	4b7a      	ldr	r3, [pc, #488]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004612:	2b00      	cmp	r3, #0
 8004614:	d033      	beq.n	800467e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800461a:	2b00      	cmp	r3, #0
 800461c:	d12f      	bne.n	800467e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800461e:	4b72      	ldr	r3, [pc, #456]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004626:	4a70      	ldr	r2, [pc, #448]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 8004628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800462c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800462e:	2380      	movs	r3, #128	@ 0x80
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	e024      	b.n	800467e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b02      	cmp	r3, #2
 800463a:	d107      	bne.n	800464c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800463c:	4b6a      	ldr	r3, [pc, #424]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d109      	bne.n	800465c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0c6      	b.n	80047da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800464c:	4b66      	ldr	r3, [pc, #408]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0be      	b.n	80047da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800465c:	f000 f8ce 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 8004660:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	4a61      	ldr	r2, [pc, #388]	@ (80047ec <HAL_RCC_ClockConfig+0x268>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d909      	bls.n	800467e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800466a:	4b5f      	ldr	r3, [pc, #380]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004672:	4a5d      	ldr	r2, [pc, #372]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 8004674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004678:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800467a:	2380      	movs	r3, #128	@ 0x80
 800467c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800467e:	4b5a      	ldr	r3, [pc, #360]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f023 0203 	bic.w	r2, r3, #3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	4957      	ldr	r1, [pc, #348]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 800468c:	4313      	orrs	r3, r2
 800468e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004690:	f7ff f906 	bl	80038a0 <HAL_GetTick>
 8004694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004696:	e00a      	b.n	80046ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004698:	f7ff f902 	bl	80038a0 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e095      	b.n	80047da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ae:	4b4e      	ldr	r3, [pc, #312]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 020c 	and.w	r2, r3, #12
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	429a      	cmp	r2, r3
 80046be:	d1eb      	bne.n	8004698 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d023      	beq.n	8004714 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046d8:	4b43      	ldr	r3, [pc, #268]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	4a42      	ldr	r2, [pc, #264]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 80046de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d007      	beq.n	8004700 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80046f0:	4b3d      	ldr	r3, [pc, #244]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80046f8:	4a3b      	ldr	r2, [pc, #236]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 80046fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004700:	4b39      	ldr	r3, [pc, #228]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	4936      	ldr	r1, [pc, #216]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
 8004712:	e008      	b.n	8004726 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2b80      	cmp	r3, #128	@ 0x80
 8004718:	d105      	bne.n	8004726 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800471a:	4b33      	ldr	r3, [pc, #204]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	4a32      	ldr	r2, [pc, #200]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 8004720:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004724:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004726:	4b2f      	ldr	r3, [pc, #188]	@ (80047e4 <HAL_RCC_ClockConfig+0x260>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d21d      	bcs.n	8004770 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004734:	4b2b      	ldr	r3, [pc, #172]	@ (80047e4 <HAL_RCC_ClockConfig+0x260>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f023 020f 	bic.w	r2, r3, #15
 800473c:	4929      	ldr	r1, [pc, #164]	@ (80047e4 <HAL_RCC_ClockConfig+0x260>)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	4313      	orrs	r3, r2
 8004742:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004744:	f7ff f8ac 	bl	80038a0 <HAL_GetTick>
 8004748:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800474a:	e00a      	b.n	8004762 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800474c:	f7ff f8a8 	bl	80038a0 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e03b      	b.n	80047da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004762:	4b20      	ldr	r3, [pc, #128]	@ (80047e4 <HAL_RCC_ClockConfig+0x260>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d1ed      	bne.n	800474c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800477c:	4b1a      	ldr	r3, [pc, #104]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	4917      	ldr	r1, [pc, #92]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 800478a:	4313      	orrs	r3, r2
 800478c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800479a:	4b13      	ldr	r3, [pc, #76]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	490f      	ldr	r1, [pc, #60]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047ae:	f000 f825 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 80047b2:	4602      	mov	r2, r0
 80047b4:	4b0c      	ldr	r3, [pc, #48]	@ (80047e8 <HAL_RCC_ClockConfig+0x264>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	091b      	lsrs	r3, r3, #4
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	490c      	ldr	r1, [pc, #48]	@ (80047f0 <HAL_RCC_ClockConfig+0x26c>)
 80047c0:	5ccb      	ldrb	r3, [r1, r3]
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ca:	4a0a      	ldr	r2, [pc, #40]	@ (80047f4 <HAL_RCC_ClockConfig+0x270>)
 80047cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80047ce:	4b0a      	ldr	r3, [pc, #40]	@ (80047f8 <HAL_RCC_ClockConfig+0x274>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff f818 	bl	8003808 <HAL_InitTick>
 80047d8:	4603      	mov	r3, r0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40022000 	.word	0x40022000
 80047e8:	40021000 	.word	0x40021000
 80047ec:	04c4b400 	.word	0x04c4b400
 80047f0:	08007990 	.word	0x08007990
 80047f4:	20000084 	.word	0x20000084
 80047f8:	20000088 	.word	0x20000088

080047fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004802:	4b2c      	ldr	r3, [pc, #176]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 030c 	and.w	r3, r3, #12
 800480a:	2b04      	cmp	r3, #4
 800480c:	d102      	bne.n	8004814 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800480e:	4b2a      	ldr	r3, [pc, #168]	@ (80048b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	e047      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004814:	4b27      	ldr	r3, [pc, #156]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 030c 	and.w	r3, r3, #12
 800481c:	2b08      	cmp	r3, #8
 800481e:	d102      	bne.n	8004826 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004820:	4b26      	ldr	r3, [pc, #152]	@ (80048bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004822:	613b      	str	r3, [r7, #16]
 8004824:	e03e      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004826:	4b23      	ldr	r3, [pc, #140]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 030c 	and.w	r3, r3, #12
 800482e:	2b0c      	cmp	r3, #12
 8004830:	d136      	bne.n	80048a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004832:	4b20      	ldr	r3, [pc, #128]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800483c:	4b1d      	ldr	r3, [pc, #116]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	091b      	lsrs	r3, r3, #4
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	3301      	adds	r3, #1
 8004848:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b03      	cmp	r3, #3
 800484e:	d10c      	bne.n	800486a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004850:	4a1a      	ldr	r2, [pc, #104]	@ (80048bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	fbb2 f3f3 	udiv	r3, r2, r3
 8004858:	4a16      	ldr	r2, [pc, #88]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800485a:	68d2      	ldr	r2, [r2, #12]
 800485c:	0a12      	lsrs	r2, r2, #8
 800485e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004862:	fb02 f303 	mul.w	r3, r2, r3
 8004866:	617b      	str	r3, [r7, #20]
      break;
 8004868:	e00c      	b.n	8004884 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800486a:	4a13      	ldr	r2, [pc, #76]	@ (80048b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004872:	4a10      	ldr	r2, [pc, #64]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004874:	68d2      	ldr	r2, [r2, #12]
 8004876:	0a12      	lsrs	r2, r2, #8
 8004878:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800487c:	fb02 f303 	mul.w	r3, r2, r3
 8004880:	617b      	str	r3, [r7, #20]
      break;
 8004882:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004884:	4b0b      	ldr	r3, [pc, #44]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	0e5b      	lsrs	r3, r3, #25
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	3301      	adds	r3, #1
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	e001      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80048a4:	693b      	ldr	r3, [r7, #16]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40021000 	.word	0x40021000
 80048b8:	00f42400 	.word	0x00f42400
 80048bc:	007a1200 	.word	0x007a1200

080048c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048c4:	4b03      	ldr	r3, [pc, #12]	@ (80048d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048c6:	681b      	ldr	r3, [r3, #0]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000084 	.word	0x20000084

080048d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048dc:	f7ff fff0 	bl	80048c0 <HAL_RCC_GetHCLKFreq>
 80048e0:	4602      	mov	r2, r0
 80048e2:	4b06      	ldr	r3, [pc, #24]	@ (80048fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	0a1b      	lsrs	r3, r3, #8
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	4904      	ldr	r1, [pc, #16]	@ (8004900 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048ee:	5ccb      	ldrb	r3, [r1, r3]
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40021000 	.word	0x40021000
 8004900:	080079a0 	.word	0x080079a0

08004904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004908:	f7ff ffda 	bl	80048c0 <HAL_RCC_GetHCLKFreq>
 800490c:	4602      	mov	r2, r0
 800490e:	4b06      	ldr	r3, [pc, #24]	@ (8004928 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	0adb      	lsrs	r3, r3, #11
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	4904      	ldr	r1, [pc, #16]	@ (800492c <HAL_RCC_GetPCLK2Freq+0x28>)
 800491a:	5ccb      	ldrb	r3, [r1, r3]
 800491c:	f003 031f 	and.w	r3, r3, #31
 8004920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004924:	4618      	mov	r0, r3
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40021000 	.word	0x40021000
 800492c:	080079a0 	.word	0x080079a0

08004930 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004936:	4b1e      	ldr	r3, [pc, #120]	@ (80049b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004940:	4b1b      	ldr	r3, [pc, #108]	@ (80049b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	091b      	lsrs	r3, r3, #4
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	3301      	adds	r3, #1
 800494c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	2b03      	cmp	r3, #3
 8004952:	d10c      	bne.n	800496e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004954:	4a17      	ldr	r2, [pc, #92]	@ (80049b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	fbb2 f3f3 	udiv	r3, r2, r3
 800495c:	4a14      	ldr	r2, [pc, #80]	@ (80049b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800495e:	68d2      	ldr	r2, [r2, #12]
 8004960:	0a12      	lsrs	r2, r2, #8
 8004962:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004966:	fb02 f303 	mul.w	r3, r2, r3
 800496a:	617b      	str	r3, [r7, #20]
    break;
 800496c:	e00c      	b.n	8004988 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800496e:	4a12      	ldr	r2, [pc, #72]	@ (80049b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	fbb2 f3f3 	udiv	r3, r2, r3
 8004976:	4a0e      	ldr	r2, [pc, #56]	@ (80049b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004978:	68d2      	ldr	r2, [r2, #12]
 800497a:	0a12      	lsrs	r2, r2, #8
 800497c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004980:	fb02 f303 	mul.w	r3, r2, r3
 8004984:	617b      	str	r3, [r7, #20]
    break;
 8004986:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004988:	4b09      	ldr	r3, [pc, #36]	@ (80049b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	0e5b      	lsrs	r3, r3, #25
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	3301      	adds	r3, #1
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80049a2:	687b      	ldr	r3, [r7, #4]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	371c      	adds	r7, #28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	40021000 	.word	0x40021000
 80049b4:	007a1200 	.word	0x007a1200
 80049b8:	00f42400 	.word	0x00f42400

080049bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049c4:	2300      	movs	r3, #0
 80049c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049c8:	2300      	movs	r3, #0
 80049ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 8098 	beq.w	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049da:	2300      	movs	r3, #0
 80049dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049de:	4b43      	ldr	r3, [pc, #268]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10d      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ea:	4b40      	ldr	r3, [pc, #256]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ee:	4a3f      	ldr	r2, [pc, #252]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80049f6:	4b3d      	ldr	r3, [pc, #244]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049fe:	60bb      	str	r3, [r7, #8]
 8004a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a02:	2301      	movs	r3, #1
 8004a04:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a06:	4b3a      	ldr	r3, [pc, #232]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a39      	ldr	r2, [pc, #228]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a12:	f7fe ff45 	bl	80038a0 <HAL_GetTick>
 8004a16:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a18:	e009      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a1a:	f7fe ff41 	bl	80038a0 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d902      	bls.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	74fb      	strb	r3, [r7, #19]
        break;
 8004a2c:	e005      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a2e:	4b30      	ldr	r3, [pc, #192]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0ef      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a3a:	7cfb      	ldrb	r3, [r7, #19]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d159      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a40:	4b2a      	ldr	r3, [pc, #168]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a4a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d01e      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d019      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a5c:	4b23      	ldr	r3, [pc, #140]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a68:	4b20      	ldr	r3, [pc, #128]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a78:	4b1c      	ldr	r3, [pc, #112]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a88:	4a18      	ldr	r2, [pc, #96]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d016      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9a:	f7fe ff01 	bl	80038a0 <HAL_GetTick>
 8004a9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aa0:	e00b      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa2:	f7fe fefd 	bl	80038a0 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d902      	bls.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	74fb      	strb	r3, [r7, #19]
            break;
 8004ab8:	e006      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aba:	4b0c      	ldr	r3, [pc, #48]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0ec      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ac8:	7cfb      	ldrb	r3, [r7, #19]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10b      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ace:	4b07      	ldr	r3, [pc, #28]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004adc:	4903      	ldr	r1, [pc, #12]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ae4:	e008      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ae6:	7cfb      	ldrb	r3, [r7, #19]
 8004ae8:	74bb      	strb	r3, [r7, #18]
 8004aea:	e005      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004aec:	40021000 	.word	0x40021000
 8004af0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af4:	7cfb      	ldrb	r3, [r7, #19]
 8004af6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004af8:	7c7b      	ldrb	r3, [r7, #17]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d105      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afe:	4ba7      	ldr	r3, [pc, #668]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b02:	4aa6      	ldr	r2, [pc, #664]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b08:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b16:	4ba1      	ldr	r3, [pc, #644]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1c:	f023 0203 	bic.w	r2, r3, #3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	499d      	ldr	r1, [pc, #628]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b38:	4b98      	ldr	r3, [pc, #608]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3e:	f023 020c 	bic.w	r2, r3, #12
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	4995      	ldr	r1, [pc, #596]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0304 	and.w	r3, r3, #4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b5a:	4b90      	ldr	r3, [pc, #576]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b60:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	498c      	ldr	r1, [pc, #560]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b7c:	4b87      	ldr	r3, [pc, #540]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	4984      	ldr	r1, [pc, #528]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b9e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	497b      	ldr	r1, [pc, #492]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bc0:	4b76      	ldr	r3, [pc, #472]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	4973      	ldr	r1, [pc, #460]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004be2:	4b6e      	ldr	r3, [pc, #440]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	496a      	ldr	r1, [pc, #424]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c04:	4b65      	ldr	r3, [pc, #404]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c0a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	4962      	ldr	r1, [pc, #392]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c26:	4b5d      	ldr	r3, [pc, #372]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c34:	4959      	ldr	r1, [pc, #356]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c48:	4b54      	ldr	r3, [pc, #336]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c4e:	f023 0203 	bic.w	r2, r3, #3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c56:	4951      	ldr	r1, [pc, #324]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c6a:	4b4c      	ldr	r3, [pc, #304]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c78:	4948      	ldr	r1, [pc, #288]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d015      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c8c:	4b43      	ldr	r3, [pc, #268]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9a:	4940      	ldr	r1, [pc, #256]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004caa:	d105      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cac:	4b3b      	ldr	r3, [pc, #236]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	4a3a      	ldr	r2, [pc, #232]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cb6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d015      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004cc4:	4b35      	ldr	r3, [pc, #212]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cd2:	4932      	ldr	r1, [pc, #200]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ce2:	d105      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	4a2c      	ldr	r2, [pc, #176]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cee:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d015      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004cfc:	4b27      	ldr	r3, [pc, #156]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d02:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0a:	4924      	ldr	r1, [pc, #144]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d1a:	d105      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	4a1e      	ldr	r2, [pc, #120]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d26:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d015      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d34:	4b19      	ldr	r3, [pc, #100]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d42:	4916      	ldr	r1, [pc, #88]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d52:	d105      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d54:	4b11      	ldr	r3, [pc, #68]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	4a10      	ldr	r2, [pc, #64]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d019      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7a:	4908      	ldr	r1, [pc, #32]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d8a:	d109      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d8c:	4b03      	ldr	r3, [pc, #12]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	4a02      	ldr	r2, [pc, #8]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d96:	60d3      	str	r3, [r2, #12]
 8004d98:	e002      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004d9a:	bf00      	nop
 8004d9c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d015      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004dac:	4b29      	ldr	r3, [pc, #164]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dba:	4926      	ldr	r1, [pc, #152]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dca:	d105      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004dcc:	4b21      	ldr	r3, [pc, #132]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	4a20      	ldr	r2, [pc, #128]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dd6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d015      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004de4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dea:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004df2:	4918      	ldr	r1, [pc, #96]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e02:	d105      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e04:	4b13      	ldr	r3, [pc, #76]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	4a12      	ldr	r2, [pc, #72]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e0e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d015      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e2a:	490a      	ldr	r1, [pc, #40]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e3a:	d105      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e3c:	4b05      	ldr	r3, [pc, #20]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	4a04      	ldr	r2, [pc, #16]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004e48:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	40021000 	.word	0x40021000

08004e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e049      	b.n	8004efe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d106      	bne.n	8004e84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fe fac2 	bl	8003408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3304      	adds	r3, #4
 8004e94:	4619      	mov	r1, r3
 8004e96:	4610      	mov	r0, r2
 8004e98:	f000 fd96 	bl	80059c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d001      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e054      	b.n	8004fca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a26      	ldr	r2, [pc, #152]	@ (8004fd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d022      	beq.n	8004f88 <HAL_TIM_Base_Start_IT+0x80>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f4a:	d01d      	beq.n	8004f88 <HAL_TIM_Base_Start_IT+0x80>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a22      	ldr	r2, [pc, #136]	@ (8004fdc <HAL_TIM_Base_Start_IT+0xd4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d018      	beq.n	8004f88 <HAL_TIM_Base_Start_IT+0x80>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a21      	ldr	r2, [pc, #132]	@ (8004fe0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d013      	beq.n	8004f88 <HAL_TIM_Base_Start_IT+0x80>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1f      	ldr	r2, [pc, #124]	@ (8004fe4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00e      	beq.n	8004f88 <HAL_TIM_Base_Start_IT+0x80>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d009      	beq.n	8004f88 <HAL_TIM_Base_Start_IT+0x80>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1c      	ldr	r2, [pc, #112]	@ (8004fec <HAL_TIM_Base_Start_IT+0xe4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d004      	beq.n	8004f88 <HAL_TIM_Base_Start_IT+0x80>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d115      	bne.n	8004fb4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	4b19      	ldr	r3, [pc, #100]	@ (8004ff4 <HAL_TIM_Base_Start_IT+0xec>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b06      	cmp	r3, #6
 8004f98:	d015      	beq.n	8004fc6 <HAL_TIM_Base_Start_IT+0xbe>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fa0:	d011      	beq.n	8004fc6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f042 0201 	orr.w	r2, r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb2:	e008      	b.n	8004fc6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0201 	orr.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	e000      	b.n	8004fc8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40012c00 	.word	0x40012c00
 8004fdc:	40000400 	.word	0x40000400
 8004fe0:	40000800 	.word	0x40000800
 8004fe4:	40000c00 	.word	0x40000c00
 8004fe8:	40013400 	.word	0x40013400
 8004fec:	40014000 	.word	0x40014000
 8004ff0:	40015000 	.word	0x40015000
 8004ff4:	00010007 	.word	0x00010007

08004ff8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e049      	b.n	800509e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f841 	bl	80050a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3304      	adds	r3, #4
 8005034:	4619      	mov	r1, r3
 8005036:	4610      	mov	r0, r2
 8005038:	f000 fcc6 	bl	80059c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
	...

080050bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d109      	bne.n	80050e0 <HAL_TIM_PWM_Start+0x24>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	bf14      	ite	ne
 80050d8:	2301      	movne	r3, #1
 80050da:	2300      	moveq	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	e03c      	b.n	800515a <HAL_TIM_PWM_Start+0x9e>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d109      	bne.n	80050fa <HAL_TIM_PWM_Start+0x3e>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	bf14      	ite	ne
 80050f2:	2301      	movne	r3, #1
 80050f4:	2300      	moveq	r3, #0
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	e02f      	b.n	800515a <HAL_TIM_PWM_Start+0x9e>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d109      	bne.n	8005114 <HAL_TIM_PWM_Start+0x58>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b01      	cmp	r3, #1
 800510a:	bf14      	ite	ne
 800510c:	2301      	movne	r3, #1
 800510e:	2300      	moveq	r3, #0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	e022      	b.n	800515a <HAL_TIM_PWM_Start+0x9e>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2b0c      	cmp	r3, #12
 8005118:	d109      	bne.n	800512e <HAL_TIM_PWM_Start+0x72>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b01      	cmp	r3, #1
 8005124:	bf14      	ite	ne
 8005126:	2301      	movne	r3, #1
 8005128:	2300      	moveq	r3, #0
 800512a:	b2db      	uxtb	r3, r3
 800512c:	e015      	b.n	800515a <HAL_TIM_PWM_Start+0x9e>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b10      	cmp	r3, #16
 8005132:	d109      	bne.n	8005148 <HAL_TIM_PWM_Start+0x8c>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	bf14      	ite	ne
 8005140:	2301      	movne	r3, #1
 8005142:	2300      	moveq	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	e008      	b.n	800515a <HAL_TIM_PWM_Start+0x9e>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	bf14      	ite	ne
 8005154:	2301      	movne	r3, #1
 8005156:	2300      	moveq	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e0a6      	b.n	80052b0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d104      	bne.n	8005172 <HAL_TIM_PWM_Start+0xb6>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005170:	e023      	b.n	80051ba <HAL_TIM_PWM_Start+0xfe>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b04      	cmp	r3, #4
 8005176:	d104      	bne.n	8005182 <HAL_TIM_PWM_Start+0xc6>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005180:	e01b      	b.n	80051ba <HAL_TIM_PWM_Start+0xfe>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b08      	cmp	r3, #8
 8005186:	d104      	bne.n	8005192 <HAL_TIM_PWM_Start+0xd6>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005190:	e013      	b.n	80051ba <HAL_TIM_PWM_Start+0xfe>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b0c      	cmp	r3, #12
 8005196:	d104      	bne.n	80051a2 <HAL_TIM_PWM_Start+0xe6>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051a0:	e00b      	b.n	80051ba <HAL_TIM_PWM_Start+0xfe>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d104      	bne.n	80051b2 <HAL_TIM_PWM_Start+0xf6>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051b0:	e003      	b.n	80051ba <HAL_TIM_PWM_Start+0xfe>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2202      	movs	r2, #2
 80051b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2201      	movs	r2, #1
 80051c0:	6839      	ldr	r1, [r7, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f001 f87a 	bl	80062bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a3a      	ldr	r2, [pc, #232]	@ (80052b8 <HAL_TIM_PWM_Start+0x1fc>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d018      	beq.n	8005204 <HAL_TIM_PWM_Start+0x148>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a39      	ldr	r2, [pc, #228]	@ (80052bc <HAL_TIM_PWM_Start+0x200>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d013      	beq.n	8005204 <HAL_TIM_PWM_Start+0x148>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a37      	ldr	r2, [pc, #220]	@ (80052c0 <HAL_TIM_PWM_Start+0x204>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00e      	beq.n	8005204 <HAL_TIM_PWM_Start+0x148>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a36      	ldr	r2, [pc, #216]	@ (80052c4 <HAL_TIM_PWM_Start+0x208>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d009      	beq.n	8005204 <HAL_TIM_PWM_Start+0x148>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a34      	ldr	r2, [pc, #208]	@ (80052c8 <HAL_TIM_PWM_Start+0x20c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d004      	beq.n	8005204 <HAL_TIM_PWM_Start+0x148>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a33      	ldr	r2, [pc, #204]	@ (80052cc <HAL_TIM_PWM_Start+0x210>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d101      	bne.n	8005208 <HAL_TIM_PWM_Start+0x14c>
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <HAL_TIM_PWM_Start+0x14e>
 8005208:	2300      	movs	r3, #0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d007      	beq.n	800521e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800521c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a25      	ldr	r2, [pc, #148]	@ (80052b8 <HAL_TIM_PWM_Start+0x1fc>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d022      	beq.n	800526e <HAL_TIM_PWM_Start+0x1b2>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005230:	d01d      	beq.n	800526e <HAL_TIM_PWM_Start+0x1b2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a26      	ldr	r2, [pc, #152]	@ (80052d0 <HAL_TIM_PWM_Start+0x214>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d018      	beq.n	800526e <HAL_TIM_PWM_Start+0x1b2>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a24      	ldr	r2, [pc, #144]	@ (80052d4 <HAL_TIM_PWM_Start+0x218>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <HAL_TIM_PWM_Start+0x1b2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a23      	ldr	r2, [pc, #140]	@ (80052d8 <HAL_TIM_PWM_Start+0x21c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00e      	beq.n	800526e <HAL_TIM_PWM_Start+0x1b2>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a19      	ldr	r2, [pc, #100]	@ (80052bc <HAL_TIM_PWM_Start+0x200>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d009      	beq.n	800526e <HAL_TIM_PWM_Start+0x1b2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a18      	ldr	r2, [pc, #96]	@ (80052c0 <HAL_TIM_PWM_Start+0x204>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d004      	beq.n	800526e <HAL_TIM_PWM_Start+0x1b2>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a18      	ldr	r2, [pc, #96]	@ (80052cc <HAL_TIM_PWM_Start+0x210>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d115      	bne.n	800529a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	4b19      	ldr	r3, [pc, #100]	@ (80052dc <HAL_TIM_PWM_Start+0x220>)
 8005276:	4013      	ands	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b06      	cmp	r3, #6
 800527e:	d015      	beq.n	80052ac <HAL_TIM_PWM_Start+0x1f0>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005286:	d011      	beq.n	80052ac <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0201 	orr.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005298:	e008      	b.n	80052ac <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0201 	orr.w	r2, r2, #1
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	e000      	b.n	80052ae <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	40013400 	.word	0x40013400
 80052c0:	40014000 	.word	0x40014000
 80052c4:	40014400 	.word	0x40014400
 80052c8:	40014800 	.word	0x40014800
 80052cc:	40015000 	.word	0x40015000
 80052d0:	40000400 	.word	0x40000400
 80052d4:	40000800 	.word	0x40000800
 80052d8:	40000c00 	.word	0x40000c00
 80052dc:	00010007 	.word	0x00010007

080052e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e097      	b.n	8005424 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d106      	bne.n	800530e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7fd ffa5 	bl	8003258 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2202      	movs	r2, #2
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005324:	f023 0307 	bic.w	r3, r3, #7
 8005328:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3304      	adds	r3, #4
 8005332:	4619      	mov	r1, r3
 8005334:	4610      	mov	r0, r2
 8005336:	f000 fb47 	bl	80059c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005362:	f023 0303 	bic.w	r3, r3, #3
 8005366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	4313      	orrs	r3, r2
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	4313      	orrs	r3, r2
 8005378:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005380:	f023 030c 	bic.w	r3, r3, #12
 8005384:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800538c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005390:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	4313      	orrs	r3, r2
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	011a      	lsls	r2, r3, #4
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	031b      	lsls	r3, r3, #12
 80053b0:	4313      	orrs	r3, r2
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80053be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80053c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	4313      	orrs	r3, r2
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800543c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005444:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800544c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005454:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d110      	bne.n	800547e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800545c:	7bfb      	ldrb	r3, [r7, #15]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d102      	bne.n	8005468 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005462:	7b7b      	ldrb	r3, [r7, #13]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d001      	beq.n	800546c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e089      	b.n	8005580 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800547c:	e031      	b.n	80054e2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b04      	cmp	r3, #4
 8005482:	d110      	bne.n	80054a6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005484:	7bbb      	ldrb	r3, [r7, #14]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d102      	bne.n	8005490 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800548a:	7b3b      	ldrb	r3, [r7, #12]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d001      	beq.n	8005494 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e075      	b.n	8005580 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054a4:	e01d      	b.n	80054e2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d108      	bne.n	80054be <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054ac:	7bbb      	ldrb	r3, [r7, #14]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d105      	bne.n	80054be <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054b2:	7b7b      	ldrb	r3, [r7, #13]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d102      	bne.n	80054be <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054b8:	7b3b      	ldrb	r3, [r7, #12]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d001      	beq.n	80054c2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e05e      	b.n	8005580 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2202      	movs	r2, #2
 80054c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2202      	movs	r2, #2
 80054ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2202      	movs	r2, #2
 80054d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2202      	movs	r2, #2
 80054de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <HAL_TIM_Encoder_Start_IT+0xc4>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d010      	beq.n	8005510 <HAL_TIM_Encoder_Start_IT+0xe4>
 80054ee:	e01f      	b.n	8005530 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2201      	movs	r2, #1
 80054f6:	2100      	movs	r1, #0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fedf 	bl	80062bc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0202 	orr.w	r2, r2, #2
 800550c:	60da      	str	r2, [r3, #12]
      break;
 800550e:	e02e      	b.n	800556e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2201      	movs	r2, #1
 8005516:	2104      	movs	r1, #4
 8005518:	4618      	mov	r0, r3
 800551a:	f000 fecf 	bl	80062bc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0204 	orr.w	r2, r2, #4
 800552c:	60da      	str	r2, [r3, #12]
      break;
 800552e:	e01e      	b.n	800556e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2201      	movs	r2, #1
 8005536:	2100      	movs	r1, #0
 8005538:	4618      	mov	r0, r3
 800553a:	f000 febf 	bl	80062bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2201      	movs	r2, #1
 8005544:	2104      	movs	r1, #4
 8005546:	4618      	mov	r0, r3
 8005548:	f000 feb8 	bl	80062bc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0202 	orr.w	r2, r2, #2
 800555a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0204 	orr.w	r2, r2, #4
 800556a:	60da      	str	r2, [r3, #12]
      break;
 800556c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f042 0201 	orr.w	r2, r2, #1
 800557c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d101      	bne.n	80055a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055a2:	2302      	movs	r3, #2
 80055a4:	e0ff      	b.n	80057a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b14      	cmp	r3, #20
 80055b2:	f200 80f0 	bhi.w	8005796 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80055b6:	a201      	add	r2, pc, #4	@ (adr r2, 80055bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055bc:	08005611 	.word	0x08005611
 80055c0:	08005797 	.word	0x08005797
 80055c4:	08005797 	.word	0x08005797
 80055c8:	08005797 	.word	0x08005797
 80055cc:	08005651 	.word	0x08005651
 80055d0:	08005797 	.word	0x08005797
 80055d4:	08005797 	.word	0x08005797
 80055d8:	08005797 	.word	0x08005797
 80055dc:	08005693 	.word	0x08005693
 80055e0:	08005797 	.word	0x08005797
 80055e4:	08005797 	.word	0x08005797
 80055e8:	08005797 	.word	0x08005797
 80055ec:	080056d3 	.word	0x080056d3
 80055f0:	08005797 	.word	0x08005797
 80055f4:	08005797 	.word	0x08005797
 80055f8:	08005797 	.word	0x08005797
 80055fc:	08005715 	.word	0x08005715
 8005600:	08005797 	.word	0x08005797
 8005604:	08005797 	.word	0x08005797
 8005608:	08005797 	.word	0x08005797
 800560c:	08005755 	.word	0x08005755
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fa8a 	bl	8005b30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0208 	orr.w	r2, r2, #8
 800562a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699a      	ldr	r2, [r3, #24]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0204 	bic.w	r2, r2, #4
 800563a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6999      	ldr	r1, [r3, #24]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	619a      	str	r2, [r3, #24]
      break;
 800564e:	e0a5      	b.n	800579c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fb04 	bl	8005c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800566a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699a      	ldr	r2, [r3, #24]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800567a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6999      	ldr	r1, [r3, #24]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	021a      	lsls	r2, r3, #8
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	619a      	str	r2, [r3, #24]
      break;
 8005690:	e084      	b.n	800579c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	4618      	mov	r0, r3
 800569a:	f000 fb77 	bl	8005d8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69da      	ldr	r2, [r3, #28]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 0208 	orr.w	r2, r2, #8
 80056ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69da      	ldr	r2, [r3, #28]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0204 	bic.w	r2, r2, #4
 80056bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69d9      	ldr	r1, [r3, #28]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	691a      	ldr	r2, [r3, #16]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	61da      	str	r2, [r3, #28]
      break;
 80056d0:	e064      	b.n	800579c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68b9      	ldr	r1, [r7, #8]
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 fbe9 	bl	8005eb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69da      	ldr	r2, [r3, #28]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69da      	ldr	r2, [r3, #28]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69d9      	ldr	r1, [r3, #28]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	021a      	lsls	r2, r3, #8
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	61da      	str	r2, [r3, #28]
      break;
 8005712:	e043      	b.n	800579c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68b9      	ldr	r1, [r7, #8]
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fc5c 	bl	8005fd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0208 	orr.w	r2, r2, #8
 800572e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0204 	bic.w	r2, r2, #4
 800573e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	691a      	ldr	r2, [r3, #16]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005752:	e023      	b.n	800579c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68b9      	ldr	r1, [r7, #8]
 800575a:	4618      	mov	r0, r3
 800575c:	f000 fca6 	bl	80060ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800576e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800577e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	021a      	lsls	r2, r3, #8
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005794:	e002      	b.n	800579c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	75fb      	strb	r3, [r7, #23]
      break;
 800579a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop

080057b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d101      	bne.n	80057cc <HAL_TIM_ConfigClockSource+0x1c>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e0ee      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x1fa>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80057ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80057ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a6b      	ldr	r2, [pc, #428]	@ (80059b4 <HAL_TIM_ConfigClockSource+0x204>)
 8005806:	4293      	cmp	r3, r2
 8005808:	f000 80b9 	beq.w	800597e <HAL_TIM_ConfigClockSource+0x1ce>
 800580c:	4a69      	ldr	r2, [pc, #420]	@ (80059b4 <HAL_TIM_ConfigClockSource+0x204>)
 800580e:	4293      	cmp	r3, r2
 8005810:	f200 80be 	bhi.w	8005990 <HAL_TIM_ConfigClockSource+0x1e0>
 8005814:	4a68      	ldr	r2, [pc, #416]	@ (80059b8 <HAL_TIM_ConfigClockSource+0x208>)
 8005816:	4293      	cmp	r3, r2
 8005818:	f000 80b1 	beq.w	800597e <HAL_TIM_ConfigClockSource+0x1ce>
 800581c:	4a66      	ldr	r2, [pc, #408]	@ (80059b8 <HAL_TIM_ConfigClockSource+0x208>)
 800581e:	4293      	cmp	r3, r2
 8005820:	f200 80b6 	bhi.w	8005990 <HAL_TIM_ConfigClockSource+0x1e0>
 8005824:	4a65      	ldr	r2, [pc, #404]	@ (80059bc <HAL_TIM_ConfigClockSource+0x20c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	f000 80a9 	beq.w	800597e <HAL_TIM_ConfigClockSource+0x1ce>
 800582c:	4a63      	ldr	r2, [pc, #396]	@ (80059bc <HAL_TIM_ConfigClockSource+0x20c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	f200 80ae 	bhi.w	8005990 <HAL_TIM_ConfigClockSource+0x1e0>
 8005834:	4a62      	ldr	r2, [pc, #392]	@ (80059c0 <HAL_TIM_ConfigClockSource+0x210>)
 8005836:	4293      	cmp	r3, r2
 8005838:	f000 80a1 	beq.w	800597e <HAL_TIM_ConfigClockSource+0x1ce>
 800583c:	4a60      	ldr	r2, [pc, #384]	@ (80059c0 <HAL_TIM_ConfigClockSource+0x210>)
 800583e:	4293      	cmp	r3, r2
 8005840:	f200 80a6 	bhi.w	8005990 <HAL_TIM_ConfigClockSource+0x1e0>
 8005844:	4a5f      	ldr	r2, [pc, #380]	@ (80059c4 <HAL_TIM_ConfigClockSource+0x214>)
 8005846:	4293      	cmp	r3, r2
 8005848:	f000 8099 	beq.w	800597e <HAL_TIM_ConfigClockSource+0x1ce>
 800584c:	4a5d      	ldr	r2, [pc, #372]	@ (80059c4 <HAL_TIM_ConfigClockSource+0x214>)
 800584e:	4293      	cmp	r3, r2
 8005850:	f200 809e 	bhi.w	8005990 <HAL_TIM_ConfigClockSource+0x1e0>
 8005854:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005858:	f000 8091 	beq.w	800597e <HAL_TIM_ConfigClockSource+0x1ce>
 800585c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005860:	f200 8096 	bhi.w	8005990 <HAL_TIM_ConfigClockSource+0x1e0>
 8005864:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005868:	f000 8089 	beq.w	800597e <HAL_TIM_ConfigClockSource+0x1ce>
 800586c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005870:	f200 808e 	bhi.w	8005990 <HAL_TIM_ConfigClockSource+0x1e0>
 8005874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005878:	d03e      	beq.n	80058f8 <HAL_TIM_ConfigClockSource+0x148>
 800587a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800587e:	f200 8087 	bhi.w	8005990 <HAL_TIM_ConfigClockSource+0x1e0>
 8005882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005886:	f000 8086 	beq.w	8005996 <HAL_TIM_ConfigClockSource+0x1e6>
 800588a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800588e:	d87f      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x1e0>
 8005890:	2b70      	cmp	r3, #112	@ 0x70
 8005892:	d01a      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0x11a>
 8005894:	2b70      	cmp	r3, #112	@ 0x70
 8005896:	d87b      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x1e0>
 8005898:	2b60      	cmp	r3, #96	@ 0x60
 800589a:	d050      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x18e>
 800589c:	2b60      	cmp	r3, #96	@ 0x60
 800589e:	d877      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x1e0>
 80058a0:	2b50      	cmp	r3, #80	@ 0x50
 80058a2:	d03c      	beq.n	800591e <HAL_TIM_ConfigClockSource+0x16e>
 80058a4:	2b50      	cmp	r3, #80	@ 0x50
 80058a6:	d873      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x1e0>
 80058a8:	2b40      	cmp	r3, #64	@ 0x40
 80058aa:	d058      	beq.n	800595e <HAL_TIM_ConfigClockSource+0x1ae>
 80058ac:	2b40      	cmp	r3, #64	@ 0x40
 80058ae:	d86f      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x1e0>
 80058b0:	2b30      	cmp	r3, #48	@ 0x30
 80058b2:	d064      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x1ce>
 80058b4:	2b30      	cmp	r3, #48	@ 0x30
 80058b6:	d86b      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x1e0>
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d060      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x1ce>
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d867      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x1e0>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d05c      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x1ce>
 80058c4:	2b10      	cmp	r3, #16
 80058c6:	d05a      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x1ce>
 80058c8:	e062      	b.n	8005990 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058da:	f000 fccf 	bl	800627c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	609a      	str	r2, [r3, #8]
      break;
 80058f6:	e04f      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005908:	f000 fcb8 	bl	800627c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800591a:	609a      	str	r2, [r3, #8]
      break;
 800591c:	e03c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800592a:	461a      	mov	r2, r3
 800592c:	f000 fc2a 	bl	8006184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2150      	movs	r1, #80	@ 0x50
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fc83 	bl	8006242 <TIM_ITRx_SetConfig>
      break;
 800593c:	e02c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800594a:	461a      	mov	r2, r3
 800594c:	f000 fc49 	bl	80061e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2160      	movs	r1, #96	@ 0x60
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fc73 	bl	8006242 <TIM_ITRx_SetConfig>
      break;
 800595c:	e01c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800596a:	461a      	mov	r2, r3
 800596c:	f000 fc0a 	bl	8006184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2140      	movs	r1, #64	@ 0x40
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fc63 	bl	8006242 <TIM_ITRx_SetConfig>
      break;
 800597c:	e00c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4619      	mov	r1, r3
 8005988:	4610      	mov	r0, r2
 800598a:	f000 fc5a 	bl	8006242 <TIM_ITRx_SetConfig>
      break;
 800598e:	e003      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]
      break;
 8005994:	e000      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8005996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	00100070 	.word	0x00100070
 80059b8:	00100050 	.word	0x00100050
 80059bc:	00100040 	.word	0x00100040
 80059c0:	00100030 	.word	0x00100030
 80059c4:	00100020 	.word	0x00100020

080059c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a4c      	ldr	r2, [pc, #304]	@ (8005b0c <TIM_Base_SetConfig+0x144>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d017      	beq.n	8005a10 <TIM_Base_SetConfig+0x48>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e6:	d013      	beq.n	8005a10 <TIM_Base_SetConfig+0x48>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a49      	ldr	r2, [pc, #292]	@ (8005b10 <TIM_Base_SetConfig+0x148>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00f      	beq.n	8005a10 <TIM_Base_SetConfig+0x48>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a48      	ldr	r2, [pc, #288]	@ (8005b14 <TIM_Base_SetConfig+0x14c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d00b      	beq.n	8005a10 <TIM_Base_SetConfig+0x48>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a47      	ldr	r2, [pc, #284]	@ (8005b18 <TIM_Base_SetConfig+0x150>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d007      	beq.n	8005a10 <TIM_Base_SetConfig+0x48>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a46      	ldr	r2, [pc, #280]	@ (8005b1c <TIM_Base_SetConfig+0x154>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d003      	beq.n	8005a10 <TIM_Base_SetConfig+0x48>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a45      	ldr	r2, [pc, #276]	@ (8005b20 <TIM_Base_SetConfig+0x158>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d108      	bne.n	8005a22 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a39      	ldr	r2, [pc, #228]	@ (8005b0c <TIM_Base_SetConfig+0x144>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d023      	beq.n	8005a72 <TIM_Base_SetConfig+0xaa>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a30:	d01f      	beq.n	8005a72 <TIM_Base_SetConfig+0xaa>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a36      	ldr	r2, [pc, #216]	@ (8005b10 <TIM_Base_SetConfig+0x148>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d01b      	beq.n	8005a72 <TIM_Base_SetConfig+0xaa>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a35      	ldr	r2, [pc, #212]	@ (8005b14 <TIM_Base_SetConfig+0x14c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d017      	beq.n	8005a72 <TIM_Base_SetConfig+0xaa>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a34      	ldr	r2, [pc, #208]	@ (8005b18 <TIM_Base_SetConfig+0x150>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d013      	beq.n	8005a72 <TIM_Base_SetConfig+0xaa>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a33      	ldr	r2, [pc, #204]	@ (8005b1c <TIM_Base_SetConfig+0x154>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00f      	beq.n	8005a72 <TIM_Base_SetConfig+0xaa>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a33      	ldr	r2, [pc, #204]	@ (8005b24 <TIM_Base_SetConfig+0x15c>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00b      	beq.n	8005a72 <TIM_Base_SetConfig+0xaa>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a32      	ldr	r2, [pc, #200]	@ (8005b28 <TIM_Base_SetConfig+0x160>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d007      	beq.n	8005a72 <TIM_Base_SetConfig+0xaa>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a31      	ldr	r2, [pc, #196]	@ (8005b2c <TIM_Base_SetConfig+0x164>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d003      	beq.n	8005a72 <TIM_Base_SetConfig+0xaa>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a2c      	ldr	r2, [pc, #176]	@ (8005b20 <TIM_Base_SetConfig+0x158>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d108      	bne.n	8005a84 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a18      	ldr	r2, [pc, #96]	@ (8005b0c <TIM_Base_SetConfig+0x144>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d013      	beq.n	8005ad8 <TIM_Base_SetConfig+0x110>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a1a      	ldr	r2, [pc, #104]	@ (8005b1c <TIM_Base_SetConfig+0x154>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00f      	beq.n	8005ad8 <TIM_Base_SetConfig+0x110>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a1a      	ldr	r2, [pc, #104]	@ (8005b24 <TIM_Base_SetConfig+0x15c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00b      	beq.n	8005ad8 <TIM_Base_SetConfig+0x110>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a19      	ldr	r2, [pc, #100]	@ (8005b28 <TIM_Base_SetConfig+0x160>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d007      	beq.n	8005ad8 <TIM_Base_SetConfig+0x110>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a18      	ldr	r2, [pc, #96]	@ (8005b2c <TIM_Base_SetConfig+0x164>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d003      	beq.n	8005ad8 <TIM_Base_SetConfig+0x110>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a13      	ldr	r2, [pc, #76]	@ (8005b20 <TIM_Base_SetConfig+0x158>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d103      	bne.n	8005ae0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	691a      	ldr	r2, [r3, #16]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d105      	bne.n	8005afe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f023 0201 	bic.w	r2, r3, #1
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	611a      	str	r2, [r3, #16]
  }
}
 8005afe:	bf00      	nop
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40012c00 	.word	0x40012c00
 8005b10:	40000400 	.word	0x40000400
 8005b14:	40000800 	.word	0x40000800
 8005b18:	40000c00 	.word	0x40000c00
 8005b1c:	40013400 	.word	0x40013400
 8005b20:	40015000 	.word	0x40015000
 8005b24:	40014000 	.word	0x40014000
 8005b28:	40014400 	.word	0x40014400
 8005b2c:	40014800 	.word	0x40014800

08005b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	f023 0201 	bic.w	r2, r3, #1
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0303 	bic.w	r3, r3, #3
 8005b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f023 0302 	bic.w	r3, r3, #2
 8005b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a30      	ldr	r2, [pc, #192]	@ (8005c4c <TIM_OC1_SetConfig+0x11c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d013      	beq.n	8005bb8 <TIM_OC1_SetConfig+0x88>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a2f      	ldr	r2, [pc, #188]	@ (8005c50 <TIM_OC1_SetConfig+0x120>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00f      	beq.n	8005bb8 <TIM_OC1_SetConfig+0x88>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a2e      	ldr	r2, [pc, #184]	@ (8005c54 <TIM_OC1_SetConfig+0x124>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00b      	beq.n	8005bb8 <TIM_OC1_SetConfig+0x88>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8005c58 <TIM_OC1_SetConfig+0x128>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d007      	beq.n	8005bb8 <TIM_OC1_SetConfig+0x88>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a2c      	ldr	r2, [pc, #176]	@ (8005c5c <TIM_OC1_SetConfig+0x12c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_OC1_SetConfig+0x88>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a2b      	ldr	r2, [pc, #172]	@ (8005c60 <TIM_OC1_SetConfig+0x130>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d10c      	bne.n	8005bd2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f023 0308 	bic.w	r3, r3, #8
 8005bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f023 0304 	bic.w	r3, r3, #4
 8005bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8005c4c <TIM_OC1_SetConfig+0x11c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d013      	beq.n	8005c02 <TIM_OC1_SetConfig+0xd2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8005c50 <TIM_OC1_SetConfig+0x120>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d00f      	beq.n	8005c02 <TIM_OC1_SetConfig+0xd2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a1b      	ldr	r2, [pc, #108]	@ (8005c54 <TIM_OC1_SetConfig+0x124>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00b      	beq.n	8005c02 <TIM_OC1_SetConfig+0xd2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a1a      	ldr	r2, [pc, #104]	@ (8005c58 <TIM_OC1_SetConfig+0x128>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d007      	beq.n	8005c02 <TIM_OC1_SetConfig+0xd2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a19      	ldr	r2, [pc, #100]	@ (8005c5c <TIM_OC1_SetConfig+0x12c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d003      	beq.n	8005c02 <TIM_OC1_SetConfig+0xd2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a18      	ldr	r2, [pc, #96]	@ (8005c60 <TIM_OC1_SetConfig+0x130>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d111      	bne.n	8005c26 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	621a      	str	r2, [r3, #32]
}
 8005c40:	bf00      	nop
 8005c42:	371c      	adds	r7, #28
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	40012c00 	.word	0x40012c00
 8005c50:	40013400 	.word	0x40013400
 8005c54:	40014000 	.word	0x40014000
 8005c58:	40014400 	.word	0x40014400
 8005c5c:	40014800 	.word	0x40014800
 8005c60:	40015000 	.word	0x40015000

08005c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f023 0210 	bic.w	r2, r3, #16
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	021b      	lsls	r3, r3, #8
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f023 0320 	bic.w	r3, r3, #32
 8005cb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8005d74 <TIM_OC2_SetConfig+0x110>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d007      	beq.n	8005cd8 <TIM_OC2_SetConfig+0x74>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a2b      	ldr	r2, [pc, #172]	@ (8005d78 <TIM_OC2_SetConfig+0x114>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d003      	beq.n	8005cd8 <TIM_OC2_SetConfig+0x74>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8005d7c <TIM_OC2_SetConfig+0x118>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d10d      	bne.n	8005cf4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cf2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8005d74 <TIM_OC2_SetConfig+0x110>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d013      	beq.n	8005d24 <TIM_OC2_SetConfig+0xc0>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8005d78 <TIM_OC2_SetConfig+0x114>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00f      	beq.n	8005d24 <TIM_OC2_SetConfig+0xc0>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a1e      	ldr	r2, [pc, #120]	@ (8005d80 <TIM_OC2_SetConfig+0x11c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00b      	beq.n	8005d24 <TIM_OC2_SetConfig+0xc0>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8005d84 <TIM_OC2_SetConfig+0x120>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d007      	beq.n	8005d24 <TIM_OC2_SetConfig+0xc0>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a1c      	ldr	r2, [pc, #112]	@ (8005d88 <TIM_OC2_SetConfig+0x124>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_OC2_SetConfig+0xc0>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a17      	ldr	r2, [pc, #92]	@ (8005d7c <TIM_OC2_SetConfig+0x118>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d113      	bne.n	8005d4c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	621a      	str	r2, [r3, #32]
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40012c00 	.word	0x40012c00
 8005d78:	40013400 	.word	0x40013400
 8005d7c:	40015000 	.word	0x40015000
 8005d80:	40014000 	.word	0x40014000
 8005d84:	40014400 	.word	0x40014400
 8005d88:	40014800 	.word	0x40014800

08005d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 0303 	bic.w	r3, r3, #3
 8005dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	021b      	lsls	r3, r3, #8
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a2b      	ldr	r2, [pc, #172]	@ (8005e98 <TIM_OC3_SetConfig+0x10c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d007      	beq.n	8005dfe <TIM_OC3_SetConfig+0x72>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a2a      	ldr	r2, [pc, #168]	@ (8005e9c <TIM_OC3_SetConfig+0x110>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d003      	beq.n	8005dfe <TIM_OC3_SetConfig+0x72>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a29      	ldr	r2, [pc, #164]	@ (8005ea0 <TIM_OC3_SetConfig+0x114>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d10d      	bne.n	8005e1a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	021b      	lsls	r3, r3, #8
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a1e      	ldr	r2, [pc, #120]	@ (8005e98 <TIM_OC3_SetConfig+0x10c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d013      	beq.n	8005e4a <TIM_OC3_SetConfig+0xbe>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a1d      	ldr	r2, [pc, #116]	@ (8005e9c <TIM_OC3_SetConfig+0x110>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00f      	beq.n	8005e4a <TIM_OC3_SetConfig+0xbe>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ea4 <TIM_OC3_SetConfig+0x118>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00b      	beq.n	8005e4a <TIM_OC3_SetConfig+0xbe>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea8 <TIM_OC3_SetConfig+0x11c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d007      	beq.n	8005e4a <TIM_OC3_SetConfig+0xbe>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005eac <TIM_OC3_SetConfig+0x120>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d003      	beq.n	8005e4a <TIM_OC3_SetConfig+0xbe>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a16      	ldr	r2, [pc, #88]	@ (8005ea0 <TIM_OC3_SetConfig+0x114>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d113      	bne.n	8005e72 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	621a      	str	r2, [r3, #32]
}
 8005e8c:	bf00      	nop
 8005e8e:	371c      	adds	r7, #28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	40012c00 	.word	0x40012c00
 8005e9c:	40013400 	.word	0x40013400
 8005ea0:	40015000 	.word	0x40015000
 8005ea4:	40014000 	.word	0x40014000
 8005ea8:	40014400 	.word	0x40014400
 8005eac:	40014800 	.word	0x40014800

08005eb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	021b      	lsls	r3, r3, #8
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005efe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	031b      	lsls	r3, r3, #12
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a2c      	ldr	r2, [pc, #176]	@ (8005fc0 <TIM_OC4_SetConfig+0x110>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d007      	beq.n	8005f24 <TIM_OC4_SetConfig+0x74>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a2b      	ldr	r2, [pc, #172]	@ (8005fc4 <TIM_OC4_SetConfig+0x114>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d003      	beq.n	8005f24 <TIM_OC4_SetConfig+0x74>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8005fc8 <TIM_OC4_SetConfig+0x118>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d10d      	bne.n	8005f40 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	031b      	lsls	r3, r3, #12
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc0 <TIM_OC4_SetConfig+0x110>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d013      	beq.n	8005f70 <TIM_OC4_SetConfig+0xc0>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a1e      	ldr	r2, [pc, #120]	@ (8005fc4 <TIM_OC4_SetConfig+0x114>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d00f      	beq.n	8005f70 <TIM_OC4_SetConfig+0xc0>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a1e      	ldr	r2, [pc, #120]	@ (8005fcc <TIM_OC4_SetConfig+0x11c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d00b      	beq.n	8005f70 <TIM_OC4_SetConfig+0xc0>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8005fd0 <TIM_OC4_SetConfig+0x120>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d007      	beq.n	8005f70 <TIM_OC4_SetConfig+0xc0>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a1c      	ldr	r2, [pc, #112]	@ (8005fd4 <TIM_OC4_SetConfig+0x124>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d003      	beq.n	8005f70 <TIM_OC4_SetConfig+0xc0>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a17      	ldr	r2, [pc, #92]	@ (8005fc8 <TIM_OC4_SetConfig+0x118>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d113      	bne.n	8005f98 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f76:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f7e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	019b      	lsls	r3, r3, #6
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	019b      	lsls	r3, r3, #6
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	621a      	str	r2, [r3, #32]
}
 8005fb2:	bf00      	nop
 8005fb4:	371c      	adds	r7, #28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	40012c00 	.word	0x40012c00
 8005fc4:	40013400 	.word	0x40013400
 8005fc8:	40015000 	.word	0x40015000
 8005fcc:	40014000 	.word	0x40014000
 8005fd0:	40014400 	.word	0x40014400
 8005fd4:	40014800 	.word	0x40014800

08005fd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800600a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800601c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	041b      	lsls	r3, r3, #16
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	4313      	orrs	r3, r2
 8006028:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a19      	ldr	r2, [pc, #100]	@ (8006094 <TIM_OC5_SetConfig+0xbc>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d013      	beq.n	800605a <TIM_OC5_SetConfig+0x82>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a18      	ldr	r2, [pc, #96]	@ (8006098 <TIM_OC5_SetConfig+0xc0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00f      	beq.n	800605a <TIM_OC5_SetConfig+0x82>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a17      	ldr	r2, [pc, #92]	@ (800609c <TIM_OC5_SetConfig+0xc4>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00b      	beq.n	800605a <TIM_OC5_SetConfig+0x82>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a16      	ldr	r2, [pc, #88]	@ (80060a0 <TIM_OC5_SetConfig+0xc8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d007      	beq.n	800605a <TIM_OC5_SetConfig+0x82>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a15      	ldr	r2, [pc, #84]	@ (80060a4 <TIM_OC5_SetConfig+0xcc>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d003      	beq.n	800605a <TIM_OC5_SetConfig+0x82>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a14      	ldr	r2, [pc, #80]	@ (80060a8 <TIM_OC5_SetConfig+0xd0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d109      	bne.n	800606e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006060:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	021b      	lsls	r3, r3, #8
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	621a      	str	r2, [r3, #32]
}
 8006088:	bf00      	nop
 800608a:	371c      	adds	r7, #28
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	40012c00 	.word	0x40012c00
 8006098:	40013400 	.word	0x40013400
 800609c:	40014000 	.word	0x40014000
 80060a0:	40014400 	.word	0x40014400
 80060a4:	40014800 	.word	0x40014800
 80060a8:	40015000 	.word	0x40015000

080060ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	021b      	lsls	r3, r3, #8
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80060f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	051b      	lsls	r3, r3, #20
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a1a      	ldr	r2, [pc, #104]	@ (800616c <TIM_OC6_SetConfig+0xc0>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d013      	beq.n	8006130 <TIM_OC6_SetConfig+0x84>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a19      	ldr	r2, [pc, #100]	@ (8006170 <TIM_OC6_SetConfig+0xc4>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00f      	beq.n	8006130 <TIM_OC6_SetConfig+0x84>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a18      	ldr	r2, [pc, #96]	@ (8006174 <TIM_OC6_SetConfig+0xc8>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d00b      	beq.n	8006130 <TIM_OC6_SetConfig+0x84>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a17      	ldr	r2, [pc, #92]	@ (8006178 <TIM_OC6_SetConfig+0xcc>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d007      	beq.n	8006130 <TIM_OC6_SetConfig+0x84>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a16      	ldr	r2, [pc, #88]	@ (800617c <TIM_OC6_SetConfig+0xd0>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d003      	beq.n	8006130 <TIM_OC6_SetConfig+0x84>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a15      	ldr	r2, [pc, #84]	@ (8006180 <TIM_OC6_SetConfig+0xd4>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d109      	bne.n	8006144 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006136:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	029b      	lsls	r3, r3, #10
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	621a      	str	r2, [r3, #32]
}
 800615e:	bf00      	nop
 8006160:	371c      	adds	r7, #28
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	40012c00 	.word	0x40012c00
 8006170:	40013400 	.word	0x40013400
 8006174:	40014000 	.word	0x40014000
 8006178:	40014400 	.word	0x40014400
 800617c:	40014800 	.word	0x40014800
 8006180:	40015000 	.word	0x40015000

08006184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f023 0201 	bic.w	r2, r3, #1
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	011b      	lsls	r3, r3, #4
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f023 030a 	bic.w	r3, r3, #10
 80061c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	621a      	str	r2, [r3, #32]
}
 80061d6:	bf00      	nop
 80061d8:	371c      	adds	r7, #28
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b087      	sub	sp, #28
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	f023 0210 	bic.w	r2, r3, #16
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800620c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	031b      	lsls	r3, r3, #12
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	4313      	orrs	r3, r2
 8006216:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800621e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	011b      	lsls	r3, r3, #4
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	621a      	str	r2, [r3, #32]
}
 8006236:	bf00      	nop
 8006238:	371c      	adds	r7, #28
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006242:	b480      	push	{r7}
 8006244:	b085      	sub	sp, #20
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800625c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	f043 0307 	orr.w	r3, r3, #7
 8006268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	609a      	str	r2, [r3, #8]
}
 8006270:	bf00      	nop
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	021a      	lsls	r2, r3, #8
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	431a      	orrs	r2, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	609a      	str	r2, [r3, #8]
}
 80062b0:	bf00      	nop
 80062b2:	371c      	adds	r7, #28
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 031f 	and.w	r3, r3, #31
 80062ce:	2201      	movs	r2, #1
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a1a      	ldr	r2, [r3, #32]
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	43db      	mvns	r3, r3
 80062de:	401a      	ands	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a1a      	ldr	r2, [r3, #32]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f003 031f 	and.w	r3, r3, #31
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	fa01 f303 	lsl.w	r3, r1, r3
 80062f4:	431a      	orrs	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	621a      	str	r2, [r3, #32]
}
 80062fa:	bf00      	nop
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
	...

08006308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800631c:	2302      	movs	r3, #2
 800631e:	e074      	b.n	800640a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a34      	ldr	r2, [pc, #208]	@ (8006418 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d009      	beq.n	800635e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a33      	ldr	r2, [pc, #204]	@ (800641c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d004      	beq.n	800635e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a31      	ldr	r2, [pc, #196]	@ (8006420 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d108      	bne.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006364:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	4313      	orrs	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800637a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a21      	ldr	r2, [pc, #132]	@ (8006418 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d022      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a0:	d01d      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a1f      	ldr	r2, [pc, #124]	@ (8006424 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d018      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006428 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d013      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a1c      	ldr	r2, [pc, #112]	@ (800642c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d00e      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a15      	ldr	r2, [pc, #84]	@ (800641c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d009      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a18      	ldr	r2, [pc, #96]	@ (8006430 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d004      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a11      	ldr	r2, [pc, #68]	@ (8006420 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d10c      	bne.n	80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40012c00 	.word	0x40012c00
 800641c:	40013400 	.word	0x40013400
 8006420:	40015000 	.word	0x40015000
 8006424:	40000400 	.word	0x40000400
 8006428:	40000800 	.word	0x40000800
 800642c:	40000c00 	.word	0x40000c00
 8006430:	40014000 	.word	0x40014000

08006434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e042      	b.n	80064cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800644c:	2b00      	cmp	r3, #0
 800644e:	d106      	bne.n	800645e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7fd f8fb 	bl	8003654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2224      	movs	r2, #36	@ 0x24
 8006462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 0201 	bic.w	r2, r2, #1
 8006474:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fbb2 	bl	8006be8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f8b3 	bl	80065f0 <UART_SetConfig>
 800648a:	4603      	mov	r3, r0
 800648c:	2b01      	cmp	r3, #1
 800648e:	d101      	bne.n	8006494 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e01b      	b.n	80064cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0201 	orr.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fc31 	bl	8006d2c <UART_CheckIdleState>
 80064ca:	4603      	mov	r3, r0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08a      	sub	sp, #40	@ 0x28
 80064d8:	af02      	add	r7, sp, #8
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	4613      	mov	r3, r2
 80064e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ea:	2b20      	cmp	r3, #32
 80064ec:	d17b      	bne.n	80065e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <HAL_UART_Transmit+0x26>
 80064f4:	88fb      	ldrh	r3, [r7, #6]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e074      	b.n	80065e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2221      	movs	r2, #33	@ 0x21
 800650a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800650e:	f7fd f9c7 	bl	80038a0 <HAL_GetTick>
 8006512:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	88fa      	ldrh	r2, [r7, #6]
 8006518:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	88fa      	ldrh	r2, [r7, #6]
 8006520:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800652c:	d108      	bne.n	8006540 <HAL_UART_Transmit+0x6c>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d104      	bne.n	8006540 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006536:	2300      	movs	r3, #0
 8006538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	61bb      	str	r3, [r7, #24]
 800653e:	e003      	b.n	8006548 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006544:	2300      	movs	r3, #0
 8006546:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006548:	e030      	b.n	80065ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2200      	movs	r2, #0
 8006552:	2180      	movs	r1, #128	@ 0x80
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 fc93 	bl	8006e80 <UART_WaitOnFlagUntilTimeout>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d005      	beq.n	800656c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2220      	movs	r2, #32
 8006564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e03d      	b.n	80065e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10b      	bne.n	800658a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	461a      	mov	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006580:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	3302      	adds	r3, #2
 8006586:	61bb      	str	r3, [r7, #24]
 8006588:	e007      	b.n	800659a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	781a      	ldrb	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	3301      	adds	r3, #1
 8006598:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	3b01      	subs	r3, #1
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1c8      	bne.n	800654a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2200      	movs	r2, #0
 80065c0:	2140      	movs	r1, #64	@ 0x40
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 fc5c 	bl	8006e80 <UART_WaitOnFlagUntilTimeout>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d005      	beq.n	80065da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e006      	b.n	80065e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2220      	movs	r2, #32
 80065de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	e000      	b.n	80065e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80065e6:	2302      	movs	r3, #2
  }
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3720      	adds	r7, #32
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065f4:	b08c      	sub	sp, #48	@ 0x30
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	431a      	orrs	r2, r3
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	431a      	orrs	r2, r3
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	4313      	orrs	r3, r2
 8006616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	4baa      	ldr	r3, [pc, #680]	@ (80068c8 <UART_SetConfig+0x2d8>)
 8006620:	4013      	ands	r3, r2
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	6812      	ldr	r2, [r2, #0]
 8006626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006628:	430b      	orrs	r3, r1
 800662a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a9f      	ldr	r2, [pc, #636]	@ (80068cc <UART_SetConfig+0x2dc>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d004      	beq.n	800665c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006658:	4313      	orrs	r3, r2
 800665a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006666:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	6812      	ldr	r2, [r2, #0]
 800666e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006670:	430b      	orrs	r3, r1
 8006672:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667a:	f023 010f 	bic.w	r1, r3, #15
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a90      	ldr	r2, [pc, #576]	@ (80068d0 <UART_SetConfig+0x2e0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d125      	bne.n	80066e0 <UART_SetConfig+0xf0>
 8006694:	4b8f      	ldr	r3, [pc, #572]	@ (80068d4 <UART_SetConfig+0x2e4>)
 8006696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800669a:	f003 0303 	and.w	r3, r3, #3
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d81a      	bhi.n	80066d8 <UART_SetConfig+0xe8>
 80066a2:	a201      	add	r2, pc, #4	@ (adr r2, 80066a8 <UART_SetConfig+0xb8>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	080066b9 	.word	0x080066b9
 80066ac:	080066c9 	.word	0x080066c9
 80066b0:	080066c1 	.word	0x080066c1
 80066b4:	080066d1 	.word	0x080066d1
 80066b8:	2301      	movs	r3, #1
 80066ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066be:	e116      	b.n	80068ee <UART_SetConfig+0x2fe>
 80066c0:	2302      	movs	r3, #2
 80066c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066c6:	e112      	b.n	80068ee <UART_SetConfig+0x2fe>
 80066c8:	2304      	movs	r3, #4
 80066ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ce:	e10e      	b.n	80068ee <UART_SetConfig+0x2fe>
 80066d0:	2308      	movs	r3, #8
 80066d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066d6:	e10a      	b.n	80068ee <UART_SetConfig+0x2fe>
 80066d8:	2310      	movs	r3, #16
 80066da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066de:	e106      	b.n	80068ee <UART_SetConfig+0x2fe>
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a7c      	ldr	r2, [pc, #496]	@ (80068d8 <UART_SetConfig+0x2e8>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d138      	bne.n	800675c <UART_SetConfig+0x16c>
 80066ea:	4b7a      	ldr	r3, [pc, #488]	@ (80068d4 <UART_SetConfig+0x2e4>)
 80066ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f0:	f003 030c 	and.w	r3, r3, #12
 80066f4:	2b0c      	cmp	r3, #12
 80066f6:	d82d      	bhi.n	8006754 <UART_SetConfig+0x164>
 80066f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006700 <UART_SetConfig+0x110>)
 80066fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fe:	bf00      	nop
 8006700:	08006735 	.word	0x08006735
 8006704:	08006755 	.word	0x08006755
 8006708:	08006755 	.word	0x08006755
 800670c:	08006755 	.word	0x08006755
 8006710:	08006745 	.word	0x08006745
 8006714:	08006755 	.word	0x08006755
 8006718:	08006755 	.word	0x08006755
 800671c:	08006755 	.word	0x08006755
 8006720:	0800673d 	.word	0x0800673d
 8006724:	08006755 	.word	0x08006755
 8006728:	08006755 	.word	0x08006755
 800672c:	08006755 	.word	0x08006755
 8006730:	0800674d 	.word	0x0800674d
 8006734:	2300      	movs	r3, #0
 8006736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800673a:	e0d8      	b.n	80068ee <UART_SetConfig+0x2fe>
 800673c:	2302      	movs	r3, #2
 800673e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006742:	e0d4      	b.n	80068ee <UART_SetConfig+0x2fe>
 8006744:	2304      	movs	r3, #4
 8006746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800674a:	e0d0      	b.n	80068ee <UART_SetConfig+0x2fe>
 800674c:	2308      	movs	r3, #8
 800674e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006752:	e0cc      	b.n	80068ee <UART_SetConfig+0x2fe>
 8006754:	2310      	movs	r3, #16
 8006756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800675a:	e0c8      	b.n	80068ee <UART_SetConfig+0x2fe>
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a5e      	ldr	r2, [pc, #376]	@ (80068dc <UART_SetConfig+0x2ec>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d125      	bne.n	80067b2 <UART_SetConfig+0x1c2>
 8006766:	4b5b      	ldr	r3, [pc, #364]	@ (80068d4 <UART_SetConfig+0x2e4>)
 8006768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800676c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006770:	2b30      	cmp	r3, #48	@ 0x30
 8006772:	d016      	beq.n	80067a2 <UART_SetConfig+0x1b2>
 8006774:	2b30      	cmp	r3, #48	@ 0x30
 8006776:	d818      	bhi.n	80067aa <UART_SetConfig+0x1ba>
 8006778:	2b20      	cmp	r3, #32
 800677a:	d00a      	beq.n	8006792 <UART_SetConfig+0x1a2>
 800677c:	2b20      	cmp	r3, #32
 800677e:	d814      	bhi.n	80067aa <UART_SetConfig+0x1ba>
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <UART_SetConfig+0x19a>
 8006784:	2b10      	cmp	r3, #16
 8006786:	d008      	beq.n	800679a <UART_SetConfig+0x1aa>
 8006788:	e00f      	b.n	80067aa <UART_SetConfig+0x1ba>
 800678a:	2300      	movs	r3, #0
 800678c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006790:	e0ad      	b.n	80068ee <UART_SetConfig+0x2fe>
 8006792:	2302      	movs	r3, #2
 8006794:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006798:	e0a9      	b.n	80068ee <UART_SetConfig+0x2fe>
 800679a:	2304      	movs	r3, #4
 800679c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067a0:	e0a5      	b.n	80068ee <UART_SetConfig+0x2fe>
 80067a2:	2308      	movs	r3, #8
 80067a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067a8:	e0a1      	b.n	80068ee <UART_SetConfig+0x2fe>
 80067aa:	2310      	movs	r3, #16
 80067ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067b0:	e09d      	b.n	80068ee <UART_SetConfig+0x2fe>
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a4a      	ldr	r2, [pc, #296]	@ (80068e0 <UART_SetConfig+0x2f0>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d125      	bne.n	8006808 <UART_SetConfig+0x218>
 80067bc:	4b45      	ldr	r3, [pc, #276]	@ (80068d4 <UART_SetConfig+0x2e4>)
 80067be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80067c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80067c8:	d016      	beq.n	80067f8 <UART_SetConfig+0x208>
 80067ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80067cc:	d818      	bhi.n	8006800 <UART_SetConfig+0x210>
 80067ce:	2b80      	cmp	r3, #128	@ 0x80
 80067d0:	d00a      	beq.n	80067e8 <UART_SetConfig+0x1f8>
 80067d2:	2b80      	cmp	r3, #128	@ 0x80
 80067d4:	d814      	bhi.n	8006800 <UART_SetConfig+0x210>
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <UART_SetConfig+0x1f0>
 80067da:	2b40      	cmp	r3, #64	@ 0x40
 80067dc:	d008      	beq.n	80067f0 <UART_SetConfig+0x200>
 80067de:	e00f      	b.n	8006800 <UART_SetConfig+0x210>
 80067e0:	2300      	movs	r3, #0
 80067e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067e6:	e082      	b.n	80068ee <UART_SetConfig+0x2fe>
 80067e8:	2302      	movs	r3, #2
 80067ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ee:	e07e      	b.n	80068ee <UART_SetConfig+0x2fe>
 80067f0:	2304      	movs	r3, #4
 80067f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067f6:	e07a      	b.n	80068ee <UART_SetConfig+0x2fe>
 80067f8:	2308      	movs	r3, #8
 80067fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067fe:	e076      	b.n	80068ee <UART_SetConfig+0x2fe>
 8006800:	2310      	movs	r3, #16
 8006802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006806:	e072      	b.n	80068ee <UART_SetConfig+0x2fe>
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a35      	ldr	r2, [pc, #212]	@ (80068e4 <UART_SetConfig+0x2f4>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d12a      	bne.n	8006868 <UART_SetConfig+0x278>
 8006812:	4b30      	ldr	r3, [pc, #192]	@ (80068d4 <UART_SetConfig+0x2e4>)
 8006814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006818:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800681c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006820:	d01a      	beq.n	8006858 <UART_SetConfig+0x268>
 8006822:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006826:	d81b      	bhi.n	8006860 <UART_SetConfig+0x270>
 8006828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800682c:	d00c      	beq.n	8006848 <UART_SetConfig+0x258>
 800682e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006832:	d815      	bhi.n	8006860 <UART_SetConfig+0x270>
 8006834:	2b00      	cmp	r3, #0
 8006836:	d003      	beq.n	8006840 <UART_SetConfig+0x250>
 8006838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800683c:	d008      	beq.n	8006850 <UART_SetConfig+0x260>
 800683e:	e00f      	b.n	8006860 <UART_SetConfig+0x270>
 8006840:	2300      	movs	r3, #0
 8006842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006846:	e052      	b.n	80068ee <UART_SetConfig+0x2fe>
 8006848:	2302      	movs	r3, #2
 800684a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800684e:	e04e      	b.n	80068ee <UART_SetConfig+0x2fe>
 8006850:	2304      	movs	r3, #4
 8006852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006856:	e04a      	b.n	80068ee <UART_SetConfig+0x2fe>
 8006858:	2308      	movs	r3, #8
 800685a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800685e:	e046      	b.n	80068ee <UART_SetConfig+0x2fe>
 8006860:	2310      	movs	r3, #16
 8006862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006866:	e042      	b.n	80068ee <UART_SetConfig+0x2fe>
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a17      	ldr	r2, [pc, #92]	@ (80068cc <UART_SetConfig+0x2dc>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d13a      	bne.n	80068e8 <UART_SetConfig+0x2f8>
 8006872:	4b18      	ldr	r3, [pc, #96]	@ (80068d4 <UART_SetConfig+0x2e4>)
 8006874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006878:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800687c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006880:	d01a      	beq.n	80068b8 <UART_SetConfig+0x2c8>
 8006882:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006886:	d81b      	bhi.n	80068c0 <UART_SetConfig+0x2d0>
 8006888:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800688c:	d00c      	beq.n	80068a8 <UART_SetConfig+0x2b8>
 800688e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006892:	d815      	bhi.n	80068c0 <UART_SetConfig+0x2d0>
 8006894:	2b00      	cmp	r3, #0
 8006896:	d003      	beq.n	80068a0 <UART_SetConfig+0x2b0>
 8006898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800689c:	d008      	beq.n	80068b0 <UART_SetConfig+0x2c0>
 800689e:	e00f      	b.n	80068c0 <UART_SetConfig+0x2d0>
 80068a0:	2300      	movs	r3, #0
 80068a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068a6:	e022      	b.n	80068ee <UART_SetConfig+0x2fe>
 80068a8:	2302      	movs	r3, #2
 80068aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ae:	e01e      	b.n	80068ee <UART_SetConfig+0x2fe>
 80068b0:	2304      	movs	r3, #4
 80068b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068b6:	e01a      	b.n	80068ee <UART_SetConfig+0x2fe>
 80068b8:	2308      	movs	r3, #8
 80068ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068be:	e016      	b.n	80068ee <UART_SetConfig+0x2fe>
 80068c0:	2310      	movs	r3, #16
 80068c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068c6:	e012      	b.n	80068ee <UART_SetConfig+0x2fe>
 80068c8:	cfff69f3 	.word	0xcfff69f3
 80068cc:	40008000 	.word	0x40008000
 80068d0:	40013800 	.word	0x40013800
 80068d4:	40021000 	.word	0x40021000
 80068d8:	40004400 	.word	0x40004400
 80068dc:	40004800 	.word	0x40004800
 80068e0:	40004c00 	.word	0x40004c00
 80068e4:	40005000 	.word	0x40005000
 80068e8:	2310      	movs	r3, #16
 80068ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4aae      	ldr	r2, [pc, #696]	@ (8006bac <UART_SetConfig+0x5bc>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	f040 8097 	bne.w	8006a28 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80068fe:	2b08      	cmp	r3, #8
 8006900:	d823      	bhi.n	800694a <UART_SetConfig+0x35a>
 8006902:	a201      	add	r2, pc, #4	@ (adr r2, 8006908 <UART_SetConfig+0x318>)
 8006904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006908:	0800692d 	.word	0x0800692d
 800690c:	0800694b 	.word	0x0800694b
 8006910:	08006935 	.word	0x08006935
 8006914:	0800694b 	.word	0x0800694b
 8006918:	0800693b 	.word	0x0800693b
 800691c:	0800694b 	.word	0x0800694b
 8006920:	0800694b 	.word	0x0800694b
 8006924:	0800694b 	.word	0x0800694b
 8006928:	08006943 	.word	0x08006943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800692c:	f7fd ffd4 	bl	80048d8 <HAL_RCC_GetPCLK1Freq>
 8006930:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006932:	e010      	b.n	8006956 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006934:	4b9e      	ldr	r3, [pc, #632]	@ (8006bb0 <UART_SetConfig+0x5c0>)
 8006936:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006938:	e00d      	b.n	8006956 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800693a:	f7fd ff5f 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 800693e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006940:	e009      	b.n	8006956 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006942:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006946:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006948:	e005      	b.n	8006956 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006954:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 8130 	beq.w	8006bbe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006962:	4a94      	ldr	r2, [pc, #592]	@ (8006bb4 <UART_SetConfig+0x5c4>)
 8006964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006968:	461a      	mov	r2, r3
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006970:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	4613      	mov	r3, r2
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	4413      	add	r3, r2
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	429a      	cmp	r2, r3
 8006980:	d305      	bcc.n	800698e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	429a      	cmp	r2, r3
 800698c:	d903      	bls.n	8006996 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006994:	e113      	b.n	8006bbe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	2200      	movs	r2, #0
 800699a:	60bb      	str	r3, [r7, #8]
 800699c:	60fa      	str	r2, [r7, #12]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a2:	4a84      	ldr	r2, [pc, #528]	@ (8006bb4 <UART_SetConfig+0x5c4>)
 80069a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2200      	movs	r2, #0
 80069ac:	603b      	str	r3, [r7, #0]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069b8:	f7fa f932 	bl	8000c20 <__aeabi_uldivmod>
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	4610      	mov	r0, r2
 80069c2:	4619      	mov	r1, r3
 80069c4:	f04f 0200 	mov.w	r2, #0
 80069c8:	f04f 0300 	mov.w	r3, #0
 80069cc:	020b      	lsls	r3, r1, #8
 80069ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069d2:	0202      	lsls	r2, r0, #8
 80069d4:	6979      	ldr	r1, [r7, #20]
 80069d6:	6849      	ldr	r1, [r1, #4]
 80069d8:	0849      	lsrs	r1, r1, #1
 80069da:	2000      	movs	r0, #0
 80069dc:	460c      	mov	r4, r1
 80069de:	4605      	mov	r5, r0
 80069e0:	eb12 0804 	adds.w	r8, r2, r4
 80069e4:	eb43 0905 	adc.w	r9, r3, r5
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	469a      	mov	sl, r3
 80069f0:	4693      	mov	fp, r2
 80069f2:	4652      	mov	r2, sl
 80069f4:	465b      	mov	r3, fp
 80069f6:	4640      	mov	r0, r8
 80069f8:	4649      	mov	r1, r9
 80069fa:	f7fa f911 	bl	8000c20 <__aeabi_uldivmod>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	4613      	mov	r3, r2
 8006a04:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a0c:	d308      	bcc.n	8006a20 <UART_SetConfig+0x430>
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a14:	d204      	bcs.n	8006a20 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6a3a      	ldr	r2, [r7, #32]
 8006a1c:	60da      	str	r2, [r3, #12]
 8006a1e:	e0ce      	b.n	8006bbe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a26:	e0ca      	b.n	8006bbe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a30:	d166      	bne.n	8006b00 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006a32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a36:	2b08      	cmp	r3, #8
 8006a38:	d827      	bhi.n	8006a8a <UART_SetConfig+0x49a>
 8006a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a40 <UART_SetConfig+0x450>)
 8006a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a40:	08006a65 	.word	0x08006a65
 8006a44:	08006a6d 	.word	0x08006a6d
 8006a48:	08006a75 	.word	0x08006a75
 8006a4c:	08006a8b 	.word	0x08006a8b
 8006a50:	08006a7b 	.word	0x08006a7b
 8006a54:	08006a8b 	.word	0x08006a8b
 8006a58:	08006a8b 	.word	0x08006a8b
 8006a5c:	08006a8b 	.word	0x08006a8b
 8006a60:	08006a83 	.word	0x08006a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a64:	f7fd ff38 	bl	80048d8 <HAL_RCC_GetPCLK1Freq>
 8006a68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a6a:	e014      	b.n	8006a96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a6c:	f7fd ff4a 	bl	8004904 <HAL_RCC_GetPCLK2Freq>
 8006a70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a72:	e010      	b.n	8006a96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a74:	4b4e      	ldr	r3, [pc, #312]	@ (8006bb0 <UART_SetConfig+0x5c0>)
 8006a76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a78:	e00d      	b.n	8006a96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a7a:	f7fd febf 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 8006a7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a80:	e009      	b.n	8006a96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a88:	e005      	b.n	8006a96 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 8090 	beq.w	8006bbe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa2:	4a44      	ldr	r2, [pc, #272]	@ (8006bb4 <UART_SetConfig+0x5c4>)
 8006aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ab0:	005a      	lsls	r2, r3, #1
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	085b      	lsrs	r3, r3, #1
 8006ab8:	441a      	add	r2, r3
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	2b0f      	cmp	r3, #15
 8006ac8:	d916      	bls.n	8006af8 <UART_SetConfig+0x508>
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ad0:	d212      	bcs.n	8006af8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	f023 030f 	bic.w	r3, r3, #15
 8006ada:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	8bfb      	ldrh	r3, [r7, #30]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	8bfa      	ldrh	r2, [r7, #30]
 8006af4:	60da      	str	r2, [r3, #12]
 8006af6:	e062      	b.n	8006bbe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006afe:	e05e      	b.n	8006bbe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b00:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b04:	2b08      	cmp	r3, #8
 8006b06:	d828      	bhi.n	8006b5a <UART_SetConfig+0x56a>
 8006b08:	a201      	add	r2, pc, #4	@ (adr r2, 8006b10 <UART_SetConfig+0x520>)
 8006b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0e:	bf00      	nop
 8006b10:	08006b35 	.word	0x08006b35
 8006b14:	08006b3d 	.word	0x08006b3d
 8006b18:	08006b45 	.word	0x08006b45
 8006b1c:	08006b5b 	.word	0x08006b5b
 8006b20:	08006b4b 	.word	0x08006b4b
 8006b24:	08006b5b 	.word	0x08006b5b
 8006b28:	08006b5b 	.word	0x08006b5b
 8006b2c:	08006b5b 	.word	0x08006b5b
 8006b30:	08006b53 	.word	0x08006b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b34:	f7fd fed0 	bl	80048d8 <HAL_RCC_GetPCLK1Freq>
 8006b38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b3a:	e014      	b.n	8006b66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b3c:	f7fd fee2 	bl	8004904 <HAL_RCC_GetPCLK2Freq>
 8006b40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b42:	e010      	b.n	8006b66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b44:	4b1a      	ldr	r3, [pc, #104]	@ (8006bb0 <UART_SetConfig+0x5c0>)
 8006b46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b48:	e00d      	b.n	8006b66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b4a:	f7fd fe57 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 8006b4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b50:	e009      	b.n	8006b66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b58:	e005      	b.n	8006b66 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b64:	bf00      	nop
    }

    if (pclk != 0U)
 8006b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d028      	beq.n	8006bbe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b70:	4a10      	ldr	r2, [pc, #64]	@ (8006bb4 <UART_SetConfig+0x5c4>)
 8006b72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b76:	461a      	mov	r2, r3
 8006b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	085b      	lsrs	r3, r3, #1
 8006b84:	441a      	add	r2, r3
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	2b0f      	cmp	r3, #15
 8006b94:	d910      	bls.n	8006bb8 <UART_SetConfig+0x5c8>
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b9c:	d20c      	bcs.n	8006bb8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	60da      	str	r2, [r3, #12]
 8006ba8:	e009      	b.n	8006bbe <UART_SetConfig+0x5ce>
 8006baa:	bf00      	nop
 8006bac:	40008000 	.word	0x40008000
 8006bb0:	00f42400 	.word	0x00f42400
 8006bb4:	080079a8 	.word	0x080079a8
      }
      else
      {
        ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006bda:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3730      	adds	r7, #48	@ 0x30
 8006be2:	46bd      	mov	sp, r7
 8006be4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006be8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf4:	f003 0308 	and.w	r3, r3, #8
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00a      	beq.n	8006c12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00a      	beq.n	8006c34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00a      	beq.n	8006c56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c5a:	f003 0304 	and.w	r3, r3, #4
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00a      	beq.n	8006c78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7c:	f003 0310 	and.w	r3, r3, #16
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00a      	beq.n	8006c9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9e:	f003 0320 	and.w	r3, r3, #32
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00a      	beq.n	8006cbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d01a      	beq.n	8006cfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ce6:	d10a      	bne.n	8006cfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00a      	beq.n	8006d20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	605a      	str	r2, [r3, #4]
  }
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b098      	sub	sp, #96	@ 0x60
 8006d30:	af02      	add	r7, sp, #8
 8006d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d3c:	f7fc fdb0 	bl	80038a0 <HAL_GetTick>
 8006d40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0308 	and.w	r3, r3, #8
 8006d4c:	2b08      	cmp	r3, #8
 8006d4e:	d12f      	bne.n	8006db0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f88e 	bl	8006e80 <UART_WaitOnFlagUntilTimeout>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d022      	beq.n	8006db0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d72:	e853 3f00 	ldrex	r3, [r3]
 8006d76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	461a      	mov	r2, r3
 8006d86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d8a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d90:	e841 2300 	strex	r3, r2, [r1]
 8006d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e6      	bne.n	8006d6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e063      	b.n	8006e78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0304 	and.w	r3, r3, #4
 8006dba:	2b04      	cmp	r3, #4
 8006dbc:	d149      	bne.n	8006e52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dbe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f857 	bl	8006e80 <UART_WaitOnFlagUntilTimeout>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d03c      	beq.n	8006e52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de0:	e853 3f00 	ldrex	r3, [r3]
 8006de4:	623b      	str	r3, [r7, #32]
   return(result);
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006df6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006df8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dfe:	e841 2300 	strex	r3, r2, [r1]
 8006e02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1e6      	bne.n	8006dd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3308      	adds	r3, #8
 8006e10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f023 0301 	bic.w	r3, r3, #1
 8006e20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3308      	adds	r3, #8
 8006e28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e2a:	61fa      	str	r2, [r7, #28]
 8006e2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	69b9      	ldr	r1, [r7, #24]
 8006e30:	69fa      	ldr	r2, [r7, #28]
 8006e32:	e841 2300 	strex	r3, r2, [r1]
 8006e36:	617b      	str	r3, [r7, #20]
   return(result);
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1e5      	bne.n	8006e0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e012      	b.n	8006e78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2220      	movs	r2, #32
 8006e56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3758      	adds	r7, #88	@ 0x58
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	603b      	str	r3, [r7, #0]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e90:	e04f      	b.n	8006f32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e98:	d04b      	beq.n	8006f32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e9a:	f7fc fd01 	bl	80038a0 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d302      	bcc.n	8006eb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e04e      	b.n	8006f52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0304 	and.w	r3, r3, #4
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d037      	beq.n	8006f32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2b80      	cmp	r3, #128	@ 0x80
 8006ec6:	d034      	beq.n	8006f32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b40      	cmp	r3, #64	@ 0x40
 8006ecc:	d031      	beq.n	8006f32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	f003 0308 	and.w	r3, r3, #8
 8006ed8:	2b08      	cmp	r3, #8
 8006eda:	d110      	bne.n	8006efe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 f838 	bl	8006f5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2208      	movs	r2, #8
 8006eee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e029      	b.n	8006f52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f0c:	d111      	bne.n	8006f32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 f81e 	bl	8006f5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e00f      	b.n	8006f52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69da      	ldr	r2, [r3, #28]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	bf0c      	ite	eq
 8006f42:	2301      	moveq	r3, #1
 8006f44:	2300      	movne	r3, #0
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	461a      	mov	r2, r3
 8006f4a:	79fb      	ldrb	r3, [r7, #7]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d0a0      	beq.n	8006e92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b095      	sub	sp, #84	@ 0x54
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f6a:	e853 3f00 	ldrex	r3, [r3]
 8006f6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f80:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f82:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f88:	e841 2300 	strex	r3, r2, [r1]
 8006f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1e6      	bne.n	8006f62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3308      	adds	r3, #8
 8006f9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006faa:	f023 0301 	bic.w	r3, r3, #1
 8006fae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	3308      	adds	r3, #8
 8006fb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fc0:	e841 2300 	strex	r3, r2, [r1]
 8006fc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1e3      	bne.n	8006f94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d118      	bne.n	8007006 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	e853 3f00 	ldrex	r3, [r3]
 8006fe0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	f023 0310 	bic.w	r3, r3, #16
 8006fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ff2:	61bb      	str	r3, [r7, #24]
 8006ff4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff6:	6979      	ldr	r1, [r7, #20]
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e6      	bne.n	8006fd4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2220      	movs	r2, #32
 800700a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800701a:	bf00      	nop
 800701c:	3754      	adds	r7, #84	@ 0x54
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007026:	b480      	push	{r7}
 8007028:	b085      	sub	sp, #20
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007034:	2b01      	cmp	r3, #1
 8007036:	d101      	bne.n	800703c <HAL_UARTEx_DisableFifoMode+0x16>
 8007038:	2302      	movs	r3, #2
 800703a:	e027      	b.n	800708c <HAL_UARTEx_DisableFifoMode+0x66>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2224      	movs	r2, #36	@ 0x24
 8007048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0201 	bic.w	r2, r2, #1
 8007062:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800706a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2220      	movs	r2, #32
 800707e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d101      	bne.n	80070b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80070ac:	2302      	movs	r3, #2
 80070ae:	e02d      	b.n	800710c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2224      	movs	r2, #36	@ 0x24
 80070bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 0201 	bic.w	r2, r2, #1
 80070d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	430a      	orrs	r2, r1
 80070ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f84f 	bl	8007190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2220      	movs	r2, #32
 80070fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007124:	2b01      	cmp	r3, #1
 8007126:	d101      	bne.n	800712c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007128:	2302      	movs	r3, #2
 800712a:	e02d      	b.n	8007188 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2224      	movs	r2, #36	@ 0x24
 8007138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f022 0201 	bic.w	r2, r2, #1
 8007152:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f811 	bl	8007190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2220      	movs	r2, #32
 800717a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800719c:	2b00      	cmp	r3, #0
 800719e:	d108      	bne.n	80071b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80071b0:	e031      	b.n	8007216 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071b2:	2308      	movs	r3, #8
 80071b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071b6:	2308      	movs	r3, #8
 80071b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	0e5b      	lsrs	r3, r3, #25
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	f003 0307 	and.w	r3, r3, #7
 80071c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	0f5b      	lsrs	r3, r3, #29
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f003 0307 	and.w	r3, r3, #7
 80071d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071da:	7bbb      	ldrb	r3, [r7, #14]
 80071dc:	7b3a      	ldrb	r2, [r7, #12]
 80071de:	4911      	ldr	r1, [pc, #68]	@ (8007224 <UARTEx_SetNbDataToProcess+0x94>)
 80071e0:	5c8a      	ldrb	r2, [r1, r2]
 80071e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80071e6:	7b3a      	ldrb	r2, [r7, #12]
 80071e8:	490f      	ldr	r1, [pc, #60]	@ (8007228 <UARTEx_SetNbDataToProcess+0x98>)
 80071ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
 80071fa:	7b7a      	ldrb	r2, [r7, #13]
 80071fc:	4909      	ldr	r1, [pc, #36]	@ (8007224 <UARTEx_SetNbDataToProcess+0x94>)
 80071fe:	5c8a      	ldrb	r2, [r1, r2]
 8007200:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007204:	7b7a      	ldrb	r2, [r7, #13]
 8007206:	4908      	ldr	r1, [pc, #32]	@ (8007228 <UARTEx_SetNbDataToProcess+0x98>)
 8007208:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800720a:	fb93 f3f2 	sdiv	r3, r3, r2
 800720e:	b29a      	uxth	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007216:	bf00      	nop
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	080079c0 	.word	0x080079c0
 8007228:	080079c8 	.word	0x080079c8

0800722c <memset>:
 800722c:	4402      	add	r2, r0
 800722e:	4603      	mov	r3, r0
 8007230:	4293      	cmp	r3, r2
 8007232:	d100      	bne.n	8007236 <memset+0xa>
 8007234:	4770      	bx	lr
 8007236:	f803 1b01 	strb.w	r1, [r3], #1
 800723a:	e7f9      	b.n	8007230 <memset+0x4>

0800723c <__errno>:
 800723c:	4b01      	ldr	r3, [pc, #4]	@ (8007244 <__errno+0x8>)
 800723e:	6818      	ldr	r0, [r3, #0]
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	20000090 	.word	0x20000090

08007248 <__libc_init_array>:
 8007248:	b570      	push	{r4, r5, r6, lr}
 800724a:	4d0d      	ldr	r5, [pc, #52]	@ (8007280 <__libc_init_array+0x38>)
 800724c:	4c0d      	ldr	r4, [pc, #52]	@ (8007284 <__libc_init_array+0x3c>)
 800724e:	1b64      	subs	r4, r4, r5
 8007250:	10a4      	asrs	r4, r4, #2
 8007252:	2600      	movs	r6, #0
 8007254:	42a6      	cmp	r6, r4
 8007256:	d109      	bne.n	800726c <__libc_init_array+0x24>
 8007258:	4d0b      	ldr	r5, [pc, #44]	@ (8007288 <__libc_init_array+0x40>)
 800725a:	4c0c      	ldr	r4, [pc, #48]	@ (800728c <__libc_init_array+0x44>)
 800725c:	f000 fb8a 	bl	8007974 <_init>
 8007260:	1b64      	subs	r4, r4, r5
 8007262:	10a4      	asrs	r4, r4, #2
 8007264:	2600      	movs	r6, #0
 8007266:	42a6      	cmp	r6, r4
 8007268:	d105      	bne.n	8007276 <__libc_init_array+0x2e>
 800726a:	bd70      	pop	{r4, r5, r6, pc}
 800726c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007270:	4798      	blx	r3
 8007272:	3601      	adds	r6, #1
 8007274:	e7ee      	b.n	8007254 <__libc_init_array+0xc>
 8007276:	f855 3b04 	ldr.w	r3, [r5], #4
 800727a:	4798      	blx	r3
 800727c:	3601      	adds	r6, #1
 800727e:	e7f2      	b.n	8007266 <__libc_init_array+0x1e>
 8007280:	08007a48 	.word	0x08007a48
 8007284:	08007a48 	.word	0x08007a48
 8007288:	08007a48 	.word	0x08007a48
 800728c:	08007a4c 	.word	0x08007a4c

08007290 <atan2>:
 8007290:	f000 b802 	b.w	8007298 <__ieee754_atan2>
 8007294:	0000      	movs	r0, r0
	...

08007298 <__ieee754_atan2>:
 8007298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800729c:	ec57 6b11 	vmov	r6, r7, d1
 80072a0:	4273      	negs	r3, r6
 80072a2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8007420 <__ieee754_atan2+0x188>
 80072a6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80072aa:	4333      	orrs	r3, r6
 80072ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80072b0:	4543      	cmp	r3, r8
 80072b2:	ec51 0b10 	vmov	r0, r1, d0
 80072b6:	4635      	mov	r5, r6
 80072b8:	d809      	bhi.n	80072ce <__ieee754_atan2+0x36>
 80072ba:	4244      	negs	r4, r0
 80072bc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80072c0:	4304      	orrs	r4, r0
 80072c2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80072c6:	4544      	cmp	r4, r8
 80072c8:	468e      	mov	lr, r1
 80072ca:	4681      	mov	r9, r0
 80072cc:	d907      	bls.n	80072de <__ieee754_atan2+0x46>
 80072ce:	4632      	mov	r2, r6
 80072d0:	463b      	mov	r3, r7
 80072d2:	f7f8 ffa7 	bl	8000224 <__adddf3>
 80072d6:	ec41 0b10 	vmov	d0, r0, r1
 80072da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072de:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80072e2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80072e6:	4334      	orrs	r4, r6
 80072e8:	d103      	bne.n	80072f2 <__ieee754_atan2+0x5a>
 80072ea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072ee:	f000 b8c7 	b.w	8007480 <atan>
 80072f2:	17bc      	asrs	r4, r7, #30
 80072f4:	f004 0402 	and.w	r4, r4, #2
 80072f8:	ea53 0909 	orrs.w	r9, r3, r9
 80072fc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007300:	d107      	bne.n	8007312 <__ieee754_atan2+0x7a>
 8007302:	2c02      	cmp	r4, #2
 8007304:	d05f      	beq.n	80073c6 <__ieee754_atan2+0x12e>
 8007306:	2c03      	cmp	r4, #3
 8007308:	d1e5      	bne.n	80072d6 <__ieee754_atan2+0x3e>
 800730a:	a141      	add	r1, pc, #260	@ (adr r1, 8007410 <__ieee754_atan2+0x178>)
 800730c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007310:	e7e1      	b.n	80072d6 <__ieee754_atan2+0x3e>
 8007312:	4315      	orrs	r5, r2
 8007314:	d106      	bne.n	8007324 <__ieee754_atan2+0x8c>
 8007316:	f1be 0f00 	cmp.w	lr, #0
 800731a:	da5f      	bge.n	80073dc <__ieee754_atan2+0x144>
 800731c:	a13e      	add	r1, pc, #248	@ (adr r1, 8007418 <__ieee754_atan2+0x180>)
 800731e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007322:	e7d8      	b.n	80072d6 <__ieee754_atan2+0x3e>
 8007324:	4542      	cmp	r2, r8
 8007326:	d10f      	bne.n	8007348 <__ieee754_atan2+0xb0>
 8007328:	4293      	cmp	r3, r2
 800732a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800732e:	d107      	bne.n	8007340 <__ieee754_atan2+0xa8>
 8007330:	2c02      	cmp	r4, #2
 8007332:	d84c      	bhi.n	80073ce <__ieee754_atan2+0x136>
 8007334:	4b34      	ldr	r3, [pc, #208]	@ (8007408 <__ieee754_atan2+0x170>)
 8007336:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800733a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800733e:	e7ca      	b.n	80072d6 <__ieee754_atan2+0x3e>
 8007340:	2c02      	cmp	r4, #2
 8007342:	d848      	bhi.n	80073d6 <__ieee754_atan2+0x13e>
 8007344:	4b31      	ldr	r3, [pc, #196]	@ (800740c <__ieee754_atan2+0x174>)
 8007346:	e7f6      	b.n	8007336 <__ieee754_atan2+0x9e>
 8007348:	4543      	cmp	r3, r8
 800734a:	d0e4      	beq.n	8007316 <__ieee754_atan2+0x7e>
 800734c:	1a9b      	subs	r3, r3, r2
 800734e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8007352:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007356:	da1e      	bge.n	8007396 <__ieee754_atan2+0xfe>
 8007358:	2f00      	cmp	r7, #0
 800735a:	da01      	bge.n	8007360 <__ieee754_atan2+0xc8>
 800735c:	323c      	adds	r2, #60	@ 0x3c
 800735e:	db1e      	blt.n	800739e <__ieee754_atan2+0x106>
 8007360:	4632      	mov	r2, r6
 8007362:	463b      	mov	r3, r7
 8007364:	f7f9 fa3e 	bl	80007e4 <__aeabi_ddiv>
 8007368:	ec41 0b10 	vmov	d0, r0, r1
 800736c:	f000 fa20 	bl	80077b0 <fabs>
 8007370:	f000 f886 	bl	8007480 <atan>
 8007374:	ec51 0b10 	vmov	r0, r1, d0
 8007378:	2c01      	cmp	r4, #1
 800737a:	d013      	beq.n	80073a4 <__ieee754_atan2+0x10c>
 800737c:	2c02      	cmp	r4, #2
 800737e:	d015      	beq.n	80073ac <__ieee754_atan2+0x114>
 8007380:	2c00      	cmp	r4, #0
 8007382:	d0a8      	beq.n	80072d6 <__ieee754_atan2+0x3e>
 8007384:	a318      	add	r3, pc, #96	@ (adr r3, 80073e8 <__ieee754_atan2+0x150>)
 8007386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738a:	f7f8 ff49 	bl	8000220 <__aeabi_dsub>
 800738e:	a318      	add	r3, pc, #96	@ (adr r3, 80073f0 <__ieee754_atan2+0x158>)
 8007390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007394:	e014      	b.n	80073c0 <__ieee754_atan2+0x128>
 8007396:	a118      	add	r1, pc, #96	@ (adr r1, 80073f8 <__ieee754_atan2+0x160>)
 8007398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800739c:	e7ec      	b.n	8007378 <__ieee754_atan2+0xe0>
 800739e:	2000      	movs	r0, #0
 80073a0:	2100      	movs	r1, #0
 80073a2:	e7e9      	b.n	8007378 <__ieee754_atan2+0xe0>
 80073a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80073a8:	4619      	mov	r1, r3
 80073aa:	e794      	b.n	80072d6 <__ieee754_atan2+0x3e>
 80073ac:	a30e      	add	r3, pc, #56	@ (adr r3, 80073e8 <__ieee754_atan2+0x150>)
 80073ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b2:	f7f8 ff35 	bl	8000220 <__aeabi_dsub>
 80073b6:	4602      	mov	r2, r0
 80073b8:	460b      	mov	r3, r1
 80073ba:	a10d      	add	r1, pc, #52	@ (adr r1, 80073f0 <__ieee754_atan2+0x158>)
 80073bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073c0:	f7f8 ff2e 	bl	8000220 <__aeabi_dsub>
 80073c4:	e787      	b.n	80072d6 <__ieee754_atan2+0x3e>
 80073c6:	a10a      	add	r1, pc, #40	@ (adr r1, 80073f0 <__ieee754_atan2+0x158>)
 80073c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073cc:	e783      	b.n	80072d6 <__ieee754_atan2+0x3e>
 80073ce:	a10c      	add	r1, pc, #48	@ (adr r1, 8007400 <__ieee754_atan2+0x168>)
 80073d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073d4:	e77f      	b.n	80072d6 <__ieee754_atan2+0x3e>
 80073d6:	2000      	movs	r0, #0
 80073d8:	2100      	movs	r1, #0
 80073da:	e77c      	b.n	80072d6 <__ieee754_atan2+0x3e>
 80073dc:	a106      	add	r1, pc, #24	@ (adr r1, 80073f8 <__ieee754_atan2+0x160>)
 80073de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073e2:	e778      	b.n	80072d6 <__ieee754_atan2+0x3e>
 80073e4:	f3af 8000 	nop.w
 80073e8:	33145c07 	.word	0x33145c07
 80073ec:	3ca1a626 	.word	0x3ca1a626
 80073f0:	54442d18 	.word	0x54442d18
 80073f4:	400921fb 	.word	0x400921fb
 80073f8:	54442d18 	.word	0x54442d18
 80073fc:	3ff921fb 	.word	0x3ff921fb
 8007400:	54442d18 	.word	0x54442d18
 8007404:	3fe921fb 	.word	0x3fe921fb
 8007408:	080079e8 	.word	0x080079e8
 800740c:	080079d0 	.word	0x080079d0
 8007410:	54442d18 	.word	0x54442d18
 8007414:	c00921fb 	.word	0xc00921fb
 8007418:	54442d18 	.word	0x54442d18
 800741c:	bff921fb 	.word	0xbff921fb
 8007420:	7ff00000 	.word	0x7ff00000

08007424 <sqrt>:
 8007424:	b538      	push	{r3, r4, r5, lr}
 8007426:	ed2d 8b02 	vpush	{d8}
 800742a:	ec55 4b10 	vmov	r4, r5, d0
 800742e:	f000 f9c7 	bl	80077c0 <__ieee754_sqrt>
 8007432:	4622      	mov	r2, r4
 8007434:	462b      	mov	r3, r5
 8007436:	4620      	mov	r0, r4
 8007438:	4629      	mov	r1, r5
 800743a:	eeb0 8a40 	vmov.f32	s16, s0
 800743e:	eef0 8a60 	vmov.f32	s17, s1
 8007442:	f7f9 fb3f 	bl	8000ac4 <__aeabi_dcmpun>
 8007446:	b990      	cbnz	r0, 800746e <sqrt+0x4a>
 8007448:	2200      	movs	r2, #0
 800744a:	2300      	movs	r3, #0
 800744c:	4620      	mov	r0, r4
 800744e:	4629      	mov	r1, r5
 8007450:	f7f9 fb10 	bl	8000a74 <__aeabi_dcmplt>
 8007454:	b158      	cbz	r0, 800746e <sqrt+0x4a>
 8007456:	f7ff fef1 	bl	800723c <__errno>
 800745a:	2321      	movs	r3, #33	@ 0x21
 800745c:	6003      	str	r3, [r0, #0]
 800745e:	2200      	movs	r2, #0
 8007460:	2300      	movs	r3, #0
 8007462:	4610      	mov	r0, r2
 8007464:	4619      	mov	r1, r3
 8007466:	f7f9 f9bd 	bl	80007e4 <__aeabi_ddiv>
 800746a:	ec41 0b18 	vmov	d8, r0, r1
 800746e:	eeb0 0a48 	vmov.f32	s0, s16
 8007472:	eef0 0a68 	vmov.f32	s1, s17
 8007476:	ecbd 8b02 	vpop	{d8}
 800747a:	bd38      	pop	{r3, r4, r5, pc}
 800747c:	0000      	movs	r0, r0
	...

08007480 <atan>:
 8007480:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007484:	ec55 4b10 	vmov	r4, r5, d0
 8007488:	4bbf      	ldr	r3, [pc, #764]	@ (8007788 <atan+0x308>)
 800748a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800748e:	429e      	cmp	r6, r3
 8007490:	46ab      	mov	fp, r5
 8007492:	d918      	bls.n	80074c6 <atan+0x46>
 8007494:	4bbd      	ldr	r3, [pc, #756]	@ (800778c <atan+0x30c>)
 8007496:	429e      	cmp	r6, r3
 8007498:	d801      	bhi.n	800749e <atan+0x1e>
 800749a:	d109      	bne.n	80074b0 <atan+0x30>
 800749c:	b144      	cbz	r4, 80074b0 <atan+0x30>
 800749e:	4622      	mov	r2, r4
 80074a0:	462b      	mov	r3, r5
 80074a2:	4620      	mov	r0, r4
 80074a4:	4629      	mov	r1, r5
 80074a6:	f7f8 febd 	bl	8000224 <__adddf3>
 80074aa:	4604      	mov	r4, r0
 80074ac:	460d      	mov	r5, r1
 80074ae:	e006      	b.n	80074be <atan+0x3e>
 80074b0:	f1bb 0f00 	cmp.w	fp, #0
 80074b4:	f340 812b 	ble.w	800770e <atan+0x28e>
 80074b8:	a597      	add	r5, pc, #604	@ (adr r5, 8007718 <atan+0x298>)
 80074ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80074be:	ec45 4b10 	vmov	d0, r4, r5
 80074c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c6:	4bb2      	ldr	r3, [pc, #712]	@ (8007790 <atan+0x310>)
 80074c8:	429e      	cmp	r6, r3
 80074ca:	d813      	bhi.n	80074f4 <atan+0x74>
 80074cc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80074d0:	429e      	cmp	r6, r3
 80074d2:	d80c      	bhi.n	80074ee <atan+0x6e>
 80074d4:	a392      	add	r3, pc, #584	@ (adr r3, 8007720 <atan+0x2a0>)
 80074d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074da:	4620      	mov	r0, r4
 80074dc:	4629      	mov	r1, r5
 80074de:	f7f8 fea1 	bl	8000224 <__adddf3>
 80074e2:	4bac      	ldr	r3, [pc, #688]	@ (8007794 <atan+0x314>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	f7f9 fae3 	bl	8000ab0 <__aeabi_dcmpgt>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	d1e7      	bne.n	80074be <atan+0x3e>
 80074ee:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80074f2:	e029      	b.n	8007548 <atan+0xc8>
 80074f4:	f000 f95c 	bl	80077b0 <fabs>
 80074f8:	4ba7      	ldr	r3, [pc, #668]	@ (8007798 <atan+0x318>)
 80074fa:	429e      	cmp	r6, r3
 80074fc:	ec55 4b10 	vmov	r4, r5, d0
 8007500:	f200 80bc 	bhi.w	800767c <atan+0x1fc>
 8007504:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007508:	429e      	cmp	r6, r3
 800750a:	f200 809e 	bhi.w	800764a <atan+0x1ca>
 800750e:	4622      	mov	r2, r4
 8007510:	462b      	mov	r3, r5
 8007512:	4620      	mov	r0, r4
 8007514:	4629      	mov	r1, r5
 8007516:	f7f8 fe85 	bl	8000224 <__adddf3>
 800751a:	4b9e      	ldr	r3, [pc, #632]	@ (8007794 <atan+0x314>)
 800751c:	2200      	movs	r2, #0
 800751e:	f7f8 fe7f 	bl	8000220 <__aeabi_dsub>
 8007522:	2200      	movs	r2, #0
 8007524:	4606      	mov	r6, r0
 8007526:	460f      	mov	r7, r1
 8007528:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800752c:	4620      	mov	r0, r4
 800752e:	4629      	mov	r1, r5
 8007530:	f7f8 fe78 	bl	8000224 <__adddf3>
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	4630      	mov	r0, r6
 800753a:	4639      	mov	r1, r7
 800753c:	f7f9 f952 	bl	80007e4 <__aeabi_ddiv>
 8007540:	f04f 0a00 	mov.w	sl, #0
 8007544:	4604      	mov	r4, r0
 8007546:	460d      	mov	r5, r1
 8007548:	4622      	mov	r2, r4
 800754a:	462b      	mov	r3, r5
 800754c:	4620      	mov	r0, r4
 800754e:	4629      	mov	r1, r5
 8007550:	f7f9 f81e 	bl	8000590 <__aeabi_dmul>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4680      	mov	r8, r0
 800755a:	4689      	mov	r9, r1
 800755c:	f7f9 f818 	bl	8000590 <__aeabi_dmul>
 8007560:	a371      	add	r3, pc, #452	@ (adr r3, 8007728 <atan+0x2a8>)
 8007562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007566:	4606      	mov	r6, r0
 8007568:	460f      	mov	r7, r1
 800756a:	f7f9 f811 	bl	8000590 <__aeabi_dmul>
 800756e:	a370      	add	r3, pc, #448	@ (adr r3, 8007730 <atan+0x2b0>)
 8007570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007574:	f7f8 fe56 	bl	8000224 <__adddf3>
 8007578:	4632      	mov	r2, r6
 800757a:	463b      	mov	r3, r7
 800757c:	f7f9 f808 	bl	8000590 <__aeabi_dmul>
 8007580:	a36d      	add	r3, pc, #436	@ (adr r3, 8007738 <atan+0x2b8>)
 8007582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007586:	f7f8 fe4d 	bl	8000224 <__adddf3>
 800758a:	4632      	mov	r2, r6
 800758c:	463b      	mov	r3, r7
 800758e:	f7f8 ffff 	bl	8000590 <__aeabi_dmul>
 8007592:	a36b      	add	r3, pc, #428	@ (adr r3, 8007740 <atan+0x2c0>)
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	f7f8 fe44 	bl	8000224 <__adddf3>
 800759c:	4632      	mov	r2, r6
 800759e:	463b      	mov	r3, r7
 80075a0:	f7f8 fff6 	bl	8000590 <__aeabi_dmul>
 80075a4:	a368      	add	r3, pc, #416	@ (adr r3, 8007748 <atan+0x2c8>)
 80075a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075aa:	f7f8 fe3b 	bl	8000224 <__adddf3>
 80075ae:	4632      	mov	r2, r6
 80075b0:	463b      	mov	r3, r7
 80075b2:	f7f8 ffed 	bl	8000590 <__aeabi_dmul>
 80075b6:	a366      	add	r3, pc, #408	@ (adr r3, 8007750 <atan+0x2d0>)
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	f7f8 fe32 	bl	8000224 <__adddf3>
 80075c0:	4642      	mov	r2, r8
 80075c2:	464b      	mov	r3, r9
 80075c4:	f7f8 ffe4 	bl	8000590 <__aeabi_dmul>
 80075c8:	a363      	add	r3, pc, #396	@ (adr r3, 8007758 <atan+0x2d8>)
 80075ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ce:	4680      	mov	r8, r0
 80075d0:	4689      	mov	r9, r1
 80075d2:	4630      	mov	r0, r6
 80075d4:	4639      	mov	r1, r7
 80075d6:	f7f8 ffdb 	bl	8000590 <__aeabi_dmul>
 80075da:	a361      	add	r3, pc, #388	@ (adr r3, 8007760 <atan+0x2e0>)
 80075dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e0:	f7f8 fe1e 	bl	8000220 <__aeabi_dsub>
 80075e4:	4632      	mov	r2, r6
 80075e6:	463b      	mov	r3, r7
 80075e8:	f7f8 ffd2 	bl	8000590 <__aeabi_dmul>
 80075ec:	a35e      	add	r3, pc, #376	@ (adr r3, 8007768 <atan+0x2e8>)
 80075ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f2:	f7f8 fe15 	bl	8000220 <__aeabi_dsub>
 80075f6:	4632      	mov	r2, r6
 80075f8:	463b      	mov	r3, r7
 80075fa:	f7f8 ffc9 	bl	8000590 <__aeabi_dmul>
 80075fe:	a35c      	add	r3, pc, #368	@ (adr r3, 8007770 <atan+0x2f0>)
 8007600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007604:	f7f8 fe0c 	bl	8000220 <__aeabi_dsub>
 8007608:	4632      	mov	r2, r6
 800760a:	463b      	mov	r3, r7
 800760c:	f7f8 ffc0 	bl	8000590 <__aeabi_dmul>
 8007610:	a359      	add	r3, pc, #356	@ (adr r3, 8007778 <atan+0x2f8>)
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	f7f8 fe03 	bl	8000220 <__aeabi_dsub>
 800761a:	4632      	mov	r2, r6
 800761c:	463b      	mov	r3, r7
 800761e:	f7f8 ffb7 	bl	8000590 <__aeabi_dmul>
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	4640      	mov	r0, r8
 8007628:	4649      	mov	r1, r9
 800762a:	f7f8 fdfb 	bl	8000224 <__adddf3>
 800762e:	4622      	mov	r2, r4
 8007630:	462b      	mov	r3, r5
 8007632:	f7f8 ffad 	bl	8000590 <__aeabi_dmul>
 8007636:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800763a:	4602      	mov	r2, r0
 800763c:	460b      	mov	r3, r1
 800763e:	d148      	bne.n	80076d2 <atan+0x252>
 8007640:	4620      	mov	r0, r4
 8007642:	4629      	mov	r1, r5
 8007644:	f7f8 fdec 	bl	8000220 <__aeabi_dsub>
 8007648:	e72f      	b.n	80074aa <atan+0x2a>
 800764a:	4b52      	ldr	r3, [pc, #328]	@ (8007794 <atan+0x314>)
 800764c:	2200      	movs	r2, #0
 800764e:	4620      	mov	r0, r4
 8007650:	4629      	mov	r1, r5
 8007652:	f7f8 fde5 	bl	8000220 <__aeabi_dsub>
 8007656:	4b4f      	ldr	r3, [pc, #316]	@ (8007794 <atan+0x314>)
 8007658:	4606      	mov	r6, r0
 800765a:	460f      	mov	r7, r1
 800765c:	2200      	movs	r2, #0
 800765e:	4620      	mov	r0, r4
 8007660:	4629      	mov	r1, r5
 8007662:	f7f8 fddf 	bl	8000224 <__adddf3>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	4630      	mov	r0, r6
 800766c:	4639      	mov	r1, r7
 800766e:	f7f9 f8b9 	bl	80007e4 <__aeabi_ddiv>
 8007672:	f04f 0a01 	mov.w	sl, #1
 8007676:	4604      	mov	r4, r0
 8007678:	460d      	mov	r5, r1
 800767a:	e765      	b.n	8007548 <atan+0xc8>
 800767c:	4b47      	ldr	r3, [pc, #284]	@ (800779c <atan+0x31c>)
 800767e:	429e      	cmp	r6, r3
 8007680:	d21c      	bcs.n	80076bc <atan+0x23c>
 8007682:	4b47      	ldr	r3, [pc, #284]	@ (80077a0 <atan+0x320>)
 8007684:	2200      	movs	r2, #0
 8007686:	4620      	mov	r0, r4
 8007688:	4629      	mov	r1, r5
 800768a:	f7f8 fdc9 	bl	8000220 <__aeabi_dsub>
 800768e:	4b44      	ldr	r3, [pc, #272]	@ (80077a0 <atan+0x320>)
 8007690:	4606      	mov	r6, r0
 8007692:	460f      	mov	r7, r1
 8007694:	2200      	movs	r2, #0
 8007696:	4620      	mov	r0, r4
 8007698:	4629      	mov	r1, r5
 800769a:	f7f8 ff79 	bl	8000590 <__aeabi_dmul>
 800769e:	4b3d      	ldr	r3, [pc, #244]	@ (8007794 <atan+0x314>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	f7f8 fdbf 	bl	8000224 <__adddf3>
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	4630      	mov	r0, r6
 80076ac:	4639      	mov	r1, r7
 80076ae:	f7f9 f899 	bl	80007e4 <__aeabi_ddiv>
 80076b2:	f04f 0a02 	mov.w	sl, #2
 80076b6:	4604      	mov	r4, r0
 80076b8:	460d      	mov	r5, r1
 80076ba:	e745      	b.n	8007548 <atan+0xc8>
 80076bc:	4622      	mov	r2, r4
 80076be:	462b      	mov	r3, r5
 80076c0:	4938      	ldr	r1, [pc, #224]	@ (80077a4 <atan+0x324>)
 80076c2:	2000      	movs	r0, #0
 80076c4:	f7f9 f88e 	bl	80007e4 <__aeabi_ddiv>
 80076c8:	f04f 0a03 	mov.w	sl, #3
 80076cc:	4604      	mov	r4, r0
 80076ce:	460d      	mov	r5, r1
 80076d0:	e73a      	b.n	8007548 <atan+0xc8>
 80076d2:	4b35      	ldr	r3, [pc, #212]	@ (80077a8 <atan+0x328>)
 80076d4:	4e35      	ldr	r6, [pc, #212]	@ (80077ac <atan+0x32c>)
 80076d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80076da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076de:	f7f8 fd9f 	bl	8000220 <__aeabi_dsub>
 80076e2:	4622      	mov	r2, r4
 80076e4:	462b      	mov	r3, r5
 80076e6:	f7f8 fd9b 	bl	8000220 <__aeabi_dsub>
 80076ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80076ee:	4602      	mov	r2, r0
 80076f0:	460b      	mov	r3, r1
 80076f2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80076f6:	f7f8 fd93 	bl	8000220 <__aeabi_dsub>
 80076fa:	f1bb 0f00 	cmp.w	fp, #0
 80076fe:	4604      	mov	r4, r0
 8007700:	460d      	mov	r5, r1
 8007702:	f6bf aedc 	bge.w	80074be <atan+0x3e>
 8007706:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800770a:	461d      	mov	r5, r3
 800770c:	e6d7      	b.n	80074be <atan+0x3e>
 800770e:	a51c      	add	r5, pc, #112	@ (adr r5, 8007780 <atan+0x300>)
 8007710:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007714:	e6d3      	b.n	80074be <atan+0x3e>
 8007716:	bf00      	nop
 8007718:	54442d18 	.word	0x54442d18
 800771c:	3ff921fb 	.word	0x3ff921fb
 8007720:	8800759c 	.word	0x8800759c
 8007724:	7e37e43c 	.word	0x7e37e43c
 8007728:	e322da11 	.word	0xe322da11
 800772c:	3f90ad3a 	.word	0x3f90ad3a
 8007730:	24760deb 	.word	0x24760deb
 8007734:	3fa97b4b 	.word	0x3fa97b4b
 8007738:	a0d03d51 	.word	0xa0d03d51
 800773c:	3fb10d66 	.word	0x3fb10d66
 8007740:	c54c206e 	.word	0xc54c206e
 8007744:	3fb745cd 	.word	0x3fb745cd
 8007748:	920083ff 	.word	0x920083ff
 800774c:	3fc24924 	.word	0x3fc24924
 8007750:	5555550d 	.word	0x5555550d
 8007754:	3fd55555 	.word	0x3fd55555
 8007758:	2c6a6c2f 	.word	0x2c6a6c2f
 800775c:	bfa2b444 	.word	0xbfa2b444
 8007760:	52defd9a 	.word	0x52defd9a
 8007764:	3fadde2d 	.word	0x3fadde2d
 8007768:	af749a6d 	.word	0xaf749a6d
 800776c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007770:	fe231671 	.word	0xfe231671
 8007774:	3fbc71c6 	.word	0x3fbc71c6
 8007778:	9998ebc4 	.word	0x9998ebc4
 800777c:	3fc99999 	.word	0x3fc99999
 8007780:	54442d18 	.word	0x54442d18
 8007784:	bff921fb 	.word	0xbff921fb
 8007788:	440fffff 	.word	0x440fffff
 800778c:	7ff00000 	.word	0x7ff00000
 8007790:	3fdbffff 	.word	0x3fdbffff
 8007794:	3ff00000 	.word	0x3ff00000
 8007798:	3ff2ffff 	.word	0x3ff2ffff
 800779c:	40038000 	.word	0x40038000
 80077a0:	3ff80000 	.word	0x3ff80000
 80077a4:	bff00000 	.word	0xbff00000
 80077a8:	08007a00 	.word	0x08007a00
 80077ac:	08007a20 	.word	0x08007a20

080077b0 <fabs>:
 80077b0:	ec51 0b10 	vmov	r0, r1, d0
 80077b4:	4602      	mov	r2, r0
 80077b6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80077ba:	ec43 2b10 	vmov	d0, r2, r3
 80077be:	4770      	bx	lr

080077c0 <__ieee754_sqrt>:
 80077c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c4:	4a68      	ldr	r2, [pc, #416]	@ (8007968 <__ieee754_sqrt+0x1a8>)
 80077c6:	ec55 4b10 	vmov	r4, r5, d0
 80077ca:	43aa      	bics	r2, r5
 80077cc:	462b      	mov	r3, r5
 80077ce:	4621      	mov	r1, r4
 80077d0:	d110      	bne.n	80077f4 <__ieee754_sqrt+0x34>
 80077d2:	4622      	mov	r2, r4
 80077d4:	4620      	mov	r0, r4
 80077d6:	4629      	mov	r1, r5
 80077d8:	f7f8 feda 	bl	8000590 <__aeabi_dmul>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4620      	mov	r0, r4
 80077e2:	4629      	mov	r1, r5
 80077e4:	f7f8 fd1e 	bl	8000224 <__adddf3>
 80077e8:	4604      	mov	r4, r0
 80077ea:	460d      	mov	r5, r1
 80077ec:	ec45 4b10 	vmov	d0, r4, r5
 80077f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f4:	2d00      	cmp	r5, #0
 80077f6:	dc0e      	bgt.n	8007816 <__ieee754_sqrt+0x56>
 80077f8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80077fc:	4322      	orrs	r2, r4
 80077fe:	d0f5      	beq.n	80077ec <__ieee754_sqrt+0x2c>
 8007800:	b19d      	cbz	r5, 800782a <__ieee754_sqrt+0x6a>
 8007802:	4622      	mov	r2, r4
 8007804:	4620      	mov	r0, r4
 8007806:	4629      	mov	r1, r5
 8007808:	f7f8 fd0a 	bl	8000220 <__aeabi_dsub>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	f7f8 ffe8 	bl	80007e4 <__aeabi_ddiv>
 8007814:	e7e8      	b.n	80077e8 <__ieee754_sqrt+0x28>
 8007816:	152a      	asrs	r2, r5, #20
 8007818:	d115      	bne.n	8007846 <__ieee754_sqrt+0x86>
 800781a:	2000      	movs	r0, #0
 800781c:	e009      	b.n	8007832 <__ieee754_sqrt+0x72>
 800781e:	0acb      	lsrs	r3, r1, #11
 8007820:	3a15      	subs	r2, #21
 8007822:	0549      	lsls	r1, r1, #21
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0fa      	beq.n	800781e <__ieee754_sqrt+0x5e>
 8007828:	e7f7      	b.n	800781a <__ieee754_sqrt+0x5a>
 800782a:	462a      	mov	r2, r5
 800782c:	e7fa      	b.n	8007824 <__ieee754_sqrt+0x64>
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	3001      	adds	r0, #1
 8007832:	02dc      	lsls	r4, r3, #11
 8007834:	d5fb      	bpl.n	800782e <__ieee754_sqrt+0x6e>
 8007836:	1e44      	subs	r4, r0, #1
 8007838:	1b12      	subs	r2, r2, r4
 800783a:	f1c0 0420 	rsb	r4, r0, #32
 800783e:	fa21 f404 	lsr.w	r4, r1, r4
 8007842:	4323      	orrs	r3, r4
 8007844:	4081      	lsls	r1, r0
 8007846:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800784a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800784e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007852:	07d2      	lsls	r2, r2, #31
 8007854:	bf5c      	itt	pl
 8007856:	005b      	lslpl	r3, r3, #1
 8007858:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800785c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007860:	bf58      	it	pl
 8007862:	0049      	lslpl	r1, r1, #1
 8007864:	2600      	movs	r6, #0
 8007866:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800786a:	106d      	asrs	r5, r5, #1
 800786c:	0049      	lsls	r1, r1, #1
 800786e:	2016      	movs	r0, #22
 8007870:	4632      	mov	r2, r6
 8007872:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007876:	1917      	adds	r7, r2, r4
 8007878:	429f      	cmp	r7, r3
 800787a:	bfde      	ittt	le
 800787c:	193a      	addle	r2, r7, r4
 800787e:	1bdb      	suble	r3, r3, r7
 8007880:	1936      	addle	r6, r6, r4
 8007882:	0fcf      	lsrs	r7, r1, #31
 8007884:	3801      	subs	r0, #1
 8007886:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800788a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800788e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007892:	d1f0      	bne.n	8007876 <__ieee754_sqrt+0xb6>
 8007894:	4604      	mov	r4, r0
 8007896:	2720      	movs	r7, #32
 8007898:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800789c:	429a      	cmp	r2, r3
 800789e:	eb00 0e0c 	add.w	lr, r0, ip
 80078a2:	db02      	blt.n	80078aa <__ieee754_sqrt+0xea>
 80078a4:	d113      	bne.n	80078ce <__ieee754_sqrt+0x10e>
 80078a6:	458e      	cmp	lr, r1
 80078a8:	d811      	bhi.n	80078ce <__ieee754_sqrt+0x10e>
 80078aa:	f1be 0f00 	cmp.w	lr, #0
 80078ae:	eb0e 000c 	add.w	r0, lr, ip
 80078b2:	da42      	bge.n	800793a <__ieee754_sqrt+0x17a>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	db40      	blt.n	800793a <__ieee754_sqrt+0x17a>
 80078b8:	f102 0801 	add.w	r8, r2, #1
 80078bc:	1a9b      	subs	r3, r3, r2
 80078be:	458e      	cmp	lr, r1
 80078c0:	bf88      	it	hi
 80078c2:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80078c6:	eba1 010e 	sub.w	r1, r1, lr
 80078ca:	4464      	add	r4, ip
 80078cc:	4642      	mov	r2, r8
 80078ce:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80078d2:	3f01      	subs	r7, #1
 80078d4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80078d8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80078dc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80078e0:	d1dc      	bne.n	800789c <__ieee754_sqrt+0xdc>
 80078e2:	4319      	orrs	r1, r3
 80078e4:	d01b      	beq.n	800791e <__ieee754_sqrt+0x15e>
 80078e6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800796c <__ieee754_sqrt+0x1ac>
 80078ea:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007970 <__ieee754_sqrt+0x1b0>
 80078ee:	e9da 0100 	ldrd	r0, r1, [sl]
 80078f2:	e9db 2300 	ldrd	r2, r3, [fp]
 80078f6:	f7f8 fc93 	bl	8000220 <__aeabi_dsub>
 80078fa:	e9da 8900 	ldrd	r8, r9, [sl]
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	4640      	mov	r0, r8
 8007904:	4649      	mov	r1, r9
 8007906:	f7f9 f8bf 	bl	8000a88 <__aeabi_dcmple>
 800790a:	b140      	cbz	r0, 800791e <__ieee754_sqrt+0x15e>
 800790c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8007910:	e9da 0100 	ldrd	r0, r1, [sl]
 8007914:	e9db 2300 	ldrd	r2, r3, [fp]
 8007918:	d111      	bne.n	800793e <__ieee754_sqrt+0x17e>
 800791a:	3601      	adds	r6, #1
 800791c:	463c      	mov	r4, r7
 800791e:	1072      	asrs	r2, r6, #1
 8007920:	0863      	lsrs	r3, r4, #1
 8007922:	07f1      	lsls	r1, r6, #31
 8007924:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007928:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800792c:	bf48      	it	mi
 800792e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8007932:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8007936:	4618      	mov	r0, r3
 8007938:	e756      	b.n	80077e8 <__ieee754_sqrt+0x28>
 800793a:	4690      	mov	r8, r2
 800793c:	e7be      	b.n	80078bc <__ieee754_sqrt+0xfc>
 800793e:	f7f8 fc71 	bl	8000224 <__adddf3>
 8007942:	e9da 8900 	ldrd	r8, r9, [sl]
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	4640      	mov	r0, r8
 800794c:	4649      	mov	r1, r9
 800794e:	f7f9 f891 	bl	8000a74 <__aeabi_dcmplt>
 8007952:	b120      	cbz	r0, 800795e <__ieee754_sqrt+0x19e>
 8007954:	1ca0      	adds	r0, r4, #2
 8007956:	bf08      	it	eq
 8007958:	3601      	addeq	r6, #1
 800795a:	3402      	adds	r4, #2
 800795c:	e7df      	b.n	800791e <__ieee754_sqrt+0x15e>
 800795e:	1c63      	adds	r3, r4, #1
 8007960:	f023 0401 	bic.w	r4, r3, #1
 8007964:	e7db      	b.n	800791e <__ieee754_sqrt+0x15e>
 8007966:	bf00      	nop
 8007968:	7ff00000 	.word	0x7ff00000
 800796c:	200000e8 	.word	0x200000e8
 8007970:	200000e0 	.word	0x200000e0

08007974 <_init>:
 8007974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007976:	bf00      	nop
 8007978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800797a:	bc08      	pop	{r3}
 800797c:	469e      	mov	lr, r3
 800797e:	4770      	bx	lr

08007980 <_fini>:
 8007980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007982:	bf00      	nop
 8007984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007986:	bc08      	pop	{r3}
 8007988:	469e      	mov	lr, r3
 800798a:	4770      	bx	lr
