
jason_fork_lift_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005be0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005db8  08005db8  00006db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005df8  08005df8  00007090  2**0
                  CONTENTS
  4 .ARM          00000008  08005df8  08005df8  00006df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e00  08005e00  00007090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e00  08005e00  00006e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e04  08005e04  00006e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08005e08  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  20000090  08005e98  00007090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08005e98  000073b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013494  00000000  00000000  000070c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d0  00000000  00000000  0001a554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0001ce28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cee  00000000  00000000  0001dec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020010  00000000  00000000  0001ebae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148e2  00000000  00000000  0003ebbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da08c  00000000  00000000  000534a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d52c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046c0  00000000  00000000  0012d570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00131c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000090 	.word	0x20000090
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005da0 	.word	0x08005da0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000094 	.word	0x20000094
 8000214:	08005da0 	.word	0x08005da0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2f>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a4c:	bf24      	itt	cs
 8000a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a56:	d90d      	bls.n	8000a74 <__aeabi_d2f+0x30>
 8000a58:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a64:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a78:	d121      	bne.n	8000abe <__aeabi_d2f+0x7a>
 8000a7a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a7e:	bfbc      	itt	lt
 8000a80:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a84:	4770      	bxlt	lr
 8000a86:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8e:	f1c2 0218 	rsb	r2, r2, #24
 8000a92:	f1c2 0c20 	rsb	ip, r2, #32
 8000a96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	f040 0001 	orrne.w	r0, r0, #1
 8000aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab0:	ea40 000c 	orr.w	r0, r0, ip
 8000ab4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x14>
 8000abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac2:	d107      	bne.n	8000ad4 <__aeabi_d2f+0x90>
 8000ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac8:	bf1e      	ittt	ne
 8000aca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ace:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ad2:	4770      	bxne	lr
 8000ad4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_uldivmod>:
 8000ae4:	b953      	cbnz	r3, 8000afc <__aeabi_uldivmod+0x18>
 8000ae6:	b94a      	cbnz	r2, 8000afc <__aeabi_uldivmod+0x18>
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	bf08      	it	eq
 8000aec:	2800      	cmpeq	r0, #0
 8000aee:	bf1c      	itt	ne
 8000af0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000af4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000af8:	f000 b96a 	b.w	8000dd0 <__aeabi_idiv0>
 8000afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b04:	f000 f806 	bl	8000b14 <__udivmoddi4>
 8000b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b10:	b004      	add	sp, #16
 8000b12:	4770      	bx	lr

08000b14 <__udivmoddi4>:
 8000b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b18:	9d08      	ldr	r5, [sp, #32]
 8000b1a:	460c      	mov	r4, r1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d14e      	bne.n	8000bbe <__udivmoddi4+0xaa>
 8000b20:	4694      	mov	ip, r2
 8000b22:	458c      	cmp	ip, r1
 8000b24:	4686      	mov	lr, r0
 8000b26:	fab2 f282 	clz	r2, r2
 8000b2a:	d962      	bls.n	8000bf2 <__udivmoddi4+0xde>
 8000b2c:	b14a      	cbz	r2, 8000b42 <__udivmoddi4+0x2e>
 8000b2e:	f1c2 0320 	rsb	r3, r2, #32
 8000b32:	4091      	lsls	r1, r2
 8000b34:	fa20 f303 	lsr.w	r3, r0, r3
 8000b38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b3c:	4319      	orrs	r1, r3
 8000b3e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b46:	fa1f f68c 	uxth.w	r6, ip
 8000b4a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b52:	fb07 1114 	mls	r1, r7, r4, r1
 8000b56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b5a:	fb04 f106 	mul.w	r1, r4, r6
 8000b5e:	4299      	cmp	r1, r3
 8000b60:	d90a      	bls.n	8000b78 <__udivmoddi4+0x64>
 8000b62:	eb1c 0303 	adds.w	r3, ip, r3
 8000b66:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b6a:	f080 8112 	bcs.w	8000d92 <__udivmoddi4+0x27e>
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	f240 810f 	bls.w	8000d92 <__udivmoddi4+0x27e>
 8000b74:	3c02      	subs	r4, #2
 8000b76:	4463      	add	r3, ip
 8000b78:	1a59      	subs	r1, r3, r1
 8000b7a:	fa1f f38e 	uxth.w	r3, lr
 8000b7e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b82:	fb07 1110 	mls	r1, r7, r0, r1
 8000b86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b8a:	fb00 f606 	mul.w	r6, r0, r6
 8000b8e:	429e      	cmp	r6, r3
 8000b90:	d90a      	bls.n	8000ba8 <__udivmoddi4+0x94>
 8000b92:	eb1c 0303 	adds.w	r3, ip, r3
 8000b96:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b9a:	f080 80fc 	bcs.w	8000d96 <__udivmoddi4+0x282>
 8000b9e:	429e      	cmp	r6, r3
 8000ba0:	f240 80f9 	bls.w	8000d96 <__udivmoddi4+0x282>
 8000ba4:	4463      	add	r3, ip
 8000ba6:	3802      	subs	r0, #2
 8000ba8:	1b9b      	subs	r3, r3, r6
 8000baa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bae:	2100      	movs	r1, #0
 8000bb0:	b11d      	cbz	r5, 8000bba <__udivmoddi4+0xa6>
 8000bb2:	40d3      	lsrs	r3, r2
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d905      	bls.n	8000bce <__udivmoddi4+0xba>
 8000bc2:	b10d      	cbz	r5, 8000bc8 <__udivmoddi4+0xb4>
 8000bc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4608      	mov	r0, r1
 8000bcc:	e7f5      	b.n	8000bba <__udivmoddi4+0xa6>
 8000bce:	fab3 f183 	clz	r1, r3
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	d146      	bne.n	8000c64 <__udivmoddi4+0x150>
 8000bd6:	42a3      	cmp	r3, r4
 8000bd8:	d302      	bcc.n	8000be0 <__udivmoddi4+0xcc>
 8000bda:	4290      	cmp	r0, r2
 8000bdc:	f0c0 80f0 	bcc.w	8000dc0 <__udivmoddi4+0x2ac>
 8000be0:	1a86      	subs	r6, r0, r2
 8000be2:	eb64 0303 	sbc.w	r3, r4, r3
 8000be6:	2001      	movs	r0, #1
 8000be8:	2d00      	cmp	r5, #0
 8000bea:	d0e6      	beq.n	8000bba <__udivmoddi4+0xa6>
 8000bec:	e9c5 6300 	strd	r6, r3, [r5]
 8000bf0:	e7e3      	b.n	8000bba <__udivmoddi4+0xa6>
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	f040 8090 	bne.w	8000d18 <__udivmoddi4+0x204>
 8000bf8:	eba1 040c 	sub.w	r4, r1, ip
 8000bfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c00:	fa1f f78c 	uxth.w	r7, ip
 8000c04:	2101      	movs	r1, #1
 8000c06:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c0e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c16:	fb07 f006 	mul.w	r0, r7, r6
 8000c1a:	4298      	cmp	r0, r3
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0x11c>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0x11a>
 8000c28:	4298      	cmp	r0, r3
 8000c2a:	f200 80cd 	bhi.w	8000dc8 <__udivmoddi4+0x2b4>
 8000c2e:	4626      	mov	r6, r4
 8000c30:	1a1c      	subs	r4, r3, r0
 8000c32:	fa1f f38e 	uxth.w	r3, lr
 8000c36:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c3a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c42:	fb00 f707 	mul.w	r7, r0, r7
 8000c46:	429f      	cmp	r7, r3
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x148>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c52:	d202      	bcs.n	8000c5a <__udivmoddi4+0x146>
 8000c54:	429f      	cmp	r7, r3
 8000c56:	f200 80b0 	bhi.w	8000dba <__udivmoddi4+0x2a6>
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	1bdb      	subs	r3, r3, r7
 8000c5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c62:	e7a5      	b.n	8000bb0 <__udivmoddi4+0x9c>
 8000c64:	f1c1 0620 	rsb	r6, r1, #32
 8000c68:	408b      	lsls	r3, r1
 8000c6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c6e:	431f      	orrs	r7, r3
 8000c70:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c74:	fa04 f301 	lsl.w	r3, r4, r1
 8000c78:	ea43 030c 	orr.w	r3, r3, ip
 8000c7c:	40f4      	lsrs	r4, r6
 8000c7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c82:	0c38      	lsrs	r0, r7, #16
 8000c84:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c88:	fbb4 fef0 	udiv	lr, r4, r0
 8000c8c:	fa1f fc87 	uxth.w	ip, r7
 8000c90:	fb00 441e 	mls	r4, r0, lr, r4
 8000c94:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c98:	fb0e f90c 	mul.w	r9, lr, ip
 8000c9c:	45a1      	cmp	r9, r4
 8000c9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x1a6>
 8000ca4:	193c      	adds	r4, r7, r4
 8000ca6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000caa:	f080 8084 	bcs.w	8000db6 <__udivmoddi4+0x2a2>
 8000cae:	45a1      	cmp	r9, r4
 8000cb0:	f240 8081 	bls.w	8000db6 <__udivmoddi4+0x2a2>
 8000cb4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cb8:	443c      	add	r4, r7
 8000cba:	eba4 0409 	sub.w	r4, r4, r9
 8000cbe:	fa1f f983 	uxth.w	r9, r3
 8000cc2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cc6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cce:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cd2:	45a4      	cmp	ip, r4
 8000cd4:	d907      	bls.n	8000ce6 <__udivmoddi4+0x1d2>
 8000cd6:	193c      	adds	r4, r7, r4
 8000cd8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000cdc:	d267      	bcs.n	8000dae <__udivmoddi4+0x29a>
 8000cde:	45a4      	cmp	ip, r4
 8000ce0:	d965      	bls.n	8000dae <__udivmoddi4+0x29a>
 8000ce2:	3b02      	subs	r3, #2
 8000ce4:	443c      	add	r4, r7
 8000ce6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cea:	fba0 9302 	umull	r9, r3, r0, r2
 8000cee:	eba4 040c 	sub.w	r4, r4, ip
 8000cf2:	429c      	cmp	r4, r3
 8000cf4:	46ce      	mov	lr, r9
 8000cf6:	469c      	mov	ip, r3
 8000cf8:	d351      	bcc.n	8000d9e <__udivmoddi4+0x28a>
 8000cfa:	d04e      	beq.n	8000d9a <__udivmoddi4+0x286>
 8000cfc:	b155      	cbz	r5, 8000d14 <__udivmoddi4+0x200>
 8000cfe:	ebb8 030e 	subs.w	r3, r8, lr
 8000d02:	eb64 040c 	sbc.w	r4, r4, ip
 8000d06:	fa04 f606 	lsl.w	r6, r4, r6
 8000d0a:	40cb      	lsrs	r3, r1
 8000d0c:	431e      	orrs	r6, r3
 8000d0e:	40cc      	lsrs	r4, r1
 8000d10:	e9c5 6400 	strd	r6, r4, [r5]
 8000d14:	2100      	movs	r1, #0
 8000d16:	e750      	b.n	8000bba <__udivmoddi4+0xa6>
 8000d18:	f1c2 0320 	rsb	r3, r2, #32
 8000d1c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d24:	fa24 f303 	lsr.w	r3, r4, r3
 8000d28:	4094      	lsls	r4, r2
 8000d2a:	430c      	orrs	r4, r1
 8000d2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d30:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d34:	fa1f f78c 	uxth.w	r7, ip
 8000d38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d3c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d40:	0c23      	lsrs	r3, r4, #16
 8000d42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d46:	fb00 f107 	mul.w	r1, r0, r7
 8000d4a:	4299      	cmp	r1, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x24c>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d56:	d22c      	bcs.n	8000db2 <__udivmoddi4+0x29e>
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	d92a      	bls.n	8000db2 <__udivmoddi4+0x29e>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4463      	add	r3, ip
 8000d60:	1a5b      	subs	r3, r3, r1
 8000d62:	b2a4      	uxth	r4, r4
 8000d64:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d68:	fb08 3311 	mls	r3, r8, r1, r3
 8000d6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d70:	fb01 f307 	mul.w	r3, r1, r7
 8000d74:	42a3      	cmp	r3, r4
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x276>
 8000d78:	eb1c 0404 	adds.w	r4, ip, r4
 8000d7c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d80:	d213      	bcs.n	8000daa <__udivmoddi4+0x296>
 8000d82:	42a3      	cmp	r3, r4
 8000d84:	d911      	bls.n	8000daa <__udivmoddi4+0x296>
 8000d86:	3902      	subs	r1, #2
 8000d88:	4464      	add	r4, ip
 8000d8a:	1ae4      	subs	r4, r4, r3
 8000d8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d90:	e739      	b.n	8000c06 <__udivmoddi4+0xf2>
 8000d92:	4604      	mov	r4, r0
 8000d94:	e6f0      	b.n	8000b78 <__udivmoddi4+0x64>
 8000d96:	4608      	mov	r0, r1
 8000d98:	e706      	b.n	8000ba8 <__udivmoddi4+0x94>
 8000d9a:	45c8      	cmp	r8, r9
 8000d9c:	d2ae      	bcs.n	8000cfc <__udivmoddi4+0x1e8>
 8000d9e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000da2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000da6:	3801      	subs	r0, #1
 8000da8:	e7a8      	b.n	8000cfc <__udivmoddi4+0x1e8>
 8000daa:	4631      	mov	r1, r6
 8000dac:	e7ed      	b.n	8000d8a <__udivmoddi4+0x276>
 8000dae:	4603      	mov	r3, r0
 8000db0:	e799      	b.n	8000ce6 <__udivmoddi4+0x1d2>
 8000db2:	4630      	mov	r0, r6
 8000db4:	e7d4      	b.n	8000d60 <__udivmoddi4+0x24c>
 8000db6:	46d6      	mov	lr, sl
 8000db8:	e77f      	b.n	8000cba <__udivmoddi4+0x1a6>
 8000dba:	4463      	add	r3, ip
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	e74d      	b.n	8000c5c <__udivmoddi4+0x148>
 8000dc0:	4606      	mov	r6, r0
 8000dc2:	4623      	mov	r3, r4
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e70f      	b.n	8000be8 <__udivmoddi4+0xd4>
 8000dc8:	3e02      	subs	r6, #2
 8000dca:	4463      	add	r3, ip
 8000dcc:	e730      	b.n	8000c30 <__udivmoddi4+0x11c>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_idiv0>:
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	0000      	movs	r0, r0
	...

08000dd8 <update_encoder>:
  encoder->displacement = 0;
  encoder->velocity = 0;
  encoder->last_counter_value = 0;
}

void update_encoder(EncoderData* encoder) {
 8000dd8:	b5b0      	push	{r4, r5, r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  int current_counter = __HAL_TIM_GET_COUNTER(encoder->htim);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000de8:	613b      	str	r3, [r7, #16]
  uint32_t duration = HAL_GetTick() - encoder->last_tick;
 8000dea:	f001 fae7 	bl	80023bc <HAL_GetTick>
 8000dee:	4602      	mov	r2, r0
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	60fb      	str	r3, [r7, #12]
  int num_pulse = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  if (duration <= 1)  // delay for encode to update, in ms
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	f240 8095 	bls.w	8000f2e <update_encoder+0x156>
    return;

  if (current_counter == encoder->last_counter_value) {
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d102      	bne.n	8000e14 <update_encoder+0x3c>
    num_pulse = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	e035      	b.n	8000e80 <update_encoder+0xa8>
  } else if (current_counter > encoder->last_counter_value) {
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	dd18      	ble.n	8000e50 <update_encoder+0x78>
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move backward, count down, overflow
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0310 	and.w	r3, r3, #16
 8000e2a:	2b10      	cmp	r3, #16
 8000e2c:	d10a      	bne.n	8000e44 <update_encoder+0x6c>
      num_pulse = (__HAL_TIM_GET_AUTORELOAD(encoder->htim) - current_counter + encoder->last_counter_value) * -1;
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	691b      	ldr	r3, [r3, #16]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	6892      	ldr	r2, [r2, #8]
 8000e3e:	1a9b      	subs	r3, r3, r2
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	e01d      	b.n	8000e80 <update_encoder+0xa8>
    } else {  // move forward, count up, no overflow
      num_pulse = current_counter - encoder->last_counter_value;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	e017      	b.n	8000e80 <update_encoder+0xa8>
    }
  } else {
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {  // move up, count up, overflow
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 0310 	and.w	r3, r3, #16
 8000e5c:	2b10      	cmp	r3, #16
 8000e5e:	d105      	bne.n	8000e6c <update_encoder+0x94>
      num_pulse = (encoder->last_counter_value - current_counter) * -1;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	e009      	b.n	8000e80 <update_encoder+0xa8>
    } else {  // move backward, count down, no overflow
      num_pulse = __HAL_TIM_GET_AUTORELOAD(encoder->htim) - encoder->last_counter_value + current_counter;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	6892      	ldr	r2, [r2, #8]
 8000e78:	1a9a      	subs	r2, r3, r2
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	617b      	str	r3, [r7, #20]
    }
  }

  float temp_displacement = (float)num_pulse / encoder->_ppr * 2.0 * M_PI;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	ee07 3a90 	vmov	s15, r3
 8000e86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	8a9b      	ldrh	r3, [r3, #20]
 8000e8e:	ee07 3a90 	vmov	s15, r3
 8000e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e96:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e9a:	ee16 0a90 	vmov	r0, s13
 8000e9e:	f7ff fb1f 	bl	80004e0 <__aeabi_f2d>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	f7ff f9bd 	bl	8000224 <__adddf3>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	a322      	add	r3, pc, #136	@ (adr r3, 8000f3c <update_encoder+0x164>)
 8000eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb8:	f7ff fb6a 	bl	8000590 <__aeabi_dmul>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f7ff fdbe 	bl	8000a44 <__aeabi_d2f>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60bb      	str	r3, [r7, #8]
  encoder->last_counter_value = current_counter;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	609a      	str	r2, [r3, #8]
  encoder->displacement += temp_displacement;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	ed93 7a00 	vldr	s14, [r3]
 8000ed8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	edc3 7a00 	vstr	s15, [r3]
  encoder->velocity = temp_displacement * 1000.0 / duration;
 8000ee6:	68b8      	ldr	r0, [r7, #8]
 8000ee8:	f7ff fafa 	bl	80004e0 <__aeabi_f2d>
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <update_encoder+0x160>)
 8000ef2:	f7ff fb4d 	bl	8000590 <__aeabi_dmul>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	4614      	mov	r4, r2
 8000efc:	461d      	mov	r5, r3
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f7ff facc 	bl	800049c <__aeabi_ui2d>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4620      	mov	r0, r4
 8000f0a:	4629      	mov	r1, r5
 8000f0c:	f7ff fc6a 	bl	80007e4 <__aeabi_ddiv>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4610      	mov	r0, r2
 8000f16:	4619      	mov	r1, r3
 8000f18:	f7ff fd94 	bl	8000a44 <__aeabi_d2f>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	605a      	str	r2, [r3, #4]
  encoder->last_tick = HAL_GetTick();
 8000f22:	f001 fa4b 	bl	80023bc <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	e000      	b.n	8000f30 <update_encoder+0x158>
    return;
 8000f2e:	bf00      	nop
}
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bdb0      	pop	{r4, r5, r7, pc}
 8000f36:	bf00      	nop
 8000f38:	408f4000 	.word	0x408f4000
 8000f3c:	54442d18 	.word	0x54442d18
 8000f40:	400921fb 	.word	0x400921fb

08000f44 <read_current_velocity>:

WheelVelocity read_current_velocity(EncoderData* encoders) {
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b095      	sub	sp, #84	@ 0x54
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6178      	str	r0, [r7, #20]
  if (encoders == NULL)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d107      	bne.n	8000f62 <read_current_velocity+0x1e>
    return (WheelVelocity){0, 0, 0, 0};
 8000f52:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	e030      	b.n	8000fc4 <read_current_velocity+0x80>

  WheelVelocity velocities = {.front_left = 0, .front_right = 0, .rear_left = 0, .rear_right = 0};
 8000f62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000f74:	e00d      	b.n	8000f92 <read_current_velocity+0x4e>
    update_encoder(&(encoders[i]));
 8000f76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	461a      	mov	r2, r3
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	4413      	add	r3, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff26 	bl	8000dd8 <update_encoder>
  for (int i = FRONT_LEFT; i <= REAR_RIGHT; i++)
 8000f8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f8e:	3301      	adds	r3, #1
 8000f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000f92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	ddee      	ble.n	8000f76 <read_current_velocity+0x32>

  velocities.front_left = encoders[FRONT_LEFT].velocity;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  velocities.front_right = encoders[FRONT_RIGHT].velocity;
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3318      	adds	r3, #24
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	633b      	str	r3, [r7, #48]	@ 0x30
  velocities.rear_left = encoders[REAR_LEFT].velocity;
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3330      	adds	r3, #48	@ 0x30
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	637b      	str	r3, [r7, #52]	@ 0x34
  velocities.rear_right = encoders[REAR_RIGHT].velocity;
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	3348      	adds	r3, #72	@ 0x48
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	63bb      	str	r3, [r7, #56]	@ 0x38

  return velocities;
 8000fb6:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000fba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000fc4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000fc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000fc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000fcc:	ee06 0a10 	vmov	s12, r0
 8000fd0:	ee06 1a90 	vmov	s13, r1
 8000fd4:	ee07 2a10 	vmov	s14, r2
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eeb0 0a46 	vmov.f32	s0, s12
 8000fe0:	eef0 0a66 	vmov.f32	s1, s13
 8000fe4:	eeb0 1a47 	vmov.f32	s2, s14
 8000fe8:	eef0 1a67 	vmov.f32	s3, s15
 8000fec:	3754      	adds	r7, #84	@ 0x54
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd90      	pop	{r4, r7, pc}
	...

08000ff4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	@ 0x28
 8000ff8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800100a:	4b4a      	ldr	r3, [pc, #296]	@ (8001134 <MX_GPIO_Init+0x140>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100e:	4a49      	ldr	r2, [pc, #292]	@ (8001134 <MX_GPIO_Init+0x140>)
 8001010:	f043 0310 	orr.w	r3, r3, #16
 8001014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001016:	4b47      	ldr	r3, [pc, #284]	@ (8001134 <MX_GPIO_Init+0x140>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	4b44      	ldr	r3, [pc, #272]	@ (8001134 <MX_GPIO_Init+0x140>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001026:	4a43      	ldr	r2, [pc, #268]	@ (8001134 <MX_GPIO_Init+0x140>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102e:	4b41      	ldr	r3, [pc, #260]	@ (8001134 <MX_GPIO_Init+0x140>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800103a:	4b3e      	ldr	r3, [pc, #248]	@ (8001134 <MX_GPIO_Init+0x140>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103e:	4a3d      	ldr	r2, [pc, #244]	@ (8001134 <MX_GPIO_Init+0x140>)
 8001040:	f043 0320 	orr.w	r3, r3, #32
 8001044:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001046:	4b3b      	ldr	r3, [pc, #236]	@ (8001134 <MX_GPIO_Init+0x140>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104a:	f003 0320 	and.w	r3, r3, #32
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4b38      	ldr	r3, [pc, #224]	@ (8001134 <MX_GPIO_Init+0x140>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	4a37      	ldr	r2, [pc, #220]	@ (8001134 <MX_GPIO_Init+0x140>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105e:	4b35      	ldr	r3, [pc, #212]	@ (8001134 <MX_GPIO_Init+0x140>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800106a:	4b32      	ldr	r3, [pc, #200]	@ (8001134 <MX_GPIO_Init+0x140>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106e:	4a31      	ldr	r2, [pc, #196]	@ (8001134 <MX_GPIO_Init+0x140>)
 8001070:	f043 0308 	orr.w	r3, r3, #8
 8001074:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001076:	4b2f      	ldr	r3, [pc, #188]	@ (8001134 <MX_GPIO_Init+0x140>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2108      	movs	r1, #8
 8001086:	482c      	ldr	r0, [pc, #176]	@ (8001138 <MX_GPIO_Init+0x144>)
 8001088:	f001 fc2c 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 8001092:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001096:	f001 fc25 	bl	80028e4 <HAL_GPIO_WritePin>
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 80010a0:	4826      	ldr	r0, [pc, #152]	@ (800113c <MX_GPIO_Init+0x148>)
 80010a2:	f001 fc1f 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010ac:	4824      	ldr	r0, [pc, #144]	@ (8001140 <MX_GPIO_Init+0x14c>)
 80010ae:	f001 fc19 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_LEFT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_LEFT_ENABLE_Pin;
 80010b2:	2308      	movs	r3, #8
 80010b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_LEFT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	481b      	ldr	r0, [pc, #108]	@ (8001138 <MX_GPIO_Init+0x144>)
 80010ca:	f001 fa89 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FL_IN2_Pin MOTOR_FL_IN1_Pin MOTOR_RL_IN1_Pin MOTOR_RL_IN2_Pin
                           MOTOR_RR_IN2_Pin MOTOR_RR_IN1_Pin MOTOR_FR_IN1_Pin MOTOR_FR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_FL_IN2_Pin|MOTOR_FL_IN1_Pin|MOTOR_RL_IN1_Pin|MOTOR_RL_IN2_Pin
 80010ce:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 80010d2:	617b      	str	r3, [r7, #20]
                          |MOTOR_RR_IN2_Pin|MOTOR_RR_IN1_Pin|MOTOR_FR_IN1_Pin|MOTOR_FR_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ea:	f001 fa79 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin;
 80010ee:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 80010f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4619      	mov	r1, r3
 8001106:	480d      	ldr	r0, [pc, #52]	@ (800113c <MX_GPIO_Init+0x148>)
 8001108:	f001 fa6a 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_RIGHT_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR_RIGHT_ENABLE_Pin;
 800110c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_RIGHT_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4806      	ldr	r0, [pc, #24]	@ (8001140 <MX_GPIO_Init+0x14c>)
 8001126:	f001 fa5b 	bl	80025e0 <HAL_GPIO_Init>

}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	@ 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	48000800 	.word	0x48000800
 800113c:	48001000 	.word	0x48001000
 8001140:	48000c00 	.word	0x48000c00

08001144 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001148:	f001 f8d3 	bl	80022f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114c:	f000 f8e0 	bl	8001310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001150:	f7ff ff50 	bl	8000ff4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001154:	f000 fbaa 	bl	80018ac <MX_TIM1_Init>
  MX_TIM3_Init();
 8001158:	f000 fc78 	bl	8001a4c <MX_TIM3_Init>
  MX_TIM4_Init();
 800115c:	f000 fd04 	bl	8001b68 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001160:	f000 fd58 	bl	8001c14 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001164:	f000 fdac 	bl	8001cc0 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001168:	f000 fbfa 	bl	8001960 <MX_TIM2_Init>
  MX_UART4_Init();
 800116c:	f000 ff68 	bl	8002040 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001170:	f000 ffb2 	bl	80020d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001174:	2100      	movs	r1, #0
 8001176:	4858      	ldr	r0, [pc, #352]	@ (80012d8 <main+0x194>)
 8001178:	f002 fd2e 	bl	8003bd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800117c:	2104      	movs	r1, #4
 800117e:	4856      	ldr	r0, [pc, #344]	@ (80012d8 <main+0x194>)
 8001180:	f002 fd2a 	bl	8003bd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001184:	210c      	movs	r1, #12
 8001186:	4854      	ldr	r0, [pc, #336]	@ (80012d8 <main+0x194>)
 8001188:	f002 fd26 	bl	8003bd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800118c:	210c      	movs	r1, #12
 800118e:	4853      	ldr	r0, [pc, #332]	@ (80012dc <main+0x198>)
 8001190:	f002 fd22 	bl	8003bd8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8001194:	4852      	ldr	r0, [pc, #328]	@ (80012e0 <main+0x19c>)
 8001196:	f002 fc45 	bl	8003a24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 800119a:	213c      	movs	r1, #60	@ 0x3c
 800119c:	4850      	ldr	r0, [pc, #320]	@ (80012e0 <main+0x19c>)
 800119e:	f002 fed3 	bl	8003f48 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80011a2:	4850      	ldr	r0, [pc, #320]	@ (80012e4 <main+0x1a0>)
 80011a4:	f002 fc3e 	bl	8003a24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80011a8:	213c      	movs	r1, #60	@ 0x3c
 80011aa:	484e      	ldr	r0, [pc, #312]	@ (80012e4 <main+0x1a0>)
 80011ac:	f002 fecc 	bl	8003f48 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80011b0:	484d      	ldr	r0, [pc, #308]	@ (80012e8 <main+0x1a4>)
 80011b2:	f002 fc37 	bl	8003a24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 80011b6:	213c      	movs	r1, #60	@ 0x3c
 80011b8:	484b      	ldr	r0, [pc, #300]	@ (80012e8 <main+0x1a4>)
 80011ba:	f002 fec5 	bl	8003f48 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 80011be:	484b      	ldr	r0, [pc, #300]	@ (80012ec <main+0x1a8>)
 80011c0:	f002 fc30 	bl	8003a24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 80011c4:	213c      	movs	r1, #60	@ 0x3c
 80011c6:	4849      	ldr	r0, [pc, #292]	@ (80012ec <main+0x1a8>)
 80011c8:	f002 febe 	bl	8003f48 <HAL_TIM_Encoder_Start_IT>
  // enable both sides of motor driver IC
  HAL_GPIO_WritePin(MOTOR_LEFT_ENABLE_GPIO_Port, MOTOR_LEFT_ENABLE_Pin, GPIO_PIN_SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	2108      	movs	r1, #8
 80011d0:	4847      	ldr	r0, [pc, #284]	@ (80012f0 <main+0x1ac>)
 80011d2:	f001 fb87 	bl	80028e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_RIGHT_ENABLE_GPIO_Port, MOTOR_RIGHT_ENABLE_Pin, GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011dc:	4845      	ldr	r0, [pc, #276]	@ (80012f4 <main+0x1b0>)
 80011de:	f001 fb81 	bl	80028e4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011e8:	4843      	ldr	r0, [pc, #268]	@ (80012f8 <main+0x1b4>)
 80011ea:	f001 fb7b 	bl	80028e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011f4:	4840      	ldr	r0, [pc, #256]	@ (80012f8 <main+0x1b4>)
 80011f6:	f001 fb75 	bl	80028e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001200:	483d      	ldr	r0, [pc, #244]	@ (80012f8 <main+0x1b4>)
 8001202:	f001 fb6f 	bl	80028e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	2180      	movs	r1, #128	@ 0x80
 800120a:	483b      	ldr	r0, [pc, #236]	@ (80012f8 <main+0x1b4>)
 800120c:	f001 fb6a 	bl	80028e4 <HAL_GPIO_WritePin>

  servo_reset_all();
 8001210:	f000 fac4 	bl	800179c <servo_reset_all>
  HAL_Delay(5000);
 8001214:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001218:	f001 f8dc 	bl	80023d4 <HAL_Delay>
  servo_move(&(servos[4]), SERVO_ID5_MAX_POS, SHORTEST_TIME_ROTATE(5, 390));
 800121c:	4b37      	ldr	r3, [pc, #220]	@ (80012fc <main+0x1b8>)
 800121e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001222:	f5a3 73c3 	sub.w	r3, r3, #390	@ 0x186
 8001226:	2b00      	cmp	r3, #0
 8001228:	bfb8      	it	lt
 800122a:	425b      	neglt	r3, r3
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f945 	bl	80004bc <__aeabi_i2d>
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	4b32      	ldr	r3, [pc, #200]	@ (8001300 <main+0x1bc>)
 8001238:	f7ff f9aa 	bl	8000590 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f7ff fbde 	bl	8000a04 <__aeabi_d2uiz>
 8001248:	4603      	mov	r3, r0
 800124a:	b29b      	uxth	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	f240 317a 	movw	r1, #890	@ 0x37a
 8001252:	482c      	ldr	r0, [pc, #176]	@ (8001304 <main+0x1c0>)
 8001254:	f000 f8ac 	bl	80013b0 <servo_move>
  HAL_Delay(5000);
 8001258:	f241 3088 	movw	r0, #5000	@ 0x1388
 800125c:	f001 f8ba 	bl	80023d4 <HAL_Delay>
  servo_move(&(servos[4]), SERVO_ID5_MIN_POS, SHORTEST_TIME_ROTATE(5, 85));
 8001260:	4b26      	ldr	r3, [pc, #152]	@ (80012fc <main+0x1b8>)
 8001262:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001266:	3b55      	subs	r3, #85	@ 0x55
 8001268:	2b00      	cmp	r3, #0
 800126a:	bfb8      	it	lt
 800126c:	425b      	neglt	r3, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f924 	bl	80004bc <__aeabi_i2d>
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	4b21      	ldr	r3, [pc, #132]	@ (8001300 <main+0x1bc>)
 800127a:	f7ff f989 	bl	8000590 <__aeabi_dmul>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4610      	mov	r0, r2
 8001284:	4619      	mov	r1, r3
 8001286:	f7ff fbbd 	bl	8000a04 <__aeabi_d2uiz>
 800128a:	4603      	mov	r3, r0
 800128c:	b29b      	uxth	r3, r3
 800128e:	461a      	mov	r2, r3
 8001290:	f240 119f 	movw	r1, #415	@ 0x19f
 8001294:	481b      	ldr	r0, [pc, #108]	@ (8001304 <main+0x1c0>)
 8001296:	f000 f88b 	bl	80013b0 <servo_move>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	2180      	movs	r1, #128	@ 0x80
 800129e:	4816      	ldr	r0, [pc, #88]	@ (80012f8 <main+0x1b4>)
 80012a0:	f001 fb20 	bl	80028e4 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f001 f895 	bl	80023d4 <HAL_Delay>
    //   servo_move(&(servos[4]), 500 + 380, SHORTEST_TIME_ROTATE(5, 380));
    //   test_var_1 = SHORTEST_TIME_ROTATE(5, 380);
    // }
    // else if (test_count == 2)
    //   servo_reset_all();
    test_wheel_vel = read_current_velocity(encoders);
 80012aa:	4817      	ldr	r0, [pc, #92]	@ (8001308 <main+0x1c4>)
 80012ac:	f7ff fe4a 	bl	8000f44 <read_current_velocity>
 80012b0:	eeb0 6a40 	vmov.f32	s12, s0
 80012b4:	eef0 6a60 	vmov.f32	s13, s1
 80012b8:	eeb0 7a41 	vmov.f32	s14, s2
 80012bc:	eef0 7a61 	vmov.f32	s15, s3
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <main+0x1c8>)
 80012c2:	ed83 6a00 	vstr	s12, [r3]
 80012c6:	edc3 6a01 	vstr	s13, [r3, #4]
 80012ca:	ed83 7a02 	vstr	s14, [r3, #8]
 80012ce:	edc3 7a03 	vstr	s15, [r3, #12]
    HAL_Delay(1);
 80012d2:	bf00      	nop
 80012d4:	e7e6      	b.n	80012a4 <main+0x160>
 80012d6:	bf00      	nop
 80012d8:	20000154 	.word	0x20000154
 80012dc:	20000108 	.word	0x20000108
 80012e0:	200000bc 	.word	0x200000bc
 80012e4:	200001a0 	.word	0x200001a0
 80012e8:	200001ec 	.word	0x200001ec
 80012ec:	20000238 	.word	0x20000238
 80012f0:	48000800 	.word	0x48000800
 80012f4:	48000c00 	.word	0x48000c00
 80012f8:	48001000 	.word	0x48001000
 80012fc:	20000060 	.word	0x20000060
 8001300:	40080000 	.word	0x40080000
 8001304:	20000078 	.word	0x20000078
 8001308:	20000000 	.word	0x20000000
 800130c:	200000ac 	.word	0x200000ac

08001310 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b094      	sub	sp, #80	@ 0x50
 8001314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001316:	f107 0318 	add.w	r3, r7, #24
 800131a:	2238      	movs	r2, #56	@ 0x38
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f004 fd12 	bl	8005d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001332:	2000      	movs	r0, #0
 8001334:	f001 faee 	bl	8002914 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001338:	2301      	movs	r3, #1
 800133a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800133c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001340:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001342:	2302      	movs	r3, #2
 8001344:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001346:	2303      	movs	r3, #3
 8001348:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800134a:	2302      	movs	r3, #2
 800134c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800134e:	2355      	movs	r3, #85	@ 0x55
 8001350:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001352:	2302      	movs	r3, #2
 8001354:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001356:	2302      	movs	r3, #2
 8001358:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800135a:	2302      	movs	r3, #2
 800135c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800135e:	f107 0318 	add.w	r3, r7, #24
 8001362:	4618      	mov	r0, r3
 8001364:	f001 fb8a 	bl	8002a7c <HAL_RCC_OscConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0x62>
    Error_Handler();
 800136e:	f000 f818 	bl	80013a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001372:	230f      	movs	r3, #15
 8001374:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001376:	2303      	movs	r3, #3
 8001378:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2104      	movs	r1, #4
 800138a:	4618      	mov	r0, r3
 800138c:	f001 fe88 	bl	80030a0 <HAL_RCC_ClockConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <SystemClock_Config+0x8a>
    Error_Handler();
 8001396:	f000 f804 	bl	80013a2 <Error_Handler>
  }
}
 800139a:	bf00      	nop
 800139c:	3750      	adds	r7, #80	@ 0x50
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a6:	b672      	cpsid	i
}
 80013a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80013aa:	bf00      	nop
 80013ac:	e7fd      	b.n	80013aa <Error_Handler+0x8>
	...

080013b0 <servo_move>:
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
  HAL_UART_Receive(&huart4, receive_buffer, sizeof(receive_buffer), 0xFFFF);
  target_servo->current_pos = (receive_buffer[8] << 8) + receive_buffer[7];
}

void servo_move(HTD45H_Servo* target_servo, uint16_t target_pos, uint16_t time) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	803b      	strh	r3, [r7, #0]
  uint8_t send_buffer[10];
  send_buffer[0] = send_buffer[1] = FRAME_HEADER;
 80013c0:	2355      	movs	r3, #85	@ 0x55
 80013c2:	737b      	strb	r3, [r7, #13]
 80013c4:	7b7b      	ldrb	r3, [r7, #13]
 80013c6:	733b      	strb	r3, [r7, #12]
  send_buffer[2] = 0x01 * 3 + 5;
 80013c8:	2308      	movs	r3, #8
 80013ca:	73bb      	strb	r3, [r7, #14]
  send_buffer[3] = CMD_SERVO_MOVE;
 80013cc:	2303      	movs	r3, #3
 80013ce:	73fb      	strb	r3, [r7, #15]
  send_buffer[4] = 0x01;
 80013d0:	2301      	movs	r3, #1
 80013d2:	743b      	strb	r3, [r7, #16]
  send_buffer[5] = GET_LOW_BYTE(time);
 80013d4:	883b      	ldrh	r3, [r7, #0]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	747b      	strb	r3, [r7, #17]
  send_buffer[6] = GET_HIGH_BYTE(time);
 80013da:	883b      	ldrh	r3, [r7, #0]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	b29b      	uxth	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	74bb      	strb	r3, [r7, #18]
  send_buffer[7] = target_servo->servo_id;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	74fb      	strb	r3, [r7, #19]
  send_buffer[8] = GET_LOW_BYTE(target_pos);
 80013ea:	887b      	ldrh	r3, [r7, #2]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	753b      	strb	r3, [r7, #20]
  send_buffer[9] = GET_HIGH_BYTE(target_pos);
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	0a1b      	lsrs	r3, r3, #8
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	757b      	strb	r3, [r7, #21]
  HAL_UART_Transmit(&huart4, send_buffer, sizeof(send_buffer), 0xFFFF);
 80013fa:	f107 010c 	add.w	r1, r7, #12
 80013fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001402:	220a      	movs	r2, #10
 8001404:	48ca      	ldr	r0, [pc, #808]	@ (8001730 <servo_move+0x380>)
 8001406:	f003 fdf3 	bl	8004ff0 <HAL_UART_Transmit>
  target_servo->current_pos = target_pos;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	887a      	ldrh	r2, [r7, #2]
 800140e:	805a      	strh	r2, [r3, #2]

  switch (target_servo->servo_id) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	3b01      	subs	r3, #1
 8001416:	2b05      	cmp	r3, #5
 8001418:	f200 81b8 	bhi.w	800178c <servo_move+0x3dc>
 800141c:	a201      	add	r2, pc, #4	@ (adr r2, 8001424 <servo_move+0x74>)
 800141e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001422:	bf00      	nop
 8001424:	0800143d 	.word	0x0800143d
 8001428:	080014bd 	.word	0x080014bd
 800142c:	0800153d 	.word	0x0800153d
 8001430:	080015bd 	.word	0x080015bd
 8001434:	0800163d 	.word	0x0800163d
 8001438:	080016bd 	.word	0x080016bd
    case 1:
      target_servo->current_degree = SERVO_ID1_POS_TO_ANGLE(target_pos);
 800143c:	887b      	ldrh	r3, [r7, #2]
 800143e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001442:	d91c      	bls.n	800147e <servo_move+0xce>
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f836 	bl	80004bc <__aeabi_i2d>
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	4bb7      	ldr	r3, [pc, #732]	@ (8001734 <servo_move+0x384>)
 8001456:	f7ff f89b 	bl	8000590 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	4bb4      	ldr	r3, [pc, #720]	@ (8001738 <servo_move+0x388>)
 8001468:	f7ff f9bc 	bl	80007e4 <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f7ff fa9e 	bl	80009b4 <__aeabi_d2iz>
 8001478:	4603      	mov	r3, r0
 800147a:	b21b      	sxth	r3, r3
 800147c:	e01b      	b.n	80014b6 <servo_move+0x106>
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f819 	bl	80004bc <__aeabi_i2d>
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4bab      	ldr	r3, [pc, #684]	@ (800173c <servo_move+0x38c>)
 8001490:	f7ff f87e 	bl	8000590 <__aeabi_dmul>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	4ba7      	ldr	r3, [pc, #668]	@ (8001740 <servo_move+0x390>)
 80014a2:	f7ff f99f 	bl	80007e4 <__aeabi_ddiv>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f7ff fa81 	bl	80009b4 <__aeabi_d2iz>
 80014b2:	4603      	mov	r3, r0
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	8093      	strh	r3, [r2, #4]
      break;
 80014ba:	e168      	b.n	800178e <servo_move+0x3de>
    case 2:
      target_servo->current_degree = SERVO_ID2_POS_TO_ANGLE(target_pos);
 80014bc:	887b      	ldrh	r3, [r7, #2]
 80014be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014c2:	d91c      	bls.n	80014fe <servo_move+0x14e>
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7fe fff6 	bl	80004bc <__aeabi_i2d>
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	4b97      	ldr	r3, [pc, #604]	@ (8001734 <servo_move+0x384>)
 80014d6:	f7ff f85b 	bl	8000590 <__aeabi_dmul>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	4b94      	ldr	r3, [pc, #592]	@ (8001738 <servo_move+0x388>)
 80014e8:	f7ff f97c 	bl	80007e4 <__aeabi_ddiv>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f7ff fa5e 	bl	80009b4 <__aeabi_d2iz>
 80014f8:	4603      	mov	r3, r0
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	e01b      	b.n	8001536 <servo_move+0x186>
 80014fe:	887b      	ldrh	r3, [r7, #2]
 8001500:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8001504:	4618      	mov	r0, r3
 8001506:	f7fe ffd9 	bl	80004bc <__aeabi_i2d>
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	4b8b      	ldr	r3, [pc, #556]	@ (800173c <servo_move+0x38c>)
 8001510:	f7ff f83e 	bl	8000590 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	a378      	add	r3, pc, #480	@ (adr r3, 8001700 <servo_move+0x350>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7ff f95f 	bl	80007e4 <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fa41 	bl	80009b4 <__aeabi_d2iz>
 8001532:	4603      	mov	r3, r0
 8001534:	b21b      	sxth	r3, r3
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	8093      	strh	r3, [r2, #4]
      break;
 800153a:	e128      	b.n	800178e <servo_move+0x3de>
    case 3:
      target_servo->current_degree = SERVO_ID3_POS_TO_ANGLE(target_pos);
 800153c:	887b      	ldrh	r3, [r7, #2]
 800153e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001542:	d91c      	bls.n	800157e <servo_move+0x1ce>
 8001544:	887b      	ldrh	r3, [r7, #2]
 8001546:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ffb6 	bl	80004bc <__aeabi_i2d>
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	4b77      	ldr	r3, [pc, #476]	@ (8001734 <servo_move+0x384>)
 8001556:	f7ff f81b 	bl	8000590 <__aeabi_dmul>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	a369      	add	r3, pc, #420	@ (adr r3, 8001708 <servo_move+0x358>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7ff f93c 	bl	80007e4 <__aeabi_ddiv>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f7ff fa1e 	bl	80009b4 <__aeabi_d2iz>
 8001578:	4603      	mov	r3, r0
 800157a:	b21b      	sxth	r3, r3
 800157c:	e01b      	b.n	80015b6 <servo_move+0x206>
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ff99 	bl	80004bc <__aeabi_i2d>
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	4b6b      	ldr	r3, [pc, #428]	@ (800173c <servo_move+0x38c>)
 8001590:	f7fe fffe 	bl	8000590 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	a35c      	add	r3, pc, #368	@ (adr r3, 8001710 <servo_move+0x360>)
 800159e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a2:	f7ff f91f 	bl	80007e4 <__aeabi_ddiv>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	f7ff fa01 	bl	80009b4 <__aeabi_d2iz>
 80015b2:	4603      	mov	r3, r0
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	8093      	strh	r3, [r2, #4]
      break;
 80015ba:	e0e8      	b.n	800178e <servo_move+0x3de>
    case 4:
      target_servo->current_degree = SERVO_ID4_POS_TO_ANGLE(target_pos);
 80015bc:	887b      	ldrh	r3, [r7, #2]
 80015be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015c2:	d91c      	bls.n	80015fe <servo_move+0x24e>
 80015c4:	887b      	ldrh	r3, [r7, #2]
 80015c6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ff76 	bl	80004bc <__aeabi_i2d>
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	4b57      	ldr	r3, [pc, #348]	@ (8001734 <servo_move+0x384>)
 80015d6:	f7fe ffdb 	bl	8000590 <__aeabi_dmul>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	a34d      	add	r3, pc, #308	@ (adr r3, 8001718 <servo_move+0x368>)
 80015e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e8:	f7ff f8fc 	bl	80007e4 <__aeabi_ddiv>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	f7ff f9de 	bl	80009b4 <__aeabi_d2iz>
 80015f8:	4603      	mov	r3, r0
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	e01b      	b.n	8001636 <servo_move+0x286>
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff59 	bl	80004bc <__aeabi_i2d>
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	4b4b      	ldr	r3, [pc, #300]	@ (800173c <servo_move+0x38c>)
 8001610:	f7fe ffbe 	bl	8000590 <__aeabi_dmul>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	4b48      	ldr	r3, [pc, #288]	@ (8001744 <servo_move+0x394>)
 8001622:	f7ff f8df 	bl	80007e4 <__aeabi_ddiv>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	f7ff f9c1 	bl	80009b4 <__aeabi_d2iz>
 8001632:	4603      	mov	r3, r0
 8001634:	b21b      	sxth	r3, r3
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	8093      	strh	r3, [r2, #4]
      break;
 800163a:	e0a8      	b.n	800178e <servo_move+0x3de>
    case 5:
      target_servo->current_degree = SERVO_ID5_POS_TO_ANGLE(target_pos);
 800163c:	887b      	ldrh	r3, [r7, #2]
 800163e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001642:	d91c      	bls.n	800167e <servo_move+0x2ce>
 8001644:	887b      	ldrh	r3, [r7, #2]
 8001646:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff36 	bl	80004bc <__aeabi_i2d>
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b37      	ldr	r3, [pc, #220]	@ (8001734 <servo_move+0x384>)
 8001656:	f7fe ff9b 	bl	8000590 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	a32f      	add	r3, pc, #188	@ (adr r3, 8001720 <servo_move+0x370>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7ff f8bc 	bl	80007e4 <__aeabi_ddiv>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f7ff f99e 	bl	80009b4 <__aeabi_d2iz>
 8001678:	4603      	mov	r3, r0
 800167a:	b21b      	sxth	r3, r3
 800167c:	e01b      	b.n	80016b6 <servo_move+0x306>
 800167e:	887b      	ldrh	r3, [r7, #2]
 8001680:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff19 	bl	80004bc <__aeabi_i2d>
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	4b2e      	ldr	r3, [pc, #184]	@ (8001748 <servo_move+0x398>)
 8001690:	f7fe ff7e 	bl	8000590 <__aeabi_dmul>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	a322      	add	r3, pc, #136	@ (adr r3, 8001728 <servo_move+0x378>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7ff f89f 	bl	80007e4 <__aeabi_ddiv>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff f981 	bl	80009b4 <__aeabi_d2iz>
 80016b2:	4603      	mov	r3, r0
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	8093      	strh	r3, [r2, #4]
      break;
 80016ba:	e068      	b.n	800178e <servo_move+0x3de>
    case 6:
      target_servo->current_degree = SERVO_ID6_POS_TO_ANGLE(target_pos);
 80016bc:	887b      	ldrh	r3, [r7, #2]
 80016be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016c2:	d943      	bls.n	800174c <servo_move+0x39c>
 80016c4:	887b      	ldrh	r3, [r7, #2]
 80016c6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe fef6 	bl	80004bc <__aeabi_i2d>
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <servo_move+0x384>)
 80016d6:	f7fe ff5b 	bl	8000590 <__aeabi_dmul>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	f04f 0300 	mov.w	r3, #0
 80016ea:	f7ff f87b 	bl	80007e4 <__aeabi_ddiv>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff f95d 	bl	80009b4 <__aeabi_d2iz>
 80016fa:	4603      	mov	r3, r0
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	e042      	b.n	8001786 <servo_move+0x3d6>
 8001700:	00000000 	.word	0x00000000
 8001704:	c0786000 	.word	0xc0786000
 8001708:	00000000 	.word	0x00000000
 800170c:	40777000 	.word	0x40777000
 8001710:	00000000 	.word	0x00000000
 8001714:	c0772000 	.word	0xc0772000
 8001718:	00000000 	.word	0x00000000
 800171c:	4077c000 	.word	0x4077c000
 8001720:	00000000 	.word	0x00000000
 8001724:	40786000 	.word	0x40786000
 8001728:	00000000 	.word	0x00000000
 800172c:	c0554000 	.word	0xc0554000
 8001730:	20000284 	.word	0x20000284
 8001734:	40568000 	.word	0x40568000
 8001738:	40768000 	.word	0x40768000
 800173c:	c0568000 	.word	0xc0568000
 8001740:	c0790000 	.word	0xc0790000
 8001744:	c0768000 	.word	0xc0768000
 8001748:	c0240000 	.word	0xc0240000
 800174c:	887b      	ldrh	r3, [r7, #2]
 800174e:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe feb2 	bl	80004bc <__aeabi_i2d>
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <servo_move+0x3e8>)
 800175e:	f7fe ff17 	bl	8000590 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	f7ff f837 	bl	80007e4 <__aeabi_ddiv>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff f919 	bl	80009b4 <__aeabi_d2iz>
 8001782:	4603      	mov	r3, r0
 8001784:	b21b      	sxth	r3, r3
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	8093      	strh	r3, [r2, #4]
      break;
 800178a:	e000      	b.n	800178e <servo_move+0x3de>
    default:
      break;
 800178c:	bf00      	nop
  }
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	c0568000 	.word	0xc0568000

0800179c <servo_reset_all>:
uint16_t servo_get_current_pos(HTD45H_Servo* target_servo) {
  servo_update_current_pos(target_servo);
  return target_servo->current_pos;
}

void servo_reset_all(void) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
  for (int i = 0; i < 6; i++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	e010      	b.n	80017ca <servo_reset_all+0x2e>
    servo_move(&(servos[i]), INITIAL_POS, 500);
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4a0a      	ldr	r2, [pc, #40]	@ (80017dc <servo_reset_all+0x40>)
 80017b4:	4413      	add	r3, r2
 80017b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80017ba:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fdf6 	bl	80013b0 <servo_move>
  for (int i = 0; i < 6; i++)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3301      	adds	r3, #1
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	ddeb      	ble.n	80017a8 <servo_reset_all+0xc>
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000060 	.word	0x20000060

080017e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <HAL_MspInit+0x44>)
 80017e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001824 <HAL_MspInit+0x44>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80017f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <HAL_MspInit+0x44>)
 80017f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <HAL_MspInit+0x44>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001802:	4a08      	ldr	r2, [pc, #32]	@ (8001824 <HAL_MspInit+0x44>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001808:	6593      	str	r3, [r2, #88]	@ 0x58
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_MspInit+0x44>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001816:	f001 f921 	bl	8002a5c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000

08001828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <NMI_Handler+0x4>

08001830 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <MemManage_Handler+0x4>

08001840 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <BusFault_Handler+0x4>

08001848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <UsageFault_Handler+0x4>

08001850 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800187e:	f000 fd8b 	bl	8002398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <SystemInit+0x20>)
 800188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001892:	4a05      	ldr	r2, [pc, #20]	@ (80018a8 <SystemInit+0x20>)
 8001894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08c      	sub	sp, #48	@ 0x30
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	2224      	movs	r2, #36	@ 0x24
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f004 fa44 	bl	8005d48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c0:	463b      	mov	r3, r7
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018ca:	4b23      	ldr	r3, [pc, #140]	@ (8001958 <MX_TIM1_Init+0xac>)
 80018cc:	4a23      	ldr	r2, [pc, #140]	@ (800195c <MX_TIM1_Init+0xb0>)
 80018ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018d0:	4b21      	ldr	r3, [pc, #132]	@ (8001958 <MX_TIM1_Init+0xac>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d6:	4b20      	ldr	r3, [pc, #128]	@ (8001958 <MX_TIM1_Init+0xac>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001958 <MX_TIM1_Init+0xac>)
 80018de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <MX_TIM1_Init+0xac>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001958 <MX_TIM1_Init+0xac>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018f0:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <MX_TIM1_Init+0xac>)
 80018f2:	2280      	movs	r2, #128	@ 0x80
 80018f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018f6:	2303      	movs	r3, #3
 80018f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018fe:	2301      	movs	r3, #1
 8001900:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001906:	230a      	movs	r3, #10
 8001908:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800190e:	2301      	movs	r3, #1
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001912:	2300      	movs	r3, #0
 8001914:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001916:	230a      	movs	r3, #10
 8001918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	4619      	mov	r1, r3
 8001920:	480d      	ldr	r0, [pc, #52]	@ (8001958 <MX_TIM1_Init+0xac>)
 8001922:	f002 fa6b 	bl	8003dfc <HAL_TIM_Encoder_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800192c:	f7ff fd39 	bl	80013a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001930:	2300      	movs	r3, #0
 8001932:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001934:	2300      	movs	r3, #0
 8001936:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800193c:	463b      	mov	r3, r7
 800193e:	4619      	mov	r1, r3
 8001940:	4805      	ldr	r0, [pc, #20]	@ (8001958 <MX_TIM1_Init+0xac>)
 8001942:	f003 fa6f 	bl	8004e24 <HAL_TIMEx_MasterConfigSynchronization>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800194c:	f7ff fd29 	bl	80013a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	3730      	adds	r7, #48	@ 0x30
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	200000bc 	.word	0x200000bc
 800195c:	40012c00 	.word	0x40012c00

08001960 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08e      	sub	sp, #56	@ 0x38
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001966:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001980:	463b      	mov	r3, r7
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
 800198c:	611a      	str	r2, [r3, #16]
 800198e:	615a      	str	r2, [r3, #20]
 8001990:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001992:	4b2d      	ldr	r3, [pc, #180]	@ (8001a48 <MX_TIM2_Init+0xe8>)
 8001994:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001998:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800199a:	4b2b      	ldr	r3, [pc, #172]	@ (8001a48 <MX_TIM2_Init+0xe8>)
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a0:	4b29      	ldr	r3, [pc, #164]	@ (8001a48 <MX_TIM2_Init+0xe8>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16800;
 80019a6:	4b28      	ldr	r3, [pc, #160]	@ (8001a48 <MX_TIM2_Init+0xe8>)
 80019a8:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 80019ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ae:	4b26      	ldr	r3, [pc, #152]	@ (8001a48 <MX_TIM2_Init+0xe8>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019b4:	4b24      	ldr	r3, [pc, #144]	@ (8001a48 <MX_TIM2_Init+0xe8>)
 80019b6:	2280      	movs	r2, #128	@ 0x80
 80019b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019ba:	4823      	ldr	r0, [pc, #140]	@ (8001a48 <MX_TIM2_Init+0xe8>)
 80019bc:	f001 ffda 	bl	8003974 <HAL_TIM_Base_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80019c6:	f7ff fcec 	bl	80013a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019d4:	4619      	mov	r1, r3
 80019d6:	481c      	ldr	r0, [pc, #112]	@ (8001a48 <MX_TIM2_Init+0xe8>)
 80019d8:	f002 fc78 	bl	80042cc <HAL_TIM_ConfigClockSource>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019e2:	f7ff fcde 	bl	80013a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019e6:	4818      	ldr	r0, [pc, #96]	@ (8001a48 <MX_TIM2_Init+0xe8>)
 80019e8:	f002 f894 	bl	8003b14 <HAL_TIM_PWM_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019f2:	f7ff fcd6 	bl	80013a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	4810      	ldr	r0, [pc, #64]	@ (8001a48 <MX_TIM2_Init+0xe8>)
 8001a06:	f003 fa0d 	bl	8004e24 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a10:	f7ff fcc7 	bl	80013a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a14:	2360      	movs	r3, #96	@ 0x60
 8001a16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a24:	463b      	mov	r3, r7
 8001a26:	220c      	movs	r2, #12
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4807      	ldr	r0, [pc, #28]	@ (8001a48 <MX_TIM2_Init+0xe8>)
 8001a2c:	f002 fb3a 	bl	80040a4 <HAL_TIM_PWM_ConfigChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a36:	f7ff fcb4 	bl	80013a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a3a:	4803      	ldr	r0, [pc, #12]	@ (8001a48 <MX_TIM2_Init+0xe8>)
 8001a3c:	f000 faa4 	bl	8001f88 <HAL_TIM_MspPostInit>

}
 8001a40:	bf00      	nop
 8001a42:	3738      	adds	r7, #56	@ 0x38
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000108 	.word	0x20000108

08001a4c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08e      	sub	sp, #56	@ 0x38
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]
 8001a7a:	615a      	str	r2, [r3, #20]
 8001a7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a7e:	4b38      	ldr	r3, [pc, #224]	@ (8001b60 <MX_TIM3_Init+0x114>)
 8001a80:	4a38      	ldr	r2, [pc, #224]	@ (8001b64 <MX_TIM3_Init+0x118>)
 8001a82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8001a84:	4b36      	ldr	r3, [pc, #216]	@ (8001b60 <MX_TIM3_Init+0x114>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8a:	4b35      	ldr	r3, [pc, #212]	@ (8001b60 <MX_TIM3_Init+0x114>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16799;
 8001a90:	4b33      	ldr	r3, [pc, #204]	@ (8001b60 <MX_TIM3_Init+0x114>)
 8001a92:	f244 129f 	movw	r2, #16799	@ 0x419f
 8001a96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a98:	4b31      	ldr	r3, [pc, #196]	@ (8001b60 <MX_TIM3_Init+0x114>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a9e:	4b30      	ldr	r3, [pc, #192]	@ (8001b60 <MX_TIM3_Init+0x114>)
 8001aa0:	2280      	movs	r2, #128	@ 0x80
 8001aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aa4:	482e      	ldr	r0, [pc, #184]	@ (8001b60 <MX_TIM3_Init+0x114>)
 8001aa6:	f001 ff65 	bl	8003974 <HAL_TIM_Base_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001ab0:	f7ff fc77 	bl	80013a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001aba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4827      	ldr	r0, [pc, #156]	@ (8001b60 <MX_TIM3_Init+0x114>)
 8001ac2:	f002 fc03 	bl	80042cc <HAL_TIM_ConfigClockSource>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001acc:	f7ff fc69 	bl	80013a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ad0:	4823      	ldr	r0, [pc, #140]	@ (8001b60 <MX_TIM3_Init+0x114>)
 8001ad2:	f002 f81f 	bl	8003b14 <HAL_TIM_PWM_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001adc:	f7ff fc61 	bl	80013a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ae8:	f107 031c 	add.w	r3, r7, #28
 8001aec:	4619      	mov	r1, r3
 8001aee:	481c      	ldr	r0, [pc, #112]	@ (8001b60 <MX_TIM3_Init+0x114>)
 8001af0:	f003 f998 	bl	8004e24 <HAL_TIMEx_MasterConfigSynchronization>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001afa:	f7ff fc52 	bl	80013a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001afe:	2360      	movs	r3, #96	@ 0x60
 8001b00:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b0e:	463b      	mov	r3, r7
 8001b10:	2200      	movs	r2, #0
 8001b12:	4619      	mov	r1, r3
 8001b14:	4812      	ldr	r0, [pc, #72]	@ (8001b60 <MX_TIM3_Init+0x114>)
 8001b16:	f002 fac5 	bl	80040a4 <HAL_TIM_PWM_ConfigChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b20:	f7ff fc3f 	bl	80013a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b24:	463b      	mov	r3, r7
 8001b26:	2204      	movs	r2, #4
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480d      	ldr	r0, [pc, #52]	@ (8001b60 <MX_TIM3_Init+0x114>)
 8001b2c:	f002 faba 	bl	80040a4 <HAL_TIM_PWM_ConfigChannel>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001b36:	f7ff fc34 	bl	80013a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	220c      	movs	r2, #12
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4807      	ldr	r0, [pc, #28]	@ (8001b60 <MX_TIM3_Init+0x114>)
 8001b42:	f002 faaf 	bl	80040a4 <HAL_TIM_PWM_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001b4c:	f7ff fc29 	bl	80013a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b50:	4803      	ldr	r0, [pc, #12]	@ (8001b60 <MX_TIM3_Init+0x114>)
 8001b52:	f000 fa19 	bl	8001f88 <HAL_TIM_MspPostInit>

}
 8001b56:	bf00      	nop
 8001b58:	3738      	adds	r7, #56	@ 0x38
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000154 	.word	0x20000154
 8001b64:	40000400 	.word	0x40000400

08001b68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08c      	sub	sp, #48	@ 0x30
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	2224      	movs	r2, #36	@ 0x24
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f004 f8e6 	bl	8005d48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b86:	4b21      	ldr	r3, [pc, #132]	@ (8001c0c <MX_TIM4_Init+0xa4>)
 8001b88:	4a21      	ldr	r2, [pc, #132]	@ (8001c10 <MX_TIM4_Init+0xa8>)
 8001b8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c0c <MX_TIM4_Init+0xa4>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b92:	4b1e      	ldr	r3, [pc, #120]	@ (8001c0c <MX_TIM4_Init+0xa4>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b98:	4b1c      	ldr	r3, [pc, #112]	@ (8001c0c <MX_TIM4_Init+0xa4>)
 8001b9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c0c <MX_TIM4_Init+0xa4>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ba6:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <MX_TIM4_Init+0xa4>)
 8001ba8:	2280      	movs	r2, #128	@ 0x80
 8001baa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bac:	2303      	movs	r3, #3
 8001bae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001bbc:	230a      	movs	r3, #10
 8001bbe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001bcc:	230a      	movs	r3, #10
 8001bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001bd0:	f107 030c 	add.w	r3, r7, #12
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	480d      	ldr	r0, [pc, #52]	@ (8001c0c <MX_TIM4_Init+0xa4>)
 8001bd8:	f002 f910 	bl	8003dfc <HAL_TIM_Encoder_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001be2:	f7ff fbde 	bl	80013a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bee:	463b      	mov	r3, r7
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4806      	ldr	r0, [pc, #24]	@ (8001c0c <MX_TIM4_Init+0xa4>)
 8001bf4:	f003 f916 	bl	8004e24 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001bfe:	f7ff fbd0 	bl	80013a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	3730      	adds	r7, #48	@ 0x30
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200001a0 	.word	0x200001a0
 8001c10:	40000800 	.word	0x40000800

08001c14 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08c      	sub	sp, #48	@ 0x30
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	2224      	movs	r2, #36	@ 0x24
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f004 f890 	bl	8005d48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c28:	463b      	mov	r3, r7
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c32:	4b21      	ldr	r3, [pc, #132]	@ (8001cb8 <MX_TIM5_Init+0xa4>)
 8001c34:	4a21      	ldr	r2, [pc, #132]	@ (8001cbc <MX_TIM5_Init+0xa8>)
 8001c36:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001c38:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb8 <MX_TIM5_Init+0xa4>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb8 <MX_TIM5_Init+0xa4>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001c44:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb8 <MX_TIM5_Init+0xa4>)
 8001c46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c4a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb8 <MX_TIM5_Init+0xa4>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c52:	4b19      	ldr	r3, [pc, #100]	@ (8001cb8 <MX_TIM5_Init+0xa4>)
 8001c54:	2280      	movs	r2, #128	@ 0x80
 8001c56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c60:	2301      	movs	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001c68:	230a      	movs	r3, #10
 8001c6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c70:	2301      	movs	r3, #1
 8001c72:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001c78:	230a      	movs	r3, #10
 8001c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	4619      	mov	r1, r3
 8001c82:	480d      	ldr	r0, [pc, #52]	@ (8001cb8 <MX_TIM5_Init+0xa4>)
 8001c84:	f002 f8ba 	bl	8003dfc <HAL_TIM_Encoder_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001c8e:	f7ff fb88 	bl	80013a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4806      	ldr	r0, [pc, #24]	@ (8001cb8 <MX_TIM5_Init+0xa4>)
 8001ca0:	f003 f8c0 	bl	8004e24 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001caa:	f7ff fb7a 	bl	80013a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	3730      	adds	r7, #48	@ 0x30
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200001ec 	.word	0x200001ec
 8001cbc:	40000c00 	.word	0x40000c00

08001cc0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08c      	sub	sp, #48	@ 0x30
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	2224      	movs	r2, #36	@ 0x24
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f004 f83a 	bl	8005d48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd4:	463b      	mov	r3, r7
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001cde:	4b23      	ldr	r3, [pc, #140]	@ (8001d6c <MX_TIM8_Init+0xac>)
 8001ce0:	4a23      	ldr	r2, [pc, #140]	@ (8001d70 <MX_TIM8_Init+0xb0>)
 8001ce2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ce4:	4b21      	ldr	r3, [pc, #132]	@ (8001d6c <MX_TIM8_Init+0xac>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cea:	4b20      	ldr	r3, [pc, #128]	@ (8001d6c <MX_TIM8_Init+0xac>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d6c <MX_TIM8_Init+0xac>)
 8001cf2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cf6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d6c <MX_TIM8_Init+0xac>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <MX_TIM8_Init+0xac>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d04:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <MX_TIM8_Init+0xac>)
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d12:	2301      	movs	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001d1a:	230a      	movs	r3, #10
 8001d1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d22:	2301      	movs	r3, #1
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d26:	2300      	movs	r3, #0
 8001d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001d2a:	230a      	movs	r3, #10
 8001d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001d2e:	f107 030c 	add.w	r3, r7, #12
 8001d32:	4619      	mov	r1, r3
 8001d34:	480d      	ldr	r0, [pc, #52]	@ (8001d6c <MX_TIM8_Init+0xac>)
 8001d36:	f002 f861 	bl	8003dfc <HAL_TIM_Encoder_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001d40:	f7ff fb2f 	bl	80013a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d44:	2300      	movs	r3, #0
 8001d46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d50:	463b      	mov	r3, r7
 8001d52:	4619      	mov	r1, r3
 8001d54:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <MX_TIM8_Init+0xac>)
 8001d56:	f003 f865 	bl	8004e24 <HAL_TIMEx_MasterConfigSynchronization>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001d60:	f7ff fb1f 	bl	80013a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001d64:	bf00      	nop
 8001d66:	3730      	adds	r7, #48	@ 0x30
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000238 	.word	0x20000238
 8001d70:	40013400 	.word	0x40013400

08001d74 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b090      	sub	sp, #64	@ 0x40
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a5d      	ldr	r2, [pc, #372]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0x194>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d128      	bne.n	8001de8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d96:	4b5d      	ldr	r3, [pc, #372]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d9a:	4a5c      	ldr	r2, [pc, #368]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001d9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001da0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001da2:	4b5a      	ldr	r3, [pc, #360]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001daa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dae:	4b57      	ldr	r3, [pc, #348]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db2:	4a56      	ldr	r2, [pc, #344]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dba:	4b54      	ldr	r3, [pc, #336]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dde:	4619      	mov	r1, r3
 8001de0:	484b      	ldr	r0, [pc, #300]	@ (8001f10 <HAL_TIM_Encoder_MspInit+0x19c>)
 8001de2:	f000 fbfd 	bl	80025e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001de6:	e08a      	b.n	8001efe <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a49      	ldr	r2, [pc, #292]	@ (8001f14 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d129      	bne.n	8001e46 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001df2:	4b46      	ldr	r3, [pc, #280]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df6:	4a45      	ldr	r2, [pc, #276]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001df8:	f043 0304 	orr.w	r3, r3, #4
 8001dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dfe:	4b43      	ldr	r3, [pc, #268]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	623b      	str	r3, [r7, #32]
 8001e08:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e0a:	4b40      	ldr	r3, [pc, #256]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001e10:	f043 0308 	orr.w	r3, r3, #8
 8001e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e16:	4b3d      	ldr	r3, [pc, #244]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001e22:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e34:	2302      	movs	r3, #2
 8001e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4836      	ldr	r0, [pc, #216]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001e40:	f000 fbce 	bl	80025e0 <HAL_GPIO_Init>
}
 8001e44:	e05b      	b.n	8001efe <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a34      	ldr	r2, [pc, #208]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d129      	bne.n	8001ea4 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e50:	4b2e      	ldr	r3, [pc, #184]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e54:	4a2d      	ldr	r2, [pc, #180]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001e56:	f043 0308 	orr.w	r3, r3, #8
 8001e5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e68:	4b28      	ldr	r3, [pc, #160]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6c:	4a27      	ldr	r2, [pc, #156]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e74:	4b25      	ldr	r3, [pc, #148]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e80:	2303      	movs	r3, #3
 8001e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e90:	2302      	movs	r3, #2
 8001e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e9e:	f000 fb9f 	bl	80025e0 <HAL_GPIO_Init>
}
 8001ea2:	e02c      	b.n	8001efe <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8001f20 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d127      	bne.n	8001efe <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001eae:	4b17      	ldr	r3, [pc, #92]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb2:	4a16      	ldr	r2, [pc, #88]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001eb4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001eb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eba:	4b14      	ldr	r3, [pc, #80]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ebe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec6:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eca:	4a10      	ldr	r2, [pc, #64]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001ecc:	f043 0304 	orr.w	r3, r3, #4
 8001ed0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0x198>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ede:	23c0      	movs	r3, #192	@ 0xc0
 8001ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001eee:	2304      	movs	r3, #4
 8001ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <HAL_TIM_Encoder_MspInit+0x19c>)
 8001efa:	f000 fb71 	bl	80025e0 <HAL_GPIO_Init>
}
 8001efe:	bf00      	nop
 8001f00:	3740      	adds	r7, #64	@ 0x40
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40012c00 	.word	0x40012c00
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	48000800 	.word	0x48000800
 8001f14:	40000800 	.word	0x40000800
 8001f18:	48000c00 	.word	0x48000c00
 8001f1c:	40000c00 	.word	0x40000c00
 8001f20:	40013400 	.word	0x40013400

08001f24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f34:	d10c      	bne.n	8001f50 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f36:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <HAL_TIM_Base_MspInit+0x5c>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3a:	4a11      	ldr	r2, [pc, #68]	@ (8001f80 <HAL_TIM_Base_MspInit+0x5c>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f42:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <HAL_TIM_Base_MspInit+0x5c>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f4e:	e010      	b.n	8001f72 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0b      	ldr	r2, [pc, #44]	@ (8001f84 <HAL_TIM_Base_MspInit+0x60>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d10b      	bne.n	8001f72 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f5a:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <HAL_TIM_Base_MspInit+0x5c>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5e:	4a08      	ldr	r2, [pc, #32]	@ (8001f80 <HAL_TIM_Base_MspInit+0x5c>)
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f66:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_TIM_Base_MspInit+0x5c>)
 8001f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
}
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40000400 	.word	0x40000400

08001f88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	@ 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa8:	d11c      	bne.n	8001fe4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001faa:	4b21      	ldr	r3, [pc, #132]	@ (8002030 <HAL_TIM_MspPostInit+0xa8>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fae:	4a20      	ldr	r2, [pc, #128]	@ (8002030 <HAL_TIM_MspPostInit+0xa8>)
 8001fb0:	f043 0308 	orr.w	r3, r3, #8
 8001fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002030 <HAL_TIM_MspPostInit+0xa8>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PD6     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fc2:	2340      	movs	r3, #64	@ 0x40
 8001fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd6:	f107 0314 	add.w	r3, r7, #20
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4815      	ldr	r0, [pc, #84]	@ (8002034 <HAL_TIM_MspPostInit+0xac>)
 8001fde:	f000 faff 	bl	80025e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fe2:	e020      	b.n	8002026 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a13      	ldr	r2, [pc, #76]	@ (8002038 <HAL_TIM_MspPostInit+0xb0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d11b      	bne.n	8002026 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fee:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <HAL_TIM_MspPostInit+0xa8>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff2:	4a0f      	ldr	r2, [pc, #60]	@ (8002030 <HAL_TIM_MspPostInit+0xa8>)
 8001ff4:	f043 0310 	orr.w	r3, r3, #16
 8001ff8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8002030 <HAL_TIM_MspPostInit+0xa8>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8002006:	232c      	movs	r3, #44	@ 0x2c
 8002008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	2300      	movs	r3, #0
 8002014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002016:	2302      	movs	r3, #2
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	4619      	mov	r1, r3
 8002020:	4806      	ldr	r0, [pc, #24]	@ (800203c <HAL_TIM_MspPostInit+0xb4>)
 8002022:	f000 fadd 	bl	80025e0 <HAL_GPIO_Init>
}
 8002026:	bf00      	nop
 8002028:	3728      	adds	r7, #40	@ 0x28
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	48000c00 	.word	0x48000c00
 8002038:	40000400 	.word	0x40000400
 800203c:	48001000 	.word	0x48001000

08002040 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002044:	4b22      	ldr	r3, [pc, #136]	@ (80020d0 <MX_UART4_Init+0x90>)
 8002046:	4a23      	ldr	r2, [pc, #140]	@ (80020d4 <MX_UART4_Init+0x94>)
 8002048:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800204a:	4b21      	ldr	r3, [pc, #132]	@ (80020d0 <MX_UART4_Init+0x90>)
 800204c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002050:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002052:	4b1f      	ldr	r3, [pc, #124]	@ (80020d0 <MX_UART4_Init+0x90>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002058:	4b1d      	ldr	r3, [pc, #116]	@ (80020d0 <MX_UART4_Init+0x90>)
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800205e:	4b1c      	ldr	r3, [pc, #112]	@ (80020d0 <MX_UART4_Init+0x90>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002064:	4b1a      	ldr	r3, [pc, #104]	@ (80020d0 <MX_UART4_Init+0x90>)
 8002066:	220c      	movs	r2, #12
 8002068:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800206a:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <MX_UART4_Init+0x90>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002070:	4b17      	ldr	r3, [pc, #92]	@ (80020d0 <MX_UART4_Init+0x90>)
 8002072:	2200      	movs	r2, #0
 8002074:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002076:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <MX_UART4_Init+0x90>)
 8002078:	2200      	movs	r2, #0
 800207a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800207c:	4b14      	ldr	r3, [pc, #80]	@ (80020d0 <MX_UART4_Init+0x90>)
 800207e:	2200      	movs	r2, #0
 8002080:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002082:	4b13      	ldr	r3, [pc, #76]	@ (80020d0 <MX_UART4_Init+0x90>)
 8002084:	2200      	movs	r2, #0
 8002086:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002088:	4811      	ldr	r0, [pc, #68]	@ (80020d0 <MX_UART4_Init+0x90>)
 800208a:	f002 ff61 	bl	8004f50 <HAL_UART_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002094:	f7ff f985 	bl	80013a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002098:	2100      	movs	r1, #0
 800209a:	480d      	ldr	r0, [pc, #52]	@ (80020d0 <MX_UART4_Init+0x90>)
 800209c:	f003 fd8a 	bl	8005bb4 <HAL_UARTEx_SetTxFifoThreshold>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80020a6:	f7ff f97c 	bl	80013a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020aa:	2100      	movs	r1, #0
 80020ac:	4808      	ldr	r0, [pc, #32]	@ (80020d0 <MX_UART4_Init+0x90>)
 80020ae:	f003 fdbf 	bl	8005c30 <HAL_UARTEx_SetRxFifoThreshold>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80020b8:	f7ff f973 	bl	80013a2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80020bc:	4804      	ldr	r0, [pc, #16]	@ (80020d0 <MX_UART4_Init+0x90>)
 80020be:	f003 fd40 	bl	8005b42 <HAL_UARTEx_DisableFifoMode>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80020c8:	f7ff f96b 	bl	80013a2 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000284 	.word	0x20000284
 80020d4:	40004c00 	.word	0x40004c00

080020d8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020dc:	4b22      	ldr	r3, [pc, #136]	@ (8002168 <MX_USART1_UART_Init+0x90>)
 80020de:	4a23      	ldr	r2, [pc, #140]	@ (800216c <MX_USART1_UART_Init+0x94>)
 80020e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020e2:	4b21      	ldr	r3, [pc, #132]	@ (8002168 <MX_USART1_UART_Init+0x90>)
 80020e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002168 <MX_USART1_UART_Init+0x90>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002168 <MX_USART1_UART_Init+0x90>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002168 <MX_USART1_UART_Init+0x90>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002168 <MX_USART1_UART_Init+0x90>)
 80020fe:	220c      	movs	r2, #12
 8002100:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002102:	4b19      	ldr	r3, [pc, #100]	@ (8002168 <MX_USART1_UART_Init+0x90>)
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002108:	4b17      	ldr	r3, [pc, #92]	@ (8002168 <MX_USART1_UART_Init+0x90>)
 800210a:	2200      	movs	r2, #0
 800210c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800210e:	4b16      	ldr	r3, [pc, #88]	@ (8002168 <MX_USART1_UART_Init+0x90>)
 8002110:	2200      	movs	r2, #0
 8002112:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002114:	4b14      	ldr	r3, [pc, #80]	@ (8002168 <MX_USART1_UART_Init+0x90>)
 8002116:	2200      	movs	r2, #0
 8002118:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800211a:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <MX_USART1_UART_Init+0x90>)
 800211c:	2200      	movs	r2, #0
 800211e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002120:	4811      	ldr	r0, [pc, #68]	@ (8002168 <MX_USART1_UART_Init+0x90>)
 8002122:	f002 ff15 	bl	8004f50 <HAL_UART_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800212c:	f7ff f939 	bl	80013a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002130:	2100      	movs	r1, #0
 8002132:	480d      	ldr	r0, [pc, #52]	@ (8002168 <MX_USART1_UART_Init+0x90>)
 8002134:	f003 fd3e 	bl	8005bb4 <HAL_UARTEx_SetTxFifoThreshold>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800213e:	f7ff f930 	bl	80013a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002142:	2100      	movs	r1, #0
 8002144:	4808      	ldr	r0, [pc, #32]	@ (8002168 <MX_USART1_UART_Init+0x90>)
 8002146:	f003 fd73 	bl	8005c30 <HAL_UARTEx_SetRxFifoThreshold>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002150:	f7ff f927 	bl	80013a2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002154:	4804      	ldr	r0, [pc, #16]	@ (8002168 <MX_USART1_UART_Init+0x90>)
 8002156:	f003 fcf4 	bl	8005b42 <HAL_UARTEx_DisableFifoMode>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002160:	f7ff f91f 	bl	80013a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000318 	.word	0x20000318
 800216c:	40013800 	.word	0x40013800

08002170 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b0a0      	sub	sp, #128	@ 0x80
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002188:	f107 0318 	add.w	r3, r7, #24
 800218c:	2254      	movs	r2, #84	@ 0x54
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f003 fdd9 	bl	8005d48 <memset>
  if(uartHandle->Instance==UART4)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a3d      	ldr	r2, [pc, #244]	@ (8002290 <HAL_UART_MspInit+0x120>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d137      	bne.n	8002210 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80021a0:	2308      	movs	r3, #8
 80021a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021a8:	f107 0318 	add.w	r3, r7, #24
 80021ac:	4618      	mov	r0, r3
 80021ae:	f001 f993 	bl	80034d8 <HAL_RCCEx_PeriphCLKConfig>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021b8:	f7ff f8f3 	bl	80013a2 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80021bc:	4b35      	ldr	r3, [pc, #212]	@ (8002294 <HAL_UART_MspInit+0x124>)
 80021be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c0:	4a34      	ldr	r2, [pc, #208]	@ (8002294 <HAL_UART_MspInit+0x124>)
 80021c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80021c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80021c8:	4b32      	ldr	r3, [pc, #200]	@ (8002294 <HAL_UART_MspInit+0x124>)
 80021ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002294 <HAL_UART_MspInit+0x124>)
 80021d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002294 <HAL_UART_MspInit+0x124>)
 80021da:	f043 0304 	orr.w	r3, r3, #4
 80021de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002294 <HAL_UART_MspInit+0x124>)
 80021e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021ec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80021f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80021fe:	2305      	movs	r3, #5
 8002200:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002202:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002206:	4619      	mov	r1, r3
 8002208:	4823      	ldr	r0, [pc, #140]	@ (8002298 <HAL_UART_MspInit+0x128>)
 800220a:	f000 f9e9 	bl	80025e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800220e:	e03a      	b.n	8002286 <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a21      	ldr	r2, [pc, #132]	@ (800229c <HAL_UART_MspInit+0x12c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d135      	bne.n	8002286 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800221a:	2301      	movs	r3, #1
 800221c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002222:	f107 0318 	add.w	r3, r7, #24
 8002226:	4618      	mov	r0, r3
 8002228:	f001 f956 	bl	80034d8 <HAL_RCCEx_PeriphCLKConfig>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8002232:	f7ff f8b6 	bl	80013a2 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002236:	4b17      	ldr	r3, [pc, #92]	@ (8002294 <HAL_UART_MspInit+0x124>)
 8002238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800223a:	4a16      	ldr	r2, [pc, #88]	@ (8002294 <HAL_UART_MspInit+0x124>)
 800223c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002240:	6613      	str	r3, [r2, #96]	@ 0x60
 8002242:	4b14      	ldr	r3, [pc, #80]	@ (8002294 <HAL_UART_MspInit+0x124>)
 8002244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800224e:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <HAL_UART_MspInit+0x124>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002252:	4a10      	ldr	r2, [pc, #64]	@ (8002294 <HAL_UART_MspInit+0x124>)
 8002254:	f043 0304 	orr.w	r3, r3, #4
 8002258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800225a:	4b0e      	ldr	r3, [pc, #56]	@ (8002294 <HAL_UART_MspInit+0x124>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002266:	2330      	movs	r3, #48	@ 0x30
 8002268:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002276:	2307      	movs	r3, #7
 8002278:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800227a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800227e:	4619      	mov	r1, r3
 8002280:	4805      	ldr	r0, [pc, #20]	@ (8002298 <HAL_UART_MspInit+0x128>)
 8002282:	f000 f9ad 	bl	80025e0 <HAL_GPIO_Init>
}
 8002286:	bf00      	nop
 8002288:	3780      	adds	r7, #128	@ 0x80
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40004c00 	.word	0x40004c00
 8002294:	40021000 	.word	0x40021000
 8002298:	48000800 	.word	0x48000800
 800229c:	40013800 	.word	0x40013800

080022a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022a0:	480d      	ldr	r0, [pc, #52]	@ (80022d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022a2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80022a4:	f7ff faf0 	bl	8001888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022a8:	480c      	ldr	r0, [pc, #48]	@ (80022dc <LoopForever+0x6>)
  ldr r1, =_edata
 80022aa:	490d      	ldr	r1, [pc, #52]	@ (80022e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022ac:	4a0d      	ldr	r2, [pc, #52]	@ (80022e4 <LoopForever+0xe>)
  movs r3, #0
 80022ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022b0:	e002      	b.n	80022b8 <LoopCopyDataInit>

080022b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022b6:	3304      	adds	r3, #4

080022b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022bc:	d3f9      	bcc.n	80022b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022be:	4a0a      	ldr	r2, [pc, #40]	@ (80022e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022c0:	4c0a      	ldr	r4, [pc, #40]	@ (80022ec <LoopForever+0x16>)
  movs r3, #0
 80022c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c4:	e001      	b.n	80022ca <LoopFillZerobss>

080022c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c8:	3204      	adds	r2, #4

080022ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022cc:	d3fb      	bcc.n	80022c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ce:	f003 fd43 	bl	8005d58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022d2:	f7fe ff37 	bl	8001144 <main>

080022d6 <LoopForever>:

LoopForever:
    b LoopForever
 80022d6:	e7fe      	b.n	80022d6 <LoopForever>
  ldr   r0, =_estack
 80022d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80022e4:	08005e08 	.word	0x08005e08
  ldr r2, =_sbss
 80022e8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80022ec:	200003b0 	.word	0x200003b0

080022f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022f0:	e7fe      	b.n	80022f0 <ADC1_2_IRQHandler>

080022f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022fc:	2003      	movs	r0, #3
 80022fe:	f000 f93d 	bl	800257c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002302:	200f      	movs	r0, #15
 8002304:	f000 f80e 	bl	8002324 <HAL_InitTick>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	71fb      	strb	r3, [r7, #7]
 8002312:	e001      	b.n	8002318 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002314:	f7ff fa64 	bl	80017e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002318:	79fb      	ldrb	r3, [r7, #7]

}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002330:	4b16      	ldr	r3, [pc, #88]	@ (800238c <HAL_InitTick+0x68>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d022      	beq.n	800237e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002338:	4b15      	ldr	r3, [pc, #84]	@ (8002390 <HAL_InitTick+0x6c>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b13      	ldr	r3, [pc, #76]	@ (800238c <HAL_InitTick+0x68>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002344:	fbb1 f3f3 	udiv	r3, r1, r3
 8002348:	fbb2 f3f3 	udiv	r3, r2, r3
 800234c:	4618      	mov	r0, r3
 800234e:	f000 f93a 	bl	80025c6 <HAL_SYSTICK_Config>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10f      	bne.n	8002378 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b0f      	cmp	r3, #15
 800235c:	d809      	bhi.n	8002372 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800235e:	2200      	movs	r2, #0
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002366:	f000 f914 	bl	8002592 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800236a:	4a0a      	ldr	r2, [pc, #40]	@ (8002394 <HAL_InitTick+0x70>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	e007      	b.n	8002382 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
 8002376:	e004      	b.n	8002382 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
 800237c:	e001      	b.n	8002382 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002382:	7bfb      	ldrb	r3, [r7, #15]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	2000008c 	.word	0x2000008c
 8002390:	20000084 	.word	0x20000084
 8002394:	20000088 	.word	0x20000088

08002398 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800239c:	4b05      	ldr	r3, [pc, #20]	@ (80023b4 <HAL_IncTick+0x1c>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <HAL_IncTick+0x20>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4413      	add	r3, r2
 80023a6:	4a03      	ldr	r2, [pc, #12]	@ (80023b4 <HAL_IncTick+0x1c>)
 80023a8:	6013      	str	r3, [r2, #0]
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	200003ac 	.word	0x200003ac
 80023b8:	2000008c 	.word	0x2000008c

080023bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return uwTick;
 80023c0:	4b03      	ldr	r3, [pc, #12]	@ (80023d0 <HAL_GetTick+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	200003ac 	.word	0x200003ac

080023d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023dc:	f7ff ffee 	bl	80023bc <HAL_GetTick>
 80023e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023ec:	d004      	beq.n	80023f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ee:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <HAL_Delay+0x40>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4413      	add	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023f8:	bf00      	nop
 80023fa:	f7ff ffdf 	bl	80023bc <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	429a      	cmp	r2, r3
 8002408:	d8f7      	bhi.n	80023fa <HAL_Delay+0x26>
  {
  }
}
 800240a:	bf00      	nop
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	2000008c 	.word	0x2000008c

08002418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002428:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <__NVIC_SetPriorityGrouping+0x44>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002434:	4013      	ands	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002440:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002444:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800244a:	4a04      	ldr	r2, [pc, #16]	@ (800245c <__NVIC_SetPriorityGrouping+0x44>)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	60d3      	str	r3, [r2, #12]
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002464:	4b04      	ldr	r3, [pc, #16]	@ (8002478 <__NVIC_GetPriorityGrouping+0x18>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	f003 0307 	and.w	r3, r3, #7
}
 800246e:	4618      	mov	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	6039      	str	r1, [r7, #0]
 8002486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	2b00      	cmp	r3, #0
 800248e:	db0a      	blt.n	80024a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	490c      	ldr	r1, [pc, #48]	@ (80024c8 <__NVIC_SetPriority+0x4c>)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	0112      	lsls	r2, r2, #4
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	440b      	add	r3, r1
 80024a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a4:	e00a      	b.n	80024bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4908      	ldr	r1, [pc, #32]	@ (80024cc <__NVIC_SetPriority+0x50>)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	3b04      	subs	r3, #4
 80024b4:	0112      	lsls	r2, r2, #4
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	440b      	add	r3, r1
 80024ba:	761a      	strb	r2, [r3, #24]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000e100 	.word	0xe000e100
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	@ 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f1c3 0307 	rsb	r3, r3, #7
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	bf28      	it	cs
 80024ee:	2304      	movcs	r3, #4
 80024f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3304      	adds	r3, #4
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d902      	bls.n	8002500 <NVIC_EncodePriority+0x30>
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3b03      	subs	r3, #3
 80024fe:	e000      	b.n	8002502 <NVIC_EncodePriority+0x32>
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43da      	mvns	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	401a      	ands	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002518:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	43d9      	mvns	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	4313      	orrs	r3, r2
         );
}
 800252a:	4618      	mov	r0, r3
 800252c:	3724      	adds	r7, #36	@ 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3b01      	subs	r3, #1
 8002544:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002548:	d301      	bcc.n	800254e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254a:	2301      	movs	r3, #1
 800254c:	e00f      	b.n	800256e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800254e:	4a0a      	ldr	r2, [pc, #40]	@ (8002578 <SysTick_Config+0x40>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3b01      	subs	r3, #1
 8002554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002556:	210f      	movs	r1, #15
 8002558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800255c:	f7ff ff8e 	bl	800247c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002560:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <SysTick_Config+0x40>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002566:	4b04      	ldr	r3, [pc, #16]	@ (8002578 <SysTick_Config+0x40>)
 8002568:	2207      	movs	r2, #7
 800256a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	e000e010 	.word	0xe000e010

0800257c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ff47 	bl	8002418 <__NVIC_SetPriorityGrouping>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025a0:	f7ff ff5e 	bl	8002460 <__NVIC_GetPriorityGrouping>
 80025a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68b9      	ldr	r1, [r7, #8]
 80025aa:	6978      	ldr	r0, [r7, #20]
 80025ac:	f7ff ff90 	bl	80024d0 <NVIC_EncodePriority>
 80025b0:	4602      	mov	r2, r0
 80025b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff5f 	bl	800247c <__NVIC_SetPriority>
}
 80025be:	bf00      	nop
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ffb2 	bl	8002538 <SysTick_Config>
 80025d4:	4603      	mov	r3, r0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b087      	sub	sp, #28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025ee:	e15a      	b.n	80028a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	2101      	movs	r1, #1
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	fa01 f303 	lsl.w	r3, r1, r3
 80025fc:	4013      	ands	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 814c 	beq.w	80028a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b01      	cmp	r3, #1
 8002612:	d005      	beq.n	8002620 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800261c:	2b02      	cmp	r3, #2
 800261e:	d130      	bne.n	8002682 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	2203      	movs	r2, #3
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002656:	2201      	movs	r2, #1
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4013      	ands	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	091b      	lsrs	r3, r3, #4
 800266c:	f003 0201 	and.w	r2, r3, #1
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b03      	cmp	r3, #3
 800268c:	d017      	beq.n	80026be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	2203      	movs	r2, #3
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4013      	ands	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d123      	bne.n	8002712 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	08da      	lsrs	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3208      	adds	r2, #8
 80026d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	220f      	movs	r2, #15
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4013      	ands	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	08da      	lsrs	r2, r3, #3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3208      	adds	r2, #8
 800270c:	6939      	ldr	r1, [r7, #16]
 800270e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	2203      	movs	r2, #3
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0203 	and.w	r2, r3, #3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 80a6 	beq.w	80028a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002754:	4b5b      	ldr	r3, [pc, #364]	@ (80028c4 <HAL_GPIO_Init+0x2e4>)
 8002756:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002758:	4a5a      	ldr	r2, [pc, #360]	@ (80028c4 <HAL_GPIO_Init+0x2e4>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002760:	4b58      	ldr	r3, [pc, #352]	@ (80028c4 <HAL_GPIO_Init+0x2e4>)
 8002762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800276c:	4a56      	ldr	r2, [pc, #344]	@ (80028c8 <HAL_GPIO_Init+0x2e8>)
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	089b      	lsrs	r3, r3, #2
 8002772:	3302      	adds	r3, #2
 8002774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002778:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	220f      	movs	r2, #15
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4013      	ands	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002796:	d01f      	beq.n	80027d8 <HAL_GPIO_Init+0x1f8>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a4c      	ldr	r2, [pc, #304]	@ (80028cc <HAL_GPIO_Init+0x2ec>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d019      	beq.n	80027d4 <HAL_GPIO_Init+0x1f4>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a4b      	ldr	r2, [pc, #300]	@ (80028d0 <HAL_GPIO_Init+0x2f0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d013      	beq.n	80027d0 <HAL_GPIO_Init+0x1f0>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a4a      	ldr	r2, [pc, #296]	@ (80028d4 <HAL_GPIO_Init+0x2f4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00d      	beq.n	80027cc <HAL_GPIO_Init+0x1ec>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a49      	ldr	r2, [pc, #292]	@ (80028d8 <HAL_GPIO_Init+0x2f8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d007      	beq.n	80027c8 <HAL_GPIO_Init+0x1e8>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a48      	ldr	r2, [pc, #288]	@ (80028dc <HAL_GPIO_Init+0x2fc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d101      	bne.n	80027c4 <HAL_GPIO_Init+0x1e4>
 80027c0:	2305      	movs	r3, #5
 80027c2:	e00a      	b.n	80027da <HAL_GPIO_Init+0x1fa>
 80027c4:	2306      	movs	r3, #6
 80027c6:	e008      	b.n	80027da <HAL_GPIO_Init+0x1fa>
 80027c8:	2304      	movs	r3, #4
 80027ca:	e006      	b.n	80027da <HAL_GPIO_Init+0x1fa>
 80027cc:	2303      	movs	r3, #3
 80027ce:	e004      	b.n	80027da <HAL_GPIO_Init+0x1fa>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e002      	b.n	80027da <HAL_GPIO_Init+0x1fa>
 80027d4:	2301      	movs	r3, #1
 80027d6:	e000      	b.n	80027da <HAL_GPIO_Init+0x1fa>
 80027d8:	2300      	movs	r3, #0
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	f002 0203 	and.w	r2, r2, #3
 80027e0:	0092      	lsls	r2, r2, #2
 80027e2:	4093      	lsls	r3, r2
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ea:	4937      	ldr	r1, [pc, #220]	@ (80028c8 <HAL_GPIO_Init+0x2e8>)
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	089b      	lsrs	r3, r3, #2
 80027f0:	3302      	adds	r3, #2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027f8:	4b39      	ldr	r3, [pc, #228]	@ (80028e0 <HAL_GPIO_Init+0x300>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	43db      	mvns	r3, r3
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4013      	ands	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800281c:	4a30      	ldr	r2, [pc, #192]	@ (80028e0 <HAL_GPIO_Init+0x300>)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002822:	4b2f      	ldr	r3, [pc, #188]	@ (80028e0 <HAL_GPIO_Init+0x300>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	43db      	mvns	r3, r3
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4013      	ands	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002846:	4a26      	ldr	r2, [pc, #152]	@ (80028e0 <HAL_GPIO_Init+0x300>)
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800284c:	4b24      	ldr	r3, [pc, #144]	@ (80028e0 <HAL_GPIO_Init+0x300>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	43db      	mvns	r3, r3
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002870:	4a1b      	ldr	r2, [pc, #108]	@ (80028e0 <HAL_GPIO_Init+0x300>)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002876:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <HAL_GPIO_Init+0x300>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	43db      	mvns	r3, r3
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4013      	ands	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800289a:	4a11      	ldr	r2, [pc, #68]	@ (80028e0 <HAL_GPIO_Init+0x300>)
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	3301      	adds	r3, #1
 80028a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f47f ae9d 	bne.w	80025f0 <HAL_GPIO_Init+0x10>
  }
}
 80028b6:	bf00      	nop
 80028b8:	bf00      	nop
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40010000 	.word	0x40010000
 80028cc:	48000400 	.word	0x48000400
 80028d0:	48000800 	.word	0x48000800
 80028d4:	48000c00 	.word	0x48000c00
 80028d8:	48001000 	.word	0x48001000
 80028dc:	48001400 	.word	0x48001400
 80028e0:	40010400 	.word	0x40010400

080028e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	807b      	strh	r3, [r7, #2]
 80028f0:	4613      	mov	r3, r2
 80028f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028f4:	787b      	ldrb	r3, [r7, #1]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028fa:	887a      	ldrh	r2, [r7, #2]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002900:	e002      	b.n	8002908 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002902:	887a      	ldrh	r2, [r7, #2]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d141      	bne.n	80029a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002922:	4b4b      	ldr	r3, [pc, #300]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800292a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800292e:	d131      	bne.n	8002994 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002930:	4b47      	ldr	r3, [pc, #284]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002936:	4a46      	ldr	r2, [pc, #280]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800293c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002940:	4b43      	ldr	r3, [pc, #268]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002948:	4a41      	ldr	r2, [pc, #260]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800294a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800294e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002950:	4b40      	ldr	r3, [pc, #256]	@ (8002a54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2232      	movs	r2, #50	@ 0x32
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	4a3f      	ldr	r2, [pc, #252]	@ (8002a58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	0c9b      	lsrs	r3, r3, #18
 8002962:	3301      	adds	r3, #1
 8002964:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002966:	e002      	b.n	800296e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	3b01      	subs	r3, #1
 800296c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800296e:	4b38      	ldr	r3, [pc, #224]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800297a:	d102      	bne.n	8002982 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f2      	bne.n	8002968 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002982:	4b33      	ldr	r3, [pc, #204]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800298a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800298e:	d158      	bne.n	8002a42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e057      	b.n	8002a44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002994:	4b2e      	ldr	r3, [pc, #184]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800299a:	4a2d      	ldr	r2, [pc, #180]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800299c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80029a4:	e04d      	b.n	8002a42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029ac:	d141      	bne.n	8002a32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029ae:	4b28      	ldr	r3, [pc, #160]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ba:	d131      	bne.n	8002a20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029bc:	4b24      	ldr	r3, [pc, #144]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029c2:	4a23      	ldr	r2, [pc, #140]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029cc:	4b20      	ldr	r3, [pc, #128]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2232      	movs	r2, #50	@ 0x32
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029e8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ec:	0c9b      	lsrs	r3, r3, #18
 80029ee:	3301      	adds	r3, #1
 80029f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029f2:	e002      	b.n	80029fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029fa:	4b15      	ldr	r3, [pc, #84]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a06:	d102      	bne.n	8002a0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f2      	bne.n	80029f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a0e:	4b10      	ldr	r3, [pc, #64]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a1a:	d112      	bne.n	8002a42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e011      	b.n	8002a44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a20:	4b0b      	ldr	r3, [pc, #44]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a26:	4a0a      	ldr	r2, [pc, #40]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a30:	e007      	b.n	8002a42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a32:	4b07      	ldr	r3, [pc, #28]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a3a:	4a05      	ldr	r2, [pc, #20]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a40:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	40007000 	.word	0x40007000
 8002a54:	20000084 	.word	0x20000084
 8002a58:	431bde83 	.word	0x431bde83

08002a5c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002a60:	4b05      	ldr	r3, [pc, #20]	@ (8002a78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4a04      	ldr	r2, [pc, #16]	@ (8002a78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a6a:	6093      	str	r3, [r2, #8]
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40007000 	.word	0x40007000

08002a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e2fe      	b.n	800308c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d075      	beq.n	8002b86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a9a:	4b97      	ldr	r3, [pc, #604]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
 8002aa2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aa4:	4b94      	ldr	r3, [pc, #592]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	2b0c      	cmp	r3, #12
 8002ab2:	d102      	bne.n	8002aba <HAL_RCC_OscConfig+0x3e>
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d002      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x44>
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d10b      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	4b8d      	ldr	r3, [pc, #564]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d05b      	beq.n	8002b84 <HAL_RCC_OscConfig+0x108>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d157      	bne.n	8002b84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e2d9      	b.n	800308c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ae0:	d106      	bne.n	8002af0 <HAL_RCC_OscConfig+0x74>
 8002ae2:	4b85      	ldr	r3, [pc, #532]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a84      	ldr	r2, [pc, #528]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e01d      	b.n	8002b2c <HAL_RCC_OscConfig+0xb0>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x98>
 8002afa:	4b7f      	ldr	r3, [pc, #508]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a7e      	ldr	r2, [pc, #504]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002b00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	4b7c      	ldr	r3, [pc, #496]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a7b      	ldr	r2, [pc, #492]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e00b      	b.n	8002b2c <HAL_RCC_OscConfig+0xb0>
 8002b14:	4b78      	ldr	r3, [pc, #480]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a77      	ldr	r2, [pc, #476]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b75      	ldr	r3, [pc, #468]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a74      	ldr	r2, [pc, #464]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7ff fc42 	bl	80023bc <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7ff fc3e 	bl	80023bc <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	@ 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e29e      	b.n	800308c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b4e:	4b6a      	ldr	r3, [pc, #424]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0xc0>
 8002b5a:	e014      	b.n	8002b86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7ff fc2e 	bl	80023bc <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b64:	f7ff fc2a 	bl	80023bc <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	@ 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e28a      	b.n	800308c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b76:	4b60      	ldr	r3, [pc, #384]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0xe8>
 8002b82:	e000      	b.n	8002b86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d075      	beq.n	8002c7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b92:	4b59      	ldr	r3, [pc, #356]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b9c:	4b56      	ldr	r3, [pc, #344]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b0c      	cmp	r3, #12
 8002baa:	d102      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x136>
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d002      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x13c>
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d11f      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bb8:	4b4f      	ldr	r3, [pc, #316]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x154>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e25d      	b.n	800308c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd0:	4b49      	ldr	r3, [pc, #292]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	061b      	lsls	r3, r3, #24
 8002bde:	4946      	ldr	r1, [pc, #280]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002be4:	4b45      	ldr	r3, [pc, #276]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fb9b 	bl	8002324 <HAL_InitTick>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d043      	beq.n	8002c7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e249      	b.n	800308c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d023      	beq.n	8002c48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c00:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a3c      	ldr	r2, [pc, #240]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7ff fbd6 	bl	80023bc <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c14:	f7ff fbd2 	bl	80023bc <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e232      	b.n	800308c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c26:	4b34      	ldr	r3, [pc, #208]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c32:	4b31      	ldr	r3, [pc, #196]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	061b      	lsls	r3, r3, #24
 8002c40:	492d      	ldr	r1, [pc, #180]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	604b      	str	r3, [r1, #4]
 8002c46:	e01a      	b.n	8002c7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c48:	4b2b      	ldr	r3, [pc, #172]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002c4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7ff fbb2 	bl	80023bc <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5c:	f7ff fbae 	bl	80023bc <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e20e      	b.n	800308c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c6e:	4b22      	ldr	r3, [pc, #136]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x1e0>
 8002c7a:	e000      	b.n	8002c7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d041      	beq.n	8002d0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01c      	beq.n	8002ccc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c92:	4b19      	ldr	r3, [pc, #100]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c98:	4a17      	ldr	r2, [pc, #92]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca2:	f7ff fb8b 	bl	80023bc <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002caa:	f7ff fb87 	bl	80023bc <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e1e7      	b.n	800308c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0ef      	beq.n	8002caa <HAL_RCC_OscConfig+0x22e>
 8002cca:	e020      	b.n	8002d0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cd2:	4a09      	ldr	r2, [pc, #36]	@ (8002cf8 <HAL_RCC_OscConfig+0x27c>)
 8002cd4:	f023 0301 	bic.w	r3, r3, #1
 8002cd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7ff fb6e 	bl	80023bc <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ce2:	e00d      	b.n	8002d00 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce4:	f7ff fb6a 	bl	80023bc <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d906      	bls.n	8002d00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e1ca      	b.n	800308c <HAL_RCC_OscConfig+0x610>
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	20000088 	.word	0x20000088
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d00:	4b8c      	ldr	r3, [pc, #560]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1ea      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80a6 	beq.w	8002e68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d20:	4b84      	ldr	r3, [pc, #528]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_OscConfig+0x2b4>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <HAL_RCC_OscConfig+0x2b6>
 8002d30:	2300      	movs	r3, #0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00d      	beq.n	8002d52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	4b7f      	ldr	r3, [pc, #508]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3a:	4a7e      	ldr	r2, [pc, #504]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d40:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d42:	4b7c      	ldr	r3, [pc, #496]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d52:	4b79      	ldr	r3, [pc, #484]	@ (8002f38 <HAL_RCC_OscConfig+0x4bc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d118      	bne.n	8002d90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d5e:	4b76      	ldr	r3, [pc, #472]	@ (8002f38 <HAL_RCC_OscConfig+0x4bc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a75      	ldr	r2, [pc, #468]	@ (8002f38 <HAL_RCC_OscConfig+0x4bc>)
 8002d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6a:	f7ff fb27 	bl	80023bc <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d72:	f7ff fb23 	bl	80023bc <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e183      	b.n	800308c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d84:	4b6c      	ldr	r3, [pc, #432]	@ (8002f38 <HAL_RCC_OscConfig+0x4bc>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d108      	bne.n	8002daa <HAL_RCC_OscConfig+0x32e>
 8002d98:	4b66      	ldr	r3, [pc, #408]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d9e:	4a65      	ldr	r2, [pc, #404]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002da8:	e024      	b.n	8002df4 <HAL_RCC_OscConfig+0x378>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b05      	cmp	r3, #5
 8002db0:	d110      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x358>
 8002db2:	4b60      	ldr	r3, [pc, #384]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db8:	4a5e      	ldr	r2, [pc, #376]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002dba:	f043 0304 	orr.w	r3, r3, #4
 8002dbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc8:	4a5a      	ldr	r2, [pc, #360]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dd2:	e00f      	b.n	8002df4 <HAL_RCC_OscConfig+0x378>
 8002dd4:	4b57      	ldr	r3, [pc, #348]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dda:	4a56      	ldr	r2, [pc, #344]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002ddc:	f023 0301 	bic.w	r3, r3, #1
 8002de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002de4:	4b53      	ldr	r3, [pc, #332]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dea:	4a52      	ldr	r2, [pc, #328]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002dec:	f023 0304 	bic.w	r3, r3, #4
 8002df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d016      	beq.n	8002e2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f7ff fade 	bl	80023bc <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e02:	e00a      	b.n	8002e1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e04:	f7ff fada 	bl	80023bc <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e138      	b.n	800308c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e1a:	4b46      	ldr	r3, [pc, #280]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0ed      	beq.n	8002e04 <HAL_RCC_OscConfig+0x388>
 8002e28:	e015      	b.n	8002e56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2a:	f7ff fac7 	bl	80023bc <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7ff fac3 	bl	80023bc <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e121      	b.n	800308c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e48:	4b3a      	ldr	r3, [pc, #232]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1ed      	bne.n	8002e32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e56:	7ffb      	ldrb	r3, [r7, #31]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d105      	bne.n	8002e68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5c:	4b35      	ldr	r3, [pc, #212]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e60:	4a34      	ldr	r2, [pc, #208]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002e62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e66:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d03c      	beq.n	8002eee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01c      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e82:	4a2c      	ldr	r2, [pc, #176]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8c:	f7ff fa96 	bl	80023bc <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e94:	f7ff fa92 	bl	80023bc <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e0f2      	b.n	800308c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ea6:	4b23      	ldr	r3, [pc, #140]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0ef      	beq.n	8002e94 <HAL_RCC_OscConfig+0x418>
 8002eb4:	e01b      	b.n	8002eee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec6:	f7ff fa79 	bl	80023bc <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ece:	f7ff fa75 	bl	80023bc <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e0d5      	b.n	800308c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ee0:	4b14      	ldr	r3, [pc, #80]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1ef      	bne.n	8002ece <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 80c9 	beq.w	800308a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b0c      	cmp	r3, #12
 8002f02:	f000 8083 	beq.w	800300c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d15e      	bne.n	8002fcc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b09      	ldr	r3, [pc, #36]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a08      	ldr	r2, [pc, #32]	@ (8002f34 <HAL_RCC_OscConfig+0x4b8>)
 8002f14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1a:	f7ff fa4f 	bl	80023bc <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f20:	e00c      	b.n	8002f3c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f22:	f7ff fa4b 	bl	80023bc <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d905      	bls.n	8002f3c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e0ab      	b.n	800308c <HAL_RCC_OscConfig+0x610>
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f3c:	4b55      	ldr	r3, [pc, #340]	@ (8003094 <HAL_RCC_OscConfig+0x618>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ec      	bne.n	8002f22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f48:	4b52      	ldr	r3, [pc, #328]	@ (8003094 <HAL_RCC_OscConfig+0x618>)
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	4b52      	ldr	r3, [pc, #328]	@ (8003098 <HAL_RCC_OscConfig+0x61c>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6a11      	ldr	r1, [r2, #32]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f58:	3a01      	subs	r2, #1
 8002f5a:	0112      	lsls	r2, r2, #4
 8002f5c:	4311      	orrs	r1, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002f62:	0212      	lsls	r2, r2, #8
 8002f64:	4311      	orrs	r1, r2
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f6a:	0852      	lsrs	r2, r2, #1
 8002f6c:	3a01      	subs	r2, #1
 8002f6e:	0552      	lsls	r2, r2, #21
 8002f70:	4311      	orrs	r1, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f76:	0852      	lsrs	r2, r2, #1
 8002f78:	3a01      	subs	r2, #1
 8002f7a:	0652      	lsls	r2, r2, #25
 8002f7c:	4311      	orrs	r1, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f82:	06d2      	lsls	r2, r2, #27
 8002f84:	430a      	orrs	r2, r1
 8002f86:	4943      	ldr	r1, [pc, #268]	@ (8003094 <HAL_RCC_OscConfig+0x618>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f8c:	4b41      	ldr	r3, [pc, #260]	@ (8003094 <HAL_RCC_OscConfig+0x618>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a40      	ldr	r2, [pc, #256]	@ (8003094 <HAL_RCC_OscConfig+0x618>)
 8002f92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f98:	4b3e      	ldr	r3, [pc, #248]	@ (8003094 <HAL_RCC_OscConfig+0x618>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4a3d      	ldr	r2, [pc, #244]	@ (8003094 <HAL_RCC_OscConfig+0x618>)
 8002f9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fa2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7ff fa0a 	bl	80023bc <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fac:	f7ff fa06 	bl	80023bc <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e066      	b.n	800308c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fbe:	4b35      	ldr	r3, [pc, #212]	@ (8003094 <HAL_RCC_OscConfig+0x618>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x530>
 8002fca:	e05e      	b.n	800308a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fcc:	4b31      	ldr	r3, [pc, #196]	@ (8003094 <HAL_RCC_OscConfig+0x618>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a30      	ldr	r2, [pc, #192]	@ (8003094 <HAL_RCC_OscConfig+0x618>)
 8002fd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7ff f9f0 	bl	80023bc <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7ff f9ec 	bl	80023bc <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e04c      	b.n	800308c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff2:	4b28      	ldr	r3, [pc, #160]	@ (8003094 <HAL_RCC_OscConfig+0x618>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002ffe:	4b25      	ldr	r3, [pc, #148]	@ (8003094 <HAL_RCC_OscConfig+0x618>)
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	4924      	ldr	r1, [pc, #144]	@ (8003094 <HAL_RCC_OscConfig+0x618>)
 8003004:	4b25      	ldr	r3, [pc, #148]	@ (800309c <HAL_RCC_OscConfig+0x620>)
 8003006:	4013      	ands	r3, r2
 8003008:	60cb      	str	r3, [r1, #12]
 800300a:	e03e      	b.n	800308a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e039      	b.n	800308c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003018:	4b1e      	ldr	r3, [pc, #120]	@ (8003094 <HAL_RCC_OscConfig+0x618>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f003 0203 	and.w	r2, r3, #3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	429a      	cmp	r2, r3
 800302a:	d12c      	bne.n	8003086 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003036:	3b01      	subs	r3, #1
 8003038:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303a:	429a      	cmp	r2, r3
 800303c:	d123      	bne.n	8003086 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003048:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800304a:	429a      	cmp	r2, r3
 800304c:	d11b      	bne.n	8003086 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003058:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800305a:	429a      	cmp	r2, r3
 800305c:	d113      	bne.n	8003086 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003068:	085b      	lsrs	r3, r3, #1
 800306a:	3b01      	subs	r3, #1
 800306c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d109      	bne.n	8003086 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	3b01      	subs	r3, #1
 8003080:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d001      	beq.n	800308a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3720      	adds	r7, #32
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000
 8003098:	019f800c 	.word	0x019f800c
 800309c:	feeefffc 	.word	0xfeeefffc

080030a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e11e      	b.n	80032f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b8:	4b91      	ldr	r3, [pc, #580]	@ (8003300 <HAL_RCC_ClockConfig+0x260>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d910      	bls.n	80030e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b8e      	ldr	r3, [pc, #568]	@ (8003300 <HAL_RCC_ClockConfig+0x260>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 020f 	bic.w	r2, r3, #15
 80030ce:	498c      	ldr	r1, [pc, #560]	@ (8003300 <HAL_RCC_ClockConfig+0x260>)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b8a      	ldr	r3, [pc, #552]	@ (8003300 <HAL_RCC_ClockConfig+0x260>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e106      	b.n	80032f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d073      	beq.n	80031dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d129      	bne.n	8003150 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fc:	4b81      	ldr	r3, [pc, #516]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0f4      	b.n	80032f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800310c:	f000 f99e 	bl	800344c <RCC_GetSysClockFreqFromPLLSource>
 8003110:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4a7c      	ldr	r2, [pc, #496]	@ (8003308 <HAL_RCC_ClockConfig+0x268>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d93f      	bls.n	800319a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800311a:	4b7a      	ldr	r3, [pc, #488]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800312e:	2b00      	cmp	r3, #0
 8003130:	d033      	beq.n	800319a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003136:	2b00      	cmp	r3, #0
 8003138:	d12f      	bne.n	800319a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800313a:	4b72      	ldr	r3, [pc, #456]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003142:	4a70      	ldr	r2, [pc, #448]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 8003144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003148:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800314a:	2380      	movs	r3, #128	@ 0x80
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	e024      	b.n	800319a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d107      	bne.n	8003168 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003158:	4b6a      	ldr	r3, [pc, #424]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d109      	bne.n	8003178 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0c6      	b.n	80032f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003168:	4b66      	ldr	r3, [pc, #408]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0be      	b.n	80032f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003178:	f000 f8ce 	bl	8003318 <HAL_RCC_GetSysClockFreq>
 800317c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4a61      	ldr	r2, [pc, #388]	@ (8003308 <HAL_RCC_ClockConfig+0x268>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d909      	bls.n	800319a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003186:	4b5f      	ldr	r3, [pc, #380]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800318e:	4a5d      	ldr	r2, [pc, #372]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 8003190:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003194:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003196:	2380      	movs	r3, #128	@ 0x80
 8003198:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800319a:	4b5a      	ldr	r3, [pc, #360]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f023 0203 	bic.w	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4957      	ldr	r1, [pc, #348]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ac:	f7ff f906 	bl	80023bc <HAL_GetTick>
 80031b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b4:	f7ff f902 	bl	80023bc <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e095      	b.n	80032f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ca:	4b4e      	ldr	r3, [pc, #312]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 020c 	and.w	r2, r3, #12
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	429a      	cmp	r2, r3
 80031da:	d1eb      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d023      	beq.n	8003230 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031f4:	4b43      	ldr	r3, [pc, #268]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	4a42      	ldr	r2, [pc, #264]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 80031fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d007      	beq.n	800321c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800320c:	4b3d      	ldr	r3, [pc, #244]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003214:	4a3b      	ldr	r2, [pc, #236]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 8003216:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800321a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800321c:	4b39      	ldr	r3, [pc, #228]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	4936      	ldr	r1, [pc, #216]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 800322a:	4313      	orrs	r3, r2
 800322c:	608b      	str	r3, [r1, #8]
 800322e:	e008      	b.n	8003242 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2b80      	cmp	r3, #128	@ 0x80
 8003234:	d105      	bne.n	8003242 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003236:	4b33      	ldr	r3, [pc, #204]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	4a32      	ldr	r2, [pc, #200]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 800323c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003240:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003242:	4b2f      	ldr	r3, [pc, #188]	@ (8003300 <HAL_RCC_ClockConfig+0x260>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d21d      	bcs.n	800328c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003250:	4b2b      	ldr	r3, [pc, #172]	@ (8003300 <HAL_RCC_ClockConfig+0x260>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f023 020f 	bic.w	r2, r3, #15
 8003258:	4929      	ldr	r1, [pc, #164]	@ (8003300 <HAL_RCC_ClockConfig+0x260>)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	4313      	orrs	r3, r2
 800325e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003260:	f7ff f8ac 	bl	80023bc <HAL_GetTick>
 8003264:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003266:	e00a      	b.n	800327e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003268:	f7ff f8a8 	bl	80023bc <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e03b      	b.n	80032f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b20      	ldr	r3, [pc, #128]	@ (8003300 <HAL_RCC_ClockConfig+0x260>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d1ed      	bne.n	8003268 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003298:	4b1a      	ldr	r3, [pc, #104]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4917      	ldr	r1, [pc, #92]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032b6:	4b13      	ldr	r3, [pc, #76]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	490f      	ldr	r1, [pc, #60]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032ca:	f000 f825 	bl	8003318 <HAL_RCC_GetSysClockFreq>
 80032ce:	4602      	mov	r2, r0
 80032d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003304 <HAL_RCC_ClockConfig+0x264>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	091b      	lsrs	r3, r3, #4
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	490c      	ldr	r1, [pc, #48]	@ (800330c <HAL_RCC_ClockConfig+0x26c>)
 80032dc:	5ccb      	ldrb	r3, [r1, r3]
 80032de:	f003 031f 	and.w	r3, r3, #31
 80032e2:	fa22 f303 	lsr.w	r3, r2, r3
 80032e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003310 <HAL_RCC_ClockConfig+0x270>)
 80032e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80032ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <HAL_RCC_ClockConfig+0x274>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff f818 	bl	8002324 <HAL_InitTick>
 80032f4:	4603      	mov	r3, r0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40022000 	.word	0x40022000
 8003304:	40021000 	.word	0x40021000
 8003308:	04c4b400 	.word	0x04c4b400
 800330c:	08005db8 	.word	0x08005db8
 8003310:	20000084 	.word	0x20000084
 8003314:	20000088 	.word	0x20000088

08003318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800331e:	4b2c      	ldr	r3, [pc, #176]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	2b04      	cmp	r3, #4
 8003328:	d102      	bne.n	8003330 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800332a:	4b2a      	ldr	r3, [pc, #168]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	e047      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003330:	4b27      	ldr	r3, [pc, #156]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b08      	cmp	r3, #8
 800333a:	d102      	bne.n	8003342 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800333c:	4b26      	ldr	r3, [pc, #152]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	e03e      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003342:	4b23      	ldr	r3, [pc, #140]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b0c      	cmp	r3, #12
 800334c:	d136      	bne.n	80033bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800334e:	4b20      	ldr	r3, [pc, #128]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003358:	4b1d      	ldr	r3, [pc, #116]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	3301      	adds	r3, #1
 8003364:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b03      	cmp	r3, #3
 800336a:	d10c      	bne.n	8003386 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800336c:	4a1a      	ldr	r2, [pc, #104]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	fbb2 f3f3 	udiv	r3, r2, r3
 8003374:	4a16      	ldr	r2, [pc, #88]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003376:	68d2      	ldr	r2, [r2, #12]
 8003378:	0a12      	lsrs	r2, r2, #8
 800337a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800337e:	fb02 f303 	mul.w	r3, r2, r3
 8003382:	617b      	str	r3, [r7, #20]
      break;
 8003384:	e00c      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003386:	4a13      	ldr	r2, [pc, #76]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	fbb2 f3f3 	udiv	r3, r2, r3
 800338e:	4a10      	ldr	r2, [pc, #64]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003390:	68d2      	ldr	r2, [r2, #12]
 8003392:	0a12      	lsrs	r2, r2, #8
 8003394:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003398:	fb02 f303 	mul.w	r3, r2, r3
 800339c:	617b      	str	r3, [r7, #20]
      break;
 800339e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033a0:	4b0b      	ldr	r3, [pc, #44]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	0e5b      	lsrs	r3, r3, #25
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	3301      	adds	r3, #1
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	e001      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80033c0:	693b      	ldr	r3, [r7, #16]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40021000 	.word	0x40021000
 80033d4:	00f42400 	.word	0x00f42400
 80033d8:	007a1200 	.word	0x007a1200

080033dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e0:	4b03      	ldr	r3, [pc, #12]	@ (80033f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033e2:	681b      	ldr	r3, [r3, #0]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	20000084 	.word	0x20000084

080033f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033f8:	f7ff fff0 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 80033fc:	4602      	mov	r2, r0
 80033fe:	4b06      	ldr	r3, [pc, #24]	@ (8003418 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	0a1b      	lsrs	r3, r3, #8
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	4904      	ldr	r1, [pc, #16]	@ (800341c <HAL_RCC_GetPCLK1Freq+0x28>)
 800340a:	5ccb      	ldrb	r3, [r1, r3]
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40021000 	.word	0x40021000
 800341c:	08005dc8 	.word	0x08005dc8

08003420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003424:	f7ff ffda 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 8003428:	4602      	mov	r2, r0
 800342a:	4b06      	ldr	r3, [pc, #24]	@ (8003444 <HAL_RCC_GetPCLK2Freq+0x24>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	0adb      	lsrs	r3, r3, #11
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	4904      	ldr	r1, [pc, #16]	@ (8003448 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003436:	5ccb      	ldrb	r3, [r1, r3]
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40021000 	.word	0x40021000
 8003448:	08005dc8 	.word	0x08005dc8

0800344c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003452:	4b1e      	ldr	r3, [pc, #120]	@ (80034cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800345c:	4b1b      	ldr	r3, [pc, #108]	@ (80034cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	3301      	adds	r3, #1
 8003468:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d10c      	bne.n	800348a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003470:	4a17      	ldr	r2, [pc, #92]	@ (80034d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	fbb2 f3f3 	udiv	r3, r2, r3
 8003478:	4a14      	ldr	r2, [pc, #80]	@ (80034cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800347a:	68d2      	ldr	r2, [r2, #12]
 800347c:	0a12      	lsrs	r2, r2, #8
 800347e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003482:	fb02 f303 	mul.w	r3, r2, r3
 8003486:	617b      	str	r3, [r7, #20]
    break;
 8003488:	e00c      	b.n	80034a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800348a:	4a12      	ldr	r2, [pc, #72]	@ (80034d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003492:	4a0e      	ldr	r2, [pc, #56]	@ (80034cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003494:	68d2      	ldr	r2, [r2, #12]
 8003496:	0a12      	lsrs	r2, r2, #8
 8003498:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800349c:	fb02 f303 	mul.w	r3, r2, r3
 80034a0:	617b      	str	r3, [r7, #20]
    break;
 80034a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034a4:	4b09      	ldr	r3, [pc, #36]	@ (80034cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	0e5b      	lsrs	r3, r3, #25
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	3301      	adds	r3, #1
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80034be:	687b      	ldr	r3, [r7, #4]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	371c      	adds	r7, #28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	40021000 	.word	0x40021000
 80034d0:	007a1200 	.word	0x007a1200
 80034d4:	00f42400 	.word	0x00f42400

080034d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034e0:	2300      	movs	r3, #0
 80034e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034e4:	2300      	movs	r3, #0
 80034e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8098 	beq.w	8003626 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f6:	2300      	movs	r3, #0
 80034f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fa:	4b43      	ldr	r3, [pc, #268]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10d      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003506:	4b40      	ldr	r3, [pc, #256]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350a:	4a3f      	ldr	r2, [pc, #252]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800350c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003510:	6593      	str	r3, [r2, #88]	@ 0x58
 8003512:	4b3d      	ldr	r3, [pc, #244]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351e:	2301      	movs	r3, #1
 8003520:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003522:	4b3a      	ldr	r3, [pc, #232]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a39      	ldr	r2, [pc, #228]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800352c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800352e:	f7fe ff45 	bl	80023bc <HAL_GetTick>
 8003532:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003534:	e009      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003536:	f7fe ff41 	bl	80023bc <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d902      	bls.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	74fb      	strb	r3, [r7, #19]
        break;
 8003548:	e005      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800354a:	4b30      	ldr	r3, [pc, #192]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0ef      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003556:	7cfb      	ldrb	r3, [r7, #19]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d159      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800355c:	4b2a      	ldr	r3, [pc, #168]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003566:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d01e      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	429a      	cmp	r2, r3
 8003576:	d019      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003578:	4b23      	ldr	r3, [pc, #140]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800357a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800357e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003582:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003584:	4b20      	ldr	r3, [pc, #128]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358a:	4a1f      	ldr	r2, [pc, #124]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800358c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003594:	4b1c      	ldr	r3, [pc, #112]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800359a:	4a1b      	ldr	r2, [pc, #108]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800359c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035a4:	4a18      	ldr	r2, [pc, #96]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d016      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b6:	f7fe ff01 	bl	80023bc <HAL_GetTick>
 80035ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035bc:	e00b      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035be:	f7fe fefd 	bl	80023bc <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d902      	bls.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	74fb      	strb	r3, [r7, #19]
            break;
 80035d4:	e006      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0ec      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80035e4:	7cfb      	ldrb	r3, [r7, #19]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10b      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035ea:	4b07      	ldr	r3, [pc, #28]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f8:	4903      	ldr	r1, [pc, #12]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003600:	e008      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003602:	7cfb      	ldrb	r3, [r7, #19]
 8003604:	74bb      	strb	r3, [r7, #18]
 8003606:	e005      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003608:	40021000 	.word	0x40021000
 800360c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003614:	7c7b      	ldrb	r3, [r7, #17]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d105      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800361a:	4ba7      	ldr	r3, [pc, #668]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361e:	4aa6      	ldr	r2, [pc, #664]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003620:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003624:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003632:	4ba1      	ldr	r3, [pc, #644]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003638:	f023 0203 	bic.w	r2, r3, #3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	499d      	ldr	r1, [pc, #628]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003654:	4b98      	ldr	r3, [pc, #608]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365a:	f023 020c 	bic.w	r2, r3, #12
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	4995      	ldr	r1, [pc, #596]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003676:	4b90      	ldr	r3, [pc, #576]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	498c      	ldr	r1, [pc, #560]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003698:	4b87      	ldr	r3, [pc, #540]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	4984      	ldr	r1, [pc, #528]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036ba:	4b7f      	ldr	r3, [pc, #508]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	497b      	ldr	r1, [pc, #492]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036dc:	4b76      	ldr	r3, [pc, #472]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	4973      	ldr	r1, [pc, #460]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036fe:	4b6e      	ldr	r3, [pc, #440]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003704:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	496a      	ldr	r1, [pc, #424]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003720:	4b65      	ldr	r3, [pc, #404]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003726:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	4962      	ldr	r1, [pc, #392]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003742:	4b5d      	ldr	r3, [pc, #372]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003748:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	4959      	ldr	r1, [pc, #356]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003764:	4b54      	ldr	r3, [pc, #336]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003766:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800376a:	f023 0203 	bic.w	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003772:	4951      	ldr	r1, [pc, #324]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003786:	4b4c      	ldr	r3, [pc, #304]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003794:	4948      	ldr	r1, [pc, #288]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d015      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037a8:	4b43      	ldr	r3, [pc, #268]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b6:	4940      	ldr	r1, [pc, #256]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037c6:	d105      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037c8:	4b3b      	ldr	r3, [pc, #236]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4a3a      	ldr	r2, [pc, #232]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037d2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d015      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037e0:	4b35      	ldr	r3, [pc, #212]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ee:	4932      	ldr	r1, [pc, #200]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037fe:	d105      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003800:	4b2d      	ldr	r3, [pc, #180]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4a2c      	ldr	r2, [pc, #176]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003806:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800380a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d015      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003818:	4b27      	ldr	r3, [pc, #156]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003826:	4924      	ldr	r1, [pc, #144]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003832:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003836:	d105      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003838:	4b1f      	ldr	r3, [pc, #124]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4a1e      	ldr	r2, [pc, #120]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800383e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003842:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d015      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003850:	4b19      	ldr	r3, [pc, #100]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003856:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385e:	4916      	ldr	r1, [pc, #88]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003860:	4313      	orrs	r3, r2
 8003862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800386e:	d105      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003870:	4b11      	ldr	r3, [pc, #68]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4a10      	ldr	r2, [pc, #64]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003876:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800387a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d019      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003888:	4b0b      	ldr	r3, [pc, #44]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003896:	4908      	ldr	r1, [pc, #32]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038a6:	d109      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a8:	4b03      	ldr	r3, [pc, #12]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4a02      	ldr	r2, [pc, #8]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038b2:	60d3      	str	r3, [r2, #12]
 80038b4:	e002      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d015      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038c8:	4b29      	ldr	r3, [pc, #164]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d6:	4926      	ldr	r1, [pc, #152]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038e6:	d105      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80038e8:	4b21      	ldr	r3, [pc, #132]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4a20      	ldr	r2, [pc, #128]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038f2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d015      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003900:	4b1b      	ldr	r3, [pc, #108]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003906:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800390e:	4918      	ldr	r1, [pc, #96]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800391a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800391e:	d105      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003920:	4b13      	ldr	r3, [pc, #76]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4a12      	ldr	r2, [pc, #72]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800392a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d015      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003938:	4b0d      	ldr	r3, [pc, #52]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800393a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800393e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003946:	490a      	ldr	r1, [pc, #40]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003952:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003956:	d105      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003958:	4b05      	ldr	r3, [pc, #20]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4a04      	ldr	r2, [pc, #16]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800395e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003962:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003964:	7cbb      	ldrb	r3, [r7, #18]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000

08003974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e049      	b.n	8003a1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fe fac2 	bl	8001f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	4619      	mov	r1, r3
 80039b2:	4610      	mov	r0, r2
 80039b4:	f000 fd96 	bl	80044e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d001      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e054      	b.n	8003ae6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a26      	ldr	r2, [pc, #152]	@ (8003af4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d022      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x80>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a66:	d01d      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x80>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a22      	ldr	r2, [pc, #136]	@ (8003af8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d018      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x80>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a21      	ldr	r2, [pc, #132]	@ (8003afc <HAL_TIM_Base_Start_IT+0xd8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d013      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x80>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a1f      	ldr	r2, [pc, #124]	@ (8003b00 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00e      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x80>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003b04 <HAL_TIM_Base_Start_IT+0xe0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d009      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x80>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1c      	ldr	r2, [pc, #112]	@ (8003b08 <HAL_TIM_Base_Start_IT+0xe4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d004      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x80>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1b      	ldr	r2, [pc, #108]	@ (8003b0c <HAL_TIM_Base_Start_IT+0xe8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d115      	bne.n	8003ad0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	4b19      	ldr	r3, [pc, #100]	@ (8003b10 <HAL_TIM_Base_Start_IT+0xec>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b06      	cmp	r3, #6
 8003ab4:	d015      	beq.n	8003ae2 <HAL_TIM_Base_Start_IT+0xbe>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003abc:	d011      	beq.n	8003ae2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0201 	orr.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ace:	e008      	b.n	8003ae2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0201 	orr.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	e000      	b.n	8003ae4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40012c00 	.word	0x40012c00
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40000800 	.word	0x40000800
 8003b00:	40000c00 	.word	0x40000c00
 8003b04:	40013400 	.word	0x40013400
 8003b08:	40014000 	.word	0x40014000
 8003b0c:	40015000 	.word	0x40015000
 8003b10:	00010007 	.word	0x00010007

08003b14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e049      	b.n	8003bba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f841 	bl	8003bc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	4619      	mov	r1, r3
 8003b52:	4610      	mov	r0, r2
 8003b54:	f000 fcc6 	bl	80044e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
	...

08003bd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d109      	bne.n	8003bfc <HAL_TIM_PWM_Start+0x24>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	bf14      	ite	ne
 8003bf4:	2301      	movne	r3, #1
 8003bf6:	2300      	moveq	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	e03c      	b.n	8003c76 <HAL_TIM_PWM_Start+0x9e>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d109      	bne.n	8003c16 <HAL_TIM_PWM_Start+0x3e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	bf14      	ite	ne
 8003c0e:	2301      	movne	r3, #1
 8003c10:	2300      	moveq	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	e02f      	b.n	8003c76 <HAL_TIM_PWM_Start+0x9e>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d109      	bne.n	8003c30 <HAL_TIM_PWM_Start+0x58>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	bf14      	ite	ne
 8003c28:	2301      	movne	r3, #1
 8003c2a:	2300      	moveq	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	e022      	b.n	8003c76 <HAL_TIM_PWM_Start+0x9e>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2b0c      	cmp	r3, #12
 8003c34:	d109      	bne.n	8003c4a <HAL_TIM_PWM_Start+0x72>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	bf14      	ite	ne
 8003c42:	2301      	movne	r3, #1
 8003c44:	2300      	moveq	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	e015      	b.n	8003c76 <HAL_TIM_PWM_Start+0x9e>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b10      	cmp	r3, #16
 8003c4e:	d109      	bne.n	8003c64 <HAL_TIM_PWM_Start+0x8c>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	bf14      	ite	ne
 8003c5c:	2301      	movne	r3, #1
 8003c5e:	2300      	moveq	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e008      	b.n	8003c76 <HAL_TIM_PWM_Start+0x9e>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	bf14      	ite	ne
 8003c70:	2301      	movne	r3, #1
 8003c72:	2300      	moveq	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e0a6      	b.n	8003dcc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d104      	bne.n	8003c8e <HAL_TIM_PWM_Start+0xb6>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c8c:	e023      	b.n	8003cd6 <HAL_TIM_PWM_Start+0xfe>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d104      	bne.n	8003c9e <HAL_TIM_PWM_Start+0xc6>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c9c:	e01b      	b.n	8003cd6 <HAL_TIM_PWM_Start+0xfe>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d104      	bne.n	8003cae <HAL_TIM_PWM_Start+0xd6>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cac:	e013      	b.n	8003cd6 <HAL_TIM_PWM_Start+0xfe>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b0c      	cmp	r3, #12
 8003cb2:	d104      	bne.n	8003cbe <HAL_TIM_PWM_Start+0xe6>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cbc:	e00b      	b.n	8003cd6 <HAL_TIM_PWM_Start+0xfe>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b10      	cmp	r3, #16
 8003cc2:	d104      	bne.n	8003cce <HAL_TIM_PWM_Start+0xf6>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ccc:	e003      	b.n	8003cd6 <HAL_TIM_PWM_Start+0xfe>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	6839      	ldr	r1, [r7, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f001 f87a 	bl	8004dd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a3a      	ldr	r2, [pc, #232]	@ (8003dd4 <HAL_TIM_PWM_Start+0x1fc>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d018      	beq.n	8003d20 <HAL_TIM_PWM_Start+0x148>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a39      	ldr	r2, [pc, #228]	@ (8003dd8 <HAL_TIM_PWM_Start+0x200>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d013      	beq.n	8003d20 <HAL_TIM_PWM_Start+0x148>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a37      	ldr	r2, [pc, #220]	@ (8003ddc <HAL_TIM_PWM_Start+0x204>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00e      	beq.n	8003d20 <HAL_TIM_PWM_Start+0x148>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a36      	ldr	r2, [pc, #216]	@ (8003de0 <HAL_TIM_PWM_Start+0x208>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d009      	beq.n	8003d20 <HAL_TIM_PWM_Start+0x148>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a34      	ldr	r2, [pc, #208]	@ (8003de4 <HAL_TIM_PWM_Start+0x20c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d004      	beq.n	8003d20 <HAL_TIM_PWM_Start+0x148>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a33      	ldr	r2, [pc, #204]	@ (8003de8 <HAL_TIM_PWM_Start+0x210>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d101      	bne.n	8003d24 <HAL_TIM_PWM_Start+0x14c>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <HAL_TIM_PWM_Start+0x14e>
 8003d24:	2300      	movs	r3, #0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d007      	beq.n	8003d3a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a25      	ldr	r2, [pc, #148]	@ (8003dd4 <HAL_TIM_PWM_Start+0x1fc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d022      	beq.n	8003d8a <HAL_TIM_PWM_Start+0x1b2>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d4c:	d01d      	beq.n	8003d8a <HAL_TIM_PWM_Start+0x1b2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a26      	ldr	r2, [pc, #152]	@ (8003dec <HAL_TIM_PWM_Start+0x214>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d018      	beq.n	8003d8a <HAL_TIM_PWM_Start+0x1b2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a24      	ldr	r2, [pc, #144]	@ (8003df0 <HAL_TIM_PWM_Start+0x218>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <HAL_TIM_PWM_Start+0x1b2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a23      	ldr	r2, [pc, #140]	@ (8003df4 <HAL_TIM_PWM_Start+0x21c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00e      	beq.n	8003d8a <HAL_TIM_PWM_Start+0x1b2>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a19      	ldr	r2, [pc, #100]	@ (8003dd8 <HAL_TIM_PWM_Start+0x200>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d009      	beq.n	8003d8a <HAL_TIM_PWM_Start+0x1b2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a18      	ldr	r2, [pc, #96]	@ (8003ddc <HAL_TIM_PWM_Start+0x204>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d004      	beq.n	8003d8a <HAL_TIM_PWM_Start+0x1b2>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a18      	ldr	r2, [pc, #96]	@ (8003de8 <HAL_TIM_PWM_Start+0x210>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d115      	bne.n	8003db6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	4b19      	ldr	r3, [pc, #100]	@ (8003df8 <HAL_TIM_PWM_Start+0x220>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b06      	cmp	r3, #6
 8003d9a:	d015      	beq.n	8003dc8 <HAL_TIM_PWM_Start+0x1f0>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003da2:	d011      	beq.n	8003dc8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db4:	e008      	b.n	8003dc8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0201 	orr.w	r2, r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	e000      	b.n	8003dca <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40012c00 	.word	0x40012c00
 8003dd8:	40013400 	.word	0x40013400
 8003ddc:	40014000 	.word	0x40014000
 8003de0:	40014400 	.word	0x40014400
 8003de4:	40014800 	.word	0x40014800
 8003de8:	40015000 	.word	0x40015000
 8003dec:	40000400 	.word	0x40000400
 8003df0:	40000800 	.word	0x40000800
 8003df4:	40000c00 	.word	0x40000c00
 8003df8:	00010007 	.word	0x00010007

08003dfc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e097      	b.n	8003f40 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d106      	bne.n	8003e2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7fd ffa5 	bl	8001d74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003e40:	f023 0307 	bic.w	r3, r3, #7
 8003e44:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4610      	mov	r0, r2
 8003e52:	f000 fb47 	bl	80044e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e7e:	f023 0303 	bic.w	r3, r3, #3
 8003e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	021b      	lsls	r3, r3, #8
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003e9c:	f023 030c 	bic.w	r3, r3, #12
 8003ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ea8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003eac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	021b      	lsls	r3, r3, #8
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	011a      	lsls	r2, r3, #4
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	031b      	lsls	r3, r3, #12
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003eda:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003ee2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f70:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d110      	bne.n	8003f9a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d102      	bne.n	8003f84 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f7e:	7b7b      	ldrb	r3, [r7, #13]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d001      	beq.n	8003f88 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e089      	b.n	800409c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f98:	e031      	b.n	8003ffe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d110      	bne.n	8003fc2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fa0:	7bbb      	ldrb	r3, [r7, #14]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d102      	bne.n	8003fac <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fa6:	7b3b      	ldrb	r3, [r7, #12]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d001      	beq.n	8003fb0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e075      	b.n	800409c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fc0:	e01d      	b.n	8003ffe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d108      	bne.n	8003fda <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fc8:	7bbb      	ldrb	r3, [r7, #14]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d105      	bne.n	8003fda <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fce:	7b7b      	ldrb	r3, [r7, #13]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d102      	bne.n	8003fda <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fd4:	7b3b      	ldrb	r3, [r7, #12]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d001      	beq.n	8003fde <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e05e      	b.n	800409c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_TIM_Encoder_Start_IT+0xc4>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b04      	cmp	r3, #4
 8004008:	d010      	beq.n	800402c <HAL_TIM_Encoder_Start_IT+0xe4>
 800400a:	e01f      	b.n	800404c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2201      	movs	r2, #1
 8004012:	2100      	movs	r1, #0
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fedf 	bl	8004dd8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0202 	orr.w	r2, r2, #2
 8004028:	60da      	str	r2, [r3, #12]
      break;
 800402a:	e02e      	b.n	800408a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2201      	movs	r2, #1
 8004032:	2104      	movs	r1, #4
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fecf 	bl	8004dd8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0204 	orr.w	r2, r2, #4
 8004048:	60da      	str	r2, [r3, #12]
      break;
 800404a:	e01e      	b.n	800408a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2201      	movs	r2, #1
 8004052:	2100      	movs	r1, #0
 8004054:	4618      	mov	r0, r3
 8004056:	f000 febf 	bl	8004dd8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2201      	movs	r2, #1
 8004060:	2104      	movs	r1, #4
 8004062:	4618      	mov	r0, r3
 8004064:	f000 feb8 	bl	8004dd8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0202 	orr.w	r2, r2, #2
 8004076:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0204 	orr.w	r2, r2, #4
 8004086:	60da      	str	r2, [r3, #12]
      break;
 8004088:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040be:	2302      	movs	r3, #2
 80040c0:	e0ff      	b.n	80042c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b14      	cmp	r3, #20
 80040ce:	f200 80f0 	bhi.w	80042b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80040d2:	a201      	add	r2, pc, #4	@ (adr r2, 80040d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d8:	0800412d 	.word	0x0800412d
 80040dc:	080042b3 	.word	0x080042b3
 80040e0:	080042b3 	.word	0x080042b3
 80040e4:	080042b3 	.word	0x080042b3
 80040e8:	0800416d 	.word	0x0800416d
 80040ec:	080042b3 	.word	0x080042b3
 80040f0:	080042b3 	.word	0x080042b3
 80040f4:	080042b3 	.word	0x080042b3
 80040f8:	080041af 	.word	0x080041af
 80040fc:	080042b3 	.word	0x080042b3
 8004100:	080042b3 	.word	0x080042b3
 8004104:	080042b3 	.word	0x080042b3
 8004108:	080041ef 	.word	0x080041ef
 800410c:	080042b3 	.word	0x080042b3
 8004110:	080042b3 	.word	0x080042b3
 8004114:	080042b3 	.word	0x080042b3
 8004118:	08004231 	.word	0x08004231
 800411c:	080042b3 	.word	0x080042b3
 8004120:	080042b3 	.word	0x080042b3
 8004124:	080042b3 	.word	0x080042b3
 8004128:	08004271 	.word	0x08004271
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68b9      	ldr	r1, [r7, #8]
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fa8a 	bl	800464c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699a      	ldr	r2, [r3, #24]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0208 	orr.w	r2, r2, #8
 8004146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699a      	ldr	r2, [r3, #24]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0204 	bic.w	r2, r2, #4
 8004156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6999      	ldr	r1, [r3, #24]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	619a      	str	r2, [r3, #24]
      break;
 800416a:	e0a5      	b.n	80042b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68b9      	ldr	r1, [r7, #8]
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fb04 	bl	8004780 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699a      	ldr	r2, [r3, #24]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6999      	ldr	r1, [r3, #24]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	021a      	lsls	r2, r3, #8
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	619a      	str	r2, [r3, #24]
      break;
 80041ac:	e084      	b.n	80042b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68b9      	ldr	r1, [r7, #8]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fb77 	bl	80048a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	69da      	ldr	r2, [r3, #28]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f042 0208 	orr.w	r2, r2, #8
 80041c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69da      	ldr	r2, [r3, #28]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0204 	bic.w	r2, r2, #4
 80041d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69d9      	ldr	r1, [r3, #28]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	61da      	str	r2, [r3, #28]
      break;
 80041ec:	e064      	b.n	80042b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68b9      	ldr	r1, [r7, #8]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 fbe9 	bl	80049cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69da      	ldr	r2, [r3, #28]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69da      	ldr	r2, [r3, #28]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69d9      	ldr	r1, [r3, #28]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	021a      	lsls	r2, r3, #8
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	61da      	str	r2, [r3, #28]
      break;
 800422e:	e043      	b.n	80042b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68b9      	ldr	r1, [r7, #8]
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fc5c 	bl	8004af4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0208 	orr.w	r2, r2, #8
 800424a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0204 	bic.w	r2, r2, #4
 800425a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800426e:	e023      	b.n	80042b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fca6 	bl	8004bc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800428a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800429a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	021a      	lsls	r2, r3, #8
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80042b0:	e002      	b.n	80042b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	75fb      	strb	r3, [r7, #23]
      break;
 80042b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop

080042cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_TIM_ConfigClockSource+0x1c>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e0ee      	b.n	80044c6 <HAL_TIM_ConfigClockSource+0x1fa>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004306:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800430a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004312:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a6b      	ldr	r2, [pc, #428]	@ (80044d0 <HAL_TIM_ConfigClockSource+0x204>)
 8004322:	4293      	cmp	r3, r2
 8004324:	f000 80b9 	beq.w	800449a <HAL_TIM_ConfigClockSource+0x1ce>
 8004328:	4a69      	ldr	r2, [pc, #420]	@ (80044d0 <HAL_TIM_ConfigClockSource+0x204>)
 800432a:	4293      	cmp	r3, r2
 800432c:	f200 80be 	bhi.w	80044ac <HAL_TIM_ConfigClockSource+0x1e0>
 8004330:	4a68      	ldr	r2, [pc, #416]	@ (80044d4 <HAL_TIM_ConfigClockSource+0x208>)
 8004332:	4293      	cmp	r3, r2
 8004334:	f000 80b1 	beq.w	800449a <HAL_TIM_ConfigClockSource+0x1ce>
 8004338:	4a66      	ldr	r2, [pc, #408]	@ (80044d4 <HAL_TIM_ConfigClockSource+0x208>)
 800433a:	4293      	cmp	r3, r2
 800433c:	f200 80b6 	bhi.w	80044ac <HAL_TIM_ConfigClockSource+0x1e0>
 8004340:	4a65      	ldr	r2, [pc, #404]	@ (80044d8 <HAL_TIM_ConfigClockSource+0x20c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	f000 80a9 	beq.w	800449a <HAL_TIM_ConfigClockSource+0x1ce>
 8004348:	4a63      	ldr	r2, [pc, #396]	@ (80044d8 <HAL_TIM_ConfigClockSource+0x20c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	f200 80ae 	bhi.w	80044ac <HAL_TIM_ConfigClockSource+0x1e0>
 8004350:	4a62      	ldr	r2, [pc, #392]	@ (80044dc <HAL_TIM_ConfigClockSource+0x210>)
 8004352:	4293      	cmp	r3, r2
 8004354:	f000 80a1 	beq.w	800449a <HAL_TIM_ConfigClockSource+0x1ce>
 8004358:	4a60      	ldr	r2, [pc, #384]	@ (80044dc <HAL_TIM_ConfigClockSource+0x210>)
 800435a:	4293      	cmp	r3, r2
 800435c:	f200 80a6 	bhi.w	80044ac <HAL_TIM_ConfigClockSource+0x1e0>
 8004360:	4a5f      	ldr	r2, [pc, #380]	@ (80044e0 <HAL_TIM_ConfigClockSource+0x214>)
 8004362:	4293      	cmp	r3, r2
 8004364:	f000 8099 	beq.w	800449a <HAL_TIM_ConfigClockSource+0x1ce>
 8004368:	4a5d      	ldr	r2, [pc, #372]	@ (80044e0 <HAL_TIM_ConfigClockSource+0x214>)
 800436a:	4293      	cmp	r3, r2
 800436c:	f200 809e 	bhi.w	80044ac <HAL_TIM_ConfigClockSource+0x1e0>
 8004370:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004374:	f000 8091 	beq.w	800449a <HAL_TIM_ConfigClockSource+0x1ce>
 8004378:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800437c:	f200 8096 	bhi.w	80044ac <HAL_TIM_ConfigClockSource+0x1e0>
 8004380:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004384:	f000 8089 	beq.w	800449a <HAL_TIM_ConfigClockSource+0x1ce>
 8004388:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800438c:	f200 808e 	bhi.w	80044ac <HAL_TIM_ConfigClockSource+0x1e0>
 8004390:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004394:	d03e      	beq.n	8004414 <HAL_TIM_ConfigClockSource+0x148>
 8004396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800439a:	f200 8087 	bhi.w	80044ac <HAL_TIM_ConfigClockSource+0x1e0>
 800439e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a2:	f000 8086 	beq.w	80044b2 <HAL_TIM_ConfigClockSource+0x1e6>
 80043a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043aa:	d87f      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x1e0>
 80043ac:	2b70      	cmp	r3, #112	@ 0x70
 80043ae:	d01a      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x11a>
 80043b0:	2b70      	cmp	r3, #112	@ 0x70
 80043b2:	d87b      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x1e0>
 80043b4:	2b60      	cmp	r3, #96	@ 0x60
 80043b6:	d050      	beq.n	800445a <HAL_TIM_ConfigClockSource+0x18e>
 80043b8:	2b60      	cmp	r3, #96	@ 0x60
 80043ba:	d877      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x1e0>
 80043bc:	2b50      	cmp	r3, #80	@ 0x50
 80043be:	d03c      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x16e>
 80043c0:	2b50      	cmp	r3, #80	@ 0x50
 80043c2:	d873      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x1e0>
 80043c4:	2b40      	cmp	r3, #64	@ 0x40
 80043c6:	d058      	beq.n	800447a <HAL_TIM_ConfigClockSource+0x1ae>
 80043c8:	2b40      	cmp	r3, #64	@ 0x40
 80043ca:	d86f      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x1e0>
 80043cc:	2b30      	cmp	r3, #48	@ 0x30
 80043ce:	d064      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x1ce>
 80043d0:	2b30      	cmp	r3, #48	@ 0x30
 80043d2:	d86b      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x1e0>
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d060      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x1ce>
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d867      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x1e0>
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d05c      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x1ce>
 80043e0:	2b10      	cmp	r3, #16
 80043e2:	d05a      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x1ce>
 80043e4:	e062      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043f6:	f000 fccf 	bl	8004d98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004408:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	609a      	str	r2, [r3, #8]
      break;
 8004412:	e04f      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004424:	f000 fcb8 	bl	8004d98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004436:	609a      	str	r2, [r3, #8]
      break;
 8004438:	e03c      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004446:	461a      	mov	r2, r3
 8004448:	f000 fc2a 	bl	8004ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2150      	movs	r1, #80	@ 0x50
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fc83 	bl	8004d5e <TIM_ITRx_SetConfig>
      break;
 8004458:	e02c      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004466:	461a      	mov	r2, r3
 8004468:	f000 fc49 	bl	8004cfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2160      	movs	r1, #96	@ 0x60
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fc73 	bl	8004d5e <TIM_ITRx_SetConfig>
      break;
 8004478:	e01c      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004486:	461a      	mov	r2, r3
 8004488:	f000 fc0a 	bl	8004ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2140      	movs	r1, #64	@ 0x40
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fc63 	bl	8004d5e <TIM_ITRx_SetConfig>
      break;
 8004498:	e00c      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4619      	mov	r1, r3
 80044a4:	4610      	mov	r0, r2
 80044a6:	f000 fc5a 	bl	8004d5e <TIM_ITRx_SetConfig>
      break;
 80044aa:	e003      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]
      break;
 80044b0:	e000      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 80044b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	00100070 	.word	0x00100070
 80044d4:	00100050 	.word	0x00100050
 80044d8:	00100040 	.word	0x00100040
 80044dc:	00100030 	.word	0x00100030
 80044e0:	00100020 	.word	0x00100020

080044e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a4c      	ldr	r2, [pc, #304]	@ (8004628 <TIM_Base_SetConfig+0x144>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d017      	beq.n	800452c <TIM_Base_SetConfig+0x48>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004502:	d013      	beq.n	800452c <TIM_Base_SetConfig+0x48>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a49      	ldr	r2, [pc, #292]	@ (800462c <TIM_Base_SetConfig+0x148>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00f      	beq.n	800452c <TIM_Base_SetConfig+0x48>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a48      	ldr	r2, [pc, #288]	@ (8004630 <TIM_Base_SetConfig+0x14c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00b      	beq.n	800452c <TIM_Base_SetConfig+0x48>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a47      	ldr	r2, [pc, #284]	@ (8004634 <TIM_Base_SetConfig+0x150>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d007      	beq.n	800452c <TIM_Base_SetConfig+0x48>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a46      	ldr	r2, [pc, #280]	@ (8004638 <TIM_Base_SetConfig+0x154>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d003      	beq.n	800452c <TIM_Base_SetConfig+0x48>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a45      	ldr	r2, [pc, #276]	@ (800463c <TIM_Base_SetConfig+0x158>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d108      	bne.n	800453e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a39      	ldr	r2, [pc, #228]	@ (8004628 <TIM_Base_SetConfig+0x144>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d023      	beq.n	800458e <TIM_Base_SetConfig+0xaa>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800454c:	d01f      	beq.n	800458e <TIM_Base_SetConfig+0xaa>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a36      	ldr	r2, [pc, #216]	@ (800462c <TIM_Base_SetConfig+0x148>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d01b      	beq.n	800458e <TIM_Base_SetConfig+0xaa>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a35      	ldr	r2, [pc, #212]	@ (8004630 <TIM_Base_SetConfig+0x14c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d017      	beq.n	800458e <TIM_Base_SetConfig+0xaa>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a34      	ldr	r2, [pc, #208]	@ (8004634 <TIM_Base_SetConfig+0x150>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d013      	beq.n	800458e <TIM_Base_SetConfig+0xaa>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a33      	ldr	r2, [pc, #204]	@ (8004638 <TIM_Base_SetConfig+0x154>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00f      	beq.n	800458e <TIM_Base_SetConfig+0xaa>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a33      	ldr	r2, [pc, #204]	@ (8004640 <TIM_Base_SetConfig+0x15c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00b      	beq.n	800458e <TIM_Base_SetConfig+0xaa>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a32      	ldr	r2, [pc, #200]	@ (8004644 <TIM_Base_SetConfig+0x160>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d007      	beq.n	800458e <TIM_Base_SetConfig+0xaa>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a31      	ldr	r2, [pc, #196]	@ (8004648 <TIM_Base_SetConfig+0x164>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d003      	beq.n	800458e <TIM_Base_SetConfig+0xaa>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a2c      	ldr	r2, [pc, #176]	@ (800463c <TIM_Base_SetConfig+0x158>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d108      	bne.n	80045a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a18      	ldr	r2, [pc, #96]	@ (8004628 <TIM_Base_SetConfig+0x144>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d013      	beq.n	80045f4 <TIM_Base_SetConfig+0x110>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004638 <TIM_Base_SetConfig+0x154>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d00f      	beq.n	80045f4 <TIM_Base_SetConfig+0x110>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004640 <TIM_Base_SetConfig+0x15c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00b      	beq.n	80045f4 <TIM_Base_SetConfig+0x110>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a19      	ldr	r2, [pc, #100]	@ (8004644 <TIM_Base_SetConfig+0x160>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d007      	beq.n	80045f4 <TIM_Base_SetConfig+0x110>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a18      	ldr	r2, [pc, #96]	@ (8004648 <TIM_Base_SetConfig+0x164>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d003      	beq.n	80045f4 <TIM_Base_SetConfig+0x110>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a13      	ldr	r2, [pc, #76]	@ (800463c <TIM_Base_SetConfig+0x158>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d103      	bne.n	80045fc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b01      	cmp	r3, #1
 800460c:	d105      	bne.n	800461a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f023 0201 	bic.w	r2, r3, #1
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	611a      	str	r2, [r3, #16]
  }
}
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40012c00 	.word	0x40012c00
 800462c:	40000400 	.word	0x40000400
 8004630:	40000800 	.word	0x40000800
 8004634:	40000c00 	.word	0x40000c00
 8004638:	40013400 	.word	0x40013400
 800463c:	40015000 	.word	0x40015000
 8004640:	40014000 	.word	0x40014000
 8004644:	40014400 	.word	0x40014400
 8004648:	40014800 	.word	0x40014800

0800464c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	f023 0201 	bic.w	r2, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800467a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800467e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0303 	bic.w	r3, r3, #3
 8004686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f023 0302 	bic.w	r3, r3, #2
 8004698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a30      	ldr	r2, [pc, #192]	@ (8004768 <TIM_OC1_SetConfig+0x11c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d013      	beq.n	80046d4 <TIM_OC1_SetConfig+0x88>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a2f      	ldr	r2, [pc, #188]	@ (800476c <TIM_OC1_SetConfig+0x120>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00f      	beq.n	80046d4 <TIM_OC1_SetConfig+0x88>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a2e      	ldr	r2, [pc, #184]	@ (8004770 <TIM_OC1_SetConfig+0x124>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00b      	beq.n	80046d4 <TIM_OC1_SetConfig+0x88>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a2d      	ldr	r2, [pc, #180]	@ (8004774 <TIM_OC1_SetConfig+0x128>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d007      	beq.n	80046d4 <TIM_OC1_SetConfig+0x88>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004778 <TIM_OC1_SetConfig+0x12c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d003      	beq.n	80046d4 <TIM_OC1_SetConfig+0x88>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a2b      	ldr	r2, [pc, #172]	@ (800477c <TIM_OC1_SetConfig+0x130>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d10c      	bne.n	80046ee <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f023 0308 	bic.w	r3, r3, #8
 80046da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f023 0304 	bic.w	r3, r3, #4
 80046ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004768 <TIM_OC1_SetConfig+0x11c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d013      	beq.n	800471e <TIM_OC1_SetConfig+0xd2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a1c      	ldr	r2, [pc, #112]	@ (800476c <TIM_OC1_SetConfig+0x120>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00f      	beq.n	800471e <TIM_OC1_SetConfig+0xd2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a1b      	ldr	r2, [pc, #108]	@ (8004770 <TIM_OC1_SetConfig+0x124>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00b      	beq.n	800471e <TIM_OC1_SetConfig+0xd2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a1a      	ldr	r2, [pc, #104]	@ (8004774 <TIM_OC1_SetConfig+0x128>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d007      	beq.n	800471e <TIM_OC1_SetConfig+0xd2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a19      	ldr	r2, [pc, #100]	@ (8004778 <TIM_OC1_SetConfig+0x12c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d003      	beq.n	800471e <TIM_OC1_SetConfig+0xd2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a18      	ldr	r2, [pc, #96]	@ (800477c <TIM_OC1_SetConfig+0x130>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d111      	bne.n	8004742 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800472c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	621a      	str	r2, [r3, #32]
}
 800475c:	bf00      	nop
 800475e:	371c      	adds	r7, #28
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	40012c00 	.word	0x40012c00
 800476c:	40013400 	.word	0x40013400
 8004770:	40014000 	.word	0x40014000
 8004774:	40014400 	.word	0x40014400
 8004778:	40014800 	.word	0x40014800
 800477c:	40015000 	.word	0x40015000

08004780 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	f023 0210 	bic.w	r2, r3, #16
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f023 0320 	bic.w	r3, r3, #32
 80047ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a2c      	ldr	r2, [pc, #176]	@ (8004890 <TIM_OC2_SetConfig+0x110>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d007      	beq.n	80047f4 <TIM_OC2_SetConfig+0x74>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a2b      	ldr	r2, [pc, #172]	@ (8004894 <TIM_OC2_SetConfig+0x114>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d003      	beq.n	80047f4 <TIM_OC2_SetConfig+0x74>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004898 <TIM_OC2_SetConfig+0x118>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d10d      	bne.n	8004810 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	4313      	orrs	r3, r2
 8004806:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800480e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a1f      	ldr	r2, [pc, #124]	@ (8004890 <TIM_OC2_SetConfig+0x110>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d013      	beq.n	8004840 <TIM_OC2_SetConfig+0xc0>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a1e      	ldr	r2, [pc, #120]	@ (8004894 <TIM_OC2_SetConfig+0x114>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00f      	beq.n	8004840 <TIM_OC2_SetConfig+0xc0>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a1e      	ldr	r2, [pc, #120]	@ (800489c <TIM_OC2_SetConfig+0x11c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00b      	beq.n	8004840 <TIM_OC2_SetConfig+0xc0>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a1d      	ldr	r2, [pc, #116]	@ (80048a0 <TIM_OC2_SetConfig+0x120>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d007      	beq.n	8004840 <TIM_OC2_SetConfig+0xc0>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a1c      	ldr	r2, [pc, #112]	@ (80048a4 <TIM_OC2_SetConfig+0x124>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d003      	beq.n	8004840 <TIM_OC2_SetConfig+0xc0>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a17      	ldr	r2, [pc, #92]	@ (8004898 <TIM_OC2_SetConfig+0x118>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d113      	bne.n	8004868 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004846:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800484e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	621a      	str	r2, [r3, #32]
}
 8004882:	bf00      	nop
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40012c00 	.word	0x40012c00
 8004894:	40013400 	.word	0x40013400
 8004898:	40015000 	.word	0x40015000
 800489c:	40014000 	.word	0x40014000
 80048a0:	40014400 	.word	0x40014400
 80048a4:	40014800 	.word	0x40014800

080048a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0303 	bic.w	r3, r3, #3
 80048e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	021b      	lsls	r3, r3, #8
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a2b      	ldr	r2, [pc, #172]	@ (80049b4 <TIM_OC3_SetConfig+0x10c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d007      	beq.n	800491a <TIM_OC3_SetConfig+0x72>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a2a      	ldr	r2, [pc, #168]	@ (80049b8 <TIM_OC3_SetConfig+0x110>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d003      	beq.n	800491a <TIM_OC3_SetConfig+0x72>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a29      	ldr	r2, [pc, #164]	@ (80049bc <TIM_OC3_SetConfig+0x114>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d10d      	bne.n	8004936 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004920:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	021b      	lsls	r3, r3, #8
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	4313      	orrs	r3, r2
 800492c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a1e      	ldr	r2, [pc, #120]	@ (80049b4 <TIM_OC3_SetConfig+0x10c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d013      	beq.n	8004966 <TIM_OC3_SetConfig+0xbe>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a1d      	ldr	r2, [pc, #116]	@ (80049b8 <TIM_OC3_SetConfig+0x110>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00f      	beq.n	8004966 <TIM_OC3_SetConfig+0xbe>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a1d      	ldr	r2, [pc, #116]	@ (80049c0 <TIM_OC3_SetConfig+0x118>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00b      	beq.n	8004966 <TIM_OC3_SetConfig+0xbe>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a1c      	ldr	r2, [pc, #112]	@ (80049c4 <TIM_OC3_SetConfig+0x11c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d007      	beq.n	8004966 <TIM_OC3_SetConfig+0xbe>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a1b      	ldr	r2, [pc, #108]	@ (80049c8 <TIM_OC3_SetConfig+0x120>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d003      	beq.n	8004966 <TIM_OC3_SetConfig+0xbe>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a16      	ldr	r2, [pc, #88]	@ (80049bc <TIM_OC3_SetConfig+0x114>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d113      	bne.n	800498e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800496c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	011b      	lsls	r3, r3, #4
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4313      	orrs	r3, r2
 800498c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	621a      	str	r2, [r3, #32]
}
 80049a8:	bf00      	nop
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	40012c00 	.word	0x40012c00
 80049b8:	40013400 	.word	0x40013400
 80049bc:	40015000 	.word	0x40015000
 80049c0:	40014000 	.word	0x40014000
 80049c4:	40014400 	.word	0x40014400
 80049c8:	40014800 	.word	0x40014800

080049cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	021b      	lsls	r3, r3, #8
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	031b      	lsls	r3, r3, #12
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a2c      	ldr	r2, [pc, #176]	@ (8004adc <TIM_OC4_SetConfig+0x110>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d007      	beq.n	8004a40 <TIM_OC4_SetConfig+0x74>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a2b      	ldr	r2, [pc, #172]	@ (8004ae0 <TIM_OC4_SetConfig+0x114>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d003      	beq.n	8004a40 <TIM_OC4_SetConfig+0x74>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae4 <TIM_OC4_SetConfig+0x118>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d10d      	bne.n	8004a5c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	031b      	lsls	r3, r3, #12
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004adc <TIM_OC4_SetConfig+0x110>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d013      	beq.n	8004a8c <TIM_OC4_SetConfig+0xc0>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a1e      	ldr	r2, [pc, #120]	@ (8004ae0 <TIM_OC4_SetConfig+0x114>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00f      	beq.n	8004a8c <TIM_OC4_SetConfig+0xc0>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ae8 <TIM_OC4_SetConfig+0x11c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00b      	beq.n	8004a8c <TIM_OC4_SetConfig+0xc0>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a1d      	ldr	r2, [pc, #116]	@ (8004aec <TIM_OC4_SetConfig+0x120>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d007      	beq.n	8004a8c <TIM_OC4_SetConfig+0xc0>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8004af0 <TIM_OC4_SetConfig+0x124>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d003      	beq.n	8004a8c <TIM_OC4_SetConfig+0xc0>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a17      	ldr	r2, [pc, #92]	@ (8004ae4 <TIM_OC4_SetConfig+0x118>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d113      	bne.n	8004ab4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a92:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a9a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	019b      	lsls	r3, r3, #6
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	019b      	lsls	r3, r3, #6
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	621a      	str	r2, [r3, #32]
}
 8004ace:	bf00      	nop
 8004ad0:	371c      	adds	r7, #28
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40012c00 	.word	0x40012c00
 8004ae0:	40013400 	.word	0x40013400
 8004ae4:	40015000 	.word	0x40015000
 8004ae8:	40014000 	.word	0x40014000
 8004aec:	40014400 	.word	0x40014400
 8004af0:	40014800 	.word	0x40014800

08004af4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004b38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	041b      	lsls	r3, r3, #16
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a19      	ldr	r2, [pc, #100]	@ (8004bb0 <TIM_OC5_SetConfig+0xbc>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d013      	beq.n	8004b76 <TIM_OC5_SetConfig+0x82>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a18      	ldr	r2, [pc, #96]	@ (8004bb4 <TIM_OC5_SetConfig+0xc0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00f      	beq.n	8004b76 <TIM_OC5_SetConfig+0x82>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a17      	ldr	r2, [pc, #92]	@ (8004bb8 <TIM_OC5_SetConfig+0xc4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00b      	beq.n	8004b76 <TIM_OC5_SetConfig+0x82>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a16      	ldr	r2, [pc, #88]	@ (8004bbc <TIM_OC5_SetConfig+0xc8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d007      	beq.n	8004b76 <TIM_OC5_SetConfig+0x82>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a15      	ldr	r2, [pc, #84]	@ (8004bc0 <TIM_OC5_SetConfig+0xcc>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d003      	beq.n	8004b76 <TIM_OC5_SetConfig+0x82>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a14      	ldr	r2, [pc, #80]	@ (8004bc4 <TIM_OC5_SetConfig+0xd0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d109      	bne.n	8004b8a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	021b      	lsls	r3, r3, #8
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	621a      	str	r2, [r3, #32]
}
 8004ba4:	bf00      	nop
 8004ba6:	371c      	adds	r7, #28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	40012c00 	.word	0x40012c00
 8004bb4:	40013400 	.word	0x40013400
 8004bb8:	40014000 	.word	0x40014000
 8004bbc:	40014400 	.word	0x40014400
 8004bc0:	40014800 	.word	0x40014800
 8004bc4:	40015000 	.word	0x40015000

08004bc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	051b      	lsls	r3, r3, #20
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004c88 <TIM_OC6_SetConfig+0xc0>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d013      	beq.n	8004c4c <TIM_OC6_SetConfig+0x84>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a19      	ldr	r2, [pc, #100]	@ (8004c8c <TIM_OC6_SetConfig+0xc4>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00f      	beq.n	8004c4c <TIM_OC6_SetConfig+0x84>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a18      	ldr	r2, [pc, #96]	@ (8004c90 <TIM_OC6_SetConfig+0xc8>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00b      	beq.n	8004c4c <TIM_OC6_SetConfig+0x84>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a17      	ldr	r2, [pc, #92]	@ (8004c94 <TIM_OC6_SetConfig+0xcc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d007      	beq.n	8004c4c <TIM_OC6_SetConfig+0x84>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a16      	ldr	r2, [pc, #88]	@ (8004c98 <TIM_OC6_SetConfig+0xd0>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d003      	beq.n	8004c4c <TIM_OC6_SetConfig+0x84>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a15      	ldr	r2, [pc, #84]	@ (8004c9c <TIM_OC6_SetConfig+0xd4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d109      	bne.n	8004c60 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	029b      	lsls	r3, r3, #10
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40012c00 	.word	0x40012c00
 8004c8c:	40013400 	.word	0x40013400
 8004c90:	40014000 	.word	0x40014000
 8004c94:	40014400 	.word	0x40014400
 8004c98:	40014800 	.word	0x40014800
 8004c9c:	40015000 	.word	0x40015000

08004ca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	f023 0201 	bic.w	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f023 030a 	bic.w	r3, r3, #10
 8004cdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b087      	sub	sp, #28
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	f023 0210 	bic.w	r2, r3, #16
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	031b      	lsls	r3, r3, #12
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	621a      	str	r2, [r3, #32]
}
 8004d52:	bf00      	nop
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004d74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f043 0307 	orr.w	r3, r3, #7
 8004d84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	609a      	str	r2, [r3, #8]
}
 8004d8c:	bf00      	nop
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004db2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	021a      	lsls	r2, r3, #8
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	609a      	str	r2, [r3, #8]
}
 8004dcc:	bf00      	nop
 8004dce:	371c      	adds	r7, #28
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f003 031f 	and.w	r3, r3, #31
 8004dea:	2201      	movs	r2, #1
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a1a      	ldr	r2, [r3, #32]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	401a      	ands	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a1a      	ldr	r2, [r3, #32]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f003 031f 	and.w	r3, r3, #31
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e10:	431a      	orrs	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	621a      	str	r2, [r3, #32]
}
 8004e16:	bf00      	nop
 8004e18:	371c      	adds	r7, #28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
	...

08004e24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e074      	b.n	8004f26 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a34      	ldr	r2, [pc, #208]	@ (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d009      	beq.n	8004e7a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a33      	ldr	r2, [pc, #204]	@ (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d004      	beq.n	8004e7a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a31      	ldr	r2, [pc, #196]	@ (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d108      	bne.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004e80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a21      	ldr	r2, [pc, #132]	@ (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d022      	beq.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ebc:	d01d      	beq.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d018      	beq.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d013      	beq.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00e      	beq.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a15      	ldr	r2, [pc, #84]	@ (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d009      	beq.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a18      	ldr	r2, [pc, #96]	@ (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d004      	beq.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a11      	ldr	r2, [pc, #68]	@ (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d10c      	bne.n	8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40012c00 	.word	0x40012c00
 8004f38:	40013400 	.word	0x40013400
 8004f3c:	40015000 	.word	0x40015000
 8004f40:	40000400 	.word	0x40000400
 8004f44:	40000800 	.word	0x40000800
 8004f48:	40000c00 	.word	0x40000c00
 8004f4c:	40014000 	.word	0x40014000

08004f50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e042      	b.n	8004fe8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d106      	bne.n	8004f7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7fd f8fb 	bl	8002170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2224      	movs	r2, #36	@ 0x24
 8004f7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0201 	bic.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fbb2 	bl	8005704 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f8b3 	bl	800510c <UART_SetConfig>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e01b      	b.n	8004fe8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fc31 	bl	8005848 <UART_CheckIdleState>
 8004fe6:	4603      	mov	r3, r0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	@ 0x28
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005006:	2b20      	cmp	r3, #32
 8005008:	d17b      	bne.n	8005102 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <HAL_UART_Transmit+0x26>
 8005010:	88fb      	ldrh	r3, [r7, #6]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e074      	b.n	8005104 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2221      	movs	r2, #33	@ 0x21
 8005026:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800502a:	f7fd f9c7 	bl	80023bc <HAL_GetTick>
 800502e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	88fa      	ldrh	r2, [r7, #6]
 8005034:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	88fa      	ldrh	r2, [r7, #6]
 800503c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005048:	d108      	bne.n	800505c <HAL_UART_Transmit+0x6c>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d104      	bne.n	800505c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005052:	2300      	movs	r3, #0
 8005054:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	e003      	b.n	8005064 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005060:	2300      	movs	r3, #0
 8005062:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005064:	e030      	b.n	80050c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2200      	movs	r2, #0
 800506e:	2180      	movs	r1, #128	@ 0x80
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 fc93 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2220      	movs	r2, #32
 8005080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e03d      	b.n	8005104 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10b      	bne.n	80050a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	461a      	mov	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800509c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	3302      	adds	r3, #2
 80050a2:	61bb      	str	r3, [r7, #24]
 80050a4:	e007      	b.n	80050b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	781a      	ldrb	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	3301      	adds	r3, #1
 80050b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80050bc:	b29b      	uxth	r3, r3
 80050be:	3b01      	subs	r3, #1
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1c8      	bne.n	8005066 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2200      	movs	r2, #0
 80050dc:	2140      	movs	r1, #64	@ 0x40
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 fc5c 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e006      	b.n	8005104 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	e000      	b.n	8005104 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005102:	2302      	movs	r3, #2
  }
}
 8005104:	4618      	mov	r0, r3
 8005106:	3720      	adds	r7, #32
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800510c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005110:	b08c      	sub	sp, #48	@ 0x30
 8005112:	af00      	add	r7, sp, #0
 8005114:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	431a      	orrs	r2, r3
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	431a      	orrs	r2, r3
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	4313      	orrs	r3, r2
 8005132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	4baa      	ldr	r3, [pc, #680]	@ (80053e4 <UART_SetConfig+0x2d8>)
 800513c:	4013      	ands	r3, r2
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	6812      	ldr	r2, [r2, #0]
 8005142:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005144:	430b      	orrs	r3, r1
 8005146:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a9f      	ldr	r2, [pc, #636]	@ (80053e8 <UART_SetConfig+0x2dc>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d004      	beq.n	8005178 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005174:	4313      	orrs	r3, r2
 8005176:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005182:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	6812      	ldr	r2, [r2, #0]
 800518a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800518c:	430b      	orrs	r3, r1
 800518e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005196:	f023 010f 	bic.w	r1, r3, #15
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a90      	ldr	r2, [pc, #576]	@ (80053ec <UART_SetConfig+0x2e0>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d125      	bne.n	80051fc <UART_SetConfig+0xf0>
 80051b0:	4b8f      	ldr	r3, [pc, #572]	@ (80053f0 <UART_SetConfig+0x2e4>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	d81a      	bhi.n	80051f4 <UART_SetConfig+0xe8>
 80051be:	a201      	add	r2, pc, #4	@ (adr r2, 80051c4 <UART_SetConfig+0xb8>)
 80051c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c4:	080051d5 	.word	0x080051d5
 80051c8:	080051e5 	.word	0x080051e5
 80051cc:	080051dd 	.word	0x080051dd
 80051d0:	080051ed 	.word	0x080051ed
 80051d4:	2301      	movs	r3, #1
 80051d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051da:	e116      	b.n	800540a <UART_SetConfig+0x2fe>
 80051dc:	2302      	movs	r3, #2
 80051de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051e2:	e112      	b.n	800540a <UART_SetConfig+0x2fe>
 80051e4:	2304      	movs	r3, #4
 80051e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ea:	e10e      	b.n	800540a <UART_SetConfig+0x2fe>
 80051ec:	2308      	movs	r3, #8
 80051ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051f2:	e10a      	b.n	800540a <UART_SetConfig+0x2fe>
 80051f4:	2310      	movs	r3, #16
 80051f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051fa:	e106      	b.n	800540a <UART_SetConfig+0x2fe>
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a7c      	ldr	r2, [pc, #496]	@ (80053f4 <UART_SetConfig+0x2e8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d138      	bne.n	8005278 <UART_SetConfig+0x16c>
 8005206:	4b7a      	ldr	r3, [pc, #488]	@ (80053f0 <UART_SetConfig+0x2e4>)
 8005208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520c:	f003 030c 	and.w	r3, r3, #12
 8005210:	2b0c      	cmp	r3, #12
 8005212:	d82d      	bhi.n	8005270 <UART_SetConfig+0x164>
 8005214:	a201      	add	r2, pc, #4	@ (adr r2, 800521c <UART_SetConfig+0x110>)
 8005216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521a:	bf00      	nop
 800521c:	08005251 	.word	0x08005251
 8005220:	08005271 	.word	0x08005271
 8005224:	08005271 	.word	0x08005271
 8005228:	08005271 	.word	0x08005271
 800522c:	08005261 	.word	0x08005261
 8005230:	08005271 	.word	0x08005271
 8005234:	08005271 	.word	0x08005271
 8005238:	08005271 	.word	0x08005271
 800523c:	08005259 	.word	0x08005259
 8005240:	08005271 	.word	0x08005271
 8005244:	08005271 	.word	0x08005271
 8005248:	08005271 	.word	0x08005271
 800524c:	08005269 	.word	0x08005269
 8005250:	2300      	movs	r3, #0
 8005252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005256:	e0d8      	b.n	800540a <UART_SetConfig+0x2fe>
 8005258:	2302      	movs	r3, #2
 800525a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800525e:	e0d4      	b.n	800540a <UART_SetConfig+0x2fe>
 8005260:	2304      	movs	r3, #4
 8005262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005266:	e0d0      	b.n	800540a <UART_SetConfig+0x2fe>
 8005268:	2308      	movs	r3, #8
 800526a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800526e:	e0cc      	b.n	800540a <UART_SetConfig+0x2fe>
 8005270:	2310      	movs	r3, #16
 8005272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005276:	e0c8      	b.n	800540a <UART_SetConfig+0x2fe>
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a5e      	ldr	r2, [pc, #376]	@ (80053f8 <UART_SetConfig+0x2ec>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d125      	bne.n	80052ce <UART_SetConfig+0x1c2>
 8005282:	4b5b      	ldr	r3, [pc, #364]	@ (80053f0 <UART_SetConfig+0x2e4>)
 8005284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005288:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800528c:	2b30      	cmp	r3, #48	@ 0x30
 800528e:	d016      	beq.n	80052be <UART_SetConfig+0x1b2>
 8005290:	2b30      	cmp	r3, #48	@ 0x30
 8005292:	d818      	bhi.n	80052c6 <UART_SetConfig+0x1ba>
 8005294:	2b20      	cmp	r3, #32
 8005296:	d00a      	beq.n	80052ae <UART_SetConfig+0x1a2>
 8005298:	2b20      	cmp	r3, #32
 800529a:	d814      	bhi.n	80052c6 <UART_SetConfig+0x1ba>
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <UART_SetConfig+0x19a>
 80052a0:	2b10      	cmp	r3, #16
 80052a2:	d008      	beq.n	80052b6 <UART_SetConfig+0x1aa>
 80052a4:	e00f      	b.n	80052c6 <UART_SetConfig+0x1ba>
 80052a6:	2300      	movs	r3, #0
 80052a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ac:	e0ad      	b.n	800540a <UART_SetConfig+0x2fe>
 80052ae:	2302      	movs	r3, #2
 80052b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052b4:	e0a9      	b.n	800540a <UART_SetConfig+0x2fe>
 80052b6:	2304      	movs	r3, #4
 80052b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052bc:	e0a5      	b.n	800540a <UART_SetConfig+0x2fe>
 80052be:	2308      	movs	r3, #8
 80052c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052c4:	e0a1      	b.n	800540a <UART_SetConfig+0x2fe>
 80052c6:	2310      	movs	r3, #16
 80052c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052cc:	e09d      	b.n	800540a <UART_SetConfig+0x2fe>
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a4a      	ldr	r2, [pc, #296]	@ (80053fc <UART_SetConfig+0x2f0>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d125      	bne.n	8005324 <UART_SetConfig+0x218>
 80052d8:	4b45      	ldr	r3, [pc, #276]	@ (80053f0 <UART_SetConfig+0x2e4>)
 80052da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80052e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80052e4:	d016      	beq.n	8005314 <UART_SetConfig+0x208>
 80052e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80052e8:	d818      	bhi.n	800531c <UART_SetConfig+0x210>
 80052ea:	2b80      	cmp	r3, #128	@ 0x80
 80052ec:	d00a      	beq.n	8005304 <UART_SetConfig+0x1f8>
 80052ee:	2b80      	cmp	r3, #128	@ 0x80
 80052f0:	d814      	bhi.n	800531c <UART_SetConfig+0x210>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <UART_SetConfig+0x1f0>
 80052f6:	2b40      	cmp	r3, #64	@ 0x40
 80052f8:	d008      	beq.n	800530c <UART_SetConfig+0x200>
 80052fa:	e00f      	b.n	800531c <UART_SetConfig+0x210>
 80052fc:	2300      	movs	r3, #0
 80052fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005302:	e082      	b.n	800540a <UART_SetConfig+0x2fe>
 8005304:	2302      	movs	r3, #2
 8005306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800530a:	e07e      	b.n	800540a <UART_SetConfig+0x2fe>
 800530c:	2304      	movs	r3, #4
 800530e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005312:	e07a      	b.n	800540a <UART_SetConfig+0x2fe>
 8005314:	2308      	movs	r3, #8
 8005316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800531a:	e076      	b.n	800540a <UART_SetConfig+0x2fe>
 800531c:	2310      	movs	r3, #16
 800531e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005322:	e072      	b.n	800540a <UART_SetConfig+0x2fe>
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a35      	ldr	r2, [pc, #212]	@ (8005400 <UART_SetConfig+0x2f4>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d12a      	bne.n	8005384 <UART_SetConfig+0x278>
 800532e:	4b30      	ldr	r3, [pc, #192]	@ (80053f0 <UART_SetConfig+0x2e4>)
 8005330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005334:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005338:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800533c:	d01a      	beq.n	8005374 <UART_SetConfig+0x268>
 800533e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005342:	d81b      	bhi.n	800537c <UART_SetConfig+0x270>
 8005344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005348:	d00c      	beq.n	8005364 <UART_SetConfig+0x258>
 800534a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800534e:	d815      	bhi.n	800537c <UART_SetConfig+0x270>
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <UART_SetConfig+0x250>
 8005354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005358:	d008      	beq.n	800536c <UART_SetConfig+0x260>
 800535a:	e00f      	b.n	800537c <UART_SetConfig+0x270>
 800535c:	2300      	movs	r3, #0
 800535e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005362:	e052      	b.n	800540a <UART_SetConfig+0x2fe>
 8005364:	2302      	movs	r3, #2
 8005366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800536a:	e04e      	b.n	800540a <UART_SetConfig+0x2fe>
 800536c:	2304      	movs	r3, #4
 800536e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005372:	e04a      	b.n	800540a <UART_SetConfig+0x2fe>
 8005374:	2308      	movs	r3, #8
 8005376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800537a:	e046      	b.n	800540a <UART_SetConfig+0x2fe>
 800537c:	2310      	movs	r3, #16
 800537e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005382:	e042      	b.n	800540a <UART_SetConfig+0x2fe>
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a17      	ldr	r2, [pc, #92]	@ (80053e8 <UART_SetConfig+0x2dc>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d13a      	bne.n	8005404 <UART_SetConfig+0x2f8>
 800538e:	4b18      	ldr	r3, [pc, #96]	@ (80053f0 <UART_SetConfig+0x2e4>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005394:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005398:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800539c:	d01a      	beq.n	80053d4 <UART_SetConfig+0x2c8>
 800539e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053a2:	d81b      	bhi.n	80053dc <UART_SetConfig+0x2d0>
 80053a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053a8:	d00c      	beq.n	80053c4 <UART_SetConfig+0x2b8>
 80053aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053ae:	d815      	bhi.n	80053dc <UART_SetConfig+0x2d0>
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <UART_SetConfig+0x2b0>
 80053b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053b8:	d008      	beq.n	80053cc <UART_SetConfig+0x2c0>
 80053ba:	e00f      	b.n	80053dc <UART_SetConfig+0x2d0>
 80053bc:	2300      	movs	r3, #0
 80053be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053c2:	e022      	b.n	800540a <UART_SetConfig+0x2fe>
 80053c4:	2302      	movs	r3, #2
 80053c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ca:	e01e      	b.n	800540a <UART_SetConfig+0x2fe>
 80053cc:	2304      	movs	r3, #4
 80053ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053d2:	e01a      	b.n	800540a <UART_SetConfig+0x2fe>
 80053d4:	2308      	movs	r3, #8
 80053d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053da:	e016      	b.n	800540a <UART_SetConfig+0x2fe>
 80053dc:	2310      	movs	r3, #16
 80053de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053e2:	e012      	b.n	800540a <UART_SetConfig+0x2fe>
 80053e4:	cfff69f3 	.word	0xcfff69f3
 80053e8:	40008000 	.word	0x40008000
 80053ec:	40013800 	.word	0x40013800
 80053f0:	40021000 	.word	0x40021000
 80053f4:	40004400 	.word	0x40004400
 80053f8:	40004800 	.word	0x40004800
 80053fc:	40004c00 	.word	0x40004c00
 8005400:	40005000 	.word	0x40005000
 8005404:	2310      	movs	r3, #16
 8005406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4aae      	ldr	r2, [pc, #696]	@ (80056c8 <UART_SetConfig+0x5bc>)
 8005410:	4293      	cmp	r3, r2
 8005412:	f040 8097 	bne.w	8005544 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005416:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800541a:	2b08      	cmp	r3, #8
 800541c:	d823      	bhi.n	8005466 <UART_SetConfig+0x35a>
 800541e:	a201      	add	r2, pc, #4	@ (adr r2, 8005424 <UART_SetConfig+0x318>)
 8005420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005424:	08005449 	.word	0x08005449
 8005428:	08005467 	.word	0x08005467
 800542c:	08005451 	.word	0x08005451
 8005430:	08005467 	.word	0x08005467
 8005434:	08005457 	.word	0x08005457
 8005438:	08005467 	.word	0x08005467
 800543c:	08005467 	.word	0x08005467
 8005440:	08005467 	.word	0x08005467
 8005444:	0800545f 	.word	0x0800545f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005448:	f7fd ffd4 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 800544c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800544e:	e010      	b.n	8005472 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005450:	4b9e      	ldr	r3, [pc, #632]	@ (80056cc <UART_SetConfig+0x5c0>)
 8005452:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005454:	e00d      	b.n	8005472 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005456:	f7fd ff5f 	bl	8003318 <HAL_RCC_GetSysClockFreq>
 800545a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800545c:	e009      	b.n	8005472 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800545e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005462:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005464:	e005      	b.n	8005472 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005470:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 8130 	beq.w	80056da <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547e:	4a94      	ldr	r2, [pc, #592]	@ (80056d0 <UART_SetConfig+0x5c4>)
 8005480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005484:	461a      	mov	r2, r3
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005488:	fbb3 f3f2 	udiv	r3, r3, r2
 800548c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	4613      	mov	r3, r2
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	4413      	add	r3, r2
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	429a      	cmp	r2, r3
 800549c:	d305      	bcc.n	80054aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d903      	bls.n	80054b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80054b0:	e113      	b.n	80056da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b4:	2200      	movs	r2, #0
 80054b6:	60bb      	str	r3, [r7, #8]
 80054b8:	60fa      	str	r2, [r7, #12]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054be:	4a84      	ldr	r2, [pc, #528]	@ (80056d0 <UART_SetConfig+0x5c4>)
 80054c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	2200      	movs	r2, #0
 80054c8:	603b      	str	r3, [r7, #0]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054d4:	f7fb fb06 	bl	8000ae4 <__aeabi_uldivmod>
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	4610      	mov	r0, r2
 80054de:	4619      	mov	r1, r3
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	020b      	lsls	r3, r1, #8
 80054ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054ee:	0202      	lsls	r2, r0, #8
 80054f0:	6979      	ldr	r1, [r7, #20]
 80054f2:	6849      	ldr	r1, [r1, #4]
 80054f4:	0849      	lsrs	r1, r1, #1
 80054f6:	2000      	movs	r0, #0
 80054f8:	460c      	mov	r4, r1
 80054fa:	4605      	mov	r5, r0
 80054fc:	eb12 0804 	adds.w	r8, r2, r4
 8005500:	eb43 0905 	adc.w	r9, r3, r5
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	469a      	mov	sl, r3
 800550c:	4693      	mov	fp, r2
 800550e:	4652      	mov	r2, sl
 8005510:	465b      	mov	r3, fp
 8005512:	4640      	mov	r0, r8
 8005514:	4649      	mov	r1, r9
 8005516:	f7fb fae5 	bl	8000ae4 <__aeabi_uldivmod>
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	4613      	mov	r3, r2
 8005520:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005528:	d308      	bcc.n	800553c <UART_SetConfig+0x430>
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005530:	d204      	bcs.n	800553c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6a3a      	ldr	r2, [r7, #32]
 8005538:	60da      	str	r2, [r3, #12]
 800553a:	e0ce      	b.n	80056da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005542:	e0ca      	b.n	80056da <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800554c:	d166      	bne.n	800561c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800554e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005552:	2b08      	cmp	r3, #8
 8005554:	d827      	bhi.n	80055a6 <UART_SetConfig+0x49a>
 8005556:	a201      	add	r2, pc, #4	@ (adr r2, 800555c <UART_SetConfig+0x450>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	08005581 	.word	0x08005581
 8005560:	08005589 	.word	0x08005589
 8005564:	08005591 	.word	0x08005591
 8005568:	080055a7 	.word	0x080055a7
 800556c:	08005597 	.word	0x08005597
 8005570:	080055a7 	.word	0x080055a7
 8005574:	080055a7 	.word	0x080055a7
 8005578:	080055a7 	.word	0x080055a7
 800557c:	0800559f 	.word	0x0800559f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005580:	f7fd ff38 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 8005584:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005586:	e014      	b.n	80055b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005588:	f7fd ff4a 	bl	8003420 <HAL_RCC_GetPCLK2Freq>
 800558c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800558e:	e010      	b.n	80055b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005590:	4b4e      	ldr	r3, [pc, #312]	@ (80056cc <UART_SetConfig+0x5c0>)
 8005592:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005594:	e00d      	b.n	80055b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005596:	f7fd febf 	bl	8003318 <HAL_RCC_GetSysClockFreq>
 800559a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800559c:	e009      	b.n	80055b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800559e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055a4:	e005      	b.n	80055b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80055b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 8090 	beq.w	80056da <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055be:	4a44      	ldr	r2, [pc, #272]	@ (80056d0 <UART_SetConfig+0x5c4>)
 80055c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055c4:	461a      	mov	r2, r3
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80055cc:	005a      	lsls	r2, r3, #1
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	085b      	lsrs	r3, r3, #1
 80055d4:	441a      	add	r2, r3
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	fbb2 f3f3 	udiv	r3, r2, r3
 80055de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	2b0f      	cmp	r3, #15
 80055e4:	d916      	bls.n	8005614 <UART_SetConfig+0x508>
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ec:	d212      	bcs.n	8005614 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	f023 030f 	bic.w	r3, r3, #15
 80055f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	085b      	lsrs	r3, r3, #1
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	b29a      	uxth	r2, r3
 8005604:	8bfb      	ldrh	r3, [r7, #30]
 8005606:	4313      	orrs	r3, r2
 8005608:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	8bfa      	ldrh	r2, [r7, #30]
 8005610:	60da      	str	r2, [r3, #12]
 8005612:	e062      	b.n	80056da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800561a:	e05e      	b.n	80056da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800561c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005620:	2b08      	cmp	r3, #8
 8005622:	d828      	bhi.n	8005676 <UART_SetConfig+0x56a>
 8005624:	a201      	add	r2, pc, #4	@ (adr r2, 800562c <UART_SetConfig+0x520>)
 8005626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562a:	bf00      	nop
 800562c:	08005651 	.word	0x08005651
 8005630:	08005659 	.word	0x08005659
 8005634:	08005661 	.word	0x08005661
 8005638:	08005677 	.word	0x08005677
 800563c:	08005667 	.word	0x08005667
 8005640:	08005677 	.word	0x08005677
 8005644:	08005677 	.word	0x08005677
 8005648:	08005677 	.word	0x08005677
 800564c:	0800566f 	.word	0x0800566f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005650:	f7fd fed0 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 8005654:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005656:	e014      	b.n	8005682 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005658:	f7fd fee2 	bl	8003420 <HAL_RCC_GetPCLK2Freq>
 800565c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800565e:	e010      	b.n	8005682 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005660:	4b1a      	ldr	r3, [pc, #104]	@ (80056cc <UART_SetConfig+0x5c0>)
 8005662:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005664:	e00d      	b.n	8005682 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005666:	f7fd fe57 	bl	8003318 <HAL_RCC_GetSysClockFreq>
 800566a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800566c:	e009      	b.n	8005682 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800566e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005672:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005674:	e005      	b.n	8005682 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005680:	bf00      	nop
    }

    if (pclk != 0U)
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	2b00      	cmp	r3, #0
 8005686:	d028      	beq.n	80056da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568c:	4a10      	ldr	r2, [pc, #64]	@ (80056d0 <UART_SetConfig+0x5c4>)
 800568e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005692:	461a      	mov	r2, r3
 8005694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005696:	fbb3 f2f2 	udiv	r2, r3, r2
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	085b      	lsrs	r3, r3, #1
 80056a0:	441a      	add	r2, r3
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	2b0f      	cmp	r3, #15
 80056b0:	d910      	bls.n	80056d4 <UART_SetConfig+0x5c8>
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056b8:	d20c      	bcs.n	80056d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	b29a      	uxth	r2, r3
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60da      	str	r2, [r3, #12]
 80056c4:	e009      	b.n	80056da <UART_SetConfig+0x5ce>
 80056c6:	bf00      	nop
 80056c8:	40008000 	.word	0x40008000
 80056cc:	00f42400 	.word	0x00f42400
 80056d0:	08005dd0 	.word	0x08005dd0
      }
      else
      {
        ret = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2201      	movs	r2, #1
 80056de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2200      	movs	r2, #0
 80056ee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2200      	movs	r2, #0
 80056f4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80056f6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3730      	adds	r7, #48	@ 0x30
 80056fe:	46bd      	mov	sp, r7
 8005700:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005704 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00a      	beq.n	800572e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00a      	beq.n	8005772 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005776:	f003 0304 	and.w	r3, r3, #4
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005798:	f003 0310 	and.w	r3, r3, #16
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d01a      	beq.n	800581a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005802:	d10a      	bne.n	800581a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	605a      	str	r2, [r3, #4]
  }
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b098      	sub	sp, #96	@ 0x60
 800584c:	af02      	add	r7, sp, #8
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005858:	f7fc fdb0 	bl	80023bc <HAL_GetTick>
 800585c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0308 	and.w	r3, r3, #8
 8005868:	2b08      	cmp	r3, #8
 800586a:	d12f      	bne.n	80058cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800586c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005874:	2200      	movs	r2, #0
 8005876:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f88e 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d022      	beq.n	80058cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005896:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800589a:	653b      	str	r3, [r7, #80]	@ 0x50
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	461a      	mov	r2, r3
 80058a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80058a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058ac:	e841 2300 	strex	r3, r2, [r1]
 80058b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e6      	bne.n	8005886 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e063      	b.n	8005994 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0304 	and.w	r3, r3, #4
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d149      	bne.n	800596e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058e2:	2200      	movs	r2, #0
 80058e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f857 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d03c      	beq.n	800596e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	623b      	str	r3, [r7, #32]
   return(result);
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005908:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	461a      	mov	r2, r3
 8005910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005912:	633b      	str	r3, [r7, #48]	@ 0x30
 8005914:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e6      	bne.n	80058f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3308      	adds	r3, #8
 800592c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	60fb      	str	r3, [r7, #12]
   return(result);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3308      	adds	r3, #8
 8005944:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005946:	61fa      	str	r2, [r7, #28]
 8005948:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	69b9      	ldr	r1, [r7, #24]
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	617b      	str	r3, [r7, #20]
   return(result);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e5      	bne.n	8005926 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e012      	b.n	8005994 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3758      	adds	r7, #88	@ 0x58
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	4613      	mov	r3, r2
 80059aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ac:	e04f      	b.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059b4:	d04b      	beq.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b6:	f7fc fd01 	bl	80023bc <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d302      	bcc.n	80059cc <UART_WaitOnFlagUntilTimeout+0x30>
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e04e      	b.n	8005a6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d037      	beq.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xb2>
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b80      	cmp	r3, #128	@ 0x80
 80059e2:	d034      	beq.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xb2>
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b40      	cmp	r3, #64	@ 0x40
 80059e8:	d031      	beq.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d110      	bne.n	8005a1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2208      	movs	r2, #8
 80059fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 f838 	bl	8005a76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2208      	movs	r2, #8
 8005a0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e029      	b.n	8005a6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a28:	d111      	bne.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 f81e 	bl	8005a76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e00f      	b.n	8005a6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69da      	ldr	r2, [r3, #28]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4013      	ands	r3, r2
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	bf0c      	ite	eq
 8005a5e:	2301      	moveq	r3, #1
 8005a60:	2300      	movne	r3, #0
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	461a      	mov	r2, r3
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d0a0      	beq.n	80059ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b095      	sub	sp, #84	@ 0x54
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005aa2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005aa4:	e841 2300 	strex	r3, r2, [r1]
 8005aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e6      	bne.n	8005a7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ac6:	f023 0301 	bic.w	r3, r3, #1
 8005aca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ad4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ada:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005adc:	e841 2300 	strex	r3, r2, [r1]
 8005ae0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1e3      	bne.n	8005ab0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d118      	bne.n	8005b22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f023 0310 	bic.w	r3, r3, #16
 8005b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b0e:	61bb      	str	r3, [r7, #24]
 8005b10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b12:	6979      	ldr	r1, [r7, #20]
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1e6      	bne.n	8005af0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005b36:	bf00      	nop
 8005b38:	3754      	adds	r7, #84	@ 0x54
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b085      	sub	sp, #20
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e027      	b.n	8005ba8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2224      	movs	r2, #36	@ 0x24
 8005b64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0201 	bic.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d101      	bne.n	8005bcc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e02d      	b.n	8005c28 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2224      	movs	r2, #36	@ 0x24
 8005bd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0201 	bic.w	r2, r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f84f 	bl	8005cac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e02d      	b.n	8005ca4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2224      	movs	r2, #36	@ 0x24
 8005c54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0201 	bic.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f811 	bl	8005cac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d108      	bne.n	8005cce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ccc:	e031      	b.n	8005d32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005cce:	2308      	movs	r3, #8
 8005cd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005cd2:	2308      	movs	r3, #8
 8005cd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	0e5b      	lsrs	r3, r3, #25
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	0f5b      	lsrs	r3, r3, #29
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	f003 0307 	and.w	r3, r3, #7
 8005cf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cf6:	7bbb      	ldrb	r3, [r7, #14]
 8005cf8:	7b3a      	ldrb	r2, [r7, #12]
 8005cfa:	4911      	ldr	r1, [pc, #68]	@ (8005d40 <UARTEx_SetNbDataToProcess+0x94>)
 8005cfc:	5c8a      	ldrb	r2, [r1, r2]
 8005cfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d02:	7b3a      	ldrb	r2, [r7, #12]
 8005d04:	490f      	ldr	r1, [pc, #60]	@ (8005d44 <UARTEx_SetNbDataToProcess+0x98>)
 8005d06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d08:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	7b7a      	ldrb	r2, [r7, #13]
 8005d18:	4909      	ldr	r1, [pc, #36]	@ (8005d40 <UARTEx_SetNbDataToProcess+0x94>)
 8005d1a:	5c8a      	ldrb	r2, [r1, r2]
 8005d1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d20:	7b7a      	ldrb	r2, [r7, #13]
 8005d22:	4908      	ldr	r1, [pc, #32]	@ (8005d44 <UARTEx_SetNbDataToProcess+0x98>)
 8005d24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d26:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005d32:	bf00      	nop
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	08005de8 	.word	0x08005de8
 8005d44:	08005df0 	.word	0x08005df0

08005d48 <memset>:
 8005d48:	4402      	add	r2, r0
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d100      	bne.n	8005d52 <memset+0xa>
 8005d50:	4770      	bx	lr
 8005d52:	f803 1b01 	strb.w	r1, [r3], #1
 8005d56:	e7f9      	b.n	8005d4c <memset+0x4>

08005d58 <__libc_init_array>:
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	4d0d      	ldr	r5, [pc, #52]	@ (8005d90 <__libc_init_array+0x38>)
 8005d5c:	4c0d      	ldr	r4, [pc, #52]	@ (8005d94 <__libc_init_array+0x3c>)
 8005d5e:	1b64      	subs	r4, r4, r5
 8005d60:	10a4      	asrs	r4, r4, #2
 8005d62:	2600      	movs	r6, #0
 8005d64:	42a6      	cmp	r6, r4
 8005d66:	d109      	bne.n	8005d7c <__libc_init_array+0x24>
 8005d68:	4d0b      	ldr	r5, [pc, #44]	@ (8005d98 <__libc_init_array+0x40>)
 8005d6a:	4c0c      	ldr	r4, [pc, #48]	@ (8005d9c <__libc_init_array+0x44>)
 8005d6c:	f000 f818 	bl	8005da0 <_init>
 8005d70:	1b64      	subs	r4, r4, r5
 8005d72:	10a4      	asrs	r4, r4, #2
 8005d74:	2600      	movs	r6, #0
 8005d76:	42a6      	cmp	r6, r4
 8005d78:	d105      	bne.n	8005d86 <__libc_init_array+0x2e>
 8005d7a:	bd70      	pop	{r4, r5, r6, pc}
 8005d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d80:	4798      	blx	r3
 8005d82:	3601      	adds	r6, #1
 8005d84:	e7ee      	b.n	8005d64 <__libc_init_array+0xc>
 8005d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d8a:	4798      	blx	r3
 8005d8c:	3601      	adds	r6, #1
 8005d8e:	e7f2      	b.n	8005d76 <__libc_init_array+0x1e>
 8005d90:	08005e00 	.word	0x08005e00
 8005d94:	08005e00 	.word	0x08005e00
 8005d98:	08005e00 	.word	0x08005e00
 8005d9c:	08005e04 	.word	0x08005e04

08005da0 <_init>:
 8005da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da2:	bf00      	nop
 8005da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005da6:	bc08      	pop	{r3}
 8005da8:	469e      	mov	lr, r3
 8005daa:	4770      	bx	lr

08005dac <_fini>:
 8005dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dae:	bf00      	nop
 8005db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db2:	bc08      	pop	{r3}
 8005db4:	469e      	mov	lr, r3
 8005db6:	4770      	bx	lr
