
tommy_fork_lift_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c14  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002dec  08002dec  00003dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dfc  08002dfc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002dfc  08002dfc  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dfc  08002dfc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dfc  08002dfc  00003dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e00  08002e00  00003e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e04  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  2000000c  08002e10  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08002e10  000041f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a99a  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a71  00000000  00000000  0000e9d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00010448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000979  00000000  00000000  00011098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f194  00000000  00000000  00011a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cccb  00000000  00000000  00030ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce3e2  00000000  00000000  0003d870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010bc52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003314  00000000  00000000  0010bc98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0010efac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002dd4 	.word	0x08002dd4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002dd4 	.word	0x08002dd4

08000218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b08a      	sub	sp, #40	@ 0x28
 800021c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	f107 0314 	add.w	r3, r7, #20
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800022e:	4b34      	ldr	r3, [pc, #208]	@ (8000300 <MX_GPIO_Init+0xe8>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000232:	4a33      	ldr	r2, [pc, #204]	@ (8000300 <MX_GPIO_Init+0xe8>)
 8000234:	f043 0310 	orr.w	r3, r3, #16
 8000238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800023a:	4b31      	ldr	r3, [pc, #196]	@ (8000300 <MX_GPIO_Init+0xe8>)
 800023c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800023e:	f003 0310 	and.w	r3, r3, #16
 8000242:	613b      	str	r3, [r7, #16]
 8000244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000246:	4b2e      	ldr	r3, [pc, #184]	@ (8000300 <MX_GPIO_Init+0xe8>)
 8000248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800024a:	4a2d      	ldr	r2, [pc, #180]	@ (8000300 <MX_GPIO_Init+0xe8>)
 800024c:	f043 0304 	orr.w	r3, r3, #4
 8000250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000252:	4b2b      	ldr	r3, [pc, #172]	@ (8000300 <MX_GPIO_Init+0xe8>)
 8000254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000256:	f003 0304 	and.w	r3, r3, #4
 800025a:	60fb      	str	r3, [r7, #12]
 800025c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800025e:	4b28      	ldr	r3, [pc, #160]	@ (8000300 <MX_GPIO_Init+0xe8>)
 8000260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000262:	4a27      	ldr	r2, [pc, #156]	@ (8000300 <MX_GPIO_Init+0xe8>)
 8000264:	f043 0320 	orr.w	r3, r3, #32
 8000268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800026a:	4b25      	ldr	r3, [pc, #148]	@ (8000300 <MX_GPIO_Init+0xe8>)
 800026c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800026e:	f003 0320 	and.w	r3, r3, #32
 8000272:	60bb      	str	r3, [r7, #8]
 8000274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000276:	4b22      	ldr	r3, [pc, #136]	@ (8000300 <MX_GPIO_Init+0xe8>)
 8000278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027a:	4a21      	ldr	r2, [pc, #132]	@ (8000300 <MX_GPIO_Init+0xe8>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000282:	4b1f      	ldr	r3, [pc, #124]	@ (8000300 <MX_GPIO_Init+0xe8>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800028e:	4b1c      	ldr	r3, [pc, #112]	@ (8000300 <MX_GPIO_Init+0xe8>)
 8000290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000292:	4a1b      	ldr	r2, [pc, #108]	@ (8000300 <MX_GPIO_Init+0xe8>)
 8000294:	f043 0308 	orr.w	r3, r3, #8
 8000298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800029a:	4b19      	ldr	r3, [pc, #100]	@ (8000300 <MX_GPIO_Init+0xe8>)
 800029c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800029e:	f003 0308 	and.w	r3, r3, #8
 80002a2:	603b      	str	r3, [r7, #0]
 80002a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(stby_GPIO_Port, stby_Pin, GPIO_PIN_RESET);
 80002a6:	2200      	movs	r2, #0
 80002a8:	2108      	movs	r1, #8
 80002aa:	4816      	ldr	r0, [pc, #88]	@ (8000304 <MX_GPIO_Init+0xec>)
 80002ac:	f000 ffe6 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	21f0      	movs	r1, #240	@ 0xf0
 80002b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002b8:	f000 ffe0 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : stby_Pin */
  GPIO_InitStruct.Pin = stby_Pin;
 80002bc:	2308      	movs	r3, #8
 80002be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c0:	2301      	movs	r3, #1
 80002c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c4:	2300      	movs	r3, #0
 80002c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c8:	2300      	movs	r3, #0
 80002ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(stby_GPIO_Port, &GPIO_InitStruct);
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	4619      	mov	r1, r3
 80002d2:	480c      	ldr	r0, [pc, #48]	@ (8000304 <MX_GPIO_Init+0xec>)
 80002d4:	f000 fe50 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 80002d8:	23f0      	movs	r3, #240	@ 0xf0
 80002da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002dc:	2301      	movs	r3, #1
 80002de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e0:	2300      	movs	r3, #0
 80002e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e4:	2300      	movs	r3, #0
 80002e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e8:	f107 0314 	add.w	r3, r7, #20
 80002ec:	4619      	mov	r1, r3
 80002ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f2:	f000 fe41 	bl	8000f78 <HAL_GPIO_Init>

}
 80002f6:	bf00      	nop
 80002f8:	3728      	adds	r7, #40	@ 0x28
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40021000 	.word	0x40021000
 8000304:	48000800 	.word	0x48000800

08000308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030c:	f000 fcbd 	bl	8000c8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000310:	f000 f83a 	bl	8000388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000314:	f7ff ff80 	bl	8000218 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000318:	f000 f9a0 	bl	800065c <MX_TIM3_Init>
  MX_TIM1_Init();
 800031c:	f000 f8e0 	bl	80004e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000320:	f000 f938 	bl	8000594 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000324:	f000 fa00 	bl	8000728 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000328:	f000 fa54 	bl	80007d4 <MX_TIM5_Init>
  MX_TIM8_Init();
 800032c:	f000 faa8 	bl	8000880 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000330:	2108      	movs	r1, #8
 8000332:	4812      	ldr	r0, [pc, #72]	@ (800037c <main+0x74>)
 8000334:	f001 fdbc 	bl	8001eb0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000338:	210c      	movs	r1, #12
 800033a:	4810      	ldr	r0, [pc, #64]	@ (800037c <main+0x74>)
 800033c:	f001 fdb8 	bl	8001eb0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000340:	2100      	movs	r1, #0
 8000342:	480f      	ldr	r0, [pc, #60]	@ (8000380 <main+0x78>)
 8000344:	f001 fdb4 	bl	8001eb0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000348:	210c      	movs	r1, #12
 800034a:	480d      	ldr	r0, [pc, #52]	@ (8000380 <main+0x78>)
 800034c:	f001 fdb0 	bl	8001eb0 <HAL_TIM_PWM_Start>
  TIM2->CCR3 = 65535/2;
 8000350:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000354:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000358:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2->CCR4 = 65535/2;
 800035a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800035e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000362:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3->CCR1 = 65535/2;
 8000364:	4b07      	ldr	r3, [pc, #28]	@ (8000384 <main+0x7c>)
 8000366:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800036a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3->CCR4 = 65535/2;
 800036c:	4b05      	ldr	r3, [pc, #20]	@ (8000384 <main+0x7c>)
 800036e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000372:	641a      	str	r2, [r3, #64]	@ 0x40
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 8000374:	2001      	movs	r0, #1
 8000376:	f000 fcf9 	bl	8000d6c <HAL_Delay>
 800037a:	e7fb      	b.n	8000374 <main+0x6c>
 800037c:	20000074 	.word	0x20000074
 8000380:	200000c0 	.word	0x200000c0
 8000384:	40000400 	.word	0x40000400

08000388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b094      	sub	sp, #80	@ 0x50
 800038c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038e:	f107 0318 	add.w	r3, r7, #24
 8000392:	2238      	movs	r2, #56	@ 0x38
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f002 fcf0 	bl	8002d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
 80003a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003ae:	f000 ff7d 	bl	80012ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b2:	2302      	movs	r3, #2
 80003b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003ba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003bc:	2340      	movs	r3, #64	@ 0x40
 80003be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003c0:	2300      	movs	r3, #0
 80003c2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c4:	f107 0318 	add.w	r3, r7, #24
 80003c8:	4618      	mov	r0, r3
 80003ca:	f001 f823 	bl	8001414 <HAL_RCC_OscConfig>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003d4:	f000 f818 	bl	8000408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d8:	230f      	movs	r3, #15
 80003da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003dc:	2301      	movs	r3, #1
 80003de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2100      	movs	r1, #0
 80003f0:	4618      	mov	r0, r3
 80003f2:	f001 fb21 	bl	8001a38 <HAL_RCC_ClockConfig>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80003fc:	f000 f804 	bl	8000408 <Error_Handler>
  }
}
 8000400:	bf00      	nop
 8000402:	3750      	adds	r7, #80	@ 0x50
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800040c:	b672      	cpsid	i
}
 800040e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000410:	bf00      	nop
 8000412:	e7fd      	b.n	8000410 <Error_Handler+0x8>

08000414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041a:	4b0f      	ldr	r3, [pc, #60]	@ (8000458 <HAL_MspInit+0x44>)
 800041c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800041e:	4a0e      	ldr	r2, [pc, #56]	@ (8000458 <HAL_MspInit+0x44>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6613      	str	r3, [r2, #96]	@ 0x60
 8000426:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <HAL_MspInit+0x44>)
 8000428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000432:	4b09      	ldr	r3, [pc, #36]	@ (8000458 <HAL_MspInit+0x44>)
 8000434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000436:	4a08      	ldr	r2, [pc, #32]	@ (8000458 <HAL_MspInit+0x44>)
 8000438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800043c:	6593      	str	r3, [r2, #88]	@ 0x58
 800043e:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <HAL_MspInit+0x44>)
 8000440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800044a:	f000 ffd3 	bl	80013f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40021000 	.word	0x40021000

0800045c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000460:	bf00      	nop
 8000462:	e7fd      	b.n	8000460 <NMI_Handler+0x4>

08000464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <HardFault_Handler+0x4>

0800046c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <MemManage_Handler+0x4>

08000474 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <BusFault_Handler+0x4>

0800047c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <UsageFault_Handler+0x4>

08000484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr

08000492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr

080004a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b2:	f000 fc3d 	bl	8000d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <SystemInit+0x20>)
 80004c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004c6:	4a05      	ldr	r2, [pc, #20]	@ (80004dc <SystemInit+0x20>)
 80004c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	e000ed00 	.word	0xe000ed00

080004e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08c      	sub	sp, #48	@ 0x30
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004e6:	f107 030c 	add.w	r3, r7, #12
 80004ea:	2224      	movs	r2, #36	@ 0x24
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 fc44 	bl	8002d7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004f4:	463b      	mov	r3, r7
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004fe:	4b23      	ldr	r3, [pc, #140]	@ (800058c <MX_TIM1_Init+0xac>)
 8000500:	4a23      	ldr	r2, [pc, #140]	@ (8000590 <MX_TIM1_Init+0xb0>)
 8000502:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000504:	4b21      	ldr	r3, [pc, #132]	@ (800058c <MX_TIM1_Init+0xac>)
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800050a:	4b20      	ldr	r3, [pc, #128]	@ (800058c <MX_TIM1_Init+0xac>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000510:	4b1e      	ldr	r3, [pc, #120]	@ (800058c <MX_TIM1_Init+0xac>)
 8000512:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000516:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000518:	4b1c      	ldr	r3, [pc, #112]	@ (800058c <MX_TIM1_Init+0xac>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800051e:	4b1b      	ldr	r3, [pc, #108]	@ (800058c <MX_TIM1_Init+0xac>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000524:	4b19      	ldr	r3, [pc, #100]	@ (800058c <MX_TIM1_Init+0xac>)
 8000526:	2200      	movs	r2, #0
 8000528:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800052a:	2301      	movs	r3, #1
 800052c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000532:	2301      	movs	r3, #1
 8000534:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800053e:	2300      	movs	r3, #0
 8000540:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000542:	2301      	movs	r3, #1
 8000544:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	4619      	mov	r1, r3
 8000554:	480d      	ldr	r0, [pc, #52]	@ (800058c <MX_TIM1_Init+0xac>)
 8000556:	f001 fdbd 	bl	80020d4 <HAL_TIM_Encoder_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000560:	f7ff ff52 	bl	8000408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000564:	2300      	movs	r3, #0
 8000566:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000570:	463b      	mov	r3, r7
 8000572:	4619      	mov	r1, r3
 8000574:	4805      	ldr	r0, [pc, #20]	@ (800058c <MX_TIM1_Init+0xac>)
 8000576:	f002 fb6b 	bl	8002c50 <HAL_TIMEx_MasterConfigSynchronization>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000580:	f7ff ff42 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000584:	bf00      	nop
 8000586:	3730      	adds	r7, #48	@ 0x30
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000028 	.word	0x20000028
 8000590:	40012c00 	.word	0x40012c00

08000594 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	@ 0x28
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005a6:	463b      	mov	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
 80005b4:	615a      	str	r2, [r3, #20]
 80005b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005b8:	4b27      	ldr	r3, [pc, #156]	@ (8000658 <MX_TIM2_Init+0xc4>)
 80005ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005c0:	4b25      	ldr	r3, [pc, #148]	@ (8000658 <MX_TIM2_Init+0xc4>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c6:	4b24      	ldr	r3, [pc, #144]	@ (8000658 <MX_TIM2_Init+0xc4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80005cc:	4b22      	ldr	r3, [pc, #136]	@ (8000658 <MX_TIM2_Init+0xc4>)
 80005ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d4:	4b20      	ldr	r3, [pc, #128]	@ (8000658 <MX_TIM2_Init+0xc4>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005da:	4b1f      	ldr	r3, [pc, #124]	@ (8000658 <MX_TIM2_Init+0xc4>)
 80005dc:	2280      	movs	r2, #128	@ 0x80
 80005de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005e0:	481d      	ldr	r0, [pc, #116]	@ (8000658 <MX_TIM2_Init+0xc4>)
 80005e2:	f001 fc0d 	bl	8001e00 <HAL_TIM_PWM_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80005ec:	f7ff ff0c 	bl	8000408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	4619      	mov	r1, r3
 80005fe:	4816      	ldr	r0, [pc, #88]	@ (8000658 <MX_TIM2_Init+0xc4>)
 8000600:	f002 fb26 	bl	8002c50 <HAL_TIMEx_MasterConfigSynchronization>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800060a:	f7ff fefd 	bl	8000408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800060e:	2360      	movs	r3, #96	@ 0x60
 8000610:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800061e:	463b      	mov	r3, r7
 8000620:	2208      	movs	r2, #8
 8000622:	4619      	mov	r1, r3
 8000624:	480c      	ldr	r0, [pc, #48]	@ (8000658 <MX_TIM2_Init+0xc4>)
 8000626:	f001 fdfb 	bl	8002220 <HAL_TIM_PWM_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000630:	f7ff feea 	bl	8000408 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000634:	463b      	mov	r3, r7
 8000636:	220c      	movs	r2, #12
 8000638:	4619      	mov	r1, r3
 800063a:	4807      	ldr	r0, [pc, #28]	@ (8000658 <MX_TIM2_Init+0xc4>)
 800063c:	f001 fdf0 	bl	8002220 <HAL_TIM_PWM_ConfigChannel>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000646:	f7ff fedf 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800064a:	4803      	ldr	r0, [pc, #12]	@ (8000658 <MX_TIM2_Init+0xc4>)
 800064c:	f000 fa7c 	bl	8000b48 <HAL_TIM_MspPostInit>

}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	@ 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000074 	.word	0x20000074

0800065c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	@ 0x28
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800066e:	463b      	mov	r3, r7
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
 800067c:	615a      	str	r2, [r3, #20]
 800067e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000680:	4b27      	ldr	r3, [pc, #156]	@ (8000720 <MX_TIM3_Init+0xc4>)
 8000682:	4a28      	ldr	r2, [pc, #160]	@ (8000724 <MX_TIM3_Init+0xc8>)
 8000684:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000686:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <MX_TIM3_Init+0xc4>)
 8000688:	2200      	movs	r2, #0
 800068a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068c:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <MX_TIM3_Init+0xc4>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000692:	4b23      	ldr	r3, [pc, #140]	@ (8000720 <MX_TIM3_Init+0xc4>)
 8000694:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000698:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069a:	4b21      	ldr	r3, [pc, #132]	@ (8000720 <MX_TIM3_Init+0xc4>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <MX_TIM3_Init+0xc4>)
 80006a2:	2280      	movs	r2, #128	@ 0x80
 80006a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006a6:	481e      	ldr	r0, [pc, #120]	@ (8000720 <MX_TIM3_Init+0xc4>)
 80006a8:	f001 fbaa 	bl	8001e00 <HAL_TIM_PWM_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80006b2:	f7ff fea9 	bl	8000408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	4619      	mov	r1, r3
 80006c4:	4816      	ldr	r0, [pc, #88]	@ (8000720 <MX_TIM3_Init+0xc4>)
 80006c6:	f002 fac3 	bl	8002c50 <HAL_TIMEx_MasterConfigSynchronization>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80006d0:	f7ff fe9a 	bl	8000408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d4:	2360      	movs	r3, #96	@ 0x60
 80006d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	480d      	ldr	r0, [pc, #52]	@ (8000720 <MX_TIM3_Init+0xc4>)
 80006ec:	f001 fd98 	bl	8002220 <HAL_TIM_PWM_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80006f6:	f7ff fe87 	bl	8000408 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006fa:	463b      	mov	r3, r7
 80006fc:	220c      	movs	r2, #12
 80006fe:	4619      	mov	r1, r3
 8000700:	4807      	ldr	r0, [pc, #28]	@ (8000720 <MX_TIM3_Init+0xc4>)
 8000702:	f001 fd8d 	bl	8002220 <HAL_TIM_PWM_ConfigChannel>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800070c:	f7ff fe7c 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000710:	4803      	ldr	r0, [pc, #12]	@ (8000720 <MX_TIM3_Init+0xc4>)
 8000712:	f000 fa19 	bl	8000b48 <HAL_TIM_MspPostInit>

}
 8000716:	bf00      	nop
 8000718:	3728      	adds	r7, #40	@ 0x28
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000c0 	.word	0x200000c0
 8000724:	40000400 	.word	0x40000400

08000728 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	@ 0x30
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2224      	movs	r2, #36	@ 0x24
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fb20 	bl	8002d7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073c:	463b      	mov	r3, r7
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000746:	4b21      	ldr	r3, [pc, #132]	@ (80007cc <MX_TIM4_Init+0xa4>)
 8000748:	4a21      	ldr	r2, [pc, #132]	@ (80007d0 <MX_TIM4_Init+0xa8>)
 800074a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800074c:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <MX_TIM4_Init+0xa4>)
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000752:	4b1e      	ldr	r3, [pc, #120]	@ (80007cc <MX_TIM4_Init+0xa4>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000758:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <MX_TIM4_Init+0xa4>)
 800075a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800075e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000760:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <MX_TIM4_Init+0xa4>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000766:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <MX_TIM4_Init+0xa4>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800076c:	2301      	movs	r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000774:	2301      	movs	r3, #1
 8000776:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000784:	2301      	movs	r3, #1
 8000786:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	480d      	ldr	r0, [pc, #52]	@ (80007cc <MX_TIM4_Init+0xa4>)
 8000798:	f001 fc9c 	bl	80020d4 <HAL_TIM_Encoder_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80007a2:	f7ff fe31 	bl	8000408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007ae:	463b      	mov	r3, r7
 80007b0:	4619      	mov	r1, r3
 80007b2:	4806      	ldr	r0, [pc, #24]	@ (80007cc <MX_TIM4_Init+0xa4>)
 80007b4:	f002 fa4c 	bl	8002c50 <HAL_TIMEx_MasterConfigSynchronization>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80007be:	f7ff fe23 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	3730      	adds	r7, #48	@ 0x30
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000010c 	.word	0x2000010c
 80007d0:	40000800 	.word	0x40000800

080007d4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	@ 0x30
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2224      	movs	r2, #36	@ 0x24
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 faca 	bl	8002d7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80007f2:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <MX_TIM5_Init+0xa4>)
 80007f4:	4a21      	ldr	r2, [pc, #132]	@ (800087c <MX_TIM5_Init+0xa8>)
 80007f6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80007f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <MX_TIM5_Init+0xa4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <MX_TIM5_Init+0xa4>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000804:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <MX_TIM5_Init+0xa4>)
 8000806:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800080a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080c:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <MX_TIM5_Init+0xa4>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000812:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <MX_TIM5_Init+0xa4>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000818:	2301      	movs	r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800081c:	2300      	movs	r3, #0
 800081e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000820:	2301      	movs	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000830:	2301      	movs	r3, #1
 8000832:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4619      	mov	r1, r3
 8000842:	480d      	ldr	r0, [pc, #52]	@ (8000878 <MX_TIM5_Init+0xa4>)
 8000844:	f001 fc46 	bl	80020d4 <HAL_TIM_Encoder_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800084e:	f7ff fddb 	bl	8000408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800085a:	463b      	mov	r3, r7
 800085c:	4619      	mov	r1, r3
 800085e:	4806      	ldr	r0, [pc, #24]	@ (8000878 <MX_TIM5_Init+0xa4>)
 8000860:	f002 f9f6 	bl	8002c50 <HAL_TIMEx_MasterConfigSynchronization>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800086a:	f7ff fdcd 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	3730      	adds	r7, #48	@ 0x30
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000158 	.word	0x20000158
 800087c:	40000c00 	.word	0x40000c00

08000880 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08c      	sub	sp, #48	@ 0x30
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	2224      	movs	r2, #36	@ 0x24
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f002 fa74 	bl	8002d7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	463b      	mov	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800089e:	4b23      	ldr	r3, [pc, #140]	@ (800092c <MX_TIM8_Init+0xac>)
 80008a0:	4a23      	ldr	r2, [pc, #140]	@ (8000930 <MX_TIM8_Init+0xb0>)
 80008a2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80008a4:	4b21      	ldr	r3, [pc, #132]	@ (800092c <MX_TIM8_Init+0xac>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008aa:	4b20      	ldr	r3, [pc, #128]	@ (800092c <MX_TIM8_Init+0xac>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <MX_TIM8_Init+0xac>)
 80008b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008b6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b8:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <MX_TIM8_Init+0xac>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80008be:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <MX_TIM8_Init+0xac>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c4:	4b19      	ldr	r3, [pc, #100]	@ (800092c <MX_TIM8_Init+0xac>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008d2:	2301      	movs	r3, #1
 80008d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008e2:	2301      	movs	r3, #1
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	4619      	mov	r1, r3
 80008f4:	480d      	ldr	r0, [pc, #52]	@ (800092c <MX_TIM8_Init+0xac>)
 80008f6:	f001 fbed 	bl	80020d4 <HAL_TIM_Encoder_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000900:	f7ff fd82 	bl	8000408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000904:	2300      	movs	r3, #0
 8000906:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_TIM8_Init+0xac>)
 8000916:	f002 f99b 	bl	8002c50 <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000920:	f7ff fd72 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	3730      	adds	r7, #48	@ 0x30
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200001a4 	.word	0x200001a4
 8000930:	40013400 	.word	0x40013400

08000934 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b090      	sub	sp, #64	@ 0x40
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a5d      	ldr	r2, [pc, #372]	@ (8000ac8 <HAL_TIM_Encoder_MspInit+0x194>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d128      	bne.n	80009a8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000956:	4b5d      	ldr	r3, [pc, #372]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 8000958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800095a:	4a5c      	ldr	r2, [pc, #368]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 800095c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000960:	6613      	str	r3, [r2, #96]	@ 0x60
 8000962:	4b5a      	ldr	r3, [pc, #360]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000966:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800096c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	4b57      	ldr	r3, [pc, #348]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000972:	4a56      	ldr	r2, [pc, #344]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800097a:	4b54      	ldr	r3, [pc, #336]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
 8000984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000986:	2303      	movs	r3, #3
 8000988:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000996:	2302      	movs	r3, #2
 8000998:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800099e:	4619      	mov	r1, r3
 80009a0:	484b      	ldr	r0, [pc, #300]	@ (8000ad0 <HAL_TIM_Encoder_MspInit+0x19c>)
 80009a2:	f000 fae9 	bl	8000f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80009a6:	e08a      	b.n	8000abe <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a49      	ldr	r2, [pc, #292]	@ (8000ad4 <HAL_TIM_Encoder_MspInit+0x1a0>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d129      	bne.n	8000a06 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80009b2:	4b46      	ldr	r3, [pc, #280]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b6:	4a45      	ldr	r2, [pc, #276]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80009be:	4b43      	ldr	r3, [pc, #268]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	623b      	str	r3, [r7, #32]
 80009c8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	4b40      	ldr	r3, [pc, #256]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	4a3f      	ldr	r2, [pc, #252]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d6:	4b3d      	ldr	r3, [pc, #244]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	61fb      	str	r3, [r7, #28]
 80009e0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80009e2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80009e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80009f4:	2302      	movs	r3, #2
 80009f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009fc:	4619      	mov	r1, r3
 80009fe:	4836      	ldr	r0, [pc, #216]	@ (8000ad8 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8000a00:	f000 faba 	bl	8000f78 <HAL_GPIO_Init>
}
 8000a04:	e05b      	b.n	8000abe <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a34      	ldr	r2, [pc, #208]	@ (8000adc <HAL_TIM_Encoder_MspInit+0x1a8>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d129      	bne.n	8000a64 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000a10:	4b2e      	ldr	r3, [pc, #184]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 8000a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a14:	4a2d      	ldr	r2, [pc, #180]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 8000a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a20:	f003 0308 	and.w	r3, r3, #8
 8000a24:	61bb      	str	r3, [r7, #24]
 8000a26:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	4b28      	ldr	r3, [pc, #160]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 8000a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2c:	4a27      	ldr	r2, [pc, #156]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a34:	4b25      	ldr	r3, [pc, #148]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a40:	2303      	movs	r3, #3
 8000a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000a50:	2302      	movs	r3, #2
 8000a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5e:	f000 fa8b 	bl	8000f78 <HAL_GPIO_Init>
}
 8000a62:	e02c      	b.n	8000abe <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a1d      	ldr	r2, [pc, #116]	@ (8000ae0 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d127      	bne.n	8000abe <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000a6e:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 8000a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a72:	4a16      	ldr	r2, [pc, #88]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 8000a74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a78:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 8000a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8a:	4a10      	ldr	r2, [pc, #64]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a92:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <HAL_TIM_Encoder_MspInit+0x198>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a9e:	23c0      	movs	r3, #192	@ 0xc0
 8000aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8000aba:	f000 fa5d 	bl	8000f78 <HAL_GPIO_Init>
}
 8000abe:	bf00      	nop
 8000ac0:	3740      	adds	r7, #64	@ 0x40
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40012c00 	.word	0x40012c00
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	48000800 	.word	0x48000800
 8000ad4:	40000800 	.word	0x40000800
 8000ad8:	48000c00 	.word	0x48000c00
 8000adc:	40000c00 	.word	0x40000c00
 8000ae0:	40013400 	.word	0x40013400

08000ae4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000af4:	d10c      	bne.n	8000b10 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000af6:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x5c>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afa:	4a11      	ldr	r2, [pc, #68]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x5c>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b02:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x5c>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000b0e:	e010      	b.n	8000b32 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0b      	ldr	r2, [pc, #44]	@ (8000b44 <HAL_TIM_PWM_MspInit+0x60>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d10b      	bne.n	8000b32 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x5c>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1e:	4a08      	ldr	r2, [pc, #32]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x5c>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x5c>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40000400 	.word	0x40000400

08000b48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b68:	d139      	bne.n	8000bde <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c28 <HAL_TIM_MspPostInit+0xe0>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6e:	4a2e      	ldr	r2, [pc, #184]	@ (8000c28 <HAL_TIM_MspPostInit+0xe0>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b76:	4b2c      	ldr	r3, [pc, #176]	@ (8000c28 <HAL_TIM_MspPostInit+0xe0>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b82:	4b29      	ldr	r3, [pc, #164]	@ (8000c28 <HAL_TIM_MspPostInit+0xe0>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	4a28      	ldr	r2, [pc, #160]	@ (8000c28 <HAL_TIM_MspPostInit+0xe0>)
 8000b88:	f043 0308 	orr.w	r3, r3, #8
 8000b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8e:	4b26      	ldr	r3, [pc, #152]	@ (8000c28 <HAL_TIM_MspPostInit+0xe0>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b92:	f003 0308 	and.w	r3, r3, #8
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = RL_Pin;
 8000b9a:	2308      	movs	r3, #8
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000baa:	2301      	movs	r3, #1
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RL_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb8:	f000 f9de 	bl	8000f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RR_Pin;
 8000bbc:	2380      	movs	r3, #128	@ 0x80
 8000bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RR_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4815      	ldr	r0, [pc, #84]	@ (8000c2c <HAL_TIM_MspPostInit+0xe4>)
 8000bd8:	f000 f9ce 	bl	8000f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bdc:	e020      	b.n	8000c20 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM3)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a13      	ldr	r2, [pc, #76]	@ (8000c30 <HAL_TIM_MspPostInit+0xe8>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d11b      	bne.n	8000c20 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <HAL_TIM_MspPostInit+0xe0>)
 8000bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bec:	4a0e      	ldr	r2, [pc, #56]	@ (8000c28 <HAL_TIM_MspPostInit+0xe0>)
 8000bee:	f043 0310 	orr.w	r3, r3, #16
 8000bf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <HAL_TIM_MspPostInit+0xe0>)
 8000bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf8:	f003 0310 	and.w	r3, r3, #16
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FR_Pin|FL_Pin;
 8000c00:	2324      	movs	r3, #36	@ 0x24
 8000c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c10:	2302      	movs	r3, #2
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	@ (8000c34 <HAL_TIM_MspPostInit+0xec>)
 8000c1c:	f000 f9ac 	bl	8000f78 <HAL_GPIO_Init>
}
 8000c20:	bf00      	nop
 8000c22:	3728      	adds	r7, #40	@ 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	48000c00 	.word	0x48000c00
 8000c30:	40000400 	.word	0x40000400
 8000c34:	48001000 	.word	0x48001000

08000c38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c38:	480d      	ldr	r0, [pc, #52]	@ (8000c70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c3a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c3c:	f7ff fc3e 	bl	80004bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c40:	480c      	ldr	r0, [pc, #48]	@ (8000c74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c42:	490d      	ldr	r1, [pc, #52]	@ (8000c78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c44:	4a0d      	ldr	r2, [pc, #52]	@ (8000c7c <LoopForever+0xe>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c48:	e002      	b.n	8000c50 <LoopCopyDataInit>

08000c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4e:	3304      	adds	r3, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c54:	d3f9      	bcc.n	8000c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c56:	4a0a      	ldr	r2, [pc, #40]	@ (8000c80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c58:	4c0a      	ldr	r4, [pc, #40]	@ (8000c84 <LoopForever+0x16>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c5c:	e001      	b.n	8000c62 <LoopFillZerobss>

08000c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c60:	3204      	adds	r2, #4

08000c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c64:	d3fb      	bcc.n	8000c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c66:	f002 f891 	bl	8002d8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c6a:	f7ff fb4d 	bl	8000308 <main>

08000c6e <LoopForever>:

LoopForever:
    b LoopForever
 8000c6e:	e7fe      	b.n	8000c6e <LoopForever>
  ldr   r0, =_estack
 8000c70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c7c:	08002e04 	.word	0x08002e04
  ldr r2, =_sbss
 8000c80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c84:	200001f4 	.word	0x200001f4

08000c88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC1_2_IRQHandler>

08000c8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c94:	2003      	movs	r0, #3
 8000c96:	f000 f93d 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c9a:	200f      	movs	r0, #15
 8000c9c:	f000 f80e 	bl	8000cbc <HAL_InitTick>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d002      	beq.n	8000cac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	71fb      	strb	r3, [r7, #7]
 8000caa:	e001      	b.n	8000cb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cac:	f7ff fbb2 	bl	8000414 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cb0:	79fb      	ldrb	r3, [r7, #7]

}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cc8:	4b16      	ldr	r3, [pc, #88]	@ (8000d24 <HAL_InitTick+0x68>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d022      	beq.n	8000d16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cd0:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <HAL_InitTick+0x6c>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <HAL_InitTick+0x68>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000cdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 f93a 	bl	8000f5e <HAL_SYSTICK_Config>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d10f      	bne.n	8000d10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b0f      	cmp	r3, #15
 8000cf4:	d809      	bhi.n	8000d0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cfe:	f000 f914 	bl	8000f2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d02:	4a0a      	ldr	r2, [pc, #40]	@ (8000d2c <HAL_InitTick+0x70>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	e007      	b.n	8000d1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	73fb      	strb	r3, [r7, #15]
 8000d0e:	e004      	b.n	8000d1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
 8000d14:	e001      	b.n	8000d1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	20000004 	.word	0x20000004

08000d30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <HAL_IncTick+0x1c>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <HAL_IncTick+0x20>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4a03      	ldr	r2, [pc, #12]	@ (8000d4c <HAL_IncTick+0x1c>)
 8000d40:	6013      	str	r3, [r2, #0]
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	200001f0 	.word	0x200001f0
 8000d50:	20000008 	.word	0x20000008

08000d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b03      	ldr	r3, [pc, #12]	@ (8000d68 <HAL_GetTick+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	200001f0 	.word	0x200001f0

08000d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d74:	f7ff ffee 	bl	8000d54 <HAL_GetTick>
 8000d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d84:	d004      	beq.n	8000d90 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <HAL_Delay+0x40>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d90:	bf00      	nop
 8000d92:	f7ff ffdf 	bl	8000d54 <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d8f7      	bhi.n	8000d92 <HAL_Delay+0x26>
  {
  }
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000008 	.word	0x20000008

08000db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de2:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	60d3      	str	r3, [r2, #12]
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dfc:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <__NVIC_GetPriorityGrouping+0x18>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	0a1b      	lsrs	r3, r3, #8
 8000e02:	f003 0307 	and.w	r3, r3, #7
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	@ (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	@ (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	@ 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	@ 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ee0:	d301      	bcc.n	8000ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00f      	b.n	8000f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <SysTick_Config+0x40>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eee:	210f      	movs	r1, #15
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ef4:	f7ff ff8e 	bl	8000e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <SysTick_Config+0x40>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <SysTick_Config+0x40>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff47 	bl	8000db0 <__NVIC_SetPriorityGrouping>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff5e 	bl	8000df8 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff90 	bl	8000e68 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5f 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ffb2 	bl	8000ed0 <SysTick_Config>
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f86:	e15a      	b.n	800123e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	4013      	ands	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 814c 	beq.w	8001238 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d005      	beq.n	8000fb8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d130      	bne.n	800101a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fee:	2201      	movs	r2, #1
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	091b      	lsrs	r3, r3, #4
 8001004:	f003 0201 	and.w	r2, r3, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b03      	cmp	r3, #3
 8001024:	d017      	beq.n	8001056 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d123      	bne.n	80010aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	08da      	lsrs	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3208      	adds	r2, #8
 800106a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	220f      	movs	r2, #15
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	691a      	ldr	r2, [r3, #16]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	08da      	lsrs	r2, r3, #3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	6939      	ldr	r1, [r7, #16]
 80010a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0203 	and.w	r2, r3, #3
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 80a6 	beq.w	8001238 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ec:	4b5b      	ldr	r3, [pc, #364]	@ (800125c <HAL_GPIO_Init+0x2e4>)
 80010ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f0:	4a5a      	ldr	r2, [pc, #360]	@ (800125c <HAL_GPIO_Init+0x2e4>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80010f8:	4b58      	ldr	r3, [pc, #352]	@ (800125c <HAL_GPIO_Init+0x2e4>)
 80010fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001104:	4a56      	ldr	r2, [pc, #344]	@ (8001260 <HAL_GPIO_Init+0x2e8>)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	220f      	movs	r2, #15
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800112e:	d01f      	beq.n	8001170 <HAL_GPIO_Init+0x1f8>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a4c      	ldr	r2, [pc, #304]	@ (8001264 <HAL_GPIO_Init+0x2ec>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d019      	beq.n	800116c <HAL_GPIO_Init+0x1f4>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a4b      	ldr	r2, [pc, #300]	@ (8001268 <HAL_GPIO_Init+0x2f0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d013      	beq.n	8001168 <HAL_GPIO_Init+0x1f0>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a4a      	ldr	r2, [pc, #296]	@ (800126c <HAL_GPIO_Init+0x2f4>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d00d      	beq.n	8001164 <HAL_GPIO_Init+0x1ec>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a49      	ldr	r2, [pc, #292]	@ (8001270 <HAL_GPIO_Init+0x2f8>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d007      	beq.n	8001160 <HAL_GPIO_Init+0x1e8>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a48      	ldr	r2, [pc, #288]	@ (8001274 <HAL_GPIO_Init+0x2fc>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d101      	bne.n	800115c <HAL_GPIO_Init+0x1e4>
 8001158:	2305      	movs	r3, #5
 800115a:	e00a      	b.n	8001172 <HAL_GPIO_Init+0x1fa>
 800115c:	2306      	movs	r3, #6
 800115e:	e008      	b.n	8001172 <HAL_GPIO_Init+0x1fa>
 8001160:	2304      	movs	r3, #4
 8001162:	e006      	b.n	8001172 <HAL_GPIO_Init+0x1fa>
 8001164:	2303      	movs	r3, #3
 8001166:	e004      	b.n	8001172 <HAL_GPIO_Init+0x1fa>
 8001168:	2302      	movs	r3, #2
 800116a:	e002      	b.n	8001172 <HAL_GPIO_Init+0x1fa>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <HAL_GPIO_Init+0x1fa>
 8001170:	2300      	movs	r3, #0
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	f002 0203 	and.w	r2, r2, #3
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	4093      	lsls	r3, r2
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001182:	4937      	ldr	r1, [pc, #220]	@ (8001260 <HAL_GPIO_Init+0x2e8>)
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001190:	4b39      	ldr	r3, [pc, #228]	@ (8001278 <HAL_GPIO_Init+0x300>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011b4:	4a30      	ldr	r2, [pc, #192]	@ (8001278 <HAL_GPIO_Init+0x300>)
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001278 <HAL_GPIO_Init+0x300>)
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011de:	4a26      	ldr	r2, [pc, #152]	@ (8001278 <HAL_GPIO_Init+0x300>)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80011e4:	4b24      	ldr	r3, [pc, #144]	@ (8001278 <HAL_GPIO_Init+0x300>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001208:	4a1b      	ldr	r2, [pc, #108]	@ (8001278 <HAL_GPIO_Init+0x300>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800120e:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <HAL_GPIO_Init+0x300>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001232:	4a11      	ldr	r2, [pc, #68]	@ (8001278 <HAL_GPIO_Init+0x300>)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	3301      	adds	r3, #1
 800123c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	fa22 f303 	lsr.w	r3, r2, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	f47f ae9d 	bne.w	8000f88 <HAL_GPIO_Init+0x10>
  }
}
 800124e:	bf00      	nop
 8001250:	bf00      	nop
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	40021000 	.word	0x40021000
 8001260:	40010000 	.word	0x40010000
 8001264:	48000400 	.word	0x48000400
 8001268:	48000800 	.word	0x48000800
 800126c:	48000c00 	.word	0x48000c00
 8001270:	48001000 	.word	0x48001000
 8001274:	48001400 	.word	0x48001400
 8001278:	40010400 	.word	0x40010400

0800127c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	807b      	strh	r3, [r7, #2]
 8001288:	4613      	mov	r3, r2
 800128a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800128c:	787b      	ldrb	r3, [r7, #1]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001298:	e002      	b.n	80012a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d141      	bne.n	800133e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ba:	4b4b      	ldr	r3, [pc, #300]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012c6:	d131      	bne.n	800132c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012c8:	4b47      	ldr	r3, [pc, #284]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012ce:	4a46      	ldr	r2, [pc, #280]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d8:	4b43      	ldr	r3, [pc, #268]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012e0:	4a41      	ldr	r2, [pc, #260]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012e8:	4b40      	ldr	r3, [pc, #256]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2232      	movs	r2, #50	@ 0x32
 80012ee:	fb02 f303 	mul.w	r3, r2, r3
 80012f2:	4a3f      	ldr	r2, [pc, #252]	@ (80013f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012f4:	fba2 2303 	umull	r2, r3, r2, r3
 80012f8:	0c9b      	lsrs	r3, r3, #18
 80012fa:	3301      	adds	r3, #1
 80012fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012fe:	e002      	b.n	8001306 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3b01      	subs	r3, #1
 8001304:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001306:	4b38      	ldr	r3, [pc, #224]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800130e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001312:	d102      	bne.n	800131a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f2      	bne.n	8001300 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800131a:	4b33      	ldr	r3, [pc, #204]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001326:	d158      	bne.n	80013da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e057      	b.n	80013dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800132c:	4b2e      	ldr	r3, [pc, #184]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001332:	4a2d      	ldr	r2, [pc, #180]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001338:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800133c:	e04d      	b.n	80013da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001344:	d141      	bne.n	80013ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001346:	4b28      	ldr	r3, [pc, #160]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800134e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001352:	d131      	bne.n	80013b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001354:	4b24      	ldr	r3, [pc, #144]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800135a:	4a23      	ldr	r2, [pc, #140]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001360:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001364:	4b20      	ldr	r3, [pc, #128]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800136c:	4a1e      	ldr	r2, [pc, #120]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001372:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001374:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2232      	movs	r2, #50	@ 0x32
 800137a:	fb02 f303 	mul.w	r3, r2, r3
 800137e:	4a1c      	ldr	r2, [pc, #112]	@ (80013f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001380:	fba2 2303 	umull	r2, r3, r2, r3
 8001384:	0c9b      	lsrs	r3, r3, #18
 8001386:	3301      	adds	r3, #1
 8001388:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800138a:	e002      	b.n	8001392 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	3b01      	subs	r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001392:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800139a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800139e:	d102      	bne.n	80013a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f2      	bne.n	800138c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013b2:	d112      	bne.n	80013da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e011      	b.n	80013dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013b8:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013c8:	e007      	b.n	80013da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013ca:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013d2:	4a05      	ldr	r2, [pc, #20]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	40007000 	.word	0x40007000
 80013ec:	20000000 	.word	0x20000000
 80013f0:	431bde83 	.word	0x431bde83

080013f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80013f8:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	4a04      	ldr	r2, [pc, #16]	@ (8001410 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001402:	6093      	str	r3, [r2, #8]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40007000 	.word	0x40007000

08001414 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e2fe      	b.n	8001a24 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d075      	beq.n	800151e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001432:	4b97      	ldr	r3, [pc, #604]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800143c:	4b94      	ldr	r3, [pc, #592]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	2b0c      	cmp	r3, #12
 800144a:	d102      	bne.n	8001452 <HAL_RCC_OscConfig+0x3e>
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	2b03      	cmp	r3, #3
 8001450:	d002      	beq.n	8001458 <HAL_RCC_OscConfig+0x44>
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	2b08      	cmp	r3, #8
 8001456:	d10b      	bne.n	8001470 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001458:	4b8d      	ldr	r3, [pc, #564]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d05b      	beq.n	800151c <HAL_RCC_OscConfig+0x108>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d157      	bne.n	800151c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e2d9      	b.n	8001a24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001478:	d106      	bne.n	8001488 <HAL_RCC_OscConfig+0x74>
 800147a:	4b85      	ldr	r3, [pc, #532]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a84      	ldr	r2, [pc, #528]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 8001480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e01d      	b.n	80014c4 <HAL_RCC_OscConfig+0xb0>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0x98>
 8001492:	4b7f      	ldr	r3, [pc, #508]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a7e      	ldr	r2, [pc, #504]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 8001498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b7c      	ldr	r3, [pc, #496]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a7b      	ldr	r2, [pc, #492]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e00b      	b.n	80014c4 <HAL_RCC_OscConfig+0xb0>
 80014ac:	4b78      	ldr	r3, [pc, #480]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a77      	ldr	r2, [pc, #476]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 80014b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b75      	ldr	r3, [pc, #468]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a74      	ldr	r2, [pc, #464]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 80014be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d013      	beq.n	80014f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fc42 	bl	8000d54 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fc3e 	bl	8000d54 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	@ 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e29e      	b.n	8001a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0xc0>
 80014f2:	e014      	b.n	800151e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fc2e 	bl	8000d54 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fc2a 	bl	8000d54 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	@ 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e28a      	b.n	8001a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800150e:	4b60      	ldr	r3, [pc, #384]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0xe8>
 800151a:	e000      	b.n	800151e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d075      	beq.n	8001616 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800152a:	4b59      	ldr	r3, [pc, #356]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001534:	4b56      	ldr	r3, [pc, #344]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b0c      	cmp	r3, #12
 8001542:	d102      	bne.n	800154a <HAL_RCC_OscConfig+0x136>
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d002      	beq.n	8001550 <HAL_RCC_OscConfig+0x13c>
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	2b04      	cmp	r3, #4
 800154e:	d11f      	bne.n	8001590 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001550:	4b4f      	ldr	r3, [pc, #316]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_RCC_OscConfig+0x154>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e25d      	b.n	8001a24 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001568:	4b49      	ldr	r3, [pc, #292]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	4946      	ldr	r1, [pc, #280]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800157c:	4b45      	ldr	r3, [pc, #276]	@ (8001694 <HAL_RCC_OscConfig+0x280>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fb9b 	bl	8000cbc <HAL_InitTick>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d043      	beq.n	8001614 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e249      	b.n	8001a24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d023      	beq.n	80015e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001598:	4b3d      	ldr	r3, [pc, #244]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a3c      	ldr	r2, [pc, #240]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 800159e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff fbd6 	bl	8000d54 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ac:	f7ff fbd2 	bl	8000d54 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e232      	b.n	8001a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015be:	4b34      	ldr	r3, [pc, #208]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ca:	4b31      	ldr	r3, [pc, #196]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	061b      	lsls	r3, r3, #24
 80015d8:	492d      	ldr	r1, [pc, #180]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	604b      	str	r3, [r1, #4]
 80015de:	e01a      	b.n	8001616 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 80015e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fbb2 	bl	8000d54 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f4:	f7ff fbae 	bl	8000d54 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e20e      	b.n	8001a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001606:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x1e0>
 8001612:	e000      	b.n	8001616 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001614:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	d041      	beq.n	80016a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d01c      	beq.n	8001664 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162a:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 800162c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001630:	4a17      	ldr	r2, [pc, #92]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163a:	f7ff fb8b 	bl	8000d54 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001642:	f7ff fb87 	bl	8000d54 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e1e7      	b.n	8001a24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001654:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 8001656:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0ef      	beq.n	8001642 <HAL_RCC_OscConfig+0x22e>
 8001662:	e020      	b.n	80016a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001664:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 8001666:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800166a:	4a09      	ldr	r2, [pc, #36]	@ (8001690 <HAL_RCC_OscConfig+0x27c>)
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001674:	f7ff fb6e 	bl	8000d54 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800167a:	e00d      	b.n	8001698 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167c:	f7ff fb6a 	bl	8000d54 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d906      	bls.n	8001698 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e1ca      	b.n	8001a24 <HAL_RCC_OscConfig+0x610>
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000
 8001694:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001698:	4b8c      	ldr	r3, [pc, #560]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 800169a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1ea      	bne.n	800167c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 80a6 	beq.w	8001800 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b4:	2300      	movs	r3, #0
 80016b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016b8:	4b84      	ldr	r3, [pc, #528]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 80016ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_RCC_OscConfig+0x2b4>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x2b6>
 80016c8:	2300      	movs	r3, #0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00d      	beq.n	80016ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	4b7f      	ldr	r3, [pc, #508]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 80016d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d2:	4a7e      	ldr	r2, [pc, #504]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016da:	4b7c      	ldr	r3, [pc, #496]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 80016dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016e6:	2301      	movs	r3, #1
 80016e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ea:	4b79      	ldr	r3, [pc, #484]	@ (80018d0 <HAL_RCC_OscConfig+0x4bc>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d118      	bne.n	8001728 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016f6:	4b76      	ldr	r3, [pc, #472]	@ (80018d0 <HAL_RCC_OscConfig+0x4bc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a75      	ldr	r2, [pc, #468]	@ (80018d0 <HAL_RCC_OscConfig+0x4bc>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001702:	f7ff fb27 	bl	8000d54 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800170a:	f7ff fb23 	bl	8000d54 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e183      	b.n	8001a24 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800171c:	4b6c      	ldr	r3, [pc, #432]	@ (80018d0 <HAL_RCC_OscConfig+0x4bc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d108      	bne.n	8001742 <HAL_RCC_OscConfig+0x32e>
 8001730:	4b66      	ldr	r3, [pc, #408]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 8001732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001736:	4a65      	ldr	r2, [pc, #404]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001740:	e024      	b.n	800178c <HAL_RCC_OscConfig+0x378>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b05      	cmp	r3, #5
 8001748:	d110      	bne.n	800176c <HAL_RCC_OscConfig+0x358>
 800174a:	4b60      	ldr	r3, [pc, #384]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 800174c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001750:	4a5e      	ldr	r2, [pc, #376]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800175a:	4b5c      	ldr	r3, [pc, #368]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 800175c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001760:	4a5a      	ldr	r2, [pc, #360]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800176a:	e00f      	b.n	800178c <HAL_RCC_OscConfig+0x378>
 800176c:	4b57      	ldr	r3, [pc, #348]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 800176e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001772:	4a56      	ldr	r2, [pc, #344]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800177c:	4b53      	ldr	r3, [pc, #332]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001782:	4a52      	ldr	r2, [pc, #328]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 8001784:	f023 0304 	bic.w	r3, r3, #4
 8001788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d016      	beq.n	80017c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001794:	f7ff fade 	bl	8000d54 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800179a:	e00a      	b.n	80017b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179c:	f7ff fada 	bl	8000d54 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e138      	b.n	8001a24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017b2:	4b46      	ldr	r3, [pc, #280]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 80017b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0ed      	beq.n	800179c <HAL_RCC_OscConfig+0x388>
 80017c0:	e015      	b.n	80017ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c2:	f7ff fac7 	bl	8000d54 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c8:	e00a      	b.n	80017e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ca:	f7ff fac3 	bl	8000d54 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d8:	4293      	cmp	r3, r2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e121      	b.n	8001a24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e0:	4b3a      	ldr	r3, [pc, #232]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 80017e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1ed      	bne.n	80017ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017ee:	7ffb      	ldrb	r3, [r7, #31]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d105      	bne.n	8001800 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f4:	4b35      	ldr	r3, [pc, #212]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 80017f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f8:	4a34      	ldr	r2, [pc, #208]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 80017fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017fe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0320 	and.w	r3, r3, #32
 8001808:	2b00      	cmp	r3, #0
 800180a:	d03c      	beq.n	8001886 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d01c      	beq.n	800184e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001814:	4b2d      	ldr	r3, [pc, #180]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 8001816:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800181a:	4a2c      	ldr	r2, [pc, #176]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff fa96 	bl	8000d54 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800182c:	f7ff fa92 	bl	8000d54 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e0f2      	b.n	8001a24 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800183e:	4b23      	ldr	r3, [pc, #140]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 8001840:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0ef      	beq.n	800182c <HAL_RCC_OscConfig+0x418>
 800184c:	e01b      	b.n	8001886 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800184e:	4b1f      	ldr	r3, [pc, #124]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 8001850:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001854:	4a1d      	ldr	r2, [pc, #116]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 8001856:	f023 0301 	bic.w	r3, r3, #1
 800185a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185e:	f7ff fa79 	bl	8000d54 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001866:	f7ff fa75 	bl	8000d54 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e0d5      	b.n	8001a24 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001878:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 800187a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1ef      	bne.n	8001866 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 80c9 	beq.w	8001a22 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001890:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b0c      	cmp	r3, #12
 800189a:	f000 8083 	beq.w	80019a4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d15e      	bne.n	8001964 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a6:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a08      	ldr	r2, [pc, #32]	@ (80018cc <HAL_RCC_OscConfig+0x4b8>)
 80018ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b2:	f7ff fa4f 	bl	8000d54 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b8:	e00c      	b.n	80018d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ba:	f7ff fa4b 	bl	8000d54 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d905      	bls.n	80018d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e0ab      	b.n	8001a24 <HAL_RCC_OscConfig+0x610>
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d4:	4b55      	ldr	r3, [pc, #340]	@ (8001a2c <HAL_RCC_OscConfig+0x618>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1ec      	bne.n	80018ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e0:	4b52      	ldr	r3, [pc, #328]	@ (8001a2c <HAL_RCC_OscConfig+0x618>)
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	4b52      	ldr	r3, [pc, #328]	@ (8001a30 <HAL_RCC_OscConfig+0x61c>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6a11      	ldr	r1, [r2, #32]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018f0:	3a01      	subs	r2, #1
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	4311      	orrs	r1, r2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80018fa:	0212      	lsls	r2, r2, #8
 80018fc:	4311      	orrs	r1, r2
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001902:	0852      	lsrs	r2, r2, #1
 8001904:	3a01      	subs	r2, #1
 8001906:	0552      	lsls	r2, r2, #21
 8001908:	4311      	orrs	r1, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800190e:	0852      	lsrs	r2, r2, #1
 8001910:	3a01      	subs	r2, #1
 8001912:	0652      	lsls	r2, r2, #25
 8001914:	4311      	orrs	r1, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800191a:	06d2      	lsls	r2, r2, #27
 800191c:	430a      	orrs	r2, r1
 800191e:	4943      	ldr	r1, [pc, #268]	@ (8001a2c <HAL_RCC_OscConfig+0x618>)
 8001920:	4313      	orrs	r3, r2
 8001922:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001924:	4b41      	ldr	r3, [pc, #260]	@ (8001a2c <HAL_RCC_OscConfig+0x618>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a40      	ldr	r2, [pc, #256]	@ (8001a2c <HAL_RCC_OscConfig+0x618>)
 800192a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800192e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001930:	4b3e      	ldr	r3, [pc, #248]	@ (8001a2c <HAL_RCC_OscConfig+0x618>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4a3d      	ldr	r2, [pc, #244]	@ (8001a2c <HAL_RCC_OscConfig+0x618>)
 8001936:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800193a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff fa0a 	bl	8000d54 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff fa06 	bl	8000d54 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e066      	b.n	8001a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001956:	4b35      	ldr	r3, [pc, #212]	@ (8001a2c <HAL_RCC_OscConfig+0x618>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x530>
 8001962:	e05e      	b.n	8001a22 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001964:	4b31      	ldr	r3, [pc, #196]	@ (8001a2c <HAL_RCC_OscConfig+0x618>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a30      	ldr	r2, [pc, #192]	@ (8001a2c <HAL_RCC_OscConfig+0x618>)
 800196a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800196e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff f9f0 	bl	8000d54 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff f9ec 	bl	8000d54 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e04c      	b.n	8001a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800198a:	4b28      	ldr	r3, [pc, #160]	@ (8001a2c <HAL_RCC_OscConfig+0x618>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001996:	4b25      	ldr	r3, [pc, #148]	@ (8001a2c <HAL_RCC_OscConfig+0x618>)
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	4924      	ldr	r1, [pc, #144]	@ (8001a2c <HAL_RCC_OscConfig+0x618>)
 800199c:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <HAL_RCC_OscConfig+0x620>)
 800199e:	4013      	ands	r3, r2
 80019a0:	60cb      	str	r3, [r1, #12]
 80019a2:	e03e      	b.n	8001a22 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e039      	b.n	8001a24 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80019b0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a2c <HAL_RCC_OscConfig+0x618>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 0203 	and.w	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d12c      	bne.n	8001a1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ce:	3b01      	subs	r3, #1
 80019d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d123      	bne.n	8001a1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d11b      	bne.n	8001a1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d113      	bne.n	8001a1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a00:	085b      	lsrs	r3, r3, #1
 8001a02:	3b01      	subs	r3, #1
 8001a04:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d109      	bne.n	8001a1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a14:	085b      	lsrs	r3, r3, #1
 8001a16:	3b01      	subs	r3, #1
 8001a18:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d001      	beq.n	8001a22 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	019f800c 	.word	0x019f800c
 8001a34:	feeefffc 	.word	0xfeeefffc

08001a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e11e      	b.n	8001c8e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a50:	4b91      	ldr	r3, [pc, #580]	@ (8001c98 <HAL_RCC_ClockConfig+0x260>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d910      	bls.n	8001a80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b8e      	ldr	r3, [pc, #568]	@ (8001c98 <HAL_RCC_ClockConfig+0x260>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 020f 	bic.w	r2, r3, #15
 8001a66:	498c      	ldr	r1, [pc, #560]	@ (8001c98 <HAL_RCC_ClockConfig+0x260>)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	4b8a      	ldr	r3, [pc, #552]	@ (8001c98 <HAL_RCC_ClockConfig+0x260>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e106      	b.n	8001c8e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d073      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d129      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a94:	4b81      	ldr	r3, [pc, #516]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0f4      	b.n	8001c8e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001aa4:	f000 f966 	bl	8001d74 <RCC_GetSysClockFreqFromPLLSource>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4a7c      	ldr	r2, [pc, #496]	@ (8001ca0 <HAL_RCC_ClockConfig+0x268>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d93f      	bls.n	8001b32 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ab2:	4b7a      	ldr	r3, [pc, #488]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d033      	beq.n	8001b32 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d12f      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ad2:	4b72      	ldr	r3, [pc, #456]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ada:	4a70      	ldr	r2, [pc, #448]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ae0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ae2:	2380      	movs	r3, #128	@ 0x80
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	e024      	b.n	8001b32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af0:	4b6a      	ldr	r3, [pc, #424]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d109      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0c6      	b.n	8001c8e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b00:	4b66      	ldr	r3, [pc, #408]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0be      	b.n	8001c8e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b10:	f000 f8ce 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8001b14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4a61      	ldr	r2, [pc, #388]	@ (8001ca0 <HAL_RCC_ClockConfig+0x268>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d909      	bls.n	8001b32 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b1e:	4b5f      	ldr	r3, [pc, #380]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b26:	4a5d      	ldr	r2, [pc, #372]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b2c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b2e:	2380      	movs	r3, #128	@ 0x80
 8001b30:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b32:	4b5a      	ldr	r3, [pc, #360]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f023 0203 	bic.w	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4957      	ldr	r1, [pc, #348]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b44:	f7ff f906 	bl	8000d54 <HAL_GetTick>
 8001b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	e00a      	b.n	8001b62 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b4c:	f7ff f902 	bl	8000d54 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e095      	b.n	8001c8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	4b4e      	ldr	r3, [pc, #312]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 020c 	and.w	r2, r3, #12
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d1eb      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d023      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b8c:	4b43      	ldr	r3, [pc, #268]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	4a42      	ldr	r2, [pc, #264]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001b92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b96:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d007      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ba4:	4b3d      	ldr	r3, [pc, #244]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001bac:	4a3b      	ldr	r2, [pc, #236]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001bae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb4:	4b39      	ldr	r3, [pc, #228]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	4936      	ldr	r1, [pc, #216]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2b80      	cmp	r3, #128	@ 0x80
 8001bcc:	d105      	bne.n	8001bda <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bce:	4b33      	ldr	r3, [pc, #204]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	4a32      	ldr	r2, [pc, #200]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001bd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bd8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bda:	4b2f      	ldr	r3, [pc, #188]	@ (8001c98 <HAL_RCC_ClockConfig+0x260>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d21d      	bcs.n	8001c24 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c98 <HAL_RCC_ClockConfig+0x260>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 020f 	bic.w	r2, r3, #15
 8001bf0:	4929      	ldr	r1, [pc, #164]	@ (8001c98 <HAL_RCC_ClockConfig+0x260>)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bf8:	f7ff f8ac 	bl	8000d54 <HAL_GetTick>
 8001bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c00:	f7ff f8a8 	bl	8000d54 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e03b      	b.n	8001c8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b20      	ldr	r3, [pc, #128]	@ (8001c98 <HAL_RCC_ClockConfig+0x260>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d1ed      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c30:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4917      	ldr	r1, [pc, #92]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d009      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c4e:	4b13      	ldr	r3, [pc, #76]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	490f      	ldr	r1, [pc, #60]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c62:	f000 f825 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8001c66:	4602      	mov	r2, r0
 8001c68:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <HAL_RCC_ClockConfig+0x264>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	490c      	ldr	r1, [pc, #48]	@ (8001ca4 <HAL_RCC_ClockConfig+0x26c>)
 8001c74:	5ccb      	ldrb	r3, [r1, r3]
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca8 <HAL_RCC_ClockConfig+0x270>)
 8001c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c82:	4b0a      	ldr	r3, [pc, #40]	@ (8001cac <HAL_RCC_ClockConfig+0x274>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff f818 	bl	8000cbc <HAL_InitTick>
 8001c8c:	4603      	mov	r3, r0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40022000 	.word	0x40022000
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	04c4b400 	.word	0x04c4b400
 8001ca4:	08002dec 	.word	0x08002dec
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	20000004 	.word	0x20000004

08001cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d102      	bne.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cc2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	e047      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001cc8:	4b27      	ldr	r3, [pc, #156]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d102      	bne.n	8001cda <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cd4:	4b26      	ldr	r3, [pc, #152]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	e03e      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001cda:	4b23      	ldr	r3, [pc, #140]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b0c      	cmp	r3, #12
 8001ce4:	d136      	bne.n	8001d54 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ce6:	4b20      	ldr	r3, [pc, #128]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d10c      	bne.n	8001d1e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d04:	4a1a      	ldr	r2, [pc, #104]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0c:	4a16      	ldr	r2, [pc, #88]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d0e:	68d2      	ldr	r2, [r2, #12]
 8001d10:	0a12      	lsrs	r2, r2, #8
 8001d12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	617b      	str	r3, [r7, #20]
      break;
 8001d1c:	e00c      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d1e:	4a13      	ldr	r2, [pc, #76]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	4a10      	ldr	r2, [pc, #64]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d28:	68d2      	ldr	r2, [r2, #12]
 8001d2a:	0a12      	lsrs	r2, r2, #8
 8001d2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	617b      	str	r3, [r7, #20]
      break;
 8001d36:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0e5b      	lsrs	r3, r3, #25
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	3301      	adds	r3, #1
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	e001      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d58:	693b      	ldr	r3, [r7, #16]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	371c      	adds	r7, #28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	00f42400 	.word	0x00f42400
 8001d70:	007a1200 	.word	0x007a1200

08001d74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001df4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d84:	4b1b      	ldr	r3, [pc, #108]	@ (8001df4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3301      	adds	r3, #1
 8001d90:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d10c      	bne.n	8001db2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d98:	4a17      	ldr	r2, [pc, #92]	@ (8001df8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da0:	4a14      	ldr	r2, [pc, #80]	@ (8001df4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001da2:	68d2      	ldr	r2, [r2, #12]
 8001da4:	0a12      	lsrs	r2, r2, #8
 8001da6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001daa:	fb02 f303 	mul.w	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
    break;
 8001db0:	e00c      	b.n	8001dcc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001db2:	4a12      	ldr	r2, [pc, #72]	@ (8001dfc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dba:	4a0e      	ldr	r2, [pc, #56]	@ (8001df4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dbc:	68d2      	ldr	r2, [r2, #12]
 8001dbe:	0a12      	lsrs	r2, r2, #8
 8001dc0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dc4:	fb02 f303 	mul.w	r3, r2, r3
 8001dc8:	617b      	str	r3, [r7, #20]
    break;
 8001dca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dcc:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	0e5b      	lsrs	r3, r3, #25
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001de6:	687b      	ldr	r3, [r7, #4]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	371c      	adds	r7, #28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	40021000 	.word	0x40021000
 8001df8:	007a1200 	.word	0x007a1200
 8001dfc:	00f42400 	.word	0x00f42400

08001e00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e049      	b.n	8001ea6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7fe fe5c 	bl	8000ae4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4610      	mov	r0, r2
 8001e40:	f000 fb02 	bl	8002448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d109      	bne.n	8001ed4 <HAL_TIM_PWM_Start+0x24>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	bf14      	ite	ne
 8001ecc:	2301      	movne	r3, #1
 8001ece:	2300      	moveq	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	e03c      	b.n	8001f4e <HAL_TIM_PWM_Start+0x9e>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d109      	bne.n	8001eee <HAL_TIM_PWM_Start+0x3e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	bf14      	ite	ne
 8001ee6:	2301      	movne	r3, #1
 8001ee8:	2300      	moveq	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	e02f      	b.n	8001f4e <HAL_TIM_PWM_Start+0x9e>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d109      	bne.n	8001f08 <HAL_TIM_PWM_Start+0x58>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	bf14      	ite	ne
 8001f00:	2301      	movne	r3, #1
 8001f02:	2300      	moveq	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	e022      	b.n	8001f4e <HAL_TIM_PWM_Start+0x9e>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	d109      	bne.n	8001f22 <HAL_TIM_PWM_Start+0x72>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	bf14      	ite	ne
 8001f1a:	2301      	movne	r3, #1
 8001f1c:	2300      	moveq	r3, #0
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	e015      	b.n	8001f4e <HAL_TIM_PWM_Start+0x9e>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b10      	cmp	r3, #16
 8001f26:	d109      	bne.n	8001f3c <HAL_TIM_PWM_Start+0x8c>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	bf14      	ite	ne
 8001f34:	2301      	movne	r3, #1
 8001f36:	2300      	moveq	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	e008      	b.n	8001f4e <HAL_TIM_PWM_Start+0x9e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	bf14      	ite	ne
 8001f48:	2301      	movne	r3, #1
 8001f4a:	2300      	moveq	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0a6      	b.n	80020a4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d104      	bne.n	8001f66 <HAL_TIM_PWM_Start+0xb6>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f64:	e023      	b.n	8001fae <HAL_TIM_PWM_Start+0xfe>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d104      	bne.n	8001f76 <HAL_TIM_PWM_Start+0xc6>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f74:	e01b      	b.n	8001fae <HAL_TIM_PWM_Start+0xfe>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d104      	bne.n	8001f86 <HAL_TIM_PWM_Start+0xd6>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f84:	e013      	b.n	8001fae <HAL_TIM_PWM_Start+0xfe>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b0c      	cmp	r3, #12
 8001f8a:	d104      	bne.n	8001f96 <HAL_TIM_PWM_Start+0xe6>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001f94:	e00b      	b.n	8001fae <HAL_TIM_PWM_Start+0xfe>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b10      	cmp	r3, #16
 8001f9a:	d104      	bne.n	8001fa6 <HAL_TIM_PWM_Start+0xf6>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fa4:	e003      	b.n	8001fae <HAL_TIM_PWM_Start+0xfe>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	6839      	ldr	r1, [r7, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 fe24 	bl	8002c04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a3a      	ldr	r2, [pc, #232]	@ (80020ac <HAL_TIM_PWM_Start+0x1fc>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d018      	beq.n	8001ff8 <HAL_TIM_PWM_Start+0x148>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a39      	ldr	r2, [pc, #228]	@ (80020b0 <HAL_TIM_PWM_Start+0x200>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d013      	beq.n	8001ff8 <HAL_TIM_PWM_Start+0x148>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a37      	ldr	r2, [pc, #220]	@ (80020b4 <HAL_TIM_PWM_Start+0x204>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00e      	beq.n	8001ff8 <HAL_TIM_PWM_Start+0x148>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a36      	ldr	r2, [pc, #216]	@ (80020b8 <HAL_TIM_PWM_Start+0x208>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d009      	beq.n	8001ff8 <HAL_TIM_PWM_Start+0x148>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a34      	ldr	r2, [pc, #208]	@ (80020bc <HAL_TIM_PWM_Start+0x20c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d004      	beq.n	8001ff8 <HAL_TIM_PWM_Start+0x148>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a33      	ldr	r2, [pc, #204]	@ (80020c0 <HAL_TIM_PWM_Start+0x210>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d101      	bne.n	8001ffc <HAL_TIM_PWM_Start+0x14c>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <HAL_TIM_PWM_Start+0x14e>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002010:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a25      	ldr	r2, [pc, #148]	@ (80020ac <HAL_TIM_PWM_Start+0x1fc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d022      	beq.n	8002062 <HAL_TIM_PWM_Start+0x1b2>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002024:	d01d      	beq.n	8002062 <HAL_TIM_PWM_Start+0x1b2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a26      	ldr	r2, [pc, #152]	@ (80020c4 <HAL_TIM_PWM_Start+0x214>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d018      	beq.n	8002062 <HAL_TIM_PWM_Start+0x1b2>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a24      	ldr	r2, [pc, #144]	@ (80020c8 <HAL_TIM_PWM_Start+0x218>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d013      	beq.n	8002062 <HAL_TIM_PWM_Start+0x1b2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a23      	ldr	r2, [pc, #140]	@ (80020cc <HAL_TIM_PWM_Start+0x21c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d00e      	beq.n	8002062 <HAL_TIM_PWM_Start+0x1b2>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a19      	ldr	r2, [pc, #100]	@ (80020b0 <HAL_TIM_PWM_Start+0x200>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d009      	beq.n	8002062 <HAL_TIM_PWM_Start+0x1b2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a18      	ldr	r2, [pc, #96]	@ (80020b4 <HAL_TIM_PWM_Start+0x204>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d004      	beq.n	8002062 <HAL_TIM_PWM_Start+0x1b2>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a18      	ldr	r2, [pc, #96]	@ (80020c0 <HAL_TIM_PWM_Start+0x210>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d115      	bne.n	800208e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <HAL_TIM_PWM_Start+0x220>)
 800206a:	4013      	ands	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b06      	cmp	r3, #6
 8002072:	d015      	beq.n	80020a0 <HAL_TIM_PWM_Start+0x1f0>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800207a:	d011      	beq.n	80020a0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800208c:	e008      	b.n	80020a0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0201 	orr.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	e000      	b.n	80020a2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40012c00 	.word	0x40012c00
 80020b0:	40013400 	.word	0x40013400
 80020b4:	40014000 	.word	0x40014000
 80020b8:	40014400 	.word	0x40014400
 80020bc:	40014800 	.word	0x40014800
 80020c0:	40015000 	.word	0x40015000
 80020c4:	40000400 	.word	0x40000400
 80020c8:	40000800 	.word	0x40000800
 80020cc:	40000c00 	.word	0x40000c00
 80020d0:	00010007 	.word	0x00010007

080020d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e097      	b.n	8002218 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d106      	bne.n	8002102 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7fe fc19 	bl	8000934 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2202      	movs	r2, #2
 8002106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8002118:	f023 0307 	bic.w	r3, r3, #7
 800211c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3304      	adds	r3, #4
 8002126:	4619      	mov	r1, r3
 8002128:	4610      	mov	r0, r2
 800212a:	f000 f98d 	bl	8002448 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4313      	orrs	r3, r2
 800214e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002156:	f023 0303 	bic.w	r3, r3, #3
 800215a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	4313      	orrs	r3, r2
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002174:	f023 030c 	bic.w	r3, r3, #12
 8002178:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002180:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002184:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	4313      	orrs	r3, r2
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	011a      	lsls	r2, r3, #4
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	031b      	lsls	r3, r3, #12
 80021a4:	4313      	orrs	r3, r2
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80021b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80021ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	4313      	orrs	r3, r2
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800223a:	2302      	movs	r3, #2
 800223c:	e0ff      	b.n	800243e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b14      	cmp	r3, #20
 800224a:	f200 80f0 	bhi.w	800242e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800224e:	a201      	add	r2, pc, #4	@ (adr r2, 8002254 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002254:	080022a9 	.word	0x080022a9
 8002258:	0800242f 	.word	0x0800242f
 800225c:	0800242f 	.word	0x0800242f
 8002260:	0800242f 	.word	0x0800242f
 8002264:	080022e9 	.word	0x080022e9
 8002268:	0800242f 	.word	0x0800242f
 800226c:	0800242f 	.word	0x0800242f
 8002270:	0800242f 	.word	0x0800242f
 8002274:	0800232b 	.word	0x0800232b
 8002278:	0800242f 	.word	0x0800242f
 800227c:	0800242f 	.word	0x0800242f
 8002280:	0800242f 	.word	0x0800242f
 8002284:	0800236b 	.word	0x0800236b
 8002288:	0800242f 	.word	0x0800242f
 800228c:	0800242f 	.word	0x0800242f
 8002290:	0800242f 	.word	0x0800242f
 8002294:	080023ad 	.word	0x080023ad
 8002298:	0800242f 	.word	0x0800242f
 800229c:	0800242f 	.word	0x0800242f
 80022a0:	0800242f 	.word	0x0800242f
 80022a4:	080023ed 	.word	0x080023ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68b9      	ldr	r1, [r7, #8]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f97e 	bl	80025b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699a      	ldr	r2, [r3, #24]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0208 	orr.w	r2, r2, #8
 80022c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699a      	ldr	r2, [r3, #24]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0204 	bic.w	r2, r2, #4
 80022d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6999      	ldr	r1, [r3, #24]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	619a      	str	r2, [r3, #24]
      break;
 80022e6:	e0a5      	b.n	8002434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f9f8 	bl	80026e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699a      	ldr	r2, [r3, #24]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699a      	ldr	r2, [r3, #24]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6999      	ldr	r1, [r3, #24]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	021a      	lsls	r2, r3, #8
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	619a      	str	r2, [r3, #24]
      break;
 8002328:	e084      	b.n	8002434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68b9      	ldr	r1, [r7, #8]
 8002330:	4618      	mov	r0, r3
 8002332:	f000 fa6b 	bl	800280c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	69da      	ldr	r2, [r3, #28]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0208 	orr.w	r2, r2, #8
 8002344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	69da      	ldr	r2, [r3, #28]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0204 	bic.w	r2, r2, #4
 8002354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	69d9      	ldr	r1, [r3, #28]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	61da      	str	r2, [r3, #28]
      break;
 8002368:	e064      	b.n	8002434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68b9      	ldr	r1, [r7, #8]
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fadd 	bl	8002930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	69da      	ldr	r2, [r3, #28]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	69d9      	ldr	r1, [r3, #28]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	021a      	lsls	r2, r3, #8
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	61da      	str	r2, [r3, #28]
      break;
 80023aa:	e043      	b.n	8002434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68b9      	ldr	r1, [r7, #8]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fb50 	bl	8002a58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0208 	orr.w	r2, r2, #8
 80023c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0204 	bic.w	r2, r2, #4
 80023d6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80023ea:	e023      	b.n	8002434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68b9      	ldr	r1, [r7, #8]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fb9a 	bl	8002b2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002406:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002416:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	021a      	lsls	r2, r3, #8
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800242c:	e002      	b.n	8002434 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	75fb      	strb	r3, [r7, #23]
      break;
 8002432:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800243c:	7dfb      	ldrb	r3, [r7, #23]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop

08002448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a4c      	ldr	r2, [pc, #304]	@ (800258c <TIM_Base_SetConfig+0x144>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d017      	beq.n	8002490 <TIM_Base_SetConfig+0x48>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002466:	d013      	beq.n	8002490 <TIM_Base_SetConfig+0x48>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a49      	ldr	r2, [pc, #292]	@ (8002590 <TIM_Base_SetConfig+0x148>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d00f      	beq.n	8002490 <TIM_Base_SetConfig+0x48>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a48      	ldr	r2, [pc, #288]	@ (8002594 <TIM_Base_SetConfig+0x14c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d00b      	beq.n	8002490 <TIM_Base_SetConfig+0x48>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a47      	ldr	r2, [pc, #284]	@ (8002598 <TIM_Base_SetConfig+0x150>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d007      	beq.n	8002490 <TIM_Base_SetConfig+0x48>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a46      	ldr	r2, [pc, #280]	@ (800259c <TIM_Base_SetConfig+0x154>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d003      	beq.n	8002490 <TIM_Base_SetConfig+0x48>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a45      	ldr	r2, [pc, #276]	@ (80025a0 <TIM_Base_SetConfig+0x158>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d108      	bne.n	80024a2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a39      	ldr	r2, [pc, #228]	@ (800258c <TIM_Base_SetConfig+0x144>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d023      	beq.n	80024f2 <TIM_Base_SetConfig+0xaa>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024b0:	d01f      	beq.n	80024f2 <TIM_Base_SetConfig+0xaa>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a36      	ldr	r2, [pc, #216]	@ (8002590 <TIM_Base_SetConfig+0x148>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d01b      	beq.n	80024f2 <TIM_Base_SetConfig+0xaa>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a35      	ldr	r2, [pc, #212]	@ (8002594 <TIM_Base_SetConfig+0x14c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d017      	beq.n	80024f2 <TIM_Base_SetConfig+0xaa>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a34      	ldr	r2, [pc, #208]	@ (8002598 <TIM_Base_SetConfig+0x150>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d013      	beq.n	80024f2 <TIM_Base_SetConfig+0xaa>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a33      	ldr	r2, [pc, #204]	@ (800259c <TIM_Base_SetConfig+0x154>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d00f      	beq.n	80024f2 <TIM_Base_SetConfig+0xaa>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a33      	ldr	r2, [pc, #204]	@ (80025a4 <TIM_Base_SetConfig+0x15c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00b      	beq.n	80024f2 <TIM_Base_SetConfig+0xaa>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a32      	ldr	r2, [pc, #200]	@ (80025a8 <TIM_Base_SetConfig+0x160>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d007      	beq.n	80024f2 <TIM_Base_SetConfig+0xaa>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a31      	ldr	r2, [pc, #196]	@ (80025ac <TIM_Base_SetConfig+0x164>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d003      	beq.n	80024f2 <TIM_Base_SetConfig+0xaa>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a2c      	ldr	r2, [pc, #176]	@ (80025a0 <TIM_Base_SetConfig+0x158>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d108      	bne.n	8002504 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a18      	ldr	r2, [pc, #96]	@ (800258c <TIM_Base_SetConfig+0x144>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d013      	beq.n	8002558 <TIM_Base_SetConfig+0x110>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a1a      	ldr	r2, [pc, #104]	@ (800259c <TIM_Base_SetConfig+0x154>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d00f      	beq.n	8002558 <TIM_Base_SetConfig+0x110>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a1a      	ldr	r2, [pc, #104]	@ (80025a4 <TIM_Base_SetConfig+0x15c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d00b      	beq.n	8002558 <TIM_Base_SetConfig+0x110>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a19      	ldr	r2, [pc, #100]	@ (80025a8 <TIM_Base_SetConfig+0x160>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d007      	beq.n	8002558 <TIM_Base_SetConfig+0x110>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a18      	ldr	r2, [pc, #96]	@ (80025ac <TIM_Base_SetConfig+0x164>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d003      	beq.n	8002558 <TIM_Base_SetConfig+0x110>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a13      	ldr	r2, [pc, #76]	@ (80025a0 <TIM_Base_SetConfig+0x158>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d103      	bne.n	8002560 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b01      	cmp	r3, #1
 8002570:	d105      	bne.n	800257e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f023 0201 	bic.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	611a      	str	r2, [r3, #16]
  }
}
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40012c00 	.word	0x40012c00
 8002590:	40000400 	.word	0x40000400
 8002594:	40000800 	.word	0x40000800
 8002598:	40000c00 	.word	0x40000c00
 800259c:	40013400 	.word	0x40013400
 80025a0:	40015000 	.word	0x40015000
 80025a4:	40014000 	.word	0x40014000
 80025a8:	40014400 	.word	0x40014400
 80025ac:	40014800 	.word	0x40014800

080025b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f023 0201 	bic.w	r2, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0303 	bic.w	r3, r3, #3
 80025ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f023 0302 	bic.w	r3, r3, #2
 80025fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4313      	orrs	r3, r2
 8002606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a30      	ldr	r2, [pc, #192]	@ (80026cc <TIM_OC1_SetConfig+0x11c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d013      	beq.n	8002638 <TIM_OC1_SetConfig+0x88>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a2f      	ldr	r2, [pc, #188]	@ (80026d0 <TIM_OC1_SetConfig+0x120>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00f      	beq.n	8002638 <TIM_OC1_SetConfig+0x88>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a2e      	ldr	r2, [pc, #184]	@ (80026d4 <TIM_OC1_SetConfig+0x124>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d00b      	beq.n	8002638 <TIM_OC1_SetConfig+0x88>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a2d      	ldr	r2, [pc, #180]	@ (80026d8 <TIM_OC1_SetConfig+0x128>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d007      	beq.n	8002638 <TIM_OC1_SetConfig+0x88>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a2c      	ldr	r2, [pc, #176]	@ (80026dc <TIM_OC1_SetConfig+0x12c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d003      	beq.n	8002638 <TIM_OC1_SetConfig+0x88>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a2b      	ldr	r2, [pc, #172]	@ (80026e0 <TIM_OC1_SetConfig+0x130>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d10c      	bne.n	8002652 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f023 0308 	bic.w	r3, r3, #8
 800263e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	4313      	orrs	r3, r2
 8002648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f023 0304 	bic.w	r3, r3, #4
 8002650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a1d      	ldr	r2, [pc, #116]	@ (80026cc <TIM_OC1_SetConfig+0x11c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d013      	beq.n	8002682 <TIM_OC1_SetConfig+0xd2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a1c      	ldr	r2, [pc, #112]	@ (80026d0 <TIM_OC1_SetConfig+0x120>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00f      	beq.n	8002682 <TIM_OC1_SetConfig+0xd2>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a1b      	ldr	r2, [pc, #108]	@ (80026d4 <TIM_OC1_SetConfig+0x124>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00b      	beq.n	8002682 <TIM_OC1_SetConfig+0xd2>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a1a      	ldr	r2, [pc, #104]	@ (80026d8 <TIM_OC1_SetConfig+0x128>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d007      	beq.n	8002682 <TIM_OC1_SetConfig+0xd2>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a19      	ldr	r2, [pc, #100]	@ (80026dc <TIM_OC1_SetConfig+0x12c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d003      	beq.n	8002682 <TIM_OC1_SetConfig+0xd2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a18      	ldr	r2, [pc, #96]	@ (80026e0 <TIM_OC1_SetConfig+0x130>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d111      	bne.n	80026a6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	621a      	str	r2, [r3, #32]
}
 80026c0:	bf00      	nop
 80026c2:	371c      	adds	r7, #28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	40012c00 	.word	0x40012c00
 80026d0:	40013400 	.word	0x40013400
 80026d4:	40014000 	.word	0x40014000
 80026d8:	40014400 	.word	0x40014400
 80026dc:	40014800 	.word	0x40014800
 80026e0:	40015000 	.word	0x40015000

080026e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	f023 0210 	bic.w	r2, r3, #16
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002712:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800271e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	021b      	lsls	r3, r3, #8
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f023 0320 	bic.w	r3, r3, #32
 8002732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a2c      	ldr	r2, [pc, #176]	@ (80027f4 <TIM_OC2_SetConfig+0x110>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d007      	beq.n	8002758 <TIM_OC2_SetConfig+0x74>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a2b      	ldr	r2, [pc, #172]	@ (80027f8 <TIM_OC2_SetConfig+0x114>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d003      	beq.n	8002758 <TIM_OC2_SetConfig+0x74>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a2a      	ldr	r2, [pc, #168]	@ (80027fc <TIM_OC2_SetConfig+0x118>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d10d      	bne.n	8002774 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800275e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002772:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a1f      	ldr	r2, [pc, #124]	@ (80027f4 <TIM_OC2_SetConfig+0x110>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d013      	beq.n	80027a4 <TIM_OC2_SetConfig+0xc0>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a1e      	ldr	r2, [pc, #120]	@ (80027f8 <TIM_OC2_SetConfig+0x114>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d00f      	beq.n	80027a4 <TIM_OC2_SetConfig+0xc0>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a1e      	ldr	r2, [pc, #120]	@ (8002800 <TIM_OC2_SetConfig+0x11c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00b      	beq.n	80027a4 <TIM_OC2_SetConfig+0xc0>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a1d      	ldr	r2, [pc, #116]	@ (8002804 <TIM_OC2_SetConfig+0x120>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d007      	beq.n	80027a4 <TIM_OC2_SetConfig+0xc0>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a1c      	ldr	r2, [pc, #112]	@ (8002808 <TIM_OC2_SetConfig+0x124>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d003      	beq.n	80027a4 <TIM_OC2_SetConfig+0xc0>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a17      	ldr	r2, [pc, #92]	@ (80027fc <TIM_OC2_SetConfig+0x118>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d113      	bne.n	80027cc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	621a      	str	r2, [r3, #32]
}
 80027e6:	bf00      	nop
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40012c00 	.word	0x40012c00
 80027f8:	40013400 	.word	0x40013400
 80027fc:	40015000 	.word	0x40015000
 8002800:	40014000 	.word	0x40014000
 8002804:	40014400 	.word	0x40014400
 8002808:	40014800 	.word	0x40014800

0800280c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800283a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800283e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0303 	bic.w	r3, r3, #3
 8002846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	4313      	orrs	r3, r2
 8002864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a2b      	ldr	r2, [pc, #172]	@ (8002918 <TIM_OC3_SetConfig+0x10c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <TIM_OC3_SetConfig+0x72>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a2a      	ldr	r2, [pc, #168]	@ (800291c <TIM_OC3_SetConfig+0x110>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d003      	beq.n	800287e <TIM_OC3_SetConfig+0x72>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a29      	ldr	r2, [pc, #164]	@ (8002920 <TIM_OC3_SetConfig+0x114>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d10d      	bne.n	800289a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a1e      	ldr	r2, [pc, #120]	@ (8002918 <TIM_OC3_SetConfig+0x10c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d013      	beq.n	80028ca <TIM_OC3_SetConfig+0xbe>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a1d      	ldr	r2, [pc, #116]	@ (800291c <TIM_OC3_SetConfig+0x110>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00f      	beq.n	80028ca <TIM_OC3_SetConfig+0xbe>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002924 <TIM_OC3_SetConfig+0x118>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00b      	beq.n	80028ca <TIM_OC3_SetConfig+0xbe>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002928 <TIM_OC3_SetConfig+0x11c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d007      	beq.n	80028ca <TIM_OC3_SetConfig+0xbe>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a1b      	ldr	r2, [pc, #108]	@ (800292c <TIM_OC3_SetConfig+0x120>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d003      	beq.n	80028ca <TIM_OC3_SetConfig+0xbe>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a16      	ldr	r2, [pc, #88]	@ (8002920 <TIM_OC3_SetConfig+0x114>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d113      	bne.n	80028f2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80028d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	621a      	str	r2, [r3, #32]
}
 800290c:	bf00      	nop
 800290e:	371c      	adds	r7, #28
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	40012c00 	.word	0x40012c00
 800291c:	40013400 	.word	0x40013400
 8002920:	40015000 	.word	0x40015000
 8002924:	40014000 	.word	0x40014000
 8002928:	40014400 	.word	0x40014400
 800292c:	40014800 	.word	0x40014800

08002930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800295e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800296a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	021b      	lsls	r3, r3, #8
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800297e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	031b      	lsls	r3, r3, #12
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a2c      	ldr	r2, [pc, #176]	@ (8002a40 <TIM_OC4_SetConfig+0x110>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d007      	beq.n	80029a4 <TIM_OC4_SetConfig+0x74>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a2b      	ldr	r2, [pc, #172]	@ (8002a44 <TIM_OC4_SetConfig+0x114>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d003      	beq.n	80029a4 <TIM_OC4_SetConfig+0x74>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a2a      	ldr	r2, [pc, #168]	@ (8002a48 <TIM_OC4_SetConfig+0x118>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d10d      	bne.n	80029c0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80029aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	031b      	lsls	r3, r3, #12
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a40 <TIM_OC4_SetConfig+0x110>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d013      	beq.n	80029f0 <TIM_OC4_SetConfig+0xc0>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002a44 <TIM_OC4_SetConfig+0x114>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00f      	beq.n	80029f0 <TIM_OC4_SetConfig+0xc0>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a4c <TIM_OC4_SetConfig+0x11c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00b      	beq.n	80029f0 <TIM_OC4_SetConfig+0xc0>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a1d      	ldr	r2, [pc, #116]	@ (8002a50 <TIM_OC4_SetConfig+0x120>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d007      	beq.n	80029f0 <TIM_OC4_SetConfig+0xc0>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a54 <TIM_OC4_SetConfig+0x124>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d003      	beq.n	80029f0 <TIM_OC4_SetConfig+0xc0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a17      	ldr	r2, [pc, #92]	@ (8002a48 <TIM_OC4_SetConfig+0x118>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d113      	bne.n	8002a18 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029f6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80029fe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	019b      	lsls	r3, r3, #6
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	019b      	lsls	r3, r3, #6
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	621a      	str	r2, [r3, #32]
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40012c00 	.word	0x40012c00
 8002a44:	40013400 	.word	0x40013400
 8002a48:	40015000 	.word	0x40015000
 8002a4c:	40014000 	.word	0x40014000
 8002a50:	40014400 	.word	0x40014400
 8002a54:	40014800 	.word	0x40014800

08002a58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002a9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	041b      	lsls	r3, r3, #16
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a19      	ldr	r2, [pc, #100]	@ (8002b14 <TIM_OC5_SetConfig+0xbc>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d013      	beq.n	8002ada <TIM_OC5_SetConfig+0x82>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a18      	ldr	r2, [pc, #96]	@ (8002b18 <TIM_OC5_SetConfig+0xc0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00f      	beq.n	8002ada <TIM_OC5_SetConfig+0x82>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a17      	ldr	r2, [pc, #92]	@ (8002b1c <TIM_OC5_SetConfig+0xc4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00b      	beq.n	8002ada <TIM_OC5_SetConfig+0x82>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a16      	ldr	r2, [pc, #88]	@ (8002b20 <TIM_OC5_SetConfig+0xc8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d007      	beq.n	8002ada <TIM_OC5_SetConfig+0x82>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a15      	ldr	r2, [pc, #84]	@ (8002b24 <TIM_OC5_SetConfig+0xcc>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d003      	beq.n	8002ada <TIM_OC5_SetConfig+0x82>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a14      	ldr	r2, [pc, #80]	@ (8002b28 <TIM_OC5_SetConfig+0xd0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d109      	bne.n	8002aee <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ae0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	621a      	str	r2, [r3, #32]
}
 8002b08:	bf00      	nop
 8002b0a:	371c      	adds	r7, #28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	40012c00 	.word	0x40012c00
 8002b18:	40013400 	.word	0x40013400
 8002b1c:	40014000 	.word	0x40014000
 8002b20:	40014400 	.word	0x40014400
 8002b24:	40014800 	.word	0x40014800
 8002b28:	40015000 	.word	0x40015000

08002b2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	021b      	lsls	r3, r3, #8
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	051b      	lsls	r3, r3, #20
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a1a      	ldr	r2, [pc, #104]	@ (8002bec <TIM_OC6_SetConfig+0xc0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d013      	beq.n	8002bb0 <TIM_OC6_SetConfig+0x84>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a19      	ldr	r2, [pc, #100]	@ (8002bf0 <TIM_OC6_SetConfig+0xc4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d00f      	beq.n	8002bb0 <TIM_OC6_SetConfig+0x84>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a18      	ldr	r2, [pc, #96]	@ (8002bf4 <TIM_OC6_SetConfig+0xc8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d00b      	beq.n	8002bb0 <TIM_OC6_SetConfig+0x84>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a17      	ldr	r2, [pc, #92]	@ (8002bf8 <TIM_OC6_SetConfig+0xcc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d007      	beq.n	8002bb0 <TIM_OC6_SetConfig+0x84>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a16      	ldr	r2, [pc, #88]	@ (8002bfc <TIM_OC6_SetConfig+0xd0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d003      	beq.n	8002bb0 <TIM_OC6_SetConfig+0x84>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a15      	ldr	r2, [pc, #84]	@ (8002c00 <TIM_OC6_SetConfig+0xd4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d109      	bne.n	8002bc4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	029b      	lsls	r3, r3, #10
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	621a      	str	r2, [r3, #32]
}
 8002bde:	bf00      	nop
 8002be0:	371c      	adds	r7, #28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40012c00 	.word	0x40012c00
 8002bf0:	40013400 	.word	0x40013400
 8002bf4:	40014000 	.word	0x40014000
 8002bf8:	40014400 	.word	0x40014400
 8002bfc:	40014800 	.word	0x40014800
 8002c00:	40015000 	.word	0x40015000

08002c04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	2201      	movs	r2, #1
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a1a      	ldr	r2, [r3, #32]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	401a      	ands	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a1a      	ldr	r2, [r3, #32]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	621a      	str	r2, [r3, #32]
}
 8002c42:	bf00      	nop
 8002c44:	371c      	adds	r7, #28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e074      	b.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a34      	ldr	r2, [pc, #208]	@ (8002d60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d009      	beq.n	8002ca6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a33      	ldr	r2, [pc, #204]	@ (8002d64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d004      	beq.n	8002ca6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a31      	ldr	r2, [pc, #196]	@ (8002d68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d108      	bne.n	8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002cac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a21      	ldr	r2, [pc, #132]	@ (8002d60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d022      	beq.n	8002d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ce8:	d01d      	beq.n	8002d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1f      	ldr	r2, [pc, #124]	@ (8002d6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d018      	beq.n	8002d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8002d70 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1c      	ldr	r2, [pc, #112]	@ (8002d74 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00e      	beq.n	8002d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a15      	ldr	r2, [pc, #84]	@ (8002d64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d009      	beq.n	8002d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a18      	ldr	r2, [pc, #96]	@ (8002d78 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d004      	beq.n	8002d26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a11      	ldr	r2, [pc, #68]	@ (8002d68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d10c      	bne.n	8002d40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40012c00 	.word	0x40012c00
 8002d64:	40013400 	.word	0x40013400
 8002d68:	40015000 	.word	0x40015000
 8002d6c:	40000400 	.word	0x40000400
 8002d70:	40000800 	.word	0x40000800
 8002d74:	40000c00 	.word	0x40000c00
 8002d78:	40014000 	.word	0x40014000

08002d7c <memset>:
 8002d7c:	4402      	add	r2, r0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d100      	bne.n	8002d86 <memset+0xa>
 8002d84:	4770      	bx	lr
 8002d86:	f803 1b01 	strb.w	r1, [r3], #1
 8002d8a:	e7f9      	b.n	8002d80 <memset+0x4>

08002d8c <__libc_init_array>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	4d0d      	ldr	r5, [pc, #52]	@ (8002dc4 <__libc_init_array+0x38>)
 8002d90:	4c0d      	ldr	r4, [pc, #52]	@ (8002dc8 <__libc_init_array+0x3c>)
 8002d92:	1b64      	subs	r4, r4, r5
 8002d94:	10a4      	asrs	r4, r4, #2
 8002d96:	2600      	movs	r6, #0
 8002d98:	42a6      	cmp	r6, r4
 8002d9a:	d109      	bne.n	8002db0 <__libc_init_array+0x24>
 8002d9c:	4d0b      	ldr	r5, [pc, #44]	@ (8002dcc <__libc_init_array+0x40>)
 8002d9e:	4c0c      	ldr	r4, [pc, #48]	@ (8002dd0 <__libc_init_array+0x44>)
 8002da0:	f000 f818 	bl	8002dd4 <_init>
 8002da4:	1b64      	subs	r4, r4, r5
 8002da6:	10a4      	asrs	r4, r4, #2
 8002da8:	2600      	movs	r6, #0
 8002daa:	42a6      	cmp	r6, r4
 8002dac:	d105      	bne.n	8002dba <__libc_init_array+0x2e>
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
 8002db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db4:	4798      	blx	r3
 8002db6:	3601      	adds	r6, #1
 8002db8:	e7ee      	b.n	8002d98 <__libc_init_array+0xc>
 8002dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dbe:	4798      	blx	r3
 8002dc0:	3601      	adds	r6, #1
 8002dc2:	e7f2      	b.n	8002daa <__libc_init_array+0x1e>
 8002dc4:	08002dfc 	.word	0x08002dfc
 8002dc8:	08002dfc 	.word	0x08002dfc
 8002dcc:	08002dfc 	.word	0x08002dfc
 8002dd0:	08002e00 	.word	0x08002e00

08002dd4 <_init>:
 8002dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd6:	bf00      	nop
 8002dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dda:	bc08      	pop	{r3}
 8002ddc:	469e      	mov	lr, r3
 8002dde:	4770      	bx	lr

08002de0 <_fini>:
 8002de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de2:	bf00      	nop
 8002de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de6:	bc08      	pop	{r3}
 8002de8:	469e      	mov	lr, r3
 8002dea:	4770      	bx	lr
