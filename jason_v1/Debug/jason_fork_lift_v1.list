
jason_fork_lift_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c38  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004e10  08004e10  00005e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e50  08004e50  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e50  08004e50  00005e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e58  08004e58  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e58  08004e58  00005e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e5c  08004e5c  00005e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004e60  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  2000000c  08004e6c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08004e6c  00006320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f88  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c7  00000000  00000000  00017fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  0001a490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca1  00000000  00000000  0001b4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000022c7  00000000  00000000  0001c159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001354c  00000000  00000000  0001e420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9e92  00000000  00000000  0003196c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b7fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004408  00000000  00000000  0010b844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0010fc4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004df8 	.word	0x08004df8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004df8 	.word	0x08004df8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 031c 	add.w	r3, r7, #28
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800051e:	4b60      	ldr	r3, [pc, #384]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a5f      	ldr	r2, [pc, #380]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000524:	f043 0310 	orr.w	r3, r3, #16
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b5d      	ldr	r3, [pc, #372]	@ (80006a0 <MX_GPIO_Init+0x198>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0310 	and.w	r3, r3, #16
 8000532:	61bb      	str	r3, [r7, #24]
 8000534:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	4b5a      	ldr	r3, [pc, #360]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a59      	ldr	r2, [pc, #356]	@ (80006a0 <MX_GPIO_Init+0x198>)
 800053c:	f043 0304 	orr.w	r3, r3, #4
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b57      	ldr	r3, [pc, #348]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054e:	4b54      	ldr	r3, [pc, #336]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000552:	4a53      	ldr	r2, [pc, #332]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000554:	f043 0320 	orr.w	r3, r3, #32
 8000558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055a:	4b51      	ldr	r3, [pc, #324]	@ (80006a0 <MX_GPIO_Init+0x198>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	f003 0320 	and.w	r3, r3, #32
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b4e      	ldr	r3, [pc, #312]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	4a4d      	ldr	r2, [pc, #308]	@ (80006a0 <MX_GPIO_Init+0x198>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000572:	4b4b      	ldr	r3, [pc, #300]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b48      	ldr	r3, [pc, #288]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000582:	4a47      	ldr	r2, [pc, #284]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000584:	f043 0302 	orr.w	r3, r3, #2
 8000588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058a:	4b45      	ldr	r3, [pc, #276]	@ (80006a0 <MX_GPIO_Init+0x198>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000596:	4b42      	ldr	r3, [pc, #264]	@ (80006a0 <MX_GPIO_Init+0x198>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059a:	4a41      	ldr	r2, [pc, #260]	@ (80006a0 <MX_GPIO_Init+0x198>)
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a2:	4b3f      	ldr	r3, [pc, #252]	@ (80006a0 <MX_GPIO_Init+0x198>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a6:	f003 0308 	and.w	r3, r3, #8
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, C_IN2_Pin|LED_4_Pin|LED_3_Pin|LED_2_Pin
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 80005b4:	483b      	ldr	r0, [pc, #236]	@ (80006a4 <MX_GPIO_Init+0x19c>)
 80005b6:	f001 fa35 	bl	8001a24 <HAL_GPIO_WritePin>
                          |LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C_IN1_Pin|D_IN2_Pin|A_IN2_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2189      	movs	r1, #137	@ 0x89
 80005be:	483a      	ldr	r0, [pc, #232]	@ (80006a8 <MX_GPIO_Init+0x1a0>)
 80005c0:	f001 fa30 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A_IN1_GPIO_Port, A_IN1_Pin, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ce:	f001 fa29 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(B_IN2_GPIO_Port, B_IN2_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005d8:	4834      	ldr	r0, [pc, #208]	@ (80006ac <MX_GPIO_Init+0x1a4>)
 80005da:	f001 fa23 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, B_IN1_Pin|D_IN1_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2184      	movs	r1, #132	@ 0x84
 80005e2:	4833      	ldr	r0, [pc, #204]	@ (80006b0 <MX_GPIO_Init+0x1a8>)
 80005e4:	f001 fa1e 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : C_IN2_Pin */
  GPIO_InitStruct.Pin = C_IN2_Pin;
 80005e8:	2340      	movs	r3, #64	@ 0x40
 80005ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2300      	movs	r3, #0
 80005f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(C_IN2_GPIO_Port, &GPIO_InitStruct);
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	4619      	mov	r1, r3
 80005fe:	4829      	ldr	r0, [pc, #164]	@ (80006a4 <MX_GPIO_Init+0x19c>)
 8000600:	f001 f88e 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_IN1_Pin D_IN2_Pin A_IN2_Pin */
  GPIO_InitStruct.Pin = C_IN1_Pin|D_IN2_Pin|A_IN2_Pin;
 8000604:	2389      	movs	r3, #137	@ 0x89
 8000606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	2301      	movs	r3, #1
 800060a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2300      	movs	r3, #0
 8000612:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4619      	mov	r1, r3
 800061a:	4823      	ldr	r0, [pc, #140]	@ (80006a8 <MX_GPIO_Init+0x1a0>)
 800061c:	f001 f880 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin;
 8000620:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800062e:	2303      	movs	r3, #3
 8000630:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	4619      	mov	r1, r3
 8000638:	481a      	ldr	r0, [pc, #104]	@ (80006a4 <MX_GPIO_Init+0x19c>)
 800063a:	f001 f871 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : A_IN1_Pin */
  GPIO_InitStruct.Pin = A_IN1_Pin;
 800063e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(A_IN1_GPIO_Port, &GPIO_InitStruct);
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	4619      	mov	r1, r3
 8000656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065a:	f001 f861 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_IN2_Pin */
  GPIO_InitStruct.Pin = B_IN2_Pin;
 800065e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(B_IN2_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4619      	mov	r1, r3
 8000676:	480d      	ldr	r0, [pc, #52]	@ (80006ac <MX_GPIO_Init+0x1a4>)
 8000678:	f001 f852 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_IN1_Pin D_IN1_Pin */
  GPIO_InitStruct.Pin = B_IN1_Pin|D_IN1_Pin;
 800067c:	2384      	movs	r3, #132	@ 0x84
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	4807      	ldr	r0, [pc, #28]	@ (80006b0 <MX_GPIO_Init+0x1a8>)
 8000694:	f001 f844 	bl	8001720 <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3730      	adds	r7, #48	@ 0x30
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	48001000 	.word	0x48001000
 80006a8:	48000400 	.word	0x48000400
 80006ac:	48000800 	.word	0x48000800
 80006b0:	48000c00 	.word	0x48000c00

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 febb 	bl	8001432 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f8e0 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f7ff ff22 	bl	8000508 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006c4:	f000 f992 	bl	80009ec <MX_TIM1_Init>
  MX_TIM3_Init();
 80006c8:	f000 fa60 	bl	8000b8c <MX_TIM3_Init>
  MX_TIM4_Init();
 80006cc:	f000 faec 	bl	8000ca8 <MX_TIM4_Init>
  MX_TIM5_Init();
 80006d0:	f000 fb40 	bl	8000d54 <MX_TIM5_Init>
  MX_TIM8_Init();
 80006d4:	f000 fb94 	bl	8000e00 <MX_TIM8_Init>
  MX_TIM2_Init();
 80006d8:	f000 f9e2 	bl	8000aa0 <MX_TIM2_Init>
  MX_UART4_Init();
 80006dc:	f000 fd50 	bl	8001180 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80006e0:	f000 fd9a 	bl	8001218 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006e4:	2100      	movs	r1, #0
 80006e6:	485a      	ldr	r0, [pc, #360]	@ (8000850 <main+0x19c>)
 80006e8:	f002 fb30 	bl	8002d4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80006ec:	2104      	movs	r1, #4
 80006ee:	4858      	ldr	r0, [pc, #352]	@ (8000850 <main+0x19c>)
 80006f0:	f002 fb2c 	bl	8002d4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80006f4:	210c      	movs	r1, #12
 80006f6:	4856      	ldr	r0, [pc, #344]	@ (8000850 <main+0x19c>)
 80006f8:	f002 fb28 	bl	8002d4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80006fc:	210c      	movs	r1, #12
 80006fe:	4855      	ldr	r0, [pc, #340]	@ (8000854 <main+0x1a0>)
 8000700:	f002 fb24 	bl	8002d4c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8000704:	4854      	ldr	r0, [pc, #336]	@ (8000858 <main+0x1a4>)
 8000706:	f002 fa47 	bl	8002b98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 800070a:	213c      	movs	r1, #60	@ 0x3c
 800070c:	4852      	ldr	r0, [pc, #328]	@ (8000858 <main+0x1a4>)
 800070e:	f002 fcd5 	bl	80030bc <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000712:	4852      	ldr	r0, [pc, #328]	@ (800085c <main+0x1a8>)
 8000714:	f002 fa40 	bl	8002b98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000718:	213c      	movs	r1, #60	@ 0x3c
 800071a:	4850      	ldr	r0, [pc, #320]	@ (800085c <main+0x1a8>)
 800071c:	f002 fcce 	bl	80030bc <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8000720:	484f      	ldr	r0, [pc, #316]	@ (8000860 <main+0x1ac>)
 8000722:	f002 fa39 	bl	8002b98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8000726:	213c      	movs	r1, #60	@ 0x3c
 8000728:	484d      	ldr	r0, [pc, #308]	@ (8000860 <main+0x1ac>)
 800072a:	f002 fcc7 	bl	80030bc <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 800072e:	484d      	ldr	r0, [pc, #308]	@ (8000864 <main+0x1b0>)
 8000730:	f002 fa32 	bl	8002b98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8000734:	213c      	movs	r1, #60	@ 0x3c
 8000736:	484b      	ldr	r0, [pc, #300]	@ (8000864 <main+0x1b0>)
 8000738:	f002 fcc0 	bl	80030bc <HAL_TIM_Encoder_Start_IT>

  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000742:	4849      	ldr	r0, [pc, #292]	@ (8000868 <main+0x1b4>)
 8000744:	f001 f96e 	bl	8001a24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800074e:	4846      	ldr	r0, [pc, #280]	@ (8000868 <main+0x1b4>)
 8000750:	f001 f968 	bl	8001a24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800075a:	4843      	ldr	r0, [pc, #268]	@ (8000868 <main+0x1b4>)
 800075c:	f001 f962 	bl	8001a24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2180      	movs	r1, #128	@ 0x80
 8000764:	4840      	ldr	r0, [pc, #256]	@ (8000868 <main+0x1b4>)
 8000766:	f001 f95d 	bl	8001a24 <HAL_GPIO_WritePin>

  TIM3->CCR4 = 16800 / 2;
 800076a:	4b40      	ldr	r3, [pc, #256]	@ (800086c <main+0x1b8>)
 800076c:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8000770:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM2->CCR4 = 16800 / 2;
 8000772:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000776:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 800077a:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3->CCR2 = 16800 / 2;
 800077c:	4b3b      	ldr	r3, [pc, #236]	@ (800086c <main+0x1b8>)
 800077e:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8000782:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3->CCR1 = 16800 / 2;
 8000784:	4b39      	ldr	r3, [pc, #228]	@ (800086c <main+0x1b8>)
 8000786:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 800078a:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_GPIO_WritePin(C_IN1_GPIO_Port, C_IN1_Pin, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	2101      	movs	r1, #1
 8000790:	4837      	ldr	r0, [pc, #220]	@ (8000870 <main+0x1bc>)
 8000792:	f001 f947 	bl	8001a24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(C_IN2_GPIO_Port, C_IN2_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2140      	movs	r1, #64	@ 0x40
 800079a:	4833      	ldr	r0, [pc, #204]	@ (8000868 <main+0x1b4>)
 800079c:	f001 f942 	bl	8001a24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D_IN1_GPIO_Port, D_IN1_Pin, GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2180      	movs	r1, #128	@ 0x80
 80007a4:	4833      	ldr	r0, [pc, #204]	@ (8000874 <main+0x1c0>)
 80007a6:	f001 f93d 	bl	8001a24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D_IN2_GPIO_Port, D_IN2_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2108      	movs	r1, #8
 80007ae:	4830      	ldr	r0, [pc, #192]	@ (8000870 <main+0x1bc>)
 80007b0:	f001 f938 	bl	8001a24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(A_IN1_GPIO_Port, A_IN1_Pin, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007be:	f001 f931 	bl	8001a24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(A_IN2_GPIO_Port, A_IN2_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2180      	movs	r1, #128	@ 0x80
 80007c6:	482a      	ldr	r0, [pc, #168]	@ (8000870 <main+0x1bc>)
 80007c8:	f001 f92c 	bl	8001a24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(B_IN1_GPIO_Port, B_IN1_Pin, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2104      	movs	r1, #4
 80007d0:	4828      	ldr	r0, [pc, #160]	@ (8000874 <main+0x1c0>)
 80007d2:	f001 f927 	bl	8001a24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(B_IN2_GPIO_Port, B_IN2_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007dc:	4826      	ldr	r0, [pc, #152]	@ (8000878 <main+0x1c4>)
 80007de:	f001 f921 	bl	8001a24 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1);
 80007e2:	2001      	movs	r0, #1
 80007e4:	f000 fe96 	bl	8001514 <HAL_Delay>
        container_move_down();
      else if (controller_state.square)
        container_reset();
    }
#else
    if (HAL_GetTick() - time_stamp > 3000) {
 80007e8:	f000 fe88 	bl	80014fc <HAL_GetTick>
 80007ec:	4603      	mov	r3, r0
 80007ee:	4a23      	ldr	r2, [pc, #140]	@ (800087c <main+0x1c8>)
 80007f0:	6812      	ldr	r2, [r2, #0]
 80007f2:	1a9b      	subs	r3, r3, r2
 80007f4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d9f2      	bls.n	80007e2 <main+0x12e>
      time_stamp = HAL_GetTick();
 80007fc:	f000 fe7e 	bl	80014fc <HAL_GetTick>
 8000800:	4603      	mov	r3, r0
 8000802:	461a      	mov	r2, r3
 8000804:	4b1d      	ldr	r3, [pc, #116]	@ (800087c <main+0x1c8>)
 8000806:	601a      	str	r2, [r3, #0]
      HAL_GPIO_TogglePin(C_IN1_GPIO_Port, C_IN1_Pin);
 8000808:	2101      	movs	r1, #1
 800080a:	4819      	ldr	r0, [pc, #100]	@ (8000870 <main+0x1bc>)
 800080c:	f001 f922 	bl	8001a54 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(C_IN2_GPIO_Port, C_IN2_Pin);
 8000810:	2140      	movs	r1, #64	@ 0x40
 8000812:	4815      	ldr	r0, [pc, #84]	@ (8000868 <main+0x1b4>)
 8000814:	f001 f91e 	bl	8001a54 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(D_IN1_GPIO_Port, D_IN1_Pin);
 8000818:	2180      	movs	r1, #128	@ 0x80
 800081a:	4816      	ldr	r0, [pc, #88]	@ (8000874 <main+0x1c0>)
 800081c:	f001 f91a 	bl	8001a54 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(D_IN2_GPIO_Port, D_IN2_Pin);
 8000820:	2108      	movs	r1, #8
 8000822:	4813      	ldr	r0, [pc, #76]	@ (8000870 <main+0x1bc>)
 8000824:	f001 f916 	bl	8001a54 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(A_IN1_GPIO_Port, A_IN1_Pin);
 8000828:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800082c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000830:	f001 f910 	bl	8001a54 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(A_IN2_GPIO_Port, A_IN2_Pin);
 8000834:	2180      	movs	r1, #128	@ 0x80
 8000836:	480e      	ldr	r0, [pc, #56]	@ (8000870 <main+0x1bc>)
 8000838:	f001 f90c 	bl	8001a54 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(B_IN1_GPIO_Port, B_IN1_Pin);
 800083c:	2104      	movs	r1, #4
 800083e:	480d      	ldr	r0, [pc, #52]	@ (8000874 <main+0x1c0>)
 8000840:	f001 f908 	bl	8001a54 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(B_IN2_GPIO_Port, B_IN2_Pin);
 8000844:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000848:	480b      	ldr	r0, [pc, #44]	@ (8000878 <main+0x1c4>)
 800084a:	f001 f903 	bl	8001a54 <HAL_GPIO_TogglePin>
    HAL_Delay(1);
 800084e:	e7c8      	b.n	80007e2 <main+0x12e>
 8000850:	200000c4 	.word	0x200000c4
 8000854:	20000078 	.word	0x20000078
 8000858:	2000002c 	.word	0x2000002c
 800085c:	20000110 	.word	0x20000110
 8000860:	2000015c 	.word	0x2000015c
 8000864:	200001a8 	.word	0x200001a8
 8000868:	48001000 	.word	0x48001000
 800086c:	40000400 	.word	0x40000400
 8000870:	48000400 	.word	0x48000400
 8000874:	48000c00 	.word	0x48000c00
 8000878:	48000800 	.word	0x48000800
 800087c:	20000028 	.word	0x20000028

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	@ 0x50
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0318 	add.w	r3, r7, #24
 800088a:	2238      	movs	r2, #56	@ 0x38
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f004 fa86 	bl	8004da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f001 f8f0 	bl	8001a88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b2:	2302      	movs	r3, #2
 80008b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b6:	2303      	movs	r3, #3
 80008b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80008be:	2355      	movs	r3, #85	@ 0x55
 80008c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ce:	f107 0318 	add.w	r3, r7, #24
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 f98c 	bl	8001bf0 <HAL_RCC_OscConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80008de:	f000 f818 	bl	8000912 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e2:	230f      	movs	r3, #15
 80008e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e6:	2303      	movs	r3, #3
 80008e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2104      	movs	r1, #4
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 fc8a 	bl	8002214 <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000906:	f000 f804 	bl	8000912 <Error_Handler>
  }
}
 800090a:	bf00      	nop
 800090c:	3750      	adds	r7, #80	@ 0x50
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000916:	b672      	cpsid	i
}
 8000918:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800091a:	bf00      	nop
 800091c:	e7fd      	b.n	800091a <Error_Handler+0x8>
	...

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <HAL_MspInit+0x44>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092a:	4a0e      	ldr	r2, [pc, #56]	@ (8000964 <HAL_MspInit+0x44>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6613      	str	r3, [r2, #96]	@ 0x60
 8000932:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <HAL_MspInit+0x44>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <HAL_MspInit+0x44>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000942:	4a08      	ldr	r2, [pc, #32]	@ (8000964 <HAL_MspInit+0x44>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000948:	6593      	str	r3, [r2, #88]	@ 0x58
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <HAL_MspInit+0x44>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000956:	f001 f93b 	bl	8001bd0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <NMI_Handler+0x4>

08000970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <MemManage_Handler+0x4>

08000980 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <UsageFault_Handler+0x4>

08000990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009be:	f000 fd8b 	bl	80014d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <SystemInit+0x20>)
 80009ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009d2:	4a05      	ldr	r2, [pc, #20]	@ (80009e8 <SystemInit+0x20>)
 80009d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	@ 0x30
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	2224      	movs	r2, #36	@ 0x24
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f004 f9d0 	bl	8004da0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a00:	463b      	mov	r3, r7
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a0a:	4b23      	ldr	r3, [pc, #140]	@ (8000a98 <MX_TIM1_Init+0xac>)
 8000a0c:	4a23      	ldr	r2, [pc, #140]	@ (8000a9c <MX_TIM1_Init+0xb0>)
 8000a0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a10:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <MX_TIM1_Init+0xac>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a16:	4b20      	ldr	r3, [pc, #128]	@ (8000a98 <MX_TIM1_Init+0xac>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a98 <MX_TIM1_Init+0xac>)
 8000a1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a24:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <MX_TIM1_Init+0xac>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <MX_TIM1_Init+0xac>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a30:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <MX_TIM1_Init+0xac>)
 8000a32:	2280      	movs	r2, #128	@ 0x80
 8000a34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a36:	2303      	movs	r3, #3
 8000a38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000a46:	230a      	movs	r3, #10
 8000a48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8000a56:	230a      	movs	r3, #10
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480d      	ldr	r0, [pc, #52]	@ (8000a98 <MX_TIM1_Init+0xac>)
 8000a62:	f002 fa85 	bl	8002f70 <HAL_TIM_Encoder_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000a6c:	f7ff ff51 	bl	8000912 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a70:	2300      	movs	r3, #0
 8000a72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_TIM1_Init+0xac>)
 8000a82:	f003 fa89 	bl	8003f98 <HAL_TIMEx_MasterConfigSynchronization>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a8c:	f7ff ff41 	bl	8000912 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	3730      	adds	r7, #48	@ 0x30
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2000002c 	.word	0x2000002c
 8000a9c:	40012c00 	.word	0x40012c00

08000aa0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	@ 0x38
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]
 8000ace:	615a      	str	r2, [r3, #20]
 8000ad0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ad2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b88 <MX_TIM2_Init+0xe8>)
 8000ad4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ad8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ada:	4b2b      	ldr	r3, [pc, #172]	@ (8000b88 <MX_TIM2_Init+0xe8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae0:	4b29      	ldr	r3, [pc, #164]	@ (8000b88 <MX_TIM2_Init+0xe8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16800;
 8000ae6:	4b28      	ldr	r3, [pc, #160]	@ (8000b88 <MX_TIM2_Init+0xe8>)
 8000ae8:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8000aec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aee:	4b26      	ldr	r3, [pc, #152]	@ (8000b88 <MX_TIM2_Init+0xe8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000af4:	4b24      	ldr	r3, [pc, #144]	@ (8000b88 <MX_TIM2_Init+0xe8>)
 8000af6:	2280      	movs	r2, #128	@ 0x80
 8000af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000afa:	4823      	ldr	r0, [pc, #140]	@ (8000b88 <MX_TIM2_Init+0xe8>)
 8000afc:	f001 fff4 	bl	8002ae8 <HAL_TIM_Base_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b06:	f7ff ff04 	bl	8000912 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b14:	4619      	mov	r1, r3
 8000b16:	481c      	ldr	r0, [pc, #112]	@ (8000b88 <MX_TIM2_Init+0xe8>)
 8000b18:	f002 fc92 	bl	8003440 <HAL_TIM_ConfigClockSource>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b22:	f7ff fef6 	bl	8000912 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b26:	4818      	ldr	r0, [pc, #96]	@ (8000b88 <MX_TIM2_Init+0xe8>)
 8000b28:	f002 f8ae 	bl	8002c88 <HAL_TIM_PWM_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b32:	f7ff feee 	bl	8000912 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	4810      	ldr	r0, [pc, #64]	@ (8000b88 <MX_TIM2_Init+0xe8>)
 8000b46:	f003 fa27 	bl	8003f98 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b50:	f7ff fedf 	bl	8000912 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b54:	2360      	movs	r3, #96	@ 0x60
 8000b56:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b64:	463b      	mov	r3, r7
 8000b66:	220c      	movs	r2, #12
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4807      	ldr	r0, [pc, #28]	@ (8000b88 <MX_TIM2_Init+0xe8>)
 8000b6c:	f002 fb54 	bl	8003218 <HAL_TIM_PWM_ConfigChannel>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b76:	f7ff fecc 	bl	8000912 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b7a:	4803      	ldr	r0, [pc, #12]	@ (8000b88 <MX_TIM2_Init+0xe8>)
 8000b7c:	f000 faa4 	bl	80010c8 <HAL_TIM_MspPostInit>

}
 8000b80:	bf00      	nop
 8000b82:	3738      	adds	r7, #56	@ 0x38
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000078 	.word	0x20000078

08000b8c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08e      	sub	sp, #56	@ 0x38
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bac:	463b      	mov	r3, r7
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
 8000bba:	615a      	str	r2, [r3, #20]
 8000bbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bbe:	4b38      	ldr	r3, [pc, #224]	@ (8000ca0 <MX_TIM3_Init+0x114>)
 8000bc0:	4a38      	ldr	r2, [pc, #224]	@ (8000ca4 <MX_TIM3_Init+0x118>)
 8000bc2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8000bc4:	4b36      	ldr	r3, [pc, #216]	@ (8000ca0 <MX_TIM3_Init+0x114>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b35      	ldr	r3, [pc, #212]	@ (8000ca0 <MX_TIM3_Init+0x114>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16799;
 8000bd0:	4b33      	ldr	r3, [pc, #204]	@ (8000ca0 <MX_TIM3_Init+0x114>)
 8000bd2:	f244 129f 	movw	r2, #16799	@ 0x419f
 8000bd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b31      	ldr	r3, [pc, #196]	@ (8000ca0 <MX_TIM3_Init+0x114>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bde:	4b30      	ldr	r3, [pc, #192]	@ (8000ca0 <MX_TIM3_Init+0x114>)
 8000be0:	2280      	movs	r2, #128	@ 0x80
 8000be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000be4:	482e      	ldr	r0, [pc, #184]	@ (8000ca0 <MX_TIM3_Init+0x114>)
 8000be6:	f001 ff7f 	bl	8002ae8 <HAL_TIM_Base_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000bf0:	f7ff fe8f 	bl	8000912 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bfa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4827      	ldr	r0, [pc, #156]	@ (8000ca0 <MX_TIM3_Init+0x114>)
 8000c02:	f002 fc1d 	bl	8003440 <HAL_TIM_ConfigClockSource>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c0c:	f7ff fe81 	bl	8000912 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c10:	4823      	ldr	r0, [pc, #140]	@ (8000ca0 <MX_TIM3_Init+0x114>)
 8000c12:	f002 f839 	bl	8002c88 <HAL_TIM_PWM_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c1c:	f7ff fe79 	bl	8000912 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	481c      	ldr	r0, [pc, #112]	@ (8000ca0 <MX_TIM3_Init+0x114>)
 8000c30:	f003 f9b2 	bl	8003f98 <HAL_TIMEx_MasterConfigSynchronization>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c3a:	f7ff fe6a 	bl	8000912 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3e:	2360      	movs	r3, #96	@ 0x60
 8000c40:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	4619      	mov	r1, r3
 8000c54:	4812      	ldr	r0, [pc, #72]	@ (8000ca0 <MX_TIM3_Init+0x114>)
 8000c56:	f002 fadf 	bl	8003218 <HAL_TIM_PWM_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c60:	f7ff fe57 	bl	8000912 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c64:	463b      	mov	r3, r7
 8000c66:	2204      	movs	r2, #4
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480d      	ldr	r0, [pc, #52]	@ (8000ca0 <MX_TIM3_Init+0x114>)
 8000c6c:	f002 fad4 	bl	8003218 <HAL_TIM_PWM_ConfigChannel>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000c76:	f7ff fe4c 	bl	8000912 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	220c      	movs	r2, #12
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4807      	ldr	r0, [pc, #28]	@ (8000ca0 <MX_TIM3_Init+0x114>)
 8000c82:	f002 fac9 	bl	8003218 <HAL_TIM_PWM_ConfigChannel>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000c8c:	f7ff fe41 	bl	8000912 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c90:	4803      	ldr	r0, [pc, #12]	@ (8000ca0 <MX_TIM3_Init+0x114>)
 8000c92:	f000 fa19 	bl	80010c8 <HAL_TIM_MspPostInit>

}
 8000c96:	bf00      	nop
 8000c98:	3738      	adds	r7, #56	@ 0x38
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200000c4 	.word	0x200000c4
 8000ca4:	40000400 	.word	0x40000400

08000ca8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08c      	sub	sp, #48	@ 0x30
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	2224      	movs	r2, #36	@ 0x24
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f004 f872 	bl	8004da0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <MX_TIM4_Init+0xa4>)
 8000cc8:	4a21      	ldr	r2, [pc, #132]	@ (8000d50 <MX_TIM4_Init+0xa8>)
 8000cca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <MX_TIM4_Init+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d4c <MX_TIM4_Init+0xa4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <MX_TIM4_Init+0xa4>)
 8000cda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cde:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <MX_TIM4_Init+0xa4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <MX_TIM4_Init+0xa4>)
 8000ce8:	2280      	movs	r2, #128	@ 0x80
 8000cea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cec:	2303      	movs	r3, #3
 8000cee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000cfc:	230a      	movs	r3, #10
 8000cfe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d04:	2301      	movs	r3, #1
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8000d0c:	230a      	movs	r3, #10
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	4619      	mov	r1, r3
 8000d16:	480d      	ldr	r0, [pc, #52]	@ (8000d4c <MX_TIM4_Init+0xa4>)
 8000d18:	f002 f92a 	bl	8002f70 <HAL_TIM_Encoder_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d22:	f7ff fdf6 	bl	8000912 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	@ (8000d4c <MX_TIM4_Init+0xa4>)
 8000d34:	f003 f930 	bl	8003f98 <HAL_TIMEx_MasterConfigSynchronization>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d3e:	f7ff fde8 	bl	8000912 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	3730      	adds	r7, #48	@ 0x30
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000110 	.word	0x20000110
 8000d50:	40000800 	.word	0x40000800

08000d54 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	@ 0x30
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	2224      	movs	r2, #36	@ 0x24
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f004 f81c 	bl	8004da0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d68:	463b      	mov	r3, r7
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d72:	4b21      	ldr	r3, [pc, #132]	@ (8000df8 <MX_TIM5_Init+0xa4>)
 8000d74:	4a21      	ldr	r2, [pc, #132]	@ (8000dfc <MX_TIM5_Init+0xa8>)
 8000d76:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d78:	4b1f      	ldr	r3, [pc, #124]	@ (8000df8 <MX_TIM5_Init+0xa4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000df8 <MX_TIM5_Init+0xa4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000d84:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <MX_TIM5_Init+0xa4>)
 8000d86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d8a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <MX_TIM5_Init+0xa4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d92:	4b19      	ldr	r3, [pc, #100]	@ (8000df8 <MX_TIM5_Init+0xa4>)
 8000d94:	2280      	movs	r2, #128	@ 0x80
 8000d96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000da0:	2301      	movs	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000da8:	230a      	movs	r3, #10
 8000daa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000db0:	2301      	movs	r3, #1
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8000db8:	230a      	movs	r3, #10
 8000dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480d      	ldr	r0, [pc, #52]	@ (8000df8 <MX_TIM5_Init+0xa4>)
 8000dc4:	f002 f8d4 	bl	8002f70 <HAL_TIM_Encoder_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000dce:	f7ff fda0 	bl	8000912 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	@ (8000df8 <MX_TIM5_Init+0xa4>)
 8000de0:	f003 f8da 	bl	8003f98 <HAL_TIMEx_MasterConfigSynchronization>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000dea:	f7ff fd92 	bl	8000912 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	3730      	adds	r7, #48	@ 0x30
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000015c 	.word	0x2000015c
 8000dfc:	40000c00 	.word	0x40000c00

08000e00 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08c      	sub	sp, #48	@ 0x30
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	2224      	movs	r2, #36	@ 0x24
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f003 ffc6 	bl	8004da0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e14:	463b      	mov	r3, r7
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e1e:	4b23      	ldr	r3, [pc, #140]	@ (8000eac <MX_TIM8_Init+0xac>)
 8000e20:	4a23      	ldr	r2, [pc, #140]	@ (8000eb0 <MX_TIM8_Init+0xb0>)
 8000e22:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e24:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <MX_TIM8_Init+0xac>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2a:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <MX_TIM8_Init+0xac>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000e30:	4b1e      	ldr	r3, [pc, #120]	@ (8000eac <MX_TIM8_Init+0xac>)
 8000e32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e36:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e38:	4b1c      	ldr	r3, [pc, #112]	@ (8000eac <MX_TIM8_Init+0xac>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <MX_TIM8_Init+0xac>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e44:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <MX_TIM8_Init+0xac>)
 8000e46:	2280      	movs	r2, #128	@ 0x80
 8000e48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e52:	2301      	movs	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000e5a:	230a      	movs	r3, #10
 8000e5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e62:	2301      	movs	r3, #1
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8000e6a:	230a      	movs	r3, #10
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	4619      	mov	r1, r3
 8000e74:	480d      	ldr	r0, [pc, #52]	@ (8000eac <MX_TIM8_Init+0xac>)
 8000e76:	f002 f87b 	bl	8002f70 <HAL_TIM_Encoder_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000e80:	f7ff fd47 	bl	8000912 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e84:	2300      	movs	r3, #0
 8000e86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e90:	463b      	mov	r3, r7
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	@ (8000eac <MX_TIM8_Init+0xac>)
 8000e96:	f003 f87f 	bl	8003f98 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000ea0:	f7ff fd37 	bl	8000912 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	3730      	adds	r7, #48	@ 0x30
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200001a8 	.word	0x200001a8
 8000eb0:	40013400 	.word	0x40013400

08000eb4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b090      	sub	sp, #64	@ 0x40
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a5d      	ldr	r2, [pc, #372]	@ (8001048 <HAL_TIM_Encoder_MspInit+0x194>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d128      	bne.n	8000f28 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ed6:	4b5d      	ldr	r3, [pc, #372]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eda:	4a5c      	ldr	r2, [pc, #368]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000edc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ee0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ee2:	4b5a      	ldr	r3, [pc, #360]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	4b57      	ldr	r3, [pc, #348]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	4a56      	ldr	r2, [pc, #344]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efa:	4b54      	ldr	r3, [pc, #336]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f06:	2303      	movs	r3, #3
 8000f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000f16:	2302      	movs	r3, #2
 8000f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f1e:	4619      	mov	r1, r3
 8000f20:	484b      	ldr	r0, [pc, #300]	@ (8001050 <HAL_TIM_Encoder_MspInit+0x19c>)
 8000f22:	f000 fbfd 	bl	8001720 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000f26:	e08a      	b.n	800103e <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM4)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a49      	ldr	r2, [pc, #292]	@ (8001054 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d129      	bne.n	8000f86 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f32:	4b46      	ldr	r3, [pc, #280]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f36:	4a45      	ldr	r2, [pc, #276]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000f38:	f043 0304 	orr.w	r3, r3, #4
 8000f3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f3e:	4b43      	ldr	r3, [pc, #268]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	623b      	str	r3, [r7, #32]
 8000f48:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4a:	4b40      	ldr	r3, [pc, #256]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4e:	4a3f      	ldr	r2, [pc, #252]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000f50:	f043 0308 	orr.w	r3, r3, #8
 8000f54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f56:	4b3d      	ldr	r3, [pc, #244]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f62:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f74:	2302      	movs	r3, #2
 8000f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4836      	ldr	r0, [pc, #216]	@ (8001058 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8000f80:	f000 fbce 	bl	8001720 <HAL_GPIO_Init>
}
 8000f84:	e05b      	b.n	800103e <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM5)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a34      	ldr	r2, [pc, #208]	@ (800105c <HAL_TIM_Encoder_MspInit+0x1a8>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d129      	bne.n	8000fe4 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f90:	4b2e      	ldr	r3, [pc, #184]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f94:	4a2d      	ldr	r2, [pc, #180]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000f96:	f043 0308 	orr.w	r3, r3, #8
 8000f9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa0:	f003 0308 	and.w	r3, r3, #8
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	4b28      	ldr	r3, [pc, #160]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fac:	4a27      	ldr	r2, [pc, #156]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb4:	4b25      	ldr	r3, [pc, #148]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fde:	f000 fb9f 	bl	8001720 <HAL_GPIO_Init>
}
 8000fe2:	e02c      	b.n	800103e <HAL_TIM_Encoder_MspInit+0x18a>
  else if(tim_encoderHandle->Instance==TIM8)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8001060 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d127      	bne.n	800103e <HAL_TIM_Encoder_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000fee:	4b17      	ldr	r3, [pc, #92]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff2:	4a16      	ldr	r2, [pc, #88]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000ff4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ff8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ffa:	4b14      	ldr	r3, [pc, #80]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8000ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ffe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	4b11      	ldr	r3, [pc, #68]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	4a10      	ldr	r2, [pc, #64]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001012:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <HAL_TIM_Encoder_MspInit+0x198>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800101e:	23c0      	movs	r3, #192	@ 0xc0
 8001020:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800102e:	2304      	movs	r3, #4
 8001030:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001032:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	@ (8001050 <HAL_TIM_Encoder_MspInit+0x19c>)
 800103a:	f000 fb71 	bl	8001720 <HAL_GPIO_Init>
}
 800103e:	bf00      	nop
 8001040:	3740      	adds	r7, #64	@ 0x40
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40012c00 	.word	0x40012c00
 800104c:	40021000 	.word	0x40021000
 8001050:	48000800 	.word	0x48000800
 8001054:	40000800 	.word	0x40000800
 8001058:	48000c00 	.word	0x48000c00
 800105c:	40000c00 	.word	0x40000c00
 8001060:	40013400 	.word	0x40013400

08001064 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001074:	d10c      	bne.n	8001090 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001076:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <HAL_TIM_Base_MspInit+0x5c>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107a:	4a11      	ldr	r2, [pc, #68]	@ (80010c0 <HAL_TIM_Base_MspInit+0x5c>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6593      	str	r3, [r2, #88]	@ 0x58
 8001082:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <HAL_TIM_Base_MspInit+0x5c>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800108e:	e010      	b.n	80010b2 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0b      	ldr	r2, [pc, #44]	@ (80010c4 <HAL_TIM_Base_MspInit+0x60>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d10b      	bne.n	80010b2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800109a:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <HAL_TIM_Base_MspInit+0x5c>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109e:	4a08      	ldr	r2, [pc, #32]	@ (80010c0 <HAL_TIM_Base_MspInit+0x5c>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_TIM_Base_MspInit+0x5c>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40000400 	.word	0x40000400

080010c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	@ 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010e8:	d11c      	bne.n	8001124 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ea:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <HAL_TIM_MspPostInit+0xa8>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ee:	4a20      	ldr	r2, [pc, #128]	@ (8001170 <HAL_TIM_MspPostInit+0xa8>)
 80010f0:	f043 0308 	orr.w	r3, r3, #8
 80010f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <HAL_TIM_MspPostInit+0xa8>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PD6     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = RL_PWM_Pin;
 8001102:	2340      	movs	r3, #64	@ 0x40
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001112:	2302      	movs	r3, #2
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RL_PWM_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4815      	ldr	r0, [pc, #84]	@ (8001174 <HAL_TIM_MspPostInit+0xac>)
 800111e:	f000 faff 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001122:	e020      	b.n	8001166 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a13      	ldr	r2, [pc, #76]	@ (8001178 <HAL_TIM_MspPostInit+0xb0>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d11b      	bne.n	8001166 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800112e:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <HAL_TIM_MspPostInit+0xa8>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	4a0f      	ldr	r2, [pc, #60]	@ (8001170 <HAL_TIM_MspPostInit+0xa8>)
 8001134:	f043 0310 	orr.w	r3, r3, #16
 8001138:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113a:	4b0d      	ldr	r3, [pc, #52]	@ (8001170 <HAL_TIM_MspPostInit+0xa8>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FR_PWM_Pin|RR_PWM_Pin|FL_PWM_Pin;
 8001146:	232c      	movs	r3, #44	@ 0x2c
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001156:	2302      	movs	r3, #2
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	4806      	ldr	r0, [pc, #24]	@ (800117c <HAL_TIM_MspPostInit+0xb4>)
 8001162:	f000 fadd 	bl	8001720 <HAL_GPIO_Init>
}
 8001166:	bf00      	nop
 8001168:	3728      	adds	r7, #40	@ 0x28
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000
 8001174:	48000c00 	.word	0x48000c00
 8001178:	40000400 	.word	0x40000400
 800117c:	48001000 	.word	0x48001000

08001180 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001184:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <MX_UART4_Init+0x90>)
 8001186:	4a23      	ldr	r2, [pc, #140]	@ (8001214 <MX_UART4_Init+0x94>)
 8001188:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800118a:	4b21      	ldr	r3, [pc, #132]	@ (8001210 <MX_UART4_Init+0x90>)
 800118c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001190:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001192:	4b1f      	ldr	r3, [pc, #124]	@ (8001210 <MX_UART4_Init+0x90>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001198:	4b1d      	ldr	r3, [pc, #116]	@ (8001210 <MX_UART4_Init+0x90>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800119e:	4b1c      	ldr	r3, [pc, #112]	@ (8001210 <MX_UART4_Init+0x90>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <MX_UART4_Init+0x90>)
 80011a6:	220c      	movs	r2, #12
 80011a8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011aa:	4b19      	ldr	r3, [pc, #100]	@ (8001210 <MX_UART4_Init+0x90>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b0:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <MX_UART4_Init+0x90>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b6:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <MX_UART4_Init+0x90>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011bc:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <MX_UART4_Init+0x90>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c2:	4b13      	ldr	r3, [pc, #76]	@ (8001210 <MX_UART4_Init+0x90>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80011c8:	4811      	ldr	r0, [pc, #68]	@ (8001210 <MX_UART4_Init+0x90>)
 80011ca:	f002 ff7b 	bl	80040c4 <HAL_UART_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80011d4:	f7ff fb9d 	bl	8000912 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d8:	2100      	movs	r1, #0
 80011da:	480d      	ldr	r0, [pc, #52]	@ (8001210 <MX_UART4_Init+0x90>)
 80011dc:	f003 fd16 	bl	8004c0c <HAL_UARTEx_SetTxFifoThreshold>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80011e6:	f7ff fb94 	bl	8000912 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ea:	2100      	movs	r1, #0
 80011ec:	4808      	ldr	r0, [pc, #32]	@ (8001210 <MX_UART4_Init+0x90>)
 80011ee:	f003 fd4b 	bl	8004c88 <HAL_UARTEx_SetRxFifoThreshold>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80011f8:	f7ff fb8b 	bl	8000912 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80011fc:	4804      	ldr	r0, [pc, #16]	@ (8001210 <MX_UART4_Init+0x90>)
 80011fe:	f003 fccc 	bl	8004b9a <HAL_UARTEx_DisableFifoMode>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001208:	f7ff fb83 	bl	8000912 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200001f4 	.word	0x200001f4
 8001214:	40004c00 	.word	0x40004c00

08001218 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800121c:	4b22      	ldr	r3, [pc, #136]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 800121e:	4a23      	ldr	r2, [pc, #140]	@ (80012ac <MX_USART1_UART_Init+0x94>)
 8001220:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001222:	4b21      	ldr	r3, [pc, #132]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 8001224:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001228:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800122a:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001230:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800123c:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 800123e:	220c      	movs	r2, #12
 8001240:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001242:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800124e:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001254:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125a:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 800125c:	2200      	movs	r2, #0
 800125e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001260:	4811      	ldr	r0, [pc, #68]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 8001262:	f002 ff2f 	bl	80040c4 <HAL_UART_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800126c:	f7ff fb51 	bl	8000912 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001270:	2100      	movs	r1, #0
 8001272:	480d      	ldr	r0, [pc, #52]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 8001274:	f003 fcca 	bl	8004c0c <HAL_UARTEx_SetTxFifoThreshold>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800127e:	f7ff fb48 	bl	8000912 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001282:	2100      	movs	r1, #0
 8001284:	4808      	ldr	r0, [pc, #32]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 8001286:	f003 fcff 	bl	8004c88 <HAL_UARTEx_SetRxFifoThreshold>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001290:	f7ff fb3f 	bl	8000912 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 8001296:	f003 fc80 	bl	8004b9a <HAL_UARTEx_DisableFifoMode>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012a0:	f7ff fb37 	bl	8000912 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000288 	.word	0x20000288
 80012ac:	40013800 	.word	0x40013800

080012b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b0a0      	sub	sp, #128	@ 0x80
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c8:	f107 0318 	add.w	r3, r7, #24
 80012cc:	2254      	movs	r2, #84	@ 0x54
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f003 fd65 	bl	8004da0 <memset>
  if(uartHandle->Instance==UART4)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a3d      	ldr	r2, [pc, #244]	@ (80013d0 <HAL_UART_MspInit+0x120>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d137      	bne.n	8001350 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80012e0:	2308      	movs	r3, #8
 80012e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e8:	f107 0318 	add.w	r3, r7, #24
 80012ec:	4618      	mov	r0, r3
 80012ee:	f001 f9ad 	bl	800264c <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012f8:	f7ff fb0b 	bl	8000912 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80012fc:	4b35      	ldr	r3, [pc, #212]	@ (80013d4 <HAL_UART_MspInit+0x124>)
 80012fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001300:	4a34      	ldr	r2, [pc, #208]	@ (80013d4 <HAL_UART_MspInit+0x124>)
 8001302:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001306:	6593      	str	r3, [r2, #88]	@ 0x58
 8001308:	4b32      	ldr	r3, [pc, #200]	@ (80013d4 <HAL_UART_MspInit+0x124>)
 800130a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001314:	4b2f      	ldr	r3, [pc, #188]	@ (80013d4 <HAL_UART_MspInit+0x124>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001318:	4a2e      	ldr	r2, [pc, #184]	@ (80013d4 <HAL_UART_MspInit+0x124>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001320:	4b2c      	ldr	r3, [pc, #176]	@ (80013d4 <HAL_UART_MspInit+0x124>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800132c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001330:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800133e:	2305      	movs	r3, #5
 8001340:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001342:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001346:	4619      	mov	r1, r3
 8001348:	4823      	ldr	r0, [pc, #140]	@ (80013d8 <HAL_UART_MspInit+0x128>)
 800134a:	f000 f9e9 	bl	8001720 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800134e:	e03a      	b.n	80013c6 <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a21      	ldr	r2, [pc, #132]	@ (80013dc <HAL_UART_MspInit+0x12c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d135      	bne.n	80013c6 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800135a:	2301      	movs	r3, #1
 800135c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001362:	f107 0318 	add.w	r3, r7, #24
 8001366:	4618      	mov	r0, r3
 8001368:	f001 f970 	bl	800264c <HAL_RCCEx_PeriphCLKConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001372:	f7ff face 	bl	8000912 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001376:	4b17      	ldr	r3, [pc, #92]	@ (80013d4 <HAL_UART_MspInit+0x124>)
 8001378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800137a:	4a16      	ldr	r2, [pc, #88]	@ (80013d4 <HAL_UART_MspInit+0x124>)
 800137c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001380:	6613      	str	r3, [r2, #96]	@ 0x60
 8001382:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <HAL_UART_MspInit+0x124>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <HAL_UART_MspInit+0x124>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	4a10      	ldr	r2, [pc, #64]	@ (80013d4 <HAL_UART_MspInit+0x124>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <HAL_UART_MspInit+0x124>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013a6:	2330      	movs	r3, #48	@ 0x30
 80013a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013b6:	2307      	movs	r3, #7
 80013b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ba:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <HAL_UART_MspInit+0x128>)
 80013c2:	f000 f9ad 	bl	8001720 <HAL_GPIO_Init>
}
 80013c6:	bf00      	nop
 80013c8:	3780      	adds	r7, #128	@ 0x80
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40004c00 	.word	0x40004c00
 80013d4:	40021000 	.word	0x40021000
 80013d8:	48000800 	.word	0x48000800
 80013dc:	40013800 	.word	0x40013800

080013e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013e0:	480d      	ldr	r0, [pc, #52]	@ (8001418 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013e2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013e4:	f7ff faf0 	bl	80009c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e8:	480c      	ldr	r0, [pc, #48]	@ (800141c <LoopForever+0x6>)
  ldr r1, =_edata
 80013ea:	490d      	ldr	r1, [pc, #52]	@ (8001420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001424 <LoopForever+0xe>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001428 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001400:	4c0a      	ldr	r4, [pc, #40]	@ (800142c <LoopForever+0x16>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800140e:	f003 fccf 	bl	8004db0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001412:	f7ff f94f 	bl	80006b4 <main>

08001416 <LoopForever>:

LoopForever:
    b LoopForever
 8001416:	e7fe      	b.n	8001416 <LoopForever>
  ldr   r0, =_estack
 8001418:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800141c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001420:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001424:	08004e60 	.word	0x08004e60
  ldr r2, =_sbss
 8001428:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800142c:	20000320 	.word	0x20000320

08001430 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC1_2_IRQHandler>

08001432 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800143c:	2003      	movs	r0, #3
 800143e:	f000 f93d 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001442:	200f      	movs	r0, #15
 8001444:	f000 f80e 	bl	8001464 <HAL_InitTick>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d002      	beq.n	8001454 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	71fb      	strb	r3, [r7, #7]
 8001452:	e001      	b.n	8001458 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001454:	f7ff fa64 	bl	8000920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001458:	79fb      	ldrb	r3, [r7, #7]

}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001470:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <HAL_InitTick+0x68>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d022      	beq.n	80014be <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001478:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <HAL_InitTick+0x6c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <HAL_InitTick+0x68>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001484:	fbb1 f3f3 	udiv	r3, r1, r3
 8001488:	fbb2 f3f3 	udiv	r3, r2, r3
 800148c:	4618      	mov	r0, r3
 800148e:	f000 f93a 	bl	8001706 <HAL_SYSTICK_Config>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10f      	bne.n	80014b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b0f      	cmp	r3, #15
 800149c:	d809      	bhi.n	80014b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149e:	2200      	movs	r2, #0
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014a6:	f000 f914 	bl	80016d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014aa:	4a0a      	ldr	r2, [pc, #40]	@ (80014d4 <HAL_InitTick+0x70>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	e007      	b.n	80014c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	73fb      	strb	r3, [r7, #15]
 80014b6:	e004      	b.n	80014c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	e001      	b.n	80014c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000008 	.word	0x20000008
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000004 	.word	0x20000004

080014d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014dc:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <HAL_IncTick+0x1c>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <HAL_IncTick+0x20>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4413      	add	r3, r2
 80014e6:	4a03      	ldr	r2, [pc, #12]	@ (80014f4 <HAL_IncTick+0x1c>)
 80014e8:	6013      	str	r3, [r2, #0]
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	2000031c 	.word	0x2000031c
 80014f8:	20000008 	.word	0x20000008

080014fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001500:	4b03      	ldr	r3, [pc, #12]	@ (8001510 <HAL_GetTick+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	2000031c 	.word	0x2000031c

08001514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800151c:	f7ff ffee 	bl	80014fc <HAL_GetTick>
 8001520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800152c:	d004      	beq.n	8001538 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <HAL_Delay+0x40>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	4413      	add	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001538:	bf00      	nop
 800153a:	f7ff ffdf 	bl	80014fc <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	429a      	cmp	r2, r3
 8001548:	d8f7      	bhi.n	800153a <HAL_Delay+0x26>
  {
  }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000008 	.word	0x20000008

08001558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001580:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158a:	4a04      	ldr	r2, [pc, #16]	@ (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <__NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	@ (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	@ (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	@ 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	@ 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800169c:	f7ff ff8e 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	@ (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff47 	bl	8001558 <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016e0:	f7ff ff5e 	bl	80015a0 <__NVIC_GetPriorityGrouping>
 80016e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	6978      	ldr	r0, [r7, #20]
 80016ec:	f7ff ff90 	bl	8001610 <NVIC_EncodePriority>
 80016f0:	4602      	mov	r2, r0
 80016f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff5f 	bl	80015bc <__NVIC_SetPriority>
}
 80016fe:	bf00      	nop
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ffb2 	bl	8001678 <SysTick_Config>
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800172e:	e15a      	b.n	80019e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2101      	movs	r1, #1
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 814c 	beq.w	80019e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b01      	cmp	r3, #1
 8001752:	d005      	beq.n	8001760 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800175c:	2b02      	cmp	r3, #2
 800175e:	d130      	bne.n	80017c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001796:	2201      	movs	r2, #1
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	f003 0201 	and.w	r2, r3, #1
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d017      	beq.n	80017fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2203      	movs	r2, #3
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d123      	bne.n	8001852 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	08da      	lsrs	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3208      	adds	r2, #8
 8001812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	220f      	movs	r2, #15
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4013      	ands	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	691a      	ldr	r2, [r3, #16]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	08da      	lsrs	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3208      	adds	r2, #8
 800184c:	6939      	ldr	r1, [r7, #16]
 800184e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2203      	movs	r2, #3
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0203 	and.w	r2, r3, #3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 80a6 	beq.w	80019e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001894:	4b5b      	ldr	r3, [pc, #364]	@ (8001a04 <HAL_GPIO_Init+0x2e4>)
 8001896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001898:	4a5a      	ldr	r2, [pc, #360]	@ (8001a04 <HAL_GPIO_Init+0x2e4>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6613      	str	r3, [r2, #96]	@ 0x60
 80018a0:	4b58      	ldr	r3, [pc, #352]	@ (8001a04 <HAL_GPIO_Init+0x2e4>)
 80018a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ac:	4a56      	ldr	r2, [pc, #344]	@ (8001a08 <HAL_GPIO_Init+0x2e8>)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3302      	adds	r3, #2
 80018b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	220f      	movs	r2, #15
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018d6:	d01f      	beq.n	8001918 <HAL_GPIO_Init+0x1f8>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a4c      	ldr	r2, [pc, #304]	@ (8001a0c <HAL_GPIO_Init+0x2ec>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d019      	beq.n	8001914 <HAL_GPIO_Init+0x1f4>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a4b      	ldr	r2, [pc, #300]	@ (8001a10 <HAL_GPIO_Init+0x2f0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d013      	beq.n	8001910 <HAL_GPIO_Init+0x1f0>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a4a      	ldr	r2, [pc, #296]	@ (8001a14 <HAL_GPIO_Init+0x2f4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d00d      	beq.n	800190c <HAL_GPIO_Init+0x1ec>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a49      	ldr	r2, [pc, #292]	@ (8001a18 <HAL_GPIO_Init+0x2f8>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d007      	beq.n	8001908 <HAL_GPIO_Init+0x1e8>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a48      	ldr	r2, [pc, #288]	@ (8001a1c <HAL_GPIO_Init+0x2fc>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d101      	bne.n	8001904 <HAL_GPIO_Init+0x1e4>
 8001900:	2305      	movs	r3, #5
 8001902:	e00a      	b.n	800191a <HAL_GPIO_Init+0x1fa>
 8001904:	2306      	movs	r3, #6
 8001906:	e008      	b.n	800191a <HAL_GPIO_Init+0x1fa>
 8001908:	2304      	movs	r3, #4
 800190a:	e006      	b.n	800191a <HAL_GPIO_Init+0x1fa>
 800190c:	2303      	movs	r3, #3
 800190e:	e004      	b.n	800191a <HAL_GPIO_Init+0x1fa>
 8001910:	2302      	movs	r3, #2
 8001912:	e002      	b.n	800191a <HAL_GPIO_Init+0x1fa>
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <HAL_GPIO_Init+0x1fa>
 8001918:	2300      	movs	r3, #0
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	f002 0203 	and.w	r2, r2, #3
 8001920:	0092      	lsls	r2, r2, #2
 8001922:	4093      	lsls	r3, r2
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800192a:	4937      	ldr	r1, [pc, #220]	@ (8001a08 <HAL_GPIO_Init+0x2e8>)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001938:	4b39      	ldr	r3, [pc, #228]	@ (8001a20 <HAL_GPIO_Init+0x300>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800195c:	4a30      	ldr	r2, [pc, #192]	@ (8001a20 <HAL_GPIO_Init+0x300>)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001962:	4b2f      	ldr	r3, [pc, #188]	@ (8001a20 <HAL_GPIO_Init+0x300>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43db      	mvns	r3, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001986:	4a26      	ldr	r2, [pc, #152]	@ (8001a20 <HAL_GPIO_Init+0x300>)
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800198c:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <HAL_GPIO_Init+0x300>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43db      	mvns	r3, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a20 <HAL_GPIO_Init+0x300>)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <HAL_GPIO_Init+0x300>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019da:	4a11      	ldr	r2, [pc, #68]	@ (8001a20 <HAL_GPIO_Init+0x300>)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	3301      	adds	r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	fa22 f303 	lsr.w	r3, r2, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f47f ae9d 	bne.w	8001730 <HAL_GPIO_Init+0x10>
  }
}
 80019f6:	bf00      	nop
 80019f8:	bf00      	nop
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40010000 	.word	0x40010000
 8001a0c:	48000400 	.word	0x48000400
 8001a10:	48000800 	.word	0x48000800
 8001a14:	48000c00 	.word	0x48000c00
 8001a18:	48001000 	.word	0x48001000
 8001a1c:	48001400 	.word	0x48001400
 8001a20:	40010400 	.word	0x40010400

08001a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
 8001a30:	4613      	mov	r3, r2
 8001a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a34:	787b      	ldrb	r3, [r7, #1]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a3a:	887a      	ldrh	r2, [r7, #2]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a40:	e002      	b.n	8001a48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a42:	887a      	ldrh	r2, [r7, #2]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	041a      	lsls	r2, r3, #16
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	43d9      	mvns	r1, r3
 8001a72:	887b      	ldrh	r3, [r7, #2]
 8001a74:	400b      	ands	r3, r1
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	619a      	str	r2, [r3, #24]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d141      	bne.n	8001b1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a96:	4b4b      	ldr	r3, [pc, #300]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aa2:	d131      	bne.n	8001b08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001aa4:	4b47      	ldr	r3, [pc, #284]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001aaa:	4a46      	ldr	r2, [pc, #280]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ab0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab4:	4b43      	ldr	r3, [pc, #268]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001abc:	4a41      	ldr	r2, [pc, #260]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001abe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ac2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ac4:	4b40      	ldr	r3, [pc, #256]	@ (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2232      	movs	r2, #50	@ 0x32
 8001aca:	fb02 f303 	mul.w	r3, r2, r3
 8001ace:	4a3f      	ldr	r2, [pc, #252]	@ (8001bcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad4:	0c9b      	lsrs	r3, r3, #18
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ada:	e002      	b.n	8001ae2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ae2:	4b38      	ldr	r3, [pc, #224]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aee:	d102      	bne.n	8001af6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f2      	bne.n	8001adc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001af6:	4b33      	ldr	r3, [pc, #204]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b02:	d158      	bne.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e057      	b.n	8001bb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b08:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b18:	e04d      	b.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b20:	d141      	bne.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b22:	4b28      	ldr	r3, [pc, #160]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b2e:	d131      	bne.n	8001b94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b30:	4b24      	ldr	r3, [pc, #144]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b36:	4a23      	ldr	r2, [pc, #140]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b40:	4b20      	ldr	r3, [pc, #128]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b48:	4a1e      	ldr	r2, [pc, #120]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b50:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2232      	movs	r2, #50	@ 0x32
 8001b56:	fb02 f303 	mul.w	r3, r2, r3
 8001b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b60:	0c9b      	lsrs	r3, r3, #18
 8001b62:	3301      	adds	r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b66:	e002      	b.n	8001b6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b7a:	d102      	bne.n	8001b82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f2      	bne.n	8001b68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b8e:	d112      	bne.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e011      	b.n	8001bb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b94:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ba4:	e007      	b.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ba6:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bae:	4a05      	ldr	r2, [pc, #20]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bb4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	40007000 	.word	0x40007000
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	431bde83 	.word	0x431bde83

08001bd0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4a04      	ldr	r2, [pc, #16]	@ (8001bec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001bda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bde:	6093      	str	r3, [r2, #8]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40007000 	.word	0x40007000

08001bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e2fe      	b.n	8002200 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d075      	beq.n	8001cfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c0e:	4b97      	ldr	r3, [pc, #604]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c18:	4b94      	ldr	r3, [pc, #592]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2b0c      	cmp	r3, #12
 8001c26:	d102      	bne.n	8001c2e <HAL_RCC_OscConfig+0x3e>
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d002      	beq.n	8001c34 <HAL_RCC_OscConfig+0x44>
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d10b      	bne.n	8001c4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	4b8d      	ldr	r3, [pc, #564]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d05b      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x108>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d157      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e2d9      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c54:	d106      	bne.n	8001c64 <HAL_RCC_OscConfig+0x74>
 8001c56:	4b85      	ldr	r3, [pc, #532]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a84      	ldr	r2, [pc, #528]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e01d      	b.n	8001ca0 <HAL_RCC_OscConfig+0xb0>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x98>
 8001c6e:	4b7f      	ldr	r3, [pc, #508]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a7e      	ldr	r2, [pc, #504]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b7c      	ldr	r3, [pc, #496]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a7b      	ldr	r2, [pc, #492]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_OscConfig+0xb0>
 8001c88:	4b78      	ldr	r3, [pc, #480]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a77      	ldr	r2, [pc, #476]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b75      	ldr	r3, [pc, #468]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a74      	ldr	r2, [pc, #464]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d013      	beq.n	8001cd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fc28 	bl	80014fc <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fc24 	bl	80014fc <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	@ 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e29e      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xc0>
 8001cce:	e014      	b.n	8001cfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fc14 	bl	80014fc <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7ff fc10 	bl	80014fc <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	@ 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e28a      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cea:	4b60      	ldr	r3, [pc, #384]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0xe8>
 8001cf6:	e000      	b.n	8001cfa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d075      	beq.n	8001df2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d06:	4b59      	ldr	r3, [pc, #356]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d10:	4b56      	ldr	r3, [pc, #344]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	2b0c      	cmp	r3, #12
 8001d1e:	d102      	bne.n	8001d26 <HAL_RCC_OscConfig+0x136>
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d002      	beq.n	8001d2c <HAL_RCC_OscConfig+0x13c>
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d11f      	bne.n	8001d6c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d2c:	4b4f      	ldr	r3, [pc, #316]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_OscConfig+0x154>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e25d      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d44:	4b49      	ldr	r3, [pc, #292]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	061b      	lsls	r3, r3, #24
 8001d52:	4946      	ldr	r1, [pc, #280]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d58:	4b45      	ldr	r3, [pc, #276]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fb81 	bl	8001464 <HAL_InitTick>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d043      	beq.n	8001df0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e249      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d023      	beq.n	8001dbc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d74:	4b3d      	ldr	r3, [pc, #244]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a3c      	ldr	r2, [pc, #240]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d80:	f7ff fbbc 	bl	80014fc <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d88:	f7ff fbb8 	bl	80014fc <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e232      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d9a:	4b34      	ldr	r3, [pc, #208]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da6:	4b31      	ldr	r3, [pc, #196]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	061b      	lsls	r3, r3, #24
 8001db4:	492d      	ldr	r1, [pc, #180]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
 8001dba:	e01a      	b.n	8001df2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001dc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fb98 	bl	80014fc <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd0:	f7ff fb94 	bl	80014fc <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e20e      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de2:	4b22      	ldr	r3, [pc, #136]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x1e0>
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d041      	beq.n	8001e82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d01c      	beq.n	8001e40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e06:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e0c:	4a17      	ldr	r2, [pc, #92]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e16:	f7ff fb71 	bl	80014fc <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1e:	f7ff fb6d 	bl	80014fc <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e1e7      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e30:	4b0e      	ldr	r3, [pc, #56]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0ef      	beq.n	8001e1e <HAL_RCC_OscConfig+0x22e>
 8001e3e:	e020      	b.n	8001e82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e40:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e46:	4a09      	ldr	r2, [pc, #36]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7ff fb54 	bl	80014fc <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e56:	e00d      	b.n	8001e74 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e58:	f7ff fb50 	bl	80014fc <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d906      	bls.n	8001e74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e1ca      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e74:	4b8c      	ldr	r3, [pc, #560]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1ea      	bne.n	8001e58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 80a6 	beq.w	8001fdc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e90:	2300      	movs	r3, #0
 8001e92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e94:	4b84      	ldr	r3, [pc, #528]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x2b4>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCC_OscConfig+0x2b6>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eae:	4a7e      	ldr	r2, [pc, #504]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eb6:	4b7c      	ldr	r3, [pc, #496]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ec6:	4b79      	ldr	r3, [pc, #484]	@ (80020ac <HAL_RCC_OscConfig+0x4bc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d118      	bne.n	8001f04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ed2:	4b76      	ldr	r3, [pc, #472]	@ (80020ac <HAL_RCC_OscConfig+0x4bc>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a75      	ldr	r2, [pc, #468]	@ (80020ac <HAL_RCC_OscConfig+0x4bc>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ede:	f7ff fb0d 	bl	80014fc <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee6:	f7ff fb09 	bl	80014fc <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e183      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef8:	4b6c      	ldr	r3, [pc, #432]	@ (80020ac <HAL_RCC_OscConfig+0x4bc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d108      	bne.n	8001f1e <HAL_RCC_OscConfig+0x32e>
 8001f0c:	4b66      	ldr	r3, [pc, #408]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f12:	4a65      	ldr	r2, [pc, #404]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f1c:	e024      	b.n	8001f68 <HAL_RCC_OscConfig+0x378>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b05      	cmp	r3, #5
 8001f24:	d110      	bne.n	8001f48 <HAL_RCC_OscConfig+0x358>
 8001f26:	4b60      	ldr	r3, [pc, #384]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f2c:	4a5e      	ldr	r2, [pc, #376]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f36:	4b5c      	ldr	r3, [pc, #368]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f3c:	4a5a      	ldr	r2, [pc, #360]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f46:	e00f      	b.n	8001f68 <HAL_RCC_OscConfig+0x378>
 8001f48:	4b57      	ldr	r3, [pc, #348]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4e:	4a56      	ldr	r2, [pc, #344]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f58:	4b53      	ldr	r3, [pc, #332]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f5e:	4a52      	ldr	r2, [pc, #328]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f60:	f023 0304 	bic.w	r3, r3, #4
 8001f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d016      	beq.n	8001f9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f70:	f7ff fac4 	bl	80014fc <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f78:	f7ff fac0 	bl	80014fc <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e138      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8e:	4b46      	ldr	r3, [pc, #280]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0ed      	beq.n	8001f78 <HAL_RCC_OscConfig+0x388>
 8001f9c:	e015      	b.n	8001fca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9e:	f7ff faad 	bl	80014fc <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f7ff faa9 	bl	80014fc <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e121      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fbc:	4b3a      	ldr	r3, [pc, #232]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ed      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fca:	7ffb      	ldrb	r3, [r7, #31]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d105      	bne.n	8001fdc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd0:	4b35      	ldr	r3, [pc, #212]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd4:	4a34      	ldr	r2, [pc, #208]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001fd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fda:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d03c      	beq.n	8002062 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d01c      	beq.n	800202a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ff6:	4a2c      	ldr	r2, [pc, #176]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002000:	f7ff fa7c 	bl	80014fc <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002008:	f7ff fa78 	bl	80014fc <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e0f2      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800201a:	4b23      	ldr	r3, [pc, #140]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 800201c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0ef      	beq.n	8002008 <HAL_RCC_OscConfig+0x418>
 8002028:	e01b      	b.n	8002062 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800202a:	4b1f      	ldr	r3, [pc, #124]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 800202c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002030:	4a1d      	ldr	r2, [pc, #116]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8002032:	f023 0301 	bic.w	r3, r3, #1
 8002036:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203a:	f7ff fa5f 	bl	80014fc <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002042:	f7ff fa5b 	bl	80014fc <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e0d5      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002054:	4b14      	ldr	r3, [pc, #80]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8002056:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1ef      	bne.n	8002042 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 80c9 	beq.w	80021fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800206c:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b0c      	cmp	r3, #12
 8002076:	f000 8083 	beq.w	8002180 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d15e      	bne.n	8002140 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002082:	4b09      	ldr	r3, [pc, #36]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a08      	ldr	r2, [pc, #32]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8002088:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800208c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208e:	f7ff fa35 	bl	80014fc <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002094:	e00c      	b.n	80020b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002096:	f7ff fa31 	bl	80014fc <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d905      	bls.n	80020b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e0ab      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b0:	4b55      	ldr	r3, [pc, #340]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1ec      	bne.n	8002096 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020bc:	4b52      	ldr	r3, [pc, #328]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	4b52      	ldr	r3, [pc, #328]	@ (800220c <HAL_RCC_OscConfig+0x61c>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6a11      	ldr	r1, [r2, #32]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020cc:	3a01      	subs	r2, #1
 80020ce:	0112      	lsls	r2, r2, #4
 80020d0:	4311      	orrs	r1, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80020d6:	0212      	lsls	r2, r2, #8
 80020d8:	4311      	orrs	r1, r2
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80020de:	0852      	lsrs	r2, r2, #1
 80020e0:	3a01      	subs	r2, #1
 80020e2:	0552      	lsls	r2, r2, #21
 80020e4:	4311      	orrs	r1, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020ea:	0852      	lsrs	r2, r2, #1
 80020ec:	3a01      	subs	r2, #1
 80020ee:	0652      	lsls	r2, r2, #25
 80020f0:	4311      	orrs	r1, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80020f6:	06d2      	lsls	r2, r2, #27
 80020f8:	430a      	orrs	r2, r1
 80020fa:	4943      	ldr	r1, [pc, #268]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002100:	4b41      	ldr	r3, [pc, #260]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a40      	ldr	r2, [pc, #256]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 8002106:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800210a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800210c:	4b3e      	ldr	r3, [pc, #248]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4a3d      	ldr	r2, [pc, #244]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 8002112:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002116:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7ff f9f0 	bl	80014fc <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002120:	f7ff f9ec 	bl	80014fc <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e066      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002132:	4b35      	ldr	r3, [pc, #212]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0x530>
 800213e:	e05e      	b.n	80021fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002140:	4b31      	ldr	r3, [pc, #196]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a30      	ldr	r2, [pc, #192]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 8002146:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800214a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7ff f9d6 	bl	80014fc <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002154:	f7ff f9d2 	bl	80014fc <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e04c      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002166:	4b28      	ldr	r3, [pc, #160]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002172:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	4924      	ldr	r1, [pc, #144]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 8002178:	4b25      	ldr	r3, [pc, #148]	@ (8002210 <HAL_RCC_OscConfig+0x620>)
 800217a:	4013      	ands	r3, r2
 800217c:	60cb      	str	r3, [r1, #12]
 800217e:	e03e      	b.n	80021fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e039      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800218c:	4b1e      	ldr	r3, [pc, #120]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 0203 	and.w	r2, r3, #3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	429a      	cmp	r2, r3
 800219e:	d12c      	bne.n	80021fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021aa:	3b01      	subs	r3, #1
 80021ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d123      	bne.n	80021fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d11b      	bne.n	80021fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d113      	bne.n	80021fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	3b01      	subs	r3, #1
 80021e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d109      	bne.n	80021fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f0:	085b      	lsrs	r3, r3, #1
 80021f2:	3b01      	subs	r3, #1
 80021f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021000 	.word	0x40021000
 800220c:	019f800c 	.word	0x019f800c
 8002210:	feeefffc 	.word	0xfeeefffc

08002214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e11e      	b.n	800246a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800222c:	4b91      	ldr	r3, [pc, #580]	@ (8002474 <HAL_RCC_ClockConfig+0x260>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d910      	bls.n	800225c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b8e      	ldr	r3, [pc, #568]	@ (8002474 <HAL_RCC_ClockConfig+0x260>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 020f 	bic.w	r2, r3, #15
 8002242:	498c      	ldr	r1, [pc, #560]	@ (8002474 <HAL_RCC_ClockConfig+0x260>)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b8a      	ldr	r3, [pc, #552]	@ (8002474 <HAL_RCC_ClockConfig+0x260>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e106      	b.n	800246a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d073      	beq.n	8002350 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d129      	bne.n	80022c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002270:	4b81      	ldr	r3, [pc, #516]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0f4      	b.n	800246a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002280:	f000 f99e 	bl	80025c0 <RCC_GetSysClockFreqFromPLLSource>
 8002284:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4a7c      	ldr	r2, [pc, #496]	@ (800247c <HAL_RCC_ClockConfig+0x268>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d93f      	bls.n	800230e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800228e:	4b7a      	ldr	r3, [pc, #488]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d033      	beq.n	800230e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d12f      	bne.n	800230e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022ae:	4b72      	ldr	r3, [pc, #456]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022b6:	4a70      	ldr	r2, [pc, #448]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 80022b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022be:	2380      	movs	r3, #128	@ 0x80
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	e024      	b.n	800230e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d107      	bne.n	80022dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0c6      	b.n	800246a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022dc:	4b66      	ldr	r3, [pc, #408]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0be      	b.n	800246a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80022ec:	f000 f8ce 	bl	800248c <HAL_RCC_GetSysClockFreq>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4a61      	ldr	r2, [pc, #388]	@ (800247c <HAL_RCC_ClockConfig+0x268>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d909      	bls.n	800230e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002302:	4a5d      	ldr	r2, [pc, #372]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 8002304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002308:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800230a:	2380      	movs	r3, #128	@ 0x80
 800230c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800230e:	4b5a      	ldr	r3, [pc, #360]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f023 0203 	bic.w	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4957      	ldr	r1, [pc, #348]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 800231c:	4313      	orrs	r3, r2
 800231e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002320:	f7ff f8ec 	bl	80014fc <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	e00a      	b.n	800233e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002328:	f7ff f8e8 	bl	80014fc <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e095      	b.n	800246a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	4b4e      	ldr	r3, [pc, #312]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 020c 	and.w	r2, r3, #12
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	429a      	cmp	r2, r3
 800234e:	d1eb      	bne.n	8002328 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d023      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002368:	4b43      	ldr	r3, [pc, #268]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4a42      	ldr	r2, [pc, #264]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 800236e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002372:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002380:	4b3d      	ldr	r3, [pc, #244]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002388:	4a3b      	ldr	r2, [pc, #236]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 800238a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800238e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002390:	4b39      	ldr	r3, [pc, #228]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4936      	ldr	r1, [pc, #216]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2b80      	cmp	r3, #128	@ 0x80
 80023a8:	d105      	bne.n	80023b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023aa:	4b33      	ldr	r3, [pc, #204]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	4a32      	ldr	r2, [pc, #200]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 80023b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002474 <HAL_RCC_ClockConfig+0x260>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d21d      	bcs.n	8002400 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002474 <HAL_RCC_ClockConfig+0x260>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 020f 	bic.w	r2, r3, #15
 80023cc:	4929      	ldr	r1, [pc, #164]	@ (8002474 <HAL_RCC_ClockConfig+0x260>)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023d4:	f7ff f892 	bl	80014fc <HAL_GetTick>
 80023d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	e00a      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023dc:	f7ff f88e 	bl	80014fc <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e03b      	b.n	800246a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b20      	ldr	r3, [pc, #128]	@ (8002474 <HAL_RCC_ClockConfig+0x260>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d1ed      	bne.n	80023dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800240c:	4b1a      	ldr	r3, [pc, #104]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4917      	ldr	r1, [pc, #92]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 800241a:	4313      	orrs	r3, r2
 800241c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800242a:	4b13      	ldr	r3, [pc, #76]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	490f      	ldr	r1, [pc, #60]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800243e:	f000 f825 	bl	800248c <HAL_RCC_GetSysClockFreq>
 8002442:	4602      	mov	r2, r0
 8002444:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	490c      	ldr	r1, [pc, #48]	@ (8002480 <HAL_RCC_ClockConfig+0x26c>)
 8002450:	5ccb      	ldrb	r3, [r1, r3]
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	fa22 f303 	lsr.w	r3, r2, r3
 800245a:	4a0a      	ldr	r2, [pc, #40]	@ (8002484 <HAL_RCC_ClockConfig+0x270>)
 800245c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800245e:	4b0a      	ldr	r3, [pc, #40]	@ (8002488 <HAL_RCC_ClockConfig+0x274>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fffe 	bl	8001464 <HAL_InitTick>
 8002468:	4603      	mov	r3, r0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40022000 	.word	0x40022000
 8002478:	40021000 	.word	0x40021000
 800247c:	04c4b400 	.word	0x04c4b400
 8002480:	08004e10 	.word	0x08004e10
 8002484:	20000000 	.word	0x20000000
 8002488:	20000004 	.word	0x20000004

0800248c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002492:	4b2c      	ldr	r3, [pc, #176]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b04      	cmp	r3, #4
 800249c:	d102      	bne.n	80024a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800249e:	4b2a      	ldr	r3, [pc, #168]	@ (8002548 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	e047      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024a4:	4b27      	ldr	r3, [pc, #156]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d102      	bne.n	80024b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024b0:	4b26      	ldr	r3, [pc, #152]	@ (800254c <HAL_RCC_GetSysClockFreq+0xc0>)
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	e03e      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80024b6:	4b23      	ldr	r3, [pc, #140]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	d136      	bne.n	8002530 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024c2:	4b20      	ldr	r3, [pc, #128]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	3301      	adds	r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d10c      	bne.n	80024fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024e0:	4a1a      	ldr	r2, [pc, #104]	@ (800254c <HAL_RCC_GetSysClockFreq+0xc0>)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e8:	4a16      	ldr	r2, [pc, #88]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ea:	68d2      	ldr	r2, [r2, #12]
 80024ec:	0a12      	lsrs	r2, r2, #8
 80024ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
 80024f6:	617b      	str	r3, [r7, #20]
      break;
 80024f8:	e00c      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024fa:	4a13      	ldr	r2, [pc, #76]	@ (8002548 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002502:	4a10      	ldr	r2, [pc, #64]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002504:	68d2      	ldr	r2, [r2, #12]
 8002506:	0a12      	lsrs	r2, r2, #8
 8002508:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]
      break;
 8002512:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002514:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0e5b      	lsrs	r3, r3, #25
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	3301      	adds	r3, #1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	fbb2 f3f3 	udiv	r3, r2, r3
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	e001      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002534:	693b      	ldr	r3, [r7, #16]
}
 8002536:	4618      	mov	r0, r3
 8002538:	371c      	adds	r7, #28
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000
 8002548:	00f42400 	.word	0x00f42400
 800254c:	007a1200 	.word	0x007a1200

08002550 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002554:	4b03      	ldr	r3, [pc, #12]	@ (8002564 <HAL_RCC_GetHCLKFreq+0x14>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000000 	.word	0x20000000

08002568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800256c:	f7ff fff0 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 8002570:	4602      	mov	r2, r0
 8002572:	4b06      	ldr	r3, [pc, #24]	@ (800258c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	4904      	ldr	r1, [pc, #16]	@ (8002590 <HAL_RCC_GetPCLK1Freq+0x28>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002588:	4618      	mov	r0, r3
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40021000 	.word	0x40021000
 8002590:	08004e20 	.word	0x08004e20

08002594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002598:	f7ff ffda 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 800259c:	4602      	mov	r2, r0
 800259e:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	0adb      	lsrs	r3, r3, #11
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	4904      	ldr	r1, [pc, #16]	@ (80025bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80025aa:	5ccb      	ldrb	r3, [r1, r3]
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000
 80025bc:	08004e20 	.word	0x08004e20

080025c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	3301      	adds	r3, #1
 80025dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d10c      	bne.n	80025fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025e4:	4a17      	ldr	r2, [pc, #92]	@ (8002644 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ec:	4a14      	ldr	r2, [pc, #80]	@ (8002640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025ee:	68d2      	ldr	r2, [r2, #12]
 80025f0:	0a12      	lsrs	r2, r2, #8
 80025f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
 80025fa:	617b      	str	r3, [r7, #20]
    break;
 80025fc:	e00c      	b.n	8002618 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025fe:	4a12      	ldr	r2, [pc, #72]	@ (8002648 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	fbb2 f3f3 	udiv	r3, r2, r3
 8002606:	4a0e      	ldr	r2, [pc, #56]	@ (8002640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002608:	68d2      	ldr	r2, [r2, #12]
 800260a:	0a12      	lsrs	r2, r2, #8
 800260c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002610:	fb02 f303 	mul.w	r3, r2, r3
 8002614:	617b      	str	r3, [r7, #20]
    break;
 8002616:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002618:	4b09      	ldr	r3, [pc, #36]	@ (8002640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	0e5b      	lsrs	r3, r3, #25
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	3301      	adds	r3, #1
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002632:	687b      	ldr	r3, [r7, #4]
}
 8002634:	4618      	mov	r0, r3
 8002636:	371c      	adds	r7, #28
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	40021000 	.word	0x40021000
 8002644:	007a1200 	.word	0x007a1200
 8002648:	00f42400 	.word	0x00f42400

0800264c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002654:	2300      	movs	r3, #0
 8002656:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002658:	2300      	movs	r3, #0
 800265a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8098 	beq.w	800279a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266a:	2300      	movs	r3, #0
 800266c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266e:	4b43      	ldr	r3, [pc, #268]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10d      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267a:	4b40      	ldr	r3, [pc, #256]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800267c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267e:	4a3f      	ldr	r2, [pc, #252]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002684:	6593      	str	r3, [r2, #88]	@ 0x58
 8002686:	4b3d      	ldr	r3, [pc, #244]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002692:	2301      	movs	r3, #1
 8002694:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002696:	4b3a      	ldr	r3, [pc, #232]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a39      	ldr	r2, [pc, #228]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800269c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026a2:	f7fe ff2b 	bl	80014fc <HAL_GetTick>
 80026a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026a8:	e009      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026aa:	f7fe ff27 	bl	80014fc <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d902      	bls.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	74fb      	strb	r3, [r7, #19]
        break;
 80026bc:	e005      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026be:	4b30      	ldr	r3, [pc, #192]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0ef      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80026ca:	7cfb      	ldrb	r3, [r7, #19]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d159      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026d0:	4b2a      	ldr	r3, [pc, #168]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d01e      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d019      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026ec:	4b23      	ldr	r3, [pc, #140]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026f8:	4b20      	ldr	r3, [pc, #128]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fe:	4a1f      	ldr	r2, [pc, #124]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002708:	4b1c      	ldr	r3, [pc, #112]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270e:	4a1b      	ldr	r2, [pc, #108]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002710:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002718:	4a18      	ldr	r2, [pc, #96]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d016      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272a:	f7fe fee7 	bl	80014fc <HAL_GetTick>
 800272e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002730:	e00b      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002732:	f7fe fee3 	bl	80014fc <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002740:	4293      	cmp	r3, r2
 8002742:	d902      	bls.n	800274a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	74fb      	strb	r3, [r7, #19]
            break;
 8002748:	e006      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274a:	4b0c      	ldr	r3, [pc, #48]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0ec      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10b      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800275e:	4b07      	ldr	r3, [pc, #28]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002764:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800276c:	4903      	ldr	r1, [pc, #12]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002774:	e008      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002776:	7cfb      	ldrb	r3, [r7, #19]
 8002778:	74bb      	strb	r3, [r7, #18]
 800277a:	e005      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800277c:	40021000 	.word	0x40021000
 8002780:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002784:	7cfb      	ldrb	r3, [r7, #19]
 8002786:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002788:	7c7b      	ldrb	r3, [r7, #17]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d105      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278e:	4ba7      	ldr	r3, [pc, #668]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002792:	4aa6      	ldr	r2, [pc, #664]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002794:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002798:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027a6:	4ba1      	ldr	r3, [pc, #644]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ac:	f023 0203 	bic.w	r2, r3, #3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	499d      	ldr	r1, [pc, #628]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027c8:	4b98      	ldr	r3, [pc, #608]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ce:	f023 020c 	bic.w	r2, r3, #12
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	4995      	ldr	r1, [pc, #596]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027ea:	4b90      	ldr	r3, [pc, #576]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	498c      	ldr	r1, [pc, #560]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800280c:	4b87      	ldr	r3, [pc, #540]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002812:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	4984      	ldr	r1, [pc, #528]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800282e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002834:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	497b      	ldr	r1, [pc, #492]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002850:	4b76      	ldr	r3, [pc, #472]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002856:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	4973      	ldr	r1, [pc, #460]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002872:	4b6e      	ldr	r3, [pc, #440]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002878:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	496a      	ldr	r1, [pc, #424]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00a      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002894:	4b65      	ldr	r3, [pc, #404]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	4962      	ldr	r1, [pc, #392]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028b6:	4b5d      	ldr	r3, [pc, #372]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c4:	4959      	ldr	r1, [pc, #356]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00a      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028d8:	4b54      	ldr	r3, [pc, #336]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028de:	f023 0203 	bic.w	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e6:	4951      	ldr	r1, [pc, #324]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028fa:	4b4c      	ldr	r3, [pc, #304]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002900:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002908:	4948      	ldr	r1, [pc, #288]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002918:	2b00      	cmp	r3, #0
 800291a:	d015      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800291c:	4b43      	ldr	r3, [pc, #268]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002922:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	4940      	ldr	r1, [pc, #256]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800293a:	d105      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800293c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4a3a      	ldr	r2, [pc, #232]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002942:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002946:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002950:	2b00      	cmp	r3, #0
 8002952:	d015      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002954:	4b35      	ldr	r3, [pc, #212]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002962:	4932      	ldr	r1, [pc, #200]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800296e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002972:	d105      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002974:	4b2d      	ldr	r3, [pc, #180]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4a2c      	ldr	r2, [pc, #176]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800297a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800297e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d015      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800298c:	4b27      	ldr	r3, [pc, #156]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002992:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800299a:	4924      	ldr	r1, [pc, #144]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029aa:	d105      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ac:	4b1f      	ldr	r3, [pc, #124]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d015      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029c4:	4b19      	ldr	r3, [pc, #100]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d2:	4916      	ldr	r1, [pc, #88]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029e2:	d105      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e4:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	4a10      	ldr	r2, [pc, #64]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d019      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029fc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	4908      	ldr	r1, [pc, #32]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a1a:	d109      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a1c:	4b03      	ldr	r3, [pc, #12]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4a02      	ldr	r2, [pc, #8]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a26:	60d3      	str	r3, [r2, #12]
 8002a28:	e002      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d015      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a3c:	4b29      	ldr	r3, [pc, #164]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a42:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4a:	4926      	ldr	r1, [pc, #152]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a5a:	d105      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a5c:	4b21      	ldr	r3, [pc, #132]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4a20      	ldr	r2, [pc, #128]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a66:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d015      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002a74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a82:	4918      	ldr	r1, [pc, #96]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a92:	d105      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a94:	4b13      	ldr	r3, [pc, #76]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4a12      	ldr	r2, [pc, #72]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a9e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d015      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002aac:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ab2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aba:	490a      	ldr	r1, [pc, #40]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002aca:	d105      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002acc:	4b05      	ldr	r3, [pc, #20]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4a04      	ldr	r2, [pc, #16]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ad6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002ad8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000

08002ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e049      	b.n	8002b8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe faa8 	bl	8001064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3304      	adds	r3, #4
 8002b24:	4619      	mov	r1, r3
 8002b26:	4610      	mov	r0, r2
 8002b28:	f000 fd96 	bl	8003658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d001      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e054      	b.n	8002c5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a26      	ldr	r2, [pc, #152]	@ (8002c68 <HAL_TIM_Base_Start_IT+0xd0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d022      	beq.n	8002c18 <HAL_TIM_Base_Start_IT+0x80>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bda:	d01d      	beq.n	8002c18 <HAL_TIM_Base_Start_IT+0x80>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a22      	ldr	r2, [pc, #136]	@ (8002c6c <HAL_TIM_Base_Start_IT+0xd4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d018      	beq.n	8002c18 <HAL_TIM_Base_Start_IT+0x80>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a21      	ldr	r2, [pc, #132]	@ (8002c70 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d013      	beq.n	8002c18 <HAL_TIM_Base_Start_IT+0x80>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c74 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00e      	beq.n	8002c18 <HAL_TIM_Base_Start_IT+0x80>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8002c78 <HAL_TIM_Base_Start_IT+0xe0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d009      	beq.n	8002c18 <HAL_TIM_Base_Start_IT+0x80>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1c      	ldr	r2, [pc, #112]	@ (8002c7c <HAL_TIM_Base_Start_IT+0xe4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d004      	beq.n	8002c18 <HAL_TIM_Base_Start_IT+0x80>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1b      	ldr	r2, [pc, #108]	@ (8002c80 <HAL_TIM_Base_Start_IT+0xe8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d115      	bne.n	8002c44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	4b19      	ldr	r3, [pc, #100]	@ (8002c84 <HAL_TIM_Base_Start_IT+0xec>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d015      	beq.n	8002c56 <HAL_TIM_Base_Start_IT+0xbe>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c30:	d011      	beq.n	8002c56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c42:	e008      	b.n	8002c56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e000      	b.n	8002c58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40012c00 	.word	0x40012c00
 8002c6c:	40000400 	.word	0x40000400
 8002c70:	40000800 	.word	0x40000800
 8002c74:	40000c00 	.word	0x40000c00
 8002c78:	40013400 	.word	0x40013400
 8002c7c:	40014000 	.word	0x40014000
 8002c80:	40015000 	.word	0x40015000
 8002c84:	00010007 	.word	0x00010007

08002c88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e049      	b.n	8002d2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d106      	bne.n	8002cb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f841 	bl	8002d36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	f000 fcc6 	bl	8003658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d109      	bne.n	8002d70 <HAL_TIM_PWM_Start+0x24>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	bf14      	ite	ne
 8002d68:	2301      	movne	r3, #1
 8002d6a:	2300      	moveq	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	e03c      	b.n	8002dea <HAL_TIM_PWM_Start+0x9e>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d109      	bne.n	8002d8a <HAL_TIM_PWM_Start+0x3e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	bf14      	ite	ne
 8002d82:	2301      	movne	r3, #1
 8002d84:	2300      	moveq	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	e02f      	b.n	8002dea <HAL_TIM_PWM_Start+0x9e>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d109      	bne.n	8002da4 <HAL_TIM_PWM_Start+0x58>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	bf14      	ite	ne
 8002d9c:	2301      	movne	r3, #1
 8002d9e:	2300      	moveq	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	e022      	b.n	8002dea <HAL_TIM_PWM_Start+0x9e>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d109      	bne.n	8002dbe <HAL_TIM_PWM_Start+0x72>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	bf14      	ite	ne
 8002db6:	2301      	movne	r3, #1
 8002db8:	2300      	moveq	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	e015      	b.n	8002dea <HAL_TIM_PWM_Start+0x9e>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b10      	cmp	r3, #16
 8002dc2:	d109      	bne.n	8002dd8 <HAL_TIM_PWM_Start+0x8c>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	bf14      	ite	ne
 8002dd0:	2301      	movne	r3, #1
 8002dd2:	2300      	moveq	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	e008      	b.n	8002dea <HAL_TIM_PWM_Start+0x9e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	bf14      	ite	ne
 8002de4:	2301      	movne	r3, #1
 8002de6:	2300      	moveq	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e0a6      	b.n	8002f40 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d104      	bne.n	8002e02 <HAL_TIM_PWM_Start+0xb6>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e00:	e023      	b.n	8002e4a <HAL_TIM_PWM_Start+0xfe>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d104      	bne.n	8002e12 <HAL_TIM_PWM_Start+0xc6>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e10:	e01b      	b.n	8002e4a <HAL_TIM_PWM_Start+0xfe>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d104      	bne.n	8002e22 <HAL_TIM_PWM_Start+0xd6>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e20:	e013      	b.n	8002e4a <HAL_TIM_PWM_Start+0xfe>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b0c      	cmp	r3, #12
 8002e26:	d104      	bne.n	8002e32 <HAL_TIM_PWM_Start+0xe6>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e30:	e00b      	b.n	8002e4a <HAL_TIM_PWM_Start+0xfe>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b10      	cmp	r3, #16
 8002e36:	d104      	bne.n	8002e42 <HAL_TIM_PWM_Start+0xf6>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e40:	e003      	b.n	8002e4a <HAL_TIM_PWM_Start+0xfe>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2202      	movs	r2, #2
 8002e46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	6839      	ldr	r1, [r7, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f001 f87a 	bl	8003f4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a3a      	ldr	r2, [pc, #232]	@ (8002f48 <HAL_TIM_PWM_Start+0x1fc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d018      	beq.n	8002e94 <HAL_TIM_PWM_Start+0x148>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a39      	ldr	r2, [pc, #228]	@ (8002f4c <HAL_TIM_PWM_Start+0x200>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d013      	beq.n	8002e94 <HAL_TIM_PWM_Start+0x148>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a37      	ldr	r2, [pc, #220]	@ (8002f50 <HAL_TIM_PWM_Start+0x204>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00e      	beq.n	8002e94 <HAL_TIM_PWM_Start+0x148>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a36      	ldr	r2, [pc, #216]	@ (8002f54 <HAL_TIM_PWM_Start+0x208>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d009      	beq.n	8002e94 <HAL_TIM_PWM_Start+0x148>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a34      	ldr	r2, [pc, #208]	@ (8002f58 <HAL_TIM_PWM_Start+0x20c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d004      	beq.n	8002e94 <HAL_TIM_PWM_Start+0x148>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a33      	ldr	r2, [pc, #204]	@ (8002f5c <HAL_TIM_PWM_Start+0x210>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d101      	bne.n	8002e98 <HAL_TIM_PWM_Start+0x14c>
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <HAL_TIM_PWM_Start+0x14e>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a25      	ldr	r2, [pc, #148]	@ (8002f48 <HAL_TIM_PWM_Start+0x1fc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d022      	beq.n	8002efe <HAL_TIM_PWM_Start+0x1b2>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ec0:	d01d      	beq.n	8002efe <HAL_TIM_PWM_Start+0x1b2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a26      	ldr	r2, [pc, #152]	@ (8002f60 <HAL_TIM_PWM_Start+0x214>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d018      	beq.n	8002efe <HAL_TIM_PWM_Start+0x1b2>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a24      	ldr	r2, [pc, #144]	@ (8002f64 <HAL_TIM_PWM_Start+0x218>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d013      	beq.n	8002efe <HAL_TIM_PWM_Start+0x1b2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a23      	ldr	r2, [pc, #140]	@ (8002f68 <HAL_TIM_PWM_Start+0x21c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00e      	beq.n	8002efe <HAL_TIM_PWM_Start+0x1b2>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a19      	ldr	r2, [pc, #100]	@ (8002f4c <HAL_TIM_PWM_Start+0x200>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d009      	beq.n	8002efe <HAL_TIM_PWM_Start+0x1b2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a18      	ldr	r2, [pc, #96]	@ (8002f50 <HAL_TIM_PWM_Start+0x204>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d004      	beq.n	8002efe <HAL_TIM_PWM_Start+0x1b2>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a18      	ldr	r2, [pc, #96]	@ (8002f5c <HAL_TIM_PWM_Start+0x210>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d115      	bne.n	8002f2a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	4b19      	ldr	r3, [pc, #100]	@ (8002f6c <HAL_TIM_PWM_Start+0x220>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b06      	cmp	r3, #6
 8002f0e:	d015      	beq.n	8002f3c <HAL_TIM_PWM_Start+0x1f0>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f16:	d011      	beq.n	8002f3c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f28:	e008      	b.n	8002f3c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0201 	orr.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	e000      	b.n	8002f3e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40012c00 	.word	0x40012c00
 8002f4c:	40013400 	.word	0x40013400
 8002f50:	40014000 	.word	0x40014000
 8002f54:	40014400 	.word	0x40014400
 8002f58:	40014800 	.word	0x40014800
 8002f5c:	40015000 	.word	0x40015000
 8002f60:	40000400 	.word	0x40000400
 8002f64:	40000800 	.word	0x40000800
 8002f68:	40000c00 	.word	0x40000c00
 8002f6c:	00010007 	.word	0x00010007

08002f70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e097      	b.n	80030b4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d106      	bne.n	8002f9e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7fd ff8b 	bl	8000eb4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8002fb4:	f023 0307 	bic.w	r3, r3, #7
 8002fb8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f000 fb47 	bl	8003658 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ff2:	f023 0303 	bic.w	r3, r3, #3
 8002ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	021b      	lsls	r3, r3, #8
 8003002:	4313      	orrs	r3, r2
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003010:	f023 030c 	bic.w	r3, r3, #12
 8003014:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800301c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003020:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	021b      	lsls	r3, r3, #8
 800302c:	4313      	orrs	r3, r2
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	011a      	lsls	r2, r3, #4
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	031b      	lsls	r3, r3, #12
 8003040:	4313      	orrs	r3, r2
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800304e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003056:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	4313      	orrs	r3, r2
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d110      	bne.n	800310e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d102      	bne.n	80030f8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80030f2:	7b7b      	ldrb	r3, [r7, #13]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d001      	beq.n	80030fc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e089      	b.n	8003210 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800310c:	e031      	b.n	8003172 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b04      	cmp	r3, #4
 8003112:	d110      	bne.n	8003136 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003114:	7bbb      	ldrb	r3, [r7, #14]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d102      	bne.n	8003120 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800311a:	7b3b      	ldrb	r3, [r7, #12]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d001      	beq.n	8003124 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e075      	b.n	8003210 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003134:	e01d      	b.n	8003172 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d108      	bne.n	800314e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800313c:	7bbb      	ldrb	r3, [r7, #14]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d105      	bne.n	800314e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003142:	7b7b      	ldrb	r3, [r7, #13]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d102      	bne.n	800314e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003148:	7b3b      	ldrb	r3, [r7, #12]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d001      	beq.n	8003152 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e05e      	b.n	8003210 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2202      	movs	r2, #2
 8003156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2202      	movs	r2, #2
 8003166:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2b04      	cmp	r3, #4
 800317c:	d010      	beq.n	80031a0 <HAL_TIM_Encoder_Start_IT+0xe4>
 800317e:	e01f      	b.n	80031c0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2201      	movs	r2, #1
 8003186:	2100      	movs	r1, #0
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fedf 	bl	8003f4c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0202 	orr.w	r2, r2, #2
 800319c:	60da      	str	r2, [r3, #12]
      break;
 800319e:	e02e      	b.n	80031fe <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2201      	movs	r2, #1
 80031a6:	2104      	movs	r1, #4
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fecf 	bl	8003f4c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 0204 	orr.w	r2, r2, #4
 80031bc:	60da      	str	r2, [r3, #12]
      break;
 80031be:	e01e      	b.n	80031fe <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2201      	movs	r2, #1
 80031c6:	2100      	movs	r1, #0
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 febf 	bl	8003f4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2201      	movs	r2, #1
 80031d4:	2104      	movs	r1, #4
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 feb8 	bl	8003f4c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0202 	orr.w	r2, r2, #2
 80031ea:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0204 	orr.w	r2, r2, #4
 80031fa:	60da      	str	r2, [r3, #12]
      break;
 80031fc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0201 	orr.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003232:	2302      	movs	r3, #2
 8003234:	e0ff      	b.n	8003436 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b14      	cmp	r3, #20
 8003242:	f200 80f0 	bhi.w	8003426 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003246:	a201      	add	r2, pc, #4	@ (adr r2, 800324c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324c:	080032a1 	.word	0x080032a1
 8003250:	08003427 	.word	0x08003427
 8003254:	08003427 	.word	0x08003427
 8003258:	08003427 	.word	0x08003427
 800325c:	080032e1 	.word	0x080032e1
 8003260:	08003427 	.word	0x08003427
 8003264:	08003427 	.word	0x08003427
 8003268:	08003427 	.word	0x08003427
 800326c:	08003323 	.word	0x08003323
 8003270:	08003427 	.word	0x08003427
 8003274:	08003427 	.word	0x08003427
 8003278:	08003427 	.word	0x08003427
 800327c:	08003363 	.word	0x08003363
 8003280:	08003427 	.word	0x08003427
 8003284:	08003427 	.word	0x08003427
 8003288:	08003427 	.word	0x08003427
 800328c:	080033a5 	.word	0x080033a5
 8003290:	08003427 	.word	0x08003427
 8003294:	08003427 	.word	0x08003427
 8003298:	08003427 	.word	0x08003427
 800329c:	080033e5 	.word	0x080033e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fa8a 	bl	80037c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0208 	orr.w	r2, r2, #8
 80032ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0204 	bic.w	r2, r2, #4
 80032ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6999      	ldr	r1, [r3, #24]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	619a      	str	r2, [r3, #24]
      break;
 80032de:	e0a5      	b.n	800342c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fb04 	bl	80038f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800330a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6999      	ldr	r1, [r3, #24]
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	021a      	lsls	r2, r3, #8
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	619a      	str	r2, [r3, #24]
      break;
 8003320:	e084      	b.n	800342c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68b9      	ldr	r1, [r7, #8]
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fb77 	bl	8003a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0208 	orr.w	r2, r2, #8
 800333c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69da      	ldr	r2, [r3, #28]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0204 	bic.w	r2, r2, #4
 800334c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69d9      	ldr	r1, [r3, #28]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	61da      	str	r2, [r3, #28]
      break;
 8003360:	e064      	b.n	800342c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fbe9 	bl	8003b40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800337c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800338c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69d9      	ldr	r1, [r3, #28]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	021a      	lsls	r2, r3, #8
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	61da      	str	r2, [r3, #28]
      break;
 80033a2:	e043      	b.n	800342c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fc5c 	bl	8003c68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0208 	orr.w	r2, r2, #8
 80033be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0204 	bic.w	r2, r2, #4
 80033ce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80033e2:	e023      	b.n	800342c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fca6 	bl	8003d3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800340e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	021a      	lsls	r2, r3, #8
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003424:	e002      	b.n	800342c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	75fb      	strb	r3, [r7, #23]
      break;
 800342a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003434:	7dfb      	ldrb	r3, [r7, #23]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop

08003440 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_TIM_ConfigClockSource+0x1c>
 8003458:	2302      	movs	r3, #2
 800345a:	e0ee      	b.n	800363a <HAL_TIM_ConfigClockSource+0x1fa>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800347a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800347e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003486:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a6b      	ldr	r2, [pc, #428]	@ (8003644 <HAL_TIM_ConfigClockSource+0x204>)
 8003496:	4293      	cmp	r3, r2
 8003498:	f000 80b9 	beq.w	800360e <HAL_TIM_ConfigClockSource+0x1ce>
 800349c:	4a69      	ldr	r2, [pc, #420]	@ (8003644 <HAL_TIM_ConfigClockSource+0x204>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	f200 80be 	bhi.w	8003620 <HAL_TIM_ConfigClockSource+0x1e0>
 80034a4:	4a68      	ldr	r2, [pc, #416]	@ (8003648 <HAL_TIM_ConfigClockSource+0x208>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	f000 80b1 	beq.w	800360e <HAL_TIM_ConfigClockSource+0x1ce>
 80034ac:	4a66      	ldr	r2, [pc, #408]	@ (8003648 <HAL_TIM_ConfigClockSource+0x208>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	f200 80b6 	bhi.w	8003620 <HAL_TIM_ConfigClockSource+0x1e0>
 80034b4:	4a65      	ldr	r2, [pc, #404]	@ (800364c <HAL_TIM_ConfigClockSource+0x20c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	f000 80a9 	beq.w	800360e <HAL_TIM_ConfigClockSource+0x1ce>
 80034bc:	4a63      	ldr	r2, [pc, #396]	@ (800364c <HAL_TIM_ConfigClockSource+0x20c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	f200 80ae 	bhi.w	8003620 <HAL_TIM_ConfigClockSource+0x1e0>
 80034c4:	4a62      	ldr	r2, [pc, #392]	@ (8003650 <HAL_TIM_ConfigClockSource+0x210>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	f000 80a1 	beq.w	800360e <HAL_TIM_ConfigClockSource+0x1ce>
 80034cc:	4a60      	ldr	r2, [pc, #384]	@ (8003650 <HAL_TIM_ConfigClockSource+0x210>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	f200 80a6 	bhi.w	8003620 <HAL_TIM_ConfigClockSource+0x1e0>
 80034d4:	4a5f      	ldr	r2, [pc, #380]	@ (8003654 <HAL_TIM_ConfigClockSource+0x214>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	f000 8099 	beq.w	800360e <HAL_TIM_ConfigClockSource+0x1ce>
 80034dc:	4a5d      	ldr	r2, [pc, #372]	@ (8003654 <HAL_TIM_ConfigClockSource+0x214>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	f200 809e 	bhi.w	8003620 <HAL_TIM_ConfigClockSource+0x1e0>
 80034e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80034e8:	f000 8091 	beq.w	800360e <HAL_TIM_ConfigClockSource+0x1ce>
 80034ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80034f0:	f200 8096 	bhi.w	8003620 <HAL_TIM_ConfigClockSource+0x1e0>
 80034f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034f8:	f000 8089 	beq.w	800360e <HAL_TIM_ConfigClockSource+0x1ce>
 80034fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003500:	f200 808e 	bhi.w	8003620 <HAL_TIM_ConfigClockSource+0x1e0>
 8003504:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003508:	d03e      	beq.n	8003588 <HAL_TIM_ConfigClockSource+0x148>
 800350a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800350e:	f200 8087 	bhi.w	8003620 <HAL_TIM_ConfigClockSource+0x1e0>
 8003512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003516:	f000 8086 	beq.w	8003626 <HAL_TIM_ConfigClockSource+0x1e6>
 800351a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800351e:	d87f      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x1e0>
 8003520:	2b70      	cmp	r3, #112	@ 0x70
 8003522:	d01a      	beq.n	800355a <HAL_TIM_ConfigClockSource+0x11a>
 8003524:	2b70      	cmp	r3, #112	@ 0x70
 8003526:	d87b      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x1e0>
 8003528:	2b60      	cmp	r3, #96	@ 0x60
 800352a:	d050      	beq.n	80035ce <HAL_TIM_ConfigClockSource+0x18e>
 800352c:	2b60      	cmp	r3, #96	@ 0x60
 800352e:	d877      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x1e0>
 8003530:	2b50      	cmp	r3, #80	@ 0x50
 8003532:	d03c      	beq.n	80035ae <HAL_TIM_ConfigClockSource+0x16e>
 8003534:	2b50      	cmp	r3, #80	@ 0x50
 8003536:	d873      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x1e0>
 8003538:	2b40      	cmp	r3, #64	@ 0x40
 800353a:	d058      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0x1ae>
 800353c:	2b40      	cmp	r3, #64	@ 0x40
 800353e:	d86f      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x1e0>
 8003540:	2b30      	cmp	r3, #48	@ 0x30
 8003542:	d064      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x1ce>
 8003544:	2b30      	cmp	r3, #48	@ 0x30
 8003546:	d86b      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x1e0>
 8003548:	2b20      	cmp	r3, #32
 800354a:	d060      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x1ce>
 800354c:	2b20      	cmp	r3, #32
 800354e:	d867      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x1e0>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d05c      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x1ce>
 8003554:	2b10      	cmp	r3, #16
 8003556:	d05a      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x1ce>
 8003558:	e062      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800356a:	f000 fccf 	bl	8003f0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800357c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	609a      	str	r2, [r3, #8]
      break;
 8003586:	e04f      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003598:	f000 fcb8 	bl	8003f0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035aa:	609a      	str	r2, [r3, #8]
      break;
 80035ac:	e03c      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ba:	461a      	mov	r2, r3
 80035bc:	f000 fc2a 	bl	8003e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2150      	movs	r1, #80	@ 0x50
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fc83 	bl	8003ed2 <TIM_ITRx_SetConfig>
      break;
 80035cc:	e02c      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035da:	461a      	mov	r2, r3
 80035dc:	f000 fc49 	bl	8003e72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2160      	movs	r1, #96	@ 0x60
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fc73 	bl	8003ed2 <TIM_ITRx_SetConfig>
      break;
 80035ec:	e01c      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035fa:	461a      	mov	r2, r3
 80035fc:	f000 fc0a 	bl	8003e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2140      	movs	r1, #64	@ 0x40
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fc63 	bl	8003ed2 <TIM_ITRx_SetConfig>
      break;
 800360c:	e00c      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4619      	mov	r1, r3
 8003618:	4610      	mov	r0, r2
 800361a:	f000 fc5a 	bl	8003ed2 <TIM_ITRx_SetConfig>
      break;
 800361e:	e003      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
      break;
 8003624:	e000      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8003626:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003638:	7bfb      	ldrb	r3, [r7, #15]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	00100070 	.word	0x00100070
 8003648:	00100050 	.word	0x00100050
 800364c:	00100040 	.word	0x00100040
 8003650:	00100030 	.word	0x00100030
 8003654:	00100020 	.word	0x00100020

08003658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a4c      	ldr	r2, [pc, #304]	@ (800379c <TIM_Base_SetConfig+0x144>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d017      	beq.n	80036a0 <TIM_Base_SetConfig+0x48>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003676:	d013      	beq.n	80036a0 <TIM_Base_SetConfig+0x48>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a49      	ldr	r2, [pc, #292]	@ (80037a0 <TIM_Base_SetConfig+0x148>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d00f      	beq.n	80036a0 <TIM_Base_SetConfig+0x48>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a48      	ldr	r2, [pc, #288]	@ (80037a4 <TIM_Base_SetConfig+0x14c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00b      	beq.n	80036a0 <TIM_Base_SetConfig+0x48>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a47      	ldr	r2, [pc, #284]	@ (80037a8 <TIM_Base_SetConfig+0x150>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d007      	beq.n	80036a0 <TIM_Base_SetConfig+0x48>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a46      	ldr	r2, [pc, #280]	@ (80037ac <TIM_Base_SetConfig+0x154>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d003      	beq.n	80036a0 <TIM_Base_SetConfig+0x48>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a45      	ldr	r2, [pc, #276]	@ (80037b0 <TIM_Base_SetConfig+0x158>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d108      	bne.n	80036b2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a39      	ldr	r2, [pc, #228]	@ (800379c <TIM_Base_SetConfig+0x144>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d023      	beq.n	8003702 <TIM_Base_SetConfig+0xaa>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c0:	d01f      	beq.n	8003702 <TIM_Base_SetConfig+0xaa>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a36      	ldr	r2, [pc, #216]	@ (80037a0 <TIM_Base_SetConfig+0x148>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d01b      	beq.n	8003702 <TIM_Base_SetConfig+0xaa>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a35      	ldr	r2, [pc, #212]	@ (80037a4 <TIM_Base_SetConfig+0x14c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d017      	beq.n	8003702 <TIM_Base_SetConfig+0xaa>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a34      	ldr	r2, [pc, #208]	@ (80037a8 <TIM_Base_SetConfig+0x150>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d013      	beq.n	8003702 <TIM_Base_SetConfig+0xaa>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a33      	ldr	r2, [pc, #204]	@ (80037ac <TIM_Base_SetConfig+0x154>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00f      	beq.n	8003702 <TIM_Base_SetConfig+0xaa>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a33      	ldr	r2, [pc, #204]	@ (80037b4 <TIM_Base_SetConfig+0x15c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00b      	beq.n	8003702 <TIM_Base_SetConfig+0xaa>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a32      	ldr	r2, [pc, #200]	@ (80037b8 <TIM_Base_SetConfig+0x160>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d007      	beq.n	8003702 <TIM_Base_SetConfig+0xaa>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a31      	ldr	r2, [pc, #196]	@ (80037bc <TIM_Base_SetConfig+0x164>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d003      	beq.n	8003702 <TIM_Base_SetConfig+0xaa>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a2c      	ldr	r2, [pc, #176]	@ (80037b0 <TIM_Base_SetConfig+0x158>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d108      	bne.n	8003714 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a18      	ldr	r2, [pc, #96]	@ (800379c <TIM_Base_SetConfig+0x144>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d013      	beq.n	8003768 <TIM_Base_SetConfig+0x110>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a1a      	ldr	r2, [pc, #104]	@ (80037ac <TIM_Base_SetConfig+0x154>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00f      	beq.n	8003768 <TIM_Base_SetConfig+0x110>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a1a      	ldr	r2, [pc, #104]	@ (80037b4 <TIM_Base_SetConfig+0x15c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00b      	beq.n	8003768 <TIM_Base_SetConfig+0x110>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a19      	ldr	r2, [pc, #100]	@ (80037b8 <TIM_Base_SetConfig+0x160>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d007      	beq.n	8003768 <TIM_Base_SetConfig+0x110>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a18      	ldr	r2, [pc, #96]	@ (80037bc <TIM_Base_SetConfig+0x164>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <TIM_Base_SetConfig+0x110>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a13      	ldr	r2, [pc, #76]	@ (80037b0 <TIM_Base_SetConfig+0x158>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d103      	bne.n	8003770 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d105      	bne.n	800378e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f023 0201 	bic.w	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	611a      	str	r2, [r3, #16]
  }
}
 800378e:	bf00      	nop
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40012c00 	.word	0x40012c00
 80037a0:	40000400 	.word	0x40000400
 80037a4:	40000800 	.word	0x40000800
 80037a8:	40000c00 	.word	0x40000c00
 80037ac:	40013400 	.word	0x40013400
 80037b0:	40015000 	.word	0x40015000
 80037b4:	40014000 	.word	0x40014000
 80037b8:	40014400 	.word	0x40014400
 80037bc:	40014800 	.word	0x40014800

080037c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	f023 0201 	bic.w	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0303 	bic.w	r3, r3, #3
 80037fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f023 0302 	bic.w	r3, r3, #2
 800380c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a30      	ldr	r2, [pc, #192]	@ (80038dc <TIM_OC1_SetConfig+0x11c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d013      	beq.n	8003848 <TIM_OC1_SetConfig+0x88>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a2f      	ldr	r2, [pc, #188]	@ (80038e0 <TIM_OC1_SetConfig+0x120>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d00f      	beq.n	8003848 <TIM_OC1_SetConfig+0x88>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a2e      	ldr	r2, [pc, #184]	@ (80038e4 <TIM_OC1_SetConfig+0x124>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d00b      	beq.n	8003848 <TIM_OC1_SetConfig+0x88>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a2d      	ldr	r2, [pc, #180]	@ (80038e8 <TIM_OC1_SetConfig+0x128>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d007      	beq.n	8003848 <TIM_OC1_SetConfig+0x88>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a2c      	ldr	r2, [pc, #176]	@ (80038ec <TIM_OC1_SetConfig+0x12c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d003      	beq.n	8003848 <TIM_OC1_SetConfig+0x88>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a2b      	ldr	r2, [pc, #172]	@ (80038f0 <TIM_OC1_SetConfig+0x130>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d10c      	bne.n	8003862 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f023 0308 	bic.w	r3, r3, #8
 800384e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f023 0304 	bic.w	r3, r3, #4
 8003860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a1d      	ldr	r2, [pc, #116]	@ (80038dc <TIM_OC1_SetConfig+0x11c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <TIM_OC1_SetConfig+0xd2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a1c      	ldr	r2, [pc, #112]	@ (80038e0 <TIM_OC1_SetConfig+0x120>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00f      	beq.n	8003892 <TIM_OC1_SetConfig+0xd2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a1b      	ldr	r2, [pc, #108]	@ (80038e4 <TIM_OC1_SetConfig+0x124>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00b      	beq.n	8003892 <TIM_OC1_SetConfig+0xd2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a1a      	ldr	r2, [pc, #104]	@ (80038e8 <TIM_OC1_SetConfig+0x128>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d007      	beq.n	8003892 <TIM_OC1_SetConfig+0xd2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a19      	ldr	r2, [pc, #100]	@ (80038ec <TIM_OC1_SetConfig+0x12c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d003      	beq.n	8003892 <TIM_OC1_SetConfig+0xd2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a18      	ldr	r2, [pc, #96]	@ (80038f0 <TIM_OC1_SetConfig+0x130>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d111      	bne.n	80038b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	621a      	str	r2, [r3, #32]
}
 80038d0:	bf00      	nop
 80038d2:	371c      	adds	r7, #28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	40012c00 	.word	0x40012c00
 80038e0:	40013400 	.word	0x40013400
 80038e4:	40014000 	.word	0x40014000
 80038e8:	40014400 	.word	0x40014400
 80038ec:	40014800 	.word	0x40014800
 80038f0:	40015000 	.word	0x40015000

080038f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	f023 0210 	bic.w	r2, r3, #16
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003922:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800392e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f023 0320 	bic.w	r3, r3, #32
 8003942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a2c      	ldr	r2, [pc, #176]	@ (8003a04 <TIM_OC2_SetConfig+0x110>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d007      	beq.n	8003968 <TIM_OC2_SetConfig+0x74>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a2b      	ldr	r2, [pc, #172]	@ (8003a08 <TIM_OC2_SetConfig+0x114>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d003      	beq.n	8003968 <TIM_OC2_SetConfig+0x74>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a2a      	ldr	r2, [pc, #168]	@ (8003a0c <TIM_OC2_SetConfig+0x118>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d10d      	bne.n	8003984 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800396e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003982:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a1f      	ldr	r2, [pc, #124]	@ (8003a04 <TIM_OC2_SetConfig+0x110>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d013      	beq.n	80039b4 <TIM_OC2_SetConfig+0xc0>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a1e      	ldr	r2, [pc, #120]	@ (8003a08 <TIM_OC2_SetConfig+0x114>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d00f      	beq.n	80039b4 <TIM_OC2_SetConfig+0xc0>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a1e      	ldr	r2, [pc, #120]	@ (8003a10 <TIM_OC2_SetConfig+0x11c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00b      	beq.n	80039b4 <TIM_OC2_SetConfig+0xc0>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a1d      	ldr	r2, [pc, #116]	@ (8003a14 <TIM_OC2_SetConfig+0x120>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d007      	beq.n	80039b4 <TIM_OC2_SetConfig+0xc0>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a18 <TIM_OC2_SetConfig+0x124>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d003      	beq.n	80039b4 <TIM_OC2_SetConfig+0xc0>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a17      	ldr	r2, [pc, #92]	@ (8003a0c <TIM_OC2_SetConfig+0x118>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d113      	bne.n	80039dc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40012c00 	.word	0x40012c00
 8003a08:	40013400 	.word	0x40013400
 8003a0c:	40015000 	.word	0x40015000
 8003a10:	40014000 	.word	0x40014000
 8003a14:	40014400 	.word	0x40014400
 8003a18:	40014800 	.word	0x40014800

08003a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0303 	bic.w	r3, r3, #3
 8003a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a2b      	ldr	r2, [pc, #172]	@ (8003b28 <TIM_OC3_SetConfig+0x10c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <TIM_OC3_SetConfig+0x72>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a2a      	ldr	r2, [pc, #168]	@ (8003b2c <TIM_OC3_SetConfig+0x110>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d003      	beq.n	8003a8e <TIM_OC3_SetConfig+0x72>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a29      	ldr	r2, [pc, #164]	@ (8003b30 <TIM_OC3_SetConfig+0x114>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10d      	bne.n	8003aaa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a1e      	ldr	r2, [pc, #120]	@ (8003b28 <TIM_OC3_SetConfig+0x10c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <TIM_OC3_SetConfig+0xbe>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b2c <TIM_OC3_SetConfig+0x110>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00f      	beq.n	8003ada <TIM_OC3_SetConfig+0xbe>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a1d      	ldr	r2, [pc, #116]	@ (8003b34 <TIM_OC3_SetConfig+0x118>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00b      	beq.n	8003ada <TIM_OC3_SetConfig+0xbe>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b38 <TIM_OC3_SetConfig+0x11c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d007      	beq.n	8003ada <TIM_OC3_SetConfig+0xbe>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a1b      	ldr	r2, [pc, #108]	@ (8003b3c <TIM_OC3_SetConfig+0x120>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d003      	beq.n	8003ada <TIM_OC3_SetConfig+0xbe>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a16      	ldr	r2, [pc, #88]	@ (8003b30 <TIM_OC3_SetConfig+0x114>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d113      	bne.n	8003b02 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	621a      	str	r2, [r3, #32]
}
 8003b1c:	bf00      	nop
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	40012c00 	.word	0x40012c00
 8003b2c:	40013400 	.word	0x40013400
 8003b30:	40015000 	.word	0x40015000
 8003b34:	40014000 	.word	0x40014000
 8003b38:	40014400 	.word	0x40014400
 8003b3c:	40014800 	.word	0x40014800

08003b40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	031b      	lsls	r3, r3, #12
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a2c      	ldr	r2, [pc, #176]	@ (8003c50 <TIM_OC4_SetConfig+0x110>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d007      	beq.n	8003bb4 <TIM_OC4_SetConfig+0x74>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8003c54 <TIM_OC4_SetConfig+0x114>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d003      	beq.n	8003bb4 <TIM_OC4_SetConfig+0x74>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a2a      	ldr	r2, [pc, #168]	@ (8003c58 <TIM_OC4_SetConfig+0x118>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d10d      	bne.n	8003bd0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	031b      	lsls	r3, r3, #12
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8003c50 <TIM_OC4_SetConfig+0x110>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d013      	beq.n	8003c00 <TIM_OC4_SetConfig+0xc0>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a1e      	ldr	r2, [pc, #120]	@ (8003c54 <TIM_OC4_SetConfig+0x114>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00f      	beq.n	8003c00 <TIM_OC4_SetConfig+0xc0>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a1e      	ldr	r2, [pc, #120]	@ (8003c5c <TIM_OC4_SetConfig+0x11c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00b      	beq.n	8003c00 <TIM_OC4_SetConfig+0xc0>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a1d      	ldr	r2, [pc, #116]	@ (8003c60 <TIM_OC4_SetConfig+0x120>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d007      	beq.n	8003c00 <TIM_OC4_SetConfig+0xc0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8003c64 <TIM_OC4_SetConfig+0x124>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d003      	beq.n	8003c00 <TIM_OC4_SetConfig+0xc0>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a17      	ldr	r2, [pc, #92]	@ (8003c58 <TIM_OC4_SetConfig+0x118>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d113      	bne.n	8003c28 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c06:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003c0e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	019b      	lsls	r3, r3, #6
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	019b      	lsls	r3, r3, #6
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	621a      	str	r2, [r3, #32]
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40012c00 	.word	0x40012c00
 8003c54:	40013400 	.word	0x40013400
 8003c58:	40015000 	.word	0x40015000
 8003c5c:	40014000 	.word	0x40014000
 8003c60:	40014400 	.word	0x40014400
 8003c64:	40014800 	.word	0x40014800

08003c68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003cac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	041b      	lsls	r3, r3, #16
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a19      	ldr	r2, [pc, #100]	@ (8003d24 <TIM_OC5_SetConfig+0xbc>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <TIM_OC5_SetConfig+0x82>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a18      	ldr	r2, [pc, #96]	@ (8003d28 <TIM_OC5_SetConfig+0xc0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00f      	beq.n	8003cea <TIM_OC5_SetConfig+0x82>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a17      	ldr	r2, [pc, #92]	@ (8003d2c <TIM_OC5_SetConfig+0xc4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00b      	beq.n	8003cea <TIM_OC5_SetConfig+0x82>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a16      	ldr	r2, [pc, #88]	@ (8003d30 <TIM_OC5_SetConfig+0xc8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d007      	beq.n	8003cea <TIM_OC5_SetConfig+0x82>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a15      	ldr	r2, [pc, #84]	@ (8003d34 <TIM_OC5_SetConfig+0xcc>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d003      	beq.n	8003cea <TIM_OC5_SetConfig+0x82>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a14      	ldr	r2, [pc, #80]	@ (8003d38 <TIM_OC5_SetConfig+0xd0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d109      	bne.n	8003cfe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	621a      	str	r2, [r3, #32]
}
 8003d18:	bf00      	nop
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	40013400 	.word	0x40013400
 8003d2c:	40014000 	.word	0x40014000
 8003d30:	40014400 	.word	0x40014400
 8003d34:	40014800 	.word	0x40014800
 8003d38:	40015000 	.word	0x40015000

08003d3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	021b      	lsls	r3, r3, #8
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	051b      	lsls	r3, r3, #20
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a1a      	ldr	r2, [pc, #104]	@ (8003dfc <TIM_OC6_SetConfig+0xc0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d013      	beq.n	8003dc0 <TIM_OC6_SetConfig+0x84>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a19      	ldr	r2, [pc, #100]	@ (8003e00 <TIM_OC6_SetConfig+0xc4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00f      	beq.n	8003dc0 <TIM_OC6_SetConfig+0x84>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a18      	ldr	r2, [pc, #96]	@ (8003e04 <TIM_OC6_SetConfig+0xc8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00b      	beq.n	8003dc0 <TIM_OC6_SetConfig+0x84>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a17      	ldr	r2, [pc, #92]	@ (8003e08 <TIM_OC6_SetConfig+0xcc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d007      	beq.n	8003dc0 <TIM_OC6_SetConfig+0x84>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a16      	ldr	r2, [pc, #88]	@ (8003e0c <TIM_OC6_SetConfig+0xd0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d003      	beq.n	8003dc0 <TIM_OC6_SetConfig+0x84>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a15      	ldr	r2, [pc, #84]	@ (8003e10 <TIM_OC6_SetConfig+0xd4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d109      	bne.n	8003dd4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	029b      	lsls	r3, r3, #10
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	621a      	str	r2, [r3, #32]
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40012c00 	.word	0x40012c00
 8003e00:	40013400 	.word	0x40013400
 8003e04:	40014000 	.word	0x40014000
 8003e08:	40014400 	.word	0x40014400
 8003e0c:	40014800 	.word	0x40014800
 8003e10:	40015000 	.word	0x40015000

08003e14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	f023 0201 	bic.w	r2, r3, #1
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f023 030a 	bic.w	r3, r3, #10
 8003e50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	621a      	str	r2, [r3, #32]
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b087      	sub	sp, #28
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	f023 0210 	bic.w	r2, r3, #16
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	031b      	lsls	r3, r3, #12
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003eae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	621a      	str	r2, [r3, #32]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b085      	sub	sp, #20
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003ee8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f043 0307 	orr.w	r3, r3, #7
 8003ef8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	609a      	str	r2, [r3, #8]
}
 8003f00:	bf00      	nop
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	021a      	lsls	r2, r3, #8
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	609a      	str	r2, [r3, #8]
}
 8003f40:	bf00      	nop
 8003f42:	371c      	adds	r7, #28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	2201      	movs	r2, #1
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a1a      	ldr	r2, [r3, #32]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	401a      	ands	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a1a      	ldr	r2, [r3, #32]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f003 031f 	and.w	r3, r3, #31
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	fa01 f303 	lsl.w	r3, r1, r3
 8003f84:	431a      	orrs	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	621a      	str	r2, [r3, #32]
}
 8003f8a:	bf00      	nop
 8003f8c:	371c      	adds	r7, #28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e074      	b.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a34      	ldr	r2, [pc, #208]	@ (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d009      	beq.n	8003fee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a33      	ldr	r2, [pc, #204]	@ (80040ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d004      	beq.n	8003fee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a31      	ldr	r2, [pc, #196]	@ (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d108      	bne.n	8004000 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003ff4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800400a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a21      	ldr	r2, [pc, #132]	@ (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d022      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004030:	d01d      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1f      	ldr	r2, [pc, #124]	@ (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d018      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a1d      	ldr	r2, [pc, #116]	@ (80040b8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d013      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1c      	ldr	r2, [pc, #112]	@ (80040bc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d00e      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a15      	ldr	r2, [pc, #84]	@ (80040ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d009      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a18      	ldr	r2, [pc, #96]	@ (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d004      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a11      	ldr	r2, [pc, #68]	@ (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d10c      	bne.n	8004088 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004074:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	4313      	orrs	r3, r2
 800407e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40012c00 	.word	0x40012c00
 80040ac:	40013400 	.word	0x40013400
 80040b0:	40015000 	.word	0x40015000
 80040b4:	40000400 	.word	0x40000400
 80040b8:	40000800 	.word	0x40000800
 80040bc:	40000c00 	.word	0x40000c00
 80040c0:	40014000 	.word	0x40014000

080040c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e042      	b.n	800415c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d106      	bne.n	80040ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7fd f8e1 	bl	80012b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2224      	movs	r2, #36	@ 0x24
 80040f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0201 	bic.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fb24 	bl	800475c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f825 	bl	8004164 <UART_SetConfig>
 800411a:	4603      	mov	r3, r0
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e01b      	b.n	800415c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004132:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004142:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 fba3 	bl	80048a0 <UART_CheckIdleState>
 800415a:	4603      	mov	r3, r0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004168:	b08c      	sub	sp, #48	@ 0x30
 800416a:	af00      	add	r7, sp, #0
 800416c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	431a      	orrs	r2, r3
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	431a      	orrs	r2, r3
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	4313      	orrs	r3, r2
 800418a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4baa      	ldr	r3, [pc, #680]	@ (800443c <UART_SetConfig+0x2d8>)
 8004194:	4013      	ands	r3, r2
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800419c:	430b      	orrs	r3, r1
 800419e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a9f      	ldr	r2, [pc, #636]	@ (8004440 <UART_SetConfig+0x2dc>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d004      	beq.n	80041d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041cc:	4313      	orrs	r3, r2
 80041ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80041da:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	6812      	ldr	r2, [r2, #0]
 80041e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041e4:	430b      	orrs	r3, r1
 80041e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ee:	f023 010f 	bic.w	r1, r3, #15
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a90      	ldr	r2, [pc, #576]	@ (8004444 <UART_SetConfig+0x2e0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d125      	bne.n	8004254 <UART_SetConfig+0xf0>
 8004208:	4b8f      	ldr	r3, [pc, #572]	@ (8004448 <UART_SetConfig+0x2e4>)
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	2b03      	cmp	r3, #3
 8004214:	d81a      	bhi.n	800424c <UART_SetConfig+0xe8>
 8004216:	a201      	add	r2, pc, #4	@ (adr r2, 800421c <UART_SetConfig+0xb8>)
 8004218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421c:	0800422d 	.word	0x0800422d
 8004220:	0800423d 	.word	0x0800423d
 8004224:	08004235 	.word	0x08004235
 8004228:	08004245 	.word	0x08004245
 800422c:	2301      	movs	r3, #1
 800422e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004232:	e116      	b.n	8004462 <UART_SetConfig+0x2fe>
 8004234:	2302      	movs	r3, #2
 8004236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800423a:	e112      	b.n	8004462 <UART_SetConfig+0x2fe>
 800423c:	2304      	movs	r3, #4
 800423e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004242:	e10e      	b.n	8004462 <UART_SetConfig+0x2fe>
 8004244:	2308      	movs	r3, #8
 8004246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800424a:	e10a      	b.n	8004462 <UART_SetConfig+0x2fe>
 800424c:	2310      	movs	r3, #16
 800424e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004252:	e106      	b.n	8004462 <UART_SetConfig+0x2fe>
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a7c      	ldr	r2, [pc, #496]	@ (800444c <UART_SetConfig+0x2e8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d138      	bne.n	80042d0 <UART_SetConfig+0x16c>
 800425e:	4b7a      	ldr	r3, [pc, #488]	@ (8004448 <UART_SetConfig+0x2e4>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004264:	f003 030c 	and.w	r3, r3, #12
 8004268:	2b0c      	cmp	r3, #12
 800426a:	d82d      	bhi.n	80042c8 <UART_SetConfig+0x164>
 800426c:	a201      	add	r2, pc, #4	@ (adr r2, 8004274 <UART_SetConfig+0x110>)
 800426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004272:	bf00      	nop
 8004274:	080042a9 	.word	0x080042a9
 8004278:	080042c9 	.word	0x080042c9
 800427c:	080042c9 	.word	0x080042c9
 8004280:	080042c9 	.word	0x080042c9
 8004284:	080042b9 	.word	0x080042b9
 8004288:	080042c9 	.word	0x080042c9
 800428c:	080042c9 	.word	0x080042c9
 8004290:	080042c9 	.word	0x080042c9
 8004294:	080042b1 	.word	0x080042b1
 8004298:	080042c9 	.word	0x080042c9
 800429c:	080042c9 	.word	0x080042c9
 80042a0:	080042c9 	.word	0x080042c9
 80042a4:	080042c1 	.word	0x080042c1
 80042a8:	2300      	movs	r3, #0
 80042aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ae:	e0d8      	b.n	8004462 <UART_SetConfig+0x2fe>
 80042b0:	2302      	movs	r3, #2
 80042b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042b6:	e0d4      	b.n	8004462 <UART_SetConfig+0x2fe>
 80042b8:	2304      	movs	r3, #4
 80042ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042be:	e0d0      	b.n	8004462 <UART_SetConfig+0x2fe>
 80042c0:	2308      	movs	r3, #8
 80042c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042c6:	e0cc      	b.n	8004462 <UART_SetConfig+0x2fe>
 80042c8:	2310      	movs	r3, #16
 80042ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ce:	e0c8      	b.n	8004462 <UART_SetConfig+0x2fe>
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a5e      	ldr	r2, [pc, #376]	@ (8004450 <UART_SetConfig+0x2ec>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d125      	bne.n	8004326 <UART_SetConfig+0x1c2>
 80042da:	4b5b      	ldr	r3, [pc, #364]	@ (8004448 <UART_SetConfig+0x2e4>)
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80042e4:	2b30      	cmp	r3, #48	@ 0x30
 80042e6:	d016      	beq.n	8004316 <UART_SetConfig+0x1b2>
 80042e8:	2b30      	cmp	r3, #48	@ 0x30
 80042ea:	d818      	bhi.n	800431e <UART_SetConfig+0x1ba>
 80042ec:	2b20      	cmp	r3, #32
 80042ee:	d00a      	beq.n	8004306 <UART_SetConfig+0x1a2>
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	d814      	bhi.n	800431e <UART_SetConfig+0x1ba>
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <UART_SetConfig+0x19a>
 80042f8:	2b10      	cmp	r3, #16
 80042fa:	d008      	beq.n	800430e <UART_SetConfig+0x1aa>
 80042fc:	e00f      	b.n	800431e <UART_SetConfig+0x1ba>
 80042fe:	2300      	movs	r3, #0
 8004300:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004304:	e0ad      	b.n	8004462 <UART_SetConfig+0x2fe>
 8004306:	2302      	movs	r3, #2
 8004308:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800430c:	e0a9      	b.n	8004462 <UART_SetConfig+0x2fe>
 800430e:	2304      	movs	r3, #4
 8004310:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004314:	e0a5      	b.n	8004462 <UART_SetConfig+0x2fe>
 8004316:	2308      	movs	r3, #8
 8004318:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800431c:	e0a1      	b.n	8004462 <UART_SetConfig+0x2fe>
 800431e:	2310      	movs	r3, #16
 8004320:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004324:	e09d      	b.n	8004462 <UART_SetConfig+0x2fe>
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a4a      	ldr	r2, [pc, #296]	@ (8004454 <UART_SetConfig+0x2f0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d125      	bne.n	800437c <UART_SetConfig+0x218>
 8004330:	4b45      	ldr	r3, [pc, #276]	@ (8004448 <UART_SetConfig+0x2e4>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004336:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800433a:	2bc0      	cmp	r3, #192	@ 0xc0
 800433c:	d016      	beq.n	800436c <UART_SetConfig+0x208>
 800433e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004340:	d818      	bhi.n	8004374 <UART_SetConfig+0x210>
 8004342:	2b80      	cmp	r3, #128	@ 0x80
 8004344:	d00a      	beq.n	800435c <UART_SetConfig+0x1f8>
 8004346:	2b80      	cmp	r3, #128	@ 0x80
 8004348:	d814      	bhi.n	8004374 <UART_SetConfig+0x210>
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <UART_SetConfig+0x1f0>
 800434e:	2b40      	cmp	r3, #64	@ 0x40
 8004350:	d008      	beq.n	8004364 <UART_SetConfig+0x200>
 8004352:	e00f      	b.n	8004374 <UART_SetConfig+0x210>
 8004354:	2300      	movs	r3, #0
 8004356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800435a:	e082      	b.n	8004462 <UART_SetConfig+0x2fe>
 800435c:	2302      	movs	r3, #2
 800435e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004362:	e07e      	b.n	8004462 <UART_SetConfig+0x2fe>
 8004364:	2304      	movs	r3, #4
 8004366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800436a:	e07a      	b.n	8004462 <UART_SetConfig+0x2fe>
 800436c:	2308      	movs	r3, #8
 800436e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004372:	e076      	b.n	8004462 <UART_SetConfig+0x2fe>
 8004374:	2310      	movs	r3, #16
 8004376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800437a:	e072      	b.n	8004462 <UART_SetConfig+0x2fe>
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a35      	ldr	r2, [pc, #212]	@ (8004458 <UART_SetConfig+0x2f4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d12a      	bne.n	80043dc <UART_SetConfig+0x278>
 8004386:	4b30      	ldr	r3, [pc, #192]	@ (8004448 <UART_SetConfig+0x2e4>)
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004390:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004394:	d01a      	beq.n	80043cc <UART_SetConfig+0x268>
 8004396:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800439a:	d81b      	bhi.n	80043d4 <UART_SetConfig+0x270>
 800439c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043a0:	d00c      	beq.n	80043bc <UART_SetConfig+0x258>
 80043a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043a6:	d815      	bhi.n	80043d4 <UART_SetConfig+0x270>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <UART_SetConfig+0x250>
 80043ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043b0:	d008      	beq.n	80043c4 <UART_SetConfig+0x260>
 80043b2:	e00f      	b.n	80043d4 <UART_SetConfig+0x270>
 80043b4:	2300      	movs	r3, #0
 80043b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ba:	e052      	b.n	8004462 <UART_SetConfig+0x2fe>
 80043bc:	2302      	movs	r3, #2
 80043be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043c2:	e04e      	b.n	8004462 <UART_SetConfig+0x2fe>
 80043c4:	2304      	movs	r3, #4
 80043c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ca:	e04a      	b.n	8004462 <UART_SetConfig+0x2fe>
 80043cc:	2308      	movs	r3, #8
 80043ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043d2:	e046      	b.n	8004462 <UART_SetConfig+0x2fe>
 80043d4:	2310      	movs	r3, #16
 80043d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043da:	e042      	b.n	8004462 <UART_SetConfig+0x2fe>
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a17      	ldr	r2, [pc, #92]	@ (8004440 <UART_SetConfig+0x2dc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d13a      	bne.n	800445c <UART_SetConfig+0x2f8>
 80043e6:	4b18      	ldr	r3, [pc, #96]	@ (8004448 <UART_SetConfig+0x2e4>)
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80043f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043f4:	d01a      	beq.n	800442c <UART_SetConfig+0x2c8>
 80043f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043fa:	d81b      	bhi.n	8004434 <UART_SetConfig+0x2d0>
 80043fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004400:	d00c      	beq.n	800441c <UART_SetConfig+0x2b8>
 8004402:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004406:	d815      	bhi.n	8004434 <UART_SetConfig+0x2d0>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <UART_SetConfig+0x2b0>
 800440c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004410:	d008      	beq.n	8004424 <UART_SetConfig+0x2c0>
 8004412:	e00f      	b.n	8004434 <UART_SetConfig+0x2d0>
 8004414:	2300      	movs	r3, #0
 8004416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800441a:	e022      	b.n	8004462 <UART_SetConfig+0x2fe>
 800441c:	2302      	movs	r3, #2
 800441e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004422:	e01e      	b.n	8004462 <UART_SetConfig+0x2fe>
 8004424:	2304      	movs	r3, #4
 8004426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800442a:	e01a      	b.n	8004462 <UART_SetConfig+0x2fe>
 800442c:	2308      	movs	r3, #8
 800442e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004432:	e016      	b.n	8004462 <UART_SetConfig+0x2fe>
 8004434:	2310      	movs	r3, #16
 8004436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800443a:	e012      	b.n	8004462 <UART_SetConfig+0x2fe>
 800443c:	cfff69f3 	.word	0xcfff69f3
 8004440:	40008000 	.word	0x40008000
 8004444:	40013800 	.word	0x40013800
 8004448:	40021000 	.word	0x40021000
 800444c:	40004400 	.word	0x40004400
 8004450:	40004800 	.word	0x40004800
 8004454:	40004c00 	.word	0x40004c00
 8004458:	40005000 	.word	0x40005000
 800445c:	2310      	movs	r3, #16
 800445e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4aae      	ldr	r2, [pc, #696]	@ (8004720 <UART_SetConfig+0x5bc>)
 8004468:	4293      	cmp	r3, r2
 800446a:	f040 8097 	bne.w	800459c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800446e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004472:	2b08      	cmp	r3, #8
 8004474:	d823      	bhi.n	80044be <UART_SetConfig+0x35a>
 8004476:	a201      	add	r2, pc, #4	@ (adr r2, 800447c <UART_SetConfig+0x318>)
 8004478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447c:	080044a1 	.word	0x080044a1
 8004480:	080044bf 	.word	0x080044bf
 8004484:	080044a9 	.word	0x080044a9
 8004488:	080044bf 	.word	0x080044bf
 800448c:	080044af 	.word	0x080044af
 8004490:	080044bf 	.word	0x080044bf
 8004494:	080044bf 	.word	0x080044bf
 8004498:	080044bf 	.word	0x080044bf
 800449c:	080044b7 	.word	0x080044b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a0:	f7fe f862 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 80044a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044a6:	e010      	b.n	80044ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a8:	4b9e      	ldr	r3, [pc, #632]	@ (8004724 <UART_SetConfig+0x5c0>)
 80044aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044ac:	e00d      	b.n	80044ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ae:	f7fd ffed 	bl	800248c <HAL_RCC_GetSysClockFreq>
 80044b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044b4:	e009      	b.n	80044ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044bc:	e005      	b.n	80044ca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80044c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 8130 	beq.w	8004732 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d6:	4a94      	ldr	r2, [pc, #592]	@ (8004728 <UART_SetConfig+0x5c4>)
 80044d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044dc:	461a      	mov	r2, r3
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	4413      	add	r3, r2
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d305      	bcc.n	8004502 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d903      	bls.n	800450a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004508:	e113      	b.n	8004732 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450c:	2200      	movs	r2, #0
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	60fa      	str	r2, [r7, #12]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004516:	4a84      	ldr	r2, [pc, #528]	@ (8004728 <UART_SetConfig+0x5c4>)
 8004518:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800451c:	b29b      	uxth	r3, r3
 800451e:	2200      	movs	r2, #0
 8004520:	603b      	str	r3, [r7, #0]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004528:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800452c:	f7fb fe74 	bl	8000218 <__aeabi_uldivmod>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4610      	mov	r0, r2
 8004536:	4619      	mov	r1, r3
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	020b      	lsls	r3, r1, #8
 8004542:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004546:	0202      	lsls	r2, r0, #8
 8004548:	6979      	ldr	r1, [r7, #20]
 800454a:	6849      	ldr	r1, [r1, #4]
 800454c:	0849      	lsrs	r1, r1, #1
 800454e:	2000      	movs	r0, #0
 8004550:	460c      	mov	r4, r1
 8004552:	4605      	mov	r5, r0
 8004554:	eb12 0804 	adds.w	r8, r2, r4
 8004558:	eb43 0905 	adc.w	r9, r3, r5
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	469a      	mov	sl, r3
 8004564:	4693      	mov	fp, r2
 8004566:	4652      	mov	r2, sl
 8004568:	465b      	mov	r3, fp
 800456a:	4640      	mov	r0, r8
 800456c:	4649      	mov	r1, r9
 800456e:	f7fb fe53 	bl	8000218 <__aeabi_uldivmod>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4613      	mov	r3, r2
 8004578:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004580:	d308      	bcc.n	8004594 <UART_SetConfig+0x430>
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004588:	d204      	bcs.n	8004594 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6a3a      	ldr	r2, [r7, #32]
 8004590:	60da      	str	r2, [r3, #12]
 8004592:	e0ce      	b.n	8004732 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800459a:	e0ca      	b.n	8004732 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045a4:	d166      	bne.n	8004674 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80045a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d827      	bhi.n	80045fe <UART_SetConfig+0x49a>
 80045ae:	a201      	add	r2, pc, #4	@ (adr r2, 80045b4 <UART_SetConfig+0x450>)
 80045b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b4:	080045d9 	.word	0x080045d9
 80045b8:	080045e1 	.word	0x080045e1
 80045bc:	080045e9 	.word	0x080045e9
 80045c0:	080045ff 	.word	0x080045ff
 80045c4:	080045ef 	.word	0x080045ef
 80045c8:	080045ff 	.word	0x080045ff
 80045cc:	080045ff 	.word	0x080045ff
 80045d0:	080045ff 	.word	0x080045ff
 80045d4:	080045f7 	.word	0x080045f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d8:	f7fd ffc6 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 80045dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045de:	e014      	b.n	800460a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045e0:	f7fd ffd8 	bl	8002594 <HAL_RCC_GetPCLK2Freq>
 80045e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045e6:	e010      	b.n	800460a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e8:	4b4e      	ldr	r3, [pc, #312]	@ (8004724 <UART_SetConfig+0x5c0>)
 80045ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045ec:	e00d      	b.n	800460a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ee:	f7fd ff4d 	bl	800248c <HAL_RCC_GetSysClockFreq>
 80045f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045f4:	e009      	b.n	800460a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045fc:	e005      	b.n	800460a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004608:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800460a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 8090 	beq.w	8004732 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004616:	4a44      	ldr	r2, [pc, #272]	@ (8004728 <UART_SetConfig+0x5c4>)
 8004618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800461c:	461a      	mov	r2, r3
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004620:	fbb3 f3f2 	udiv	r3, r3, r2
 8004624:	005a      	lsls	r2, r3, #1
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	085b      	lsrs	r3, r3, #1
 800462c:	441a      	add	r2, r3
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	fbb2 f3f3 	udiv	r3, r2, r3
 8004636:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	2b0f      	cmp	r3, #15
 800463c:	d916      	bls.n	800466c <UART_SetConfig+0x508>
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004644:	d212      	bcs.n	800466c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	b29b      	uxth	r3, r3
 800464a:	f023 030f 	bic.w	r3, r3, #15
 800464e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	085b      	lsrs	r3, r3, #1
 8004654:	b29b      	uxth	r3, r3
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	b29a      	uxth	r2, r3
 800465c:	8bfb      	ldrh	r3, [r7, #30]
 800465e:	4313      	orrs	r3, r2
 8004660:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	8bfa      	ldrh	r2, [r7, #30]
 8004668:	60da      	str	r2, [r3, #12]
 800466a:	e062      	b.n	8004732 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004672:	e05e      	b.n	8004732 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004674:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004678:	2b08      	cmp	r3, #8
 800467a:	d828      	bhi.n	80046ce <UART_SetConfig+0x56a>
 800467c:	a201      	add	r2, pc, #4	@ (adr r2, 8004684 <UART_SetConfig+0x520>)
 800467e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004682:	bf00      	nop
 8004684:	080046a9 	.word	0x080046a9
 8004688:	080046b1 	.word	0x080046b1
 800468c:	080046b9 	.word	0x080046b9
 8004690:	080046cf 	.word	0x080046cf
 8004694:	080046bf 	.word	0x080046bf
 8004698:	080046cf 	.word	0x080046cf
 800469c:	080046cf 	.word	0x080046cf
 80046a0:	080046cf 	.word	0x080046cf
 80046a4:	080046c7 	.word	0x080046c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a8:	f7fd ff5e 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 80046ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046ae:	e014      	b.n	80046da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046b0:	f7fd ff70 	bl	8002594 <HAL_RCC_GetPCLK2Freq>
 80046b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046b6:	e010      	b.n	80046da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004724 <UART_SetConfig+0x5c0>)
 80046ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046bc:	e00d      	b.n	80046da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046be:	f7fd fee5 	bl	800248c <HAL_RCC_GetSysClockFreq>
 80046c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046c4:	e009      	b.n	80046da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046cc:	e005      	b.n	80046da <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80046d8:	bf00      	nop
    }

    if (pclk != 0U)
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d028      	beq.n	8004732 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	4a10      	ldr	r2, [pc, #64]	@ (8004728 <UART_SetConfig+0x5c4>)
 80046e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046ea:	461a      	mov	r2, r3
 80046ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	085b      	lsrs	r3, r3, #1
 80046f8:	441a      	add	r2, r3
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004702:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	2b0f      	cmp	r3, #15
 8004708:	d910      	bls.n	800472c <UART_SetConfig+0x5c8>
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004710:	d20c      	bcs.n	800472c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	b29a      	uxth	r2, r3
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60da      	str	r2, [r3, #12]
 800471c:	e009      	b.n	8004732 <UART_SetConfig+0x5ce>
 800471e:	bf00      	nop
 8004720:	40008000 	.word	0x40008000
 8004724:	00f42400 	.word	0x00f42400
 8004728:	08004e28 	.word	0x08004e28
      }
      else
      {
        ret = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2201      	movs	r2, #1
 8004736:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2201      	movs	r2, #1
 800473e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2200      	movs	r2, #0
 8004746:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2200      	movs	r2, #0
 800474c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800474e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004752:	4618      	mov	r0, r3
 8004754:	3730      	adds	r7, #48	@ 0x30
 8004756:	46bd      	mov	sp, r7
 8004758:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800475c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01a      	beq.n	8004872 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004856:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800485a:	d10a      	bne.n	8004872 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	605a      	str	r2, [r3, #4]
  }
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b098      	sub	sp, #96	@ 0x60
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048b0:	f7fc fe24 	bl	80014fc <HAL_GetTick>
 80048b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0308 	and.w	r3, r3, #8
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d12f      	bne.n	8004924 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048cc:	2200      	movs	r2, #0
 80048ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f88e 	bl	80049f4 <UART_WaitOnFlagUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d022      	beq.n	8004924 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	461a      	mov	r2, r3
 80048fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80048fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004902:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800490a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e6      	bne.n	80048de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e063      	b.n	80049ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b04      	cmp	r3, #4
 8004930:	d149      	bne.n	80049c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004932:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800493a:	2200      	movs	r2, #0
 800493c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f857 	bl	80049f4 <UART_WaitOnFlagUntilTimeout>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d03c      	beq.n	80049c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	623b      	str	r3, [r7, #32]
   return(result);
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004960:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800496a:	633b      	str	r3, [r7, #48]	@ 0x30
 800496c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e6      	bne.n	800494c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3308      	adds	r3, #8
 8004984:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	60fb      	str	r3, [r7, #12]
   return(result);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f023 0301 	bic.w	r3, r3, #1
 8004994:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3308      	adds	r3, #8
 800499c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800499e:	61fa      	str	r2, [r7, #28]
 80049a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	69b9      	ldr	r1, [r7, #24]
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	617b      	str	r3, [r7, #20]
   return(result);
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e5      	bne.n	800497e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e012      	b.n	80049ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2220      	movs	r2, #32
 80049d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3758      	adds	r7, #88	@ 0x58
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	4613      	mov	r3, r2
 8004a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a04:	e04f      	b.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a0c:	d04b      	beq.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a0e:	f7fc fd75 	bl	80014fc <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d302      	bcc.n	8004a24 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e04e      	b.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0304 	and.w	r3, r3, #4
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d037      	beq.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b80      	cmp	r3, #128	@ 0x80
 8004a3a:	d034      	beq.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b40      	cmp	r3, #64	@ 0x40
 8004a40:	d031      	beq.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	f003 0308 	and.w	r3, r3, #8
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d110      	bne.n	8004a72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2208      	movs	r2, #8
 8004a56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 f838 	bl	8004ace <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2208      	movs	r2, #8
 8004a62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e029      	b.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a80:	d111      	bne.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 f81e 	bl	8004ace <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e00f      	b.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69da      	ldr	r2, [r3, #28]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	bf0c      	ite	eq
 8004ab6:	2301      	moveq	r3, #1
 8004ab8:	2300      	movne	r3, #0
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	461a      	mov	r2, r3
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d0a0      	beq.n	8004a06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b095      	sub	sp, #84	@ 0x54
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ade:	e853 3f00 	ldrex	r3, [r3]
 8004ae2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	461a      	mov	r2, r3
 8004af2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004af4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004af6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004afa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004afc:	e841 2300 	strex	r3, r2, [r1]
 8004b00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1e6      	bne.n	8004ad6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3308      	adds	r3, #8
 8004b0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	e853 3f00 	ldrex	r3, [r3]
 8004b16:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b1e:	f023 0301 	bic.w	r3, r3, #1
 8004b22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3308      	adds	r3, #8
 8004b2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b34:	e841 2300 	strex	r3, r2, [r1]
 8004b38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e3      	bne.n	8004b08 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d118      	bne.n	8004b7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	e853 3f00 	ldrex	r3, [r3]
 8004b54:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f023 0310 	bic.w	r3, r3, #16
 8004b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6a:	6979      	ldr	r1, [r7, #20]
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	613b      	str	r3, [r7, #16]
   return(result);
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e6      	bne.n	8004b48 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004b8e:	bf00      	nop
 8004b90:	3754      	adds	r7, #84	@ 0x54
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_UARTEx_DisableFifoMode+0x16>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e027      	b.n	8004c00 <HAL_UARTEx_DisableFifoMode+0x66>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2224      	movs	r2, #36	@ 0x24
 8004bbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0201 	bic.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004bde:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e02d      	b.n	8004c80 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2224      	movs	r2, #36	@ 0x24
 8004c30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0201 	bic.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f84f 	bl	8004d04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e02d      	b.n	8004cfc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2224      	movs	r2, #36	@ 0x24
 8004cac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0201 	bic.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f811 	bl	8004d04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d108      	bne.n	8004d26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d24:	e031      	b.n	8004d8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d26:	2308      	movs	r3, #8
 8004d28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d2a:	2308      	movs	r3, #8
 8004d2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	0e5b      	lsrs	r3, r3, #25
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	0f5b      	lsrs	r3, r3, #29
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d4e:	7bbb      	ldrb	r3, [r7, #14]
 8004d50:	7b3a      	ldrb	r2, [r7, #12]
 8004d52:	4911      	ldr	r1, [pc, #68]	@ (8004d98 <UARTEx_SetNbDataToProcess+0x94>)
 8004d54:	5c8a      	ldrb	r2, [r1, r2]
 8004d56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d5a:	7b3a      	ldrb	r2, [r7, #12]
 8004d5c:	490f      	ldr	r1, [pc, #60]	@ (8004d9c <UARTEx_SetNbDataToProcess+0x98>)
 8004d5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d60:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	7b7a      	ldrb	r2, [r7, #13]
 8004d70:	4909      	ldr	r1, [pc, #36]	@ (8004d98 <UARTEx_SetNbDataToProcess+0x94>)
 8004d72:	5c8a      	ldrb	r2, [r1, r2]
 8004d74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d78:	7b7a      	ldrb	r2, [r7, #13]
 8004d7a:	4908      	ldr	r1, [pc, #32]	@ (8004d9c <UARTEx_SetNbDataToProcess+0x98>)
 8004d7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004d8a:	bf00      	nop
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	08004e40 	.word	0x08004e40
 8004d9c:	08004e48 	.word	0x08004e48

08004da0 <memset>:
 8004da0:	4402      	add	r2, r0
 8004da2:	4603      	mov	r3, r0
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d100      	bne.n	8004daa <memset+0xa>
 8004da8:	4770      	bx	lr
 8004daa:	f803 1b01 	strb.w	r1, [r3], #1
 8004dae:	e7f9      	b.n	8004da4 <memset+0x4>

08004db0 <__libc_init_array>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	4d0d      	ldr	r5, [pc, #52]	@ (8004de8 <__libc_init_array+0x38>)
 8004db4:	4c0d      	ldr	r4, [pc, #52]	@ (8004dec <__libc_init_array+0x3c>)
 8004db6:	1b64      	subs	r4, r4, r5
 8004db8:	10a4      	asrs	r4, r4, #2
 8004dba:	2600      	movs	r6, #0
 8004dbc:	42a6      	cmp	r6, r4
 8004dbe:	d109      	bne.n	8004dd4 <__libc_init_array+0x24>
 8004dc0:	4d0b      	ldr	r5, [pc, #44]	@ (8004df0 <__libc_init_array+0x40>)
 8004dc2:	4c0c      	ldr	r4, [pc, #48]	@ (8004df4 <__libc_init_array+0x44>)
 8004dc4:	f000 f818 	bl	8004df8 <_init>
 8004dc8:	1b64      	subs	r4, r4, r5
 8004dca:	10a4      	asrs	r4, r4, #2
 8004dcc:	2600      	movs	r6, #0
 8004dce:	42a6      	cmp	r6, r4
 8004dd0:	d105      	bne.n	8004dde <__libc_init_array+0x2e>
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
 8004dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd8:	4798      	blx	r3
 8004dda:	3601      	adds	r6, #1
 8004ddc:	e7ee      	b.n	8004dbc <__libc_init_array+0xc>
 8004dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de2:	4798      	blx	r3
 8004de4:	3601      	adds	r6, #1
 8004de6:	e7f2      	b.n	8004dce <__libc_init_array+0x1e>
 8004de8:	08004e58 	.word	0x08004e58
 8004dec:	08004e58 	.word	0x08004e58
 8004df0:	08004e58 	.word	0x08004e58
 8004df4:	08004e5c 	.word	0x08004e5c

08004df8 <_init>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr

08004e04 <_fini>:
 8004e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e06:	bf00      	nop
 8004e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0a:	bc08      	pop	{r3}
 8004e0c:	469e      	mov	lr, r3
 8004e0e:	4770      	bx	lr
